
ISKBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800d740  0800d740  0000e740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800debc  0800debc  0000f360  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800debc  0800debc  0000eebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec4  0800dec4  0000f360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec4  0800dec4  0000eec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dec8  0800dec8  0000eec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  0800decc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db4  20000360  0800e22c  0000f360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002114  0800e22c  00010114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e57  00000000  00000000  0000f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f02  00000000  00000000  000311e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e38  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001752  00000000  00000000  00037f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002754a  00000000  00000000  0003967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024796  00000000  00000000  00060bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee16a  00000000  00000000  0008535a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001734c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f74  00000000  00000000  00173508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0017c47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d728 	.word	0x0800d728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0800d728 	.word	0x0800d728

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eea:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000eec:	4a31      	ldr	r2, [pc, #196]	@ (8000fb4 <MX_ADC1_Init+0xe0>)
 8000eee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f02:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f14:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000f28:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f52:	f001 fcd5 	bl	8002900 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f000 fa69 	bl	8001432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_ADC1_Init+0xe4>)
 8000f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f64:	2306      	movs	r3, #6
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f6c:	237f      	movs	r3, #127	@ 0x7f
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f70:	2304      	movs	r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f7e:	f001 fe01 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000f88:	f000 fa53 	bl	8001432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_ADC1_Init+0xe8>)
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f90:	230c      	movs	r3, #12
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_ADC1_Init+0xdc>)
 8000f9a:	f001 fdf3 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000fa4:	f000 fa45 	bl	8001432 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000037c 	.word	0x2000037c
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	3ef08000 	.word	0x3ef08000
 8000fbc:	43210000 	.word	0x43210000

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0a0      	sub	sp, #128	@ 0x80
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	225c      	movs	r2, #92	@ 0x5c
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00a fd41 	bl	800ba68 <memset>
  if(adcHandle->Instance==ADC1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a25      	ldr	r2, [pc, #148]	@ (8001080 <HAL_ADC_MspInit+0xc0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d142      	bne.n	8001076 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ff4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ff6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ffa:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 9;
 8001004:	2309      	movs	r3, #9
 8001006:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001008:	2307      	movs	r3, #7
 800100a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 8001010:	2306      	movs	r3, #6
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fb8c 	bl	800473c <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800102a:	f000 fa02 	bl	8001432 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 8001034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_ADC_MspInit+0xc4>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = AdcLux_Pin|AdcMic_Pin;
 800105e:	2303      	movs	r3, #3
 8001060:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001062:	230b      	movs	r3, #11
 8001064:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <HAL_ADC_MspInit+0xc8>)
 8001072:	f002 faf9 	bl	8003668 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3780      	adds	r7, #128	@ 0x80
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	50040000 	.word	0x50040000
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <DS18B20_Reset>:
* 然后释放总线，等到15-60us，此时18B20将返回一个60-240us之间的低电平存在信号。
* 输入：无
* 输出：1=存在，0=不存在, -1=超时
*****************************************************************************/
uint8_t DS18B20_Reset(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    uint8_t presence = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
    /* 主设备拉低电平至少 480us，以产生复位脉冲 */
    DS18B20_Set(0);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f002 fc74 	bl	800398c <HAL_GPIO_WritePin>
    delay_us(600);
 80010a4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80010a8:	f000 fcc8 	bl	8001a3c <delay_us>

    /* 主设备释放总线:拉低电平 15~60us */
    DS18B20_Set(1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b6:	f002 fc69 	bl	800398c <HAL_GPIO_WritePin>
    delay_us(60);
 80010ba:	203c      	movs	r0, #60	@ 0x3c
 80010bc:	f000 fcbe 	bl	8001a3c <delay_us>

    /* 主设备检测 DS18B20 响应的低电平 */
    /* DS18B20芯片在收到主机发送过来的这个复位脉冲后，将会拉低总线 60~240 us */
    presence = DS18B20_Get();
 80010c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f002 fc48 	bl	800395c <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
    delay_us(240);
 80010d0:	20f0      	movs	r0, #240	@ 0xf0
 80010d2:	f000 fcb3 	bl	8001a3c <delay_us>

    return !presence;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <DS18B20_Init>:

* 输入：无
* 输出：无
*****************************************************************************/
void DS18B20_Init(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
    // 复位DS18B20
    DS18B20_Reset();
 80010ee:	f7ff ffcd 	bl	800108c <DS18B20_Reset>

    // 发送跳过ROM命令
    DS18B20_WriteByte(DS18B20_CMD_SKIP_ROM);
 80010f2:	20cc      	movs	r0, #204	@ 0xcc
 80010f4:	f000 f802 	bl	80010fc <DS18B20_WriteByte>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <DS18B20_WriteByte>:
* 4.注意：2次写周期之间至少间隔1us
* 输入：无
* 输出：无
*****************************************************************************/
void DS18B20_WriteByte(uint8_t byte)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	/* 发送 8 bit数据 */
    for (uint8_t i = 0; i < 8; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e02c      	b.n	8001166 <DS18B20_WriteByte+0x6a>
    {
        /* 写时序开始标志：主机拉低总线>=1us */
        DS18B20_Set(0);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001116:	f002 fc39 	bl	800398c <HAL_GPIO_WritePin>

        if (byte & (1 << i))  // 发送 1
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	fa42 f303 	asr.w	r3, r2, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00d      	beq.n	8001146 <DS18B20_WriteByte+0x4a>
        {
        	delay_us(2);
 800112a:	2002      	movs	r0, #2
 800112c:	f000 fc86 	bl	8001a3c <delay_us>
            DS18B20_Set(1);  // 释放总线
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113a:	f002 fc27 	bl	800398c <HAL_GPIO_WritePin>
            delay_us(60);
 800113e:	203c      	movs	r0, #60	@ 0x3c
 8001140:	f000 fc7c 	bl	8001a3c <delay_us>
 8001144:	e00c      	b.n	8001160 <DS18B20_WriteByte+0x64>
        }
        else  // 发送 0
        {
        	delay_us(60);
 8001146:	203c      	movs	r0, #60	@ 0x3c
 8001148:	f000 fc78 	bl	8001a3c <delay_us>
            DS18B20_Set(1);  // 释放总线
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f002 fc19 	bl	800398c <HAL_GPIO_WritePin>
            delay_us(2);
 800115a:	2002      	movs	r0, #2
 800115c:	f000 fc6e 	bl	8001a3c <delay_us>
    for (uint8_t i = 0; i < 8; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b07      	cmp	r3, #7
 800116a:	d9cf      	bls.n	800110c <DS18B20_WriteByte+0x10>
        }
    }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <MX_FREERTOS_Init+0x18>)
 800117e:	2100      	movs	r1, #0
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_FREERTOS_Init+0x1c>)
 8001182:	f007 f8a9 	bl	80082d8 <osThreadNew>
 8001186:	4603      	mov	r3, r0
 8001188:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <MX_FREERTOS_Init+0x20>)
 800118a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800dadc 	.word	0x0800dadc
 8001194:	0800119d 	.word	0x0800119d
 8001198:	200003e0 	.word	0x200003e0

0800119c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f007 f929 	bl	80083fc <osDelay>
 80011aa:	e7fb      	b.n	80011a4 <StartDefaultTask+0x8>

080011ac <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b59      	ldr	r3, [pc, #356]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b56      	ldr	r3, [pc, #344]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a55      	ldr	r2, [pc, #340]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001334 <MX_GPIO_Init+0x188>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001334 <MX_GPIO_Init+0x188>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <MX_GPIO_Init+0x188>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a49      	ldr	r2, [pc, #292]	@ (8001334 <MX_GPIO_Init+0x188>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <MX_GPIO_Init+0x188>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <MX_GPIO_Init+0x188>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a43      	ldr	r2, [pc, #268]	@ (8001334 <MX_GPIO_Init+0x188>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <MX_GPIO_Init+0x188>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LedSys_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8001240:	483d      	ldr	r0, [pc, #244]	@ (8001338 <MX_GPIO_Init+0x18c>)
 8001242:	f002 fba3 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBlue_GPIO_Port, LedBlue_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2104      	movs	r1, #4
 800124a:	483c      	ldr	r0, [pc, #240]	@ (800133c <MX_GPIO_Init+0x190>)
 800124c:	f002 fb9e 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18b20_GPIO_Port, DS18b20_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	f002 fb97 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2104      	movs	r1, #4
 8001262:	4837      	ldr	r0, [pc, #220]	@ (8001340 <MX_GPIO_Init+0x194>)
 8001264:	f002 fb92 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LedSys_Pin LedGreen_Pin LedRed_Pin */
  GPIO_InitStruct.Pin = LedSys_Pin|LedGreen_Pin|LedRed_Pin;
 8001268:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	482d      	ldr	r0, [pc, #180]	@ (8001338 <MX_GPIO_Init+0x18c>)
 8001282:	f002 f9f1 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedBlue_Pin */
  GPIO_InitStruct.Pin = LedBlue_Pin;
 8001286:	2304      	movs	r3, #4
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedBlue_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4827      	ldr	r0, [pc, #156]	@ (800133c <MX_GPIO_Init+0x190>)
 800129e:	f002 f9e3 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key1_Pin Key2_Pin Key3_Pin */
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin|Key3_Pin;
 80012a2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4820      	ldr	r0, [pc, #128]	@ (800133c <MX_GPIO_Init+0x190>)
 80012ba:	f002 f9d5 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18b20_Pin */
  GPIO_InitStruct.Pin = DS18b20_Pin;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18b20_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012da:	f002 f9c5 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 80012de:	2304      	movs	r3, #4
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4812      	ldr	r0, [pc, #72]	@ (8001340 <MX_GPIO_Init+0x194>)
 80012f6:	f002 f9b7 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23c0      	movs	r3, #192	@ 0xc0
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130a:	2304      	movs	r3, #4
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	@ (800133c <MX_GPIO_Init+0x190>)
 8001316:	f002 f9a7 	bl	8003668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	2028      	movs	r0, #40	@ 0x28
 8001320:	f002 f8ed 	bl	80034fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001324:	2028      	movs	r0, #40	@ 0x28
 8001326:	f002 f906 	bl	8003536 <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	48000800 	.word	0x48000800
 800133c:	48000400 	.word	0x48000400
 8001340:	48000c00 	.word	0x48000c00

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint32_t		lux, noisy;  		/* 光强值，噪音值 */
  uint32_t		start = 0;   		/* 用来控制超时时间 */
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  uint8_t		light_status = 0;	/* 当前灯的状态 OFF */
 800134e:	2300      	movs	r3, #0
 8001350:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f001 f8b0 	bl	80024b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f81d 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f7ff ff27 	bl	80011ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800135e:	f000 fbc5 	bl	8001aec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001362:	f7ff fdb7 	bl	8000ed4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001366:	f000 fabb 	bl	80018e0 <MX_TIM6_Init>
  MX_TIM1_Init();
 800136a:	f000 fa2b 	bl	80017c4 <MX_TIM1_Init>
  MX_SPI1_Init();
 800136e:	f000 f867 	bl	8001440 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_Init();
 8001372:	f7ff feba 	bl	80010ea <DS18B20_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001376:	f006 ff65 	bl	8008244 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800137a:	f7ff fefd 	bl	8001178 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800137e:	f006 ff85 	bl	800828c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  sysled_hearbeat(); 		/* 心跳灯闪烁 */
  beep_start(2, 300); 	/* 蜂鸣器响两声 */
 8001382:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001386:	2002      	movs	r0, #2
 8001388:	f000 fb80 	bl	8001a8c <beep_start>
  spinor_test();
 800138c:	f000 fd34 	bl	8001df8 <spinor_test>
  do {} while(1);
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <main+0x4c>

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	@ 0x58
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2244      	movs	r2, #68	@ 0x44
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00a fb60 	bl	800ba68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013ba:	f002 fb31 	bl	8003a20 <HAL_PWREx_ControlVoltageScaling>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013c4:	f000 f835 	bl	8001432 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	2303      	movs	r3, #3
 80013d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80013de:	2314      	movs	r3, #20
 80013e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013e2:	2307      	movs	r3, #7
 80013e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fb6a 	bl	8003acc <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013fe:	f000 f818 	bl	8001432 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2303      	movs	r3, #3
 8001408:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f002 ff6a 	bl	80042f4 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001426:	f000 f804 	bl	8001432 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3758      	adds	r7, #88	@ 0x58
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001436:	b672      	cpsid	i
}
 8001438:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143a:	bf00      	nop
 800143c:	e7fd      	b.n	800143a <Error_Handler+0x8>
	...

08001440 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <MX_SPI1_Init+0x78>)
 8001448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_SPI1_Init+0x74>)
 800144c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_SPI1_Init+0x74>)
 800145a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800145e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_SPI1_Init+0x74>)
 800146e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001472:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001476:	2208      	movs	r2, #8
 8001478:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_SPI1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_SPI1_Init+0x74>)
 800148e:	2207      	movs	r2, #7
 8001490:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_SPI1_Init+0x74>)
 800149a:	2208      	movs	r2, #8
 800149c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_SPI1_Init+0x74>)
 80014a0:	f003 fc56 	bl	8004d50 <HAL_SPI_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014aa:	f7ff ffc2 	bl	8001432 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200003e4 	.word	0x200003e4
 80014b8:	40013000 	.word	0x40013000

080014bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <HAL_SPI_MspInit+0x7c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d128      	bne.n	8001530 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_SPI_MspInit+0x80>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <HAL_SPI_MspInit+0x80>)
 80014e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_SPI_MspInit+0x80>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_SPI_MspInit+0x80>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <HAL_SPI_MspInit+0x80>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_SPI_MspInit+0x80>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800150e:	23e0      	movs	r3, #224	@ 0xe0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f002 f89c 	bl	8003668 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013000 	.word	0x40013000
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_MspInit+0x4c>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <HAL_MspInit+0x4c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6613      	str	r3, [r2, #96]	@ 0x60
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_MspInit+0x4c>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_MspInit+0x4c>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_MspInit+0x4c>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	210f      	movs	r1, #15
 800157a:	f06f 0001 	mvn.w	r0, #1
 800157e:	f001 ffbe 	bl	80034fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <NMI_Handler+0x4>

08001598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <MemManage_Handler+0x4>

080015a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f000 ffc9 	bl	8002560 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015ce:	f008 fb3d 	bl	8009c4c <xTaskGetSchedulerState>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d001      	beq.n	80015dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015d8:	f009 f936 	bl	800a848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <USART1_IRQHandler+0x10>)
 80015e6:	f005 fb91 	bl	8006d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200005ec 	.word	0x200005ec

080015f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key1_Pin);
 80015f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015fc:	f002 f9de 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key2_Pin);
 8001600:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001604:	f002 f9da 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Key3_Pin);
 8001608:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800160c:	f002 f9d6 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return 1;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_kill>:

int _kill(int pid, int sig)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800162e:	f00a fa6d 	bl	800bb0c <__errno>
 8001632:	4603      	mov	r3, r0
 8001634:	2216      	movs	r2, #22
 8001636:	601a      	str	r2, [r3, #0]
  return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_exit>:

void _exit (int status)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffe7 	bl	8001624 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001656:	bf00      	nop
 8001658:	e7fd      	b.n	8001656 <_exit+0x12>

0800165a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00a      	b.n	8001682 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166c:	f3af 8000 	nop.w
 8001670:	4601      	mov	r1, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	b2ca      	uxtb	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbf0      	blt.n	800166c <_read+0x12>
  }

  return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e009      	b.n	80016ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fab2 	bl	8001c18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbf1      	blt.n	80016a6 <_write+0x12>
  }
  return len;
 80016c2:	687b      	ldr	r3, [r7, #4]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_close>:

int _close(int file)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f4:	605a      	str	r2, [r3, #4]
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_isatty>:

int _isatty(int file)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	@ (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f00a f9d2 	bl	800bb0c <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000c000 	.word	0x2000c000
 8001794:	00000400 	.word	0x00000400
 8001798:	20000448 	.word	0x20000448
 800179c:	20002118 	.word	0x20002118

080017a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b096      	sub	sp, #88	@ 0x58
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	222c      	movs	r2, #44	@ 0x2c
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00a f939 	bl	800ba68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f6:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <MX_TIM1_Init+0x114>)
 80017f8:	4a38      	ldr	r2, [pc, #224]	@ (80018dc <MX_TIM1_Init+0x118>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <MX_TIM1_Init+0x114>)
 80017fe:	224f      	movs	r2, #79	@ 0x4f
 8001800:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <MX_TIM1_Init+0x114>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001808:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <MX_TIM1_Init+0x114>)
 800180a:	f240 1271 	movw	r2, #369	@ 0x171
 800180e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <MX_TIM1_Init+0x114>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <MX_TIM1_Init+0x114>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <MX_TIM1_Init+0x114>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001822:	482d      	ldr	r0, [pc, #180]	@ (80018d8 <MX_TIM1_Init+0x114>)
 8001824:	f004 fa8b 	bl	8005d3e <HAL_TIM_PWM_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800182e:	f7ff fe00 	bl	8001432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001842:	4619      	mov	r1, r3
 8001844:	4824      	ldr	r0, [pc, #144]	@ (80018d8 <MX_TIM1_Init+0x114>)
 8001846:	f005 f85f 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001850:	f7ff fdef 	bl	8001432 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001854:	2360      	movs	r3, #96	@ 0x60
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 8001858:	23b9      	movs	r3, #185	@ 0xb9
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800186c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001870:	220c      	movs	r2, #12
 8001872:	4619      	mov	r1, r3
 8001874:	4818      	ldr	r0, [pc, #96]	@ (80018d8 <MX_TIM1_Init+0x114>)
 8001876:	f004 fc1f 	bl	80060b8 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001880:	f7ff fdd7 	bl	8001432 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	@ (80018d8 <MX_TIM1_Init+0x114>)
 80018ba:	f005 f88b 	bl	80069d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80018c4:	f7ff fdb5 	bl	8001432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <MX_TIM1_Init+0x114>)
 80018ca:	f000 f87f 	bl	80019cc <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3758      	adds	r7, #88	@ 0x58
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000044c 	.word	0x2000044c
 80018dc:	40012c00 	.word	0x40012c00

080018e0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <MX_TIM6_Init+0x64>)
 80018f2:	4a15      	ldr	r2, [pc, #84]	@ (8001948 <MX_TIM6_Init+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80018f6:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <MX_TIM6_Init+0x64>)
 80018f8:	224f      	movs	r2, #79	@ 0x4f
 80018fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MX_TIM6_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <MX_TIM6_Init+0x64>)
 8001904:	2201      	movs	r2, #1
 8001906:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MX_TIM6_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800190e:	480d      	ldr	r0, [pc, #52]	@ (8001944 <MX_TIM6_Init+0x64>)
 8001910:	f004 f94a 	bl	8005ba8 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800191a:	f7ff fd8a 	bl	8001432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <MX_TIM6_Init+0x64>)
 800192c:	f004 ffec 	bl	8006908 <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001936:	f7ff fd7c 	bl	8001432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000498 	.word	0x20000498
 8001948:	40001000 	.word	0x40001000

0800194c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <HAL_TIM_PWM_MspInit+0x38>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10b      	bne.n	8001976 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	4a09      	ldr	r2, [pc, #36]	@ (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 8001964:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001968:	6613      	str	r3, [r2, #96]	@ 0x60
 800196a:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40021000 	.word	0x40021000

0800198c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_TIM_Base_MspInit+0x38>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10b      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_TIM_Base_MspInit+0x3c>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	4a09      	ldr	r2, [pc, #36]	@ (80019c8 <HAL_TIM_Base_MspInit+0x3c>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <HAL_TIM_Base_MspInit+0x3c>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40001000 	.word	0x40001000
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <HAL_TIM_MspPostInit+0x68>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d11d      	bne.n	8001a2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_TIM_MspPostInit+0x6c>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <HAL_TIM_MspPostInit+0x6c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_TIM_MspPostInit+0x6c>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 8001a06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a10:	2302      	movs	r3, #2
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a26:	f001 fe1f 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40021000 	.word	0x40021000

08001a3c <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8001a4c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001a50:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001a54:	3360      	adds	r3, #96	@ 0x60
 8001a56:	81fb      	strh	r3, [r7, #14]

	HAL_TIM_Base_Start(&htim6);
 8001a58:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <delay_us+0x4c>)
 8001a5a:	f004 f8fd 	bl	8005c58 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COUNTER(&htim6, differ);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <delay_us+0x4c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	89fa      	ldrh	r2, [r7, #14]
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 8001a66:	e003      	b.n	8001a70 <delay_us+0x34>
	{
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 8001a68:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <delay_us+0x4c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d9f6      	bls.n	8001a68 <delay_us+0x2c>
	}

	HAL_TIM_Base_Stop(&htim6);
 8001a7a:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <delay_us+0x4c>)
 8001a7c:	f004 f938 	bl	8005cf0 <HAL_TIM_Base_Stop>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000498 	.word	0x20000498

08001a8c <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 8001a9c:	e019      	b.n	8001ad2 <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 8001a9e:	210c      	movs	r1, #12
 8001aa0:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <beep_start+0x5c>)
 8001aa2:	f004 f9a3 	bl	8005dec <HAL_TIM_PWM_Start>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 8001aac:	f7ff fcc1 	bl	8001432 <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fd74 	bl	80025a0 <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 8001ab8:	210c      	movs	r1, #12
 8001aba:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <beep_start+0x5c>)
 8001abc:	f004 fa74 	bl	8005fa8 <HAL_TIM_PWM_Stop>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 8001ac6:	f7ff fcb4 	bl	8001432 <Error_Handler>
		}
		HAL_Delay(interval);
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fd67 	bl	80025a0 <HAL_Delay>
	while( times -- )
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	71fa      	strb	r2, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e0      	bne.n	8001a9e <beep_start+0x12>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000044c 	.word	0x2000044c

08001aec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001af2:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <MX_USART1_UART_Init+0x64>)
 8001af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001af8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b12:	220c      	movs	r2, #12
 8001b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b30:	f004 ffc8 	bl	8006ac4 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b3a:	f7ff fc7a 	bl	8001432 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4904      	ldr	r1, [pc, #16]	@ (8001b54 <MX_USART1_UART_Init+0x68>)
 8001b42:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <MX_USART1_UART_Init+0x60>)
 8001b44:	f005 f896 	bl	8006c74 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200005ec 	.word	0x200005ec
 8001b50:	40013800 	.word	0x40013800
 8001b54:	200004e4 	.word	0x200004e4

08001b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0a0      	sub	sp, #128	@ 0x80
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	225c      	movs	r2, #92	@ 0x5c
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f009 ff75 	bl	800ba68 <memset>
  if(uartHandle->Instance==USART1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <HAL_UART_MspInit+0xb8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d13f      	bne.n	8001c08 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fdd1 	bl	800473c <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ba0:	f7ff fc47 	bl	8001432 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <HAL_UART_MspInit+0xbc>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <HAL_UART_MspInit+0xbc>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <HAL_UART_MspInit+0xbc>)
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_UART_MspInit+0xbc>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <HAL_UART_MspInit+0xbc>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_UART_MspInit+0xbc>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bd4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001be6:	2307      	movs	r3, #7
 8001be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf4:	f001 fd38 	bl	8003668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2105      	movs	r1, #5
 8001bfc:	2025      	movs	r0, #37	@ 0x25
 8001bfe:	f001 fc7e 	bl	80034fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c02:	2025      	movs	r0, #37	@ 0x25
 8001c04:	f001 fc97 	bl	8003536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3780      	adds	r7, #128	@ 0x80
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40021000 	.word	0x40021000

08001c18 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001c20:	1d39      	adds	r1, r7, #4
 8001c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c26:	2201      	movs	r2, #1
 8001c28:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <__io_putchar+0x20>)
 8001c2a:	f004 ff99 	bl	8006b60 <HAL_UART_Transmit>
	return ch;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200005ec 	.word	0x200005ec

08001c3c <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <HAL_UART_RxCpltCallback+0x44>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d113      	bne.n	8001c76 <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <HAL_UART_RxCpltCallback+0x48>)
 8001c50:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <HAL_UART_RxCpltCallback+0x4c>)
 8001c52:	f009 fdc1 	bl	800b7d8 <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_UART_RxCpltCallback+0x50>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	b2d1      	uxtb	r1, r2
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <HAL_UART_RxCpltCallback+0x50>)
 8001c60:	7011      	strb	r1, [r2, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_UART_RxCpltCallback+0x54>)
 8001c66:	7819      	ldrb	r1, [r3, #0]
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_UART_RxCpltCallback+0x48>)
 8001c6a:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4908      	ldr	r1, [pc, #32]	@ (8001c90 <HAL_UART_RxCpltCallback+0x54>)
 8001c70:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <HAL_UART_RxCpltCallback+0x58>)
 8001c72:	f004 ffff 	bl	8006c74 <HAL_UART_Receive_IT>
	}
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40013800 	.word	0x40013800
 8001c84:	200004e8 	.word	0x200004e8
 8001c88:	0800d74c 	.word	0x0800d74c
 8001c8c:	200005e8 	.word	0x200005e8
 8001c90:	200004e4 	.word	0x200004e4
 8001c94:	200005ec 	.word	0x200005ec

08001c98 <dump_buf>:
#else
#define spinor_print(format,args...) do{} while(0)
#endif

__attribute__((unused)) static void dump_buf(const char *prompt, uint8_t *buf, uint32_t size)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
    int      i;

    if(!buf)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01c      	beq.n	8001ce4 <dump_buf+0x4c>
        return ;

    if(prompt)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <dump_buf+0x20>
        printf("%s\r\n", prompt);
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	480e      	ldr	r0, [pc, #56]	@ (8001cec <dump_buf+0x54>)
 8001cb4:	f009 fd90 	bl	800b7d8 <iprintf>

    for(i=0; i<size; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <dump_buf+0x3c>
        printf("%02x ", buf[i]);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <dump_buf+0x58>)
 8001cca:	f009 fd85 	bl	800b7d8 <iprintf>
    for(i=0; i<size; i++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f0      	bhi.n	8001cbe <dump_buf+0x26>

    printf("\r\n");
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <dump_buf+0x5c>)
 8001cde:	f009 fde3 	bl	800b8a8 <puts>
 8001ce2:	e000      	b.n	8001ce6 <dump_buf+0x4e>
        return ;
 8001ce4:	bf00      	nop
}
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0800d764 	.word	0x0800d764
 8001cf0:	0800d76c 	.word	0x0800d76c
 8001cf4:	0800d774 	.word	0x0800d774

08001cf8 <spinor_gpio_init>:
#define W25Q_CS_PIN             GPIO_PIN_4

#define SPI_DUMMY_BYTE          0xA5

void spinor_gpio_init(struct spi_info *spi)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef    GPIO_InitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]

    /* Initial W25Q Norflash SPI CS pin */
    HAL_GPIO_WritePin(spi->cs_gpio, spi->cs_pin, GPIO_PIN_SET);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6858      	ldr	r0, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	891b      	ldrh	r3, [r3, #8]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f001 fe36 	bl	800398c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pin = spi->cs_pin;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	891b      	ldrh	r3, [r3, #8]
 8001d2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(spi->cs_gpio, &GPIO_InitStruct);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f107 020c 	add.w	r2, r7, #12
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fc95 	bl	8003668 <HAL_GPIO_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	3720      	adds	r7, #32
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <spi_cs_enable>:

void spi_cs_enable(struct spi_info *spi)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(spi->cs_gpio, spi->cs_pin, GPIO_PIN_RESET);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6858      	ldr	r0, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	2200      	movs	r2, #0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f001 fe17 	bl	800398c <HAL_GPIO_WritePin>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <spi_cs_disable>:

void spi_cs_disable(struct spi_info *spi)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(spi->cs_gpio, spi->cs_pin, GPIO_PIN_SET);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6858      	ldr	r0, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	891b      	ldrh	r3, [r3, #8]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f001 fe07 	bl	800398c <HAL_GPIO_WritePin>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <spi_xfer>:

uint8_t spi_xfer(struct spi_info *spi, uint8_t data)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
    uint8_t       rxbyte;
    HAL_SPI_TransmitReceive(spi->hspi, &data, &rxbyte, 1, 100);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	f107 020f 	add.w	r2, r7, #15
 8001d9a:	1cf9      	adds	r1, r7, #3
 8001d9c:	2364      	movs	r3, #100	@ 0x64
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2301      	movs	r3, #1
 8001da2:	f003 fb26 	bl	80053f2 <HAL_SPI_TransmitReceive>
    return rxbyte;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <spi_send>:

void spi_send(struct spi_info *spi, uint8_t *data, uint32_t bytes)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
    HAL_SPI_Transmit(spi->hspi, data, bytes, 100);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2364      	movs	r3, #100	@ 0x64
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	f003 f865 	bl	8004e96 <HAL_SPI_Transmit>
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <spi_recv>:

void spi_recv(struct spi_info *spi, uint8_t *buf, uint32_t size)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
    HAL_SPI_Receive(spi->hspi, buf, size, 100);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	2364      	movs	r3, #100	@ 0x64
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	f003 f9c9 	bl	8005182 <HAL_SPI_Receive>
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <spinor_test>:
 *|   SPI Norflash HighLevel API  |
 *+-------------------------------+*/

/* SPI Norflash API test function */
void spinor_test(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8001dfe:	af00      	add	r7, sp, #0
    spinor_info_t          spinor;
    int                    i;
    uint8_t                buf[W25Q_PAGSIZE*2];

    if( spinor_init(&spinor) < 0 )
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f863 	bl	8001ed0 <spinor_init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db56      	blt.n	8001ebe <spinor_test+0xc6>
        return ;

    //spinor_erase_chip(&spinor);
    //spinor_erase_block(&spinor, 1, W25Q_BLKSIZE);
    spinor_erase_sector(&spinor, 1, W25Q_SECSIZE);
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f88e 	bl	8001f3c <spinor_erase_sector>

    memset(buf, 0, sizeof(buf));
 8001e20:	463b      	mov	r3, r7
 8001e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f009 fe1d 	bl	800ba68 <memset>
    spinor_read(&spinor, 0, buf, sizeof(buf));
 8001e2e:	463a      	mov	r2, r7
 8001e30:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8001e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f000 f9e1 	bl	8002200 <spinor_read>
    dump_buf("<<<Read data after erase:\n", buf, sizeof(buf));
 8001e3e:	463b      	mov	r3, r7
 8001e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e44:	4619      	mov	r1, r3
 8001e46:	4820      	ldr	r0, [pc, #128]	@ (8001ec8 <spinor_test+0xd0>)
 8001e48:	f7ff ff26 	bl	8001c98 <dump_buf>

    /* Read/Write data test on address not page align */
    for(i=0; i<sizeof(buf); i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001e52:	e010      	b.n	8001e76 <spinor_test+0x7e>
        buf[i] = i;
 8001e54:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001e58:	b2d9      	uxtb	r1, r3
 8001e5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001e5e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8001e62:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001e66:	4413      	add	r3, r2
 8001e68:	460a      	mov	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
    for(i=0; i<sizeof(buf); i++)
 8001e6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001e70:	3301      	adds	r3, #1
 8001e72:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001e76:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7e:	d3e9      	bcc.n	8001e54 <spinor_test+0x5c>
    spinor_write(&spinor, 8, buf, W25Q_PAGSIZE);
 8001e80:	463a      	mov	r2, r7
 8001e82:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8001e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e8a:	2108      	movs	r1, #8
 8001e8c:	f000 f8f4 	bl	8002078 <spinor_write>

    memset(buf, 0, sizeof(buf));
 8001e90:	463b      	mov	r3, r7
 8001e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f009 fde5 	bl	800ba68 <memset>
    spinor_read(&spinor, 0, buf, sizeof(buf));
 8001e9e:	463a      	mov	r2, r7
 8001ea0:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8001ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	f000 f9a9 	bl	8002200 <spinor_read>
    dump_buf("<<<Read data after write:\n", buf, sizeof(buf));
 8001eae:	463b      	mov	r3, r7
 8001eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <spinor_test+0xd4>)
 8001eb8:	f7ff feee 	bl	8001c98 <dump_buf>

    return ;
 8001ebc:	e000      	b.n	8001ec0 <spinor_test+0xc8>
        return ;
 8001ebe:	bf00      	nop
}
 8001ec0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	0800d7c8 	.word	0x0800d7c8
 8001ecc:	0800d7e4 	.word	0x0800d7e4

08001ed0 <spinor_init>:

/* Initial SPI and detect the flash chip. */
int spinor_init(struct spinor_info *spinor)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	6078      	str	r0, [r7, #4]
    spinor->spi = &spinor_spi;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <spinor_init+0x64>)
 8001edc:	601a      	str	r2, [r3, #0]

    spinor_gpio_init(spinor->spi);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff08 	bl	8001cf8 <spinor_gpio_init>

    if( !spinor_detect_by_jedec(spinor) )
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f9ff 	bl	80022ec <spinor_detect_by_jedec>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <spinor_init+0x2a>
        return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	e017      	b.n	8001f2a <spinor_init+0x5a>

    printf("Norflash %s detected, capacity %lu KB, %lu blocks, %lu sectors, %lu pages.\r\n",
            spinor->flash->name, spinor->flash->capacity>>10,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
    printf("Norflash %s detected, capacity %lu KB, %lu blocks, %lu sectors, %lu pages.\r\n",
 8001efe:	6819      	ldr	r1, [r3, #0]
            spinor->flash->name, spinor->flash->capacity>>10,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
    printf("Norflash %s detected, capacity %lu KB, %lu blocks, %lu sectors, %lu pages.\r\n",
 8001f06:	0a98      	lsrs	r0, r3, #10
            spinor->flash->n_blocks, spinor->flash->n_sectors, spinor->flash->n_pages);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
    printf("Norflash %s detected, capacity %lu KB, %lu blocks, %lu sectors, %lu pages.\r\n",
 8001f0c:	699c      	ldr	r4, [r3, #24]
            spinor->flash->n_blocks, spinor->flash->n_sectors, spinor->flash->n_pages);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    printf("Norflash %s detected, capacity %lu KB, %lu blocks, %lu sectors, %lu pages.\r\n",
 8001f12:	69db      	ldr	r3, [r3, #28]
            spinor->flash->n_blocks, spinor->flash->n_sectors, spinor->flash->n_pages);
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6852      	ldr	r2, [r2, #4]
    printf("Norflash %s detected, capacity %lu KB, %lu blocks, %lu sectors, %lu pages.\r\n",
 8001f18:	6a12      	ldr	r2, [r2, #32]
 8001f1a:	9201      	str	r2, [sp, #4]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	4623      	mov	r3, r4
 8001f20:	4602      	mov	r2, r0
 8001f22:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <spinor_init+0x68>)
 8001f24:	f009 fc58 	bl	800b7d8 <iprintf>

    return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000004 	.word	0x20000004
 8001f38:	0800d800 	.word	0x0800d800

08001f3c <spinor_erase_sector>:
 * Reference  :  P56, 8.2.28 Sector Erase with 4-Byte Address (21h)
 *  @address is the erase start physical address, which can be not sector alignment such as 0x1001.
 *  @size is the erase size, which can be larger than a sector such as 4097, and it will erase 2 sectors;
 */
int spinor_erase_sector(struct spinor_info *spinor, uint32_t address, uint32_t size)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	@ 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
    struct spi_info    *spi = spinor->spi;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    struct flash_info  *flash = spinor->flash;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t            sector, first, last;
    uint32_t            addr;

    while (spinor->lock == 1)
 8001f54:	e002      	b.n	8001f5c <spinor_erase_sector+0x20>
        mdelay(1);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f000 fb22 	bl	80025a0 <HAL_Delay>
    while (spinor->lock == 1)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	7a1b      	ldrb	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d0f8      	beq.n	8001f56 <spinor_erase_sector+0x1a>

    spinor->lock = 1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	721a      	strb	r2, [r3, #8]

    /* find first and last erase sector */
    first = address / flash->sector_size;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	623b      	str	r3, [r7, #32]
    last  = (address+size-1) / flash->sector_size;
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	61fb      	str	r3, [r7, #28]

#ifdef CONFIG_DEBUG_W25Q
    uint32_t StartTime = HAL_GetTick();
 8001f88:	f000 fafe 	bl	8002588 <HAL_GetTick>
 8001f8c:	61b8      	str	r0, [r7, #24]
    printf("Norflash Erase %ld Bytes Sector@0x%lx Begin...\r\n", size, address);
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4836      	ldr	r0, [pc, #216]	@ (800206c <spinor_erase_sector+0x130>)
 8001f94:	f009 fc20 	bl	800b7d8 <iprintf>
#endif

    /* start erase all the sectors */
    for( sector=first; sector<=last; sector++)
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9c:	e04d      	b.n	800203a <spinor_erase_sector+0xfe>
    {
        addr = sector * flash->sector_size;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
#ifdef CONFIG_DEBUG_W25Q
        printf("Norflash Erase Sector@%lx ...\r\n", addr);
 8001faa:	6979      	ldr	r1, [r7, #20]
 8001fac:	4830      	ldr	r0, [pc, #192]	@ (8002070 <spinor_erase_sector+0x134>)
 8001fae:	f009 fc13 	bl	800b7d8 <iprintf>
#endif

        spinor_WaitForWriteEnd(spi);
 8001fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fb4:	f000 fa2d 	bl	8002412 <spinor_WaitForWriteEnd>
        spinor_write_enable(spi);
 8001fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fba:	f000 fa12 	bl	80023e2 <spinor_write_enable>

        spi->select(spi);
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fc4:	4798      	blx	r3
        if (spinor->flash->n_blocks >= 512 ) /* larger than W25Q256 */
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fd0:	d30d      	bcc.n	8001fee <spinor_erase_sector+0xb2>
        {
            spi->xfer(spi, SPINOR_OP_SE_4B);
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2121      	movs	r1, #33	@ 0x21
 8001fd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fda:	4798      	blx	r3
            spi->xfer(spi, (addr & 0xFF000000) >> 24);
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	0e12      	lsrs	r2, r2, #24
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fea:	4798      	blx	r3
 8001fec:	e004      	b.n	8001ff8 <spinor_erase_sector+0xbc>
        }
        else
        {
            spi->xfer(spi, SPINOR_OP_SE);
 8001fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ff6:	4798      	blx	r3
        }
        spi->xfer(spi, (addr & 0xFF0000) >> 16);
 8001ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	0c12      	lsrs	r2, r2, #16
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	4611      	mov	r1, r2
 8002004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002006:	4798      	blx	r3
        spi->xfer(spi, (addr & 0xFF00) >> 8);
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	0a12      	lsrs	r2, r2, #8
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	4611      	mov	r1, r2
 8002014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002016:	4798      	blx	r3
        spi->xfer(spi, addr & 0xFF);
 8002018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	4611      	mov	r1, r2
 8002022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002024:	4798      	blx	r3
        spi->deselect(spi);
 8002026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800202c:	4798      	blx	r3

        spinor_WaitForWriteEnd(spi);
 800202e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002030:	f000 f9ef 	bl	8002412 <spinor_WaitForWriteEnd>
    for( sector=first; sector<=last; sector++)
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	3301      	adds	r3, #1
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800203a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	429a      	cmp	r2, r3
 8002040:	d9ad      	bls.n	8001f9e <spinor_erase_sector+0x62>
    }

#ifdef CONFIG_DEBUG_W25Q
    printf("Norflash EraseSector@0x%lx done after %ld ms\r\n", address, HAL_GetTick() - StartTime);
 8002042:	f000 faa1 	bl	8002588 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	461a      	mov	r2, r3
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <spinor_erase_sector+0x138>)
 8002052:	f009 fbc1 	bl	800b7d8 <iprintf>
#endif

    mdelay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 faa2 	bl	80025a0 <HAL_Delay>
    spinor->lock = 0;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	721a      	strb	r2, [r3, #8]

    return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3730      	adds	r7, #48	@ 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	0800d918 	.word	0x0800d918
 8002070:	0800d94c 	.word	0x0800d94c
 8002074:	0800d96c 	.word	0x0800d96c

08002078 <spinor_write>:

/* P32: 10.2.14 Page Program (02h) */
int spinor_write(struct spinor_info *spinor, uint32_t address, uint8_t *data, uint32_t bytes)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08e      	sub	sp, #56	@ 0x38
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
    struct spi_info    *spi = spinor->spi;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
    struct flash_info  *flash = spinor->flash;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t            page, first, last;
    uint32_t            addr, ofset, len;

    while (spinor->lock == 1)
 8002092:	e002      	b.n	800209a <spinor_write+0x22>
        mdelay(1);
 8002094:	2001      	movs	r0, #1
 8002096:	f000 fa83 	bl	80025a0 <HAL_Delay>
    while (spinor->lock == 1)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	7a1b      	ldrb	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d0f8      	beq.n	8002094 <spinor_write+0x1c>

    spinor->lock = 1;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	721a      	strb	r2, [r3, #8]

    /* find first and last write page */
    first = address / flash->page_size;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	623b      	str	r3, [r7, #32]
    last  = (address+bytes-1) / flash->page_size;
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	1e5a      	subs	r2, r3, #1
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	61fb      	str	r3, [r7, #28]

#ifdef CONFIG_DEBUG_W25Q
    uint32_t StartTime = HAL_GetTick();
 80020c6:	f000 fa5f 	bl	8002588 <HAL_GetTick>
 80020ca:	61b8      	str	r0, [r7, #24]
    printf("Norflash Write %ld Bytes to addr@0x%lx Begin...\r\n", bytes, address);
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	4848      	ldr	r0, [pc, #288]	@ (80021f4 <spinor_write+0x17c>)
 80020d2:	f009 fb81 	bl	800b7d8 <iprintf>
#endif

    /* address in page and offset in buffer */
    addr = address;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	633b      	str	r3, [r7, #48]	@ 0x30
    ofset = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* start write all the pages */
    for( page=first; page<=last; page++)
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80020e2:	e06e      	b.n	80021c2 <spinor_write+0x14a>
    {
        len = flash->page_size - (addr%flash->page_size);
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80020f2:	fb00 f202 	mul.w	r2, r0, r2
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	1acb      	subs	r3, r1, r3
 80020fa:	617b      	str	r3, [r7, #20]
        len = len > bytes ? bytes : len;
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	4293      	cmp	r3, r2
 8002102:	bf28      	it	cs
 8002104:	4613      	movcs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
#ifdef CONFIG_DEBUG_W25Q
        printf("Norflash write addr@0x%lx, %lu bytes\r\n", addr, len);
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800210c:	483a      	ldr	r0, [pc, #232]	@ (80021f8 <spinor_write+0x180>)
 800210e:	f009 fb63 	bl	800b7d8 <iprintf>
#endif

        spinor_WaitForWriteEnd(spi);
 8002112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002114:	f000 f97d 	bl	8002412 <spinor_WaitForWriteEnd>
        spinor_write_enable(spi);
 8002118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800211a:	f000 f962 	bl	80023e2 <spinor_write_enable>

        spi->select(spi);
 800211e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002124:	4798      	blx	r3
        if (spinor->flash->n_blocks >= 512 )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002130:	d30d      	bcc.n	800214e <spinor_write+0xd6>
        {
            spi->xfer(spi, SPINOR_OP_PP_4B);
 8002132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2112      	movs	r1, #18
 8002138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800213a:	4798      	blx	r3
            spi->xfer(spi, (addr & 0xFF000000) >> 24);
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002142:	0e12      	lsrs	r2, r2, #24
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	4611      	mov	r1, r2
 8002148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800214a:	4798      	blx	r3
 800214c:	e004      	b.n	8002158 <spinor_write+0xe0>
        }
        else
        {
            spi->xfer(spi, SPINOR_OP_PP);
 800214e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2102      	movs	r1, #2
 8002154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002156:	4798      	blx	r3
        }
        spi->xfer(spi, (addr & 0xFF0000) >> 16);
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800215e:	0c12      	lsrs	r2, r2, #16
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4611      	mov	r1, r2
 8002164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002166:	4798      	blx	r3
        spi->xfer(spi, (addr & 0xFF00) >> 8);
 8002168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800216e:	0a12      	lsrs	r2, r2, #8
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4611      	mov	r1, r2
 8002174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002176:	4798      	blx	r3
        spi->xfer(spi, addr & 0xFF);
 8002178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002184:	4798      	blx	r3

        /* send data */
        spi->send(spi, data+ofset, len);
 8002186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800218e:	4411      	add	r1, r2
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002194:	4798      	blx	r3

        spi->deselect(spi);
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800219c:	4798      	blx	r3
        spinor_WaitForWriteEnd(spi);
 800219e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021a0:	f000 f937 	bl	8002412 <spinor_WaitForWriteEnd>

        addr  += len;
 80021a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4413      	add	r3, r2
 80021aa:	633b      	str	r3, [r7, #48]	@ 0x30
        ofset += len;
 80021ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4413      	add	r3, r2
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        bytes  -= len;
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	603b      	str	r3, [r7, #0]
    for( page=first; page<=last; page++)
 80021bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021be:	3301      	adds	r3, #1
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d98c      	bls.n	80020e4 <spinor_write+0x6c>
    }

#ifdef CONFIG_DEBUG_W25Q
    printf("Norflash WriteByte@0x%lx done after %ld ms\r\n", address, HAL_GetTick() - StartTime);
 80021ca:	f000 f9dd 	bl	8002588 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	4808      	ldr	r0, [pc, #32]	@ (80021fc <spinor_write+0x184>)
 80021da:	f009 fafd 	bl	800b7d8 <iprintf>
#endif

    mdelay(1);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 f9de 	bl	80025a0 <HAL_Delay>
    spinor->lock = 0;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	721a      	strb	r2, [r3, #8]

    return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3738      	adds	r7, #56	@ 0x38
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0800d99c 	.word	0x0800d99c
 80021f8:	0800d9d0 	.word	0x0800d9d0
 80021fc:	0800d9f8 	.word	0x0800d9f8

08002200 <spinor_read>:
 * Reference  :  P41, 8.2.13 Fast Read with 4-Byte Address (0Ch)
 *  @address is the read start physical address, which can be not page alignment such as 0x101.
 *  @size is the read size, which can be larger than a page such as 257, and it will read 2 pages;
 */
int spinor_read(struct spinor_info *spinor, uint32_t address, uint8_t *buf, uint32_t bytes)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
    struct spi_info *spi = spinor->spi;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]

    while (spinor->lock == 1)
 8002214:	e002      	b.n	800221c <spinor_read+0x1c>
        mdelay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 f9c2 	bl	80025a0 <HAL_Delay>
    while (spinor->lock == 1)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7a1b      	ldrb	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d0f8      	beq.n	8002216 <spinor_read+0x16>

    spinor->lock = 1;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	721a      	strb	r2, [r3, #8]

#ifdef CONFIG_DEBUG_W25Q
    uint32_t StartTime = HAL_GetTick();
 800222a:	f000 f9ad 	bl	8002588 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]
    printf("Norflash Read %ld Bytes from addr@0x%lx Begin...\r\n", bytes, address);
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	482b      	ldr	r0, [pc, #172]	@ (80022e4 <spinor_read+0xe4>)
 8002236:	f009 facf 	bl	800b7d8 <iprintf>
#endif

    spi->select(spi);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	4798      	blx	r3

    /* send instruction and address */
    if (spinor->flash->n_blocks >= 512 )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800224c:	d30d      	bcc.n	800226a <spinor_read+0x6a>
    {
        spi->xfer(spi, SPINOR_OP_READ_FAST_4B);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	210c      	movs	r1, #12
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	4798      	blx	r3
        spi->xfer(spi, (address & 0xFF000000) >> 24);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	0e12      	lsrs	r2, r2, #24
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	4798      	blx	r3
 8002268:	e004      	b.n	8002274 <spinor_read+0x74>
    }
    else
    {
        spi->xfer(spi, SPINOR_OP_READ_FAST);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	210b      	movs	r1, #11
 8002270:	6978      	ldr	r0, [r7, #20]
 8002272:	4798      	blx	r3
    }
    spi->xfer(spi, (address & 0xFF0000) >> 16);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	0c12      	lsrs	r2, r2, #16
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	4611      	mov	r1, r2
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	4798      	blx	r3
    spi->xfer(spi, (address & 0xFF00) >> 8);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	0a12      	lsrs	r2, r2, #8
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4611      	mov	r1, r2
 8002290:	6978      	ldr	r0, [r7, #20]
 8002292:	4798      	blx	r3
    spi->xfer(spi, address & 0xFF);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	4611      	mov	r1, r2
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	4798      	blx	r3

    /* read data */
    spi->xfer(spi, SPI_DUMMY_BYTE);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	21a5      	movs	r1, #165	@ 0xa5
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	4798      	blx	r3
    spi->recv(spi, buf, bytes);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	4798      	blx	r3

    spi->deselect(spi);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	4798      	blx	r3

#ifdef CONFIG_DEBUG_W25Q
    printf("Norflash ReadBytes@0x%lx done after %ld ms\r\n", address, HAL_GetTick() - StartTime);
 80022c0:	f000 f962 	bl	8002588 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4806      	ldr	r0, [pc, #24]	@ (80022e8 <spinor_read+0xe8>)
 80022d0:	f009 fa82 	bl	800b7d8 <iprintf>
#endif
    spinor->lock = 0;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	721a      	strb	r2, [r3, #8]

    return 0;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	0800da28 	.word	0x0800da28
 80022e8:	0800da5c 	.word	0x0800da5c

080022ec <spinor_detect_by_jedec>:
 *|   SPI Norflash LowLevel API   |
 *+-------------------------------+*/

/* Detect the norflash by JEDEC ID */
int spinor_detect_by_jedec(struct spinor_info *spinor)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    uint32_t            jedec_id;
    int                 i, found = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]

    jedec_id = spinor_read_jedecid(spinor->spi);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f83b 	bl	8002378 <spinor_read_jedecid>
 8002302:	60f8      	str	r0, [r7, #12]

    for(i=0; i<ARRAY_SIZE(spinor_ids); i++)
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e01a      	b.n	8002340 <spinor_detect_by_jedec+0x54>
    {
        if(spinor_ids[i].jedec_id == jedec_id)
 800230a:	4918      	ldr	r1, [pc, #96]	@ (800236c <spinor_detect_by_jedec+0x80>)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	429a      	cmp	r2, r3
 8002320:	d10b      	bne.n	800233a <spinor_detect_by_jedec+0x4e>
        {
            found = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
            spinor->flash = &spinor_ids[i];
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4a0e      	ldr	r2, [pc, #56]	@ (800236c <spinor_detect_by_jedec+0x80>)
 8002332:	441a      	add	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	605a      	str	r2, [r3, #4]
            break;
 8002338:	e005      	b.n	8002346 <spinor_detect_by_jedec+0x5a>
    for(i=0; i<ARRAY_SIZE(spinor_ids); i++)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b09      	cmp	r3, #9
 8002344:	d9e1      	bls.n	800230a <spinor_detect_by_jedec+0x1e>
        }
    }

    printf("Detect JEDEC ID[0x%lx], Norflash %s found\r\n", jedec_id, found?spinor->flash->name:"not");
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <spinor_detect_by_jedec+0x68>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e000      	b.n	8002356 <spinor_detect_by_jedec+0x6a>
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <spinor_detect_by_jedec+0x84>)
 8002356:	461a      	mov	r2, r3
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	4806      	ldr	r0, [pc, #24]	@ (8002374 <spinor_detect_by_jedec+0x88>)
 800235c:	f009 fa3c 	bl	800b7d8 <iprintf>
    return found;
 8002360:	693b      	ldr	r3, [r7, #16]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000024 	.word	0x20000024
 8002370:	0800da8c 	.word	0x0800da8c
 8002374:	0800da90 	.word	0x0800da90

08002378 <spinor_read_jedecid>:

/* Description:  Read the chipset JEDEC ID.
 * Reference  :  P69, 8.2.41 Read JEDEC ID (9Fh)
 */
uint32_t spinor_read_jedecid(struct spi_info *spi)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    uint32_t            jedec_id = 0x0;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
    uint8_t             id[3];

    spi->select(spi);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
    spi->xfer(spi, SPINOR_OP_RDID);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	219f      	movs	r1, #159	@ 0x9f
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
    id[0] = spi->xfer(spi, SPI_DUMMY_BYTE); /* Vendor ID */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	21a5      	movs	r1, #165	@ 0xa5
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	4603      	mov	r3, r0
 80023a2:	723b      	strb	r3, [r7, #8]
    id[1] = spi->xfer(spi, SPI_DUMMY_BYTE); /* Memory Type */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	21a5      	movs	r1, #165	@ 0xa5
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	727b      	strb	r3, [r7, #9]
    id[2] = spi->xfer(spi, SPI_DUMMY_BYTE); /* Storage Capacity */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	21a5      	movs	r1, #165	@ 0xa5
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
 80023bc:	4603      	mov	r3, r0
 80023be:	72bb      	strb	r3, [r7, #10]
    spi->deselect(spi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3

    jedec_id = (id[0] << 16) | (id[1] << 8) | id[2];
 80023c8:	7a3b      	ldrb	r3, [r7, #8]
 80023ca:	041a      	lsls	r2, r3, #16
 80023cc:	7a7b      	ldrb	r3, [r7, #9]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4313      	orrs	r3, r2
 80023d2:	7aba      	ldrb	r2, [r7, #10]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
    return jedec_id;
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <spinor_write_enable>:

/* Description:  Write Enable
 * Reference  :  P31, 8.2.1 Write Enable (06h)
 */
void spinor_write_enable(struct spi_info *spi)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
    spi->select(spi);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
    spi->xfer(spi, SPINOR_OP_WREN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2106      	movs	r1, #6
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
    spi->deselect(spi);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3

    mdelay(1);
 8002404:	2001      	movs	r0, #1
 8002406:	f000 f8cb 	bl	80025a0 <HAL_Delay>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <spinor_WaitForWriteEnd>:

/* Description:  Wait flash program/erase finished by read Status Register for BUSY bit
 * Reference  :  P15, 7.1 Status Registers
 */
void spinor_WaitForWriteEnd(struct spi_info *spi)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
    mdelay(1);
 800241e:	2001      	movs	r0, #1
 8002420:	f000 f8be 	bl	80025a0 <HAL_Delay>

    spi->select(spi);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
    spi->xfer(spi, SPINOR_OP_RDSR1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	2105      	movs	r1, #5
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3

    do
    {
        value = spi->xfer(spi, SPI_DUMMY_BYTE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	21a5      	movs	r1, #165	@ 0xa5
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
        mdelay(1);
 8002444:	2001      	movs	r0, #1
 8002446:	f000 f8ab 	bl	80025a0 <HAL_Delay>
    } while ((value & 0x01) == 0x01);
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <spinor_WaitForWriteEnd+0x24>

    spi->deselect(spi);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800249c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002468:	f7ff f99a 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800246c:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800246e:	490d      	ldr	r1, [pc, #52]	@ (80024a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <LoopForever+0xe>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002484:	4c0a      	ldr	r4, [pc, #40]	@ (80024b0 <LoopForever+0x16>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002492:	f009 fb41 	bl	800bb18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002496:	f7fe ff55 	bl	8001344 <main>

0800249a <LoopForever>:

LoopForever:
    b LoopForever
 800249a:	e7fe      	b.n	800249a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800249c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80024a8:	0800decc 	.word	0x0800decc
  ldr r2, =_sbss
 80024ac:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80024b0:	20002114 	.word	0x20002114

080024b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC1_IRQHandler>

080024b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f001 f811 	bl	80034e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c6:	200f      	movs	r0, #15
 80024c8:	f000 f80e 	bl	80024e8 <HAL_InitTick>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	e001      	b.n	80024dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d8:	f7ff f832 	bl	8001540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024dc:	79fb      	ldrb	r3, [r7, #7]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <HAL_InitTick+0x6c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_InitTick+0x70>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_InitTick+0x6c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250a:	fbb3 f3f1 	udiv	r3, r3, r1
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f001 f81d 	bl	8003552 <HAL_SYSTICK_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d809      	bhi.n	8002538 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f000 ffe7 	bl	80034fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002530:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <HAL_InitTick+0x74>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e007      	b.n	8002548 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e004      	b.n	8002548 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e001      	b.n	8002548 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000190 	.word	0x20000190
 8002558:	20000000 	.word	0x20000000
 800255c:	2000018c 	.word	0x2000018c

08002560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_IncTick+0x20>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_IncTick+0x24>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <HAL_IncTick+0x24>)
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000190 	.word	0x20000190
 8002584:	20000674 	.word	0x20000674

08002588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return uwTick;
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <HAL_GetTick+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000674 	.word	0x20000674

080025a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff ffee 	bl	8002588 <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d005      	beq.n	80025c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_Delay+0x44>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c6:	bf00      	nop
 80025c8:	f7ff ffde 	bl	8002588 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d8f7      	bhi.n	80025c8 <HAL_Delay+0x28>
  {
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000190 	.word	0x20000190

080025e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	609a      	str	r2, [r3, #8]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3360      	adds	r3, #96	@ 0x60
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <LL_ADC_SetOffset+0x44>)
 8002672:	4013      	ands	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	4313      	orrs	r3, r2
 8002680:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	03fff000 	.word	0x03fff000

08002698 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3360      	adds	r3, #96	@ 0x60
 80026a6:	461a      	mov	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3360      	adds	r3, #96	@ 0x60
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b087      	sub	sp, #28
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3330      	adds	r3, #48	@ 0x30
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	211f      	movs	r1, #31
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 011f 	and.w	r1, r3, #31
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002752:	b480      	push	{r7}
 8002754:	b087      	sub	sp, #28
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3314      	adds	r3, #20
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0e5b      	lsrs	r3, r3, #25
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	4413      	add	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	0d1b      	lsrs	r3, r3, #20
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2107      	movs	r1, #7
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	0d1b      	lsrs	r3, r3, #20
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	431a      	orrs	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	43db      	mvns	r3, r3
 80027c2:	401a      	ands	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0318 	and.w	r3, r3, #24
 80027ca:	4908      	ldr	r1, [pc, #32]	@ (80027ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80027cc:	40d9      	lsrs	r1, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	400b      	ands	r3, r1
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	0007ffff 	.word	0x0007ffff

080027f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6093      	str	r3, [r2, #8]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002828:	d101      	bne.n	800282e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800284c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002850:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002878:	d101      	bne.n	800287e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <LL_ADC_IsEnabled+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_ADC_IsEnabled+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d101      	bne.n	80028ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e126      	b.n	8002b68 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fe fb49 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff67 	bl	8002814 <LL_ADC_IsDeepPowerDownEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff4d 	bl	80027f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff82 	bl	8002864 <LL_ADC_IsInternalRegulatorEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d115      	bne.n	8002992 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff66 	bl	800283c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002970:	4b7f      	ldr	r3, [pc, #508]	@ (8002b70 <HAL_ADC_Init+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	4a7f      	ldr	r2, [pc, #508]	@ (8002b74 <HAL_ADC_Init+0x274>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002984:	e002      	b.n	800298c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3b01      	subs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f9      	bne.n	8002986 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff64 	bl	8002864 <LL_ADC_IsInternalRegulatorEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff75 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 80029c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80bf 	bne.w	8002b56 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 80bb 	bne.w	8002b56 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff49 	bl	800288c <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a00:	485d      	ldr	r0, [pc, #372]	@ (8002b78 <HAL_ADC_Init+0x278>)
 8002a02:	f7ff ff43 	bl	800288c <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4619      	mov	r1, r3
 8002a12:	485a      	ldr	r0, [pc, #360]	@ (8002b7c <HAL_ADC_Init+0x27c>)
 8002a14:	f7ff fde8 	bl	80025e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e5b      	ldrb	r3, [r3, #25]
 8002a1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d106      	bne.n	8002a54 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	045b      	lsls	r3, r3, #17
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	4b42      	ldr	r3, [pc, #264]	@ (8002b80 <HAL_ADC_Init+0x280>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff25 	bl	80028d8 <LL_ADC_INJ_IsConversionOngoing>
 8002a8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13d      	bne.n	8002b12 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d13a      	bne.n	8002b12 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aa0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aa8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ab8:	f023 0302 	bic.w	r3, r3, #2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	69b9      	ldr	r1, [r7, #24]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d118      	bne.n	8002b02 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002af2:	430a      	orrs	r2, r1
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	611a      	str	r2, [r3, #16]
 8002b00:	e007      	b.n	8002b12 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10c      	bne.n	8002b34 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f023 010f 	bic.w	r1, r3, #15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b32:	e007      	b.n	8002b44 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 020f 	bic.w	r2, r2, #15
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b48:	f023 0303 	bic.w	r3, r3, #3
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b54:	e007      	b.n	8002b66 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000000 	.word	0x20000000
 8002b74:	053e2d63 	.word	0x053e2d63
 8002b78:	50040000 	.word	0x50040000
 8002b7c:	50040300 	.word	0x50040300
 8002b80:	fff0c007 	.word	0xfff0c007

08002b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0b6      	sub	sp, #216	@ 0xd8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x22>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e3bb      	b.n	800331e <HAL_ADC_ConfigChannel+0x79a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fe7d 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 83a0 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d824      	bhi.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	3b02      	subs	r3, #2
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d81b      	bhi.n	8002c12 <HAL_ADC_ConfigChannel+0x8e>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <HAL_ADC_ConfigChannel+0x5c>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002bf9 	.word	0x08002bf9
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c09 	.word	0x08002c09
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bf6:	e010      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bfe:	e00c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c00:	2318      	movs	r3, #24
 8002c02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c06:	e008      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c12:	2306      	movs	r3, #6
 8002c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c18:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c28:	f7ff fd67 	bl	80026fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe3e 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002c36:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fe4a 	bl	80028d8 <LL_ADC_INJ_IsConversionOngoing>
 8002c44:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 81a4 	bne.w	8002f9a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 819f 	bne.w	8002f9a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f7ff fd72 	bl	8002752 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6919      	ldr	r1, [r3, #16]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ca0:	f7ff fcd6 	bl	8002650 <LL_ADC_SetOffset>
 8002ca4:	e179      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fcf3 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x14e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fce8 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	e01e      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x18c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fcdd 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e004      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1a4>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	e018      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1d6>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e004      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d106      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fcac 	bl	80026c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fc90 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x214>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fc85 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 021f 	and.w	r2, r3, #31
 8002d96:	e01e      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x252>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fc7a 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e004      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x26a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	e018      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x29c>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e004      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fc49 	bl	80026c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fc2d 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x2da>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fc22 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	e01e      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x318>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2102      	movs	r1, #2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fc17 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e004      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x330>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0e9b      	lsrs	r3, r3, #26
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	e014      	b.n	8002ede <HAL_ADC_ConfigChannel+0x35a>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e004      	b.n	8002ede <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d106      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2102      	movs	r1, #2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fbea 	bl	80026c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2103      	movs	r1, #3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fbce 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x398>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fbc3 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	f003 021f 	and.w	r2, r3, #31
 8002f1a:	e017      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x3c8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2103      	movs	r1, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fbb8 	bl	8002698 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f36:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x3e0>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	e011      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x404>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f74:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d106      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2103      	movs	r1, #3
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fb95 	bl	80026c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fc74 	bl	800288c <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 8140 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f7ff fbf5 	bl	80027a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a8f      	ldr	r2, [pc, #572]	@ (8003200 <HAL_ADC_ConfigChannel+0x67c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 8131 	bne.w	800322c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x46e>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	bf94      	ite	ls
 8002fea:	2301      	movls	r3, #1
 8002fec:	2300      	movhi	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e019      	b.n	8003026 <HAL_ADC_ConfigChannel+0x4a2>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e003      	b.n	8003016 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800300e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2b09      	cmp	r3, #9
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003026:	2b00      	cmp	r3, #0
 8003028:	d079      	beq.n	800311e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x4c2>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0e9b      	lsrs	r3, r3, #26
 800303c:	3301      	adds	r3, #1
 800303e:	069b      	lsls	r3, r3, #26
 8003040:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003044:	e015      	b.n	8003072 <HAL_ADC_ConfigChannel+0x4ee>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003056:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e003      	b.n	800306a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	069b      	lsls	r3, r3, #26
 800306e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x50e>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	e017      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x53e>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e003      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80030ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	ea42 0103 	orr.w	r1, r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x564>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	051b      	lsls	r3, r3, #20
 80030e6:	e018      	b.n	800311a <HAL_ADC_ConfigChannel+0x596>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311a:	430b      	orrs	r3, r1
 800311c:	e081      	b.n	8003222 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_ADC_ConfigChannel+0x5b6>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0e9b      	lsrs	r3, r3, #26
 8003130:	3301      	adds	r3, #1
 8003132:	069b      	lsls	r3, r3, #26
 8003134:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003138:	e015      	b.n	8003166 <HAL_ADC_ConfigChannel+0x5e2>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e003      	b.n	800315e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	069b      	lsls	r3, r3, #26
 8003162:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x602>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	3301      	adds	r3, #1
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	e017      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x632>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	61bb      	str	r3, [r7, #24]
  return result;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800319e:	2320      	movs	r3, #32
 80031a0:	e003      	b.n	80031aa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	ea42 0103 	orr.w	r1, r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x65e>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 021f 	and.w	r2, r3, #31
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	3b1e      	subs	r3, #30
 80031da:	051b      	lsls	r3, r3, #20
 80031dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031e0:	e01e      	b.n	8003220 <HAL_ADC_ConfigChannel+0x69c>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  return result;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e006      	b.n	800320c <HAL_ADC_ConfigChannel+0x688>
 80031fe:	bf00      	nop
 8003200:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	051b      	lsls	r3, r3, #20
 800321c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003220:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff fa93 	bl	8002752 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <HAL_ADC_ConfigChannel+0x7a4>)
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d06c      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003238:	483c      	ldr	r0, [pc, #240]	@ (800332c <HAL_ADC_ConfigChannel+0x7a8>)
 800323a:	f7ff f9fb 	bl	8002634 <LL_ADC_GetCommonPathInternalCh>
 800323e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3a      	ldr	r2, [pc, #232]	@ (8003330 <HAL_ADC_ConfigChannel+0x7ac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d127      	bne.n	800329c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800324c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d121      	bne.n	800329c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a35      	ldr	r2, [pc, #212]	@ (8003334 <HAL_ADC_ConfigChannel+0x7b0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d157      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003266:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800326a:	4619      	mov	r1, r3
 800326c:	482f      	ldr	r0, [pc, #188]	@ (800332c <HAL_ADC_ConfigChannel+0x7a8>)
 800326e:	f7ff f9ce 	bl	800260e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003272:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <HAL_ADC_ConfigChannel+0x7b4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	4a30      	ldr	r2, [pc, #192]	@ (800333c <HAL_ADC_ConfigChannel+0x7b8>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800328c:	e002      	b.n	8003294 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3b01      	subs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f9      	bne.n	800328e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800329a:	e03a      	b.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <HAL_ADC_ConfigChannel+0x7bc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <HAL_ADC_ConfigChannel+0x7b0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d12a      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c4:	4619      	mov	r1, r3
 80032c6:	4819      	ldr	r0, [pc, #100]	@ (800332c <HAL_ADC_ConfigChannel+0x7a8>)
 80032c8:	f7ff f9a1 	bl	800260e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032cc:	e021      	b.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <HAL_ADC_ConfigChannel+0x7c0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d11c      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a12      	ldr	r2, [pc, #72]	@ (8003334 <HAL_ADC_ConfigChannel+0x7b0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032f6:	4619      	mov	r1, r3
 80032f8:	480c      	ldr	r0, [pc, #48]	@ (800332c <HAL_ADC_ConfigChannel+0x7a8>)
 80032fa:	f7ff f988 	bl	800260e <LL_ADC_SetCommonPathInternalCh>
 80032fe:	e008      	b.n	8003312 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800331a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800331e:	4618      	mov	r0, r3
 8003320:	37d8      	adds	r7, #216	@ 0xd8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	80080000 	.word	0x80080000
 800332c:	50040300 	.word	0x50040300
 8003330:	c7520000 	.word	0xc7520000
 8003334:	50040000 	.word	0x50040000
 8003338:	20000000 	.word	0x20000000
 800333c:	053e2d63 	.word	0x053e2d63
 8003340:	cb840000 	.word	0xcb840000
 8003344:	80000001 	.word	0x80000001

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	@ (80033e4 <__NVIC_EnableIRQ+0x38>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	@ (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	@ (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	@ 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034b4:	d301      	bcc.n	80034ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00f      	b.n	80034da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ba:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <SysTick_Config+0x40>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c2:	210f      	movs	r1, #15
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	f7ff ff8e 	bl	80033e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <SysTick_Config+0x40>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d2:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <SysTick_Config+0x40>)
 80034d4:	2207      	movs	r2, #7
 80034d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	e000e010 	.word	0xe000e010

080034e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff29 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003510:	f7ff ff3e 	bl	8003390 <__NVIC_GetPriorityGrouping>
 8003514:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ff8e 	bl	800343c <NVIC_EncodePriority>
 8003520:	4602      	mov	r2, r0
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff5d 	bl	80033e8 <__NVIC_SetPriority>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff31 	bl	80033ac <__NVIC_EnableIRQ>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ffa2 	bl	80034a4 <SysTick_Config>
 8003560:	4603      	mov	r3, r0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d008      	beq.n	8003594 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e022      	b.n	80035da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 020e 	bic.w	r2, r2, #14
 80035a2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b8:	f003 021c 	and.w	r2, r3, #28
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d005      	beq.n	800360a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e029      	b.n	800365e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 020e 	bic.w	r2, r2, #14
 8003618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 021c 	and.w	r2, r3, #28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
    }
  }
  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003676:	e154      	b.n	8003922 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8146 	beq.w	800391c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d005      	beq.n	80036a8 <HAL_GPIO_Init+0x40>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d130      	bne.n	800370a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036de:	2201      	movs	r2, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0201 	and.w	r2, r3, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b03      	cmp	r3, #3
 8003714:	d017      	beq.n	8003746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d123      	bne.n	800379a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	08da      	lsrs	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a0 	beq.w	800391c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037dc:	4b58      	ldr	r3, [pc, #352]	@ (8003940 <HAL_GPIO_Init+0x2d8>)
 80037de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e0:	4a57      	ldr	r2, [pc, #348]	@ (8003940 <HAL_GPIO_Init+0x2d8>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80037e8:	4b55      	ldr	r3, [pc, #340]	@ (8003940 <HAL_GPIO_Init+0x2d8>)
 80037ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037f4:	4a53      	ldr	r2, [pc, #332]	@ (8003944 <HAL_GPIO_Init+0x2dc>)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	3302      	adds	r3, #2
 80037fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800381e:	d019      	beq.n	8003854 <HAL_GPIO_Init+0x1ec>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a49      	ldr	r2, [pc, #292]	@ (8003948 <HAL_GPIO_Init+0x2e0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_GPIO_Init+0x1e8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a48      	ldr	r2, [pc, #288]	@ (800394c <HAL_GPIO_Init+0x2e4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00d      	beq.n	800384c <HAL_GPIO_Init+0x1e4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a47      	ldr	r2, [pc, #284]	@ (8003950 <HAL_GPIO_Init+0x2e8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <HAL_GPIO_Init+0x1e0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a46      	ldr	r2, [pc, #280]	@ (8003954 <HAL_GPIO_Init+0x2ec>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_GPIO_Init+0x1dc>
 8003840:	2304      	movs	r3, #4
 8003842:	e008      	b.n	8003856 <HAL_GPIO_Init+0x1ee>
 8003844:	2307      	movs	r3, #7
 8003846:	e006      	b.n	8003856 <HAL_GPIO_Init+0x1ee>
 8003848:	2303      	movs	r3, #3
 800384a:	e004      	b.n	8003856 <HAL_GPIO_Init+0x1ee>
 800384c:	2302      	movs	r3, #2
 800384e:	e002      	b.n	8003856 <HAL_GPIO_Init+0x1ee>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_GPIO_Init+0x1ee>
 8003854:	2300      	movs	r3, #0
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	f002 0203 	and.w	r2, r2, #3
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4093      	lsls	r3, r2
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003866:	4937      	ldr	r1, [pc, #220]	@ (8003944 <HAL_GPIO_Init+0x2dc>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003874:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003898:	4a2f      	ldr	r2, [pc, #188]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800389e:	4b2e      	ldr	r3, [pc, #184]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c2:	4a25      	ldr	r2, [pc, #148]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038c8:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038f2:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003916:	4a10      	ldr	r2, [pc, #64]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f aea3 	bne.w	8003678 <HAL_GPIO_Init+0x10>
  }
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000
 8003948:	48000400 	.word	0x48000400
 800394c:	48000800 	.word	0x48000800
 8003950:	48000c00 	.word	0x48000c00
 8003954:	48001000 	.word	0x48001000
 8003958:	40010400 	.word	0x40010400

0800395c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e001      	b.n	800397e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a8:	e002      	b.n	80039b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f806 	bl	80039ec <HAL_GPIO_EXTI_Callback>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a08:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40007000 	.word	0x40007000

08003a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2e:	d130      	bne.n	8003a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a30:	4b23      	ldr	r3, [pc, #140]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3c:	d038      	beq.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a3e:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a46:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2232      	movs	r2, #50	@ 0x32
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0c9b      	lsrs	r3, r3, #18
 8003a60:	3301      	adds	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a64:	e002      	b.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a78:	d102      	bne.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f2      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a8c:	d110      	bne.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e00f      	b.n	8003ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a9e:	d007      	beq.n	8003ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aa0:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003aa8:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	431bde83 	.word	0x431bde83

08003acc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f000 bc02 	b.w	80042e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae0:	4b96      	ldr	r3, [pc, #600]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aea:	4b94      	ldr	r3, [pc, #592]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80e4 	beq.w	8003cca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4c>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	f040 808b 	bne.w	8003c26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 8087 	bne.w	8003c26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b18:	4b88      	ldr	r3, [pc, #544]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_OscConfig+0x64>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e3d9      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	4b81      	ldr	r3, [pc, #516]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_RCC_OscConfig+0x7e>
 8003b40:	4b7e      	ldr	r3, [pc, #504]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b48:	e005      	b.n	8003b56 <HAL_RCC_OscConfig+0x8a>
 8003b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d223      	bcs.n	8003ba2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd8c 	bl	800467c <RCC_SetFlashLatencyFromMSIRange>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e3ba      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b6e:	4b73      	ldr	r3, [pc, #460]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a72      	ldr	r2, [pc, #456]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b74:	f043 0308 	orr.w	r3, r3, #8
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b70      	ldr	r3, [pc, #448]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	496d      	ldr	r1, [pc, #436]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b8c:	4b6b      	ldr	r3, [pc, #428]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	4968      	ldr	r1, [pc, #416]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	e025      	b.n	8003bee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba2:	4b66      	ldr	r3, [pc, #408]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a65      	ldr	r2, [pc, #404]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b63      	ldr	r3, [pc, #396]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4960      	ldr	r1, [pc, #384]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	495b      	ldr	r1, [pc, #364]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fd4c 	bl	800467c <RCC_SetFlashLatencyFromMSIRange>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e37a      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bee:	f000 fc81 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b51      	ldr	r3, [pc, #324]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	4950      	ldr	r1, [pc, #320]	@ (8003d40 <HAL_RCC_OscConfig+0x274>)
 8003c00:	5ccb      	ldrb	r3, [r1, r3]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_RCC_OscConfig+0x278>)
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d48 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fc68 	bl	80024e8 <HAL_InitTick>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d052      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	e35e      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d032      	beq.n	8003c94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c2e:	4b43      	ldr	r3, [pc, #268]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a42      	ldr	r2, [pc, #264]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c3a:	f7fe fca5 	bl	8002588 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c42:	f7fe fca1 	bl	8002588 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e347      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c54:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c60:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a35      	ldr	r2, [pc, #212]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c66:	f043 0308 	orr.w	r3, r3, #8
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4930      	ldr	r1, [pc, #192]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	492b      	ldr	r1, [pc, #172]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
 8003c92:	e01a      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c94:	4b29      	ldr	r3, [pc, #164]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a28      	ldr	r2, [pc, #160]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fc72 	bl	8002588 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ca8:	f7fe fc6e 	bl	8002588 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e314      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cba:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1dc>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d073      	beq.n	8003dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x21c>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d10e      	bne.n	8003d00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b14      	ldr	r3, [pc, #80]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d063      	beq.n	8003dbc <HAL_RCC_OscConfig+0x2f0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d15f      	bne.n	8003dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e2f1      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x24c>
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e025      	b.n	8003d64 <HAL_RCC_OscConfig+0x298>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d20:	d114      	bne.n	8003d4c <HAL_RCC_OscConfig+0x280>
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a02      	ldr	r2, [pc, #8]	@ (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e013      	b.n	8003d64 <HAL_RCC_OscConfig+0x298>
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	0800db00 	.word	0x0800db00
 8003d44:	20000000 	.word	0x20000000
 8003d48:	2000018c 	.word	0x2000018c
 8003d4c:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a9f      	ldr	r2, [pc, #636]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b9d      	ldr	r3, [pc, #628]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a9c      	ldr	r2, [pc, #624]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fc0c 	bl	8002588 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe fc08 	bl	8002588 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	@ 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e2ae      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d86:	4b92      	ldr	r3, [pc, #584]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x2a8>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fbf8 	bl	8002588 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fbf4 	bl	8002588 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e29a      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dae:	4b88      	ldr	r3, [pc, #544]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2d0>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d060      	beq.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_OscConfig+0x310>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d119      	bne.n	8003e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d116      	bne.n	8003e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e277      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b76      	ldr	r3, [pc, #472]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	4973      	ldr	r1, [pc, #460]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e08:	e040      	b.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d023      	beq.n	8003e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e12:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fbb3 	bl	8002588 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fe fbaf 	bl	8002588 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e255      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e38:	4b65      	ldr	r3, [pc, #404]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b62      	ldr	r3, [pc, #392]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	495f      	ldr	r1, [pc, #380]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	e018      	b.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fe fb8f 	bl	8002588 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fb8b 	bl	8002588 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e231      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e80:	4b53      	ldr	r3, [pc, #332]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d03c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01c      	beq.n	8003eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe fb6a 	bl	8002588 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fb66 	bl	8002588 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e20c      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eca:	4b41      	ldr	r3, [pc, #260]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ef      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x3ec>
 8003ed8:	e01b      	b.n	8003f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eda:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fe fb4d 	bl	8002588 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fb49 	bl	8002588 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e1ef      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f04:	4b32      	ldr	r3, [pc, #200]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ef      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80a6 	beq.w	800406c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f20:	2300      	movs	r3, #0
 8003f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f24:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4b27      	ldr	r3, [pc, #156]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	4a26      	ldr	r2, [pc, #152]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f3c:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4c:	4b21      	ldr	r3, [pc, #132]	@ (8003fd4 <HAL_RCC_OscConfig+0x508>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d118      	bne.n	8003f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f58:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <HAL_RCC_OscConfig+0x508>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_RCC_OscConfig+0x508>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f64:	f7fe fb10 	bl	8002588 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6c:	f7fe fb0c 	bl	8002588 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1b2      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f7e:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <HAL_RCC_OscConfig+0x508>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4d8>
 8003f92:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fa2:	e029      	b.n	8003ff8 <HAL_RCC_OscConfig+0x52c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x50c>
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb2:	4a07      	ldr	r2, [pc, #28]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	4a03      	ldr	r2, [pc, #12]	@ (8003fd0 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCC_OscConfig+0x52c>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	4b9a      	ldr	r3, [pc, #616]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fde:	4a99      	ldr	r2, [pc, #612]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fe8:	4b96      	ldr	r3, [pc, #600]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fee:	4a95      	ldr	r2, [pc, #596]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fe fac2 	bl	8002588 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fe fabe 	bl	8002588 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e162      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	4b89      	ldr	r3, [pc, #548]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ed      	beq.n	8004008 <HAL_RCC_OscConfig+0x53c>
 800402c:	e015      	b.n	800405a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fe faab 	bl	8002588 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fe faa7 	bl	8002588 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e14b      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800404c:	4b7d      	ldr	r3, [pc, #500]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1ed      	bne.n	8004036 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405a:	7ffb      	ldrb	r3, [r7, #31]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004060:	4b78      	ldr	r3, [pc, #480]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004064:	4a77      	ldr	r2, [pc, #476]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d03c      	beq.n	80040f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01c      	beq.n	80040ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004080:	4b70      	ldr	r3, [pc, #448]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004082:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004086:	4a6f      	ldr	r2, [pc, #444]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fa7a 	bl	8002588 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004098:	f7fe fa76 	bl	8002588 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e11c      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040aa:	4b66      	ldr	r3, [pc, #408]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80040ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ef      	beq.n	8004098 <HAL_RCC_OscConfig+0x5cc>
 80040b8:	e01b      	b.n	80040f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040ba:	4b62      	ldr	r3, [pc, #392]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80040bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040c0:	4a60      	ldr	r2, [pc, #384]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fe fa5d 	bl	8002588 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d2:	f7fe fa59 	bl	8002588 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0ff      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040e4:	4b57      	ldr	r3, [pc, #348]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80040e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ef      	bne.n	80040d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80f3 	beq.w	80042e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	2b02      	cmp	r3, #2
 8004102:	f040 80c9 	bne.w	8004298 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004106:	4b4f      	ldr	r3, [pc, #316]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0203 	and.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	429a      	cmp	r2, r3
 8004118:	d12c      	bne.n	8004174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	3b01      	subs	r3, #1
 8004126:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d123      	bne.n	8004174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d11b      	bne.n	8004174 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d113      	bne.n	8004174 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	3b01      	subs	r3, #1
 800415a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d109      	bne.n	8004174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d06b      	beq.n	800424c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d062      	beq.n	8004240 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800417a:	4b32      	ldr	r3, [pc, #200]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e0ac      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800418a:	4b2e      	ldr	r3, [pc, #184]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2d      	ldr	r2, [pc, #180]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004190:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004194:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004196:	f7fe f9f7 	bl	8002588 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419e:	f7fe f9f3 	bl	8002588 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e099      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041bc:	4b21      	ldr	r3, [pc, #132]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <HAL_RCC_OscConfig+0x77c>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041cc:	3a01      	subs	r2, #1
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	4311      	orrs	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041d6:	0212      	lsls	r2, r2, #8
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0552      	lsls	r2, r2, #21
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0652      	lsls	r2, r2, #25
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041f6:	06d2      	lsls	r2, r2, #27
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4912      	ldr	r1, [pc, #72]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004200:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0f      	ldr	r2, [pc, #60]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800420c:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a0c      	ldr	r2, [pc, #48]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004218:	f7fe f9b6 	bl	8002588 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe f9b2 	bl	8002588 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e058      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <HAL_RCC_OscConfig+0x778>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800423e:	e050      	b.n	80042e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e04f      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
 8004244:	40021000 	.word	0x40021000
 8004248:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424c:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d144      	bne.n	80042e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004258:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a23      	ldr	r2, [pc, #140]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 800425e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004262:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a20      	ldr	r2, [pc, #128]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 800426a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800426e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004270:	f7fe f98a 	bl	8002588 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe f986 	bl	8002588 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e02c      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428a:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x7ac>
 8004296:	e024      	b.n	80042e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d01f      	beq.n	80042de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 80042a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fe f96d 	bl	8002588 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fe f969 	bl	8002588 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e00f      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042d0:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	4905      	ldr	r1, [pc, #20]	@ (80042ec <HAL_RCC_OscConfig+0x820>)
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <HAL_RCC_OscConfig+0x824>)
 80042d8:	4013      	ands	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
 80042dc:	e001      	b.n	80042e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000
 80042f0:	feeefffc 	.word	0xfeeefffc

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0e7      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b75      	ldr	r3, [pc, #468]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b72      	ldr	r3, [pc, #456]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	4970      	ldr	r1, [pc, #448]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b6e      	ldr	r3, [pc, #440]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0cf      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b66      	ldr	r3, [pc, #408]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004350:	429a      	cmp	r2, r3
 8004352:	d908      	bls.n	8004366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004354:	4b63      	ldr	r3, [pc, #396]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4960      	ldr	r1, [pc, #384]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04c      	beq.n	800440c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d107      	bne.n	800438a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437a:	4b5a      	ldr	r3, [pc, #360]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d121      	bne.n	80043ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e0a6      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004392:	4b54      	ldr	r3, [pc, #336]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d115      	bne.n	80043ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e09a      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043aa:	4b4e      	ldr	r3, [pc, #312]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e08e      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ba:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e086      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b46      	ldr	r3, [pc, #280]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4943      	ldr	r1, [pc, #268]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043dc:	f7fe f8d4 	bl	8002588 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fe f8d0 	bl	8002588 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e06e      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b3a      	ldr	r3, [pc, #232]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004424:	429a      	cmp	r2, r3
 8004426:	d208      	bcs.n	800443a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	492b      	ldr	r1, [pc, #172]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800443a:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d210      	bcs.n	800446a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004448:	4b25      	ldr	r3, [pc, #148]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 0207 	bic.w	r2, r3, #7
 8004450:	4923      	ldr	r1, [pc, #140]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004458:	4b21      	ldr	r3, [pc, #132]	@ (80044e0 <HAL_RCC_ClockConfig+0x1ec>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d001      	beq.n	800446a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e036      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	4918      	ldr	r1, [pc, #96]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004494:	4b13      	ldr	r3, [pc, #76]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4910      	ldr	r1, [pc, #64]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044a8:	f000 f824 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	490b      	ldr	r1, [pc, #44]	@ (80044e8 <HAL_RCC_ClockConfig+0x1f4>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	4a09      	ldr	r2, [pc, #36]	@ (80044ec <HAL_RCC_ClockConfig+0x1f8>)
 80044c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044c8:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_ClockConfig+0x1fc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe f80b 	bl	80024e8 <HAL_InitTick>
 80044d2:	4603      	mov	r3, r0
 80044d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40021000 	.word	0x40021000
 80044e8:	0800db00 	.word	0x0800db00
 80044ec:	20000000 	.word	0x20000000
 80044f0:	2000018c 	.word	0x2000018c

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	@ 0x24
 80044f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b3e      	ldr	r3, [pc, #248]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b3b      	ldr	r3, [pc, #236]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d121      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d11e      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004528:	4b34      	ldr	r3, [pc, #208]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004534:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e005      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004544:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004550:	4a2b      	ldr	r2, [pc, #172]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004564:	e00a      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d102      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800456c:	4b25      	ldr	r3, [pc, #148]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x110>)
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e004      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d101      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004578:	4b23      	ldr	r3, [pc, #140]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x114>)
 800457a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d134      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004582:	4b1e      	ldr	r3, [pc, #120]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0xa6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004598:	e005      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800459a:	4b1a      	ldr	r3, [pc, #104]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x110>)
 800459c:	617b      	str	r3, [r7, #20]
      break;
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045a0:	4b19      	ldr	r3, [pc, #100]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x114>)
 80045a2:	617b      	str	r3, [r7, #20]
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	617b      	str	r3, [r7, #20]
      break;
 80045aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ac:	4b13      	ldr	r3, [pc, #76]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	3301      	adds	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	fb03 f202 	mul.w	r2, r3, r2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d2:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	0e5b      	lsrs	r3, r3, #25
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	3301      	adds	r3, #1
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045ec:	69bb      	ldr	r3, [r7, #24]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	@ 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	0800db18 	.word	0x0800db18
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200

0800460c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4904      	ldr	r1, [pc, #16]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x28>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	0800db10 	.word	0x0800db10

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004654:	f7ff ffda 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	@ (8004678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	0800db10 	.word	0x0800db10

0800467c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004688:	4b2a      	ldr	r3, [pc, #168]	@ (8004734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004694:	f7ff f9b6 	bl	8003a04 <HAL_PWREx_GetVoltageRange>
 8004698:	6178      	str	r0, [r7, #20]
 800469a:	e014      	b.n	80046c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800469c:	4b25      	ldr	r3, [pc, #148]	@ (8004734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a0:	4a24      	ldr	r2, [pc, #144]	@ (8004734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046a8:	4b22      	ldr	r3, [pc, #136]	@ (8004734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046b4:	f7ff f9a6 	bl	8003a04 <HAL_PWREx_GetVoltageRange>
 80046b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046be:	4a1d      	ldr	r2, [pc, #116]	@ (8004734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046cc:	d10b      	bne.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b80      	cmp	r3, #128	@ 0x80
 80046d2:	d919      	bls.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80046d8:	d902      	bls.n	80046e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046da:	2302      	movs	r3, #2
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e013      	b.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046e0:	2301      	movs	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	e010      	b.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b80      	cmp	r3, #128	@ 0x80
 80046ea:	d902      	bls.n	80046f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046ec:	2303      	movs	r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	e00a      	b.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b80      	cmp	r3, #128	@ 0x80
 80046f6:	d102      	bne.n	80046fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046f8:	2302      	movs	r3, #2
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	e004      	b.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b70      	cmp	r3, #112	@ 0x70
 8004702:	d101      	bne.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004704:	2301      	movs	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 0207 	bic.w	r2, r3, #7
 8004710:	4909      	ldr	r1, [pc, #36]	@ (8004738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004718:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d001      	beq.n	800472a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000
 8004738:	40022000 	.word	0x40022000

0800473c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004744:	2300      	movs	r3, #0
 8004746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004748:	2300      	movs	r3, #0
 800474a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004754:	2b00      	cmp	r3, #0
 8004756:	d031      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004760:	d01a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004762:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004766:	d814      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800476c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004770:	d10f      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004772:	4b5d      	ldr	r3, [pc, #372]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4a5c      	ldr	r2, [pc, #368]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800477e:	e00c      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f9f0 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004790:	e003      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	74fb      	strb	r3, [r7, #19]
      break;
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047a0:	4b51      	ldr	r3, [pc, #324]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	494e      	ldr	r1, [pc, #312]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80047b6:	e001      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 809e 	beq.w	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047ce:	4b46      	ldr	r3, [pc, #280]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00d      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e4:	4b40      	ldr	r3, [pc, #256]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	4a3f      	ldr	r2, [pc, #252]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f0:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fc:	2301      	movs	r3, #1
 80047fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004800:	4b3a      	ldr	r3, [pc, #232]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a39      	ldr	r2, [pc, #228]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800480c:	f7fd febc 	bl	8002588 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004812:	e009      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fd feb8 	bl	8002588 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d902      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	74fb      	strb	r3, [r7, #19]
        break;
 8004826:	e005      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004828:	4b30      	ldr	r3, [pc, #192]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ef      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d15a      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800483a:	4b2b      	ldr	r3, [pc, #172]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01e      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	429a      	cmp	r2, r3
 8004854:	d019      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004856:	4b24      	ldr	r3, [pc, #144]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004860:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004862:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004868:	4a1f      	ldr	r2, [pc, #124]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800486a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004872:	4b1d      	ldr	r3, [pc, #116]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004882:	4a19      	ldr	r2, [pc, #100]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fe78 	bl	8002588 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	e00b      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fd fe74 	bl	8002588 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d902      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	74fb      	strb	r3, [r7, #19]
            break;
 80048b2:	e006      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ec      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	4904      	ldr	r1, [pc, #16]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f4:	7c7b      	ldrb	r3, [r7, #17]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fa:	4b9b      	ldr	r3, [pc, #620]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	4a9a      	ldr	r2, [pc, #616]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004912:	4b95      	ldr	r3, [pc, #596]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004918:	f023 0203 	bic.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4991      	ldr	r1, [pc, #580]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004934:	4b8c      	ldr	r3, [pc, #560]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	f023 020c 	bic.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	4989      	ldr	r1, [pc, #548]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004956:	4b84      	ldr	r3, [pc, #528]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	4980      	ldr	r1, [pc, #512]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004978:	4b7b      	ldr	r3, [pc, #492]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	4978      	ldr	r1, [pc, #480]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499a:	4b73      	ldr	r3, [pc, #460]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	496f      	ldr	r1, [pc, #444]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	4967      	ldr	r1, [pc, #412]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049de:	4b62      	ldr	r3, [pc, #392]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	495e      	ldr	r1, [pc, #376]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a00:	4b59      	ldr	r3, [pc, #356]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	4956      	ldr	r1, [pc, #344]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a22:	4b51      	ldr	r3, [pc, #324]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	494d      	ldr	r1, [pc, #308]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d028      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a44:	4b48      	ldr	r3, [pc, #288]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a52:	4945      	ldr	r1, [pc, #276]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a64:	4b40      	ldr	r3, [pc, #256]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a3f      	ldr	r2, [pc, #252]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a6e:	60d3      	str	r3, [r2, #12]
 8004a70:	e011      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a7a:	d10c      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f872 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aa2:	4b31      	ldr	r3, [pc, #196]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab0:	492d      	ldr	r1, [pc, #180]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac2:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	4a28      	ldr	r2, [pc, #160]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004acc:	60d3      	str	r3, [r2, #12]
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f843 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01c      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0e:	4916      	ldr	r1, [pc, #88]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f820 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b30:	7cfb      	ldrb	r3, [r7, #19]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b46:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b54:	4904      	ldr	r1, [pc, #16]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000

08004b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b7a:	4b74      	ldr	r3, [pc, #464]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b86:	4b71      	ldr	r3, [pc, #452]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0203 	and.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10d      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
       ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
       ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d047      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e044      	b.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d018      	beq.n	8004bf2 <RCCEx_PLLSAI1_Config+0x86>
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d825      	bhi.n	8004c10 <RCCEx_PLLSAI1_Config+0xa4>
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d002      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x62>
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d009      	beq.n	8004be0 <RCCEx_PLLSAI1_Config+0x74>
 8004bcc:	e020      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bce:	4b5f      	ldr	r3, [pc, #380]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11d      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bde:	e01a      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d116      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf0:	e013      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bf2:	4b56      	ldr	r3, [pc, #344]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bfe:	4b53      	ldr	r3, [pc, #332]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c0e:	e006      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e004      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c26:	4b49      	ldr	r3, [pc, #292]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	4943      	ldr	r1, [pc, #268]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d17c      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c48:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fd fc98 	bl	8002588 <HAL_GetTick>
 8004c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c5a:	e009      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c5c:	f7fd fc94 	bl	8002588 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d902      	bls.n	8004c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c6e:	e005      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ef      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d15f      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d110      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c88:	4b30      	ldr	r3, [pc, #192]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004c90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6892      	ldr	r2, [r2, #8]
 8004c98:	0211      	lsls	r1, r2, #8
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68d2      	ldr	r2, [r2, #12]
 8004c9e:	06d2      	lsls	r2, r2, #27
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	492a      	ldr	r1, [pc, #168]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	610b      	str	r3, [r1, #16]
 8004ca8:	e027      	b.n	8004cfa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d112      	bne.n	8004cd6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb0:	4b26      	ldr	r3, [pc, #152]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	0211      	lsls	r1, r2, #8
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6912      	ldr	r2, [r2, #16]
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0552      	lsls	r2, r2, #21
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	491f      	ldr	r1, [pc, #124]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	610b      	str	r3, [r1, #16]
 8004cd4:	e011      	b.n	8004cfa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cde:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6892      	ldr	r2, [r2, #8]
 8004ce6:	0211      	lsls	r1, r2, #8
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6952      	ldr	r2, [r2, #20]
 8004cec:	0852      	lsrs	r2, r2, #1
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	0652      	lsls	r2, r2, #25
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	4915      	ldr	r1, [pc, #84]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cfa:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fd fc3f 	bl	8002588 <HAL_GetTick>
 8004d0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d0c:	e009      	b.n	8004d22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d0e:	f7fd fc3b 	bl	8002588 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d902      	bls.n	8004d22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	73fb      	strb	r3, [r7, #15]
          break;
 8004d20:	e005      	b.n	8004d2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d22:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ef      	beq.n	8004d0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	4903      	ldr	r1, [pc, #12]	@ (8004d4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000

08004d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e095      	b.n	8004e8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d72:	d009      	beq.n	8004d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
 8004d7a:	e005      	b.n	8004d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc fb8a 	bl	80014bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dc8:	d902      	bls.n	8004dd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e002      	b.n	8004dd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dde:	d007      	beq.n	8004df0 <HAL_SPI_Init+0xa0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e32:	ea42 0103 	orr.w	r1, r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	f003 0204 	and.w	r2, r3, #4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea6:	f7fd fb6f 	bl	8002588 <HAL_GetTick>
 8004eaa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e15c      	b.n	800517a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Transmit+0x36>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e154      	b.n	800517a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_SPI_Transmit+0x48>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e14d      	b.n	800517a <HAL_SPI_Transmit+0x2e4>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f30:	d10f      	bne.n	8004f52 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5c:	2b40      	cmp	r3, #64	@ 0x40
 8004f5e:	d007      	beq.n	8004f70 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f78:	d952      	bls.n	8005020 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_Transmit+0xf2>
 8004f82:	8b7b      	ldrh	r3, [r7, #26]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d145      	bne.n	8005014 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fac:	e032      	b.n	8005014 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d112      	bne.n	8004fe2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	1c9a      	adds	r2, r3, #2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fe0:	e018      	b.n	8005014 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe2:	f7fd fad1 	bl	8002588 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d803      	bhi.n	8004ffa <HAL_SPI_Transmit+0x164>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d102      	bne.n	8005000 <HAL_SPI_Transmit+0x16a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0b2      	b.n	800517a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1c7      	bne.n	8004fae <HAL_SPI_Transmit+0x118>
 800501e:	e083      	b.n	8005128 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_Transmit+0x198>
 8005028:	8b7b      	ldrh	r3, [r7, #26]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d177      	bne.n	800511e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d912      	bls.n	800505e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	881a      	ldrh	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b02      	subs	r3, #2
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800505c:	e05f      	b.n	800511e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005084:	e04b      	b.n	800511e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d12b      	bne.n	80050ec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d912      	bls.n	80050c4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a2:	881a      	ldrh	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b02      	subs	r3, #2
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050c2:	e02c      	b.n	800511e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050ea:	e018      	b.n	800511e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ec:	f7fd fa4c 	bl	8002588 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_Transmit+0x26e>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d102      	bne.n	800510a <HAL_SPI_Transmit+0x274>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e02d      	b.n	800517a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ae      	bne.n	8005086 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fcf5 	bl	8005b1c <SPI_EndRxTxTransaction>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005178:	2300      	movs	r3, #0
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af02      	add	r7, sp, #8
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
 80051a0:	e123      	b.n	80053ea <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051aa:	d112      	bne.n	80051d2 <HAL_SPI_Receive+0x50>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10e      	bne.n	80051d2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2204      	movs	r2, #4
 80051b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f912 	bl	80053f2 <HAL_SPI_TransmitReceive>
 80051ce:	4603      	mov	r3, r0
 80051d0:	e10b      	b.n	80053ea <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d2:	f7fd f9d9 	bl	8002588 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_SPI_Receive+0x62>
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e100      	b.n	80053ea <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_SPI_Receive+0x74>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e0f9      	b.n	80053ea <HAL_SPI_Receive+0x268>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2204      	movs	r2, #4
 8005202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005248:	d908      	bls.n	800525c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	e007      	b.n	800526c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800526a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005274:	d10f      	bne.n	8005296 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005294:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d007      	beq.n	80052b4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052bc:	d875      	bhi.n	80053aa <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052be:	e037      	b.n	8005330 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d117      	bne.n	80052fe <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f103 020c 	add.w	r2, r3, #12
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80052fc:	e018      	b.n	8005330 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052fe:	f7fd f943 	bl	8002588 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d803      	bhi.n	8005316 <HAL_SPI_Receive+0x194>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d102      	bne.n	800531c <HAL_SPI_Receive+0x19a>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e05c      	b.n	80053ea <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c1      	bne.n	80052c0 <HAL_SPI_Receive+0x13e>
 800533c:	e03b      	b.n	80053b6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d115      	bne.n	8005378 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	b292      	uxth	r2, r2
 8005358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005376:	e018      	b.n	80053aa <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005378:	f7fd f906 	bl	8002588 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d803      	bhi.n	8005390 <HAL_SPI_Receive+0x20e>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Receive+0x214>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e01f      	b.n	80053ea <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1c3      	bne.n	800533e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fb56 	bl	8005a6c <SPI_EndRxTransaction>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b08a      	sub	sp, #40	@ 0x28
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005404:	f7fd f8c0 	bl	8002588 <HAL_GetTick>
 8005408:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005410:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005420:	7ffb      	ldrb	r3, [r7, #31]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d00c      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x4e>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800542c:	d106      	bne.n	800543c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <HAL_SPI_TransmitReceive+0x4a>
 8005436:	7ffb      	ldrb	r3, [r7, #31]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d001      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
 800543e:	e1f3      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x60>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x60>
 800544c:	887b      	ldrh	r3, [r7, #2]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e1e8      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_SPI_TransmitReceive+0x72>
 8005460:	2302      	movs	r3, #2
 8005462:	e1e1      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b04      	cmp	r3, #4
 8005476:	d003      	beq.n	8005480 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2205      	movs	r2, #5
 800547c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	887a      	ldrh	r2, [r7, #2]
 8005490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	887a      	ldrh	r2, [r7, #2]
 80054a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	887a      	ldrh	r2, [r7, #2]
 80054ac:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054c2:	d802      	bhi.n	80054ca <HAL_SPI_TransmitReceive+0xd8>
 80054c4:	8abb      	ldrh	r3, [r7, #20]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d908      	bls.n	80054dc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	e007      	b.n	80054ec <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f6:	2b40      	cmp	r3, #64	@ 0x40
 80054f8:	d007      	beq.n	800550a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005512:	f240 8083 	bls.w	800561c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_SPI_TransmitReceive+0x132>
 800551e:	8afb      	ldrh	r3, [r7, #22]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d16f      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005548:	e05c      	b.n	8005604 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d11b      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x19e>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x19e>
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	2b01      	cmp	r3, #1
 8005566:	d113      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	881a      	ldrh	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	1c9a      	adds	r2, r3, #2
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d11c      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x1e6>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	b292      	uxth	r2, r2
 80055b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	1c9a      	adds	r2, r3, #2
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d4:	2301      	movs	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055d8:	f7fc ffd6 	bl	8002588 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d80d      	bhi.n	8005604 <HAL_SPI_TransmitReceive+0x212>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d009      	beq.n	8005604 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e111      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d19d      	bne.n	800554a <HAL_SPI_TransmitReceive+0x158>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d197      	bne.n	800554a <HAL_SPI_TransmitReceive+0x158>
 800561a:	e0e5      	b.n	80057e8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_SPI_TransmitReceive+0x23a>
 8005624:	8afb      	ldrh	r3, [r7, #22]
 8005626:	2b01      	cmp	r3, #1
 8005628:	f040 80d1 	bne.w	80057ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b01      	cmp	r3, #1
 8005634:	d912      	bls.n	800565c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	1c9a      	adds	r2, r3, #2
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b02      	subs	r3, #2
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800565a:	e0b8      	b.n	80057ce <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005682:	e0a4      	b.n	80057ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b02      	cmp	r3, #2
 8005690:	d134      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x30a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02f      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x30a>
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d12c      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d912      	bls.n	80056d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b02      	subs	r3, #2
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056d0:	e012      	b.n	80056f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d148      	bne.n	800579c <HAL_SPI_TransmitReceive+0x3aa>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d042      	beq.n	800579c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d923      	bls.n	800576a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	b292      	uxth	r2, r2
 800572e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	1c9a      	adds	r2, r3, #2
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b02      	subs	r3, #2
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d81f      	bhi.n	8005798 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	e016      	b.n	8005798 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f103 020c 	add.w	r2, r3, #12
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005798:	2301      	movs	r3, #1
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800579c:	f7fc fef4 	bl	8002588 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d803      	bhi.n	80057b4 <HAL_SPI_TransmitReceive+0x3c2>
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d102      	bne.n	80057ba <HAL_SPI_TransmitReceive+0x3c8>
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e02c      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f af55 	bne.w	8005684 <HAL_SPI_TransmitReceive+0x292>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f47f af4e 	bne.w	8005684 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f995 	bl	8005b1c <SPI_EndRxTxTransaction>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e00e      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005826:	2300      	movs	r3, #0
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3728      	adds	r7, #40	@ 0x28
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005840:	f7fc fea2 	bl	8002588 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005850:	f7fc fe9a 	bl	8002588 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005856:	4b39      	ldr	r3, [pc, #228]	@ (800593c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	015b      	lsls	r3, r3, #5
 800585c:	0d1b      	lsrs	r3, r3, #20
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005866:	e054      	b.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d050      	beq.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005870:	f7fc fe8a 	bl	8002588 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d902      	bls.n	8005886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d13d      	bne.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800589e:	d111      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a8:	d004      	beq.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b2:	d107      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058cc:	d10f      	bne.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e017      	b.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3b01      	subs	r3, #1
 8005910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	429a      	cmp	r2, r3
 800592e:	d19b      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000000 	.word	0x20000000

08005940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	@ 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005952:	f7fc fe19 	bl	8002588 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	4413      	add	r3, r2
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005962:	f7fc fe11 	bl	8002588 <HAL_GetTick>
 8005966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005970:	4b3d      	ldr	r3, [pc, #244]	@ (8005a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00da      	lsls	r2, r3, #3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	0d1b      	lsrs	r3, r3, #20
 8005980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005988:	e060      	b.n	8005a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005990:	d107      	bne.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d050      	beq.n	8005a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059aa:	f7fc fded 	bl	8002588 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d902      	bls.n	80059c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d13d      	bne.n	8005a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d8:	d111      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e2:	d004      	beq.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ec:	d107      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a06:	d10f      	bne.n	8005a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e010      	b.n	8005a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d196      	bne.n	800598a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	@ 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000000 	.word	0x20000000

08005a6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a80:	d111      	bne.n	8005aa6 <SPI_EndRxTransaction+0x3a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a8a:	d004      	beq.n	8005a96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a94:	d107      	bne.n	8005aa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	@ 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff febd 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e023      	b.n	8005b14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad4:	d11d      	bne.n	8005b12 <SPI_EndRxTransaction+0xa6>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ade:	d004      	beq.n	8005aea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae8:	d113      	bne.n	8005b12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ff22 	bl	8005940 <SPI_WaitFifoStateUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e000      	b.n	8005b14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ff03 	bl	8005940 <SPI_WaitFifoStateUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e027      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2180      	movs	r1, #128	@ 0x80
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fe68 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e014      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fedc 	bl	8005940 <SPI_WaitFifoStateUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e000      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e049      	b.n	8005c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fedc 	bl	800198c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 fb7a 	bl	80062e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d001      	beq.n	8005c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e033      	b.n	8005cd8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ce4 <HAL_TIM_Base_Start+0x8c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIM_Base_Start+0x3e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_Base_Start+0x3e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <HAL_TIM_Base_Start+0x90>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d115      	bne.n	8005cc2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <HAL_TIM_Base_Start+0x94>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d015      	beq.n	8005cd4 <HAL_TIM_Base_Start+0x7c>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cae:	d011      	beq.n	8005cd4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	e008      	b.n	8005cd4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e000      	b.n	8005cd6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	00010007 	.word	0x00010007

08005cf0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6a1a      	ldr	r2, [r3, #32]
 8005cfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10f      	bne.n	8005d28 <HAL_TIM_Base_Stop+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6a1a      	ldr	r2, [r3, #32]
 8005d0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d107      	bne.n	8005d28 <HAL_TIM_Base_Stop+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e049      	b.n	8005de4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fb fdf1 	bl	800194c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 faaf 	bl	80062e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start+0x24>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e03c      	b.n	8005e8a <HAL_TIM_PWM_Start+0x9e>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start+0x3e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e02f      	b.n	8005e8a <HAL_TIM_PWM_Start+0x9e>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start+0x58>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e022      	b.n	8005e8a <HAL_TIM_PWM_Start+0x9e>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b0c      	cmp	r3, #12
 8005e48:	d109      	bne.n	8005e5e <HAL_TIM_PWM_Start+0x72>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	bf14      	ite	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	2300      	moveq	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	e015      	b.n	8005e8a <HAL_TIM_PWM_Start+0x9e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d109      	bne.n	8005e78 <HAL_TIM_PWM_Start+0x8c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	bf14      	ite	ne
 8005e70:	2301      	movne	r3, #1
 8005e72:	2300      	moveq	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e008      	b.n	8005e8a <HAL_TIM_PWM_Start+0x9e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e07e      	b.n	8005f90 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0xb6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea0:	e023      	b.n	8005eea <HAL_TIM_PWM_Start+0xfe>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xc6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb0:	e01b      	b.n	8005eea <HAL_TIM_PWM_Start+0xfe>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start+0xd6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec0:	e013      	b.n	8005eea <HAL_TIM_PWM_Start+0xfe>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0xe6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed0:	e00b      	b.n	8005eea <HAL_TIM_PWM_Start+0xfe>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start+0xf6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee0:	e003      	b.n	8005eea <HAL_TIM_PWM_Start+0xfe>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fce2 	bl	80068bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a26      	ldr	r2, [pc, #152]	@ (8005f98 <HAL_TIM_PWM_Start+0x1ac>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x12a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a25      	ldr	r2, [pc, #148]	@ (8005f9c <HAL_TIM_PWM_Start+0x1b0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x12a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <HAL_TIM_PWM_Start+0x1b4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x12e>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_PWM_Start+0x130>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <HAL_TIM_PWM_Start+0x1ac>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x162>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f42:	d004      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x162>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a14      	ldr	r2, [pc, #80]	@ (8005f9c <HAL_TIM_PWM_Start+0x1b0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d115      	bne.n	8005f7a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <HAL_TIM_PWM_Start+0x1b8>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b06      	cmp	r3, #6
 8005f5e:	d015      	beq.n	8005f8c <HAL_TIM_PWM_Start+0x1a0>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f66:	d011      	beq.n	8005f8c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f78:	e008      	b.n	8005f8c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e000      	b.n	8005f8e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	00010007 	.word	0x00010007

08005fa8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fc7e 	bl	80068bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a39      	ldr	r2, [pc, #228]	@ (80060ac <HAL_TIM_PWM_Stop+0x104>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_TIM_PWM_Stop+0x36>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a38      	ldr	r2, [pc, #224]	@ (80060b0 <HAL_TIM_PWM_Stop+0x108>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_TIM_PWM_Stop+0x36>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a36      	ldr	r2, [pc, #216]	@ (80060b4 <HAL_TIM_PWM_Stop+0x10c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_PWM_Stop+0x3a>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_PWM_Stop+0x3c>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d017      	beq.n	8006018 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6a1a      	ldr	r2, [r3, #32]
 8005fee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10f      	bne.n	8006018 <HAL_TIM_PWM_Stop+0x70>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6a1a      	ldr	r2, [r3, #32]
 8005ffe:	f240 4344 	movw	r3, #1092	@ 0x444
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d107      	bne.n	8006018 <HAL_TIM_PWM_Stop+0x70>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006016:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10f      	bne.n	8006048 <HAL_TIM_PWM_Stop+0xa0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a1a      	ldr	r2, [r3, #32]
 800602e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <HAL_TIM_PWM_Stop+0xa0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <HAL_TIM_PWM_Stop+0xb0>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006056:	e023      	b.n	80060a0 <HAL_TIM_PWM_Stop+0xf8>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b04      	cmp	r3, #4
 800605c:	d104      	bne.n	8006068 <HAL_TIM_PWM_Stop+0xc0>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006066:	e01b      	b.n	80060a0 <HAL_TIM_PWM_Stop+0xf8>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b08      	cmp	r3, #8
 800606c:	d104      	bne.n	8006078 <HAL_TIM_PWM_Stop+0xd0>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006076:	e013      	b.n	80060a0 <HAL_TIM_PWM_Stop+0xf8>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b0c      	cmp	r3, #12
 800607c:	d104      	bne.n	8006088 <HAL_TIM_PWM_Stop+0xe0>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006086:	e00b      	b.n	80060a0 <HAL_TIM_PWM_Stop+0xf8>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b10      	cmp	r3, #16
 800608c:	d104      	bne.n	8006098 <HAL_TIM_PWM_Stop+0xf0>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006096:	e003      	b.n	80060a0 <HAL_TIM_PWM_Stop+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400

080060b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0ff      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b14      	cmp	r3, #20
 80060e2:	f200 80f0 	bhi.w	80062c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080062c7 	.word	0x080062c7
 80060f4:	080062c7 	.word	0x080062c7
 80060f8:	080062c7 	.word	0x080062c7
 80060fc:	08006181 	.word	0x08006181
 8006100:	080062c7 	.word	0x080062c7
 8006104:	080062c7 	.word	0x080062c7
 8006108:	080062c7 	.word	0x080062c7
 800610c:	080061c3 	.word	0x080061c3
 8006110:	080062c7 	.word	0x080062c7
 8006114:	080062c7 	.word	0x080062c7
 8006118:	080062c7 	.word	0x080062c7
 800611c:	08006203 	.word	0x08006203
 8006120:	080062c7 	.word	0x080062c7
 8006124:	080062c7 	.word	0x080062c7
 8006128:	080062c7 	.word	0x080062c7
 800612c:	08006245 	.word	0x08006245
 8006130:	080062c7 	.word	0x080062c7
 8006134:	080062c7 	.word	0x080062c7
 8006138:	080062c7 	.word	0x080062c7
 800613c:	08006285 	.word	0x08006285
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f93a 	bl	80063c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0208 	orr.w	r2, r2, #8
 800615a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0204 	bic.w	r2, r2, #4
 800616a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6999      	ldr	r1, [r3, #24]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	619a      	str	r2, [r3, #24]
      break;
 800617e:	e0a5      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f996 	bl	80064b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800619a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6999      	ldr	r1, [r3, #24]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	619a      	str	r2, [r3, #24]
      break;
 80061c0:	e084      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f9ef 	bl	80065ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0208 	orr.w	r2, r2, #8
 80061dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0204 	bic.w	r2, r2, #4
 80061ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69d9      	ldr	r1, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	61da      	str	r2, [r3, #28]
      break;
 8006200:	e064      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fa47 	bl	800669c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800621c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800622c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69d9      	ldr	r1, [r3, #28]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	021a      	lsls	r2, r3, #8
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	61da      	str	r2, [r3, #28]
      break;
 8006242:	e043      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fa84 	bl	8006758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0208 	orr.w	r2, r2, #8
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0204 	bic.w	r2, r2, #4
 800626e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006282:	e023      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fabc 	bl	8006808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800629e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062c4:	e002      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop

080062e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a30      	ldr	r2, [pc, #192]	@ (80063b4 <TIM_Base_SetConfig+0xd4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_Base_SetConfig+0x20>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fe:	d108      	bne.n	8006312 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a27      	ldr	r2, [pc, #156]	@ (80063b4 <TIM_Base_SetConfig+0xd4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0x52>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0x52>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a24      	ldr	r2, [pc, #144]	@ (80063b8 <TIM_Base_SetConfig+0xd8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0x52>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a23      	ldr	r2, [pc, #140]	@ (80063bc <TIM_Base_SetConfig+0xdc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d108      	bne.n	8006344 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a12      	ldr	r2, [pc, #72]	@ (80063b4 <TIM_Base_SetConfig+0xd4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_Base_SetConfig+0xa0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a11      	ldr	r2, [pc, #68]	@ (80063b8 <TIM_Base_SetConfig+0xd8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0xa0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a10      	ldr	r2, [pc, #64]	@ (80063bc <TIM_Base_SetConfig+0xdc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]
  }
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400

080063c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f023 0201 	bic.w	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 0302 	bic.w	r3, r3, #2
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a24      	ldr	r2, [pc, #144]	@ (80064ac <TIM_OC1_SetConfig+0xec>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_OC1_SetConfig+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a23      	ldr	r2, [pc, #140]	@ (80064b0 <TIM_OC1_SetConfig+0xf0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC1_SetConfig+0x70>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a22      	ldr	r2, [pc, #136]	@ (80064b4 <TIM_OC1_SetConfig+0xf4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d10c      	bne.n	800644a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0308 	bic.w	r3, r3, #8
 8006436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a17      	ldr	r2, [pc, #92]	@ (80064ac <TIM_OC1_SetConfig+0xec>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d007      	beq.n	8006462 <TIM_OC1_SetConfig+0xa2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a16      	ldr	r2, [pc, #88]	@ (80064b0 <TIM_OC1_SetConfig+0xf0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_OC1_SetConfig+0xa2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a15      	ldr	r2, [pc, #84]	@ (80064b4 <TIM_OC1_SetConfig+0xf4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d111      	bne.n	8006486 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	621a      	str	r2, [r3, #32]
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400

080064b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0210 	bic.w	r2, r3, #16
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0320 	bic.w	r3, r3, #32
 8006506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a22      	ldr	r2, [pc, #136]	@ (80065a0 <TIM_OC2_SetConfig+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a19      	ldr	r2, [pc, #100]	@ (80065a0 <TIM_OC2_SetConfig+0xe8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_OC2_SetConfig+0x98>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a18      	ldr	r2, [pc, #96]	@ (80065a4 <TIM_OC2_SetConfig+0xec>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC2_SetConfig+0x98>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a17      	ldr	r2, [pc, #92]	@ (80065a8 <TIM_OC2_SetConfig+0xf0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d113      	bne.n	8006578 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400

080065ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a21      	ldr	r2, [pc, #132]	@ (8006690 <TIM_OC3_SetConfig+0xe4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d10d      	bne.n	800662a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <TIM_OC3_SetConfig+0xe4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_OC3_SetConfig+0x96>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a17      	ldr	r2, [pc, #92]	@ (8006694 <TIM_OC3_SetConfig+0xe8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_OC3_SetConfig+0x96>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <TIM_OC3_SetConfig+0xec>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d113      	bne.n	800666a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	621a      	str	r2, [r3, #32]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400

0800669c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a14      	ldr	r2, [pc, #80]	@ (800674c <TIM_OC4_SetConfig+0xb0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_OC4_SetConfig+0x74>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a13      	ldr	r2, [pc, #76]	@ (8006750 <TIM_OC4_SetConfig+0xb4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_OC4_SetConfig+0x74>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a12      	ldr	r2, [pc, #72]	@ (8006754 <TIM_OC4_SetConfig+0xb8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d109      	bne.n	8006724 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	019b      	lsls	r3, r3, #6
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40012c00 	.word	0x40012c00
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400

08006758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800679c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <TIM_OC5_SetConfig+0xa4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_OC5_SetConfig+0x6a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a12      	ldr	r2, [pc, #72]	@ (8006800 <TIM_OC5_SetConfig+0xa8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC5_SetConfig+0x6a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a11      	ldr	r2, [pc, #68]	@ (8006804 <TIM_OC5_SetConfig+0xac>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d109      	bne.n	80067d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	621a      	str	r2, [r3, #32]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40014000 	.word	0x40014000
 8006804:	40014400 	.word	0x40014400

08006808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800684e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	051b      	lsls	r3, r3, #20
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a14      	ldr	r2, [pc, #80]	@ (80068b0 <TIM_OC6_SetConfig+0xa8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_OC6_SetConfig+0x6c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a13      	ldr	r2, [pc, #76]	@ (80068b4 <TIM_OC6_SetConfig+0xac>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC6_SetConfig+0x6c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a12      	ldr	r2, [pc, #72]	@ (80068b8 <TIM_OC6_SetConfig+0xb0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d109      	bne.n	8006888 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400

080068bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2201      	movs	r2, #1
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800691c:	2302      	movs	r3, #2
 800691e:	e04f      	b.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a21      	ldr	r2, [pc, #132]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a14      	ldr	r2, [pc, #80]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006988:	d004      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a10      	ldr	r2, [pc, #64]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10c      	bne.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40014000 	.word	0x40014000

080069d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e060      	b.n	8006ab2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a14      	ldr	r2, [pc, #80]	@ (8006ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d115      	bne.n	8006aa0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	051b      	lsls	r3, r3, #20
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00

08006ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e040      	b.n	8006b58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fb f836 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2224      	movs	r2, #36	@ 0x24
 8006af0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0201 	bic.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fe7e 	bl	800780c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fc21 	bl	8007358 <UART_SetConfig>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e01b      	b.n	8006b58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fefd 	bl	8007950 <UART_CheckIdleState>
 8006b56:	4603      	mov	r3, r0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	@ 0x28
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d177      	bne.n	8006c68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_UART_Transmit+0x24>
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e070      	b.n	8006c6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2221      	movs	r2, #33	@ 0x21
 8006b94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b96:	f7fb fcf7 	bl	8002588 <HAL_GetTick>
 8006b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb4:	d108      	bne.n	8006bc8 <HAL_UART_Transmit+0x68>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	e003      	b.n	8006bd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bd0:	e02f      	b.n	8006c32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2180      	movs	r1, #128	@ 0x80
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 ff5f 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e03b      	b.n	8006c6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c04:	b292      	uxth	r2, r2
 8006c06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e007      	b.n	8006c20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1c9      	bne.n	8006bd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2200      	movs	r2, #0
 8006c46:	2140      	movs	r1, #64	@ 0x40
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 ff29 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e005      	b.n	8006c6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	@ 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d137      	bne.n	8006cfc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_UART_Receive_IT+0x24>
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e030      	b.n	8006cfe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <HAL_UART_Receive_IT+0x94>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01f      	beq.n	8006cec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d018      	beq.n	8006cec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	6a3a      	ldr	r2, [r7, #32]
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 ff42 	bl	8007b7c <UART_Start_Receive_IT>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	e000      	b.n	8006cfe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3728      	adds	r7, #40	@ 0x28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40008000 	.word	0x40008000

08006d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d115      	bne.n	8006d74 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00f      	beq.n	8006d74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 82ca 	beq.w	80072fe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
      }
      return;
 8006d72:	e2c4      	b.n	80072fe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8117 	beq.w	8006fac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d8e:	4b85      	ldr	r3, [pc, #532]	@ (8006fa4 <HAL_UART_IRQHandler+0x298>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 810a 	beq.w	8006fac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <HAL_UART_IRQHandler+0xbc>
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d011      	beq.n	8006df8 <HAL_UART_IRQHandler+0xec>
 8006dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2202      	movs	r2, #2
 8006de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d011      	beq.n	8006e28 <HAL_UART_IRQHandler+0x11c>
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2204      	movs	r2, #4
 8006e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e1e:	f043 0202 	orr.w	r2, r3, #2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d017      	beq.n	8006e64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e5a:	f043 0208 	orr.w	r2, r3, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d012      	beq.n	8006e96 <HAL_UART_IRQHandler+0x18a>
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00c      	beq.n	8006e96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e8c:	f043 0220 	orr.w	r2, r3, #32
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8230 	beq.w	8007302 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ede:	2b40      	cmp	r3, #64	@ 0x40
 8006ee0:	d005      	beq.n	8006eee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ee6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d04f      	beq.n	8006f8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 ff0a 	bl	8007d08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efe:	2b40      	cmp	r3, #64	@ 0x40
 8006f00:	d141      	bne.n	8006f86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1d9      	bne.n	8006f02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d013      	beq.n	8006f7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f5a:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <HAL_UART_IRQHandler+0x29c>)
 8006f5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fc fb3f 	bl	80035e6 <HAL_DMA_Abort_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d017      	beq.n	8006f9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7c:	e00f      	b.n	8006f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9d4 	bl	800732c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	e00b      	b.n	8006f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f9d0 	bl	800732c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8c:	e007      	b.n	8006f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f9cc 	bl	800732c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006f9c:	e1b1      	b.n	8007302 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9e:	bf00      	nop
    return;
 8006fa0:	e1af      	b.n	8007302 <HAL_UART_IRQHandler+0x5f6>
 8006fa2:	bf00      	nop
 8006fa4:	04000120 	.word	0x04000120
 8006fa8:	08007dd1 	.word	0x08007dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 816a 	bne.w	800728a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 8163 	beq.w	800728a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 815c 	beq.w	800728a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	f040 80d4 	bne.w	8007192 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80ad 	beq.w	800715a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800700a:	429a      	cmp	r2, r3
 800700c:	f080 80a5 	bcs.w	800715a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007016:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	f040 8086 	bne.w	8007138 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007040:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800705a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007062:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800706e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1da      	bne.n	800702c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007088:	f023 0301 	bic.w	r3, r3, #1
 800708c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800709a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800709e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e1      	bne.n	8007076 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3308      	adds	r3, #8
 80070b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3308      	adds	r3, #8
 80070d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e3      	bne.n	80070b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007108:	f023 0310 	bic.w	r3, r3, #16
 800710c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800711a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800711c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e4      	bne.n	80070f8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007132:	4618      	mov	r0, r3
 8007134:	f7fc fa19 	bl	800356a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800714a:	b29b      	uxth	r3, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8f4 	bl	8007340 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007158:	e0d5      	b.n	8007306 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007164:	429a      	cmp	r2, r3
 8007166:	f040 80ce 	bne.w	8007306 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b20      	cmp	r3, #32
 8007178:	f040 80c5 	bne.w	8007306 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f8d8 	bl	8007340 <HAL_UARTEx_RxEventCallback>
      return;
 8007190:	e0b9      	b.n	8007306 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800719e:	b29b      	uxth	r3, r3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 80ab 	beq.w	800730a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80071b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 80a6 	beq.w	800730a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e4      	bne.n	80071be <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	623b      	str	r3, [r7, #32]
   return(result);
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007218:	633a      	str	r2, [r7, #48]	@ 0x30
 800721a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800721e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e3      	bne.n	80071f4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	60fb      	str	r3, [r7, #12]
   return(result);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f023 0310 	bic.w	r3, r3, #16
 8007254:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	69b9      	ldr	r1, [r7, #24]
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	617b      	str	r3, [r7, #20]
   return(result);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e4      	bne.n	8007240 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2202      	movs	r2, #2
 800727a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800727c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f85c 	bl	8007340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007288:	e03f      	b.n	800730a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <HAL_UART_IRQHandler+0x5a8>
 8007296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80072aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 ff8b 	bl	80081c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072b2:	e02d      	b.n	8007310 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00e      	beq.n	80072de <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01c      	beq.n	800730e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	4798      	blx	r3
    }
    return;
 80072dc:	e017      	b.n	800730e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d012      	beq.n	8007310 <HAL_UART_IRQHandler+0x604>
 80072ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fd80 	bl	8007dfc <UART_EndTransmit_IT>
    return;
 80072fc:	e008      	b.n	8007310 <HAL_UART_IRQHandler+0x604>
      return;
 80072fe:	bf00      	nop
 8007300:	e006      	b.n	8007310 <HAL_UART_IRQHandler+0x604>
    return;
 8007302:	bf00      	nop
 8007304:	e004      	b.n	8007310 <HAL_UART_IRQHandler+0x604>
      return;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <HAL_UART_IRQHandler+0x604>
      return;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <HAL_UART_IRQHandler+0x604>
    return;
 800730e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007310:	37e8      	adds	r7, #232	@ 0xe8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop

08007318 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800735c:	b08a      	sub	sp, #40	@ 0x28
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	431a      	orrs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4313      	orrs	r3, r2
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b9e      	ldr	r3, [pc, #632]	@ (8007600 <UART_SetConfig+0x2a8>)
 8007388:	4013      	ands	r3, r2
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007390:	430b      	orrs	r3, r1
 8007392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a93      	ldr	r2, [pc, #588]	@ (8007604 <UART_SetConfig+0x2ac>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c0:	4313      	orrs	r3, r2
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a8a      	ldr	r2, [pc, #552]	@ (8007608 <UART_SetConfig+0x2b0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d126      	bne.n	8007430 <UART_SetConfig+0xd8>
 80073e2:	4b8a      	ldr	r3, [pc, #552]	@ (800760c <UART_SetConfig+0x2b4>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d81b      	bhi.n	8007428 <UART_SetConfig+0xd0>
 80073f0:	a201      	add	r2, pc, #4	@ (adr r2, 80073f8 <UART_SetConfig+0xa0>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007419 	.word	0x08007419
 8007400:	08007411 	.word	0x08007411
 8007404:	08007421 	.word	0x08007421
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740e:	e0ab      	b.n	8007568 <UART_SetConfig+0x210>
 8007410:	2302      	movs	r3, #2
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007416:	e0a7      	b.n	8007568 <UART_SetConfig+0x210>
 8007418:	2304      	movs	r3, #4
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741e:	e0a3      	b.n	8007568 <UART_SetConfig+0x210>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007426:	e09f      	b.n	8007568 <UART_SetConfig+0x210>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742e:	e09b      	b.n	8007568 <UART_SetConfig+0x210>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a76      	ldr	r2, [pc, #472]	@ (8007610 <UART_SetConfig+0x2b8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d138      	bne.n	80074ac <UART_SetConfig+0x154>
 800743a:	4b74      	ldr	r3, [pc, #464]	@ (800760c <UART_SetConfig+0x2b4>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007440:	f003 030c 	and.w	r3, r3, #12
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d82d      	bhi.n	80074a4 <UART_SetConfig+0x14c>
 8007448:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <UART_SetConfig+0xf8>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007485 	.word	0x08007485
 8007454:	080074a5 	.word	0x080074a5
 8007458:	080074a5 	.word	0x080074a5
 800745c:	080074a5 	.word	0x080074a5
 8007460:	08007495 	.word	0x08007495
 8007464:	080074a5 	.word	0x080074a5
 8007468:	080074a5 	.word	0x080074a5
 800746c:	080074a5 	.word	0x080074a5
 8007470:	0800748d 	.word	0x0800748d
 8007474:	080074a5 	.word	0x080074a5
 8007478:	080074a5 	.word	0x080074a5
 800747c:	080074a5 	.word	0x080074a5
 8007480:	0800749d 	.word	0x0800749d
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748a:	e06d      	b.n	8007568 <UART_SetConfig+0x210>
 800748c:	2302      	movs	r3, #2
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007492:	e069      	b.n	8007568 <UART_SetConfig+0x210>
 8007494:	2304      	movs	r3, #4
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749a:	e065      	b.n	8007568 <UART_SetConfig+0x210>
 800749c:	2308      	movs	r3, #8
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a2:	e061      	b.n	8007568 <UART_SetConfig+0x210>
 80074a4:	2310      	movs	r3, #16
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074aa:	e05d      	b.n	8007568 <UART_SetConfig+0x210>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a58      	ldr	r2, [pc, #352]	@ (8007614 <UART_SetConfig+0x2bc>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d125      	bne.n	8007502 <UART_SetConfig+0x1aa>
 80074b6:	4b55      	ldr	r3, [pc, #340]	@ (800760c <UART_SetConfig+0x2b4>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074c0:	2b30      	cmp	r3, #48	@ 0x30
 80074c2:	d016      	beq.n	80074f2 <UART_SetConfig+0x19a>
 80074c4:	2b30      	cmp	r3, #48	@ 0x30
 80074c6:	d818      	bhi.n	80074fa <UART_SetConfig+0x1a2>
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d00a      	beq.n	80074e2 <UART_SetConfig+0x18a>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d814      	bhi.n	80074fa <UART_SetConfig+0x1a2>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <UART_SetConfig+0x182>
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d008      	beq.n	80074ea <UART_SetConfig+0x192>
 80074d8:	e00f      	b.n	80074fa <UART_SetConfig+0x1a2>
 80074da:	2300      	movs	r3, #0
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e0:	e042      	b.n	8007568 <UART_SetConfig+0x210>
 80074e2:	2302      	movs	r3, #2
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e8:	e03e      	b.n	8007568 <UART_SetConfig+0x210>
 80074ea:	2304      	movs	r3, #4
 80074ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f0:	e03a      	b.n	8007568 <UART_SetConfig+0x210>
 80074f2:	2308      	movs	r3, #8
 80074f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f8:	e036      	b.n	8007568 <UART_SetConfig+0x210>
 80074fa:	2310      	movs	r3, #16
 80074fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007500:	e032      	b.n	8007568 <UART_SetConfig+0x210>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a3f      	ldr	r2, [pc, #252]	@ (8007604 <UART_SetConfig+0x2ac>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d12a      	bne.n	8007562 <UART_SetConfig+0x20a>
 800750c:	4b3f      	ldr	r3, [pc, #252]	@ (800760c <UART_SetConfig+0x2b4>)
 800750e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007512:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007516:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800751a:	d01a      	beq.n	8007552 <UART_SetConfig+0x1fa>
 800751c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007520:	d81b      	bhi.n	800755a <UART_SetConfig+0x202>
 8007522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007526:	d00c      	beq.n	8007542 <UART_SetConfig+0x1ea>
 8007528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800752c:	d815      	bhi.n	800755a <UART_SetConfig+0x202>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <UART_SetConfig+0x1e2>
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007536:	d008      	beq.n	800754a <UART_SetConfig+0x1f2>
 8007538:	e00f      	b.n	800755a <UART_SetConfig+0x202>
 800753a:	2300      	movs	r3, #0
 800753c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007540:	e012      	b.n	8007568 <UART_SetConfig+0x210>
 8007542:	2302      	movs	r3, #2
 8007544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007548:	e00e      	b.n	8007568 <UART_SetConfig+0x210>
 800754a:	2304      	movs	r3, #4
 800754c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007550:	e00a      	b.n	8007568 <UART_SetConfig+0x210>
 8007552:	2308      	movs	r3, #8
 8007554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007558:	e006      	b.n	8007568 <UART_SetConfig+0x210>
 800755a:	2310      	movs	r3, #16
 800755c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007560:	e002      	b.n	8007568 <UART_SetConfig+0x210>
 8007562:	2310      	movs	r3, #16
 8007564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a25      	ldr	r2, [pc, #148]	@ (8007604 <UART_SetConfig+0x2ac>)
 800756e:	4293      	cmp	r3, r2
 8007570:	f040 808a 	bne.w	8007688 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007574:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007578:	2b08      	cmp	r3, #8
 800757a:	d824      	bhi.n	80075c6 <UART_SetConfig+0x26e>
 800757c:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <UART_SetConfig+0x22c>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075c7 	.word	0x080075c7
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075c7 	.word	0x080075c7
 8007594:	080075b7 	.word	0x080075b7
 8007598:	080075c7 	.word	0x080075c7
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075c7 	.word	0x080075c7
 80075a4:	080075bf 	.word	0x080075bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a8:	f7fd f83c 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80075ac:	61f8      	str	r0, [r7, #28]
        break;
 80075ae:	e010      	b.n	80075d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b0:	4b19      	ldr	r3, [pc, #100]	@ (8007618 <UART_SetConfig+0x2c0>)
 80075b2:	61fb      	str	r3, [r7, #28]
        break;
 80075b4:	e00d      	b.n	80075d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b6:	f7fc ff9d 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80075ba:	61f8      	str	r0, [r7, #28]
        break;
 80075bc:	e009      	b.n	80075d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075c2:	61fb      	str	r3, [r7, #28]
        break;
 80075c4:	e005      	b.n	80075d2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80075d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8109 	beq.w	80077ec <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	4413      	add	r3, r2
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d305      	bcc.n	80075f6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d912      	bls.n	800761c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075fc:	e0f6      	b.n	80077ec <UART_SetConfig+0x494>
 80075fe:	bf00      	nop
 8007600:	efff69f3 	.word	0xefff69f3
 8007604:	40008000 	.word	0x40008000
 8007608:	40013800 	.word	0x40013800
 800760c:	40021000 	.word	0x40021000
 8007610:	40004400 	.word	0x40004400
 8007614:	40004800 	.word	0x40004800
 8007618:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2200      	movs	r2, #0
 8007620:	461c      	mov	r4, r3
 8007622:	4615      	mov	r5, r2
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	022b      	lsls	r3, r5, #8
 800762e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007632:	0222      	lsls	r2, r4, #8
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	6849      	ldr	r1, [r1, #4]
 8007638:	0849      	lsrs	r1, r1, #1
 800763a:	2000      	movs	r0, #0
 800763c:	4688      	mov	r8, r1
 800763e:	4681      	mov	r9, r0
 8007640:	eb12 0a08 	adds.w	sl, r2, r8
 8007644:	eb43 0b09 	adc.w	fp, r3, r9
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007656:	4650      	mov	r0, sl
 8007658:	4659      	mov	r1, fp
 800765a:	f7f9 faa5 	bl	8000ba8 <__aeabi_uldivmod>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4613      	mov	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800766c:	d308      	bcc.n	8007680 <UART_SetConfig+0x328>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007674:	d204      	bcs.n	8007680 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	60da      	str	r2, [r3, #12]
 800767e:	e0b5      	b.n	80077ec <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007686:	e0b1      	b.n	80077ec <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007690:	d15d      	bne.n	800774e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007692:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007696:	2b08      	cmp	r3, #8
 8007698:	d827      	bhi.n	80076ea <UART_SetConfig+0x392>
 800769a:	a201      	add	r2, pc, #4	@ (adr r2, 80076a0 <UART_SetConfig+0x348>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076cd 	.word	0x080076cd
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	080076eb 	.word	0x080076eb
 80076b0:	080076db 	.word	0x080076db
 80076b4:	080076eb 	.word	0x080076eb
 80076b8:	080076eb 	.word	0x080076eb
 80076bc:	080076eb 	.word	0x080076eb
 80076c0:	080076e3 	.word	0x080076e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c4:	f7fc ffae 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80076c8:	61f8      	str	r0, [r7, #28]
        break;
 80076ca:	e014      	b.n	80076f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076cc:	f7fc ffc0 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80076d0:	61f8      	str	r0, [r7, #28]
        break;
 80076d2:	e010      	b.n	80076f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007808 <UART_SetConfig+0x4b0>)
 80076d6:	61fb      	str	r3, [r7, #28]
        break;
 80076d8:	e00d      	b.n	80076f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076da:	f7fc ff0b 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80076de:	61f8      	str	r0, [r7, #28]
        break;
 80076e0:	e009      	b.n	80076f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076e6:	61fb      	str	r3, [r7, #28]
        break;
 80076e8:	e005      	b.n	80076f6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d077      	beq.n	80077ec <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	005a      	lsls	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	441a      	add	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007710:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b0f      	cmp	r3, #15
 8007716:	d916      	bls.n	8007746 <UART_SetConfig+0x3ee>
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800771e:	d212      	bcs.n	8007746 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f023 030f 	bic.w	r3, r3, #15
 8007728:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	b29b      	uxth	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	b29a      	uxth	r2, r3
 8007736:	8afb      	ldrh	r3, [r7, #22]
 8007738:	4313      	orrs	r3, r2
 800773a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	8afa      	ldrh	r2, [r7, #22]
 8007742:	60da      	str	r2, [r3, #12]
 8007744:	e052      	b.n	80077ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800774c:	e04e      	b.n	80077ec <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800774e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007752:	2b08      	cmp	r3, #8
 8007754:	d827      	bhi.n	80077a6 <UART_SetConfig+0x44e>
 8007756:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <UART_SetConfig+0x404>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	080077a7 	.word	0x080077a7
 800776c:	08007797 	.word	0x08007797
 8007770:	080077a7 	.word	0x080077a7
 8007774:	080077a7 	.word	0x080077a7
 8007778:	080077a7 	.word	0x080077a7
 800777c:	0800779f 	.word	0x0800779f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fc ff50 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8007784:	61f8      	str	r0, [r7, #28]
        break;
 8007786:	e014      	b.n	80077b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007788:	f7fc ff62 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 800778c:	61f8      	str	r0, [r7, #28]
        break;
 800778e:	e010      	b.n	80077b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007790:	4b1d      	ldr	r3, [pc, #116]	@ (8007808 <UART_SetConfig+0x4b0>)
 8007792:	61fb      	str	r3, [r7, #28]
        break;
 8007794:	e00d      	b.n	80077b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007796:	f7fc fead 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 800779a:	61f8      	str	r0, [r7, #28]
        break;
 800779c:	e009      	b.n	80077b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a2:	61fb      	str	r3, [r7, #28]
        break;
 80077a4:	e005      	b.n	80077b2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077b0:	bf00      	nop
    }

    if (pclk != 0U)
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d019      	beq.n	80077ec <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	085a      	lsrs	r2, r3, #1
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	441a      	add	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b0f      	cmp	r3, #15
 80077d0:	d909      	bls.n	80077e6 <UART_SetConfig+0x48e>
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d8:	d205      	bcs.n	80077e6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e002      	b.n	80077ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80077f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3728      	adds	r7, #40	@ 0x28
 8007800:	46bd      	mov	sp, r7
 8007802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007806:	bf00      	nop
 8007808:	00f42400 	.word	0x00f42400

0800780c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01a      	beq.n	8007922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800790a:	d10a      	bne.n	8007922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
  }
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b098      	sub	sp, #96	@ 0x60
 8007954:	af02      	add	r7, sp, #8
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007960:	f7fa fe12 	bl	8002588 <HAL_GetTick>
 8007964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0308 	and.w	r3, r3, #8
 8007970:	2b08      	cmp	r3, #8
 8007972:	d12e      	bne.n	80079d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800797c:	2200      	movs	r2, #0
 800797e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f88c 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d021      	beq.n	80079d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800799c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e6      	bne.n	800798e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e062      	b.n	8007a98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d149      	bne.n	8007a74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f856 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d03c      	beq.n	8007a74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	623b      	str	r3, [r7, #32]
   return(result);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e6      	bne.n	80079fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a4c:	61fa      	str	r2, [r7, #28]
 8007a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	69b9      	ldr	r1, [r7, #24]
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	617b      	str	r3, [r7, #20]
   return(result);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e011      	b.n	8007a98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3758      	adds	r7, #88	@ 0x58
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab0:	e04f      	b.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d04b      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aba:	f7fa fd65 	bl	8002588 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d302      	bcc.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e04e      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d037      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b80      	cmp	r3, #128	@ 0x80
 8007ae6:	d034      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b40      	cmp	r3, #64	@ 0x40
 8007aec:	d031      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	f003 0308 	and.w	r3, r3, #8
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d110      	bne.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2208      	movs	r2, #8
 8007b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f8ff 	bl	8007d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e029      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b2c:	d111      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f8e5 	bl	8007d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e00f      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69da      	ldr	r2, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d0a0      	beq.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b097      	sub	sp, #92	@ 0x5c
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bae:	d10e      	bne.n	8007bce <UART_Start_Receive_IT+0x52>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <UART_Start_Receive_IT+0x48>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bc2:	e02d      	b.n	8007c20 <UART_Start_Receive_IT+0xa4>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bcc:	e028      	b.n	8007c20 <UART_Start_Receive_IT+0xa4>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <UART_Start_Receive_IT+0x76>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <UART_Start_Receive_IT+0x6c>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	22ff      	movs	r2, #255	@ 0xff
 8007be2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007be6:	e01b      	b.n	8007c20 <UART_Start_Receive_IT+0xa4>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	227f      	movs	r2, #127	@ 0x7f
 8007bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bf0:	e016      	b.n	8007c20 <UART_Start_Receive_IT+0xa4>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bfa:	d10d      	bne.n	8007c18 <UART_Start_Receive_IT+0x9c>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <UART_Start_Receive_IT+0x92>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	227f      	movs	r2, #127	@ 0x7f
 8007c08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c0c:	e008      	b.n	8007c20 <UART_Start_Receive_IT+0xa4>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	223f      	movs	r2, #63	@ 0x3f
 8007c12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c16:	e003      	b.n	8007c20 <UART_Start_Receive_IT+0xa4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2222      	movs	r2, #34	@ 0x22
 8007c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c50:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007c52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e5      	bne.n	8007c30 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c6c:	d107      	bne.n	8007c7e <UART_Start_Receive_IT+0x102>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4a21      	ldr	r2, [pc, #132]	@ (8007d00 <UART_Start_Receive_IT+0x184>)
 8007c7a:	669a      	str	r2, [r3, #104]	@ 0x68
 8007c7c:	e002      	b.n	8007c84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4a20      	ldr	r2, [pc, #128]	@ (8007d04 <UART_Start_Receive_IT+0x188>)
 8007c82:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d019      	beq.n	8007cc0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e6      	bne.n	8007c8c <UART_Start_Receive_IT+0x110>
 8007cbe:	e018      	b.n	8007cf2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cde:	623b      	str	r3, [r7, #32]
 8007ce0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	69f9      	ldr	r1, [r7, #28]
 8007ce4:	6a3a      	ldr	r2, [r7, #32]
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e6      	bne.n	8007cc0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	375c      	adds	r7, #92	@ 0x5c
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	0800800d 	.word	0x0800800d
 8007d04:	08007e51 	.word	0x08007e51

08007d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b095      	sub	sp, #84	@ 0x54
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e6      	bne.n	8007d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d118      	bne.n	8007db0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f023 0310 	bic.w	r3, r3, #16
 8007d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6979      	ldr	r1, [r7, #20]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	613b      	str	r3, [r7, #16]
   return(result);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e6      	bne.n	8007d7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007dc4:	bf00      	nop
 8007dc6:	3754      	adds	r7, #84	@ 0x54
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fa9c 	bl	800732c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e18:	61fb      	str	r3, [r7, #28]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6979      	ldr	r1, [r7, #20]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e6      	bne.n	8007e04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fa68 	bl	8007318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e48:	bf00      	nop
 8007e4a:	3720      	adds	r7, #32
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b09c      	sub	sp, #112	@ 0x70
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e68:	2b22      	cmp	r3, #34	@ 0x22
 8007e6a:	f040 80be 	bne.w	8007fea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e7c:	b2d9      	uxtb	r1, r3
 8007e7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e88:	400a      	ands	r2, r1
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f040 80a3 	bne.w	8007ffe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ed8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007edc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a34      	ldr	r2, [pc, #208]	@ (8008008 <UART_RxISR_8BIT+0x1b8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d01f      	beq.n	8007f7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d018      	beq.n	8007f7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	623b      	str	r3, [r7, #32]
   return(result);
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d12e      	bne.n	8007fe2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0310 	bic.w	r3, r3, #16
 8007f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fa8:	61fb      	str	r3, [r7, #28]
 8007faa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	69b9      	ldr	r1, [r7, #24]
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f003 0310 	and.w	r3, r3, #16
 8007fc6:	2b10      	cmp	r3, #16
 8007fc8:	d103      	bne.n	8007fd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2210      	movs	r2, #16
 8007fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff f9b0 	bl	8007340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fe0:	e00d      	b.n	8007ffe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7f9 fe2a 	bl	8001c3c <HAL_UART_RxCpltCallback>
}
 8007fe8:	e009      	b.n	8007ffe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	8b1b      	ldrh	r3, [r3, #24]
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0208 	orr.w	r2, r2, #8
 8007ffa:	b292      	uxth	r2, r2
 8007ffc:	831a      	strh	r2, [r3, #24]
}
 8007ffe:	bf00      	nop
 8008000:	3770      	adds	r7, #112	@ 0x70
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	40008000 	.word	0x40008000

0800800c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b09c      	sub	sp, #112	@ 0x70
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800801a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008024:	2b22      	cmp	r3, #34	@ 0x22
 8008026:	f040 80be 	bne.w	80081a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008030:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008038:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800803a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800803e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008042:	4013      	ands	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008048:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804e:	1c9a      	adds	r2, r3, #2
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	f040 80a3 	bne.w	80081ba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008088:	667b      	str	r3, [r7, #100]	@ 0x64
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008092:	657b      	str	r3, [r7, #84]	@ 0x54
 8008094:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80080a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e6      	bne.n	8008074 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	f023 0301 	bic.w	r3, r3, #1
 80080bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80080c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80080c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e5      	bne.n	80080a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a34      	ldr	r2, [pc, #208]	@ (80081c4 <UART_RxISR_16BIT+0x1b8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d01f      	beq.n	8008138 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	61fb      	str	r3, [r7, #28]
   return(result);
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800811a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008126:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800812a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800813c:	2b01      	cmp	r3, #1
 800813e:	d12e      	bne.n	800819e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	60bb      	str	r3, [r7, #8]
   return(result);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f023 0310 	bic.w	r3, r3, #16
 800815a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008164:	61bb      	str	r3, [r7, #24]
 8008166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	6979      	ldr	r1, [r7, #20]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	e841 2300 	strex	r3, r2, [r1]
 8008170:	613b      	str	r3, [r7, #16]
   return(result);
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e6      	bne.n	8008146 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f003 0310 	and.w	r3, r3, #16
 8008182:	2b10      	cmp	r3, #16
 8008184:	d103      	bne.n	800818e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2210      	movs	r2, #16
 800818c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff f8d2 	bl	8007340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800819c:	e00d      	b.n	80081ba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7f9 fd4c 	bl	8001c3c <HAL_UART_RxCpltCallback>
}
 80081a4:	e009      	b.n	80081ba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	8b1b      	ldrh	r3, [r3, #24]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0208 	orr.w	r2, r2, #8
 80081b6:	b292      	uxth	r2, r2
 80081b8:	831a      	strh	r2, [r3, #24]
}
 80081ba:	bf00      	nop
 80081bc:	3770      	adds	r7, #112	@ 0x70
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40008000 	.word	0x40008000

080081c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <__NVIC_SetPriority>:
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	db0a      	blt.n	8008206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	490c      	ldr	r1, [pc, #48]	@ (8008228 <__NVIC_SetPriority+0x4c>)
 80081f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fa:	0112      	lsls	r2, r2, #4
 80081fc:	b2d2      	uxtb	r2, r2
 80081fe:	440b      	add	r3, r1
 8008200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008204:	e00a      	b.n	800821c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4908      	ldr	r1, [pc, #32]	@ (800822c <__NVIC_SetPriority+0x50>)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	3b04      	subs	r3, #4
 8008214:	0112      	lsls	r2, r2, #4
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	440b      	add	r3, r1
 800821a:	761a      	strb	r2, [r3, #24]
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	e000e100 	.word	0xe000e100
 800822c:	e000ed00 	.word	0xe000ed00

08008230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008234:	2100      	movs	r1, #0
 8008236:	f06f 0004 	mvn.w	r0, #4
 800823a:	f7ff ffcf 	bl	80081dc <__NVIC_SetPriority>
#endif
}
 800823e:	bf00      	nop
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824a:	f3ef 8305 	mrs	r3, IPSR
 800824e:	603b      	str	r3, [r7, #0]
  return(result);
 8008250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008256:	f06f 0305 	mvn.w	r3, #5
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e00c      	b.n	8008278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800825e:	4b0a      	ldr	r3, [pc, #40]	@ (8008288 <osKernelInitialize+0x44>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008266:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <osKernelInitialize+0x44>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800826c:	2300      	movs	r3, #0
 800826e:	607b      	str	r3, [r7, #4]
 8008270:	e002      	b.n	8008278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20000678 	.word	0x20000678

0800828c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008292:	f3ef 8305 	mrs	r3, IPSR
 8008296:	603b      	str	r3, [r7, #0]
  return(result);
 8008298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800829e:	f06f 0305 	mvn.w	r3, #5
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e010      	b.n	80082c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082a6:	4b0b      	ldr	r3, [pc, #44]	@ (80082d4 <osKernelStart+0x48>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d109      	bne.n	80082c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ae:	f7ff ffbf 	bl	8008230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082b2:	4b08      	ldr	r3, [pc, #32]	@ (80082d4 <osKernelStart+0x48>)
 80082b4:	2202      	movs	r2, #2
 80082b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082b8:	f001 f87a 	bl	80093b0 <vTaskStartScheduler>
      stat = osOK;
 80082bc:	2300      	movs	r3, #0
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e002      	b.n	80082c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295
 80082c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000678 	.word	0x20000678

080082d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	@ 0x38
 80082dc:	af04      	add	r7, sp, #16
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e8:	f3ef 8305 	mrs	r3, IPSR
 80082ec:	617b      	str	r3, [r7, #20]
  return(result);
 80082ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d17e      	bne.n	80083f2 <osThreadNew+0x11a>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d07b      	beq.n	80083f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082fa:	2380      	movs	r3, #128	@ 0x80
 80082fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082fe:	2318      	movs	r3, #24
 8008300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d045      	beq.n	800839e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <osThreadNew+0x48>
        name = attr->name;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <osThreadNew+0x6e>
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	2b38      	cmp	r3, #56	@ 0x38
 8008338:	d805      	bhi.n	8008346 <osThreadNew+0x6e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <osThreadNew+0x72>
        return (NULL);
 8008346:	2300      	movs	r3, #0
 8008348:	e054      	b.n	80083f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	089b      	lsrs	r3, r3, #2
 8008358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00e      	beq.n	8008380 <osThreadNew+0xa8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	2b5b      	cmp	r3, #91	@ 0x5b
 8008368:	d90a      	bls.n	8008380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800836e:	2b00      	cmp	r3, #0
 8008370:	d006      	beq.n	8008380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <osThreadNew+0xa8>
        mem = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e010      	b.n	80083a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <osThreadNew+0xca>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d108      	bne.n	80083a2 <osThreadNew+0xca>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <osThreadNew+0xca>
          mem = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	e001      	b.n	80083a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d110      	bne.n	80083ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fe1a 	bl	8008ff8 <xTaskCreateStatic>
 80083c4:	4603      	mov	r3, r0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e013      	b.n	80083f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d110      	bne.n	80083f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fe68 	bl	80090b8 <xTaskCreate>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <osThreadNew+0x11a>
            hTask = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083f2:	693b      	ldr	r3, [r7, #16]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3728      	adds	r7, #40	@ 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008404:	f3ef 8305 	mrs	r3, IPSR
 8008408:	60bb      	str	r3, [r7, #8]
  return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <osDelay+0x1c>
    stat = osErrorISR;
 8008410:	f06f 0305 	mvn.w	r3, #5
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e007      	b.n	8008428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 ff8e 	bl	8009344 <vTaskDelay>
    }
  }

  return (stat);
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4a07      	ldr	r2, [pc, #28]	@ (8008460 <vApplicationGetIdleTaskMemory+0x2c>)
 8008444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4a06      	ldr	r2, [pc, #24]	@ (8008464 <vApplicationGetIdleTaskMemory+0x30>)
 800844a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2280      	movs	r2, #128	@ 0x80
 8008450:	601a      	str	r2, [r3, #0]
}
 8008452:	bf00      	nop
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	2000067c 	.word	0x2000067c
 8008464:	200006d8 	.word	0x200006d8

08008468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4a07      	ldr	r2, [pc, #28]	@ (8008494 <vApplicationGetTimerTaskMemory+0x2c>)
 8008478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4a06      	ldr	r2, [pc, #24]	@ (8008498 <vApplicationGetTimerTaskMemory+0x30>)
 800847e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008486:	601a      	str	r2, [r3, #0]
}
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	200008d8 	.word	0x200008d8
 8008498:	20000934 	.word	0x20000934

0800849c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f103 0208 	add.w	r2, r3, #8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
 80084b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f103 0208 	add.w	r2, r3, #8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0208 	add.w	r2, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	601a      	str	r2, [r3, #0]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d103      	bne.n	800855e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e00c      	b.n	8008578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3308      	adds	r3, #8
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e002      	b.n	800856c <vListInsert+0x2e>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d2f6      	bcs.n	8008566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6892      	ldr	r2, [r2, #8]
 80085c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6852      	ldr	r2, [r2, #4]
 80085d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d103      	bne.n	80085e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1e5a      	subs	r2, r3, #1
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10b      	bne.n	8008630 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800862a:	bf00      	nop
 800862c:	bf00      	nop
 800862e:	e7fd      	b.n	800862c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008630:	f002 f87a 	bl	800a728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863c:	68f9      	ldr	r1, [r7, #12]
 800863e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008660:	3b01      	subs	r3, #1
 8008662:	68f9      	ldr	r1, [r7, #12]
 8008664:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008666:	fb01 f303 	mul.w	r3, r1, r3
 800866a:	441a      	add	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	22ff      	movs	r2, #255	@ 0xff
 8008674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	22ff      	movs	r2, #255	@ 0xff
 800867c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d114      	bne.n	80086b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01a      	beq.n	80086c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3310      	adds	r3, #16
 8008692:	4618      	mov	r0, r3
 8008694:	f001 f91a 	bl	80098cc <xTaskRemoveFromEventList>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d012      	beq.n	80086c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800869e:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <xQueueGenericReset+0xd0>)
 80086a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	e009      	b.n	80086c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3310      	adds	r3, #16
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fef1 	bl	800849c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3324      	adds	r3, #36	@ 0x24
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff feec 	bl	800849c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086c4:	f002 f862 	bl	800a78c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086c8:	2301      	movs	r3, #1
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	@ 0x38
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <xQueueGenericCreateStatic+0x56>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <xQueueGenericCreateStatic+0x5a>
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <xQueueGenericCreateStatic+0x5c>
 8008732:	2300      	movs	r3, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10b      	bne.n	8008750 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	623b      	str	r3, [r7, #32]
}
 800874a:	bf00      	nop
 800874c:	bf00      	nop
 800874e:	e7fd      	b.n	800874c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d102      	bne.n	800875c <xQueueGenericCreateStatic+0x84>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <xQueueGenericCreateStatic+0x88>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <xQueueGenericCreateStatic+0x8a>
 8008760:	2300      	movs	r3, #0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10b      	bne.n	800877e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	61fb      	str	r3, [r7, #28]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800877e:	2350      	movs	r3, #80	@ 0x50
 8008780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b50      	cmp	r3, #80	@ 0x50
 8008786:	d00b      	beq.n	80087a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	61bb      	str	r3, [r7, #24]
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	e7fd      	b.n	800879c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00d      	beq.n	80087c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	4613      	mov	r3, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f805 	bl	80087d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3730      	adds	r7, #48	@ 0x30
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d103      	bne.n	80087ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e002      	b.n	80087f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008800:	2101      	movs	r1, #1
 8008802:	69b8      	ldr	r0, [r7, #24]
 8008804:	f7ff fefe 	bl	8008604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08e      	sub	sp, #56	@ 0x38
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008826:	2300      	movs	r3, #0
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10b      	bne.n	800884c <xQueueGenericSend+0x34>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	e7fd      	b.n	8008848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <xQueueGenericSend+0x42>
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <xQueueGenericSend+0x46>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <xQueueGenericSend+0x48>
 800885e:	2300      	movs	r3, #0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10b      	bne.n	800887c <xQueueGenericSend+0x64>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d103      	bne.n	800888a <xQueueGenericSend+0x72>
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <xQueueGenericSend+0x76>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <xQueueGenericSend+0x78>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <xQueueGenericSend+0x94>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	623b      	str	r3, [r7, #32]
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088ac:	f001 f9ce 	bl	8009c4c <xTaskGetSchedulerState>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d102      	bne.n	80088bc <xQueueGenericSend+0xa4>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <xQueueGenericSend+0xa8>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <xQueueGenericSend+0xaa>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10b      	bne.n	80088de <xQueueGenericSend+0xc6>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	61fb      	str	r3, [r7, #28]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088de:	f001 ff23 	bl	800a728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <xQueueGenericSend+0xdc>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d129      	bne.n	8008948 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088fa:	f000 fa0f 	bl	8008d1c <prvCopyDataToQueue>
 80088fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d010      	beq.n	800892a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	3324      	adds	r3, #36	@ 0x24
 800890c:	4618      	mov	r0, r3
 800890e:	f000 ffdd 	bl	80098cc <xTaskRemoveFromEventList>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d013      	beq.n	8008940 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008918:	4b3f      	ldr	r3, [pc, #252]	@ (8008a18 <xQueueGenericSend+0x200>)
 800891a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	e00a      	b.n	8008940 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800892a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008930:	4b39      	ldr	r3, [pc, #228]	@ (8008a18 <xQueueGenericSend+0x200>)
 8008932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008940:	f001 ff24 	bl	800a78c <vPortExitCritical>
				return pdPASS;
 8008944:	2301      	movs	r3, #1
 8008946:	e063      	b.n	8008a10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800894e:	f001 ff1d 	bl	800a78c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008952:	2300      	movs	r3, #0
 8008954:	e05c      	b.n	8008a10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008958:	2b00      	cmp	r3, #0
 800895a:	d106      	bne.n	800896a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	4618      	mov	r0, r3
 8008962:	f001 f817 	bl	8009994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800896a:	f001 ff0f 	bl	800a78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800896e:	f000 fd87 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008972:	f001 fed9 	bl	800a728 <vPortEnterCritical>
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800897c:	b25b      	sxtb	r3, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d103      	bne.n	800898c <xQueueGenericSend+0x174>
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800898c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008992:	b25b      	sxtb	r3, r3
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d103      	bne.n	80089a2 <xQueueGenericSend+0x18a>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089a2:	f001 fef3 	bl	800a78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089a6:	1d3a      	adds	r2, r7, #4
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 f806 	bl	80099c0 <xTaskCheckForTimeOut>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d124      	bne.n	8008a04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089bc:	f000 faa6 	bl	8008f0c <prvIsQueueFull>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d018      	beq.n	80089f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	3310      	adds	r3, #16
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 ff2a 	bl	8009828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089d6:	f000 fa31 	bl	8008e3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089da:	f000 fd5f 	bl	800949c <xTaskResumeAll>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f47f af7c 	bne.w	80088de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80089e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a18 <xQueueGenericSend+0x200>)
 80089e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	e772      	b.n	80088de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089fa:	f000 fa1f 	bl	8008e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089fe:	f000 fd4d 	bl	800949c <xTaskResumeAll>
 8008a02:	e76c      	b.n	80088de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a06:	f000 fa19 	bl	8008e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a0a:	f000 fd47 	bl	800949c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3738      	adds	r7, #56	@ 0x38
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b090      	sub	sp, #64	@ 0x40
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	e7fd      	b.n	8008a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d103      	bne.n	8008a5a <xQueueGenericSendFromISR+0x3e>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <xQueueGenericSendFromISR+0x42>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e000      	b.n	8008a60 <xQueueGenericSendFromISR+0x44>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d103      	bne.n	8008a8a <xQueueGenericSendFromISR+0x6e>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d101      	bne.n	8008a8e <xQueueGenericSendFromISR+0x72>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <xQueueGenericSendFromISR+0x74>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	623b      	str	r3, [r7, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aac:	f001 ff1c 	bl	800a8e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ab0:	f3ef 8211 	mrs	r2, BASEPRI
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	61fa      	str	r2, [r7, #28]
 8008ac6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d302      	bcc.n	8008ade <xQueueGenericSendFromISR+0xc2>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d12f      	bne.n	8008b3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008af4:	f000 f912 	bl	8008d1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008af8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d112      	bne.n	8008b28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d016      	beq.n	8008b38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	3324      	adds	r3, #36	@ 0x24
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fedc 	bl	80098cc <xTaskRemoveFromEventList>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e007      	b.n	8008b38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	b25a      	sxtb	r2, r3
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b3c:	e001      	b.n	8008b42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3740      	adds	r7, #64	@ 0x40
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	@ 0x30
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <xQueueReceive+0x32>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	623b      	str	r3, [r7, #32]
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <xQueueReceive+0x40>
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <xQueueReceive+0x44>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <xQueueReceive+0x46>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <xQueueReceive+0x62>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	61fb      	str	r3, [r7, #28]
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bba:	f001 f847 	bl	8009c4c <xTaskGetSchedulerState>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <xQueueReceive+0x72>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <xQueueReceive+0x76>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <xQueueReceive+0x78>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xQueueReceive+0x94>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	61bb      	str	r3, [r7, #24]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bec:	f001 fd9c 	bl	800a728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c00:	f000 f8f6 	bl	8008df0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	1e5a      	subs	r2, r3, #1
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00f      	beq.n	8008c34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	3310      	adds	r3, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fe57 	bl	80098cc <xTaskRemoveFromEventList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c24:	4b3c      	ldr	r3, [pc, #240]	@ (8008d18 <xQueueReceive+0x1c0>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c34:	f001 fdaa 	bl	800a78c <vPortExitCritical>
				return pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e069      	b.n	8008d10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d103      	bne.n	8008c4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c42:	f001 fda3 	bl	800a78c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e062      	b.n	8008d10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c50:	f107 0310 	add.w	r3, r7, #16
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fe9d 	bl	8009994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c5e:	f001 fd95 	bl	800a78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c62:	f000 fc0d 	bl	8009480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c66:	f001 fd5f 	bl	800a728 <vPortEnterCritical>
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c70:	b25b      	sxtb	r3, r3
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d103      	bne.n	8008c80 <xQueueReceive+0x128>
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c86:	b25b      	sxtb	r3, r3
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d103      	bne.n	8008c96 <xQueueReceive+0x13e>
 8008c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c96:	f001 fd79 	bl	800a78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c9a:	1d3a      	adds	r2, r7, #4
 8008c9c:	f107 0310 	add.w	r3, r7, #16
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fe8c 	bl	80099c0 <xTaskCheckForTimeOut>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d123      	bne.n	8008cf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cb0:	f000 f916 	bl	8008ee0 <prvIsQueueEmpty>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d017      	beq.n	8008cea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbc:	3324      	adds	r3, #36	@ 0x24
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fdb0 	bl	8009828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cca:	f000 f8b7 	bl	8008e3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cce:	f000 fbe5 	bl	800949c <xTaskResumeAll>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d189      	bne.n	8008bec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <xQueueReceive+0x1c0>)
 8008cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	e780      	b.n	8008bec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cec:	f000 f8a6 	bl	8008e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cf0:	f000 fbd4 	bl	800949c <xTaskResumeAll>
 8008cf4:	e77a      	b.n	8008bec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cf8:	f000 f8a0 	bl	8008e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cfc:	f000 fbce 	bl	800949c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d02:	f000 f8ed 	bl	8008ee0 <prvIsQueueEmpty>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f43f af6f 	beq.w	8008bec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3730      	adds	r7, #48	@ 0x30
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10d      	bne.n	8008d56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d14d      	bne.n	8008dde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 ff9e 	bl	8009c88 <xTaskPriorityDisinherit>
 8008d4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	e043      	b.n	8008dde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d119      	bne.n	8008d90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6858      	ldr	r0, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d64:	461a      	mov	r2, r3
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	f002 fefd 	bl	800bb66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d74:	441a      	add	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d32b      	bcc.n	8008dde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	605a      	str	r2, [r3, #4]
 8008d8e:	e026      	b.n	8008dde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	68d8      	ldr	r0, [r3, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	f002 fee3 	bl	800bb66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da8:	425b      	negs	r3, r3
 8008daa:	441a      	add	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d207      	bcs.n	8008dcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	425b      	negs	r3, r3
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d105      	bne.n	8008dde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d018      	beq.n	8008e34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0a:	441a      	add	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d303      	bcc.n	8008e24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68d9      	ldr	r1, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6838      	ldr	r0, [r7, #0]
 8008e30:	f002 fe99 	bl	800bb66 <memcpy>
	}
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e44:	f001 fc70 	bl	800a728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e50:	e011      	b.n	8008e76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d012      	beq.n	8008e80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3324      	adds	r3, #36	@ 0x24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fd34 	bl	80098cc <xTaskRemoveFromEventList>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e6a:	f000 fe0d 	bl	8009a88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	dce9      	bgt.n	8008e52 <prvUnlockQueue+0x16>
 8008e7e:	e000      	b.n	8008e82 <prvUnlockQueue+0x46>
					break;
 8008e80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	22ff      	movs	r2, #255	@ 0xff
 8008e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008e8a:	f001 fc7f 	bl	800a78c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e8e:	f001 fc4b 	bl	800a728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e9a:	e011      	b.n	8008ec0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d012      	beq.n	8008eca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3310      	adds	r3, #16
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fd0f 	bl	80098cc <xTaskRemoveFromEventList>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008eb4:	f000 fde8 	bl	8009a88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dce9      	bgt.n	8008e9c <prvUnlockQueue+0x60>
 8008ec8:	e000      	b.n	8008ecc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	22ff      	movs	r2, #255	@ 0xff
 8008ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008ed4:	f001 fc5a 	bl	800a78c <vPortExitCritical>
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee8:	f001 fc1e 	bl	800a728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d102      	bne.n	8008efa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	e001      	b.n	8008efe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008efe:	f001 fc45 	bl	800a78c <vPortExitCritical>

	return xReturn;
 8008f02:	68fb      	ldr	r3, [r7, #12]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f14:	f001 fc08 	bl	800a728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d102      	bne.n	8008f2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f24:	2301      	movs	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e001      	b.n	8008f2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f2e:	f001 fc2d 	bl	800a78c <vPortExitCritical>

	return xReturn;
 8008f32:	68fb      	ldr	r3, [r7, #12]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e014      	b.n	8008f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8008f8c <vQueueAddToRegistry+0x50>)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f58:	490c      	ldr	r1, [pc, #48]	@ (8008f8c <vQueueAddToRegistry+0x50>)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f62:	4a0a      	ldr	r2, [pc, #40]	@ (8008f8c <vQueueAddToRegistry+0x50>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4413      	add	r3, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f6e:	e006      	b.n	8008f7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b07      	cmp	r3, #7
 8008f7a:	d9e7      	bls.n	8008f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	20000d34 	.word	0x20000d34

08008f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fa0:	f001 fbc2 	bl	800a728 <vPortEnterCritical>
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008faa:	b25b      	sxtb	r3, r3
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d103      	bne.n	8008fba <vQueueWaitForMessageRestricted+0x2a>
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fc0:	b25b      	sxtb	r3, r3
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d103      	bne.n	8008fd0 <vQueueWaitForMessageRestricted+0x40>
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fd0:	f001 fbdc 	bl	800a78c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	3324      	adds	r3, #36	@ 0x24
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fc45 	bl	8009874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fea:	6978      	ldr	r0, [r7, #20]
 8008fec:	f7ff ff26 	bl	8008e3c <prvUnlockQueue>
	}
 8008ff0:	bf00      	nop
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	@ 0x38
 8008ffc:	af04      	add	r7, sp, #16
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <xTaskCreateStatic+0x2c>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	623b      	str	r3, [r7, #32]
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	e7fd      	b.n	8009020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10b      	bne.n	8009042 <xTaskCreateStatic+0x4a>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	61fb      	str	r3, [r7, #28]
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	e7fd      	b.n	800903e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009042:	235c      	movs	r3, #92	@ 0x5c
 8009044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2b5c      	cmp	r3, #92	@ 0x5c
 800904a:	d00b      	beq.n	8009064 <xTaskCreateStatic+0x6c>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	61bb      	str	r3, [r7, #24]
}
 800905e:	bf00      	nop
 8009060:	bf00      	nop
 8009062:	e7fd      	b.n	8009060 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009064:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01e      	beq.n	80090aa <xTaskCreateStatic+0xb2>
 800906c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906e:	2b00      	cmp	r3, #0
 8009070:	d01b      	beq.n	80090aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800907a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	2202      	movs	r2, #2
 8009080:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009084:	2300      	movs	r3, #0
 8009086:	9303      	str	r3, [sp, #12]
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	9302      	str	r3, [sp, #8]
 800908c:	f107 0314 	add.w	r3, r7, #20
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f850 	bl	8009142 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090a4:	f000 f8de 	bl	8009264 <prvAddNewTaskToReadyList>
 80090a8:	e001      	b.n	80090ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090ae:	697b      	ldr	r3, [r7, #20]
	}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3728      	adds	r7, #40	@ 0x28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08c      	sub	sp, #48	@ 0x30
 80090bc:	af04      	add	r7, sp, #16
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	603b      	str	r3, [r7, #0]
 80090c4:	4613      	mov	r3, r2
 80090c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 fc4d 	bl	800a96c <pvPortMalloc>
 80090d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00e      	beq.n	80090f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090da:	205c      	movs	r0, #92	@ 0x5c
 80090dc:	f001 fc46 	bl	800a96c <pvPortMalloc>
 80090e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80090ee:	e005      	b.n	80090fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090f0:	6978      	ldr	r0, [r7, #20]
 80090f2:	f001 fd09 	bl	800ab08 <vPortFree>
 80090f6:	e001      	b.n	80090fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	2300      	movs	r3, #0
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f80e 	bl	8009142 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009126:	69f8      	ldr	r0, [r7, #28]
 8009128:	f000 f89c 	bl	8009264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800912c:	2301      	movs	r3, #1
 800912e:	61bb      	str	r3, [r7, #24]
 8009130:	e002      	b.n	8009138 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009132:	f04f 33ff 	mov.w	r3, #4294967295
 8009136:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009138:	69bb      	ldr	r3, [r7, #24]
	}
 800913a:	4618      	mov	r0, r3
 800913c:	3720      	adds	r7, #32
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b088      	sub	sp, #32
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	461a      	mov	r2, r3
 800915a:	21a5      	movs	r1, #165	@ 0xa5
 800915c:	f002 fc84 	bl	800ba68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800916a:	3b01      	subs	r3, #1
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	f023 0307 	bic.w	r3, r3, #7
 8009178:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	617b      	str	r3, [r7, #20]
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	e7fd      	b.n	8009198 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01f      	beq.n	80091e2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	e012      	b.n	80091ce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	7819      	ldrb	r1, [r3, #0]
 80091b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	4413      	add	r3, r2
 80091b6:	3334      	adds	r3, #52	@ 0x34
 80091b8:	460a      	mov	r2, r1
 80091ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d006      	beq.n	80091d6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	3301      	adds	r3, #1
 80091cc:	61fb      	str	r3, [r7, #28]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	2b0f      	cmp	r3, #15
 80091d2:	d9e9      	bls.n	80091a8 <prvInitialiseNewTask+0x66>
 80091d4:	e000      	b.n	80091d8 <prvInitialiseNewTask+0x96>
			{
				break;
 80091d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091e0:	e003      	b.n	80091ea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ec:	2b37      	cmp	r3, #55	@ 0x37
 80091ee:	d901      	bls.n	80091f4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091f0:	2337      	movs	r3, #55	@ 0x37
 80091f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	2200      	movs	r2, #0
 8009204:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009208:	3304      	adds	r3, #4
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff f966 	bl	80084dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	3318      	adds	r3, #24
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff f961 	bl	80084dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800922e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	2200      	movs	r2, #0
 8009234:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	68f9      	ldr	r1, [r7, #12]
 8009242:	69b8      	ldr	r0, [r7, #24]
 8009244:	f001 f93e 	bl	800a4c4 <pxPortInitialiseStack>
 8009248:	4602      	mov	r2, r0
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800924e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800925a:	bf00      	nop
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800926c:	f001 fa5c 	bl	800a728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009270:	4b2d      	ldr	r3, [pc, #180]	@ (8009328 <prvAddNewTaskToReadyList+0xc4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	4a2c      	ldr	r2, [pc, #176]	@ (8009328 <prvAddNewTaskToReadyList+0xc4>)
 8009278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800927a:	4b2c      	ldr	r3, [pc, #176]	@ (800932c <prvAddNewTaskToReadyList+0xc8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009282:	4a2a      	ldr	r2, [pc, #168]	@ (800932c <prvAddNewTaskToReadyList+0xc8>)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009288:	4b27      	ldr	r3, [pc, #156]	@ (8009328 <prvAddNewTaskToReadyList+0xc4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d110      	bne.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009290:	f000 fc1e 	bl	8009ad0 <prvInitialiseTaskLists>
 8009294:	e00d      	b.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009296:	4b26      	ldr	r3, [pc, #152]	@ (8009330 <prvAddNewTaskToReadyList+0xcc>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800929e:	4b23      	ldr	r3, [pc, #140]	@ (800932c <prvAddNewTaskToReadyList+0xc8>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d802      	bhi.n	80092b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092ac:	4a1f      	ldr	r2, [pc, #124]	@ (800932c <prvAddNewTaskToReadyList+0xc8>)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092b2:	4b20      	ldr	r3, [pc, #128]	@ (8009334 <prvAddNewTaskToReadyList+0xd0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009334 <prvAddNewTaskToReadyList+0xd0>)
 80092ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009334 <prvAddNewTaskToReadyList+0xd0>)
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009338 <prvAddNewTaskToReadyList+0xd4>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d903      	bls.n	80092d8 <prvAddNewTaskToReadyList+0x74>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	4a18      	ldr	r2, [pc, #96]	@ (8009338 <prvAddNewTaskToReadyList+0xd4>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a15      	ldr	r2, [pc, #84]	@ (800933c <prvAddNewTaskToReadyList+0xd8>)
 80092e6:	441a      	add	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7ff f901 	bl	80084f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092f4:	f001 fa4a 	bl	800a78c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <prvAddNewTaskToReadyList+0xcc>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00e      	beq.n	800931e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009300:	4b0a      	ldr	r3, [pc, #40]	@ (800932c <prvAddNewTaskToReadyList+0xc8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930a:	429a      	cmp	r2, r3
 800930c:	d207      	bcs.n	800931e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800930e:	4b0c      	ldr	r3, [pc, #48]	@ (8009340 <prvAddNewTaskToReadyList+0xdc>)
 8009310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20001248 	.word	0x20001248
 800932c:	20000d74 	.word	0x20000d74
 8009330:	20001254 	.word	0x20001254
 8009334:	20001264 	.word	0x20001264
 8009338:	20001250 	.word	0x20001250
 800933c:	20000d78 	.word	0x20000d78
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d018      	beq.n	8009388 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009356:	4b14      	ldr	r3, [pc, #80]	@ (80093a8 <vTaskDelay+0x64>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <vTaskDelay+0x32>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	60bb      	str	r3, [r7, #8]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009376:	f000 f883 	bl	8009480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800937a:	2100      	movs	r1, #0
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fcf3 	bl	8009d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009382:	f000 f88b 	bl	800949c <xTaskResumeAll>
 8009386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d107      	bne.n	800939e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800938e:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <vTaskDelay+0x68>)
 8009390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20001270 	.word	0x20001270
 80093ac:	e000ed04 	.word	0xe000ed04

080093b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08a      	sub	sp, #40	@ 0x28
 80093b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093be:	463a      	mov	r2, r7
 80093c0:	1d39      	adds	r1, r7, #4
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff f834 	bl	8008434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	9202      	str	r2, [sp, #8]
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	2300      	movs	r3, #0
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	2300      	movs	r3, #0
 80093dc:	460a      	mov	r2, r1
 80093de:	4922      	ldr	r1, [pc, #136]	@ (8009468 <vTaskStartScheduler+0xb8>)
 80093e0:	4822      	ldr	r0, [pc, #136]	@ (800946c <vTaskStartScheduler+0xbc>)
 80093e2:	f7ff fe09 	bl	8008ff8 <xTaskCreateStatic>
 80093e6:	4603      	mov	r3, r0
 80093e8:	4a21      	ldr	r2, [pc, #132]	@ (8009470 <vTaskStartScheduler+0xc0>)
 80093ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093ec:	4b20      	ldr	r3, [pc, #128]	@ (8009470 <vTaskStartScheduler+0xc0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093f4:	2301      	movs	r3, #1
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	e001      	b.n	80093fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d102      	bne.n	800940a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009404:	f000 fd04 	bl	8009e10 <xTimerCreateTimerTask>
 8009408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d116      	bne.n	800943e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	613b      	str	r3, [r7, #16]
}
 8009422:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009424:	4b13      	ldr	r3, [pc, #76]	@ (8009474 <vTaskStartScheduler+0xc4>)
 8009426:	f04f 32ff 	mov.w	r2, #4294967295
 800942a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800942c:	4b12      	ldr	r3, [pc, #72]	@ (8009478 <vTaskStartScheduler+0xc8>)
 800942e:	2201      	movs	r2, #1
 8009430:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009432:	4b12      	ldr	r3, [pc, #72]	@ (800947c <vTaskStartScheduler+0xcc>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009438:	f001 f8d2 	bl	800a5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800943c:	e00f      	b.n	800945e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d10b      	bne.n	800945e <vTaskStartScheduler+0xae>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	60fb      	str	r3, [r7, #12]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <vTaskStartScheduler+0xaa>
}
 800945e:	bf00      	nop
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	0800dac4 	.word	0x0800dac4
 800946c:	08009aa1 	.word	0x08009aa1
 8009470:	2000126c 	.word	0x2000126c
 8009474:	20001268 	.word	0x20001268
 8009478:	20001254 	.word	0x20001254
 800947c:	2000124c 	.word	0x2000124c

08009480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009484:	4b04      	ldr	r3, [pc, #16]	@ (8009498 <vTaskSuspendAll+0x18>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	4a03      	ldr	r2, [pc, #12]	@ (8009498 <vTaskSuspendAll+0x18>)
 800948c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800948e:	bf00      	nop
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20001270 	.word	0x20001270

0800949c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094aa:	4b42      	ldr	r3, [pc, #264]	@ (80095b4 <xTaskResumeAll+0x118>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10b      	bne.n	80094ca <xTaskResumeAll+0x2e>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	603b      	str	r3, [r7, #0]
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	e7fd      	b.n	80094c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094ca:	f001 f92d 	bl	800a728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094ce:	4b39      	ldr	r3, [pc, #228]	@ (80095b4 <xTaskResumeAll+0x118>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	4a37      	ldr	r2, [pc, #220]	@ (80095b4 <xTaskResumeAll+0x118>)
 80094d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094d8:	4b36      	ldr	r3, [pc, #216]	@ (80095b4 <xTaskResumeAll+0x118>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d162      	bne.n	80095a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094e0:	4b35      	ldr	r3, [pc, #212]	@ (80095b8 <xTaskResumeAll+0x11c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d05e      	beq.n	80095a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094e8:	e02f      	b.n	800954a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ea:	4b34      	ldr	r3, [pc, #208]	@ (80095bc <xTaskResumeAll+0x120>)
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3318      	adds	r3, #24
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7ff f85a 	bl	80085b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3304      	adds	r3, #4
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff f855 	bl	80085b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950a:	4b2d      	ldr	r3, [pc, #180]	@ (80095c0 <xTaskResumeAll+0x124>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d903      	bls.n	800951a <xTaskResumeAll+0x7e>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009516:	4a2a      	ldr	r2, [pc, #168]	@ (80095c0 <xTaskResumeAll+0x124>)
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a27      	ldr	r2, [pc, #156]	@ (80095c4 <xTaskResumeAll+0x128>)
 8009528:	441a      	add	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3304      	adds	r3, #4
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f7fe ffe0 	bl	80084f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953a:	4b23      	ldr	r3, [pc, #140]	@ (80095c8 <xTaskResumeAll+0x12c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009540:	429a      	cmp	r2, r3
 8009542:	d302      	bcc.n	800954a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009544:	4b21      	ldr	r3, [pc, #132]	@ (80095cc <xTaskResumeAll+0x130>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800954a:	4b1c      	ldr	r3, [pc, #112]	@ (80095bc <xTaskResumeAll+0x120>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1cb      	bne.n	80094ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009558:	f000 fb58 	bl	8009c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <xTaskResumeAll+0x134>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d010      	beq.n	800958a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009568:	f000 f846 	bl	80095f8 <xTaskIncrementTick>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009572:	4b16      	ldr	r3, [pc, #88]	@ (80095cc <xTaskResumeAll+0x130>)
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3b01      	subs	r3, #1
 800957c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f1      	bne.n	8009568 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009584:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <xTaskResumeAll+0x134>)
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800958a:	4b10      	ldr	r3, [pc, #64]	@ (80095cc <xTaskResumeAll+0x130>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d009      	beq.n	80095a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009596:	4b0f      	ldr	r3, [pc, #60]	@ (80095d4 <xTaskResumeAll+0x138>)
 8009598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a6:	f001 f8f1 	bl	800a78c <vPortExitCritical>

	return xAlreadyYielded;
 80095aa:	68bb      	ldr	r3, [r7, #8]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001270 	.word	0x20001270
 80095b8:	20001248 	.word	0x20001248
 80095bc:	20001208 	.word	0x20001208
 80095c0:	20001250 	.word	0x20001250
 80095c4:	20000d78 	.word	0x20000d78
 80095c8:	20000d74 	.word	0x20000d74
 80095cc:	2000125c 	.word	0x2000125c
 80095d0:	20001258 	.word	0x20001258
 80095d4:	e000ed04 	.word	0xe000ed04

080095d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095de:	4b05      	ldr	r3, [pc, #20]	@ (80095f4 <xTaskGetTickCount+0x1c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095e4:	687b      	ldr	r3, [r7, #4]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	2000124c 	.word	0x2000124c

080095f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009602:	4b4f      	ldr	r3, [pc, #316]	@ (8009740 <xTaskIncrementTick+0x148>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 8090 	bne.w	800972c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800960c:	4b4d      	ldr	r3, [pc, #308]	@ (8009744 <xTaskIncrementTick+0x14c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3301      	adds	r3, #1
 8009612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009614:	4a4b      	ldr	r2, [pc, #300]	@ (8009744 <xTaskIncrementTick+0x14c>)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d121      	bne.n	8009664 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009620:	4b49      	ldr	r3, [pc, #292]	@ (8009748 <xTaskIncrementTick+0x150>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <xTaskIncrementTick+0x4a>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	603b      	str	r3, [r7, #0]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <xTaskIncrementTick+0x46>
 8009642:	4b41      	ldr	r3, [pc, #260]	@ (8009748 <xTaskIncrementTick+0x150>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	4b40      	ldr	r3, [pc, #256]	@ (800974c <xTaskIncrementTick+0x154>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a3e      	ldr	r2, [pc, #248]	@ (8009748 <xTaskIncrementTick+0x150>)
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	4a3e      	ldr	r2, [pc, #248]	@ (800974c <xTaskIncrementTick+0x154>)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	4b3e      	ldr	r3, [pc, #248]	@ (8009750 <xTaskIncrementTick+0x158>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	4a3c      	ldr	r2, [pc, #240]	@ (8009750 <xTaskIncrementTick+0x158>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	f000 fad4 	bl	8009c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009664:	4b3b      	ldr	r3, [pc, #236]	@ (8009754 <xTaskIncrementTick+0x15c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	429a      	cmp	r2, r3
 800966c:	d349      	bcc.n	8009702 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800966e:	4b36      	ldr	r3, [pc, #216]	@ (8009748 <xTaskIncrementTick+0x150>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d104      	bne.n	8009682 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009678:	4b36      	ldr	r3, [pc, #216]	@ (8009754 <xTaskIncrementTick+0x15c>)
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	601a      	str	r2, [r3, #0]
					break;
 8009680:	e03f      	b.n	8009702 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009682:	4b31      	ldr	r3, [pc, #196]	@ (8009748 <xTaskIncrementTick+0x150>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	429a      	cmp	r2, r3
 8009698:	d203      	bcs.n	80096a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800969a:	4a2e      	ldr	r2, [pc, #184]	@ (8009754 <xTaskIncrementTick+0x15c>)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096a0:	e02f      	b.n	8009702 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe ff82 	bl	80085b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	3318      	adds	r3, #24
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe ff79 	bl	80085b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c2:	4b25      	ldr	r3, [pc, #148]	@ (8009758 <xTaskIncrementTick+0x160>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d903      	bls.n	80096d2 <xTaskIncrementTick+0xda>
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ce:	4a22      	ldr	r2, [pc, #136]	@ (8009758 <xTaskIncrementTick+0x160>)
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4a1f      	ldr	r2, [pc, #124]	@ (800975c <xTaskIncrementTick+0x164>)
 80096e0:	441a      	add	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fe ff04 	bl	80084f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009760 <xTaskIncrementTick+0x168>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3b8      	bcc.n	800966e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009700:	e7b5      	b.n	800966e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009702:	4b17      	ldr	r3, [pc, #92]	@ (8009760 <xTaskIncrementTick+0x168>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009708:	4914      	ldr	r1, [pc, #80]	@ (800975c <xTaskIncrementTick+0x164>)
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d901      	bls.n	800971e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800971a:	2301      	movs	r3, #1
 800971c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800971e:	4b11      	ldr	r3, [pc, #68]	@ (8009764 <xTaskIncrementTick+0x16c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d007      	beq.n	8009736 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009726:	2301      	movs	r3, #1
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	e004      	b.n	8009736 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800972c:	4b0e      	ldr	r3, [pc, #56]	@ (8009768 <xTaskIncrementTick+0x170>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	4a0d      	ldr	r2, [pc, #52]	@ (8009768 <xTaskIncrementTick+0x170>)
 8009734:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009736:	697b      	ldr	r3, [r7, #20]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20001270 	.word	0x20001270
 8009744:	2000124c 	.word	0x2000124c
 8009748:	20001200 	.word	0x20001200
 800974c:	20001204 	.word	0x20001204
 8009750:	20001260 	.word	0x20001260
 8009754:	20001268 	.word	0x20001268
 8009758:	20001250 	.word	0x20001250
 800975c:	20000d78 	.word	0x20000d78
 8009760:	20000d74 	.word	0x20000d74
 8009764:	2000125c 	.word	0x2000125c
 8009768:	20001258 	.word	0x20001258

0800976c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009772:	4b28      	ldr	r3, [pc, #160]	@ (8009814 <vTaskSwitchContext+0xa8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800977a:	4b27      	ldr	r3, [pc, #156]	@ (8009818 <vTaskSwitchContext+0xac>)
 800977c:	2201      	movs	r2, #1
 800977e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009780:	e042      	b.n	8009808 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009782:	4b25      	ldr	r3, [pc, #148]	@ (8009818 <vTaskSwitchContext+0xac>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009788:	4b24      	ldr	r3, [pc, #144]	@ (800981c <vTaskSwitchContext+0xb0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	e011      	b.n	80097b4 <vTaskSwitchContext+0x48>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <vTaskSwitchContext+0x42>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	607b      	str	r3, [r7, #4]
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	e7fd      	b.n	80097aa <vTaskSwitchContext+0x3e>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	491a      	ldr	r1, [pc, #104]	@ (8009820 <vTaskSwitchContext+0xb4>)
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0e3      	beq.n	8009790 <vTaskSwitchContext+0x24>
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	4613      	mov	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4a13      	ldr	r2, [pc, #76]	@ (8009820 <vTaskSwitchContext+0xb4>)
 80097d4:	4413      	add	r3, r2
 80097d6:	60bb      	str	r3, [r7, #8]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	605a      	str	r2, [r3, #4]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3308      	adds	r3, #8
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d104      	bne.n	80097f8 <vTaskSwitchContext+0x8c>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	4a09      	ldr	r2, [pc, #36]	@ (8009824 <vTaskSwitchContext+0xb8>)
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	4a06      	ldr	r2, [pc, #24]	@ (800981c <vTaskSwitchContext+0xb0>)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6013      	str	r3, [r2, #0]
}
 8009808:	bf00      	nop
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	20001270 	.word	0x20001270
 8009818:	2000125c 	.word	0x2000125c
 800981c:	20001250 	.word	0x20001250
 8009820:	20000d78 	.word	0x20000d78
 8009824:	20000d74 	.word	0x20000d74

08009828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10b      	bne.n	8009850 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	60fb      	str	r3, [r7, #12]
}
 800984a:	bf00      	nop
 800984c:	bf00      	nop
 800984e:	e7fd      	b.n	800984c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009850:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <vTaskPlaceOnEventList+0x48>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3318      	adds	r3, #24
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fe fe70 	bl	800853e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800985e:	2101      	movs	r1, #1
 8009860:	6838      	ldr	r0, [r7, #0]
 8009862:	f000 fa81 	bl	8009d68 <prvAddCurrentTaskToDelayedList>
}
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000d74 	.word	0x20000d74

08009874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	617b      	str	r3, [r7, #20]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800989e:	4b0a      	ldr	r3, [pc, #40]	@ (80098c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3318      	adds	r3, #24
 80098a4:	4619      	mov	r1, r3
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7fe fe25 	bl	80084f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80098b2:	f04f 33ff 	mov.w	r3, #4294967295
 80098b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	68b8      	ldr	r0, [r7, #8]
 80098bc:	f000 fa54 	bl	8009d68 <prvAddCurrentTaskToDelayedList>
	}
 80098c0:	bf00      	nop
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20000d74 	.word	0x20000d74

080098cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10b      	bne.n	80098fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60fb      	str	r3, [r7, #12]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	3318      	adds	r3, #24
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fe56 	bl	80085b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009904:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <xTaskRemoveFromEventList+0xb0>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d11d      	bne.n	8009948 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	3304      	adds	r3, #4
 8009910:	4618      	mov	r0, r3
 8009912:	f7fe fe4d 	bl	80085b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991a:	4b19      	ldr	r3, [pc, #100]	@ (8009980 <xTaskRemoveFromEventList+0xb4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d903      	bls.n	800992a <xTaskRemoveFromEventList+0x5e>
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4a16      	ldr	r2, [pc, #88]	@ (8009980 <xTaskRemoveFromEventList+0xb4>)
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4a13      	ldr	r2, [pc, #76]	@ (8009984 <xTaskRemoveFromEventList+0xb8>)
 8009938:	441a      	add	r2, r3
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3304      	adds	r3, #4
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7fe fdd8 	bl	80084f6 <vListInsertEnd>
 8009946:	e005      	b.n	8009954 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	3318      	adds	r3, #24
 800994c:	4619      	mov	r1, r3
 800994e:	480e      	ldr	r0, [pc, #56]	@ (8009988 <xTaskRemoveFromEventList+0xbc>)
 8009950:	f7fe fdd1 	bl	80084f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009958:	4b0c      	ldr	r3, [pc, #48]	@ (800998c <xTaskRemoveFromEventList+0xc0>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	429a      	cmp	r2, r3
 8009960:	d905      	bls.n	800996e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009966:	4b0a      	ldr	r3, [pc, #40]	@ (8009990 <xTaskRemoveFromEventList+0xc4>)
 8009968:	2201      	movs	r2, #1
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	e001      	b.n	8009972 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009972:	697b      	ldr	r3, [r7, #20]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20001270 	.word	0x20001270
 8009980:	20001250 	.word	0x20001250
 8009984:	20000d78 	.word	0x20000d78
 8009988:	20001208 	.word	0x20001208
 800998c:	20000d74 	.word	0x20000d74
 8009990:	2000125c 	.word	0x2000125c

08009994 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <vTaskInternalSetTimeOutState+0x24>)
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099a4:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <vTaskInternalSetTimeOutState+0x28>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	605a      	str	r2, [r3, #4]
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20001260 	.word	0x20001260
 80099bc:	2000124c 	.word	0x2000124c

080099c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10b      	bne.n	80099e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	613b      	str	r3, [r7, #16]
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	e7fd      	b.n	80099e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60fb      	str	r3, [r7, #12]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a06:	f000 fe8f 	bl	800a728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009a80 <xTaskCheckForTimeOut+0xc0>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a22:	d102      	bne.n	8009a2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e023      	b.n	8009a72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	4b15      	ldr	r3, [pc, #84]	@ (8009a84 <xTaskCheckForTimeOut+0xc4>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d007      	beq.n	8009a46 <xTaskCheckForTimeOut+0x86>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d302      	bcc.n	8009a46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	e015      	b.n	8009a72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d20b      	bcs.n	8009a68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	1ad2      	subs	r2, r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ff99 	bl	8009994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	e004      	b.n	8009a72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a72:	f000 fe8b 	bl	800a78c <vPortExitCritical>

	return xReturn;
 8009a76:	69fb      	ldr	r3, [r7, #28]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	2000124c 	.word	0x2000124c
 8009a84:	20001260 	.word	0x20001260

08009a88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a8c:	4b03      	ldr	r3, [pc, #12]	@ (8009a9c <vTaskMissedYield+0x14>)
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
}
 8009a92:	bf00      	nop
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	2000125c 	.word	0x2000125c

08009aa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009aa8:	f000 f852 	bl	8009b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009aac:	4b06      	ldr	r3, [pc, #24]	@ (8009ac8 <prvIdleTask+0x28>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d9f9      	bls.n	8009aa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ab4:	4b05      	ldr	r3, [pc, #20]	@ (8009acc <prvIdleTask+0x2c>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ac4:	e7f0      	b.n	8009aa8 <prvIdleTask+0x8>
 8009ac6:	bf00      	nop
 8009ac8:	20000d78 	.word	0x20000d78
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	607b      	str	r3, [r7, #4]
 8009ada:	e00c      	b.n	8009af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4a12      	ldr	r2, [pc, #72]	@ (8009b30 <prvInitialiseTaskLists+0x60>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fcd6 	bl	800849c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3301      	adds	r3, #1
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b37      	cmp	r3, #55	@ 0x37
 8009afa:	d9ef      	bls.n	8009adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009afc:	480d      	ldr	r0, [pc, #52]	@ (8009b34 <prvInitialiseTaskLists+0x64>)
 8009afe:	f7fe fccd 	bl	800849c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b02:	480d      	ldr	r0, [pc, #52]	@ (8009b38 <prvInitialiseTaskLists+0x68>)
 8009b04:	f7fe fcca 	bl	800849c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b08:	480c      	ldr	r0, [pc, #48]	@ (8009b3c <prvInitialiseTaskLists+0x6c>)
 8009b0a:	f7fe fcc7 	bl	800849c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b0e:	480c      	ldr	r0, [pc, #48]	@ (8009b40 <prvInitialiseTaskLists+0x70>)
 8009b10:	f7fe fcc4 	bl	800849c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b14:	480b      	ldr	r0, [pc, #44]	@ (8009b44 <prvInitialiseTaskLists+0x74>)
 8009b16:	f7fe fcc1 	bl	800849c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b48 <prvInitialiseTaskLists+0x78>)
 8009b1c:	4a05      	ldr	r2, [pc, #20]	@ (8009b34 <prvInitialiseTaskLists+0x64>)
 8009b1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b20:	4b0a      	ldr	r3, [pc, #40]	@ (8009b4c <prvInitialiseTaskLists+0x7c>)
 8009b22:	4a05      	ldr	r2, [pc, #20]	@ (8009b38 <prvInitialiseTaskLists+0x68>)
 8009b24:	601a      	str	r2, [r3, #0]
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000d78 	.word	0x20000d78
 8009b34:	200011d8 	.word	0x200011d8
 8009b38:	200011ec 	.word	0x200011ec
 8009b3c:	20001208 	.word	0x20001208
 8009b40:	2000121c 	.word	0x2000121c
 8009b44:	20001234 	.word	0x20001234
 8009b48:	20001200 	.word	0x20001200
 8009b4c:	20001204 	.word	0x20001204

08009b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b56:	e019      	b.n	8009b8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b58:	f000 fde6 	bl	800a728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5c:	4b10      	ldr	r3, [pc, #64]	@ (8009ba0 <prvCheckTasksWaitingTermination+0x50>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fd21 	bl	80085b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba4 <prvCheckTasksWaitingTermination+0x54>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	4a0b      	ldr	r2, [pc, #44]	@ (8009ba4 <prvCheckTasksWaitingTermination+0x54>)
 8009b76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b78:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba8 <prvCheckTasksWaitingTermination+0x58>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba8 <prvCheckTasksWaitingTermination+0x58>)
 8009b80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b82:	f000 fe03 	bl	800a78c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f810 	bl	8009bac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <prvCheckTasksWaitingTermination+0x58>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e1      	bne.n	8009b58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2000121c 	.word	0x2000121c
 8009ba4:	20001248 	.word	0x20001248
 8009ba8:	20001230 	.word	0x20001230

08009bac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d108      	bne.n	8009bd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 ffa0 	bl	800ab08 <vPortFree>
				vPortFree( pxTCB );
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 ff9d 	bl	800ab08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bce:	e019      	b.n	8009c04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d103      	bne.n	8009be2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 ff94 	bl	800ab08 <vPortFree>
	}
 8009be0:	e010      	b.n	8009c04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d00b      	beq.n	8009c04 <prvDeleteTCB+0x58>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	60fb      	str	r3, [r7, #12]
}
 8009bfe:	bf00      	nop
 8009c00:	bf00      	nop
 8009c02:	e7fd      	b.n	8009c00 <prvDeleteTCB+0x54>
	}
 8009c04:	bf00      	nop
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c12:	4b0c      	ldr	r3, [pc, #48]	@ (8009c44 <prvResetNextTaskUnblockTime+0x38>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <prvResetNextTaskUnblockTime+0x3c>)
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c24:	e008      	b.n	8009c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c26:	4b07      	ldr	r3, [pc, #28]	@ (8009c44 <prvResetNextTaskUnblockTime+0x38>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4a04      	ldr	r2, [pc, #16]	@ (8009c48 <prvResetNextTaskUnblockTime+0x3c>)
 8009c36:	6013      	str	r3, [r2, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20001200 	.word	0x20001200
 8009c48:	20001268 	.word	0x20001268

08009c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c52:	4b0b      	ldr	r3, [pc, #44]	@ (8009c80 <xTaskGetSchedulerState+0x34>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	607b      	str	r3, [r7, #4]
 8009c5e:	e008      	b.n	8009c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c60:	4b08      	ldr	r3, [pc, #32]	@ (8009c84 <xTaskGetSchedulerState+0x38>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d102      	bne.n	8009c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	e001      	b.n	8009c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c72:	687b      	ldr	r3, [r7, #4]
	}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	20001254 	.word	0x20001254
 8009c84:	20001270 	.word	0x20001270

08009c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d058      	beq.n	8009d50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d5c <xTaskPriorityDisinherit+0xd4>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d00b      	beq.n	8009cc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	60fb      	str	r3, [r7, #12]
}
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	e7fd      	b.n	8009cbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10b      	bne.n	8009ce0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	60bb      	str	r3, [r7, #8]
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	e7fd      	b.n	8009cdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce4:	1e5a      	subs	r2, r3, #1
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d02c      	beq.n	8009d50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d128      	bne.n	8009d50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fc54 	bl	80085b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d20:	4b0f      	ldr	r3, [pc, #60]	@ (8009d60 <xTaskPriorityDisinherit+0xd8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d903      	bls.n	8009d30 <xTaskPriorityDisinherit+0xa8>
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8009d60 <xTaskPriorityDisinherit+0xd8>)
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4a09      	ldr	r2, [pc, #36]	@ (8009d64 <xTaskPriorityDisinherit+0xdc>)
 8009d3e:	441a      	add	r2, r3
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fe fbd5 	bl	80084f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d50:	697b      	ldr	r3, [r7, #20]
	}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000d74 	.word	0x20000d74
 8009d60:	20001250 	.word	0x20001250
 8009d64:	20000d78 	.word	0x20000d78

08009d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d72:	4b21      	ldr	r3, [pc, #132]	@ (8009df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d78:	4b20      	ldr	r3, [pc, #128]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fe fc16 	bl	80085b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8a:	d10a      	bne.n	8009da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d007      	beq.n	8009da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d92:	4b1a      	ldr	r3, [pc, #104]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4819      	ldr	r0, [pc, #100]	@ (8009e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d9c:	f7fe fbab 	bl	80084f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009da0:	e026      	b.n	8009df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4413      	add	r3, r2
 8009da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009daa:	4b14      	ldr	r3, [pc, #80]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d209      	bcs.n	8009dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dba:	4b12      	ldr	r3, [pc, #72]	@ (8009e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7fe fbb9 	bl	800853e <vListInsert>
}
 8009dcc:	e010      	b.n	8009df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dce:	4b0e      	ldr	r3, [pc, #56]	@ (8009e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7fe fbaf 	bl	800853e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009de0:	4b0a      	ldr	r3, [pc, #40]	@ (8009e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d202      	bcs.n	8009df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dea:	4a08      	ldr	r2, [pc, #32]	@ (8009e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6013      	str	r3, [r2, #0]
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	2000124c 	.word	0x2000124c
 8009dfc:	20000d74 	.word	0x20000d74
 8009e00:	20001234 	.word	0x20001234
 8009e04:	20001204 	.word	0x20001204
 8009e08:	20001200 	.word	0x20001200
 8009e0c:	20001268 	.word	0x20001268

08009e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08a      	sub	sp, #40	@ 0x28
 8009e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e1a:	f000 fb13 	bl	800a444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009e94 <xTimerCreateTimerTask+0x84>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d021      	beq.n	8009e6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e2e:	1d3a      	adds	r2, r7, #4
 8009e30:	f107 0108 	add.w	r1, r7, #8
 8009e34:	f107 030c 	add.w	r3, r7, #12
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe fb15 	bl	8008468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	9202      	str	r2, [sp, #8]
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	2302      	movs	r3, #2
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	460a      	mov	r2, r1
 8009e50:	4911      	ldr	r1, [pc, #68]	@ (8009e98 <xTimerCreateTimerTask+0x88>)
 8009e52:	4812      	ldr	r0, [pc, #72]	@ (8009e9c <xTimerCreateTimerTask+0x8c>)
 8009e54:	f7ff f8d0 	bl	8008ff8 <xTaskCreateStatic>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4a11      	ldr	r2, [pc, #68]	@ (8009ea0 <xTimerCreateTimerTask+0x90>)
 8009e5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ea0 <xTimerCreateTimerTask+0x90>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e66:	2301      	movs	r3, #1
 8009e68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10b      	bne.n	8009e88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	613b      	str	r3, [r7, #16]
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	e7fd      	b.n	8009e84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e88:	697b      	ldr	r3, [r7, #20]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	200012a4 	.word	0x200012a4
 8009e98:	0800dacc 	.word	0x0800dacc
 8009e9c:	08009fdd 	.word	0x08009fdd
 8009ea0:	200012a8 	.word	0x200012a8

08009ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	@ 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10b      	bne.n	8009ed4 <xTimerGenericCommand+0x30>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	623b      	str	r3, [r7, #32]
}
 8009ece:	bf00      	nop
 8009ed0:	bf00      	nop
 8009ed2:	e7fd      	b.n	8009ed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ed4:	4b19      	ldr	r3, [pc, #100]	@ (8009f3c <xTimerGenericCommand+0x98>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d02a      	beq.n	8009f32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	dc18      	bgt.n	8009f20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eee:	f7ff fead 	bl	8009c4c <xTaskGetSchedulerState>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d109      	bne.n	8009f0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ef8:	4b10      	ldr	r3, [pc, #64]	@ (8009f3c <xTimerGenericCommand+0x98>)
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	f107 0110 	add.w	r1, r7, #16
 8009f00:	2300      	movs	r3, #0
 8009f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f04:	f7fe fc88 	bl	8008818 <xQueueGenericSend>
 8009f08:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f0a:	e012      	b.n	8009f32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f3c <xTimerGenericCommand+0x98>)
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	f107 0110 	add.w	r1, r7, #16
 8009f14:	2300      	movs	r3, #0
 8009f16:	2200      	movs	r2, #0
 8009f18:	f7fe fc7e 	bl	8008818 <xQueueGenericSend>
 8009f1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f1e:	e008      	b.n	8009f32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f20:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <xTimerGenericCommand+0x98>)
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	f107 0110 	add.w	r1, r7, #16
 8009f28:	2300      	movs	r3, #0
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	f7fe fd76 	bl	8008a1c <xQueueGenericSendFromISR>
 8009f30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3728      	adds	r7, #40	@ 0x28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	200012a4 	.word	0x200012a4

08009f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4a:	4b23      	ldr	r3, [pc, #140]	@ (8009fd8 <prvProcessExpiredTimer+0x98>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	3304      	adds	r3, #4
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fb29 	bl	80085b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d023      	beq.n	8009fb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	699a      	ldr	r2, [r3, #24]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	18d1      	adds	r1, r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	6978      	ldr	r0, [r7, #20]
 8009f7a:	f000 f8d5 	bl	800a128 <prvInsertTimerInActiveList>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d020      	beq.n	8009fc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f84:	2300      	movs	r3, #0
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6978      	ldr	r0, [r7, #20]
 8009f90:	f7ff ff88 	bl	8009ea4 <xTimerGenericCommand>
 8009f94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d114      	bne.n	8009fc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	60fb      	str	r3, [r7, #12]
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fba:	f023 0301 	bic.w	r3, r3, #1
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	6978      	ldr	r0, [r7, #20]
 8009fcc:	4798      	blx	r3
}
 8009fce:	bf00      	nop
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	2000129c 	.word	0x2000129c

08009fdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fe4:	f107 0308 	add.w	r3, r7, #8
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 f859 	bl	800a0a0 <prvGetNextExpireTime>
 8009fee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f805 	bl	800a004 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ffa:	f000 f8d7 	bl	800a1ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ffe:	bf00      	nop
 800a000:	e7f0      	b.n	8009fe4 <prvTimerTask+0x8>
	...

0800a004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a00e:	f7ff fa37 	bl	8009480 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	4618      	mov	r0, r3
 800a018:	f000 f866 	bl	800a0e8 <prvSampleTimeNow>
 800a01c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d130      	bne.n	800a086 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10a      	bne.n	800a040 <prvProcessTimerOrBlockTask+0x3c>
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d806      	bhi.n	800a040 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a032:	f7ff fa33 	bl	800949c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a036:	68f9      	ldr	r1, [r7, #12]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff ff81 	bl	8009f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a03e:	e024      	b.n	800a08a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d008      	beq.n	800a058 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a046:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <prvProcessTimerOrBlockTask+0x90>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <prvProcessTimerOrBlockTask+0x50>
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <prvProcessTimerOrBlockTask+0x52>
 800a054:	2300      	movs	r3, #0
 800a056:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a058:	4b0f      	ldr	r3, [pc, #60]	@ (800a098 <prvProcessTimerOrBlockTask+0x94>)
 800a05a:	6818      	ldr	r0, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	4619      	mov	r1, r3
 800a066:	f7fe ff93 	bl	8008f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a06a:	f7ff fa17 	bl	800949c <xTaskResumeAll>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a074:	4b09      	ldr	r3, [pc, #36]	@ (800a09c <prvProcessTimerOrBlockTask+0x98>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
}
 800a084:	e001      	b.n	800a08a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a086:	f7ff fa09 	bl	800949c <xTaskResumeAll>
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200012a0 	.word	0x200012a0
 800a098:	200012a4 	.word	0x200012a4
 800a09c:	e000ed04 	.word	0xe000ed04

0800a0a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e4 <prvGetNextExpireTime+0x44>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <prvGetNextExpireTime+0x16>
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	e000      	b.n	800a0b8 <prvGetNextExpireTime+0x18>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0c4:	4b07      	ldr	r3, [pc, #28]	@ (800a0e4 <prvGetNextExpireTime+0x44>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e001      	b.n	800a0d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	2000129c 	.word	0x2000129c

0800a0e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0f0:	f7ff fa72 	bl	80095d8 <xTaskGetTickCount>
 800a0f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a124 <prvSampleTimeNow+0x3c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d205      	bcs.n	800a10c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a100:	f000 f93a 	bl	800a378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e002      	b.n	800a112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a112:	4a04      	ldr	r2, [pc, #16]	@ (800a124 <prvSampleTimeNow+0x3c>)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a118:	68fb      	ldr	r3, [r7, #12]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200012ac 	.word	0x200012ac

0800a128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d812      	bhi.n	800a174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d302      	bcc.n	800a162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	e01b      	b.n	800a19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a162:	4b10      	ldr	r3, [pc, #64]	@ (800a1a4 <prvInsertTimerInActiveList+0x7c>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3304      	adds	r3, #4
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f7fe f9e6 	bl	800853e <vListInsert>
 800a172:	e012      	b.n	800a19a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d206      	bcs.n	800a18a <prvInsertTimerInActiveList+0x62>
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d302      	bcc.n	800a18a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a184:	2301      	movs	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e007      	b.n	800a19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a18a:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <prvInsertTimerInActiveList+0x80>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3304      	adds	r3, #4
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fe f9d2 	bl	800853e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a19a:	697b      	ldr	r3, [r7, #20]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	200012a0 	.word	0x200012a0
 800a1a8:	2000129c 	.word	0x2000129c

0800a1ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08e      	sub	sp, #56	@ 0x38
 800a1b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1b2:	e0ce      	b.n	800a352 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	da19      	bge.n	800a1ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1ba:	1d3b      	adds	r3, r7, #4
 800a1bc:	3304      	adds	r3, #4
 800a1be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	61fb      	str	r3, [r7, #28]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1e4:	6850      	ldr	r0, [r2, #4]
 800a1e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1e8:	6892      	ldr	r2, [r2, #8]
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f2c0 80ae 	blt.w	800a352 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a204:	3304      	adds	r3, #4
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe f9d2 	bl	80085b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a20c:	463b      	mov	r3, r7
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff ff6a 	bl	800a0e8 <prvSampleTimeNow>
 800a214:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b09      	cmp	r3, #9
 800a21a:	f200 8097 	bhi.w	800a34c <prvProcessReceivedCommands+0x1a0>
 800a21e:	a201      	add	r2, pc, #4	@ (adr r2, 800a224 <prvProcessReceivedCommands+0x78>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a24d 	.word	0x0800a24d
 800a228:	0800a24d 	.word	0x0800a24d
 800a22c:	0800a24d 	.word	0x0800a24d
 800a230:	0800a2c3 	.word	0x0800a2c3
 800a234:	0800a2d7 	.word	0x0800a2d7
 800a238:	0800a323 	.word	0x0800a323
 800a23c:	0800a24d 	.word	0x0800a24d
 800a240:	0800a24d 	.word	0x0800a24d
 800a244:	0800a2c3 	.word	0x0800a2c3
 800a248:	0800a2d7 	.word	0x0800a2d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	b2da      	uxtb	r2, r3
 800a258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	18d1      	adds	r1, r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a26c:	f7ff ff5c 	bl	800a128 <prvInsertTimerInActiveList>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d06c      	beq.n	800a350 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a27c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d061      	beq.n	800a350 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	441a      	add	r2, r3
 800a294:	2300      	movs	r3, #0
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	2300      	movs	r3, #0
 800a29a:	2100      	movs	r1, #0
 800a29c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a29e:	f7ff fe01 	bl	8009ea4 <xTimerGenericCommand>
 800a2a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d152      	bne.n	800a350 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	61bb      	str	r3, [r7, #24]
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	e7fd      	b.n	800a2be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2c8:	f023 0301 	bic.w	r3, r3, #1
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2d4:	e03d      	b.n	800a352 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	617b      	str	r3, [r7, #20]
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	18d1      	adds	r1, r2, r3
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a31c:	f7ff ff04 	bl	800a128 <prvInsertTimerInActiveList>
					break;
 800a320:	e017      	b.n	800a352 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d103      	bne.n	800a338 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a332:	f000 fbe9 	bl	800ab08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a336:	e00c      	b.n	800a352 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a33e:	f023 0301 	bic.w	r3, r3, #1
 800a342:	b2da      	uxtb	r2, r3
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a34a:	e002      	b.n	800a352 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a34c:	bf00      	nop
 800a34e:	e000      	b.n	800a352 <prvProcessReceivedCommands+0x1a6>
					break;
 800a350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a352:	4b08      	ldr	r3, [pc, #32]	@ (800a374 <prvProcessReceivedCommands+0x1c8>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	1d39      	adds	r1, r7, #4
 800a358:	2200      	movs	r2, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fbfc 	bl	8008b58 <xQueueReceive>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	f47f af26 	bne.w	800a1b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	3730      	adds	r7, #48	@ 0x30
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	200012a4 	.word	0x200012a4

0800a378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a37e:	e049      	b.n	800a414 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a380:	4b2e      	ldr	r3, [pc, #184]	@ (800a43c <prvSwitchTimerLists+0xc4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a38a:	4b2c      	ldr	r3, [pc, #176]	@ (800a43c <prvSwitchTimerLists+0xc4>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3304      	adds	r3, #4
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe f909 	bl	80085b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d02f      	beq.n	800a414 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d90e      	bls.n	800a3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a43c <prvSwitchTimerLists+0xc4>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f7fe f8ae 	bl	800853e <vListInsert>
 800a3e2:	e017      	b.n	800a414 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff fd58 	bl	8009ea4 <xTimerGenericCommand>
 800a3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	603b      	str	r3, [r7, #0]
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	e7fd      	b.n	800a410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a414:	4b09      	ldr	r3, [pc, #36]	@ (800a43c <prvSwitchTimerLists+0xc4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1b0      	bne.n	800a380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a41e:	4b07      	ldr	r3, [pc, #28]	@ (800a43c <prvSwitchTimerLists+0xc4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a424:	4b06      	ldr	r3, [pc, #24]	@ (800a440 <prvSwitchTimerLists+0xc8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a04      	ldr	r2, [pc, #16]	@ (800a43c <prvSwitchTimerLists+0xc4>)
 800a42a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a42c:	4a04      	ldr	r2, [pc, #16]	@ (800a440 <prvSwitchTimerLists+0xc8>)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	6013      	str	r3, [r2, #0]
}
 800a432:	bf00      	nop
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	2000129c 	.word	0x2000129c
 800a440:	200012a0 	.word	0x200012a0

0800a444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a44a:	f000 f96d 	bl	800a728 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a44e:	4b15      	ldr	r3, [pc, #84]	@ (800a4a4 <prvCheckForValidListAndQueue+0x60>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d120      	bne.n	800a498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a456:	4814      	ldr	r0, [pc, #80]	@ (800a4a8 <prvCheckForValidListAndQueue+0x64>)
 800a458:	f7fe f820 	bl	800849c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a45c:	4813      	ldr	r0, [pc, #76]	@ (800a4ac <prvCheckForValidListAndQueue+0x68>)
 800a45e:	f7fe f81d 	bl	800849c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a462:	4b13      	ldr	r3, [pc, #76]	@ (800a4b0 <prvCheckForValidListAndQueue+0x6c>)
 800a464:	4a10      	ldr	r2, [pc, #64]	@ (800a4a8 <prvCheckForValidListAndQueue+0x64>)
 800a466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a468:	4b12      	ldr	r3, [pc, #72]	@ (800a4b4 <prvCheckForValidListAndQueue+0x70>)
 800a46a:	4a10      	ldr	r2, [pc, #64]	@ (800a4ac <prvCheckForValidListAndQueue+0x68>)
 800a46c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a46e:	2300      	movs	r3, #0
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	4b11      	ldr	r3, [pc, #68]	@ (800a4b8 <prvCheckForValidListAndQueue+0x74>)
 800a474:	4a11      	ldr	r2, [pc, #68]	@ (800a4bc <prvCheckForValidListAndQueue+0x78>)
 800a476:	2110      	movs	r1, #16
 800a478:	200a      	movs	r0, #10
 800a47a:	f7fe f92d 	bl	80086d8 <xQueueGenericCreateStatic>
 800a47e:	4603      	mov	r3, r0
 800a480:	4a08      	ldr	r2, [pc, #32]	@ (800a4a4 <prvCheckForValidListAndQueue+0x60>)
 800a482:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a484:	4b07      	ldr	r3, [pc, #28]	@ (800a4a4 <prvCheckForValidListAndQueue+0x60>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a48c:	4b05      	ldr	r3, [pc, #20]	@ (800a4a4 <prvCheckForValidListAndQueue+0x60>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	490b      	ldr	r1, [pc, #44]	@ (800a4c0 <prvCheckForValidListAndQueue+0x7c>)
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fd52 	bl	8008f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a498:	f000 f978 	bl	800a78c <vPortExitCritical>
}
 800a49c:	bf00      	nop
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200012a4 	.word	0x200012a4
 800a4a8:	20001274 	.word	0x20001274
 800a4ac:	20001288 	.word	0x20001288
 800a4b0:	2000129c 	.word	0x2000129c
 800a4b4:	200012a0 	.word	0x200012a0
 800a4b8:	20001350 	.word	0x20001350
 800a4bc:	200012b0 	.word	0x200012b0
 800a4c0:	0800dad4 	.word	0x0800dad4

0800a4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3b04      	subs	r3, #4
 800a4d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3b04      	subs	r3, #4
 800a4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f023 0201 	bic.w	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3b04      	subs	r3, #4
 800a4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a528 <pxPortInitialiseStack+0x64>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3b14      	subs	r3, #20
 800a4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b04      	subs	r3, #4
 800a50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f06f 0202 	mvn.w	r2, #2
 800a512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3b20      	subs	r3, #32
 800a518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	0800a52d 	.word	0x0800a52d

0800a52c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a536:	4b13      	ldr	r3, [pc, #76]	@ (800a584 <prvTaskExitError+0x58>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53e:	d00b      	beq.n	800a558 <prvTaskExitError+0x2c>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <prvTaskExitError+0x28>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60bb      	str	r3, [r7, #8]
}
 800a56a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a56c:	bf00      	nop
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0fc      	beq.n	800a56e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	20000194 	.word	0x20000194
	...

0800a590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a590:	4b07      	ldr	r3, [pc, #28]	@ (800a5b0 <pxCurrentTCBConst2>)
 800a592:	6819      	ldr	r1, [r3, #0]
 800a594:	6808      	ldr	r0, [r1, #0]
 800a596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59a:	f380 8809 	msr	PSP, r0
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f04f 0000 	mov.w	r0, #0
 800a5a6:	f380 8811 	msr	BASEPRI, r0
 800a5aa:	4770      	bx	lr
 800a5ac:	f3af 8000 	nop.w

0800a5b0 <pxCurrentTCBConst2>:
 800a5b0:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop

0800a5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5b8:	4808      	ldr	r0, [pc, #32]	@ (800a5dc <prvPortStartFirstTask+0x24>)
 800a5ba:	6800      	ldr	r0, [r0, #0]
 800a5bc:	6800      	ldr	r0, [r0, #0]
 800a5be:	f380 8808 	msr	MSP, r0
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8814 	msr	CONTROL, r0
 800a5ca:	b662      	cpsie	i
 800a5cc:	b661      	cpsie	f
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	df00      	svc	0
 800a5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5da:	bf00      	nop
 800a5dc:	e000ed08 	.word	0xe000ed08

0800a5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5e6:	4b47      	ldr	r3, [pc, #284]	@ (800a704 <xPortStartScheduler+0x124>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a47      	ldr	r2, [pc, #284]	@ (800a708 <xPortStartScheduler+0x128>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d10b      	bne.n	800a608 <xPortStartScheduler+0x28>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	60fb      	str	r3, [r7, #12]
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a608:	4b3e      	ldr	r3, [pc, #248]	@ (800a704 <xPortStartScheduler+0x124>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a3f      	ldr	r2, [pc, #252]	@ (800a70c <xPortStartScheduler+0x12c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d10b      	bne.n	800a62a <xPortStartScheduler+0x4a>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	613b      	str	r3, [r7, #16]
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a62a:	4b39      	ldr	r3, [pc, #228]	@ (800a710 <xPortStartScheduler+0x130>)
 800a62c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	22ff      	movs	r2, #255	@ 0xff
 800a63a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	4b31      	ldr	r3, [pc, #196]	@ (800a714 <xPortStartScheduler+0x134>)
 800a650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a652:	4b31      	ldr	r3, [pc, #196]	@ (800a718 <xPortStartScheduler+0x138>)
 800a654:	2207      	movs	r2, #7
 800a656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a658:	e009      	b.n	800a66e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a65a:	4b2f      	ldr	r3, [pc, #188]	@ (800a718 <xPortStartScheduler+0x138>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3b01      	subs	r3, #1
 800a660:	4a2d      	ldr	r2, [pc, #180]	@ (800a718 <xPortStartScheduler+0x138>)
 800a662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a66e:	78fb      	ldrb	r3, [r7, #3]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a676:	2b80      	cmp	r3, #128	@ 0x80
 800a678:	d0ef      	beq.n	800a65a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a67a:	4b27      	ldr	r3, [pc, #156]	@ (800a718 <xPortStartScheduler+0x138>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f1c3 0307 	rsb	r3, r3, #7
 800a682:	2b04      	cmp	r3, #4
 800a684:	d00b      	beq.n	800a69e <xPortStartScheduler+0xbe>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	60bb      	str	r3, [r7, #8]
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	e7fd      	b.n	800a69a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a69e:	4b1e      	ldr	r3, [pc, #120]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6b0:	4a19      	ldr	r2, [pc, #100]	@ (800a718 <xPortStartScheduler+0x138>)
 800a6b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6bc:	4b17      	ldr	r3, [pc, #92]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a16      	ldr	r2, [pc, #88]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6c8:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a13      	ldr	r2, [pc, #76]	@ (800a71c <xPortStartScheduler+0x13c>)
 800a6ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6d4:	f000 f8da 	bl	800a88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6d8:	4b11      	ldr	r3, [pc, #68]	@ (800a720 <xPortStartScheduler+0x140>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6de:	f000 f8f9 	bl	800a8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6e2:	4b10      	ldr	r3, [pc, #64]	@ (800a724 <xPortStartScheduler+0x144>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a724 <xPortStartScheduler+0x144>)
 800a6e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6ee:	f7ff ff63 	bl	800a5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6f2:	f7ff f83b 	bl	800976c <vTaskSwitchContext>
	prvTaskExitError();
 800a6f6:	f7ff ff19 	bl	800a52c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	e000ed00 	.word	0xe000ed00
 800a708:	410fc271 	.word	0x410fc271
 800a70c:	410fc270 	.word	0x410fc270
 800a710:	e000e400 	.word	0xe000e400
 800a714:	200013a0 	.word	0x200013a0
 800a718:	200013a4 	.word	0x200013a4
 800a71c:	e000ed20 	.word	0xe000ed20
 800a720:	20000194 	.word	0x20000194
 800a724:	e000ef34 	.word	0xe000ef34

0800a728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	607b      	str	r3, [r7, #4]
}
 800a740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a742:	4b10      	ldr	r3, [pc, #64]	@ (800a784 <vPortEnterCritical+0x5c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3301      	adds	r3, #1
 800a748:	4a0e      	ldr	r2, [pc, #56]	@ (800a784 <vPortEnterCritical+0x5c>)
 800a74a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a74c:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <vPortEnterCritical+0x5c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d110      	bne.n	800a776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a754:	4b0c      	ldr	r3, [pc, #48]	@ (800a788 <vPortEnterCritical+0x60>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00b      	beq.n	800a776 <vPortEnterCritical+0x4e>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	603b      	str	r3, [r7, #0]
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <vPortEnterCritical+0x4a>
	}
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20000194 	.word	0x20000194
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a792:	4b12      	ldr	r3, [pc, #72]	@ (800a7dc <vPortExitCritical+0x50>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10b      	bne.n	800a7b2 <vPortExitCritical+0x26>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	607b      	str	r3, [r7, #4]
}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	e7fd      	b.n	800a7ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7dc <vPortExitCritical+0x50>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	4a08      	ldr	r2, [pc, #32]	@ (800a7dc <vPortExitCritical+0x50>)
 800a7ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7bc:	4b07      	ldr	r3, [pc, #28]	@ (800a7dc <vPortExitCritical+0x50>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d105      	bne.n	800a7d0 <vPortExitCritical+0x44>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f383 8811 	msr	BASEPRI, r3
}
 800a7ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	20000194 	.word	0x20000194

0800a7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7e0:	f3ef 8009 	mrs	r0, PSP
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	4b15      	ldr	r3, [pc, #84]	@ (800a840 <pxCurrentTCBConst>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	f01e 0f10 	tst.w	lr, #16
 800a7f0:	bf08      	it	eq
 800a7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fa:	6010      	str	r0, [r2, #0]
 800a7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a804:	f380 8811 	msr	BASEPRI, r0
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f7fe ffac 	bl	800976c <vTaskSwitchContext>
 800a814:	f04f 0000 	mov.w	r0, #0
 800a818:	f380 8811 	msr	BASEPRI, r0
 800a81c:	bc09      	pop	{r0, r3}
 800a81e:	6819      	ldr	r1, [r3, #0]
 800a820:	6808      	ldr	r0, [r1, #0]
 800a822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a826:	f01e 0f10 	tst.w	lr, #16
 800a82a:	bf08      	it	eq
 800a82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a830:	f380 8809 	msr	PSP, r0
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	f3af 8000 	nop.w

0800a840 <pxCurrentTCBConst>:
 800a840:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop

0800a848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	607b      	str	r3, [r7, #4]
}
 800a860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a862:	f7fe fec9 	bl	80095f8 <xTaskIncrementTick>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <xPortSysTickHandler+0x40>)
 800a86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f383 8811 	msr	BASEPRI, r3
}
 800a87e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a890:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c0 <vPortSetupTimerInterrupt+0x34>)
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a896:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <vPortSetupTimerInterrupt+0x38>)
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a89c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c8 <vPortSetupTimerInterrupt+0x3c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8cc <vPortSetupTimerInterrupt+0x40>)
 800a8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a6:	099b      	lsrs	r3, r3, #6
 800a8a8:	4a09      	ldr	r2, [pc, #36]	@ (800a8d0 <vPortSetupTimerInterrupt+0x44>)
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ae:	4b04      	ldr	r3, [pc, #16]	@ (800a8c0 <vPortSetupTimerInterrupt+0x34>)
 800a8b0:	2207      	movs	r2, #7
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	e000e010 	.word	0xe000e010
 800a8c4:	e000e018 	.word	0xe000e018
 800a8c8:	20000000 	.word	0x20000000
 800a8cc:	10624dd3 	.word	0x10624dd3
 800a8d0:	e000e014 	.word	0xe000e014

0800a8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8e4 <vPortEnableVFP+0x10>
 800a8d8:	6801      	ldr	r1, [r0, #0]
 800a8da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8de:	6001      	str	r1, [r0, #0]
 800a8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8e2:	bf00      	nop
 800a8e4:	e000ed88 	.word	0xe000ed88

0800a8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8ee:	f3ef 8305 	mrs	r3, IPSR
 800a8f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b0f      	cmp	r3, #15
 800a8f8:	d915      	bls.n	800a926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8fa:	4a18      	ldr	r2, [pc, #96]	@ (800a95c <vPortValidateInterruptPriority+0x74>)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a904:	4b16      	ldr	r3, [pc, #88]	@ (800a960 <vPortValidateInterruptPriority+0x78>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	7afa      	ldrb	r2, [r7, #11]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d20b      	bcs.n	800a926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	e7fd      	b.n	800a922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a926:	4b0f      	ldr	r3, [pc, #60]	@ (800a964 <vPortValidateInterruptPriority+0x7c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a92e:	4b0e      	ldr	r3, [pc, #56]	@ (800a968 <vPortValidateInterruptPriority+0x80>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	d90b      	bls.n	800a94e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	603b      	str	r3, [r7, #0]
}
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	e7fd      	b.n	800a94a <vPortValidateInterruptPriority+0x62>
	}
 800a94e:	bf00      	nop
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	e000e3f0 	.word	0xe000e3f0
 800a960:	200013a0 	.word	0x200013a0
 800a964:	e000ed0c 	.word	0xe000ed0c
 800a968:	200013a4 	.word	0x200013a4

0800a96c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a974:	2300      	movs	r3, #0
 800a976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a978:	f7fe fd82 	bl	8009480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a97c:	4b5c      	ldr	r3, [pc, #368]	@ (800aaf0 <pvPortMalloc+0x184>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a984:	f000 f924 	bl	800abd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a988:	4b5a      	ldr	r3, [pc, #360]	@ (800aaf4 <pvPortMalloc+0x188>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4013      	ands	r3, r2
 800a990:	2b00      	cmp	r3, #0
 800a992:	f040 8095 	bne.w	800aac0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01e      	beq.n	800a9da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a99c:	2208      	movs	r2, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d015      	beq.n	800a9da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f023 0307 	bic.w	r3, r3, #7
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00b      	beq.n	800a9da <pvPortMalloc+0x6e>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	617b      	str	r3, [r7, #20]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d06f      	beq.n	800aac0 <pvPortMalloc+0x154>
 800a9e0:	4b45      	ldr	r3, [pc, #276]	@ (800aaf8 <pvPortMalloc+0x18c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d86a      	bhi.n	800aac0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9ea:	4b44      	ldr	r3, [pc, #272]	@ (800aafc <pvPortMalloc+0x190>)
 800a9ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9ee:	4b43      	ldr	r3, [pc, #268]	@ (800aafc <pvPortMalloc+0x190>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9f4:	e004      	b.n	800aa00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d903      	bls.n	800aa12 <pvPortMalloc+0xa6>
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1f1      	bne.n	800a9f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa12:	4b37      	ldr	r3, [pc, #220]	@ (800aaf0 <pvPortMalloc+0x184>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d051      	beq.n	800aac0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2208      	movs	r2, #8
 800aa22:	4413      	add	r3, r2
 800aa24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	1ad2      	subs	r2, r2, r3
 800aa36:	2308      	movs	r3, #8
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d920      	bls.n	800aa80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4413      	add	r3, r2
 800aa44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <pvPortMalloc+0xfc>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	613b      	str	r3, [r7, #16]
}
 800aa62:	bf00      	nop
 800aa64:	bf00      	nop
 800aa66:	e7fd      	b.n	800aa64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	1ad2      	subs	r2, r2, r3
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa7a:	69b8      	ldr	r0, [r7, #24]
 800aa7c:	f000 f90a 	bl	800ac94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa80:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf8 <pvPortMalloc+0x18c>)
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	4a1b      	ldr	r2, [pc, #108]	@ (800aaf8 <pvPortMalloc+0x18c>)
 800aa8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa8e:	4b1a      	ldr	r3, [pc, #104]	@ (800aaf8 <pvPortMalloc+0x18c>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	4b1b      	ldr	r3, [pc, #108]	@ (800ab00 <pvPortMalloc+0x194>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d203      	bcs.n	800aaa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa9a:	4b17      	ldr	r3, [pc, #92]	@ (800aaf8 <pvPortMalloc+0x18c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a18      	ldr	r2, [pc, #96]	@ (800ab00 <pvPortMalloc+0x194>)
 800aaa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	4b13      	ldr	r3, [pc, #76]	@ (800aaf4 <pvPortMalloc+0x188>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aab6:	4b13      	ldr	r3, [pc, #76]	@ (800ab04 <pvPortMalloc+0x198>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	4a11      	ldr	r2, [pc, #68]	@ (800ab04 <pvPortMalloc+0x198>)
 800aabe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aac0:	f7fe fcec 	bl	800949c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <pvPortMalloc+0x17a>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60fb      	str	r3, [r7, #12]
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <pvPortMalloc+0x176>
	return pvReturn;
 800aae6:	69fb      	ldr	r3, [r7, #28]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3728      	adds	r7, #40	@ 0x28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20001fb0 	.word	0x20001fb0
 800aaf4:	20001fc4 	.word	0x20001fc4
 800aaf8:	20001fb4 	.word	0x20001fb4
 800aafc:	20001fa8 	.word	0x20001fa8
 800ab00:	20001fb8 	.word	0x20001fb8
 800ab04:	20001fbc 	.word	0x20001fbc

0800ab08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d04f      	beq.n	800abba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab1a:	2308      	movs	r3, #8
 800ab1c:	425b      	negs	r3, r3
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	4413      	add	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	4b25      	ldr	r3, [pc, #148]	@ (800abc4 <vPortFree+0xbc>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4013      	ands	r3, r2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10b      	bne.n	800ab4e <vPortFree+0x46>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	60fb      	str	r3, [r7, #12]
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	e7fd      	b.n	800ab4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00b      	beq.n	800ab6e <vPortFree+0x66>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60bb      	str	r3, [r7, #8]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	4b14      	ldr	r3, [pc, #80]	@ (800abc4 <vPortFree+0xbc>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4013      	ands	r3, r2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01e      	beq.n	800abba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d11a      	bne.n	800abba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	4b0e      	ldr	r3, [pc, #56]	@ (800abc4 <vPortFree+0xbc>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	43db      	mvns	r3, r3
 800ab8e:	401a      	ands	r2, r3
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab94:	f7fe fc74 	bl	8009480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	4b0a      	ldr	r3, [pc, #40]	@ (800abc8 <vPortFree+0xc0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4413      	add	r3, r2
 800aba2:	4a09      	ldr	r2, [pc, #36]	@ (800abc8 <vPortFree+0xc0>)
 800aba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aba6:	6938      	ldr	r0, [r7, #16]
 800aba8:	f000 f874 	bl	800ac94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abac:	4b07      	ldr	r3, [pc, #28]	@ (800abcc <vPortFree+0xc4>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3301      	adds	r3, #1
 800abb2:	4a06      	ldr	r2, [pc, #24]	@ (800abcc <vPortFree+0xc4>)
 800abb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abb6:	f7fe fc71 	bl	800949c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abba:	bf00      	nop
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20001fc4 	.word	0x20001fc4
 800abc8:	20001fb4 	.word	0x20001fb4
 800abcc:	20001fc0 	.word	0x20001fc0

0800abd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800abda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abdc:	4b27      	ldr	r3, [pc, #156]	@ (800ac7c <prvHeapInit+0xac>)
 800abde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00c      	beq.n	800ac04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3307      	adds	r3, #7
 800abee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f023 0307 	bic.w	r3, r3, #7
 800abf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	4a1f      	ldr	r2, [pc, #124]	@ (800ac7c <prvHeapInit+0xac>)
 800ac00:	4413      	add	r3, r2
 800ac02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac08:	4a1d      	ldr	r2, [pc, #116]	@ (800ac80 <prvHeapInit+0xb0>)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ac80 <prvHeapInit+0xb0>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	4413      	add	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0307 	bic.w	r3, r3, #7
 800ac2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4a15      	ldr	r2, [pc, #84]	@ (800ac84 <prvHeapInit+0xb4>)
 800ac30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac32:	4b14      	ldr	r3, [pc, #80]	@ (800ac84 <prvHeapInit+0xb4>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2200      	movs	r2, #0
 800ac38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac3a:	4b12      	ldr	r3, [pc, #72]	@ (800ac84 <prvHeapInit+0xb4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac50:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <prvHeapInit+0xb4>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac88 <prvHeapInit+0xb8>)
 800ac5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	4a09      	ldr	r2, [pc, #36]	@ (800ac8c <prvHeapInit+0xbc>)
 800ac66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac68:	4b09      	ldr	r3, [pc, #36]	@ (800ac90 <prvHeapInit+0xc0>)
 800ac6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac6e:	601a      	str	r2, [r3, #0]
}
 800ac70:	bf00      	nop
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	200013a8 	.word	0x200013a8
 800ac80:	20001fa8 	.word	0x20001fa8
 800ac84:	20001fb0 	.word	0x20001fb0
 800ac88:	20001fb8 	.word	0x20001fb8
 800ac8c:	20001fb4 	.word	0x20001fb4
 800ac90:	20001fc4 	.word	0x20001fc4

0800ac94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac9c:	4b28      	ldr	r3, [pc, #160]	@ (800ad40 <prvInsertBlockIntoFreeList+0xac>)
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	e002      	b.n	800aca8 <prvInsertBlockIntoFreeList+0x14>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d8f7      	bhi.n	800aca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	4413      	add	r3, r2
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d108      	bne.n	800acd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	441a      	add	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	441a      	add	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d118      	bne.n	800ad1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	4b15      	ldr	r3, [pc, #84]	@ (800ad44 <prvInsertBlockIntoFreeList+0xb0>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d00d      	beq.n	800ad12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	441a      	add	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	e008      	b.n	800ad24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad12:	4b0c      	ldr	r3, [pc, #48]	@ (800ad44 <prvInsertBlockIntoFreeList+0xb0>)
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	e003      	b.n	800ad24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d002      	beq.n	800ad32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad32:	bf00      	nop
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	20001fa8 	.word	0x20001fa8
 800ad44:	20001fb0 	.word	0x20001fb0

0800ad48 <__assert_func>:
 800ad48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad4a:	4614      	mov	r4, r2
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	4b09      	ldr	r3, [pc, #36]	@ (800ad74 <__assert_func+0x2c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4605      	mov	r5, r0
 800ad54:	68d8      	ldr	r0, [r3, #12]
 800ad56:	b14c      	cbz	r4, 800ad6c <__assert_func+0x24>
 800ad58:	4b07      	ldr	r3, [pc, #28]	@ (800ad78 <__assert_func+0x30>)
 800ad5a:	9100      	str	r1, [sp, #0]
 800ad5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad60:	4906      	ldr	r1, [pc, #24]	@ (800ad7c <__assert_func+0x34>)
 800ad62:	462b      	mov	r3, r5
 800ad64:	f000 fd08 	bl	800b778 <fiprintf>
 800ad68:	f000 ff0b 	bl	800bb82 <abort>
 800ad6c:	4b04      	ldr	r3, [pc, #16]	@ (800ad80 <__assert_func+0x38>)
 800ad6e:	461c      	mov	r4, r3
 800ad70:	e7f3      	b.n	800ad5a <__assert_func+0x12>
 800ad72:	bf00      	nop
 800ad74:	200001a4 	.word	0x200001a4
 800ad78:	0800db48 	.word	0x0800db48
 800ad7c:	0800db55 	.word	0x0800db55
 800ad80:	0800db83 	.word	0x0800db83

0800ad84 <__cvt>:
 800ad84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad88:	ec57 6b10 	vmov	r6, r7, d0
 800ad8c:	2f00      	cmp	r7, #0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	4619      	mov	r1, r3
 800ad92:	463b      	mov	r3, r7
 800ad94:	bfbb      	ittet	lt
 800ad96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad9a:	461f      	movlt	r7, r3
 800ad9c:	2300      	movge	r3, #0
 800ad9e:	232d      	movlt	r3, #45	@ 0x2d
 800ada0:	700b      	strb	r3, [r1, #0]
 800ada2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ada4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ada8:	4691      	mov	r9, r2
 800adaa:	f023 0820 	bic.w	r8, r3, #32
 800adae:	bfbc      	itt	lt
 800adb0:	4632      	movlt	r2, r6
 800adb2:	4616      	movlt	r6, r2
 800adb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adb8:	d005      	beq.n	800adc6 <__cvt+0x42>
 800adba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800adbe:	d100      	bne.n	800adc2 <__cvt+0x3e>
 800adc0:	3401      	adds	r4, #1
 800adc2:	2102      	movs	r1, #2
 800adc4:	e000      	b.n	800adc8 <__cvt+0x44>
 800adc6:	2103      	movs	r1, #3
 800adc8:	ab03      	add	r3, sp, #12
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	ab02      	add	r3, sp, #8
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	ec47 6b10 	vmov	d0, r6, r7
 800add4:	4653      	mov	r3, sl
 800add6:	4622      	mov	r2, r4
 800add8:	f000 ff62 	bl	800bca0 <_dtoa_r>
 800addc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ade0:	4605      	mov	r5, r0
 800ade2:	d119      	bne.n	800ae18 <__cvt+0x94>
 800ade4:	f019 0f01 	tst.w	r9, #1
 800ade8:	d00e      	beq.n	800ae08 <__cvt+0x84>
 800adea:	eb00 0904 	add.w	r9, r0, r4
 800adee:	2200      	movs	r2, #0
 800adf0:	2300      	movs	r3, #0
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800adfa:	b108      	cbz	r0, 800ae00 <__cvt+0x7c>
 800adfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae00:	2230      	movs	r2, #48	@ 0x30
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	454b      	cmp	r3, r9
 800ae06:	d31e      	bcc.n	800ae46 <__cvt+0xc2>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae0c:	1b5b      	subs	r3, r3, r5
 800ae0e:	4628      	mov	r0, r5
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	b004      	add	sp, #16
 800ae14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae1c:	eb00 0904 	add.w	r9, r0, r4
 800ae20:	d1e5      	bne.n	800adee <__cvt+0x6a>
 800ae22:	7803      	ldrb	r3, [r0, #0]
 800ae24:	2b30      	cmp	r3, #48	@ 0x30
 800ae26:	d10a      	bne.n	800ae3e <__cvt+0xba>
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae34:	b918      	cbnz	r0, 800ae3e <__cvt+0xba>
 800ae36:	f1c4 0401 	rsb	r4, r4, #1
 800ae3a:	f8ca 4000 	str.w	r4, [sl]
 800ae3e:	f8da 3000 	ldr.w	r3, [sl]
 800ae42:	4499      	add	r9, r3
 800ae44:	e7d3      	b.n	800adee <__cvt+0x6a>
 800ae46:	1c59      	adds	r1, r3, #1
 800ae48:	9103      	str	r1, [sp, #12]
 800ae4a:	701a      	strb	r2, [r3, #0]
 800ae4c:	e7d9      	b.n	800ae02 <__cvt+0x7e>

0800ae4e <__exponent>:
 800ae4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae50:	2900      	cmp	r1, #0
 800ae52:	bfba      	itte	lt
 800ae54:	4249      	neglt	r1, r1
 800ae56:	232d      	movlt	r3, #45	@ 0x2d
 800ae58:	232b      	movge	r3, #43	@ 0x2b
 800ae5a:	2909      	cmp	r1, #9
 800ae5c:	7002      	strb	r2, [r0, #0]
 800ae5e:	7043      	strb	r3, [r0, #1]
 800ae60:	dd29      	ble.n	800aeb6 <__exponent+0x68>
 800ae62:	f10d 0307 	add.w	r3, sp, #7
 800ae66:	461d      	mov	r5, r3
 800ae68:	270a      	movs	r7, #10
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae70:	fb07 1416 	mls	r4, r7, r6, r1
 800ae74:	3430      	adds	r4, #48	@ 0x30
 800ae76:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	2c63      	cmp	r4, #99	@ 0x63
 800ae7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae82:	4631      	mov	r1, r6
 800ae84:	dcf1      	bgt.n	800ae6a <__exponent+0x1c>
 800ae86:	3130      	adds	r1, #48	@ 0x30
 800ae88:	1e94      	subs	r4, r2, #2
 800ae8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae8e:	1c41      	adds	r1, r0, #1
 800ae90:	4623      	mov	r3, r4
 800ae92:	42ab      	cmp	r3, r5
 800ae94:	d30a      	bcc.n	800aeac <__exponent+0x5e>
 800ae96:	f10d 0309 	add.w	r3, sp, #9
 800ae9a:	1a9b      	subs	r3, r3, r2
 800ae9c:	42ac      	cmp	r4, r5
 800ae9e:	bf88      	it	hi
 800aea0:	2300      	movhi	r3, #0
 800aea2:	3302      	adds	r3, #2
 800aea4:	4403      	add	r3, r0
 800aea6:	1a18      	subs	r0, r3, r0
 800aea8:	b003      	add	sp, #12
 800aeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aeb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aeb4:	e7ed      	b.n	800ae92 <__exponent+0x44>
 800aeb6:	2330      	movs	r3, #48	@ 0x30
 800aeb8:	3130      	adds	r1, #48	@ 0x30
 800aeba:	7083      	strb	r3, [r0, #2]
 800aebc:	70c1      	strb	r1, [r0, #3]
 800aebe:	1d03      	adds	r3, r0, #4
 800aec0:	e7f1      	b.n	800aea6 <__exponent+0x58>
	...

0800aec4 <_printf_float>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	b08d      	sub	sp, #52	@ 0x34
 800aeca:	460c      	mov	r4, r1
 800aecc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aed0:	4616      	mov	r6, r2
 800aed2:	461f      	mov	r7, r3
 800aed4:	4605      	mov	r5, r0
 800aed6:	f000 fdcf 	bl	800ba78 <_localeconv_r>
 800aeda:	6803      	ldr	r3, [r0, #0]
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	4618      	mov	r0, r3
 800aee0:	f7f5 f9c6 	bl	8000270 <strlen>
 800aee4:	2300      	movs	r3, #0
 800aee6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aee8:	f8d8 3000 	ldr.w	r3, [r8]
 800aeec:	9005      	str	r0, [sp, #20]
 800aeee:	3307      	adds	r3, #7
 800aef0:	f023 0307 	bic.w	r3, r3, #7
 800aef4:	f103 0208 	add.w	r2, r3, #8
 800aef8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aefc:	f8d4 b000 	ldr.w	fp, [r4]
 800af00:	f8c8 2000 	str.w	r2, [r8]
 800af04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af0c:	9307      	str	r3, [sp, #28]
 800af0e:	f8cd 8018 	str.w	r8, [sp, #24]
 800af12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af1a:	4b9c      	ldr	r3, [pc, #624]	@ (800b18c <_printf_float+0x2c8>)
 800af1c:	f04f 32ff 	mov.w	r2, #4294967295
 800af20:	f7f5 fe04 	bl	8000b2c <__aeabi_dcmpun>
 800af24:	bb70      	cbnz	r0, 800af84 <_printf_float+0xc0>
 800af26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af2a:	4b98      	ldr	r3, [pc, #608]	@ (800b18c <_printf_float+0x2c8>)
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295
 800af30:	f7f5 fdde 	bl	8000af0 <__aeabi_dcmple>
 800af34:	bb30      	cbnz	r0, 800af84 <_printf_float+0xc0>
 800af36:	2200      	movs	r2, #0
 800af38:	2300      	movs	r3, #0
 800af3a:	4640      	mov	r0, r8
 800af3c:	4649      	mov	r1, r9
 800af3e:	f7f5 fdcd 	bl	8000adc <__aeabi_dcmplt>
 800af42:	b110      	cbz	r0, 800af4a <_printf_float+0x86>
 800af44:	232d      	movs	r3, #45	@ 0x2d
 800af46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af4a:	4a91      	ldr	r2, [pc, #580]	@ (800b190 <_printf_float+0x2cc>)
 800af4c:	4b91      	ldr	r3, [pc, #580]	@ (800b194 <_printf_float+0x2d0>)
 800af4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af52:	bf8c      	ite	hi
 800af54:	4690      	movhi	r8, r2
 800af56:	4698      	movls	r8, r3
 800af58:	2303      	movs	r3, #3
 800af5a:	6123      	str	r3, [r4, #16]
 800af5c:	f02b 0304 	bic.w	r3, fp, #4
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	f04f 0900 	mov.w	r9, #0
 800af66:	9700      	str	r7, [sp, #0]
 800af68:	4633      	mov	r3, r6
 800af6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af6c:	4621      	mov	r1, r4
 800af6e:	4628      	mov	r0, r5
 800af70:	f000 f9d2 	bl	800b318 <_printf_common>
 800af74:	3001      	adds	r0, #1
 800af76:	f040 808d 	bne.w	800b094 <_printf_float+0x1d0>
 800af7a:	f04f 30ff 	mov.w	r0, #4294967295
 800af7e:	b00d      	add	sp, #52	@ 0x34
 800af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af84:	4642      	mov	r2, r8
 800af86:	464b      	mov	r3, r9
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 fdce 	bl	8000b2c <__aeabi_dcmpun>
 800af90:	b140      	cbz	r0, 800afa4 <_printf_float+0xe0>
 800af92:	464b      	mov	r3, r9
 800af94:	2b00      	cmp	r3, #0
 800af96:	bfbc      	itt	lt
 800af98:	232d      	movlt	r3, #45	@ 0x2d
 800af9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af9e:	4a7e      	ldr	r2, [pc, #504]	@ (800b198 <_printf_float+0x2d4>)
 800afa0:	4b7e      	ldr	r3, [pc, #504]	@ (800b19c <_printf_float+0x2d8>)
 800afa2:	e7d4      	b.n	800af4e <_printf_float+0x8a>
 800afa4:	6863      	ldr	r3, [r4, #4]
 800afa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800afaa:	9206      	str	r2, [sp, #24]
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	d13b      	bne.n	800b028 <_printf_float+0x164>
 800afb0:	2306      	movs	r3, #6
 800afb2:	6063      	str	r3, [r4, #4]
 800afb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800afb8:	2300      	movs	r3, #0
 800afba:	6022      	str	r2, [r4, #0]
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	ab0a      	add	r3, sp, #40	@ 0x28
 800afc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800afc4:	ab09      	add	r3, sp, #36	@ 0x24
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	6861      	ldr	r1, [r4, #4]
 800afca:	ec49 8b10 	vmov	d0, r8, r9
 800afce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afd2:	4628      	mov	r0, r5
 800afd4:	f7ff fed6 	bl	800ad84 <__cvt>
 800afd8:	9b06      	ldr	r3, [sp, #24]
 800afda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afdc:	2b47      	cmp	r3, #71	@ 0x47
 800afde:	4680      	mov	r8, r0
 800afe0:	d129      	bne.n	800b036 <_printf_float+0x172>
 800afe2:	1cc8      	adds	r0, r1, #3
 800afe4:	db02      	blt.n	800afec <_printf_float+0x128>
 800afe6:	6863      	ldr	r3, [r4, #4]
 800afe8:	4299      	cmp	r1, r3
 800afea:	dd41      	ble.n	800b070 <_printf_float+0x1ac>
 800afec:	f1aa 0a02 	sub.w	sl, sl, #2
 800aff0:	fa5f fa8a 	uxtb.w	sl, sl
 800aff4:	3901      	subs	r1, #1
 800aff6:	4652      	mov	r2, sl
 800aff8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800affc:	9109      	str	r1, [sp, #36]	@ 0x24
 800affe:	f7ff ff26 	bl	800ae4e <__exponent>
 800b002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b004:	1813      	adds	r3, r2, r0
 800b006:	2a01      	cmp	r2, #1
 800b008:	4681      	mov	r9, r0
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	dc02      	bgt.n	800b014 <_printf_float+0x150>
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	07d2      	lsls	r2, r2, #31
 800b012:	d501      	bpl.n	800b018 <_printf_float+0x154>
 800b014:	3301      	adds	r3, #1
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0a2      	beq.n	800af66 <_printf_float+0xa2>
 800b020:	232d      	movs	r3, #45	@ 0x2d
 800b022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b026:	e79e      	b.n	800af66 <_printf_float+0xa2>
 800b028:	9a06      	ldr	r2, [sp, #24]
 800b02a:	2a47      	cmp	r2, #71	@ 0x47
 800b02c:	d1c2      	bne.n	800afb4 <_printf_float+0xf0>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1c0      	bne.n	800afb4 <_printf_float+0xf0>
 800b032:	2301      	movs	r3, #1
 800b034:	e7bd      	b.n	800afb2 <_printf_float+0xee>
 800b036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b03a:	d9db      	bls.n	800aff4 <_printf_float+0x130>
 800b03c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b040:	d118      	bne.n	800b074 <_printf_float+0x1b0>
 800b042:	2900      	cmp	r1, #0
 800b044:	6863      	ldr	r3, [r4, #4]
 800b046:	dd0b      	ble.n	800b060 <_printf_float+0x19c>
 800b048:	6121      	str	r1, [r4, #16]
 800b04a:	b913      	cbnz	r3, 800b052 <_printf_float+0x18e>
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	07d0      	lsls	r0, r2, #31
 800b050:	d502      	bpl.n	800b058 <_printf_float+0x194>
 800b052:	3301      	adds	r3, #1
 800b054:	440b      	add	r3, r1
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b05a:	f04f 0900 	mov.w	r9, #0
 800b05e:	e7db      	b.n	800b018 <_printf_float+0x154>
 800b060:	b913      	cbnz	r3, 800b068 <_printf_float+0x1a4>
 800b062:	6822      	ldr	r2, [r4, #0]
 800b064:	07d2      	lsls	r2, r2, #31
 800b066:	d501      	bpl.n	800b06c <_printf_float+0x1a8>
 800b068:	3302      	adds	r3, #2
 800b06a:	e7f4      	b.n	800b056 <_printf_float+0x192>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e7f2      	b.n	800b056 <_printf_float+0x192>
 800b070:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b076:	4299      	cmp	r1, r3
 800b078:	db05      	blt.n	800b086 <_printf_float+0x1c2>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	6121      	str	r1, [r4, #16]
 800b07e:	07d8      	lsls	r0, r3, #31
 800b080:	d5ea      	bpl.n	800b058 <_printf_float+0x194>
 800b082:	1c4b      	adds	r3, r1, #1
 800b084:	e7e7      	b.n	800b056 <_printf_float+0x192>
 800b086:	2900      	cmp	r1, #0
 800b088:	bfd4      	ite	le
 800b08a:	f1c1 0202 	rsble	r2, r1, #2
 800b08e:	2201      	movgt	r2, #1
 800b090:	4413      	add	r3, r2
 800b092:	e7e0      	b.n	800b056 <_printf_float+0x192>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	055a      	lsls	r2, r3, #21
 800b098:	d407      	bmi.n	800b0aa <_printf_float+0x1e6>
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	4642      	mov	r2, r8
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b8      	blx	r7
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d12b      	bne.n	800b100 <_printf_float+0x23c>
 800b0a8:	e767      	b.n	800af7a <_printf_float+0xb6>
 800b0aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0ae:	f240 80dd 	bls.w	800b26c <_printf_float+0x3a8>
 800b0b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f7f5 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d033      	beq.n	800b12a <_printf_float+0x266>
 800b0c2:	4a37      	ldr	r2, [pc, #220]	@ (800b1a0 <_printf_float+0x2dc>)
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f af54 	beq.w	800af7a <_printf_float+0xb6>
 800b0d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0d6:	4543      	cmp	r3, r8
 800b0d8:	db02      	blt.n	800b0e0 <_printf_float+0x21c>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	07d8      	lsls	r0, r3, #31
 800b0de:	d50f      	bpl.n	800b100 <_printf_float+0x23c>
 800b0e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	47b8      	blx	r7
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	f43f af45 	beq.w	800af7a <_printf_float+0xb6>
 800b0f0:	f04f 0900 	mov.w	r9, #0
 800b0f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0f8:	f104 0a1a 	add.w	sl, r4, #26
 800b0fc:	45c8      	cmp	r8, r9
 800b0fe:	dc09      	bgt.n	800b114 <_printf_float+0x250>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	079b      	lsls	r3, r3, #30
 800b104:	f100 8103 	bmi.w	800b30e <_printf_float+0x44a>
 800b108:	68e0      	ldr	r0, [r4, #12]
 800b10a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b10c:	4298      	cmp	r0, r3
 800b10e:	bfb8      	it	lt
 800b110:	4618      	movlt	r0, r3
 800b112:	e734      	b.n	800af7e <_printf_float+0xba>
 800b114:	2301      	movs	r3, #1
 800b116:	4652      	mov	r2, sl
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b8      	blx	r7
 800b11e:	3001      	adds	r0, #1
 800b120:	f43f af2b 	beq.w	800af7a <_printf_float+0xb6>
 800b124:	f109 0901 	add.w	r9, r9, #1
 800b128:	e7e8      	b.n	800b0fc <_printf_float+0x238>
 800b12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc39      	bgt.n	800b1a4 <_printf_float+0x2e0>
 800b130:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a0 <_printf_float+0x2dc>)
 800b132:	2301      	movs	r3, #1
 800b134:	4631      	mov	r1, r6
 800b136:	4628      	mov	r0, r5
 800b138:	47b8      	blx	r7
 800b13a:	3001      	adds	r0, #1
 800b13c:	f43f af1d 	beq.w	800af7a <_printf_float+0xb6>
 800b140:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b144:	ea59 0303 	orrs.w	r3, r9, r3
 800b148:	d102      	bne.n	800b150 <_printf_float+0x28c>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	07d9      	lsls	r1, r3, #31
 800b14e:	d5d7      	bpl.n	800b100 <_printf_float+0x23c>
 800b150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b154:	4631      	mov	r1, r6
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	f43f af0d 	beq.w	800af7a <_printf_float+0xb6>
 800b160:	f04f 0a00 	mov.w	sl, #0
 800b164:	f104 0b1a 	add.w	fp, r4, #26
 800b168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b16a:	425b      	negs	r3, r3
 800b16c:	4553      	cmp	r3, sl
 800b16e:	dc01      	bgt.n	800b174 <_printf_float+0x2b0>
 800b170:	464b      	mov	r3, r9
 800b172:	e793      	b.n	800b09c <_printf_float+0x1d8>
 800b174:	2301      	movs	r3, #1
 800b176:	465a      	mov	r2, fp
 800b178:	4631      	mov	r1, r6
 800b17a:	4628      	mov	r0, r5
 800b17c:	47b8      	blx	r7
 800b17e:	3001      	adds	r0, #1
 800b180:	f43f aefb 	beq.w	800af7a <_printf_float+0xb6>
 800b184:	f10a 0a01 	add.w	sl, sl, #1
 800b188:	e7ee      	b.n	800b168 <_printf_float+0x2a4>
 800b18a:	bf00      	nop
 800b18c:	7fefffff 	.word	0x7fefffff
 800b190:	0800db88 	.word	0x0800db88
 800b194:	0800db84 	.word	0x0800db84
 800b198:	0800db90 	.word	0x0800db90
 800b19c:	0800db8c 	.word	0x0800db8c
 800b1a0:	0800db94 	.word	0x0800db94
 800b1a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1aa:	4553      	cmp	r3, sl
 800b1ac:	bfa8      	it	ge
 800b1ae:	4653      	movge	r3, sl
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	4699      	mov	r9, r3
 800b1b4:	dc36      	bgt.n	800b224 <_printf_float+0x360>
 800b1b6:	f04f 0b00 	mov.w	fp, #0
 800b1ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1be:	f104 021a 	add.w	r2, r4, #26
 800b1c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1c4:	9306      	str	r3, [sp, #24]
 800b1c6:	eba3 0309 	sub.w	r3, r3, r9
 800b1ca:	455b      	cmp	r3, fp
 800b1cc:	dc31      	bgt.n	800b232 <_printf_float+0x36e>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	459a      	cmp	sl, r3
 800b1d2:	dc3a      	bgt.n	800b24a <_printf_float+0x386>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	07da      	lsls	r2, r3, #31
 800b1d8:	d437      	bmi.n	800b24a <_printf_float+0x386>
 800b1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1dc:	ebaa 0903 	sub.w	r9, sl, r3
 800b1e0:	9b06      	ldr	r3, [sp, #24]
 800b1e2:	ebaa 0303 	sub.w	r3, sl, r3
 800b1e6:	4599      	cmp	r9, r3
 800b1e8:	bfa8      	it	ge
 800b1ea:	4699      	movge	r9, r3
 800b1ec:	f1b9 0f00 	cmp.w	r9, #0
 800b1f0:	dc33      	bgt.n	800b25a <_printf_float+0x396>
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1fa:	f104 0b1a 	add.w	fp, r4, #26
 800b1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b200:	ebaa 0303 	sub.w	r3, sl, r3
 800b204:	eba3 0309 	sub.w	r3, r3, r9
 800b208:	4543      	cmp	r3, r8
 800b20a:	f77f af79 	ble.w	800b100 <_printf_float+0x23c>
 800b20e:	2301      	movs	r3, #1
 800b210:	465a      	mov	r2, fp
 800b212:	4631      	mov	r1, r6
 800b214:	4628      	mov	r0, r5
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	f43f aeae 	beq.w	800af7a <_printf_float+0xb6>
 800b21e:	f108 0801 	add.w	r8, r8, #1
 800b222:	e7ec      	b.n	800b1fe <_printf_float+0x33a>
 800b224:	4642      	mov	r2, r8
 800b226:	4631      	mov	r1, r6
 800b228:	4628      	mov	r0, r5
 800b22a:	47b8      	blx	r7
 800b22c:	3001      	adds	r0, #1
 800b22e:	d1c2      	bne.n	800b1b6 <_printf_float+0x2f2>
 800b230:	e6a3      	b.n	800af7a <_printf_float+0xb6>
 800b232:	2301      	movs	r3, #1
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	9206      	str	r2, [sp, #24]
 800b23a:	47b8      	blx	r7
 800b23c:	3001      	adds	r0, #1
 800b23e:	f43f ae9c 	beq.w	800af7a <_printf_float+0xb6>
 800b242:	9a06      	ldr	r2, [sp, #24]
 800b244:	f10b 0b01 	add.w	fp, fp, #1
 800b248:	e7bb      	b.n	800b1c2 <_printf_float+0x2fe>
 800b24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	d1c0      	bne.n	800b1da <_printf_float+0x316>
 800b258:	e68f      	b.n	800af7a <_printf_float+0xb6>
 800b25a:	9a06      	ldr	r2, [sp, #24]
 800b25c:	464b      	mov	r3, r9
 800b25e:	4442      	add	r2, r8
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	d1c3      	bne.n	800b1f2 <_printf_float+0x32e>
 800b26a:	e686      	b.n	800af7a <_printf_float+0xb6>
 800b26c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b270:	f1ba 0f01 	cmp.w	sl, #1
 800b274:	dc01      	bgt.n	800b27a <_printf_float+0x3b6>
 800b276:	07db      	lsls	r3, r3, #31
 800b278:	d536      	bpl.n	800b2e8 <_printf_float+0x424>
 800b27a:	2301      	movs	r3, #1
 800b27c:	4642      	mov	r2, r8
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	f43f ae78 	beq.w	800af7a <_printf_float+0xb6>
 800b28a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	f43f ae70 	beq.w	800af7a <_printf_float+0xb6>
 800b29a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2a6:	f7f5 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2aa:	b9c0      	cbnz	r0, 800b2de <_printf_float+0x41a>
 800b2ac:	4653      	mov	r3, sl
 800b2ae:	f108 0201 	add.w	r2, r8, #1
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d10c      	bne.n	800b2d6 <_printf_float+0x412>
 800b2bc:	e65d      	b.n	800af7a <_printf_float+0xb6>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	465a      	mov	r2, fp
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	f43f ae56 	beq.w	800af7a <_printf_float+0xb6>
 800b2ce:	f108 0801 	add.w	r8, r8, #1
 800b2d2:	45d0      	cmp	r8, sl
 800b2d4:	dbf3      	blt.n	800b2be <_printf_float+0x3fa>
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2dc:	e6df      	b.n	800b09e <_printf_float+0x1da>
 800b2de:	f04f 0800 	mov.w	r8, #0
 800b2e2:	f104 0b1a 	add.w	fp, r4, #26
 800b2e6:	e7f4      	b.n	800b2d2 <_printf_float+0x40e>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4642      	mov	r2, r8
 800b2ec:	e7e1      	b.n	800b2b2 <_printf_float+0x3ee>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	464a      	mov	r2, r9
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	47b8      	blx	r7
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	f43f ae3e 	beq.w	800af7a <_printf_float+0xb6>
 800b2fe:	f108 0801 	add.w	r8, r8, #1
 800b302:	68e3      	ldr	r3, [r4, #12]
 800b304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b306:	1a5b      	subs	r3, r3, r1
 800b308:	4543      	cmp	r3, r8
 800b30a:	dcf0      	bgt.n	800b2ee <_printf_float+0x42a>
 800b30c:	e6fc      	b.n	800b108 <_printf_float+0x244>
 800b30e:	f04f 0800 	mov.w	r8, #0
 800b312:	f104 0919 	add.w	r9, r4, #25
 800b316:	e7f4      	b.n	800b302 <_printf_float+0x43e>

0800b318 <_printf_common>:
 800b318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	4616      	mov	r6, r2
 800b31e:	4698      	mov	r8, r3
 800b320:	688a      	ldr	r2, [r1, #8]
 800b322:	690b      	ldr	r3, [r1, #16]
 800b324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b328:	4293      	cmp	r3, r2
 800b32a:	bfb8      	it	lt
 800b32c:	4613      	movlt	r3, r2
 800b32e:	6033      	str	r3, [r6, #0]
 800b330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b334:	4607      	mov	r7, r0
 800b336:	460c      	mov	r4, r1
 800b338:	b10a      	cbz	r2, 800b33e <_printf_common+0x26>
 800b33a:	3301      	adds	r3, #1
 800b33c:	6033      	str	r3, [r6, #0]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	0699      	lsls	r1, r3, #26
 800b342:	bf42      	ittt	mi
 800b344:	6833      	ldrmi	r3, [r6, #0]
 800b346:	3302      	addmi	r3, #2
 800b348:	6033      	strmi	r3, [r6, #0]
 800b34a:	6825      	ldr	r5, [r4, #0]
 800b34c:	f015 0506 	ands.w	r5, r5, #6
 800b350:	d106      	bne.n	800b360 <_printf_common+0x48>
 800b352:	f104 0a19 	add.w	sl, r4, #25
 800b356:	68e3      	ldr	r3, [r4, #12]
 800b358:	6832      	ldr	r2, [r6, #0]
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	dc26      	bgt.n	800b3ae <_printf_common+0x96>
 800b360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b364:	6822      	ldr	r2, [r4, #0]
 800b366:	3b00      	subs	r3, #0
 800b368:	bf18      	it	ne
 800b36a:	2301      	movne	r3, #1
 800b36c:	0692      	lsls	r2, r2, #26
 800b36e:	d42b      	bmi.n	800b3c8 <_printf_common+0xb0>
 800b370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b374:	4641      	mov	r1, r8
 800b376:	4638      	mov	r0, r7
 800b378:	47c8      	blx	r9
 800b37a:	3001      	adds	r0, #1
 800b37c:	d01e      	beq.n	800b3bc <_printf_common+0xa4>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	6922      	ldr	r2, [r4, #16]
 800b382:	f003 0306 	and.w	r3, r3, #6
 800b386:	2b04      	cmp	r3, #4
 800b388:	bf02      	ittt	eq
 800b38a:	68e5      	ldreq	r5, [r4, #12]
 800b38c:	6833      	ldreq	r3, [r6, #0]
 800b38e:	1aed      	subeq	r5, r5, r3
 800b390:	68a3      	ldr	r3, [r4, #8]
 800b392:	bf0c      	ite	eq
 800b394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b398:	2500      	movne	r5, #0
 800b39a:	4293      	cmp	r3, r2
 800b39c:	bfc4      	itt	gt
 800b39e:	1a9b      	subgt	r3, r3, r2
 800b3a0:	18ed      	addgt	r5, r5, r3
 800b3a2:	2600      	movs	r6, #0
 800b3a4:	341a      	adds	r4, #26
 800b3a6:	42b5      	cmp	r5, r6
 800b3a8:	d11a      	bne.n	800b3e0 <_printf_common+0xc8>
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e008      	b.n	800b3c0 <_printf_common+0xa8>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	47c8      	blx	r9
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d103      	bne.n	800b3c4 <_printf_common+0xac>
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	e7c6      	b.n	800b356 <_printf_common+0x3e>
 800b3c8:	18e1      	adds	r1, r4, r3
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	2030      	movs	r0, #48	@ 0x30
 800b3ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3d2:	4422      	add	r2, r4
 800b3d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3dc:	3302      	adds	r3, #2
 800b3de:	e7c7      	b.n	800b370 <_printf_common+0x58>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	4641      	mov	r1, r8
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	47c8      	blx	r9
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d0e6      	beq.n	800b3bc <_printf_common+0xa4>
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7d9      	b.n	800b3a6 <_printf_common+0x8e>
	...

0800b3f4 <_printf_i>:
 800b3f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f8:	7e0f      	ldrb	r7, [r1, #24]
 800b3fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3fc:	2f78      	cmp	r7, #120	@ 0x78
 800b3fe:	4691      	mov	r9, r2
 800b400:	4680      	mov	r8, r0
 800b402:	460c      	mov	r4, r1
 800b404:	469a      	mov	sl, r3
 800b406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b40a:	d807      	bhi.n	800b41c <_printf_i+0x28>
 800b40c:	2f62      	cmp	r7, #98	@ 0x62
 800b40e:	d80a      	bhi.n	800b426 <_printf_i+0x32>
 800b410:	2f00      	cmp	r7, #0
 800b412:	f000 80d1 	beq.w	800b5b8 <_printf_i+0x1c4>
 800b416:	2f58      	cmp	r7, #88	@ 0x58
 800b418:	f000 80b8 	beq.w	800b58c <_printf_i+0x198>
 800b41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b424:	e03a      	b.n	800b49c <_printf_i+0xa8>
 800b426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b42a:	2b15      	cmp	r3, #21
 800b42c:	d8f6      	bhi.n	800b41c <_printf_i+0x28>
 800b42e:	a101      	add	r1, pc, #4	@ (adr r1, 800b434 <_printf_i+0x40>)
 800b430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b434:	0800b48d 	.word	0x0800b48d
 800b438:	0800b4a1 	.word	0x0800b4a1
 800b43c:	0800b41d 	.word	0x0800b41d
 800b440:	0800b41d 	.word	0x0800b41d
 800b444:	0800b41d 	.word	0x0800b41d
 800b448:	0800b41d 	.word	0x0800b41d
 800b44c:	0800b4a1 	.word	0x0800b4a1
 800b450:	0800b41d 	.word	0x0800b41d
 800b454:	0800b41d 	.word	0x0800b41d
 800b458:	0800b41d 	.word	0x0800b41d
 800b45c:	0800b41d 	.word	0x0800b41d
 800b460:	0800b59f 	.word	0x0800b59f
 800b464:	0800b4cb 	.word	0x0800b4cb
 800b468:	0800b559 	.word	0x0800b559
 800b46c:	0800b41d 	.word	0x0800b41d
 800b470:	0800b41d 	.word	0x0800b41d
 800b474:	0800b5c1 	.word	0x0800b5c1
 800b478:	0800b41d 	.word	0x0800b41d
 800b47c:	0800b4cb 	.word	0x0800b4cb
 800b480:	0800b41d 	.word	0x0800b41d
 800b484:	0800b41d 	.word	0x0800b41d
 800b488:	0800b561 	.word	0x0800b561
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	1d1a      	adds	r2, r3, #4
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6032      	str	r2, [r6, #0]
 800b494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b49c:	2301      	movs	r3, #1
 800b49e:	e09c      	b.n	800b5da <_printf_i+0x1e6>
 800b4a0:	6833      	ldr	r3, [r6, #0]
 800b4a2:	6820      	ldr	r0, [r4, #0]
 800b4a4:	1d19      	adds	r1, r3, #4
 800b4a6:	6031      	str	r1, [r6, #0]
 800b4a8:	0606      	lsls	r6, r0, #24
 800b4aa:	d501      	bpl.n	800b4b0 <_printf_i+0xbc>
 800b4ac:	681d      	ldr	r5, [r3, #0]
 800b4ae:	e003      	b.n	800b4b8 <_printf_i+0xc4>
 800b4b0:	0645      	lsls	r5, r0, #25
 800b4b2:	d5fb      	bpl.n	800b4ac <_printf_i+0xb8>
 800b4b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	da03      	bge.n	800b4c4 <_printf_i+0xd0>
 800b4bc:	232d      	movs	r3, #45	@ 0x2d
 800b4be:	426d      	negs	r5, r5
 800b4c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4c4:	4858      	ldr	r0, [pc, #352]	@ (800b628 <_printf_i+0x234>)
 800b4c6:	230a      	movs	r3, #10
 800b4c8:	e011      	b.n	800b4ee <_printf_i+0xfa>
 800b4ca:	6821      	ldr	r1, [r4, #0]
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	0608      	lsls	r0, r1, #24
 800b4d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4d4:	d402      	bmi.n	800b4dc <_printf_i+0xe8>
 800b4d6:	0649      	lsls	r1, r1, #25
 800b4d8:	bf48      	it	mi
 800b4da:	b2ad      	uxthmi	r5, r5
 800b4dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4de:	4852      	ldr	r0, [pc, #328]	@ (800b628 <_printf_i+0x234>)
 800b4e0:	6033      	str	r3, [r6, #0]
 800b4e2:	bf14      	ite	ne
 800b4e4:	230a      	movne	r3, #10
 800b4e6:	2308      	moveq	r3, #8
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4ee:	6866      	ldr	r6, [r4, #4]
 800b4f0:	60a6      	str	r6, [r4, #8]
 800b4f2:	2e00      	cmp	r6, #0
 800b4f4:	db05      	blt.n	800b502 <_printf_i+0x10e>
 800b4f6:	6821      	ldr	r1, [r4, #0]
 800b4f8:	432e      	orrs	r6, r5
 800b4fa:	f021 0104 	bic.w	r1, r1, #4
 800b4fe:	6021      	str	r1, [r4, #0]
 800b500:	d04b      	beq.n	800b59a <_printf_i+0x1a6>
 800b502:	4616      	mov	r6, r2
 800b504:	fbb5 f1f3 	udiv	r1, r5, r3
 800b508:	fb03 5711 	mls	r7, r3, r1, r5
 800b50c:	5dc7      	ldrb	r7, [r0, r7]
 800b50e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b512:	462f      	mov	r7, r5
 800b514:	42bb      	cmp	r3, r7
 800b516:	460d      	mov	r5, r1
 800b518:	d9f4      	bls.n	800b504 <_printf_i+0x110>
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d10b      	bne.n	800b536 <_printf_i+0x142>
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	07df      	lsls	r7, r3, #31
 800b522:	d508      	bpl.n	800b536 <_printf_i+0x142>
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	6861      	ldr	r1, [r4, #4]
 800b528:	4299      	cmp	r1, r3
 800b52a:	bfde      	ittt	le
 800b52c:	2330      	movle	r3, #48	@ 0x30
 800b52e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b532:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b536:	1b92      	subs	r2, r2, r6
 800b538:	6122      	str	r2, [r4, #16]
 800b53a:	f8cd a000 	str.w	sl, [sp]
 800b53e:	464b      	mov	r3, r9
 800b540:	aa03      	add	r2, sp, #12
 800b542:	4621      	mov	r1, r4
 800b544:	4640      	mov	r0, r8
 800b546:	f7ff fee7 	bl	800b318 <_printf_common>
 800b54a:	3001      	adds	r0, #1
 800b54c:	d14a      	bne.n	800b5e4 <_printf_i+0x1f0>
 800b54e:	f04f 30ff 	mov.w	r0, #4294967295
 800b552:	b004      	add	sp, #16
 800b554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	f043 0320 	orr.w	r3, r3, #32
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	4832      	ldr	r0, [pc, #200]	@ (800b62c <_printf_i+0x238>)
 800b562:	2778      	movs	r7, #120	@ 0x78
 800b564:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	6831      	ldr	r1, [r6, #0]
 800b56c:	061f      	lsls	r7, r3, #24
 800b56e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b572:	d402      	bmi.n	800b57a <_printf_i+0x186>
 800b574:	065f      	lsls	r7, r3, #25
 800b576:	bf48      	it	mi
 800b578:	b2ad      	uxthmi	r5, r5
 800b57a:	6031      	str	r1, [r6, #0]
 800b57c:	07d9      	lsls	r1, r3, #31
 800b57e:	bf44      	itt	mi
 800b580:	f043 0320 	orrmi.w	r3, r3, #32
 800b584:	6023      	strmi	r3, [r4, #0]
 800b586:	b11d      	cbz	r5, 800b590 <_printf_i+0x19c>
 800b588:	2310      	movs	r3, #16
 800b58a:	e7ad      	b.n	800b4e8 <_printf_i+0xf4>
 800b58c:	4826      	ldr	r0, [pc, #152]	@ (800b628 <_printf_i+0x234>)
 800b58e:	e7e9      	b.n	800b564 <_printf_i+0x170>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	f023 0320 	bic.w	r3, r3, #32
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	e7f6      	b.n	800b588 <_printf_i+0x194>
 800b59a:	4616      	mov	r6, r2
 800b59c:	e7bd      	b.n	800b51a <_printf_i+0x126>
 800b59e:	6833      	ldr	r3, [r6, #0]
 800b5a0:	6825      	ldr	r5, [r4, #0]
 800b5a2:	6961      	ldr	r1, [r4, #20]
 800b5a4:	1d18      	adds	r0, r3, #4
 800b5a6:	6030      	str	r0, [r6, #0]
 800b5a8:	062e      	lsls	r6, r5, #24
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	d501      	bpl.n	800b5b2 <_printf_i+0x1be>
 800b5ae:	6019      	str	r1, [r3, #0]
 800b5b0:	e002      	b.n	800b5b8 <_printf_i+0x1c4>
 800b5b2:	0668      	lsls	r0, r5, #25
 800b5b4:	d5fb      	bpl.n	800b5ae <_printf_i+0x1ba>
 800b5b6:	8019      	strh	r1, [r3, #0]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6123      	str	r3, [r4, #16]
 800b5bc:	4616      	mov	r6, r2
 800b5be:	e7bc      	b.n	800b53a <_printf_i+0x146>
 800b5c0:	6833      	ldr	r3, [r6, #0]
 800b5c2:	1d1a      	adds	r2, r3, #4
 800b5c4:	6032      	str	r2, [r6, #0]
 800b5c6:	681e      	ldr	r6, [r3, #0]
 800b5c8:	6862      	ldr	r2, [r4, #4]
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7f4 fdff 	bl	80001d0 <memchr>
 800b5d2:	b108      	cbz	r0, 800b5d8 <_printf_i+0x1e4>
 800b5d4:	1b80      	subs	r0, r0, r6
 800b5d6:	6060      	str	r0, [r4, #4]
 800b5d8:	6863      	ldr	r3, [r4, #4]
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5e2:	e7aa      	b.n	800b53a <_printf_i+0x146>
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	47d0      	blx	sl
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d0ad      	beq.n	800b54e <_printf_i+0x15a>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	079b      	lsls	r3, r3, #30
 800b5f6:	d413      	bmi.n	800b620 <_printf_i+0x22c>
 800b5f8:	68e0      	ldr	r0, [r4, #12]
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	4298      	cmp	r0, r3
 800b5fe:	bfb8      	it	lt
 800b600:	4618      	movlt	r0, r3
 800b602:	e7a6      	b.n	800b552 <_printf_i+0x15e>
 800b604:	2301      	movs	r3, #1
 800b606:	4632      	mov	r2, r6
 800b608:	4649      	mov	r1, r9
 800b60a:	4640      	mov	r0, r8
 800b60c:	47d0      	blx	sl
 800b60e:	3001      	adds	r0, #1
 800b610:	d09d      	beq.n	800b54e <_printf_i+0x15a>
 800b612:	3501      	adds	r5, #1
 800b614:	68e3      	ldr	r3, [r4, #12]
 800b616:	9903      	ldr	r1, [sp, #12]
 800b618:	1a5b      	subs	r3, r3, r1
 800b61a:	42ab      	cmp	r3, r5
 800b61c:	dcf2      	bgt.n	800b604 <_printf_i+0x210>
 800b61e:	e7eb      	b.n	800b5f8 <_printf_i+0x204>
 800b620:	2500      	movs	r5, #0
 800b622:	f104 0619 	add.w	r6, r4, #25
 800b626:	e7f5      	b.n	800b614 <_printf_i+0x220>
 800b628:	0800db96 	.word	0x0800db96
 800b62c:	0800dba7 	.word	0x0800dba7

0800b630 <std>:
 800b630:	2300      	movs	r3, #0
 800b632:	b510      	push	{r4, lr}
 800b634:	4604      	mov	r4, r0
 800b636:	e9c0 3300 	strd	r3, r3, [r0]
 800b63a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b63e:	6083      	str	r3, [r0, #8]
 800b640:	8181      	strh	r1, [r0, #12]
 800b642:	6643      	str	r3, [r0, #100]	@ 0x64
 800b644:	81c2      	strh	r2, [r0, #14]
 800b646:	6183      	str	r3, [r0, #24]
 800b648:	4619      	mov	r1, r3
 800b64a:	2208      	movs	r2, #8
 800b64c:	305c      	adds	r0, #92	@ 0x5c
 800b64e:	f000 fa0b 	bl	800ba68 <memset>
 800b652:	4b0d      	ldr	r3, [pc, #52]	@ (800b688 <std+0x58>)
 800b654:	6263      	str	r3, [r4, #36]	@ 0x24
 800b656:	4b0d      	ldr	r3, [pc, #52]	@ (800b68c <std+0x5c>)
 800b658:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b65a:	4b0d      	ldr	r3, [pc, #52]	@ (800b690 <std+0x60>)
 800b65c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b65e:	4b0d      	ldr	r3, [pc, #52]	@ (800b694 <std+0x64>)
 800b660:	6323      	str	r3, [r4, #48]	@ 0x30
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <std+0x68>)
 800b664:	6224      	str	r4, [r4, #32]
 800b666:	429c      	cmp	r4, r3
 800b668:	d006      	beq.n	800b678 <std+0x48>
 800b66a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b66e:	4294      	cmp	r4, r2
 800b670:	d002      	beq.n	800b678 <std+0x48>
 800b672:	33d0      	adds	r3, #208	@ 0xd0
 800b674:	429c      	cmp	r4, r3
 800b676:	d105      	bne.n	800b684 <std+0x54>
 800b678:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b680:	f000 ba6e 	b.w	800bb60 <__retarget_lock_init_recursive>
 800b684:	bd10      	pop	{r4, pc}
 800b686:	bf00      	nop
 800b688:	0800b8b9 	.word	0x0800b8b9
 800b68c:	0800b8db 	.word	0x0800b8db
 800b690:	0800b913 	.word	0x0800b913
 800b694:	0800b937 	.word	0x0800b937
 800b698:	20001fc8 	.word	0x20001fc8

0800b69c <stdio_exit_handler>:
 800b69c:	4a02      	ldr	r2, [pc, #8]	@ (800b6a8 <stdio_exit_handler+0xc>)
 800b69e:	4903      	ldr	r1, [pc, #12]	@ (800b6ac <stdio_exit_handler+0x10>)
 800b6a0:	4803      	ldr	r0, [pc, #12]	@ (800b6b0 <stdio_exit_handler+0x14>)
 800b6a2:	f000 b87b 	b.w	800b79c <_fwalk_sglue>
 800b6a6:	bf00      	nop
 800b6a8:	20000198 	.word	0x20000198
 800b6ac:	0800d4c1 	.word	0x0800d4c1
 800b6b0:	200001a8 	.word	0x200001a8

0800b6b4 <cleanup_stdio>:
 800b6b4:	6841      	ldr	r1, [r0, #4]
 800b6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e8 <cleanup_stdio+0x34>)
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	4604      	mov	r4, r0
 800b6be:	d001      	beq.n	800b6c4 <cleanup_stdio+0x10>
 800b6c0:	f001 fefe 	bl	800d4c0 <_fflush_r>
 800b6c4:	68a1      	ldr	r1, [r4, #8]
 800b6c6:	4b09      	ldr	r3, [pc, #36]	@ (800b6ec <cleanup_stdio+0x38>)
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	d002      	beq.n	800b6d2 <cleanup_stdio+0x1e>
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f001 fef7 	bl	800d4c0 <_fflush_r>
 800b6d2:	68e1      	ldr	r1, [r4, #12]
 800b6d4:	4b06      	ldr	r3, [pc, #24]	@ (800b6f0 <cleanup_stdio+0x3c>)
 800b6d6:	4299      	cmp	r1, r3
 800b6d8:	d004      	beq.n	800b6e4 <cleanup_stdio+0x30>
 800b6da:	4620      	mov	r0, r4
 800b6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e0:	f001 beee 	b.w	800d4c0 <_fflush_r>
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20001fc8 	.word	0x20001fc8
 800b6ec:	20002030 	.word	0x20002030
 800b6f0:	20002098 	.word	0x20002098

0800b6f4 <global_stdio_init.part.0>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b724 <global_stdio_init.part.0+0x30>)
 800b6f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b728 <global_stdio_init.part.0+0x34>)
 800b6fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b72c <global_stdio_init.part.0+0x38>)
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	4620      	mov	r0, r4
 800b700:	2200      	movs	r2, #0
 800b702:	2104      	movs	r1, #4
 800b704:	f7ff ff94 	bl	800b630 <std>
 800b708:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b70c:	2201      	movs	r2, #1
 800b70e:	2109      	movs	r1, #9
 800b710:	f7ff ff8e 	bl	800b630 <std>
 800b714:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b718:	2202      	movs	r2, #2
 800b71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71e:	2112      	movs	r1, #18
 800b720:	f7ff bf86 	b.w	800b630 <std>
 800b724:	20002100 	.word	0x20002100
 800b728:	20001fc8 	.word	0x20001fc8
 800b72c:	0800b69d 	.word	0x0800b69d

0800b730 <__sfp_lock_acquire>:
 800b730:	4801      	ldr	r0, [pc, #4]	@ (800b738 <__sfp_lock_acquire+0x8>)
 800b732:	f000 ba16 	b.w	800bb62 <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	20002109 	.word	0x20002109

0800b73c <__sfp_lock_release>:
 800b73c:	4801      	ldr	r0, [pc, #4]	@ (800b744 <__sfp_lock_release+0x8>)
 800b73e:	f000 ba11 	b.w	800bb64 <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	20002109 	.word	0x20002109

0800b748 <__sinit>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	4604      	mov	r4, r0
 800b74c:	f7ff fff0 	bl	800b730 <__sfp_lock_acquire>
 800b750:	6a23      	ldr	r3, [r4, #32]
 800b752:	b11b      	cbz	r3, 800b75c <__sinit+0x14>
 800b754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b758:	f7ff bff0 	b.w	800b73c <__sfp_lock_release>
 800b75c:	4b04      	ldr	r3, [pc, #16]	@ (800b770 <__sinit+0x28>)
 800b75e:	6223      	str	r3, [r4, #32]
 800b760:	4b04      	ldr	r3, [pc, #16]	@ (800b774 <__sinit+0x2c>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1f5      	bne.n	800b754 <__sinit+0xc>
 800b768:	f7ff ffc4 	bl	800b6f4 <global_stdio_init.part.0>
 800b76c:	e7f2      	b.n	800b754 <__sinit+0xc>
 800b76e:	bf00      	nop
 800b770:	0800b6b5 	.word	0x0800b6b5
 800b774:	20002100 	.word	0x20002100

0800b778 <fiprintf>:
 800b778:	b40e      	push	{r1, r2, r3}
 800b77a:	b503      	push	{r0, r1, lr}
 800b77c:	4601      	mov	r1, r0
 800b77e:	ab03      	add	r3, sp, #12
 800b780:	4805      	ldr	r0, [pc, #20]	@ (800b798 <fiprintf+0x20>)
 800b782:	f853 2b04 	ldr.w	r2, [r3], #4
 800b786:	6800      	ldr	r0, [r0, #0]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	f001 fcfd 	bl	800d188 <_vfiprintf_r>
 800b78e:	b002      	add	sp, #8
 800b790:	f85d eb04 	ldr.w	lr, [sp], #4
 800b794:	b003      	add	sp, #12
 800b796:	4770      	bx	lr
 800b798:	200001a4 	.word	0x200001a4

0800b79c <_fwalk_sglue>:
 800b79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	4688      	mov	r8, r1
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	2600      	movs	r6, #0
 800b7a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7ac:	f1b9 0901 	subs.w	r9, r9, #1
 800b7b0:	d505      	bpl.n	800b7be <_fwalk_sglue+0x22>
 800b7b2:	6824      	ldr	r4, [r4, #0]
 800b7b4:	2c00      	cmp	r4, #0
 800b7b6:	d1f7      	bne.n	800b7a8 <_fwalk_sglue+0xc>
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d907      	bls.n	800b7d4 <_fwalk_sglue+0x38>
 800b7c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	d003      	beq.n	800b7d4 <_fwalk_sglue+0x38>
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	47c0      	blx	r8
 800b7d2:	4306      	orrs	r6, r0
 800b7d4:	3568      	adds	r5, #104	@ 0x68
 800b7d6:	e7e9      	b.n	800b7ac <_fwalk_sglue+0x10>

0800b7d8 <iprintf>:
 800b7d8:	b40f      	push	{r0, r1, r2, r3}
 800b7da:	b507      	push	{r0, r1, r2, lr}
 800b7dc:	4906      	ldr	r1, [pc, #24]	@ (800b7f8 <iprintf+0x20>)
 800b7de:	ab04      	add	r3, sp, #16
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e6:	6881      	ldr	r1, [r0, #8]
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	f001 fccd 	bl	800d188 <_vfiprintf_r>
 800b7ee:	b003      	add	sp, #12
 800b7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f4:	b004      	add	sp, #16
 800b7f6:	4770      	bx	lr
 800b7f8:	200001a4 	.word	0x200001a4

0800b7fc <_puts_r>:
 800b7fc:	6a03      	ldr	r3, [r0, #32]
 800b7fe:	b570      	push	{r4, r5, r6, lr}
 800b800:	6884      	ldr	r4, [r0, #8]
 800b802:	4605      	mov	r5, r0
 800b804:	460e      	mov	r6, r1
 800b806:	b90b      	cbnz	r3, 800b80c <_puts_r+0x10>
 800b808:	f7ff ff9e 	bl	800b748 <__sinit>
 800b80c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b80e:	07db      	lsls	r3, r3, #31
 800b810:	d405      	bmi.n	800b81e <_puts_r+0x22>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	0598      	lsls	r0, r3, #22
 800b816:	d402      	bmi.n	800b81e <_puts_r+0x22>
 800b818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b81a:	f000 f9a2 	bl	800bb62 <__retarget_lock_acquire_recursive>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	0719      	lsls	r1, r3, #28
 800b822:	d502      	bpl.n	800b82a <_puts_r+0x2e>
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d135      	bne.n	800b896 <_puts_r+0x9a>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 f8c5 	bl	800b9bc <__swsetup_r>
 800b832:	b380      	cbz	r0, 800b896 <_puts_r+0x9a>
 800b834:	f04f 35ff 	mov.w	r5, #4294967295
 800b838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b83a:	07da      	lsls	r2, r3, #31
 800b83c:	d405      	bmi.n	800b84a <_puts_r+0x4e>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	059b      	lsls	r3, r3, #22
 800b842:	d402      	bmi.n	800b84a <_puts_r+0x4e>
 800b844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b846:	f000 f98d 	bl	800bb64 <__retarget_lock_release_recursive>
 800b84a:	4628      	mov	r0, r5
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	2b00      	cmp	r3, #0
 800b850:	da04      	bge.n	800b85c <_puts_r+0x60>
 800b852:	69a2      	ldr	r2, [r4, #24]
 800b854:	429a      	cmp	r2, r3
 800b856:	dc17      	bgt.n	800b888 <_puts_r+0x8c>
 800b858:	290a      	cmp	r1, #10
 800b85a:	d015      	beq.n	800b888 <_puts_r+0x8c>
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	6022      	str	r2, [r4, #0]
 800b862:	7019      	strb	r1, [r3, #0]
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b86a:	3b01      	subs	r3, #1
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	2900      	cmp	r1, #0
 800b870:	d1ed      	bne.n	800b84e <_puts_r+0x52>
 800b872:	2b00      	cmp	r3, #0
 800b874:	da11      	bge.n	800b89a <_puts_r+0x9e>
 800b876:	4622      	mov	r2, r4
 800b878:	210a      	movs	r1, #10
 800b87a:	4628      	mov	r0, r5
 800b87c:	f000 f85f 	bl	800b93e <__swbuf_r>
 800b880:	3001      	adds	r0, #1
 800b882:	d0d7      	beq.n	800b834 <_puts_r+0x38>
 800b884:	250a      	movs	r5, #10
 800b886:	e7d7      	b.n	800b838 <_puts_r+0x3c>
 800b888:	4622      	mov	r2, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f857 	bl	800b93e <__swbuf_r>
 800b890:	3001      	adds	r0, #1
 800b892:	d1e7      	bne.n	800b864 <_puts_r+0x68>
 800b894:	e7ce      	b.n	800b834 <_puts_r+0x38>
 800b896:	3e01      	subs	r6, #1
 800b898:	e7e4      	b.n	800b864 <_puts_r+0x68>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	6022      	str	r2, [r4, #0]
 800b8a0:	220a      	movs	r2, #10
 800b8a2:	701a      	strb	r2, [r3, #0]
 800b8a4:	e7ee      	b.n	800b884 <_puts_r+0x88>
	...

0800b8a8 <puts>:
 800b8a8:	4b02      	ldr	r3, [pc, #8]	@ (800b8b4 <puts+0xc>)
 800b8aa:	4601      	mov	r1, r0
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	f7ff bfa5 	b.w	800b7fc <_puts_r>
 800b8b2:	bf00      	nop
 800b8b4:	200001a4 	.word	0x200001a4

0800b8b8 <__sread>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c0:	f000 f900 	bl	800bac4 <_read_r>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	bfab      	itete	ge
 800b8c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b8cc:	181b      	addge	r3, r3, r0
 800b8ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b8d2:	bfac      	ite	ge
 800b8d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8d6:	81a3      	strhlt	r3, [r4, #12]
 800b8d8:	bd10      	pop	{r4, pc}

0800b8da <__swrite>:
 800b8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8de:	461f      	mov	r7, r3
 800b8e0:	898b      	ldrh	r3, [r1, #12]
 800b8e2:	05db      	lsls	r3, r3, #23
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	d505      	bpl.n	800b8f8 <__swrite+0x1e>
 800b8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f000 f8d4 	bl	800baa0 <_lseek_r>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	4628      	mov	r0, r5
 800b90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90e:	f000 b8eb 	b.w	800bae8 <_write_r>

0800b912 <__sseek>:
 800b912:	b510      	push	{r4, lr}
 800b914:	460c      	mov	r4, r1
 800b916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91a:	f000 f8c1 	bl	800baa0 <_lseek_r>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	bf15      	itete	ne
 800b924:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b92a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b92e:	81a3      	strheq	r3, [r4, #12]
 800b930:	bf18      	it	ne
 800b932:	81a3      	strhne	r3, [r4, #12]
 800b934:	bd10      	pop	{r4, pc}

0800b936 <__sclose>:
 800b936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93a:	f000 b8a1 	b.w	800ba80 <_close_r>

0800b93e <__swbuf_r>:
 800b93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b940:	460e      	mov	r6, r1
 800b942:	4614      	mov	r4, r2
 800b944:	4605      	mov	r5, r0
 800b946:	b118      	cbz	r0, 800b950 <__swbuf_r+0x12>
 800b948:	6a03      	ldr	r3, [r0, #32]
 800b94a:	b90b      	cbnz	r3, 800b950 <__swbuf_r+0x12>
 800b94c:	f7ff fefc 	bl	800b748 <__sinit>
 800b950:	69a3      	ldr	r3, [r4, #24]
 800b952:	60a3      	str	r3, [r4, #8]
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	071a      	lsls	r2, r3, #28
 800b958:	d501      	bpl.n	800b95e <__swbuf_r+0x20>
 800b95a:	6923      	ldr	r3, [r4, #16]
 800b95c:	b943      	cbnz	r3, 800b970 <__swbuf_r+0x32>
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f000 f82b 	bl	800b9bc <__swsetup_r>
 800b966:	b118      	cbz	r0, 800b970 <__swbuf_r+0x32>
 800b968:	f04f 37ff 	mov.w	r7, #4294967295
 800b96c:	4638      	mov	r0, r7
 800b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	6922      	ldr	r2, [r4, #16]
 800b974:	1a98      	subs	r0, r3, r2
 800b976:	6963      	ldr	r3, [r4, #20]
 800b978:	b2f6      	uxtb	r6, r6
 800b97a:	4283      	cmp	r3, r0
 800b97c:	4637      	mov	r7, r6
 800b97e:	dc05      	bgt.n	800b98c <__swbuf_r+0x4e>
 800b980:	4621      	mov	r1, r4
 800b982:	4628      	mov	r0, r5
 800b984:	f001 fd9c 	bl	800d4c0 <_fflush_r>
 800b988:	2800      	cmp	r0, #0
 800b98a:	d1ed      	bne.n	800b968 <__swbuf_r+0x2a>
 800b98c:	68a3      	ldr	r3, [r4, #8]
 800b98e:	3b01      	subs	r3, #1
 800b990:	60a3      	str	r3, [r4, #8]
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	701e      	strb	r6, [r3, #0]
 800b99a:	6962      	ldr	r2, [r4, #20]
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d004      	beq.n	800b9ac <__swbuf_r+0x6e>
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	07db      	lsls	r3, r3, #31
 800b9a6:	d5e1      	bpl.n	800b96c <__swbuf_r+0x2e>
 800b9a8:	2e0a      	cmp	r6, #10
 800b9aa:	d1df      	bne.n	800b96c <__swbuf_r+0x2e>
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f001 fd86 	bl	800d4c0 <_fflush_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d0d9      	beq.n	800b96c <__swbuf_r+0x2e>
 800b9b8:	e7d6      	b.n	800b968 <__swbuf_r+0x2a>
	...

0800b9bc <__swsetup_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4b29      	ldr	r3, [pc, #164]	@ (800ba64 <__swsetup_r+0xa8>)
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	6818      	ldr	r0, [r3, #0]
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	b118      	cbz	r0, 800b9d0 <__swsetup_r+0x14>
 800b9c8:	6a03      	ldr	r3, [r0, #32]
 800b9ca:	b90b      	cbnz	r3, 800b9d0 <__swsetup_r+0x14>
 800b9cc:	f7ff febc 	bl	800b748 <__sinit>
 800b9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d4:	0719      	lsls	r1, r3, #28
 800b9d6:	d422      	bmi.n	800ba1e <__swsetup_r+0x62>
 800b9d8:	06da      	lsls	r2, r3, #27
 800b9da:	d407      	bmi.n	800b9ec <__swsetup_r+0x30>
 800b9dc:	2209      	movs	r2, #9
 800b9de:	602a      	str	r2, [r5, #0]
 800b9e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ea:	e033      	b.n	800ba54 <__swsetup_r+0x98>
 800b9ec:	0758      	lsls	r0, r3, #29
 800b9ee:	d512      	bpl.n	800ba16 <__swsetup_r+0x5a>
 800b9f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9f2:	b141      	cbz	r1, 800ba06 <__swsetup_r+0x4a>
 800b9f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	d002      	beq.n	800ba02 <__swsetup_r+0x46>
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f000 ff1f 	bl	800c840 <_free_r>
 800ba02:	2300      	movs	r3, #0
 800ba04:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	6063      	str	r3, [r4, #4]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f043 0308 	orr.w	r3, r3, #8
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	b94b      	cbnz	r3, 800ba36 <__swsetup_r+0x7a>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba2c:	d003      	beq.n	800ba36 <__swsetup_r+0x7a>
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4628      	mov	r0, r5
 800ba32:	f001 fd93 	bl	800d55c <__smakebuf_r>
 800ba36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba3a:	f013 0201 	ands.w	r2, r3, #1
 800ba3e:	d00a      	beq.n	800ba56 <__swsetup_r+0x9a>
 800ba40:	2200      	movs	r2, #0
 800ba42:	60a2      	str	r2, [r4, #8]
 800ba44:	6962      	ldr	r2, [r4, #20]
 800ba46:	4252      	negs	r2, r2
 800ba48:	61a2      	str	r2, [r4, #24]
 800ba4a:	6922      	ldr	r2, [r4, #16]
 800ba4c:	b942      	cbnz	r2, 800ba60 <__swsetup_r+0xa4>
 800ba4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba52:	d1c5      	bne.n	800b9e0 <__swsetup_r+0x24>
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	0799      	lsls	r1, r3, #30
 800ba58:	bf58      	it	pl
 800ba5a:	6962      	ldrpl	r2, [r4, #20]
 800ba5c:	60a2      	str	r2, [r4, #8]
 800ba5e:	e7f4      	b.n	800ba4a <__swsetup_r+0x8e>
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7f7      	b.n	800ba54 <__swsetup_r+0x98>
 800ba64:	200001a4 	.word	0x200001a4

0800ba68 <memset>:
 800ba68:	4402      	add	r2, r0
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d100      	bne.n	800ba72 <memset+0xa>
 800ba70:	4770      	bx	lr
 800ba72:	f803 1b01 	strb.w	r1, [r3], #1
 800ba76:	e7f9      	b.n	800ba6c <memset+0x4>

0800ba78 <_localeconv_r>:
 800ba78:	4800      	ldr	r0, [pc, #0]	@ (800ba7c <_localeconv_r+0x4>)
 800ba7a:	4770      	bx	lr
 800ba7c:	200002e4 	.word	0x200002e4

0800ba80 <_close_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d06      	ldr	r5, [pc, #24]	@ (800ba9c <_close_r+0x1c>)
 800ba84:	2300      	movs	r3, #0
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	f7f5 fe1e 	bl	80016cc <_close>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_close_r+0x1a>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_close_r+0x1a>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	20002104 	.word	0x20002104

0800baa0 <_lseek_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d07      	ldr	r5, [pc, #28]	@ (800bac0 <_lseek_r+0x20>)
 800baa4:	4604      	mov	r4, r0
 800baa6:	4608      	mov	r0, r1
 800baa8:	4611      	mov	r1, r2
 800baaa:	2200      	movs	r2, #0
 800baac:	602a      	str	r2, [r5, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	f7f5 fe33 	bl	800171a <_lseek>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_lseek_r+0x1e>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	b103      	cbz	r3, 800babe <_lseek_r+0x1e>
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	20002104 	.word	0x20002104

0800bac4 <_read_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d07      	ldr	r5, [pc, #28]	@ (800bae4 <_read_r+0x20>)
 800bac8:	4604      	mov	r4, r0
 800baca:	4608      	mov	r0, r1
 800bacc:	4611      	mov	r1, r2
 800bace:	2200      	movs	r2, #0
 800bad0:	602a      	str	r2, [r5, #0]
 800bad2:	461a      	mov	r2, r3
 800bad4:	f7f5 fdc1 	bl	800165a <_read>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d102      	bne.n	800bae2 <_read_r+0x1e>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	b103      	cbz	r3, 800bae2 <_read_r+0x1e>
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	20002104 	.word	0x20002104

0800bae8 <_write_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	@ (800bb08 <_write_r+0x20>)
 800baec:	4604      	mov	r4, r0
 800baee:	4608      	mov	r0, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	f7f5 fdcc 	bl	8001694 <_write>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d102      	bne.n	800bb06 <_write_r+0x1e>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b103      	cbz	r3, 800bb06 <_write_r+0x1e>
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	20002104 	.word	0x20002104

0800bb0c <__errno>:
 800bb0c:	4b01      	ldr	r3, [pc, #4]	@ (800bb14 <__errno+0x8>)
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	200001a4 	.word	0x200001a4

0800bb18 <__libc_init_array>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	4d0d      	ldr	r5, [pc, #52]	@ (800bb50 <__libc_init_array+0x38>)
 800bb1c:	4c0d      	ldr	r4, [pc, #52]	@ (800bb54 <__libc_init_array+0x3c>)
 800bb1e:	1b64      	subs	r4, r4, r5
 800bb20:	10a4      	asrs	r4, r4, #2
 800bb22:	2600      	movs	r6, #0
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d109      	bne.n	800bb3c <__libc_init_array+0x24>
 800bb28:	4d0b      	ldr	r5, [pc, #44]	@ (800bb58 <__libc_init_array+0x40>)
 800bb2a:	4c0c      	ldr	r4, [pc, #48]	@ (800bb5c <__libc_init_array+0x44>)
 800bb2c:	f001 fdfc 	bl	800d728 <_init>
 800bb30:	1b64      	subs	r4, r4, r5
 800bb32:	10a4      	asrs	r4, r4, #2
 800bb34:	2600      	movs	r6, #0
 800bb36:	42a6      	cmp	r6, r4
 800bb38:	d105      	bne.n	800bb46 <__libc_init_array+0x2e>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb40:	4798      	blx	r3
 800bb42:	3601      	adds	r6, #1
 800bb44:	e7ee      	b.n	800bb24 <__libc_init_array+0xc>
 800bb46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb4a:	4798      	blx	r3
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	e7f2      	b.n	800bb36 <__libc_init_array+0x1e>
 800bb50:	0800dec4 	.word	0x0800dec4
 800bb54:	0800dec4 	.word	0x0800dec4
 800bb58:	0800dec4 	.word	0x0800dec4
 800bb5c:	0800dec8 	.word	0x0800dec8

0800bb60 <__retarget_lock_init_recursive>:
 800bb60:	4770      	bx	lr

0800bb62 <__retarget_lock_acquire_recursive>:
 800bb62:	4770      	bx	lr

0800bb64 <__retarget_lock_release_recursive>:
 800bb64:	4770      	bx	lr

0800bb66 <memcpy>:
 800bb66:	440a      	add	r2, r1
 800bb68:	4291      	cmp	r1, r2
 800bb6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb6e:	d100      	bne.n	800bb72 <memcpy+0xc>
 800bb70:	4770      	bx	lr
 800bb72:	b510      	push	{r4, lr}
 800bb74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb7c:	4291      	cmp	r1, r2
 800bb7e:	d1f9      	bne.n	800bb74 <memcpy+0xe>
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <abort>:
 800bb82:	b508      	push	{r3, lr}
 800bb84:	2006      	movs	r0, #6
 800bb86:	f001 fd4d 	bl	800d624 <raise>
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	f7f5 fd5a 	bl	8001644 <_exit>

0800bb90 <quorem>:
 800bb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	6903      	ldr	r3, [r0, #16]
 800bb96:	690c      	ldr	r4, [r1, #16]
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	4607      	mov	r7, r0
 800bb9c:	db7e      	blt.n	800bc9c <quorem+0x10c>
 800bb9e:	3c01      	subs	r4, #1
 800bba0:	f101 0814 	add.w	r8, r1, #20
 800bba4:	00a3      	lsls	r3, r4, #2
 800bba6:	f100 0514 	add.w	r5, r0, #20
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbc2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbc6:	d32e      	bcc.n	800bc26 <quorem+0x96>
 800bbc8:	f04f 0a00 	mov.w	sl, #0
 800bbcc:	46c4      	mov	ip, r8
 800bbce:	46ae      	mov	lr, r5
 800bbd0:	46d3      	mov	fp, sl
 800bbd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbd6:	b298      	uxth	r0, r3
 800bbd8:	fb06 a000 	mla	r0, r6, r0, sl
 800bbdc:	0c02      	lsrs	r2, r0, #16
 800bbde:	0c1b      	lsrs	r3, r3, #16
 800bbe0:	fb06 2303 	mla	r3, r6, r3, r2
 800bbe4:	f8de 2000 	ldr.w	r2, [lr]
 800bbe8:	b280      	uxth	r0, r0
 800bbea:	b292      	uxth	r2, r2
 800bbec:	1a12      	subs	r2, r2, r0
 800bbee:	445a      	add	r2, fp
 800bbf0:	f8de 0000 	ldr.w	r0, [lr]
 800bbf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bbfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc02:	b292      	uxth	r2, r2
 800bc04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc08:	45e1      	cmp	r9, ip
 800bc0a:	f84e 2b04 	str.w	r2, [lr], #4
 800bc0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc12:	d2de      	bcs.n	800bbd2 <quorem+0x42>
 800bc14:	9b00      	ldr	r3, [sp, #0]
 800bc16:	58eb      	ldr	r3, [r5, r3]
 800bc18:	b92b      	cbnz	r3, 800bc26 <quorem+0x96>
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	3b04      	subs	r3, #4
 800bc1e:	429d      	cmp	r5, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	d32f      	bcc.n	800bc84 <quorem+0xf4>
 800bc24:	613c      	str	r4, [r7, #16]
 800bc26:	4638      	mov	r0, r7
 800bc28:	f001 f97c 	bl	800cf24 <__mcmp>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	db25      	blt.n	800bc7c <quorem+0xec>
 800bc30:	4629      	mov	r1, r5
 800bc32:	2000      	movs	r0, #0
 800bc34:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc38:	f8d1 c000 	ldr.w	ip, [r1]
 800bc3c:	fa1f fe82 	uxth.w	lr, r2
 800bc40:	fa1f f38c 	uxth.w	r3, ip
 800bc44:	eba3 030e 	sub.w	r3, r3, lr
 800bc48:	4403      	add	r3, r0
 800bc4a:	0c12      	lsrs	r2, r2, #16
 800bc4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc5a:	45c1      	cmp	r9, r8
 800bc5c:	f841 3b04 	str.w	r3, [r1], #4
 800bc60:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc64:	d2e6      	bcs.n	800bc34 <quorem+0xa4>
 800bc66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6e:	b922      	cbnz	r2, 800bc7a <quorem+0xea>
 800bc70:	3b04      	subs	r3, #4
 800bc72:	429d      	cmp	r5, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	d30b      	bcc.n	800bc90 <quorem+0x100>
 800bc78:	613c      	str	r4, [r7, #16]
 800bc7a:	3601      	adds	r6, #1
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	b003      	add	sp, #12
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	6812      	ldr	r2, [r2, #0]
 800bc86:	3b04      	subs	r3, #4
 800bc88:	2a00      	cmp	r2, #0
 800bc8a:	d1cb      	bne.n	800bc24 <quorem+0x94>
 800bc8c:	3c01      	subs	r4, #1
 800bc8e:	e7c6      	b.n	800bc1e <quorem+0x8e>
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	3b04      	subs	r3, #4
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	d1ef      	bne.n	800bc78 <quorem+0xe8>
 800bc98:	3c01      	subs	r4, #1
 800bc9a:	e7ea      	b.n	800bc72 <quorem+0xe2>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e7ee      	b.n	800bc7e <quorem+0xee>

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	69c7      	ldr	r7, [r0, #28]
 800bca6:	b097      	sub	sp, #92	@ 0x5c
 800bca8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bcac:	ec55 4b10 	vmov	r4, r5, d0
 800bcb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bcb2:	9107      	str	r1, [sp, #28]
 800bcb4:	4681      	mov	r9, r0
 800bcb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bcb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bcba:	b97f      	cbnz	r7, 800bcdc <_dtoa_r+0x3c>
 800bcbc:	2010      	movs	r0, #16
 800bcbe:	f000 fe09 	bl	800c8d4 <malloc>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bcc8:	b920      	cbnz	r0, 800bcd4 <_dtoa_r+0x34>
 800bcca:	4ba9      	ldr	r3, [pc, #676]	@ (800bf70 <_dtoa_r+0x2d0>)
 800bccc:	21ef      	movs	r1, #239	@ 0xef
 800bcce:	48a9      	ldr	r0, [pc, #676]	@ (800bf74 <_dtoa_r+0x2d4>)
 800bcd0:	f7ff f83a 	bl	800ad48 <__assert_func>
 800bcd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bcd8:	6007      	str	r7, [r0, #0]
 800bcda:	60c7      	str	r7, [r0, #12]
 800bcdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bce0:	6819      	ldr	r1, [r3, #0]
 800bce2:	b159      	cbz	r1, 800bcfc <_dtoa_r+0x5c>
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	604a      	str	r2, [r1, #4]
 800bce8:	2301      	movs	r3, #1
 800bcea:	4093      	lsls	r3, r2
 800bcec:	608b      	str	r3, [r1, #8]
 800bcee:	4648      	mov	r0, r9
 800bcf0:	f000 fee6 	bl	800cac0 <_Bfree>
 800bcf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	1e2b      	subs	r3, r5, #0
 800bcfe:	bfb9      	ittee	lt
 800bd00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd04:	9305      	strlt	r3, [sp, #20]
 800bd06:	2300      	movge	r3, #0
 800bd08:	6033      	strge	r3, [r6, #0]
 800bd0a:	9f05      	ldr	r7, [sp, #20]
 800bd0c:	4b9a      	ldr	r3, [pc, #616]	@ (800bf78 <_dtoa_r+0x2d8>)
 800bd0e:	bfbc      	itt	lt
 800bd10:	2201      	movlt	r2, #1
 800bd12:	6032      	strlt	r2, [r6, #0]
 800bd14:	43bb      	bics	r3, r7
 800bd16:	d112      	bne.n	800bd3e <_dtoa_r+0x9e>
 800bd18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd24:	4323      	orrs	r3, r4
 800bd26:	f000 855a 	beq.w	800c7de <_dtoa_r+0xb3e>
 800bd2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bf8c <_dtoa_r+0x2ec>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 855c 	beq.w	800c7ee <_dtoa_r+0xb4e>
 800bd36:	f10a 0303 	add.w	r3, sl, #3
 800bd3a:	f000 bd56 	b.w	800c7ea <_dtoa_r+0xb4a>
 800bd3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bd42:	2200      	movs	r2, #0
 800bd44:	ec51 0b17 	vmov	r0, r1, d7
 800bd48:	2300      	movs	r3, #0
 800bd4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bd4e:	f7f4 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd52:	4680      	mov	r8, r0
 800bd54:	b158      	cbz	r0, 800bd6e <_dtoa_r+0xce>
 800bd56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd5e:	b113      	cbz	r3, 800bd66 <_dtoa_r+0xc6>
 800bd60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd62:	4b86      	ldr	r3, [pc, #536]	@ (800bf7c <_dtoa_r+0x2dc>)
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bf90 <_dtoa_r+0x2f0>
 800bd6a:	f000 bd40 	b.w	800c7ee <_dtoa_r+0xb4e>
 800bd6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bd72:	aa14      	add	r2, sp, #80	@ 0x50
 800bd74:	a915      	add	r1, sp, #84	@ 0x54
 800bd76:	4648      	mov	r0, r9
 800bd78:	f001 f984 	bl	800d084 <__d2b>
 800bd7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd80:	9002      	str	r0, [sp, #8]
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	d078      	beq.n	800be78 <_dtoa_r+0x1d8>
 800bd86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bd8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bda0:	4619      	mov	r1, r3
 800bda2:	2200      	movs	r2, #0
 800bda4:	4b76      	ldr	r3, [pc, #472]	@ (800bf80 <_dtoa_r+0x2e0>)
 800bda6:	f7f4 fa6f 	bl	8000288 <__aeabi_dsub>
 800bdaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800bf58 <_dtoa_r+0x2b8>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fc22 	bl	80005f8 <__aeabi_dmul>
 800bdb4:	a36a      	add	r3, pc, #424	@ (adr r3, 800bf60 <_dtoa_r+0x2c0>)
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fa67 	bl	800028c <__adddf3>
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	f7f4 fbae 	bl	8000524 <__aeabi_i2d>
 800bdc8:	a367      	add	r3, pc, #412	@ (adr r3, 800bf68 <_dtoa_r+0x2c8>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	f7f4 fa57 	bl	800028c <__adddf3>
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	f7f4 feb9 	bl	8000b58 <__aeabi_d2iz>
 800bde6:	2200      	movs	r2, #0
 800bde8:	4607      	mov	r7, r0
 800bdea:	2300      	movs	r3, #0
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fe74 	bl	8000adc <__aeabi_dcmplt>
 800bdf4:	b140      	cbz	r0, 800be08 <_dtoa_r+0x168>
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f7f4 fb94 	bl	8000524 <__aeabi_i2d>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 800be04:	b900      	cbnz	r0, 800be08 <_dtoa_r+0x168>
 800be06:	3f01      	subs	r7, #1
 800be08:	2f16      	cmp	r7, #22
 800be0a:	d852      	bhi.n	800beb2 <_dtoa_r+0x212>
 800be0c:	4b5d      	ldr	r3, [pc, #372]	@ (800bf84 <_dtoa_r+0x2e4>)
 800be0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be1a:	f7f4 fe5f 	bl	8000adc <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d049      	beq.n	800beb6 <_dtoa_r+0x216>
 800be22:	3f01      	subs	r7, #1
 800be24:	2300      	movs	r3, #0
 800be26:	9310      	str	r3, [sp, #64]	@ 0x40
 800be28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be2a:	1b9b      	subs	r3, r3, r6
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	bf45      	ittet	mi
 800be30:	f1c3 0301 	rsbmi	r3, r3, #1
 800be34:	9300      	strmi	r3, [sp, #0]
 800be36:	2300      	movpl	r3, #0
 800be38:	2300      	movmi	r3, #0
 800be3a:	9206      	str	r2, [sp, #24]
 800be3c:	bf54      	ite	pl
 800be3e:	9300      	strpl	r3, [sp, #0]
 800be40:	9306      	strmi	r3, [sp, #24]
 800be42:	2f00      	cmp	r7, #0
 800be44:	db39      	blt.n	800beba <_dtoa_r+0x21a>
 800be46:	9b06      	ldr	r3, [sp, #24]
 800be48:	970d      	str	r7, [sp, #52]	@ 0x34
 800be4a:	443b      	add	r3, r7
 800be4c:	9306      	str	r3, [sp, #24]
 800be4e:	2300      	movs	r3, #0
 800be50:	9308      	str	r3, [sp, #32]
 800be52:	9b07      	ldr	r3, [sp, #28]
 800be54:	2b09      	cmp	r3, #9
 800be56:	d863      	bhi.n	800bf20 <_dtoa_r+0x280>
 800be58:	2b05      	cmp	r3, #5
 800be5a:	bfc4      	itt	gt
 800be5c:	3b04      	subgt	r3, #4
 800be5e:	9307      	strgt	r3, [sp, #28]
 800be60:	9b07      	ldr	r3, [sp, #28]
 800be62:	f1a3 0302 	sub.w	r3, r3, #2
 800be66:	bfcc      	ite	gt
 800be68:	2400      	movgt	r4, #0
 800be6a:	2401      	movle	r4, #1
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	d863      	bhi.n	800bf38 <_dtoa_r+0x298>
 800be70:	e8df f003 	tbb	[pc, r3]
 800be74:	2b375452 	.word	0x2b375452
 800be78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800be7c:	441e      	add	r6, r3
 800be7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be82:	2b20      	cmp	r3, #32
 800be84:	bfc1      	itttt	gt
 800be86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be8a:	409f      	lslgt	r7, r3
 800be8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be90:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be94:	bfd6      	itet	le
 800be96:	f1c3 0320 	rsble	r3, r3, #32
 800be9a:	ea47 0003 	orrgt.w	r0, r7, r3
 800be9e:	fa04 f003 	lslle.w	r0, r4, r3
 800bea2:	f7f4 fb2f 	bl	8000504 <__aeabi_ui2d>
 800bea6:	2201      	movs	r2, #1
 800bea8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800beac:	3e01      	subs	r6, #1
 800beae:	9212      	str	r2, [sp, #72]	@ 0x48
 800beb0:	e776      	b.n	800bda0 <_dtoa_r+0x100>
 800beb2:	2301      	movs	r3, #1
 800beb4:	e7b7      	b.n	800be26 <_dtoa_r+0x186>
 800beb6:	9010      	str	r0, [sp, #64]	@ 0x40
 800beb8:	e7b6      	b.n	800be28 <_dtoa_r+0x188>
 800beba:	9b00      	ldr	r3, [sp, #0]
 800bebc:	1bdb      	subs	r3, r3, r7
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	427b      	negs	r3, r7
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	2300      	movs	r3, #0
 800bec6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bec8:	e7c3      	b.n	800be52 <_dtoa_r+0x1b2>
 800beca:	2301      	movs	r3, #1
 800becc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bed0:	eb07 0b03 	add.w	fp, r7, r3
 800bed4:	f10b 0301 	add.w	r3, fp, #1
 800bed8:	2b01      	cmp	r3, #1
 800beda:	9303      	str	r3, [sp, #12]
 800bedc:	bfb8      	it	lt
 800bede:	2301      	movlt	r3, #1
 800bee0:	e006      	b.n	800bef0 <_dtoa_r+0x250>
 800bee2:	2301      	movs	r3, #1
 800bee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dd28      	ble.n	800bf3e <_dtoa_r+0x29e>
 800beec:	469b      	mov	fp, r3
 800beee:	9303      	str	r3, [sp, #12]
 800bef0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bef4:	2100      	movs	r1, #0
 800bef6:	2204      	movs	r2, #4
 800bef8:	f102 0514 	add.w	r5, r2, #20
 800befc:	429d      	cmp	r5, r3
 800befe:	d926      	bls.n	800bf4e <_dtoa_r+0x2ae>
 800bf00:	6041      	str	r1, [r0, #4]
 800bf02:	4648      	mov	r0, r9
 800bf04:	f000 fd9c 	bl	800ca40 <_Balloc>
 800bf08:	4682      	mov	sl, r0
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d142      	bne.n	800bf94 <_dtoa_r+0x2f4>
 800bf0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bf88 <_dtoa_r+0x2e8>)
 800bf10:	4602      	mov	r2, r0
 800bf12:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf16:	e6da      	b.n	800bcce <_dtoa_r+0x2e>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e7e3      	b.n	800bee4 <_dtoa_r+0x244>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	e7d5      	b.n	800becc <_dtoa_r+0x22c>
 800bf20:	2401      	movs	r4, #1
 800bf22:	2300      	movs	r3, #0
 800bf24:	9307      	str	r3, [sp, #28]
 800bf26:	9409      	str	r4, [sp, #36]	@ 0x24
 800bf28:	f04f 3bff 	mov.w	fp, #4294967295
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf32:	2312      	movs	r3, #18
 800bf34:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf36:	e7db      	b.n	800bef0 <_dtoa_r+0x250>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf3c:	e7f4      	b.n	800bf28 <_dtoa_r+0x288>
 800bf3e:	f04f 0b01 	mov.w	fp, #1
 800bf42:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf46:	465b      	mov	r3, fp
 800bf48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bf4c:	e7d0      	b.n	800bef0 <_dtoa_r+0x250>
 800bf4e:	3101      	adds	r1, #1
 800bf50:	0052      	lsls	r2, r2, #1
 800bf52:	e7d1      	b.n	800bef8 <_dtoa_r+0x258>
 800bf54:	f3af 8000 	nop.w
 800bf58:	636f4361 	.word	0x636f4361
 800bf5c:	3fd287a7 	.word	0x3fd287a7
 800bf60:	8b60c8b3 	.word	0x8b60c8b3
 800bf64:	3fc68a28 	.word	0x3fc68a28
 800bf68:	509f79fb 	.word	0x509f79fb
 800bf6c:	3fd34413 	.word	0x3fd34413
 800bf70:	0800dbc5 	.word	0x0800dbc5
 800bf74:	0800dbdc 	.word	0x0800dbdc
 800bf78:	7ff00000 	.word	0x7ff00000
 800bf7c:	0800db95 	.word	0x0800db95
 800bf80:	3ff80000 	.word	0x3ff80000
 800bf84:	0800dcf0 	.word	0x0800dcf0
 800bf88:	0800dc34 	.word	0x0800dc34
 800bf8c:	0800dbc1 	.word	0x0800dbc1
 800bf90:	0800db94 	.word	0x0800db94
 800bf94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf98:	6018      	str	r0, [r3, #0]
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	2b0e      	cmp	r3, #14
 800bf9e:	f200 80a1 	bhi.w	800c0e4 <_dtoa_r+0x444>
 800bfa2:	2c00      	cmp	r4, #0
 800bfa4:	f000 809e 	beq.w	800c0e4 <_dtoa_r+0x444>
 800bfa8:	2f00      	cmp	r7, #0
 800bfaa:	dd33      	ble.n	800c014 <_dtoa_r+0x374>
 800bfac:	4b9c      	ldr	r3, [pc, #624]	@ (800c220 <_dtoa_r+0x580>)
 800bfae:	f007 020f 	and.w	r2, r7, #15
 800bfb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfb6:	ed93 7b00 	vldr	d7, [r3]
 800bfba:	05f8      	lsls	r0, r7, #23
 800bfbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bfc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfc4:	d516      	bpl.n	800bff4 <_dtoa_r+0x354>
 800bfc6:	4b97      	ldr	r3, [pc, #604]	@ (800c224 <_dtoa_r+0x584>)
 800bfc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bfcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfd0:	f7f4 fc3c 	bl	800084c <__aeabi_ddiv>
 800bfd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfd8:	f004 040f 	and.w	r4, r4, #15
 800bfdc:	2603      	movs	r6, #3
 800bfde:	4d91      	ldr	r5, [pc, #580]	@ (800c224 <_dtoa_r+0x584>)
 800bfe0:	b954      	cbnz	r4, 800bff8 <_dtoa_r+0x358>
 800bfe2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bfe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfea:	f7f4 fc2f 	bl	800084c <__aeabi_ddiv>
 800bfee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bff2:	e028      	b.n	800c046 <_dtoa_r+0x3a6>
 800bff4:	2602      	movs	r6, #2
 800bff6:	e7f2      	b.n	800bfde <_dtoa_r+0x33e>
 800bff8:	07e1      	lsls	r1, r4, #31
 800bffa:	d508      	bpl.n	800c00e <_dtoa_r+0x36e>
 800bffc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c000:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c004:	f7f4 faf8 	bl	80005f8 <__aeabi_dmul>
 800c008:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c00c:	3601      	adds	r6, #1
 800c00e:	1064      	asrs	r4, r4, #1
 800c010:	3508      	adds	r5, #8
 800c012:	e7e5      	b.n	800bfe0 <_dtoa_r+0x340>
 800c014:	f000 80af 	beq.w	800c176 <_dtoa_r+0x4d6>
 800c018:	427c      	negs	r4, r7
 800c01a:	4b81      	ldr	r3, [pc, #516]	@ (800c220 <_dtoa_r+0x580>)
 800c01c:	4d81      	ldr	r5, [pc, #516]	@ (800c224 <_dtoa_r+0x584>)
 800c01e:	f004 020f 	and.w	r2, r4, #15
 800c022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c02e:	f7f4 fae3 	bl	80005f8 <__aeabi_dmul>
 800c032:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c036:	1124      	asrs	r4, r4, #4
 800c038:	2300      	movs	r3, #0
 800c03a:	2602      	movs	r6, #2
 800c03c:	2c00      	cmp	r4, #0
 800c03e:	f040 808f 	bne.w	800c160 <_dtoa_r+0x4c0>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1d3      	bne.n	800bfee <_dtoa_r+0x34e>
 800c046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c048:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 8094 	beq.w	800c17a <_dtoa_r+0x4da>
 800c052:	4b75      	ldr	r3, [pc, #468]	@ (800c228 <_dtoa_r+0x588>)
 800c054:	2200      	movs	r2, #0
 800c056:	4620      	mov	r0, r4
 800c058:	4629      	mov	r1, r5
 800c05a:	f7f4 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800c05e:	2800      	cmp	r0, #0
 800c060:	f000 808b 	beq.w	800c17a <_dtoa_r+0x4da>
 800c064:	9b03      	ldr	r3, [sp, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 8087 	beq.w	800c17a <_dtoa_r+0x4da>
 800c06c:	f1bb 0f00 	cmp.w	fp, #0
 800c070:	dd34      	ble.n	800c0dc <_dtoa_r+0x43c>
 800c072:	4620      	mov	r0, r4
 800c074:	4b6d      	ldr	r3, [pc, #436]	@ (800c22c <_dtoa_r+0x58c>)
 800c076:	2200      	movs	r2, #0
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 fabd 	bl	80005f8 <__aeabi_dmul>
 800c07e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c082:	f107 38ff 	add.w	r8, r7, #4294967295
 800c086:	3601      	adds	r6, #1
 800c088:	465c      	mov	r4, fp
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7f4 fa4a 	bl	8000524 <__aeabi_i2d>
 800c090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c094:	f7f4 fab0 	bl	80005f8 <__aeabi_dmul>
 800c098:	4b65      	ldr	r3, [pc, #404]	@ (800c230 <_dtoa_r+0x590>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	f7f4 f8f6 	bl	800028c <__adddf3>
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0a6:	2c00      	cmp	r4, #0
 800c0a8:	d16a      	bne.n	800c180 <_dtoa_r+0x4e0>
 800c0aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ae:	4b61      	ldr	r3, [pc, #388]	@ (800c234 <_dtoa_r+0x594>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f7f4 f8e9 	bl	8000288 <__aeabi_dsub>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0be:	462a      	mov	r2, r5
 800c0c0:	4633      	mov	r3, r6
 800c0c2:	f7f4 fd29 	bl	8000b18 <__aeabi_dcmpgt>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f040 8298 	bne.w	800c5fc <_dtoa_r+0x95c>
 800c0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0d0:	462a      	mov	r2, r5
 800c0d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0d6:	f7f4 fd01 	bl	8000adc <__aeabi_dcmplt>
 800c0da:	bb38      	cbnz	r0, 800c12c <_dtoa_r+0x48c>
 800c0dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c0e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f2c0 8157 	blt.w	800c39a <_dtoa_r+0x6fa>
 800c0ec:	2f0e      	cmp	r7, #14
 800c0ee:	f300 8154 	bgt.w	800c39a <_dtoa_r+0x6fa>
 800c0f2:	4b4b      	ldr	r3, [pc, #300]	@ (800c220 <_dtoa_r+0x580>)
 800c0f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0f8:	ed93 7b00 	vldr	d7, [r3]
 800c0fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	ed8d 7b00 	vstr	d7, [sp]
 800c104:	f280 80e5 	bge.w	800c2d2 <_dtoa_r+0x632>
 800c108:	9b03      	ldr	r3, [sp, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f300 80e1 	bgt.w	800c2d2 <_dtoa_r+0x632>
 800c110:	d10c      	bne.n	800c12c <_dtoa_r+0x48c>
 800c112:	4b48      	ldr	r3, [pc, #288]	@ (800c234 <_dtoa_r+0x594>)
 800c114:	2200      	movs	r2, #0
 800c116:	ec51 0b17 	vmov	r0, r1, d7
 800c11a:	f7f4 fa6d 	bl	80005f8 <__aeabi_dmul>
 800c11e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c122:	f7f4 fcef 	bl	8000b04 <__aeabi_dcmpge>
 800c126:	2800      	cmp	r0, #0
 800c128:	f000 8266 	beq.w	800c5f8 <_dtoa_r+0x958>
 800c12c:	2400      	movs	r4, #0
 800c12e:	4625      	mov	r5, r4
 800c130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c132:	4656      	mov	r6, sl
 800c134:	ea6f 0803 	mvn.w	r8, r3
 800c138:	2700      	movs	r7, #0
 800c13a:	4621      	mov	r1, r4
 800c13c:	4648      	mov	r0, r9
 800c13e:	f000 fcbf 	bl	800cac0 <_Bfree>
 800c142:	2d00      	cmp	r5, #0
 800c144:	f000 80bd 	beq.w	800c2c2 <_dtoa_r+0x622>
 800c148:	b12f      	cbz	r7, 800c156 <_dtoa_r+0x4b6>
 800c14a:	42af      	cmp	r7, r5
 800c14c:	d003      	beq.n	800c156 <_dtoa_r+0x4b6>
 800c14e:	4639      	mov	r1, r7
 800c150:	4648      	mov	r0, r9
 800c152:	f000 fcb5 	bl	800cac0 <_Bfree>
 800c156:	4629      	mov	r1, r5
 800c158:	4648      	mov	r0, r9
 800c15a:	f000 fcb1 	bl	800cac0 <_Bfree>
 800c15e:	e0b0      	b.n	800c2c2 <_dtoa_r+0x622>
 800c160:	07e2      	lsls	r2, r4, #31
 800c162:	d505      	bpl.n	800c170 <_dtoa_r+0x4d0>
 800c164:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c168:	f7f4 fa46 	bl	80005f8 <__aeabi_dmul>
 800c16c:	3601      	adds	r6, #1
 800c16e:	2301      	movs	r3, #1
 800c170:	1064      	asrs	r4, r4, #1
 800c172:	3508      	adds	r5, #8
 800c174:	e762      	b.n	800c03c <_dtoa_r+0x39c>
 800c176:	2602      	movs	r6, #2
 800c178:	e765      	b.n	800c046 <_dtoa_r+0x3a6>
 800c17a:	9c03      	ldr	r4, [sp, #12]
 800c17c:	46b8      	mov	r8, r7
 800c17e:	e784      	b.n	800c08a <_dtoa_r+0x3ea>
 800c180:	4b27      	ldr	r3, [pc, #156]	@ (800c220 <_dtoa_r+0x580>)
 800c182:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c188:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c18c:	4454      	add	r4, sl
 800c18e:	2900      	cmp	r1, #0
 800c190:	d054      	beq.n	800c23c <_dtoa_r+0x59c>
 800c192:	4929      	ldr	r1, [pc, #164]	@ (800c238 <_dtoa_r+0x598>)
 800c194:	2000      	movs	r0, #0
 800c196:	f7f4 fb59 	bl	800084c <__aeabi_ddiv>
 800c19a:	4633      	mov	r3, r6
 800c19c:	462a      	mov	r2, r5
 800c19e:	f7f4 f873 	bl	8000288 <__aeabi_dsub>
 800c1a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1a6:	4656      	mov	r6, sl
 800c1a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ac:	f7f4 fcd4 	bl	8000b58 <__aeabi_d2iz>
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	f7f4 f9b7 	bl	8000524 <__aeabi_i2d>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1be:	f7f4 f863 	bl	8000288 <__aeabi_dsub>
 800c1c2:	3530      	adds	r5, #48	@ 0x30
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1cc:	f806 5b01 	strb.w	r5, [r6], #1
 800c1d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1d4:	f7f4 fc82 	bl	8000adc <__aeabi_dcmplt>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d172      	bne.n	800c2c2 <_dtoa_r+0x622>
 800c1dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1e0:	4911      	ldr	r1, [pc, #68]	@ (800c228 <_dtoa_r+0x588>)
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	f7f4 f850 	bl	8000288 <__aeabi_dsub>
 800c1e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1ec:	f7f4 fc76 	bl	8000adc <__aeabi_dcmplt>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	f040 80b4 	bne.w	800c35e <_dtoa_r+0x6be>
 800c1f6:	42a6      	cmp	r6, r4
 800c1f8:	f43f af70 	beq.w	800c0dc <_dtoa_r+0x43c>
 800c1fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c200:	4b0a      	ldr	r3, [pc, #40]	@ (800c22c <_dtoa_r+0x58c>)
 800c202:	2200      	movs	r2, #0
 800c204:	f7f4 f9f8 	bl	80005f8 <__aeabi_dmul>
 800c208:	4b08      	ldr	r3, [pc, #32]	@ (800c22c <_dtoa_r+0x58c>)
 800c20a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c20e:	2200      	movs	r2, #0
 800c210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c214:	f7f4 f9f0 	bl	80005f8 <__aeabi_dmul>
 800c218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c21c:	e7c4      	b.n	800c1a8 <_dtoa_r+0x508>
 800c21e:	bf00      	nop
 800c220:	0800dcf0 	.word	0x0800dcf0
 800c224:	0800dcc8 	.word	0x0800dcc8
 800c228:	3ff00000 	.word	0x3ff00000
 800c22c:	40240000 	.word	0x40240000
 800c230:	401c0000 	.word	0x401c0000
 800c234:	40140000 	.word	0x40140000
 800c238:	3fe00000 	.word	0x3fe00000
 800c23c:	4631      	mov	r1, r6
 800c23e:	4628      	mov	r0, r5
 800c240:	f7f4 f9da 	bl	80005f8 <__aeabi_dmul>
 800c244:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c248:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c24a:	4656      	mov	r6, sl
 800c24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c250:	f7f4 fc82 	bl	8000b58 <__aeabi_d2iz>
 800c254:	4605      	mov	r5, r0
 800c256:	f7f4 f965 	bl	8000524 <__aeabi_i2d>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c262:	f7f4 f811 	bl	8000288 <__aeabi_dsub>
 800c266:	3530      	adds	r5, #48	@ 0x30
 800c268:	f806 5b01 	strb.w	r5, [r6], #1
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	42a6      	cmp	r6, r4
 800c272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c276:	f04f 0200 	mov.w	r2, #0
 800c27a:	d124      	bne.n	800c2c6 <_dtoa_r+0x626>
 800c27c:	4baf      	ldr	r3, [pc, #700]	@ (800c53c <_dtoa_r+0x89c>)
 800c27e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c282:	f7f4 f803 	bl	800028c <__adddf3>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c28e:	f7f4 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 800c292:	2800      	cmp	r0, #0
 800c294:	d163      	bne.n	800c35e <_dtoa_r+0x6be>
 800c296:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c29a:	49a8      	ldr	r1, [pc, #672]	@ (800c53c <_dtoa_r+0x89c>)
 800c29c:	2000      	movs	r0, #0
 800c29e:	f7f3 fff3 	bl	8000288 <__aeabi_dsub>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2aa:	f7f4 fc17 	bl	8000adc <__aeabi_dcmplt>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f43f af14 	beq.w	800c0dc <_dtoa_r+0x43c>
 800c2b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c2b6:	1e73      	subs	r3, r6, #1
 800c2b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2be:	2b30      	cmp	r3, #48	@ 0x30
 800c2c0:	d0f8      	beq.n	800c2b4 <_dtoa_r+0x614>
 800c2c2:	4647      	mov	r7, r8
 800c2c4:	e03b      	b.n	800c33e <_dtoa_r+0x69e>
 800c2c6:	4b9e      	ldr	r3, [pc, #632]	@ (800c540 <_dtoa_r+0x8a0>)
 800c2c8:	f7f4 f996 	bl	80005f8 <__aeabi_dmul>
 800c2cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2d0:	e7bc      	b.n	800c24c <_dtoa_r+0x5ac>
 800c2d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c2d6:	4656      	mov	r6, sl
 800c2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2dc:	4620      	mov	r0, r4
 800c2de:	4629      	mov	r1, r5
 800c2e0:	f7f4 fab4 	bl	800084c <__aeabi_ddiv>
 800c2e4:	f7f4 fc38 	bl	8000b58 <__aeabi_d2iz>
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	f7f4 f91b 	bl	8000524 <__aeabi_i2d>
 800c2ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2f2:	f7f4 f981 	bl	80005f8 <__aeabi_dmul>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c302:	f7f3 ffc1 	bl	8000288 <__aeabi_dsub>
 800c306:	f806 4b01 	strb.w	r4, [r6], #1
 800c30a:	9d03      	ldr	r5, [sp, #12]
 800c30c:	eba6 040a 	sub.w	r4, r6, sl
 800c310:	42a5      	cmp	r5, r4
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	d133      	bne.n	800c380 <_dtoa_r+0x6e0>
 800c318:	f7f3 ffb8 	bl	800028c <__adddf3>
 800c31c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c320:	4604      	mov	r4, r0
 800c322:	460d      	mov	r5, r1
 800c324:	f7f4 fbf8 	bl	8000b18 <__aeabi_dcmpgt>
 800c328:	b9c0      	cbnz	r0, 800c35c <_dtoa_r+0x6bc>
 800c32a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c32e:	4620      	mov	r0, r4
 800c330:	4629      	mov	r1, r5
 800c332:	f7f4 fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c336:	b110      	cbz	r0, 800c33e <_dtoa_r+0x69e>
 800c338:	f018 0f01 	tst.w	r8, #1
 800c33c:	d10e      	bne.n	800c35c <_dtoa_r+0x6bc>
 800c33e:	9902      	ldr	r1, [sp, #8]
 800c340:	4648      	mov	r0, r9
 800c342:	f000 fbbd 	bl	800cac0 <_Bfree>
 800c346:	2300      	movs	r3, #0
 800c348:	7033      	strb	r3, [r6, #0]
 800c34a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c34c:	3701      	adds	r7, #1
 800c34e:	601f      	str	r7, [r3, #0]
 800c350:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 824b 	beq.w	800c7ee <_dtoa_r+0xb4e>
 800c358:	601e      	str	r6, [r3, #0]
 800c35a:	e248      	b.n	800c7ee <_dtoa_r+0xb4e>
 800c35c:	46b8      	mov	r8, r7
 800c35e:	4633      	mov	r3, r6
 800c360:	461e      	mov	r6, r3
 800c362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c366:	2a39      	cmp	r2, #57	@ 0x39
 800c368:	d106      	bne.n	800c378 <_dtoa_r+0x6d8>
 800c36a:	459a      	cmp	sl, r3
 800c36c:	d1f8      	bne.n	800c360 <_dtoa_r+0x6c0>
 800c36e:	2230      	movs	r2, #48	@ 0x30
 800c370:	f108 0801 	add.w	r8, r8, #1
 800c374:	f88a 2000 	strb.w	r2, [sl]
 800c378:	781a      	ldrb	r2, [r3, #0]
 800c37a:	3201      	adds	r2, #1
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	e7a0      	b.n	800c2c2 <_dtoa_r+0x622>
 800c380:	4b6f      	ldr	r3, [pc, #444]	@ (800c540 <_dtoa_r+0x8a0>)
 800c382:	2200      	movs	r2, #0
 800c384:	f7f4 f938 	bl	80005f8 <__aeabi_dmul>
 800c388:	2200      	movs	r2, #0
 800c38a:	2300      	movs	r3, #0
 800c38c:	4604      	mov	r4, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	f7f4 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c394:	2800      	cmp	r0, #0
 800c396:	d09f      	beq.n	800c2d8 <_dtoa_r+0x638>
 800c398:	e7d1      	b.n	800c33e <_dtoa_r+0x69e>
 800c39a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	f000 80ea 	beq.w	800c576 <_dtoa_r+0x8d6>
 800c3a2:	9a07      	ldr	r2, [sp, #28]
 800c3a4:	2a01      	cmp	r2, #1
 800c3a6:	f300 80cd 	bgt.w	800c544 <_dtoa_r+0x8a4>
 800c3aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	f000 80c1 	beq.w	800c534 <_dtoa_r+0x894>
 800c3b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3b6:	9c08      	ldr	r4, [sp, #32]
 800c3b8:	9e00      	ldr	r6, [sp, #0]
 800c3ba:	9a00      	ldr	r2, [sp, #0]
 800c3bc:	441a      	add	r2, r3
 800c3be:	9200      	str	r2, [sp, #0]
 800c3c0:	9a06      	ldr	r2, [sp, #24]
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	441a      	add	r2, r3
 800c3c6:	4648      	mov	r0, r9
 800c3c8:	9206      	str	r2, [sp, #24]
 800c3ca:	f000 fc2d 	bl	800cc28 <__i2b>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	b166      	cbz	r6, 800c3ec <_dtoa_r+0x74c>
 800c3d2:	9b06      	ldr	r3, [sp, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dd09      	ble.n	800c3ec <_dtoa_r+0x74c>
 800c3d8:	42b3      	cmp	r3, r6
 800c3da:	9a00      	ldr	r2, [sp, #0]
 800c3dc:	bfa8      	it	ge
 800c3de:	4633      	movge	r3, r6
 800c3e0:	1ad2      	subs	r2, r2, r3
 800c3e2:	9200      	str	r2, [sp, #0]
 800c3e4:	9a06      	ldr	r2, [sp, #24]
 800c3e6:	1af6      	subs	r6, r6, r3
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	9306      	str	r3, [sp, #24]
 800c3ec:	9b08      	ldr	r3, [sp, #32]
 800c3ee:	b30b      	cbz	r3, 800c434 <_dtoa_r+0x794>
 800c3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 80c6 	beq.w	800c584 <_dtoa_r+0x8e4>
 800c3f8:	2c00      	cmp	r4, #0
 800c3fa:	f000 80c0 	beq.w	800c57e <_dtoa_r+0x8de>
 800c3fe:	4629      	mov	r1, r5
 800c400:	4622      	mov	r2, r4
 800c402:	4648      	mov	r0, r9
 800c404:	f000 fcc8 	bl	800cd98 <__pow5mult>
 800c408:	9a02      	ldr	r2, [sp, #8]
 800c40a:	4601      	mov	r1, r0
 800c40c:	4605      	mov	r5, r0
 800c40e:	4648      	mov	r0, r9
 800c410:	f000 fc20 	bl	800cc54 <__multiply>
 800c414:	9902      	ldr	r1, [sp, #8]
 800c416:	4680      	mov	r8, r0
 800c418:	4648      	mov	r0, r9
 800c41a:	f000 fb51 	bl	800cac0 <_Bfree>
 800c41e:	9b08      	ldr	r3, [sp, #32]
 800c420:	1b1b      	subs	r3, r3, r4
 800c422:	9308      	str	r3, [sp, #32]
 800c424:	f000 80b1 	beq.w	800c58a <_dtoa_r+0x8ea>
 800c428:	9a08      	ldr	r2, [sp, #32]
 800c42a:	4641      	mov	r1, r8
 800c42c:	4648      	mov	r0, r9
 800c42e:	f000 fcb3 	bl	800cd98 <__pow5mult>
 800c432:	9002      	str	r0, [sp, #8]
 800c434:	2101      	movs	r1, #1
 800c436:	4648      	mov	r0, r9
 800c438:	f000 fbf6 	bl	800cc28 <__i2b>
 800c43c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c43e:	4604      	mov	r4, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	f000 81d8 	beq.w	800c7f6 <_dtoa_r+0xb56>
 800c446:	461a      	mov	r2, r3
 800c448:	4601      	mov	r1, r0
 800c44a:	4648      	mov	r0, r9
 800c44c:	f000 fca4 	bl	800cd98 <__pow5mult>
 800c450:	9b07      	ldr	r3, [sp, #28]
 800c452:	2b01      	cmp	r3, #1
 800c454:	4604      	mov	r4, r0
 800c456:	f300 809f 	bgt.w	800c598 <_dtoa_r+0x8f8>
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f040 8097 	bne.w	800c590 <_dtoa_r+0x8f0>
 800c462:	9b05      	ldr	r3, [sp, #20]
 800c464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f040 8093 	bne.w	800c594 <_dtoa_r+0x8f4>
 800c46e:	9b05      	ldr	r3, [sp, #20]
 800c470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c474:	0d1b      	lsrs	r3, r3, #20
 800c476:	051b      	lsls	r3, r3, #20
 800c478:	b133      	cbz	r3, 800c488 <_dtoa_r+0x7e8>
 800c47a:	9b00      	ldr	r3, [sp, #0]
 800c47c:	3301      	adds	r3, #1
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	9b06      	ldr	r3, [sp, #24]
 800c482:	3301      	adds	r3, #1
 800c484:	9306      	str	r3, [sp, #24]
 800c486:	2301      	movs	r3, #1
 800c488:	9308      	str	r3, [sp, #32]
 800c48a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 81b8 	beq.w	800c802 <_dtoa_r+0xb62>
 800c492:	6923      	ldr	r3, [r4, #16]
 800c494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c498:	6918      	ldr	r0, [r3, #16]
 800c49a:	f000 fb79 	bl	800cb90 <__hi0bits>
 800c49e:	f1c0 0020 	rsb	r0, r0, #32
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	4418      	add	r0, r3
 800c4a6:	f010 001f 	ands.w	r0, r0, #31
 800c4aa:	f000 8082 	beq.w	800c5b2 <_dtoa_r+0x912>
 800c4ae:	f1c0 0320 	rsb	r3, r0, #32
 800c4b2:	2b04      	cmp	r3, #4
 800c4b4:	dd73      	ble.n	800c59e <_dtoa_r+0x8fe>
 800c4b6:	9b00      	ldr	r3, [sp, #0]
 800c4b8:	f1c0 001c 	rsb	r0, r0, #28
 800c4bc:	4403      	add	r3, r0
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	9b06      	ldr	r3, [sp, #24]
 800c4c2:	4403      	add	r3, r0
 800c4c4:	4406      	add	r6, r0
 800c4c6:	9306      	str	r3, [sp, #24]
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dd05      	ble.n	800c4da <_dtoa_r+0x83a>
 800c4ce:	9902      	ldr	r1, [sp, #8]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4648      	mov	r0, r9
 800c4d4:	f000 fcba 	bl	800ce4c <__lshift>
 800c4d8:	9002      	str	r0, [sp, #8]
 800c4da:	9b06      	ldr	r3, [sp, #24]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dd05      	ble.n	800c4ec <_dtoa_r+0x84c>
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	f000 fcb1 	bl	800ce4c <__lshift>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d061      	beq.n	800c5b6 <_dtoa_r+0x916>
 800c4f2:	9802      	ldr	r0, [sp, #8]
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	f000 fd15 	bl	800cf24 <__mcmp>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	da5b      	bge.n	800c5b6 <_dtoa_r+0x916>
 800c4fe:	2300      	movs	r3, #0
 800c500:	9902      	ldr	r1, [sp, #8]
 800c502:	220a      	movs	r2, #10
 800c504:	4648      	mov	r0, r9
 800c506:	f000 fafd 	bl	800cb04 <__multadd>
 800c50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50c:	9002      	str	r0, [sp, #8]
 800c50e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 8177 	beq.w	800c806 <_dtoa_r+0xb66>
 800c518:	4629      	mov	r1, r5
 800c51a:	2300      	movs	r3, #0
 800c51c:	220a      	movs	r2, #10
 800c51e:	4648      	mov	r0, r9
 800c520:	f000 faf0 	bl	800cb04 <__multadd>
 800c524:	f1bb 0f00 	cmp.w	fp, #0
 800c528:	4605      	mov	r5, r0
 800c52a:	dc6f      	bgt.n	800c60c <_dtoa_r+0x96c>
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	dc49      	bgt.n	800c5c6 <_dtoa_r+0x926>
 800c532:	e06b      	b.n	800c60c <_dtoa_r+0x96c>
 800c534:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c53a:	e73c      	b.n	800c3b6 <_dtoa_r+0x716>
 800c53c:	3fe00000 	.word	0x3fe00000
 800c540:	40240000 	.word	0x40240000
 800c544:	9b03      	ldr	r3, [sp, #12]
 800c546:	1e5c      	subs	r4, r3, #1
 800c548:	9b08      	ldr	r3, [sp, #32]
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	db09      	blt.n	800c562 <_dtoa_r+0x8c2>
 800c54e:	1b1c      	subs	r4, r3, r4
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	f6bf af30 	bge.w	800c3b8 <_dtoa_r+0x718>
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	9a03      	ldr	r2, [sp, #12]
 800c55c:	1a9e      	subs	r6, r3, r2
 800c55e:	2300      	movs	r3, #0
 800c560:	e72b      	b.n	800c3ba <_dtoa_r+0x71a>
 800c562:	9b08      	ldr	r3, [sp, #32]
 800c564:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c566:	9408      	str	r4, [sp, #32]
 800c568:	1ae3      	subs	r3, r4, r3
 800c56a:	441a      	add	r2, r3
 800c56c:	9e00      	ldr	r6, [sp, #0]
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	920d      	str	r2, [sp, #52]	@ 0x34
 800c572:	2400      	movs	r4, #0
 800c574:	e721      	b.n	800c3ba <_dtoa_r+0x71a>
 800c576:	9c08      	ldr	r4, [sp, #32]
 800c578:	9e00      	ldr	r6, [sp, #0]
 800c57a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c57c:	e728      	b.n	800c3d0 <_dtoa_r+0x730>
 800c57e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c582:	e751      	b.n	800c428 <_dtoa_r+0x788>
 800c584:	9a08      	ldr	r2, [sp, #32]
 800c586:	9902      	ldr	r1, [sp, #8]
 800c588:	e750      	b.n	800c42c <_dtoa_r+0x78c>
 800c58a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c58e:	e751      	b.n	800c434 <_dtoa_r+0x794>
 800c590:	2300      	movs	r3, #0
 800c592:	e779      	b.n	800c488 <_dtoa_r+0x7e8>
 800c594:	9b04      	ldr	r3, [sp, #16]
 800c596:	e777      	b.n	800c488 <_dtoa_r+0x7e8>
 800c598:	2300      	movs	r3, #0
 800c59a:	9308      	str	r3, [sp, #32]
 800c59c:	e779      	b.n	800c492 <_dtoa_r+0x7f2>
 800c59e:	d093      	beq.n	800c4c8 <_dtoa_r+0x828>
 800c5a0:	9a00      	ldr	r2, [sp, #0]
 800c5a2:	331c      	adds	r3, #28
 800c5a4:	441a      	add	r2, r3
 800c5a6:	9200      	str	r2, [sp, #0]
 800c5a8:	9a06      	ldr	r2, [sp, #24]
 800c5aa:	441a      	add	r2, r3
 800c5ac:	441e      	add	r6, r3
 800c5ae:	9206      	str	r2, [sp, #24]
 800c5b0:	e78a      	b.n	800c4c8 <_dtoa_r+0x828>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	e7f4      	b.n	800c5a0 <_dtoa_r+0x900>
 800c5b6:	9b03      	ldr	r3, [sp, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	46b8      	mov	r8, r7
 800c5bc:	dc20      	bgt.n	800c600 <_dtoa_r+0x960>
 800c5be:	469b      	mov	fp, r3
 800c5c0:	9b07      	ldr	r3, [sp, #28]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	dd1e      	ble.n	800c604 <_dtoa_r+0x964>
 800c5c6:	f1bb 0f00 	cmp.w	fp, #0
 800c5ca:	f47f adb1 	bne.w	800c130 <_dtoa_r+0x490>
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	465b      	mov	r3, fp
 800c5d2:	2205      	movs	r2, #5
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f000 fa95 	bl	800cb04 <__multadd>
 800c5da:	4601      	mov	r1, r0
 800c5dc:	4604      	mov	r4, r0
 800c5de:	9802      	ldr	r0, [sp, #8]
 800c5e0:	f000 fca0 	bl	800cf24 <__mcmp>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f77f ada3 	ble.w	800c130 <_dtoa_r+0x490>
 800c5ea:	4656      	mov	r6, sl
 800c5ec:	2331      	movs	r3, #49	@ 0x31
 800c5ee:	f806 3b01 	strb.w	r3, [r6], #1
 800c5f2:	f108 0801 	add.w	r8, r8, #1
 800c5f6:	e59f      	b.n	800c138 <_dtoa_r+0x498>
 800c5f8:	9c03      	ldr	r4, [sp, #12]
 800c5fa:	46b8      	mov	r8, r7
 800c5fc:	4625      	mov	r5, r4
 800c5fe:	e7f4      	b.n	800c5ea <_dtoa_r+0x94a>
 800c600:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 8101 	beq.w	800c80e <_dtoa_r+0xb6e>
 800c60c:	2e00      	cmp	r6, #0
 800c60e:	dd05      	ble.n	800c61c <_dtoa_r+0x97c>
 800c610:	4629      	mov	r1, r5
 800c612:	4632      	mov	r2, r6
 800c614:	4648      	mov	r0, r9
 800c616:	f000 fc19 	bl	800ce4c <__lshift>
 800c61a:	4605      	mov	r5, r0
 800c61c:	9b08      	ldr	r3, [sp, #32]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d05c      	beq.n	800c6dc <_dtoa_r+0xa3c>
 800c622:	6869      	ldr	r1, [r5, #4]
 800c624:	4648      	mov	r0, r9
 800c626:	f000 fa0b 	bl	800ca40 <_Balloc>
 800c62a:	4606      	mov	r6, r0
 800c62c:	b928      	cbnz	r0, 800c63a <_dtoa_r+0x99a>
 800c62e:	4b82      	ldr	r3, [pc, #520]	@ (800c838 <_dtoa_r+0xb98>)
 800c630:	4602      	mov	r2, r0
 800c632:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c636:	f7ff bb4a 	b.w	800bcce <_dtoa_r+0x2e>
 800c63a:	692a      	ldr	r2, [r5, #16]
 800c63c:	3202      	adds	r2, #2
 800c63e:	0092      	lsls	r2, r2, #2
 800c640:	f105 010c 	add.w	r1, r5, #12
 800c644:	300c      	adds	r0, #12
 800c646:	f7ff fa8e 	bl	800bb66 <memcpy>
 800c64a:	2201      	movs	r2, #1
 800c64c:	4631      	mov	r1, r6
 800c64e:	4648      	mov	r0, r9
 800c650:	f000 fbfc 	bl	800ce4c <__lshift>
 800c654:	f10a 0301 	add.w	r3, sl, #1
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	eb0a 030b 	add.w	r3, sl, fp
 800c65e:	9308      	str	r3, [sp, #32]
 800c660:	9b04      	ldr	r3, [sp, #16]
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	462f      	mov	r7, r5
 800c668:	9306      	str	r3, [sp, #24]
 800c66a:	4605      	mov	r5, r0
 800c66c:	9b00      	ldr	r3, [sp, #0]
 800c66e:	9802      	ldr	r0, [sp, #8]
 800c670:	4621      	mov	r1, r4
 800c672:	f103 3bff 	add.w	fp, r3, #4294967295
 800c676:	f7ff fa8b 	bl	800bb90 <quorem>
 800c67a:	4603      	mov	r3, r0
 800c67c:	3330      	adds	r3, #48	@ 0x30
 800c67e:	9003      	str	r0, [sp, #12]
 800c680:	4639      	mov	r1, r7
 800c682:	9802      	ldr	r0, [sp, #8]
 800c684:	9309      	str	r3, [sp, #36]	@ 0x24
 800c686:	f000 fc4d 	bl	800cf24 <__mcmp>
 800c68a:	462a      	mov	r2, r5
 800c68c:	9004      	str	r0, [sp, #16]
 800c68e:	4621      	mov	r1, r4
 800c690:	4648      	mov	r0, r9
 800c692:	f000 fc63 	bl	800cf5c <__mdiff>
 800c696:	68c2      	ldr	r2, [r0, #12]
 800c698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c69a:	4606      	mov	r6, r0
 800c69c:	bb02      	cbnz	r2, 800c6e0 <_dtoa_r+0xa40>
 800c69e:	4601      	mov	r1, r0
 800c6a0:	9802      	ldr	r0, [sp, #8]
 800c6a2:	f000 fc3f 	bl	800cf24 <__mcmp>
 800c6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4648      	mov	r0, r9
 800c6ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6b2:	f000 fa05 	bl	800cac0 <_Bfree>
 800c6b6:	9b07      	ldr	r3, [sp, #28]
 800c6b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6ba:	9e00      	ldr	r6, [sp, #0]
 800c6bc:	ea42 0103 	orr.w	r1, r2, r3
 800c6c0:	9b06      	ldr	r3, [sp, #24]
 800c6c2:	4319      	orrs	r1, r3
 800c6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c6:	d10d      	bne.n	800c6e4 <_dtoa_r+0xa44>
 800c6c8:	2b39      	cmp	r3, #57	@ 0x39
 800c6ca:	d027      	beq.n	800c71c <_dtoa_r+0xa7c>
 800c6cc:	9a04      	ldr	r2, [sp, #16]
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	dd01      	ble.n	800c6d6 <_dtoa_r+0xa36>
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	3331      	adds	r3, #49	@ 0x31
 800c6d6:	f88b 3000 	strb.w	r3, [fp]
 800c6da:	e52e      	b.n	800c13a <_dtoa_r+0x49a>
 800c6dc:	4628      	mov	r0, r5
 800c6de:	e7b9      	b.n	800c654 <_dtoa_r+0x9b4>
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	e7e2      	b.n	800c6aa <_dtoa_r+0xa0a>
 800c6e4:	9904      	ldr	r1, [sp, #16]
 800c6e6:	2900      	cmp	r1, #0
 800c6e8:	db04      	blt.n	800c6f4 <_dtoa_r+0xa54>
 800c6ea:	9807      	ldr	r0, [sp, #28]
 800c6ec:	4301      	orrs	r1, r0
 800c6ee:	9806      	ldr	r0, [sp, #24]
 800c6f0:	4301      	orrs	r1, r0
 800c6f2:	d120      	bne.n	800c736 <_dtoa_r+0xa96>
 800c6f4:	2a00      	cmp	r2, #0
 800c6f6:	ddee      	ble.n	800c6d6 <_dtoa_r+0xa36>
 800c6f8:	9902      	ldr	r1, [sp, #8]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	4648      	mov	r0, r9
 800c700:	f000 fba4 	bl	800ce4c <__lshift>
 800c704:	4621      	mov	r1, r4
 800c706:	9002      	str	r0, [sp, #8]
 800c708:	f000 fc0c 	bl	800cf24 <__mcmp>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	9b00      	ldr	r3, [sp, #0]
 800c710:	dc02      	bgt.n	800c718 <_dtoa_r+0xa78>
 800c712:	d1e0      	bne.n	800c6d6 <_dtoa_r+0xa36>
 800c714:	07da      	lsls	r2, r3, #31
 800c716:	d5de      	bpl.n	800c6d6 <_dtoa_r+0xa36>
 800c718:	2b39      	cmp	r3, #57	@ 0x39
 800c71a:	d1da      	bne.n	800c6d2 <_dtoa_r+0xa32>
 800c71c:	2339      	movs	r3, #57	@ 0x39
 800c71e:	f88b 3000 	strb.w	r3, [fp]
 800c722:	4633      	mov	r3, r6
 800c724:	461e      	mov	r6, r3
 800c726:	3b01      	subs	r3, #1
 800c728:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c72c:	2a39      	cmp	r2, #57	@ 0x39
 800c72e:	d04e      	beq.n	800c7ce <_dtoa_r+0xb2e>
 800c730:	3201      	adds	r2, #1
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	e501      	b.n	800c13a <_dtoa_r+0x49a>
 800c736:	2a00      	cmp	r2, #0
 800c738:	dd03      	ble.n	800c742 <_dtoa_r+0xaa2>
 800c73a:	2b39      	cmp	r3, #57	@ 0x39
 800c73c:	d0ee      	beq.n	800c71c <_dtoa_r+0xa7c>
 800c73e:	3301      	adds	r3, #1
 800c740:	e7c9      	b.n	800c6d6 <_dtoa_r+0xa36>
 800c742:	9a00      	ldr	r2, [sp, #0]
 800c744:	9908      	ldr	r1, [sp, #32]
 800c746:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c74a:	428a      	cmp	r2, r1
 800c74c:	d028      	beq.n	800c7a0 <_dtoa_r+0xb00>
 800c74e:	9902      	ldr	r1, [sp, #8]
 800c750:	2300      	movs	r3, #0
 800c752:	220a      	movs	r2, #10
 800c754:	4648      	mov	r0, r9
 800c756:	f000 f9d5 	bl	800cb04 <__multadd>
 800c75a:	42af      	cmp	r7, r5
 800c75c:	9002      	str	r0, [sp, #8]
 800c75e:	f04f 0300 	mov.w	r3, #0
 800c762:	f04f 020a 	mov.w	r2, #10
 800c766:	4639      	mov	r1, r7
 800c768:	4648      	mov	r0, r9
 800c76a:	d107      	bne.n	800c77c <_dtoa_r+0xadc>
 800c76c:	f000 f9ca 	bl	800cb04 <__multadd>
 800c770:	4607      	mov	r7, r0
 800c772:	4605      	mov	r5, r0
 800c774:	9b00      	ldr	r3, [sp, #0]
 800c776:	3301      	adds	r3, #1
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	e777      	b.n	800c66c <_dtoa_r+0x9cc>
 800c77c:	f000 f9c2 	bl	800cb04 <__multadd>
 800c780:	4629      	mov	r1, r5
 800c782:	4607      	mov	r7, r0
 800c784:	2300      	movs	r3, #0
 800c786:	220a      	movs	r2, #10
 800c788:	4648      	mov	r0, r9
 800c78a:	f000 f9bb 	bl	800cb04 <__multadd>
 800c78e:	4605      	mov	r5, r0
 800c790:	e7f0      	b.n	800c774 <_dtoa_r+0xad4>
 800c792:	f1bb 0f00 	cmp.w	fp, #0
 800c796:	bfcc      	ite	gt
 800c798:	465e      	movgt	r6, fp
 800c79a:	2601      	movle	r6, #1
 800c79c:	4456      	add	r6, sl
 800c79e:	2700      	movs	r7, #0
 800c7a0:	9902      	ldr	r1, [sp, #8]
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	4648      	mov	r0, r9
 800c7a8:	f000 fb50 	bl	800ce4c <__lshift>
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	9002      	str	r0, [sp, #8]
 800c7b0:	f000 fbb8 	bl	800cf24 <__mcmp>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	dcb4      	bgt.n	800c722 <_dtoa_r+0xa82>
 800c7b8:	d102      	bne.n	800c7c0 <_dtoa_r+0xb20>
 800c7ba:	9b00      	ldr	r3, [sp, #0]
 800c7bc:	07db      	lsls	r3, r3, #31
 800c7be:	d4b0      	bmi.n	800c722 <_dtoa_r+0xa82>
 800c7c0:	4633      	mov	r3, r6
 800c7c2:	461e      	mov	r6, r3
 800c7c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7c8:	2a30      	cmp	r2, #48	@ 0x30
 800c7ca:	d0fa      	beq.n	800c7c2 <_dtoa_r+0xb22>
 800c7cc:	e4b5      	b.n	800c13a <_dtoa_r+0x49a>
 800c7ce:	459a      	cmp	sl, r3
 800c7d0:	d1a8      	bne.n	800c724 <_dtoa_r+0xa84>
 800c7d2:	2331      	movs	r3, #49	@ 0x31
 800c7d4:	f108 0801 	add.w	r8, r8, #1
 800c7d8:	f88a 3000 	strb.w	r3, [sl]
 800c7dc:	e4ad      	b.n	800c13a <_dtoa_r+0x49a>
 800c7de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c83c <_dtoa_r+0xb9c>
 800c7e4:	b11b      	cbz	r3, 800c7ee <_dtoa_r+0xb4e>
 800c7e6:	f10a 0308 	add.w	r3, sl, #8
 800c7ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	b017      	add	sp, #92	@ 0x5c
 800c7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f6:	9b07      	ldr	r3, [sp, #28]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	f77f ae2e 	ble.w	800c45a <_dtoa_r+0x7ba>
 800c7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c800:	9308      	str	r3, [sp, #32]
 800c802:	2001      	movs	r0, #1
 800c804:	e64d      	b.n	800c4a2 <_dtoa_r+0x802>
 800c806:	f1bb 0f00 	cmp.w	fp, #0
 800c80a:	f77f aed9 	ble.w	800c5c0 <_dtoa_r+0x920>
 800c80e:	4656      	mov	r6, sl
 800c810:	9802      	ldr	r0, [sp, #8]
 800c812:	4621      	mov	r1, r4
 800c814:	f7ff f9bc 	bl	800bb90 <quorem>
 800c818:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c81c:	f806 3b01 	strb.w	r3, [r6], #1
 800c820:	eba6 020a 	sub.w	r2, r6, sl
 800c824:	4593      	cmp	fp, r2
 800c826:	ddb4      	ble.n	800c792 <_dtoa_r+0xaf2>
 800c828:	9902      	ldr	r1, [sp, #8]
 800c82a:	2300      	movs	r3, #0
 800c82c:	220a      	movs	r2, #10
 800c82e:	4648      	mov	r0, r9
 800c830:	f000 f968 	bl	800cb04 <__multadd>
 800c834:	9002      	str	r0, [sp, #8]
 800c836:	e7eb      	b.n	800c810 <_dtoa_r+0xb70>
 800c838:	0800dc34 	.word	0x0800dc34
 800c83c:	0800dbb8 	.word	0x0800dbb8

0800c840 <_free_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4605      	mov	r5, r0
 800c844:	2900      	cmp	r1, #0
 800c846:	d041      	beq.n	800c8cc <_free_r+0x8c>
 800c848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84c:	1f0c      	subs	r4, r1, #4
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfb8      	it	lt
 800c852:	18e4      	addlt	r4, r4, r3
 800c854:	f000 f8e8 	bl	800ca28 <__malloc_lock>
 800c858:	4a1d      	ldr	r2, [pc, #116]	@ (800c8d0 <_free_r+0x90>)
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	b933      	cbnz	r3, 800c86c <_free_r+0x2c>
 800c85e:	6063      	str	r3, [r4, #4]
 800c860:	6014      	str	r4, [r2, #0]
 800c862:	4628      	mov	r0, r5
 800c864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c868:	f000 b8e4 	b.w	800ca34 <__malloc_unlock>
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	d908      	bls.n	800c882 <_free_r+0x42>
 800c870:	6820      	ldr	r0, [r4, #0]
 800c872:	1821      	adds	r1, r4, r0
 800c874:	428b      	cmp	r3, r1
 800c876:	bf01      	itttt	eq
 800c878:	6819      	ldreq	r1, [r3, #0]
 800c87a:	685b      	ldreq	r3, [r3, #4]
 800c87c:	1809      	addeq	r1, r1, r0
 800c87e:	6021      	streq	r1, [r4, #0]
 800c880:	e7ed      	b.n	800c85e <_free_r+0x1e>
 800c882:	461a      	mov	r2, r3
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	b10b      	cbz	r3, 800c88c <_free_r+0x4c>
 800c888:	42a3      	cmp	r3, r4
 800c88a:	d9fa      	bls.n	800c882 <_free_r+0x42>
 800c88c:	6811      	ldr	r1, [r2, #0]
 800c88e:	1850      	adds	r0, r2, r1
 800c890:	42a0      	cmp	r0, r4
 800c892:	d10b      	bne.n	800c8ac <_free_r+0x6c>
 800c894:	6820      	ldr	r0, [r4, #0]
 800c896:	4401      	add	r1, r0
 800c898:	1850      	adds	r0, r2, r1
 800c89a:	4283      	cmp	r3, r0
 800c89c:	6011      	str	r1, [r2, #0]
 800c89e:	d1e0      	bne.n	800c862 <_free_r+0x22>
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	6053      	str	r3, [r2, #4]
 800c8a6:	4408      	add	r0, r1
 800c8a8:	6010      	str	r0, [r2, #0]
 800c8aa:	e7da      	b.n	800c862 <_free_r+0x22>
 800c8ac:	d902      	bls.n	800c8b4 <_free_r+0x74>
 800c8ae:	230c      	movs	r3, #12
 800c8b0:	602b      	str	r3, [r5, #0]
 800c8b2:	e7d6      	b.n	800c862 <_free_r+0x22>
 800c8b4:	6820      	ldr	r0, [r4, #0]
 800c8b6:	1821      	adds	r1, r4, r0
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	bf04      	itt	eq
 800c8bc:	6819      	ldreq	r1, [r3, #0]
 800c8be:	685b      	ldreq	r3, [r3, #4]
 800c8c0:	6063      	str	r3, [r4, #4]
 800c8c2:	bf04      	itt	eq
 800c8c4:	1809      	addeq	r1, r1, r0
 800c8c6:	6021      	streq	r1, [r4, #0]
 800c8c8:	6054      	str	r4, [r2, #4]
 800c8ca:	e7ca      	b.n	800c862 <_free_r+0x22>
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20002110 	.word	0x20002110

0800c8d4 <malloc>:
 800c8d4:	4b02      	ldr	r3, [pc, #8]	@ (800c8e0 <malloc+0xc>)
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	f000 b825 	b.w	800c928 <_malloc_r>
 800c8de:	bf00      	nop
 800c8e0:	200001a4 	.word	0x200001a4

0800c8e4 <sbrk_aligned>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	4e0f      	ldr	r6, [pc, #60]	@ (800c924 <sbrk_aligned+0x40>)
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	6831      	ldr	r1, [r6, #0]
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	b911      	cbnz	r1, 800c8f6 <sbrk_aligned+0x12>
 800c8f0:	f000 fed6 	bl	800d6a0 <_sbrk_r>
 800c8f4:	6030      	str	r0, [r6, #0]
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f000 fed1 	bl	800d6a0 <_sbrk_r>
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	d103      	bne.n	800c90a <sbrk_aligned+0x26>
 800c902:	f04f 34ff 	mov.w	r4, #4294967295
 800c906:	4620      	mov	r0, r4
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	1cc4      	adds	r4, r0, #3
 800c90c:	f024 0403 	bic.w	r4, r4, #3
 800c910:	42a0      	cmp	r0, r4
 800c912:	d0f8      	beq.n	800c906 <sbrk_aligned+0x22>
 800c914:	1a21      	subs	r1, r4, r0
 800c916:	4628      	mov	r0, r5
 800c918:	f000 fec2 	bl	800d6a0 <_sbrk_r>
 800c91c:	3001      	adds	r0, #1
 800c91e:	d1f2      	bne.n	800c906 <sbrk_aligned+0x22>
 800c920:	e7ef      	b.n	800c902 <sbrk_aligned+0x1e>
 800c922:	bf00      	nop
 800c924:	2000210c 	.word	0x2000210c

0800c928 <_malloc_r>:
 800c928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c92c:	1ccd      	adds	r5, r1, #3
 800c92e:	f025 0503 	bic.w	r5, r5, #3
 800c932:	3508      	adds	r5, #8
 800c934:	2d0c      	cmp	r5, #12
 800c936:	bf38      	it	cc
 800c938:	250c      	movcc	r5, #12
 800c93a:	2d00      	cmp	r5, #0
 800c93c:	4606      	mov	r6, r0
 800c93e:	db01      	blt.n	800c944 <_malloc_r+0x1c>
 800c940:	42a9      	cmp	r1, r5
 800c942:	d904      	bls.n	800c94e <_malloc_r+0x26>
 800c944:	230c      	movs	r3, #12
 800c946:	6033      	str	r3, [r6, #0]
 800c948:	2000      	movs	r0, #0
 800c94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c94e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca24 <_malloc_r+0xfc>
 800c952:	f000 f869 	bl	800ca28 <__malloc_lock>
 800c956:	f8d8 3000 	ldr.w	r3, [r8]
 800c95a:	461c      	mov	r4, r3
 800c95c:	bb44      	cbnz	r4, 800c9b0 <_malloc_r+0x88>
 800c95e:	4629      	mov	r1, r5
 800c960:	4630      	mov	r0, r6
 800c962:	f7ff ffbf 	bl	800c8e4 <sbrk_aligned>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	4604      	mov	r4, r0
 800c96a:	d158      	bne.n	800ca1e <_malloc_r+0xf6>
 800c96c:	f8d8 4000 	ldr.w	r4, [r8]
 800c970:	4627      	mov	r7, r4
 800c972:	2f00      	cmp	r7, #0
 800c974:	d143      	bne.n	800c9fe <_malloc_r+0xd6>
 800c976:	2c00      	cmp	r4, #0
 800c978:	d04b      	beq.n	800ca12 <_malloc_r+0xea>
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	4639      	mov	r1, r7
 800c97e:	4630      	mov	r0, r6
 800c980:	eb04 0903 	add.w	r9, r4, r3
 800c984:	f000 fe8c 	bl	800d6a0 <_sbrk_r>
 800c988:	4581      	cmp	r9, r0
 800c98a:	d142      	bne.n	800ca12 <_malloc_r+0xea>
 800c98c:	6821      	ldr	r1, [r4, #0]
 800c98e:	1a6d      	subs	r5, r5, r1
 800c990:	4629      	mov	r1, r5
 800c992:	4630      	mov	r0, r6
 800c994:	f7ff ffa6 	bl	800c8e4 <sbrk_aligned>
 800c998:	3001      	adds	r0, #1
 800c99a:	d03a      	beq.n	800ca12 <_malloc_r+0xea>
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	442b      	add	r3, r5
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	bb62      	cbnz	r2, 800ca04 <_malloc_r+0xdc>
 800c9aa:	f8c8 7000 	str.w	r7, [r8]
 800c9ae:	e00f      	b.n	800c9d0 <_malloc_r+0xa8>
 800c9b0:	6822      	ldr	r2, [r4, #0]
 800c9b2:	1b52      	subs	r2, r2, r5
 800c9b4:	d420      	bmi.n	800c9f8 <_malloc_r+0xd0>
 800c9b6:	2a0b      	cmp	r2, #11
 800c9b8:	d917      	bls.n	800c9ea <_malloc_r+0xc2>
 800c9ba:	1961      	adds	r1, r4, r5
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	6025      	str	r5, [r4, #0]
 800c9c0:	bf18      	it	ne
 800c9c2:	6059      	strne	r1, [r3, #4]
 800c9c4:	6863      	ldr	r3, [r4, #4]
 800c9c6:	bf08      	it	eq
 800c9c8:	f8c8 1000 	streq.w	r1, [r8]
 800c9cc:	5162      	str	r2, [r4, r5]
 800c9ce:	604b      	str	r3, [r1, #4]
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f000 f82f 	bl	800ca34 <__malloc_unlock>
 800c9d6:	f104 000b 	add.w	r0, r4, #11
 800c9da:	1d23      	adds	r3, r4, #4
 800c9dc:	f020 0007 	bic.w	r0, r0, #7
 800c9e0:	1ac2      	subs	r2, r0, r3
 800c9e2:	bf1c      	itt	ne
 800c9e4:	1a1b      	subne	r3, r3, r0
 800c9e6:	50a3      	strne	r3, [r4, r2]
 800c9e8:	e7af      	b.n	800c94a <_malloc_r+0x22>
 800c9ea:	6862      	ldr	r2, [r4, #4]
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	bf0c      	ite	eq
 800c9f0:	f8c8 2000 	streq.w	r2, [r8]
 800c9f4:	605a      	strne	r2, [r3, #4]
 800c9f6:	e7eb      	b.n	800c9d0 <_malloc_r+0xa8>
 800c9f8:	4623      	mov	r3, r4
 800c9fa:	6864      	ldr	r4, [r4, #4]
 800c9fc:	e7ae      	b.n	800c95c <_malloc_r+0x34>
 800c9fe:	463c      	mov	r4, r7
 800ca00:	687f      	ldr	r7, [r7, #4]
 800ca02:	e7b6      	b.n	800c972 <_malloc_r+0x4a>
 800ca04:	461a      	mov	r2, r3
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	42a3      	cmp	r3, r4
 800ca0a:	d1fb      	bne.n	800ca04 <_malloc_r+0xdc>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6053      	str	r3, [r2, #4]
 800ca10:	e7de      	b.n	800c9d0 <_malloc_r+0xa8>
 800ca12:	230c      	movs	r3, #12
 800ca14:	6033      	str	r3, [r6, #0]
 800ca16:	4630      	mov	r0, r6
 800ca18:	f000 f80c 	bl	800ca34 <__malloc_unlock>
 800ca1c:	e794      	b.n	800c948 <_malloc_r+0x20>
 800ca1e:	6005      	str	r5, [r0, #0]
 800ca20:	e7d6      	b.n	800c9d0 <_malloc_r+0xa8>
 800ca22:	bf00      	nop
 800ca24:	20002110 	.word	0x20002110

0800ca28 <__malloc_lock>:
 800ca28:	4801      	ldr	r0, [pc, #4]	@ (800ca30 <__malloc_lock+0x8>)
 800ca2a:	f7ff b89a 	b.w	800bb62 <__retarget_lock_acquire_recursive>
 800ca2e:	bf00      	nop
 800ca30:	20002108 	.word	0x20002108

0800ca34 <__malloc_unlock>:
 800ca34:	4801      	ldr	r0, [pc, #4]	@ (800ca3c <__malloc_unlock+0x8>)
 800ca36:	f7ff b895 	b.w	800bb64 <__retarget_lock_release_recursive>
 800ca3a:	bf00      	nop
 800ca3c:	20002108 	.word	0x20002108

0800ca40 <_Balloc>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	69c6      	ldr	r6, [r0, #28]
 800ca44:	4604      	mov	r4, r0
 800ca46:	460d      	mov	r5, r1
 800ca48:	b976      	cbnz	r6, 800ca68 <_Balloc+0x28>
 800ca4a:	2010      	movs	r0, #16
 800ca4c:	f7ff ff42 	bl	800c8d4 <malloc>
 800ca50:	4602      	mov	r2, r0
 800ca52:	61e0      	str	r0, [r4, #28]
 800ca54:	b920      	cbnz	r0, 800ca60 <_Balloc+0x20>
 800ca56:	4b18      	ldr	r3, [pc, #96]	@ (800cab8 <_Balloc+0x78>)
 800ca58:	4818      	ldr	r0, [pc, #96]	@ (800cabc <_Balloc+0x7c>)
 800ca5a:	216b      	movs	r1, #107	@ 0x6b
 800ca5c:	f7fe f974 	bl	800ad48 <__assert_func>
 800ca60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca64:	6006      	str	r6, [r0, #0]
 800ca66:	60c6      	str	r6, [r0, #12]
 800ca68:	69e6      	ldr	r6, [r4, #28]
 800ca6a:	68f3      	ldr	r3, [r6, #12]
 800ca6c:	b183      	cbz	r3, 800ca90 <_Balloc+0x50>
 800ca6e:	69e3      	ldr	r3, [r4, #28]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca76:	b9b8      	cbnz	r0, 800caa8 <_Balloc+0x68>
 800ca78:	2101      	movs	r1, #1
 800ca7a:	fa01 f605 	lsl.w	r6, r1, r5
 800ca7e:	1d72      	adds	r2, r6, #5
 800ca80:	0092      	lsls	r2, r2, #2
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 fe1c 	bl	800d6c0 <_calloc_r>
 800ca88:	b160      	cbz	r0, 800caa4 <_Balloc+0x64>
 800ca8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca8e:	e00e      	b.n	800caae <_Balloc+0x6e>
 800ca90:	2221      	movs	r2, #33	@ 0x21
 800ca92:	2104      	movs	r1, #4
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fe13 	bl	800d6c0 <_calloc_r>
 800ca9a:	69e3      	ldr	r3, [r4, #28]
 800ca9c:	60f0      	str	r0, [r6, #12]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1e4      	bne.n	800ca6e <_Balloc+0x2e>
 800caa4:	2000      	movs	r0, #0
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	6802      	ldr	r2, [r0, #0]
 800caaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caae:	2300      	movs	r3, #0
 800cab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cab4:	e7f7      	b.n	800caa6 <_Balloc+0x66>
 800cab6:	bf00      	nop
 800cab8:	0800dbc5 	.word	0x0800dbc5
 800cabc:	0800dc45 	.word	0x0800dc45

0800cac0 <_Bfree>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	69c6      	ldr	r6, [r0, #28]
 800cac4:	4605      	mov	r5, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	b976      	cbnz	r6, 800cae8 <_Bfree+0x28>
 800caca:	2010      	movs	r0, #16
 800cacc:	f7ff ff02 	bl	800c8d4 <malloc>
 800cad0:	4602      	mov	r2, r0
 800cad2:	61e8      	str	r0, [r5, #28]
 800cad4:	b920      	cbnz	r0, 800cae0 <_Bfree+0x20>
 800cad6:	4b09      	ldr	r3, [pc, #36]	@ (800cafc <_Bfree+0x3c>)
 800cad8:	4809      	ldr	r0, [pc, #36]	@ (800cb00 <_Bfree+0x40>)
 800cada:	218f      	movs	r1, #143	@ 0x8f
 800cadc:	f7fe f934 	bl	800ad48 <__assert_func>
 800cae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cae4:	6006      	str	r6, [r0, #0]
 800cae6:	60c6      	str	r6, [r0, #12]
 800cae8:	b13c      	cbz	r4, 800cafa <_Bfree+0x3a>
 800caea:	69eb      	ldr	r3, [r5, #28]
 800caec:	6862      	ldr	r2, [r4, #4]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caf4:	6021      	str	r1, [r4, #0]
 800caf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	0800dbc5 	.word	0x0800dbc5
 800cb00:	0800dc45 	.word	0x0800dc45

0800cb04 <__multadd>:
 800cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb08:	690d      	ldr	r5, [r1, #16]
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	461e      	mov	r6, r3
 800cb10:	f101 0c14 	add.w	ip, r1, #20
 800cb14:	2000      	movs	r0, #0
 800cb16:	f8dc 3000 	ldr.w	r3, [ip]
 800cb1a:	b299      	uxth	r1, r3
 800cb1c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb20:	0c1e      	lsrs	r6, r3, #16
 800cb22:	0c0b      	lsrs	r3, r1, #16
 800cb24:	fb02 3306 	mla	r3, r2, r6, r3
 800cb28:	b289      	uxth	r1, r1
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb30:	4285      	cmp	r5, r0
 800cb32:	f84c 1b04 	str.w	r1, [ip], #4
 800cb36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb3a:	dcec      	bgt.n	800cb16 <__multadd+0x12>
 800cb3c:	b30e      	cbz	r6, 800cb82 <__multadd+0x7e>
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	dc19      	bgt.n	800cb78 <__multadd+0x74>
 800cb44:	6861      	ldr	r1, [r4, #4]
 800cb46:	4638      	mov	r0, r7
 800cb48:	3101      	adds	r1, #1
 800cb4a:	f7ff ff79 	bl	800ca40 <_Balloc>
 800cb4e:	4680      	mov	r8, r0
 800cb50:	b928      	cbnz	r0, 800cb5e <__multadd+0x5a>
 800cb52:	4602      	mov	r2, r0
 800cb54:	4b0c      	ldr	r3, [pc, #48]	@ (800cb88 <__multadd+0x84>)
 800cb56:	480d      	ldr	r0, [pc, #52]	@ (800cb8c <__multadd+0x88>)
 800cb58:	21ba      	movs	r1, #186	@ 0xba
 800cb5a:	f7fe f8f5 	bl	800ad48 <__assert_func>
 800cb5e:	6922      	ldr	r2, [r4, #16]
 800cb60:	3202      	adds	r2, #2
 800cb62:	f104 010c 	add.w	r1, r4, #12
 800cb66:	0092      	lsls	r2, r2, #2
 800cb68:	300c      	adds	r0, #12
 800cb6a:	f7fe fffc 	bl	800bb66 <memcpy>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7ff ffa5 	bl	800cac0 <_Bfree>
 800cb76:	4644      	mov	r4, r8
 800cb78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb7c:	3501      	adds	r5, #1
 800cb7e:	615e      	str	r6, [r3, #20]
 800cb80:	6125      	str	r5, [r4, #16]
 800cb82:	4620      	mov	r0, r4
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb88:	0800dc34 	.word	0x0800dc34
 800cb8c:	0800dc45 	.word	0x0800dc45

0800cb90 <__hi0bits>:
 800cb90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb94:	4603      	mov	r3, r0
 800cb96:	bf36      	itet	cc
 800cb98:	0403      	lslcc	r3, r0, #16
 800cb9a:	2000      	movcs	r0, #0
 800cb9c:	2010      	movcc	r0, #16
 800cb9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cba2:	bf3c      	itt	cc
 800cba4:	021b      	lslcc	r3, r3, #8
 800cba6:	3008      	addcc	r0, #8
 800cba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbac:	bf3c      	itt	cc
 800cbae:	011b      	lslcc	r3, r3, #4
 800cbb0:	3004      	addcc	r0, #4
 800cbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbb6:	bf3c      	itt	cc
 800cbb8:	009b      	lslcc	r3, r3, #2
 800cbba:	3002      	addcc	r0, #2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	db05      	blt.n	800cbcc <__hi0bits+0x3c>
 800cbc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbc4:	f100 0001 	add.w	r0, r0, #1
 800cbc8:	bf08      	it	eq
 800cbca:	2020      	moveq	r0, #32
 800cbcc:	4770      	bx	lr

0800cbce <__lo0bits>:
 800cbce:	6803      	ldr	r3, [r0, #0]
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	f013 0007 	ands.w	r0, r3, #7
 800cbd6:	d00b      	beq.n	800cbf0 <__lo0bits+0x22>
 800cbd8:	07d9      	lsls	r1, r3, #31
 800cbda:	d421      	bmi.n	800cc20 <__lo0bits+0x52>
 800cbdc:	0798      	lsls	r0, r3, #30
 800cbde:	bf49      	itett	mi
 800cbe0:	085b      	lsrmi	r3, r3, #1
 800cbe2:	089b      	lsrpl	r3, r3, #2
 800cbe4:	2001      	movmi	r0, #1
 800cbe6:	6013      	strmi	r3, [r2, #0]
 800cbe8:	bf5c      	itt	pl
 800cbea:	6013      	strpl	r3, [r2, #0]
 800cbec:	2002      	movpl	r0, #2
 800cbee:	4770      	bx	lr
 800cbf0:	b299      	uxth	r1, r3
 800cbf2:	b909      	cbnz	r1, 800cbf8 <__lo0bits+0x2a>
 800cbf4:	0c1b      	lsrs	r3, r3, #16
 800cbf6:	2010      	movs	r0, #16
 800cbf8:	b2d9      	uxtb	r1, r3
 800cbfa:	b909      	cbnz	r1, 800cc00 <__lo0bits+0x32>
 800cbfc:	3008      	adds	r0, #8
 800cbfe:	0a1b      	lsrs	r3, r3, #8
 800cc00:	0719      	lsls	r1, r3, #28
 800cc02:	bf04      	itt	eq
 800cc04:	091b      	lsreq	r3, r3, #4
 800cc06:	3004      	addeq	r0, #4
 800cc08:	0799      	lsls	r1, r3, #30
 800cc0a:	bf04      	itt	eq
 800cc0c:	089b      	lsreq	r3, r3, #2
 800cc0e:	3002      	addeq	r0, #2
 800cc10:	07d9      	lsls	r1, r3, #31
 800cc12:	d403      	bmi.n	800cc1c <__lo0bits+0x4e>
 800cc14:	085b      	lsrs	r3, r3, #1
 800cc16:	f100 0001 	add.w	r0, r0, #1
 800cc1a:	d003      	beq.n	800cc24 <__lo0bits+0x56>
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	4770      	bx	lr
 800cc20:	2000      	movs	r0, #0
 800cc22:	4770      	bx	lr
 800cc24:	2020      	movs	r0, #32
 800cc26:	4770      	bx	lr

0800cc28 <__i2b>:
 800cc28:	b510      	push	{r4, lr}
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	f7ff ff07 	bl	800ca40 <_Balloc>
 800cc32:	4602      	mov	r2, r0
 800cc34:	b928      	cbnz	r0, 800cc42 <__i2b+0x1a>
 800cc36:	4b05      	ldr	r3, [pc, #20]	@ (800cc4c <__i2b+0x24>)
 800cc38:	4805      	ldr	r0, [pc, #20]	@ (800cc50 <__i2b+0x28>)
 800cc3a:	f240 1145 	movw	r1, #325	@ 0x145
 800cc3e:	f7fe f883 	bl	800ad48 <__assert_func>
 800cc42:	2301      	movs	r3, #1
 800cc44:	6144      	str	r4, [r0, #20]
 800cc46:	6103      	str	r3, [r0, #16]
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800dc34 	.word	0x0800dc34
 800cc50:	0800dc45 	.word	0x0800dc45

0800cc54 <__multiply>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	4617      	mov	r7, r2
 800cc5a:	690a      	ldr	r2, [r1, #16]
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	bfa8      	it	ge
 800cc62:	463b      	movge	r3, r7
 800cc64:	4689      	mov	r9, r1
 800cc66:	bfa4      	itt	ge
 800cc68:	460f      	movge	r7, r1
 800cc6a:	4699      	movge	r9, r3
 800cc6c:	693d      	ldr	r5, [r7, #16]
 800cc6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	6879      	ldr	r1, [r7, #4]
 800cc76:	eb05 060a 	add.w	r6, r5, sl
 800cc7a:	42b3      	cmp	r3, r6
 800cc7c:	b085      	sub	sp, #20
 800cc7e:	bfb8      	it	lt
 800cc80:	3101      	addlt	r1, #1
 800cc82:	f7ff fedd 	bl	800ca40 <_Balloc>
 800cc86:	b930      	cbnz	r0, 800cc96 <__multiply+0x42>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	4b41      	ldr	r3, [pc, #260]	@ (800cd90 <__multiply+0x13c>)
 800cc8c:	4841      	ldr	r0, [pc, #260]	@ (800cd94 <__multiply+0x140>)
 800cc8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc92:	f7fe f859 	bl	800ad48 <__assert_func>
 800cc96:	f100 0414 	add.w	r4, r0, #20
 800cc9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc9e:	4623      	mov	r3, r4
 800cca0:	2200      	movs	r2, #0
 800cca2:	4573      	cmp	r3, lr
 800cca4:	d320      	bcc.n	800cce8 <__multiply+0x94>
 800cca6:	f107 0814 	add.w	r8, r7, #20
 800ccaa:	f109 0114 	add.w	r1, r9, #20
 800ccae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ccb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ccb6:	9302      	str	r3, [sp, #8]
 800ccb8:	1beb      	subs	r3, r5, r7
 800ccba:	3b15      	subs	r3, #21
 800ccbc:	f023 0303 	bic.w	r3, r3, #3
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	3715      	adds	r7, #21
 800ccc4:	42bd      	cmp	r5, r7
 800ccc6:	bf38      	it	cc
 800ccc8:	2304      	movcc	r3, #4
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	9b02      	ldr	r3, [sp, #8]
 800ccce:	9103      	str	r1, [sp, #12]
 800ccd0:	428b      	cmp	r3, r1
 800ccd2:	d80c      	bhi.n	800ccee <__multiply+0x9a>
 800ccd4:	2e00      	cmp	r6, #0
 800ccd6:	dd03      	ble.n	800cce0 <__multiply+0x8c>
 800ccd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d055      	beq.n	800cd8c <__multiply+0x138>
 800cce0:	6106      	str	r6, [r0, #16]
 800cce2:	b005      	add	sp, #20
 800cce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce8:	f843 2b04 	str.w	r2, [r3], #4
 800ccec:	e7d9      	b.n	800cca2 <__multiply+0x4e>
 800ccee:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccf2:	f1ba 0f00 	cmp.w	sl, #0
 800ccf6:	d01f      	beq.n	800cd38 <__multiply+0xe4>
 800ccf8:	46c4      	mov	ip, r8
 800ccfa:	46a1      	mov	r9, r4
 800ccfc:	2700      	movs	r7, #0
 800ccfe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd02:	f8d9 3000 	ldr.w	r3, [r9]
 800cd06:	fa1f fb82 	uxth.w	fp, r2
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd10:	443b      	add	r3, r7
 800cd12:	f8d9 7000 	ldr.w	r7, [r9]
 800cd16:	0c12      	lsrs	r2, r2, #16
 800cd18:	0c3f      	lsrs	r7, r7, #16
 800cd1a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd28:	4565      	cmp	r5, ip
 800cd2a:	f849 3b04 	str.w	r3, [r9], #4
 800cd2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd32:	d8e4      	bhi.n	800ccfe <__multiply+0xaa>
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	50e7      	str	r7, [r4, r3]
 800cd38:	9b03      	ldr	r3, [sp, #12]
 800cd3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd3e:	3104      	adds	r1, #4
 800cd40:	f1b9 0f00 	cmp.w	r9, #0
 800cd44:	d020      	beq.n	800cd88 <__multiply+0x134>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	4647      	mov	r7, r8
 800cd4a:	46a4      	mov	ip, r4
 800cd4c:	f04f 0a00 	mov.w	sl, #0
 800cd50:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd58:	fb09 220b 	mla	r2, r9, fp, r2
 800cd5c:	4452      	add	r2, sl
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd64:	f84c 3b04 	str.w	r3, [ip], #4
 800cd68:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd70:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd74:	fb09 330a 	mla	r3, r9, sl, r3
 800cd78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cd7c:	42bd      	cmp	r5, r7
 800cd7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd82:	d8e5      	bhi.n	800cd50 <__multiply+0xfc>
 800cd84:	9a01      	ldr	r2, [sp, #4]
 800cd86:	50a3      	str	r3, [r4, r2]
 800cd88:	3404      	adds	r4, #4
 800cd8a:	e79f      	b.n	800cccc <__multiply+0x78>
 800cd8c:	3e01      	subs	r6, #1
 800cd8e:	e7a1      	b.n	800ccd4 <__multiply+0x80>
 800cd90:	0800dc34 	.word	0x0800dc34
 800cd94:	0800dc45 	.word	0x0800dc45

0800cd98 <__pow5mult>:
 800cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	4615      	mov	r5, r2
 800cd9e:	f012 0203 	ands.w	r2, r2, #3
 800cda2:	4607      	mov	r7, r0
 800cda4:	460e      	mov	r6, r1
 800cda6:	d007      	beq.n	800cdb8 <__pow5mult+0x20>
 800cda8:	4c25      	ldr	r4, [pc, #148]	@ (800ce40 <__pow5mult+0xa8>)
 800cdaa:	3a01      	subs	r2, #1
 800cdac:	2300      	movs	r3, #0
 800cdae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdb2:	f7ff fea7 	bl	800cb04 <__multadd>
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	10ad      	asrs	r5, r5, #2
 800cdba:	d03d      	beq.n	800ce38 <__pow5mult+0xa0>
 800cdbc:	69fc      	ldr	r4, [r7, #28]
 800cdbe:	b97c      	cbnz	r4, 800cde0 <__pow5mult+0x48>
 800cdc0:	2010      	movs	r0, #16
 800cdc2:	f7ff fd87 	bl	800c8d4 <malloc>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	61f8      	str	r0, [r7, #28]
 800cdca:	b928      	cbnz	r0, 800cdd8 <__pow5mult+0x40>
 800cdcc:	4b1d      	ldr	r3, [pc, #116]	@ (800ce44 <__pow5mult+0xac>)
 800cdce:	481e      	ldr	r0, [pc, #120]	@ (800ce48 <__pow5mult+0xb0>)
 800cdd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdd4:	f7fd ffb8 	bl	800ad48 <__assert_func>
 800cdd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cddc:	6004      	str	r4, [r0, #0]
 800cdde:	60c4      	str	r4, [r0, #12]
 800cde0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cde4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cde8:	b94c      	cbnz	r4, 800cdfe <__pow5mult+0x66>
 800cdea:	f240 2171 	movw	r1, #625	@ 0x271
 800cdee:	4638      	mov	r0, r7
 800cdf0:	f7ff ff1a 	bl	800cc28 <__i2b>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	6003      	str	r3, [r0, #0]
 800cdfe:	f04f 0900 	mov.w	r9, #0
 800ce02:	07eb      	lsls	r3, r5, #31
 800ce04:	d50a      	bpl.n	800ce1c <__pow5mult+0x84>
 800ce06:	4631      	mov	r1, r6
 800ce08:	4622      	mov	r2, r4
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	f7ff ff22 	bl	800cc54 <__multiply>
 800ce10:	4631      	mov	r1, r6
 800ce12:	4680      	mov	r8, r0
 800ce14:	4638      	mov	r0, r7
 800ce16:	f7ff fe53 	bl	800cac0 <_Bfree>
 800ce1a:	4646      	mov	r6, r8
 800ce1c:	106d      	asrs	r5, r5, #1
 800ce1e:	d00b      	beq.n	800ce38 <__pow5mult+0xa0>
 800ce20:	6820      	ldr	r0, [r4, #0]
 800ce22:	b938      	cbnz	r0, 800ce34 <__pow5mult+0x9c>
 800ce24:	4622      	mov	r2, r4
 800ce26:	4621      	mov	r1, r4
 800ce28:	4638      	mov	r0, r7
 800ce2a:	f7ff ff13 	bl	800cc54 <__multiply>
 800ce2e:	6020      	str	r0, [r4, #0]
 800ce30:	f8c0 9000 	str.w	r9, [r0]
 800ce34:	4604      	mov	r4, r0
 800ce36:	e7e4      	b.n	800ce02 <__pow5mult+0x6a>
 800ce38:	4630      	mov	r0, r6
 800ce3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3e:	bf00      	nop
 800ce40:	0800dcbc 	.word	0x0800dcbc
 800ce44:	0800dbc5 	.word	0x0800dbc5
 800ce48:	0800dc45 	.word	0x0800dc45

0800ce4c <__lshift>:
 800ce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce50:	460c      	mov	r4, r1
 800ce52:	6849      	ldr	r1, [r1, #4]
 800ce54:	6923      	ldr	r3, [r4, #16]
 800ce56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce5a:	68a3      	ldr	r3, [r4, #8]
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	4691      	mov	r9, r2
 800ce60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce64:	f108 0601 	add.w	r6, r8, #1
 800ce68:	42b3      	cmp	r3, r6
 800ce6a:	db0b      	blt.n	800ce84 <__lshift+0x38>
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f7ff fde7 	bl	800ca40 <_Balloc>
 800ce72:	4605      	mov	r5, r0
 800ce74:	b948      	cbnz	r0, 800ce8a <__lshift+0x3e>
 800ce76:	4602      	mov	r2, r0
 800ce78:	4b28      	ldr	r3, [pc, #160]	@ (800cf1c <__lshift+0xd0>)
 800ce7a:	4829      	ldr	r0, [pc, #164]	@ (800cf20 <__lshift+0xd4>)
 800ce7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce80:	f7fd ff62 	bl	800ad48 <__assert_func>
 800ce84:	3101      	adds	r1, #1
 800ce86:	005b      	lsls	r3, r3, #1
 800ce88:	e7ee      	b.n	800ce68 <__lshift+0x1c>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f100 0114 	add.w	r1, r0, #20
 800ce90:	f100 0210 	add.w	r2, r0, #16
 800ce94:	4618      	mov	r0, r3
 800ce96:	4553      	cmp	r3, sl
 800ce98:	db33      	blt.n	800cf02 <__lshift+0xb6>
 800ce9a:	6920      	ldr	r0, [r4, #16]
 800ce9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cea0:	f104 0314 	add.w	r3, r4, #20
 800cea4:	f019 091f 	ands.w	r9, r9, #31
 800cea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ceac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ceb0:	d02b      	beq.n	800cf0a <__lshift+0xbe>
 800ceb2:	f1c9 0e20 	rsb	lr, r9, #32
 800ceb6:	468a      	mov	sl, r1
 800ceb8:	2200      	movs	r2, #0
 800ceba:	6818      	ldr	r0, [r3, #0]
 800cebc:	fa00 f009 	lsl.w	r0, r0, r9
 800cec0:	4310      	orrs	r0, r2
 800cec2:	f84a 0b04 	str.w	r0, [sl], #4
 800cec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceca:	459c      	cmp	ip, r3
 800cecc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ced0:	d8f3      	bhi.n	800ceba <__lshift+0x6e>
 800ced2:	ebac 0304 	sub.w	r3, ip, r4
 800ced6:	3b15      	subs	r3, #21
 800ced8:	f023 0303 	bic.w	r3, r3, #3
 800cedc:	3304      	adds	r3, #4
 800cede:	f104 0015 	add.w	r0, r4, #21
 800cee2:	4560      	cmp	r0, ip
 800cee4:	bf88      	it	hi
 800cee6:	2304      	movhi	r3, #4
 800cee8:	50ca      	str	r2, [r1, r3]
 800ceea:	b10a      	cbz	r2, 800cef0 <__lshift+0xa4>
 800ceec:	f108 0602 	add.w	r6, r8, #2
 800cef0:	3e01      	subs	r6, #1
 800cef2:	4638      	mov	r0, r7
 800cef4:	612e      	str	r6, [r5, #16]
 800cef6:	4621      	mov	r1, r4
 800cef8:	f7ff fde2 	bl	800cac0 <_Bfree>
 800cefc:	4628      	mov	r0, r5
 800cefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf02:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf06:	3301      	adds	r3, #1
 800cf08:	e7c5      	b.n	800ce96 <__lshift+0x4a>
 800cf0a:	3904      	subs	r1, #4
 800cf0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf10:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf14:	459c      	cmp	ip, r3
 800cf16:	d8f9      	bhi.n	800cf0c <__lshift+0xc0>
 800cf18:	e7ea      	b.n	800cef0 <__lshift+0xa4>
 800cf1a:	bf00      	nop
 800cf1c:	0800dc34 	.word	0x0800dc34
 800cf20:	0800dc45 	.word	0x0800dc45

0800cf24 <__mcmp>:
 800cf24:	690a      	ldr	r2, [r1, #16]
 800cf26:	4603      	mov	r3, r0
 800cf28:	6900      	ldr	r0, [r0, #16]
 800cf2a:	1a80      	subs	r0, r0, r2
 800cf2c:	b530      	push	{r4, r5, lr}
 800cf2e:	d10e      	bne.n	800cf4e <__mcmp+0x2a>
 800cf30:	3314      	adds	r3, #20
 800cf32:	3114      	adds	r1, #20
 800cf34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf44:	4295      	cmp	r5, r2
 800cf46:	d003      	beq.n	800cf50 <__mcmp+0x2c>
 800cf48:	d205      	bcs.n	800cf56 <__mcmp+0x32>
 800cf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4e:	bd30      	pop	{r4, r5, pc}
 800cf50:	42a3      	cmp	r3, r4
 800cf52:	d3f3      	bcc.n	800cf3c <__mcmp+0x18>
 800cf54:	e7fb      	b.n	800cf4e <__mcmp+0x2a>
 800cf56:	2001      	movs	r0, #1
 800cf58:	e7f9      	b.n	800cf4e <__mcmp+0x2a>
	...

0800cf5c <__mdiff>:
 800cf5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4689      	mov	r9, r1
 800cf62:	4606      	mov	r6, r0
 800cf64:	4611      	mov	r1, r2
 800cf66:	4648      	mov	r0, r9
 800cf68:	4614      	mov	r4, r2
 800cf6a:	f7ff ffdb 	bl	800cf24 <__mcmp>
 800cf6e:	1e05      	subs	r5, r0, #0
 800cf70:	d112      	bne.n	800cf98 <__mdiff+0x3c>
 800cf72:	4629      	mov	r1, r5
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7ff fd63 	bl	800ca40 <_Balloc>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	b928      	cbnz	r0, 800cf8a <__mdiff+0x2e>
 800cf7e:	4b3f      	ldr	r3, [pc, #252]	@ (800d07c <__mdiff+0x120>)
 800cf80:	f240 2137 	movw	r1, #567	@ 0x237
 800cf84:	483e      	ldr	r0, [pc, #248]	@ (800d080 <__mdiff+0x124>)
 800cf86:	f7fd fedf 	bl	800ad48 <__assert_func>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf90:	4610      	mov	r0, r2
 800cf92:	b003      	add	sp, #12
 800cf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf98:	bfbc      	itt	lt
 800cf9a:	464b      	movlt	r3, r9
 800cf9c:	46a1      	movlt	r9, r4
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cfa4:	bfba      	itte	lt
 800cfa6:	461c      	movlt	r4, r3
 800cfa8:	2501      	movlt	r5, #1
 800cfaa:	2500      	movge	r5, #0
 800cfac:	f7ff fd48 	bl	800ca40 <_Balloc>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	b918      	cbnz	r0, 800cfbc <__mdiff+0x60>
 800cfb4:	4b31      	ldr	r3, [pc, #196]	@ (800d07c <__mdiff+0x120>)
 800cfb6:	f240 2145 	movw	r1, #581	@ 0x245
 800cfba:	e7e3      	b.n	800cf84 <__mdiff+0x28>
 800cfbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfc0:	6926      	ldr	r6, [r4, #16]
 800cfc2:	60c5      	str	r5, [r0, #12]
 800cfc4:	f109 0310 	add.w	r3, r9, #16
 800cfc8:	f109 0514 	add.w	r5, r9, #20
 800cfcc:	f104 0e14 	add.w	lr, r4, #20
 800cfd0:	f100 0b14 	add.w	fp, r0, #20
 800cfd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	46d9      	mov	r9, fp
 800cfe0:	f04f 0c00 	mov.w	ip, #0
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfee:	9301      	str	r3, [sp, #4]
 800cff0:	fa1f f38a 	uxth.w	r3, sl
 800cff4:	4619      	mov	r1, r3
 800cff6:	b283      	uxth	r3, r0
 800cff8:	1acb      	subs	r3, r1, r3
 800cffa:	0c00      	lsrs	r0, r0, #16
 800cffc:	4463      	add	r3, ip
 800cffe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d002:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d006:	b29b      	uxth	r3, r3
 800d008:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d00c:	4576      	cmp	r6, lr
 800d00e:	f849 3b04 	str.w	r3, [r9], #4
 800d012:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d016:	d8e5      	bhi.n	800cfe4 <__mdiff+0x88>
 800d018:	1b33      	subs	r3, r6, r4
 800d01a:	3b15      	subs	r3, #21
 800d01c:	f023 0303 	bic.w	r3, r3, #3
 800d020:	3415      	adds	r4, #21
 800d022:	3304      	adds	r3, #4
 800d024:	42a6      	cmp	r6, r4
 800d026:	bf38      	it	cc
 800d028:	2304      	movcc	r3, #4
 800d02a:	441d      	add	r5, r3
 800d02c:	445b      	add	r3, fp
 800d02e:	461e      	mov	r6, r3
 800d030:	462c      	mov	r4, r5
 800d032:	4544      	cmp	r4, r8
 800d034:	d30e      	bcc.n	800d054 <__mdiff+0xf8>
 800d036:	f108 0103 	add.w	r1, r8, #3
 800d03a:	1b49      	subs	r1, r1, r5
 800d03c:	f021 0103 	bic.w	r1, r1, #3
 800d040:	3d03      	subs	r5, #3
 800d042:	45a8      	cmp	r8, r5
 800d044:	bf38      	it	cc
 800d046:	2100      	movcc	r1, #0
 800d048:	440b      	add	r3, r1
 800d04a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d04e:	b191      	cbz	r1, 800d076 <__mdiff+0x11a>
 800d050:	6117      	str	r7, [r2, #16]
 800d052:	e79d      	b.n	800cf90 <__mdiff+0x34>
 800d054:	f854 1b04 	ldr.w	r1, [r4], #4
 800d058:	46e6      	mov	lr, ip
 800d05a:	0c08      	lsrs	r0, r1, #16
 800d05c:	fa1c fc81 	uxtah	ip, ip, r1
 800d060:	4471      	add	r1, lr
 800d062:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d066:	b289      	uxth	r1, r1
 800d068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d06c:	f846 1b04 	str.w	r1, [r6], #4
 800d070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d074:	e7dd      	b.n	800d032 <__mdiff+0xd6>
 800d076:	3f01      	subs	r7, #1
 800d078:	e7e7      	b.n	800d04a <__mdiff+0xee>
 800d07a:	bf00      	nop
 800d07c:	0800dc34 	.word	0x0800dc34
 800d080:	0800dc45 	.word	0x0800dc45

0800d084 <__d2b>:
 800d084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d088:	460f      	mov	r7, r1
 800d08a:	2101      	movs	r1, #1
 800d08c:	ec59 8b10 	vmov	r8, r9, d0
 800d090:	4616      	mov	r6, r2
 800d092:	f7ff fcd5 	bl	800ca40 <_Balloc>
 800d096:	4604      	mov	r4, r0
 800d098:	b930      	cbnz	r0, 800d0a8 <__d2b+0x24>
 800d09a:	4602      	mov	r2, r0
 800d09c:	4b23      	ldr	r3, [pc, #140]	@ (800d12c <__d2b+0xa8>)
 800d09e:	4824      	ldr	r0, [pc, #144]	@ (800d130 <__d2b+0xac>)
 800d0a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0a4:	f7fd fe50 	bl	800ad48 <__assert_func>
 800d0a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0b0:	b10d      	cbz	r5, 800d0b6 <__d2b+0x32>
 800d0b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0bc:	d023      	beq.n	800d106 <__d2b+0x82>
 800d0be:	4668      	mov	r0, sp
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	f7ff fd84 	bl	800cbce <__lo0bits>
 800d0c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0ca:	b1d0      	cbz	r0, 800d102 <__d2b+0x7e>
 800d0cc:	f1c0 0320 	rsb	r3, r0, #32
 800d0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d4:	430b      	orrs	r3, r1
 800d0d6:	40c2      	lsrs	r2, r0
 800d0d8:	6163      	str	r3, [r4, #20]
 800d0da:	9201      	str	r2, [sp, #4]
 800d0dc:	9b01      	ldr	r3, [sp, #4]
 800d0de:	61a3      	str	r3, [r4, #24]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bf0c      	ite	eq
 800d0e4:	2201      	moveq	r2, #1
 800d0e6:	2202      	movne	r2, #2
 800d0e8:	6122      	str	r2, [r4, #16]
 800d0ea:	b1a5      	cbz	r5, 800d116 <__d2b+0x92>
 800d0ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0f0:	4405      	add	r5, r0
 800d0f2:	603d      	str	r5, [r7, #0]
 800d0f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0f8:	6030      	str	r0, [r6, #0]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	b003      	add	sp, #12
 800d0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d102:	6161      	str	r1, [r4, #20]
 800d104:	e7ea      	b.n	800d0dc <__d2b+0x58>
 800d106:	a801      	add	r0, sp, #4
 800d108:	f7ff fd61 	bl	800cbce <__lo0bits>
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	6163      	str	r3, [r4, #20]
 800d110:	3020      	adds	r0, #32
 800d112:	2201      	movs	r2, #1
 800d114:	e7e8      	b.n	800d0e8 <__d2b+0x64>
 800d116:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d11a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d11e:	6038      	str	r0, [r7, #0]
 800d120:	6918      	ldr	r0, [r3, #16]
 800d122:	f7ff fd35 	bl	800cb90 <__hi0bits>
 800d126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d12a:	e7e5      	b.n	800d0f8 <__d2b+0x74>
 800d12c:	0800dc34 	.word	0x0800dc34
 800d130:	0800dc45 	.word	0x0800dc45

0800d134 <__sfputc_r>:
 800d134:	6893      	ldr	r3, [r2, #8]
 800d136:	3b01      	subs	r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	b410      	push	{r4}
 800d13c:	6093      	str	r3, [r2, #8]
 800d13e:	da08      	bge.n	800d152 <__sfputc_r+0x1e>
 800d140:	6994      	ldr	r4, [r2, #24]
 800d142:	42a3      	cmp	r3, r4
 800d144:	db01      	blt.n	800d14a <__sfputc_r+0x16>
 800d146:	290a      	cmp	r1, #10
 800d148:	d103      	bne.n	800d152 <__sfputc_r+0x1e>
 800d14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d14e:	f7fe bbf6 	b.w	800b93e <__swbuf_r>
 800d152:	6813      	ldr	r3, [r2, #0]
 800d154:	1c58      	adds	r0, r3, #1
 800d156:	6010      	str	r0, [r2, #0]
 800d158:	7019      	strb	r1, [r3, #0]
 800d15a:	4608      	mov	r0, r1
 800d15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d160:	4770      	bx	lr

0800d162 <__sfputs_r>:
 800d162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d164:	4606      	mov	r6, r0
 800d166:	460f      	mov	r7, r1
 800d168:	4614      	mov	r4, r2
 800d16a:	18d5      	adds	r5, r2, r3
 800d16c:	42ac      	cmp	r4, r5
 800d16e:	d101      	bne.n	800d174 <__sfputs_r+0x12>
 800d170:	2000      	movs	r0, #0
 800d172:	e007      	b.n	800d184 <__sfputs_r+0x22>
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	463a      	mov	r2, r7
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7ff ffda 	bl	800d134 <__sfputc_r>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d1f3      	bne.n	800d16c <__sfputs_r+0xa>
 800d184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d188 <_vfiprintf_r>:
 800d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	460d      	mov	r5, r1
 800d18e:	b09d      	sub	sp, #116	@ 0x74
 800d190:	4614      	mov	r4, r2
 800d192:	4698      	mov	r8, r3
 800d194:	4606      	mov	r6, r0
 800d196:	b118      	cbz	r0, 800d1a0 <_vfiprintf_r+0x18>
 800d198:	6a03      	ldr	r3, [r0, #32]
 800d19a:	b90b      	cbnz	r3, 800d1a0 <_vfiprintf_r+0x18>
 800d19c:	f7fe fad4 	bl	800b748 <__sinit>
 800d1a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1a2:	07d9      	lsls	r1, r3, #31
 800d1a4:	d405      	bmi.n	800d1b2 <_vfiprintf_r+0x2a>
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	059a      	lsls	r2, r3, #22
 800d1aa:	d402      	bmi.n	800d1b2 <_vfiprintf_r+0x2a>
 800d1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1ae:	f7fe fcd8 	bl	800bb62 <__retarget_lock_acquire_recursive>
 800d1b2:	89ab      	ldrh	r3, [r5, #12]
 800d1b4:	071b      	lsls	r3, r3, #28
 800d1b6:	d501      	bpl.n	800d1bc <_vfiprintf_r+0x34>
 800d1b8:	692b      	ldr	r3, [r5, #16]
 800d1ba:	b99b      	cbnz	r3, 800d1e4 <_vfiprintf_r+0x5c>
 800d1bc:	4629      	mov	r1, r5
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f7fe fbfc 	bl	800b9bc <__swsetup_r>
 800d1c4:	b170      	cbz	r0, 800d1e4 <_vfiprintf_r+0x5c>
 800d1c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1c8:	07dc      	lsls	r4, r3, #31
 800d1ca:	d504      	bpl.n	800d1d6 <_vfiprintf_r+0x4e>
 800d1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d0:	b01d      	add	sp, #116	@ 0x74
 800d1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d6:	89ab      	ldrh	r3, [r5, #12]
 800d1d8:	0598      	lsls	r0, r3, #22
 800d1da:	d4f7      	bmi.n	800d1cc <_vfiprintf_r+0x44>
 800d1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1de:	f7fe fcc1 	bl	800bb64 <__retarget_lock_release_recursive>
 800d1e2:	e7f3      	b.n	800d1cc <_vfiprintf_r+0x44>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1e8:	2320      	movs	r3, #32
 800d1ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f2:	2330      	movs	r3, #48	@ 0x30
 800d1f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3a4 <_vfiprintf_r+0x21c>
 800d1f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1fc:	f04f 0901 	mov.w	r9, #1
 800d200:	4623      	mov	r3, r4
 800d202:	469a      	mov	sl, r3
 800d204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d208:	b10a      	cbz	r2, 800d20e <_vfiprintf_r+0x86>
 800d20a:	2a25      	cmp	r2, #37	@ 0x25
 800d20c:	d1f9      	bne.n	800d202 <_vfiprintf_r+0x7a>
 800d20e:	ebba 0b04 	subs.w	fp, sl, r4
 800d212:	d00b      	beq.n	800d22c <_vfiprintf_r+0xa4>
 800d214:	465b      	mov	r3, fp
 800d216:	4622      	mov	r2, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	4630      	mov	r0, r6
 800d21c:	f7ff ffa1 	bl	800d162 <__sfputs_r>
 800d220:	3001      	adds	r0, #1
 800d222:	f000 80a7 	beq.w	800d374 <_vfiprintf_r+0x1ec>
 800d226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d228:	445a      	add	r2, fp
 800d22a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d22c:	f89a 3000 	ldrb.w	r3, [sl]
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 809f 	beq.w	800d374 <_vfiprintf_r+0x1ec>
 800d236:	2300      	movs	r3, #0
 800d238:	f04f 32ff 	mov.w	r2, #4294967295
 800d23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d240:	f10a 0a01 	add.w	sl, sl, #1
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	9307      	str	r3, [sp, #28]
 800d248:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d24c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d24e:	4654      	mov	r4, sl
 800d250:	2205      	movs	r2, #5
 800d252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d256:	4853      	ldr	r0, [pc, #332]	@ (800d3a4 <_vfiprintf_r+0x21c>)
 800d258:	f7f2 ffba 	bl	80001d0 <memchr>
 800d25c:	9a04      	ldr	r2, [sp, #16]
 800d25e:	b9d8      	cbnz	r0, 800d298 <_vfiprintf_r+0x110>
 800d260:	06d1      	lsls	r1, r2, #27
 800d262:	bf44      	itt	mi
 800d264:	2320      	movmi	r3, #32
 800d266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d26a:	0713      	lsls	r3, r2, #28
 800d26c:	bf44      	itt	mi
 800d26e:	232b      	movmi	r3, #43	@ 0x2b
 800d270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d274:	f89a 3000 	ldrb.w	r3, [sl]
 800d278:	2b2a      	cmp	r3, #42	@ 0x2a
 800d27a:	d015      	beq.n	800d2a8 <_vfiprintf_r+0x120>
 800d27c:	9a07      	ldr	r2, [sp, #28]
 800d27e:	4654      	mov	r4, sl
 800d280:	2000      	movs	r0, #0
 800d282:	f04f 0c0a 	mov.w	ip, #10
 800d286:	4621      	mov	r1, r4
 800d288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d28c:	3b30      	subs	r3, #48	@ 0x30
 800d28e:	2b09      	cmp	r3, #9
 800d290:	d94b      	bls.n	800d32a <_vfiprintf_r+0x1a2>
 800d292:	b1b0      	cbz	r0, 800d2c2 <_vfiprintf_r+0x13a>
 800d294:	9207      	str	r2, [sp, #28]
 800d296:	e014      	b.n	800d2c2 <_vfiprintf_r+0x13a>
 800d298:	eba0 0308 	sub.w	r3, r0, r8
 800d29c:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	9304      	str	r3, [sp, #16]
 800d2a4:	46a2      	mov	sl, r4
 800d2a6:	e7d2      	b.n	800d24e <_vfiprintf_r+0xc6>
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	1d19      	adds	r1, r3, #4
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	9103      	str	r1, [sp, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	bfbb      	ittet	lt
 800d2b4:	425b      	neglt	r3, r3
 800d2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ba:	9307      	strge	r3, [sp, #28]
 800d2bc:	9307      	strlt	r3, [sp, #28]
 800d2be:	bfb8      	it	lt
 800d2c0:	9204      	strlt	r2, [sp, #16]
 800d2c2:	7823      	ldrb	r3, [r4, #0]
 800d2c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2c6:	d10a      	bne.n	800d2de <_vfiprintf_r+0x156>
 800d2c8:	7863      	ldrb	r3, [r4, #1]
 800d2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2cc:	d132      	bne.n	800d334 <_vfiprintf_r+0x1ac>
 800d2ce:	9b03      	ldr	r3, [sp, #12]
 800d2d0:	1d1a      	adds	r2, r3, #4
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	9203      	str	r2, [sp, #12]
 800d2d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2da:	3402      	adds	r4, #2
 800d2dc:	9305      	str	r3, [sp, #20]
 800d2de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3b4 <_vfiprintf_r+0x22c>
 800d2e2:	7821      	ldrb	r1, [r4, #0]
 800d2e4:	2203      	movs	r2, #3
 800d2e6:	4650      	mov	r0, sl
 800d2e8:	f7f2 ff72 	bl	80001d0 <memchr>
 800d2ec:	b138      	cbz	r0, 800d2fe <_vfiprintf_r+0x176>
 800d2ee:	9b04      	ldr	r3, [sp, #16]
 800d2f0:	eba0 000a 	sub.w	r0, r0, sl
 800d2f4:	2240      	movs	r2, #64	@ 0x40
 800d2f6:	4082      	lsls	r2, r0
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	3401      	adds	r4, #1
 800d2fc:	9304      	str	r3, [sp, #16]
 800d2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d302:	4829      	ldr	r0, [pc, #164]	@ (800d3a8 <_vfiprintf_r+0x220>)
 800d304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d308:	2206      	movs	r2, #6
 800d30a:	f7f2 ff61 	bl	80001d0 <memchr>
 800d30e:	2800      	cmp	r0, #0
 800d310:	d03f      	beq.n	800d392 <_vfiprintf_r+0x20a>
 800d312:	4b26      	ldr	r3, [pc, #152]	@ (800d3ac <_vfiprintf_r+0x224>)
 800d314:	bb1b      	cbnz	r3, 800d35e <_vfiprintf_r+0x1d6>
 800d316:	9b03      	ldr	r3, [sp, #12]
 800d318:	3307      	adds	r3, #7
 800d31a:	f023 0307 	bic.w	r3, r3, #7
 800d31e:	3308      	adds	r3, #8
 800d320:	9303      	str	r3, [sp, #12]
 800d322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d324:	443b      	add	r3, r7
 800d326:	9309      	str	r3, [sp, #36]	@ 0x24
 800d328:	e76a      	b.n	800d200 <_vfiprintf_r+0x78>
 800d32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d32e:	460c      	mov	r4, r1
 800d330:	2001      	movs	r0, #1
 800d332:	e7a8      	b.n	800d286 <_vfiprintf_r+0xfe>
 800d334:	2300      	movs	r3, #0
 800d336:	3401      	adds	r4, #1
 800d338:	9305      	str	r3, [sp, #20]
 800d33a:	4619      	mov	r1, r3
 800d33c:	f04f 0c0a 	mov.w	ip, #10
 800d340:	4620      	mov	r0, r4
 800d342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d346:	3a30      	subs	r2, #48	@ 0x30
 800d348:	2a09      	cmp	r2, #9
 800d34a:	d903      	bls.n	800d354 <_vfiprintf_r+0x1cc>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0c6      	beq.n	800d2de <_vfiprintf_r+0x156>
 800d350:	9105      	str	r1, [sp, #20]
 800d352:	e7c4      	b.n	800d2de <_vfiprintf_r+0x156>
 800d354:	fb0c 2101 	mla	r1, ip, r1, r2
 800d358:	4604      	mov	r4, r0
 800d35a:	2301      	movs	r3, #1
 800d35c:	e7f0      	b.n	800d340 <_vfiprintf_r+0x1b8>
 800d35e:	ab03      	add	r3, sp, #12
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	462a      	mov	r2, r5
 800d364:	4b12      	ldr	r3, [pc, #72]	@ (800d3b0 <_vfiprintf_r+0x228>)
 800d366:	a904      	add	r1, sp, #16
 800d368:	4630      	mov	r0, r6
 800d36a:	f7fd fdab 	bl	800aec4 <_printf_float>
 800d36e:	4607      	mov	r7, r0
 800d370:	1c78      	adds	r0, r7, #1
 800d372:	d1d6      	bne.n	800d322 <_vfiprintf_r+0x19a>
 800d374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d376:	07d9      	lsls	r1, r3, #31
 800d378:	d405      	bmi.n	800d386 <_vfiprintf_r+0x1fe>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	059a      	lsls	r2, r3, #22
 800d37e:	d402      	bmi.n	800d386 <_vfiprintf_r+0x1fe>
 800d380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d382:	f7fe fbef 	bl	800bb64 <__retarget_lock_release_recursive>
 800d386:	89ab      	ldrh	r3, [r5, #12]
 800d388:	065b      	lsls	r3, r3, #25
 800d38a:	f53f af1f 	bmi.w	800d1cc <_vfiprintf_r+0x44>
 800d38e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d390:	e71e      	b.n	800d1d0 <_vfiprintf_r+0x48>
 800d392:	ab03      	add	r3, sp, #12
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	462a      	mov	r2, r5
 800d398:	4b05      	ldr	r3, [pc, #20]	@ (800d3b0 <_vfiprintf_r+0x228>)
 800d39a:	a904      	add	r1, sp, #16
 800d39c:	4630      	mov	r0, r6
 800d39e:	f7fe f829 	bl	800b3f4 <_printf_i>
 800d3a2:	e7e4      	b.n	800d36e <_vfiprintf_r+0x1e6>
 800d3a4:	0800dc9e 	.word	0x0800dc9e
 800d3a8:	0800dca8 	.word	0x0800dca8
 800d3ac:	0800aec5 	.word	0x0800aec5
 800d3b0:	0800d163 	.word	0x0800d163
 800d3b4:	0800dca4 	.word	0x0800dca4

0800d3b8 <__sflush_r>:
 800d3b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c0:	0716      	lsls	r6, r2, #28
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	460c      	mov	r4, r1
 800d3c6:	d454      	bmi.n	800d472 <__sflush_r+0xba>
 800d3c8:	684b      	ldr	r3, [r1, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dc02      	bgt.n	800d3d4 <__sflush_r+0x1c>
 800d3ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dd48      	ble.n	800d466 <__sflush_r+0xae>
 800d3d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	d045      	beq.n	800d466 <__sflush_r+0xae>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3e0:	682f      	ldr	r7, [r5, #0]
 800d3e2:	6a21      	ldr	r1, [r4, #32]
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	d030      	beq.n	800d44a <__sflush_r+0x92>
 800d3e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	0759      	lsls	r1, r3, #29
 800d3ee:	d505      	bpl.n	800d3fc <__sflush_r+0x44>
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	1ad2      	subs	r2, r2, r3
 800d3f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3f6:	b10b      	cbz	r3, 800d3fc <__sflush_r+0x44>
 800d3f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3fa:	1ad2      	subs	r2, r2, r3
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d400:	6a21      	ldr	r1, [r4, #32]
 800d402:	4628      	mov	r0, r5
 800d404:	47b0      	blx	r6
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	d106      	bne.n	800d41a <__sflush_r+0x62>
 800d40c:	6829      	ldr	r1, [r5, #0]
 800d40e:	291d      	cmp	r1, #29
 800d410:	d82b      	bhi.n	800d46a <__sflush_r+0xb2>
 800d412:	4a2a      	ldr	r2, [pc, #168]	@ (800d4bc <__sflush_r+0x104>)
 800d414:	40ca      	lsrs	r2, r1
 800d416:	07d6      	lsls	r6, r2, #31
 800d418:	d527      	bpl.n	800d46a <__sflush_r+0xb2>
 800d41a:	2200      	movs	r2, #0
 800d41c:	6062      	str	r2, [r4, #4]
 800d41e:	04d9      	lsls	r1, r3, #19
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	6022      	str	r2, [r4, #0]
 800d424:	d504      	bpl.n	800d430 <__sflush_r+0x78>
 800d426:	1c42      	adds	r2, r0, #1
 800d428:	d101      	bne.n	800d42e <__sflush_r+0x76>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	b903      	cbnz	r3, 800d430 <__sflush_r+0x78>
 800d42e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d432:	602f      	str	r7, [r5, #0]
 800d434:	b1b9      	cbz	r1, 800d466 <__sflush_r+0xae>
 800d436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d43a:	4299      	cmp	r1, r3
 800d43c:	d002      	beq.n	800d444 <__sflush_r+0x8c>
 800d43e:	4628      	mov	r0, r5
 800d440:	f7ff f9fe 	bl	800c840 <_free_r>
 800d444:	2300      	movs	r3, #0
 800d446:	6363      	str	r3, [r4, #52]	@ 0x34
 800d448:	e00d      	b.n	800d466 <__sflush_r+0xae>
 800d44a:	2301      	movs	r3, #1
 800d44c:	4628      	mov	r0, r5
 800d44e:	47b0      	blx	r6
 800d450:	4602      	mov	r2, r0
 800d452:	1c50      	adds	r0, r2, #1
 800d454:	d1c9      	bne.n	800d3ea <__sflush_r+0x32>
 800d456:	682b      	ldr	r3, [r5, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d0c6      	beq.n	800d3ea <__sflush_r+0x32>
 800d45c:	2b1d      	cmp	r3, #29
 800d45e:	d001      	beq.n	800d464 <__sflush_r+0xac>
 800d460:	2b16      	cmp	r3, #22
 800d462:	d11e      	bne.n	800d4a2 <__sflush_r+0xea>
 800d464:	602f      	str	r7, [r5, #0]
 800d466:	2000      	movs	r0, #0
 800d468:	e022      	b.n	800d4b0 <__sflush_r+0xf8>
 800d46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d46e:	b21b      	sxth	r3, r3
 800d470:	e01b      	b.n	800d4aa <__sflush_r+0xf2>
 800d472:	690f      	ldr	r7, [r1, #16]
 800d474:	2f00      	cmp	r7, #0
 800d476:	d0f6      	beq.n	800d466 <__sflush_r+0xae>
 800d478:	0793      	lsls	r3, r2, #30
 800d47a:	680e      	ldr	r6, [r1, #0]
 800d47c:	bf08      	it	eq
 800d47e:	694b      	ldreq	r3, [r1, #20]
 800d480:	600f      	str	r7, [r1, #0]
 800d482:	bf18      	it	ne
 800d484:	2300      	movne	r3, #0
 800d486:	eba6 0807 	sub.w	r8, r6, r7
 800d48a:	608b      	str	r3, [r1, #8]
 800d48c:	f1b8 0f00 	cmp.w	r8, #0
 800d490:	dde9      	ble.n	800d466 <__sflush_r+0xae>
 800d492:	6a21      	ldr	r1, [r4, #32]
 800d494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d496:	4643      	mov	r3, r8
 800d498:	463a      	mov	r2, r7
 800d49a:	4628      	mov	r0, r5
 800d49c:	47b0      	blx	r6
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	dc08      	bgt.n	800d4b4 <__sflush_r+0xfc>
 800d4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b4:	4407      	add	r7, r0
 800d4b6:	eba8 0800 	sub.w	r8, r8, r0
 800d4ba:	e7e7      	b.n	800d48c <__sflush_r+0xd4>
 800d4bc:	20400001 	.word	0x20400001

0800d4c0 <_fflush_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	690b      	ldr	r3, [r1, #16]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b913      	cbnz	r3, 800d4d0 <_fflush_r+0x10>
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	b118      	cbz	r0, 800d4da <_fflush_r+0x1a>
 800d4d2:	6a03      	ldr	r3, [r0, #32]
 800d4d4:	b90b      	cbnz	r3, 800d4da <_fflush_r+0x1a>
 800d4d6:	f7fe f937 	bl	800b748 <__sinit>
 800d4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d0f3      	beq.n	800d4ca <_fflush_r+0xa>
 800d4e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4e4:	07d0      	lsls	r0, r2, #31
 800d4e6:	d404      	bmi.n	800d4f2 <_fflush_r+0x32>
 800d4e8:	0599      	lsls	r1, r3, #22
 800d4ea:	d402      	bmi.n	800d4f2 <_fflush_r+0x32>
 800d4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4ee:	f7fe fb38 	bl	800bb62 <__retarget_lock_acquire_recursive>
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	f7ff ff5f 	bl	800d3b8 <__sflush_r>
 800d4fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4fc:	07da      	lsls	r2, r3, #31
 800d4fe:	4605      	mov	r5, r0
 800d500:	d4e4      	bmi.n	800d4cc <_fflush_r+0xc>
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	059b      	lsls	r3, r3, #22
 800d506:	d4e1      	bmi.n	800d4cc <_fflush_r+0xc>
 800d508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d50a:	f7fe fb2b 	bl	800bb64 <__retarget_lock_release_recursive>
 800d50e:	e7dd      	b.n	800d4cc <_fflush_r+0xc>

0800d510 <__swhatbuf_r>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	460c      	mov	r4, r1
 800d514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d518:	2900      	cmp	r1, #0
 800d51a:	b096      	sub	sp, #88	@ 0x58
 800d51c:	4615      	mov	r5, r2
 800d51e:	461e      	mov	r6, r3
 800d520:	da0d      	bge.n	800d53e <__swhatbuf_r+0x2e>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d528:	f04f 0100 	mov.w	r1, #0
 800d52c:	bf14      	ite	ne
 800d52e:	2340      	movne	r3, #64	@ 0x40
 800d530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d534:	2000      	movs	r0, #0
 800d536:	6031      	str	r1, [r6, #0]
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	b016      	add	sp, #88	@ 0x58
 800d53c:	bd70      	pop	{r4, r5, r6, pc}
 800d53e:	466a      	mov	r2, sp
 800d540:	f000 f878 	bl	800d634 <_fstat_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	dbec      	blt.n	800d522 <__swhatbuf_r+0x12>
 800d548:	9901      	ldr	r1, [sp, #4]
 800d54a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d54e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d552:	4259      	negs	r1, r3
 800d554:	4159      	adcs	r1, r3
 800d556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d55a:	e7eb      	b.n	800d534 <__swhatbuf_r+0x24>

0800d55c <__smakebuf_r>:
 800d55c:	898b      	ldrh	r3, [r1, #12]
 800d55e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d560:	079d      	lsls	r5, r3, #30
 800d562:	4606      	mov	r6, r0
 800d564:	460c      	mov	r4, r1
 800d566:	d507      	bpl.n	800d578 <__smakebuf_r+0x1c>
 800d568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	2301      	movs	r3, #1
 800d572:	6163      	str	r3, [r4, #20]
 800d574:	b003      	add	sp, #12
 800d576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d578:	ab01      	add	r3, sp, #4
 800d57a:	466a      	mov	r2, sp
 800d57c:	f7ff ffc8 	bl	800d510 <__swhatbuf_r>
 800d580:	9f00      	ldr	r7, [sp, #0]
 800d582:	4605      	mov	r5, r0
 800d584:	4639      	mov	r1, r7
 800d586:	4630      	mov	r0, r6
 800d588:	f7ff f9ce 	bl	800c928 <_malloc_r>
 800d58c:	b948      	cbnz	r0, 800d5a2 <__smakebuf_r+0x46>
 800d58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d592:	059a      	lsls	r2, r3, #22
 800d594:	d4ee      	bmi.n	800d574 <__smakebuf_r+0x18>
 800d596:	f023 0303 	bic.w	r3, r3, #3
 800d59a:	f043 0302 	orr.w	r3, r3, #2
 800d59e:	81a3      	strh	r3, [r4, #12]
 800d5a0:	e7e2      	b.n	800d568 <__smakebuf_r+0xc>
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	6020      	str	r0, [r4, #0]
 800d5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5b2:	b15b      	cbz	r3, 800d5cc <__smakebuf_r+0x70>
 800d5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f000 f84d 	bl	800d658 <_isatty_r>
 800d5be:	b128      	cbz	r0, 800d5cc <__smakebuf_r+0x70>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	f023 0303 	bic.w	r3, r3, #3
 800d5c6:	f043 0301 	orr.w	r3, r3, #1
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	431d      	orrs	r5, r3
 800d5d0:	81a5      	strh	r5, [r4, #12]
 800d5d2:	e7cf      	b.n	800d574 <__smakebuf_r+0x18>

0800d5d4 <_raise_r>:
 800d5d4:	291f      	cmp	r1, #31
 800d5d6:	b538      	push	{r3, r4, r5, lr}
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	d904      	bls.n	800d5e8 <_raise_r+0x14>
 800d5de:	2316      	movs	r3, #22
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5ea:	b112      	cbz	r2, 800d5f2 <_raise_r+0x1e>
 800d5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5f0:	b94b      	cbnz	r3, 800d606 <_raise_r+0x32>
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 f852 	bl	800d69c <_getpid_r>
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d602:	f000 b839 	b.w	800d678 <_kill_r>
 800d606:	2b01      	cmp	r3, #1
 800d608:	d00a      	beq.n	800d620 <_raise_r+0x4c>
 800d60a:	1c59      	adds	r1, r3, #1
 800d60c:	d103      	bne.n	800d616 <_raise_r+0x42>
 800d60e:	2316      	movs	r3, #22
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	2001      	movs	r0, #1
 800d614:	e7e7      	b.n	800d5e6 <_raise_r+0x12>
 800d616:	2100      	movs	r1, #0
 800d618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d61c:	4620      	mov	r0, r4
 800d61e:	4798      	blx	r3
 800d620:	2000      	movs	r0, #0
 800d622:	e7e0      	b.n	800d5e6 <_raise_r+0x12>

0800d624 <raise>:
 800d624:	4b02      	ldr	r3, [pc, #8]	@ (800d630 <raise+0xc>)
 800d626:	4601      	mov	r1, r0
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	f7ff bfd3 	b.w	800d5d4 <_raise_r>
 800d62e:	bf00      	nop
 800d630:	200001a4 	.word	0x200001a4

0800d634 <_fstat_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4d07      	ldr	r5, [pc, #28]	@ (800d654 <_fstat_r+0x20>)
 800d638:	2300      	movs	r3, #0
 800d63a:	4604      	mov	r4, r0
 800d63c:	4608      	mov	r0, r1
 800d63e:	4611      	mov	r1, r2
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	f7f4 f84f 	bl	80016e4 <_fstat>
 800d646:	1c43      	adds	r3, r0, #1
 800d648:	d102      	bne.n	800d650 <_fstat_r+0x1c>
 800d64a:	682b      	ldr	r3, [r5, #0]
 800d64c:	b103      	cbz	r3, 800d650 <_fstat_r+0x1c>
 800d64e:	6023      	str	r3, [r4, #0]
 800d650:	bd38      	pop	{r3, r4, r5, pc}
 800d652:	bf00      	nop
 800d654:	20002104 	.word	0x20002104

0800d658 <_isatty_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d06      	ldr	r5, [pc, #24]	@ (800d674 <_isatty_r+0x1c>)
 800d65c:	2300      	movs	r3, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	4608      	mov	r0, r1
 800d662:	602b      	str	r3, [r5, #0]
 800d664:	f7f4 f84e 	bl	8001704 <_isatty>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_isatty_r+0x1a>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_isatty_r+0x1a>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	20002104 	.word	0x20002104

0800d678 <_kill_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d07      	ldr	r5, [pc, #28]	@ (800d698 <_kill_r+0x20>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	4611      	mov	r1, r2
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	f7f3 ffcd 	bl	8001624 <_kill>
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	d102      	bne.n	800d694 <_kill_r+0x1c>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	b103      	cbz	r3, 800d694 <_kill_r+0x1c>
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	20002104 	.word	0x20002104

0800d69c <_getpid_r>:
 800d69c:	f7f3 bfba 	b.w	8001614 <_getpid>

0800d6a0 <_sbrk_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4d06      	ldr	r5, [pc, #24]	@ (800d6bc <_sbrk_r+0x1c>)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	f7f4 f842 	bl	8001734 <_sbrk>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_sbrk_r+0x1a>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_sbrk_r+0x1a>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20002104 	.word	0x20002104

0800d6c0 <_calloc_r>:
 800d6c0:	b570      	push	{r4, r5, r6, lr}
 800d6c2:	fba1 5402 	umull	r5, r4, r1, r2
 800d6c6:	b934      	cbnz	r4, 800d6d6 <_calloc_r+0x16>
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7ff f92d 	bl	800c928 <_malloc_r>
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	b928      	cbnz	r0, 800d6de <_calloc_r+0x1e>
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
 800d6d6:	220c      	movs	r2, #12
 800d6d8:	6002      	str	r2, [r0, #0]
 800d6da:	2600      	movs	r6, #0
 800d6dc:	e7f9      	b.n	800d6d2 <_calloc_r+0x12>
 800d6de:	462a      	mov	r2, r5
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	f7fe f9c1 	bl	800ba68 <memset>
 800d6e6:	e7f4      	b.n	800d6d2 <_calloc_r+0x12>

0800d6e8 <__ascii_mbtowc>:
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	b901      	cbnz	r1, 800d6ee <__ascii_mbtowc+0x6>
 800d6ec:	a901      	add	r1, sp, #4
 800d6ee:	b142      	cbz	r2, 800d702 <__ascii_mbtowc+0x1a>
 800d6f0:	b14b      	cbz	r3, 800d706 <__ascii_mbtowc+0x1e>
 800d6f2:	7813      	ldrb	r3, [r2, #0]
 800d6f4:	600b      	str	r3, [r1, #0]
 800d6f6:	7812      	ldrb	r2, [r2, #0]
 800d6f8:	1e10      	subs	r0, r2, #0
 800d6fa:	bf18      	it	ne
 800d6fc:	2001      	movne	r0, #1
 800d6fe:	b002      	add	sp, #8
 800d700:	4770      	bx	lr
 800d702:	4610      	mov	r0, r2
 800d704:	e7fb      	b.n	800d6fe <__ascii_mbtowc+0x16>
 800d706:	f06f 0001 	mvn.w	r0, #1
 800d70a:	e7f8      	b.n	800d6fe <__ascii_mbtowc+0x16>

0800d70c <__ascii_wctomb>:
 800d70c:	4603      	mov	r3, r0
 800d70e:	4608      	mov	r0, r1
 800d710:	b141      	cbz	r1, 800d724 <__ascii_wctomb+0x18>
 800d712:	2aff      	cmp	r2, #255	@ 0xff
 800d714:	d904      	bls.n	800d720 <__ascii_wctomb+0x14>
 800d716:	228a      	movs	r2, #138	@ 0x8a
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	f04f 30ff 	mov.w	r0, #4294967295
 800d71e:	4770      	bx	lr
 800d720:	700a      	strb	r2, [r1, #0]
 800d722:	2001      	movs	r0, #1
 800d724:	4770      	bx	lr
	...

0800d728 <_init>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	bf00      	nop
 800d72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d72e:	bc08      	pop	{r3}
 800d730:	469e      	mov	lr, r3
 800d732:	4770      	bx	lr

0800d734 <_fini>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	bf00      	nop
 800d738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73a:	bc08      	pop	{r3}
 800d73c:	469e      	mov	lr, r3
 800d73e:	4770      	bx	lr
