
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000186c  0801ed18  0801ed18  0001fd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020584  08020584  000221e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020584  08020584  00021584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802058c  0802058c  000221e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802058c  0802058c  0002158c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020590  08020590  00021590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08020594  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001724  200001e8  0802077c  000221e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  0802077c  0002290c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048a37  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000947f  00000000  00000000  0006ac4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003020  00000000  00000000  000740d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002530  00000000  00000000  000770f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036f1d  00000000  00000000  00079620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00058785  00000000  00000000  000b053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118775  00000000  00000000  00108cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00221437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d6f0  00000000  00000000  0022147c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0022eb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ed00 	.word	0x0801ed00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801ed00 	.word	0x0801ed00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b38      	ldr	r3, [pc, #224]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a34      	ldr	r2, [pc, #208]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b32      	ldr	r3, [pc, #200]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a28      	ldr	r2, [pc, #160]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <MX_GPIO_Init+0x104>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f016 fd20 	bl	8017a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	481f      	ldr	r0, [pc, #124]	@ (800107c <MX_GPIO_Init+0x108>)
 8000ffe:	f016 fd1b 	bl	8017a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f016 fb7c 	bl	8017714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f016 fb6c 	bl	8017714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_IRQ_Pin */
  GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 800103c:	2310      	movs	r3, #16
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <MX_GPIO_Init+0x108>)
 8001050:	f016 fb60 	bl	8017714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 8001054:	2320      	movs	r3, #32
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_GPIO_Init+0x108>)
 800106c:	f016 fb52 	bl	8017714 <HAL_GPIO_Init>

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	@ 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f016 f91e 	bl	80172c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f81a 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f7ff ff72 	bl	8000f74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001090:	f001 f924 	bl	80022dc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001094:	f001 f804 	bl	80020a0 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001098:	f000 ff26 	bl	8001ee8 <MX_TIM1_Init>
  MX_SPI3_Init();
 800109c:	f000 fd62 	bl	8001b64 <MX_SPI3_Init>
  MX_TIM2_Init();
 80010a0:	f000 ffb0 	bl	8002004 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <main+0x3c>)
 80010a6:	f01b ff1f 	bl	801cee8 <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 80010aa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010ae:	2001      	movs	r0, #1
 80010b0:	f001 f8e4 	bl	800227c <beep_start>

  iso15693_test();
 80010b4:	f000 f85a 	bl	800116c <iso15693_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <main+0x38>
 80010bc:	0801ed18 	.word	0x0801ed18

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b096      	sub	sp, #88	@ 0x58
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2244      	movs	r2, #68	@ 0x44
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f01b fffa 	bl	801d0c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010e6:	f016 fccd 	bl	8017a84 <HAL_PWREx_ControlVoltageScaling>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f0:	f000 f835 	bl	800115e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	2303      	movs	r3, #3
 8001104:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800110a:	2314      	movs	r3, #20
 800110c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800110e:	2307      	movs	r3, #7
 8001110:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4618      	mov	r0, r3
 8001120:	f016 fd06 	bl	8017b30 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800112a:	f000 f818 	bl	800115e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2303      	movs	r3, #3
 8001134:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f017 f906 	bl	8018358 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001152:	f000 f804 	bl	800115e <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3758      	adds	r7, #88	@ 0x58
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	bf00      	nop
 8001168:	e7fd      	b.n	8001166 <Error_Handler+0x8>
	...

0800116c <iso15693_test>:
/*******************************************************************************
**   Code
*******************************************************************************/

int iso15693_test(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 8001172:	237f      	movs	r3, #127	@ 0x7f
 8001174:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
        phNfcLib_AppContext_t AppContext = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init();   // -> temp remove this to avoid conflict with sysTick

        /* Print Example application name */
        printf("\n *** ISO 15693 Example *** \n");
 8001180:	486c      	ldr	r0, [pc, #432]	@ (8001334 <iso15693_test+0x1c8>)
 8001182:	f01b feb1 	bl	801cee8 <puts>

        /* Hardware abstraction layer initialization */
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));	// set id and bus kind
 8001186:	2104      	movs	r1, #4
 8001188:	486b      	ldr	r0, [pc, #428]	@ (8001338 <iso15693_test+0x1cc>)
 800118a:	f015 fdcf 	bl	8016d2c <phbalReg_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001192:	8afb      	ldrh	r3, [r7, #22]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <iso15693_test+0x46>
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	461a      	mov	r2, r3
 800119c:	2181      	movs	r1, #129	@ 0x81
 800119e:	4867      	ldr	r0, [pc, #412]	@ (800133c <iso15693_test+0x1d0>)
 80011a0:	f01b fe32 	bl	801ce08 <iprintf>
 80011a4:	4b66      	ldr	r3, [pc, #408]	@ (8001340 <iso15693_test+0x1d4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f01b fd56 	bl	801cc5c <fflush>
 80011b0:	e00b      	b.n	80011ca <iso15693_test+0x5e>
 80011b2:	8afb      	ldrh	r3, [r7, #22]
 80011b4:	461a      	mov	r2, r3
 80011b6:	2181      	movs	r1, #129	@ 0x81
 80011b8:	4862      	ldr	r0, [pc, #392]	@ (8001344 <iso15693_test+0x1d8>)
 80011ba:	f01b fe25 	bl	801ce08 <iprintf>
 80011be:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <iso15693_test+0x1d4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f01b fd49 	bl	801cc5c <fflush>

        /* Set NFC library context */
        AppContext.pBalDataparams = &sBalParams;
 80011ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001338 <iso15693_test+0x1cc>)
 80011cc:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fc6b 	bl	8005aac <phNfcLib_SetContext>
 80011d6:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <iso15693_test+0x8a>
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	2186      	movs	r1, #134	@ 0x86
 80011e2:	4859      	ldr	r0, [pc, #356]	@ (8001348 <iso15693_test+0x1dc>)
 80011e4:	f01b fe10 	bl	801ce08 <iprintf>
 80011e8:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <iso15693_test+0x1d4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f01b fd34 	bl	801cc5c <fflush>
 80011f4:	e00a      	b.n	800120c <iso15693_test+0xa0>
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	2186      	movs	r1, #134	@ 0x86
 80011fa:	4854      	ldr	r0, [pc, #336]	@ (800134c <iso15693_test+0x1e0>)
 80011fc:	f01b fe04 	bl	801ce08 <iprintf>
 8001200:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <iso15693_test+0x1d4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4618      	mov	r0, r3
 8001208:	f01b fd28 	bl	801cc5c <fflush>

        /* NFC library initialization */
        dwStatus = phNfcLib_Init();
 800120c:	f004 feb8 	bl	8005f80 <phNfcLib_Init>
 8001210:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <iso15693_test+0xc4>
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	218a      	movs	r1, #138	@ 0x8a
 800121c:	484a      	ldr	r0, [pc, #296]	@ (8001348 <iso15693_test+0x1dc>)
 800121e:	f01b fdf3 	bl	801ce08 <iprintf>
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <iso15693_test+0x1d4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f01b fd17 	bl	801cc5c <fflush>
 800122e:	e00a      	b.n	8001246 <iso15693_test+0xda>
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	218a      	movs	r1, #138	@ 0x8a
 8001234:	4845      	ldr	r0, [pc, #276]	@ (800134c <iso15693_test+0x1e0>)
 8001236:	f01b fde7 	bl	801ce08 <iprintf>
 800123a:	4b41      	ldr	r3, [pc, #260]	@ (8001340 <iso15693_test+0x1d4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	f01b fd0b 	bl	801cc5c <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d163      	bne.n	8001314 <iso15693_test+0x1a8>

        /* Set the generic pointer */
        /* Get the parameter pointer of each component */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);
 800124c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001250:	f004 ff54 	bl	80060fc <phNfcLib_GetDataParams>
 8001254:	4603      	mov	r3, r0
 8001256:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <iso15693_test+0x1e4>)
 8001258:	6013      	str	r3, [r2, #0]
        psalI15693 = phNfcLib_GetDataParams(PH_COMP_AL_ICODE);
 800125a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800125e:	f004 ff4d 	bl	80060fc <phNfcLib_GetDataParams>
 8001262:	4603      	mov	r3, r0
 8001264:	4a3b      	ldr	r2, [pc, #236]	@ (8001354 <iso15693_test+0x1e8>)
 8001266:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP);
 8001268:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800126c:	f004 ff46 	bl	80060fc <phNfcLib_GetDataParams>
 8001270:	4603      	mov	r3, r0
 8001272:	4a39      	ldr	r2, [pc, #228]	@ (8001358 <iso15693_test+0x1ec>)
 8001274:	6013      	str	r3, [r2, #0]

        /* Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 8001276:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <iso15693_test+0x1ec>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f001 f956 	bl	800252c <phApp_Comp_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001284:	8afb      	ldrh	r3, [r7, #22]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00c      	beq.n	80012a4 <iso15693_test+0x138>
 800128a:	8afb      	ldrh	r3, [r7, #22]
 800128c:	461a      	mov	r2, r3
 800128e:	2195      	movs	r1, #149	@ 0x95
 8001290:	482a      	ldr	r0, [pc, #168]	@ (800133c <iso15693_test+0x1d0>)
 8001292:	f01b fdb9 	bl	801ce08 <iprintf>
 8001296:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <iso15693_test+0x1d4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f01b fcdd 	bl	801cc5c <fflush>
 80012a2:	e00b      	b.n	80012bc <iso15693_test+0x150>
 80012a4:	8afb      	ldrh	r3, [r7, #22]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2195      	movs	r1, #149	@ 0x95
 80012aa:	4826      	ldr	r0, [pc, #152]	@ (8001344 <iso15693_test+0x1d8>)
 80012ac:	f01b fdac 	bl	801ce08 <iprintf>
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <iso15693_test+0x1d4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f01b fcd0 	bl	801cc5c <fflush>
        if(status != PH_ERR_SUCCESS) break;
 80012bc:	8afb      	ldrh	r3, [r7, #22]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d12a      	bne.n	8001318 <iso15693_test+0x1ac>

        /* Perform Platform Init */
        status = phApp_Configure_IRQ();
 80012c2:	f001 f947 	bl	8002554 <phApp_Configure_IRQ>
 80012c6:	4603      	mov	r3, r0
 80012c8:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80012ca:	8afb      	ldrh	r3, [r7, #22]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00c      	beq.n	80012ea <iso15693_test+0x17e>
 80012d0:	8afb      	ldrh	r3, [r7, #22]
 80012d2:	461a      	mov	r2, r3
 80012d4:	219a      	movs	r1, #154	@ 0x9a
 80012d6:	4819      	ldr	r0, [pc, #100]	@ (800133c <iso15693_test+0x1d0>)
 80012d8:	f01b fd96 	bl	801ce08 <iprintf>
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <iso15693_test+0x1d4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f01b fcba 	bl	801cc5c <fflush>
 80012e8:	e00b      	b.n	8001302 <iso15693_test+0x196>
 80012ea:	8afb      	ldrh	r3, [r7, #22]
 80012ec:	461a      	mov	r2, r3
 80012ee:	219a      	movs	r1, #154	@ 0x9a
 80012f0:	4814      	ldr	r0, [pc, #80]	@ (8001344 <iso15693_test+0x1d8>)
 80012f2:	f01b fd89 	bl	801ce08 <iprintf>
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <iso15693_test+0x1d4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f01b fcad 	bl	801cc5c <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <iso15693_test+0x1b0>

        /* debug if spi communication read eeprom & register is ok */
//        test_pn5180_spi_communication(pHal);

        (void)NfcrdlibEx5_ISO15693(pDiscLoop);
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <iso15693_test+0x1ec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f827 	bl	8001360 <NfcrdlibEx5_ISO15693>
 8001312:	e004      	b.n	800131e <iso15693_test+0x1b2>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001314:	bf00      	nop
 8001316:	e002      	b.n	800131e <iso15693_test+0x1b2>
        if(status != PH_ERR_SUCCESS) break;
 8001318:	bf00      	nop
 800131a:	e000      	b.n	800131e <iso15693_test+0x1b2>
        if(status != PH_ERR_SUCCESS) break;
 800131c:	bf00      	nop
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 800131e:	bf00      	nop
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <iso15693_test+0x1f0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1fa      	bne.n	8001320 <iso15693_test+0x1b4>

    return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0801ed5c 	.word	0x0801ed5c
 8001338:	20000528 	.word	0x20000528
 800133c:	0801ed7c 	.word	0x0801ed7c
 8001340:	2000002c 	.word	0x2000002c
 8001344:	0801ede4 	.word	0x0801ede4
 8001348:	0801ee20 	.word	0x0801ee20
 800134c:	0801ee58 	.word	0x0801ee58
 8001350:	2000052c 	.word	0x2000052c
 8001354:	20000208 	.word	0x20000208
 8001358:	20000204 	.word	0x20000204
 800135c:	20000000 	.word	0x20000000

08001360 <NfcrdlibEx5_ISO15693>:
 * \brief   This function demonstrates the Type V (ISO 15693) card detection, Block Read and Write operation.
 * \param   *pParams
 * \return  This function will never return
 **********************************************************************************************/
void NfcrdlibEx5_ISO15693(void *pParams)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b090      	sub	sp, #64	@ 0x40
 8001364:	af04      	add	r7, sp, #16
 8001366:	6078      	str	r0, [r7, #4]
    phStatus_t  status = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    wTagsDetected = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     bBlock = 0x03;
 8001370:	2303      	movs	r3, #3
 8001372:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t     *pRxbuffer;
    uint16_t    bDataLength;
    uint8_t     aTempUid[8];
    uint8_t     aReceivedUid[8];
    uint8_t     bDsfid = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	72fb      	strb	r3, [r7, #11]
    uint8_t     bNTag5_State;

    /* This call shall allocate secure context before calling any secure function,
     * when FreeRtos trust zone is enabled.
     * */
    phOsal_ThreadSecureStack( 512 );
 800137a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800137e:	f015 fec1 	bl	8017104 <phOsal_ThreadSecureStack>

    /* Initialize library */
    status = phExample_Init();
 8001382:	f000 fa31 	bl	80017e8 <phExample_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    CHECK_STATUS(status);
 800138a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <NfcrdlibEx5_ISO15693+0x4a>
 8001390:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001392:	461a      	mov	r2, r3
 8001394:	21c0      	movs	r1, #192	@ 0xc0
 8001396:	48af      	ldr	r0, [pc, #700]	@ (8001654 <NfcrdlibEx5_ISO15693+0x2f4>)
 8001398:	f01b fd36 	bl	801ce08 <iprintf>
 800139c:	4bae      	ldr	r3, [pc, #696]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f01b fc5a 	bl	801cc5c <fflush>
 80013a8:	e00b      	b.n	80013c2 <NfcrdlibEx5_ISO15693+0x62>
 80013aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013ac:	461a      	mov	r2, r3
 80013ae:	21c0      	movs	r1, #192	@ 0xc0
 80013b0:	48aa      	ldr	r0, [pc, #680]	@ (800165c <NfcrdlibEx5_ISO15693+0x2fc>)
 80013b2:	f01b fd29 	bl	801ce08 <iprintf>
 80013b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4618      	mov	r0, r3
 80013be:	f01b fc4d 	bl	801cc5c <fflush>

    while(1)    /* Continuous loop */
    {
        bNTag5_State = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	72bb      	strb	r3, [r7, #10]
        DEBUG_PRINTF("\nReady to detect");
 80013c6:	48a6      	ldr	r0, [pc, #664]	@ (8001660 <NfcrdlibEx5_ISO15693+0x300>)
 80013c8:	f01b fd1e 	bl	801ce08 <iprintf>
 80013cc:	4ba2      	ldr	r3, [pc, #648]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f01b fc42 	bl	801cc5c <fflush>
        DEBUG_PRINTF("\n");
 80013d8:	200a      	movs	r0, #10
 80013da:	f01b fd27 	bl	801ce2c <putchar>
 80013de:	4b9e      	ldr	r3, [pc, #632]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f01b fc39 	bl	801cc5c <fflush>

        do
        {
            /* Field OFF */
            status = phhalHw_FieldOff(pHal);
 80013ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001664 <NfcrdlibEx5_ISO15693+0x304>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b fec2 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 80013f4:	4603      	mov	r3, r0
 80013f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 80013f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00c      	beq.n	8001418 <NfcrdlibEx5_ISO15693+0xb8>
 80013fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001400:	461a      	mov	r2, r3
 8001402:	21cc      	movs	r1, #204	@ 0xcc
 8001404:	4893      	ldr	r0, [pc, #588]	@ (8001654 <NfcrdlibEx5_ISO15693+0x2f4>)
 8001406:	f01b fcff 	bl	801ce08 <iprintf>
 800140a:	4b93      	ldr	r3, [pc, #588]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4618      	mov	r0, r3
 8001412:	f01b fc23 	bl	801cc5c <fflush>
 8001416:	e00b      	b.n	8001430 <NfcrdlibEx5_ISO15693+0xd0>
 8001418:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800141a:	461a      	mov	r2, r3
 800141c:	21cc      	movs	r1, #204	@ 0xcc
 800141e:	488f      	ldr	r0, [pc, #572]	@ (800165c <NfcrdlibEx5_ISO15693+0x2fc>)
 8001420:	f01b fcf2 	bl	801ce08 <iprintf>
 8001424:	4b8c      	ldr	r3, [pc, #560]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4618      	mov	r0, r3
 800142c:	f01b fc16 	bl	801cc5c <fflush>

			#ifdef USE_POLLING_MODE
			// 轮询模式下的等待
			uint32_t dwStartTime = HAL_GetTick();
 8001430:	f015 ffb0 	bl	8017394 <HAL_GetTick>
 8001434:	62b8      	str	r0, [r7, #40]	@ 0x28
			while ((HAL_GetTick() - dwStartTime) < 5100)
 8001436:	e007      	b.n	8001448 <NfcrdlibEx5_ISO15693+0xe8>
			{
				// 主动检查和处理IRQ
				phhalHw_Pn5180_PollAndProcessIRQ(pHal);
 8001438:	4b8a      	ldr	r3, [pc, #552]	@ (8001664 <NfcrdlibEx5_ISO15693+0x304>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fb68 	bl	8001b12 <phhalHw_Pn5180_PollAndProcessIRQ>
				HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f015 ffb2 	bl	80173ac <HAL_Delay>
			while ((HAL_GetTick() - dwStartTime) < 5100)
 8001448:	f015 ffa4 	bl	8017394 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 32eb 	movw	r2, #5099	@ 0x13eb
 8001456:	4293      	cmp	r3, r2
 8001458:	d9ee      	bls.n	8001438 <NfcrdlibEx5_ISO15693+0xd8>
            status = phhalHw_Wait(pDiscLoop->pHalDataParams,PHHAL_HW_TIME_MICROSECONDS, 5100); // 设置超时时间5.1s
            CHECK_STATUS(status);
			#endif

            /* Configure Discovery loop for Poll Mode */
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 800145a:	4b83      	ldr	r3, [pc, #524]	@ (8001668 <NfcrdlibEx5_ISO15693+0x308>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	2184      	movs	r1, #132	@ 0x84
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fc02 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            CHECK_STATUS(status);
 800146c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <NfcrdlibEx5_ISO15693+0x12c>
 8001472:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001474:	461a      	mov	r2, r3
 8001476:	21e0      	movs	r1, #224	@ 0xe0
 8001478:	4876      	ldr	r0, [pc, #472]	@ (8001654 <NfcrdlibEx5_ISO15693+0x2f4>)
 800147a:	f01b fcc5 	bl	801ce08 <iprintf>
 800147e:	4b76      	ldr	r3, [pc, #472]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f01b fbe9 	bl	801cc5c <fflush>
 800148a:	e00b      	b.n	80014a4 <NfcrdlibEx5_ISO15693+0x144>
 800148c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800148e:	461a      	mov	r2, r3
 8001490:	21e0      	movs	r1, #224	@ 0xe0
 8001492:	4872      	ldr	r0, [pc, #456]	@ (800165c <NfcrdlibEx5_ISO15693+0x2fc>)
 8001494:	f01b fcb8 	bl	801ce08 <iprintf>
 8001498:	4b6f      	ldr	r3, [pc, #444]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	4618      	mov	r0, r3
 80014a0:	f01b fbdc 	bl	801cc5c <fflush>

            /* Run Discovery loop */
            status = phacDiscLoop_Run(pDiscLoop, PHAC_DISCLOOP_ENTRY_POINT_POLL);
 80014a4:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <NfcrdlibEx5_ISO15693+0x308>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fb0c 	bl	8006ac8 <phacDiscLoop_Sw_Run>
 80014b0:	4603      	mov	r3, r0
 80014b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        }while((status & PH_ERR_MASK) != PHAC_DISCLOOP_DEVICE_ACTIVATED); /* Exit on Card detection */
 80014b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b8b      	cmp	r3, #139	@ 0x8b
 80014ba:	d196      	bne.n	80013ea <NfcrdlibEx5_ISO15693+0x8a>

        /* Card detected */
        /* Get the tag types detected info */
        status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTagsDetected);
 80014bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001668 <NfcrdlibEx5_ISO15693+0x308>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 80014c4:	2187      	movs	r1, #135	@ 0x87
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 ffda 	bl	8007480 <phacDiscLoop_Sw_GetConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Check for Status */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80014d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f af74 	bne.w	80013c2 <NfcrdlibEx5_ISO15693+0x62>
        {
            /* Check for Type V(ISO 15693) tag detection */
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 80014da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f43f af6e 	beq.w	80013c2 <NfcrdlibEx5_ISO15693+0x62>
            {
                DEBUG_PRINTF("\nType V / ISO 15693 / T5T Detected \n");
 80014e6:	4861      	ldr	r0, [pc, #388]	@ (800166c <NfcrdlibEx5_ISO15693+0x30c>)
 80014e8:	f01b fcfe 	bl	801cee8 <puts>
 80014ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f01b fbb2 	bl	801cc5c <fflush>

                /* Print UID */
                DEBUG_PRINTF ("\nUID: ");
 80014f8:	485d      	ldr	r0, [pc, #372]	@ (8001670 <NfcrdlibEx5_ISO15693+0x310>)
 80014fa:	f01b fc85 	bl	801ce08 <iprintf>
 80014fe:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f01b fba9 	bl	801cc5c <fflush>
                phApp_Print_Buff(pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, 0x08);
 800150a:	4b57      	ldr	r3, [pc, #348]	@ (8001668 <NfcrdlibEx5_ISO15693+0x308>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	33b8      	adds	r3, #184	@ 0xb8
 8001510:	2108      	movs	r1, #8
 8001512:	4618      	mov	r0, r3
 8001514:	f000 ffe2 	bl	80024dc <phApp_Print_Buff>

                /* Copy UID */
                memcpy(aReceivedUid, pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, 0x08);
 8001518:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <NfcrdlibEx5_ISO15693+0x308>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	6810      	ldr	r0, [r2, #0]
 8001526:	6851      	ldr	r1, [r2, #4]
 8001528:	c303      	stmia	r3!, {r0, r1}

                /* Check and display Card type info */
                if (DisplayCardTypeInfo(pDiscLoop->sTypeVTargetInfo.aTypeV[0].aUid, &bNTag5_State) == PH_ERR_SUCCESS)
 800152a:	4b4f      	ldr	r3, [pc, #316]	@ (8001668 <NfcrdlibEx5_ISO15693+0x308>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	33b8      	adds	r3, #184	@ 0xb8
 8001530:	f107 020a 	add.w	r2, r7, #10
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f9dc 	bl	80018f4 <DisplayCardTypeInfo>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80c9 	bne.w	80016d6 <NfcrdlibEx5_ISO15693+0x376>
                {
                    do
                    {
                        /* Data length */
                        bDataLength = 0x04;
 8001544:	2304      	movs	r3, #4
 8001546:	83fb      	strh	r3, [r7, #30]

                        /* Block Read */
                        DEBUG_PRINTF("\nRead Data from Block %d", bBlock);
 8001548:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800154c:	4619      	mov	r1, r3
 800154e:	4849      	ldr	r0, [pc, #292]	@ (8001674 <NfcrdlibEx5_ISO15693+0x314>)
 8001550:	f01b fc5a 	bl	801ce08 <iprintf>
 8001554:	4b40      	ldr	r3, [pc, #256]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4618      	mov	r0, r3
 800155c:	f01b fb7e 	bl	801cc5c <fflush>

                        /* Read single block */
                        status = phalICode_ReadSingleBlock(psalI15693,
 8001560:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <NfcrdlibEx5_ISO15693+0x318>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f107 0120 	add.w	r1, r7, #32
 8001568:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800156c:	f107 031e 	add.w	r3, r7, #30
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	460b      	mov	r3, r1
 8001574:	2100      	movs	r1, #0
 8001576:	f009 fdaa 	bl	800b0ce <phalICode_Sw_ReadSingleBlock>
 800157a:	4603      	mov	r3, r0
 800157c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                            PHAL_ICODE_OPTION_OFF,
                            bBlock,
                            &pRxbuffer,
                            &bDataLength);
                        /* Check for Status */
                        if(status != PH_ERR_SUCCESS)
 800157e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001580:	2b00      	cmp	r3, #0
 8001582:	d012      	beq.n	80015aa <NfcrdlibEx5_ISO15693+0x24a>
                        {
                            /* Print Error info */
                            DEBUG_PRINTF ("\nRead operation Failed!!!");
 8001584:	483d      	ldr	r0, [pc, #244]	@ (800167c <NfcrdlibEx5_ISO15693+0x31c>)
 8001586:	f01b fc3f 	bl	801ce08 <iprintf>
 800158a:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4618      	mov	r0, r3
 8001592:	f01b fb63 	bl	801cc5c <fflush>
                            DEBUG_PRINTF("\nExecution aborted!!!\n");
 8001596:	483a      	ldr	r0, [pc, #232]	@ (8001680 <NfcrdlibEx5_ISO15693+0x320>)
 8001598:	f01b fca6 	bl	801cee8 <puts>
 800159c:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f01b fb5a 	bl	801cc5c <fflush>
                            break;
 80015a8:	e095      	b.n	80016d6 <NfcrdlibEx5_ISO15693+0x376>
                        }

                        /* Read Success */
                        DEBUG_PRINTF("\nRead Success");
 80015aa:	4836      	ldr	r0, [pc, #216]	@ (8001684 <NfcrdlibEx5_ISO15693+0x324>)
 80015ac:	f01b fc2c 	bl	801ce08 <iprintf>
 80015b0:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f01b fb50 	bl	801cc5c <fflush>
                        DEBUG_PRINTF("\nThe content of Block %d is:", bBlock);
 80015bc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80015c0:	4619      	mov	r1, r3
 80015c2:	4831      	ldr	r0, [pc, #196]	@ (8001688 <NfcrdlibEx5_ISO15693+0x328>)
 80015c4:	f01b fc20 	bl	801ce08 <iprintf>
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f01b fb44 	bl	801cc5c <fflush>
                        phApp_Print_Buff (pRxbuffer, bDataLength);
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	8bfa      	ldrh	r2, [r7, #30]
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 ff7d 	bl	80024dc <phApp_Print_Buff>
                        DEBUG_PRINTF("\n\n --- End of Read Operation ---");
 80015e2:	482a      	ldr	r0, [pc, #168]	@ (800168c <NfcrdlibEx5_ISO15693+0x32c>)
 80015e4:	f01b fc10 	bl	801ce08 <iprintf>
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f01b fb34 	bl	801cc5c <fflush>

                        /* Block Write */
                        DEBUG_PRINTF("\n\nWrite data to Block %d", bBlock);
 80015f4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80015f8:	4619      	mov	r1, r3
 80015fa:	4825      	ldr	r0, [pc, #148]	@ (8001690 <NfcrdlibEx5_ISO15693+0x330>)
 80015fc:	f01b fc04 	bl	801ce08 <iprintf>
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4618      	mov	r0, r3
 8001608:	f01b fb28 	bl	801cc5c <fflush>

                        /* Write single block */
                        status = phalICode_WriteSingleBlock(psalI15693,
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <NfcrdlibEx5_ISO15693+0x318>)
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	6a39      	ldr	r1, [r7, #32]
 8001612:	8bfb      	ldrh	r3, [r7, #30]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	460b      	mov	r3, r1
 800161e:	2100      	movs	r1, #0
 8001620:	f009 fd95 	bl	800b14e <phalICode_Sw_WriteSingleBlock>
 8001624:	4603      	mov	r3, r0
 8001626:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                            PHAL_ICODE_OPTION_OFF,
                            bBlock,
                            pRxbuffer,
                            bDataLength);
                        /* Check for Status */
                        if(status != PH_ERR_SUCCESS)
 8001628:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800162a:	2b00      	cmp	r3, #0
 800162c:	d034      	beq.n	8001698 <NfcrdlibEx5_ISO15693+0x338>
                        {
                            /* Print Error info */
                            DEBUG_PRINTF ("\nWrite operation Failed!!!");
 800162e:	4819      	ldr	r0, [pc, #100]	@ (8001694 <NfcrdlibEx5_ISO15693+0x334>)
 8001630:	f01b fbea 	bl	801ce08 <iprintf>
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4618      	mov	r0, r3
 800163c:	f01b fb0e 	bl	801cc5c <fflush>
                            DEBUG_PRINTF("\nExecution aborted!!!\n");
 8001640:	480f      	ldr	r0, [pc, #60]	@ (8001680 <NfcrdlibEx5_ISO15693+0x320>)
 8001642:	f01b fc51 	bl	801cee8 <puts>
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <NfcrdlibEx5_ISO15693+0x2f8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4618      	mov	r0, r3
 800164e:	f01b fb05 	bl	801cc5c <fflush>
                            break;
 8001652:	e040      	b.n	80016d6 <NfcrdlibEx5_ISO15693+0x376>
 8001654:	0801ed7c 	.word	0x0801ed7c
 8001658:	2000002c 	.word	0x2000002c
 800165c:	0801ede4 	.word	0x0801ede4
 8001660:	0801ee80 	.word	0x0801ee80
 8001664:	2000052c 	.word	0x2000052c
 8001668:	20000204 	.word	0x20000204
 800166c:	0801ee94 	.word	0x0801ee94
 8001670:	0801eeb8 	.word	0x0801eeb8
 8001674:	0801eec0 	.word	0x0801eec0
 8001678:	20000208 	.word	0x20000208
 800167c:	0801eedc 	.word	0x0801eedc
 8001680:	0801eef8 	.word	0x0801eef8
 8001684:	0801ef10 	.word	0x0801ef10
 8001688:	0801ef20 	.word	0x0801ef20
 800168c:	0801ef40 	.word	0x0801ef40
 8001690:	0801ef64 	.word	0x0801ef64
 8001694:	0801ef80 	.word	0x0801ef80
                        }

                        /* Write Success */
                        DEBUG_PRINTF ("\nWrite Success");
 8001698:	484a      	ldr	r0, [pc, #296]	@ (80017c4 <NfcrdlibEx5_ISO15693+0x464>)
 800169a:	f01b fbb5 	bl	801ce08 <iprintf>
 800169e:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f01b fad9 	bl	801cc5c <fflush>
                        DEBUG_PRINTF("\n\n --- End of Write Operation ---");
 80016aa:	4848      	ldr	r0, [pc, #288]	@ (80017cc <NfcrdlibEx5_ISO15693+0x46c>)
 80016ac:	f01b fbac 	bl	801ce08 <iprintf>
 80016b0:	4b45      	ldr	r3, [pc, #276]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f01b fad0 	bl	801cc5c <fflush>

                        ReadMultipleBlock_HighDataRate(bNTag5_State);
 80016bc:	7abb      	ldrb	r3, [r7, #10]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fa1c 	bl	8001afc <ReadMultipleBlock_HighDataRate>

                        DEBUG_PRINTF("\n\n --- End of Example ---\n\n");
 80016c4:	4842      	ldr	r0, [pc, #264]	@ (80017d0 <NfcrdlibEx5_ISO15693+0x470>)
 80016c6:	f01b fc0f 	bl	801cee8 <puts>
 80016ca:	4b3f      	ldr	r3, [pc, #252]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f01b fac3 	bl	801cc5c <fflush>
                    }while(0);
                }

                DEBUG_PRINTF("\nPlease Remove the Card\n\n");
 80016d6:	483f      	ldr	r0, [pc, #252]	@ (80017d4 <NfcrdlibEx5_ISO15693+0x474>)
 80016d8:	f01b fc06 	bl	801cee8 <puts>
 80016dc:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f01b faba 	bl	801cc5c <fflush>

                /* Field RESET */
                status = phhalHw_FieldReset(pHal);
 80016e8:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <NfcrdlibEx5_ISO15693+0x478>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00b fdaf 	bl	800d250 <phhalHw_Pn5180_FieldReset>
 80016f2:	4603      	mov	r3, r0
 80016f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                CHECK_STATUS(status);
 80016f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00d      	beq.n	8001718 <NfcrdlibEx5_ISO15693+0x3b8>
 80016fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016fe:	461a      	mov	r2, r3
 8001700:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8001704:	4835      	ldr	r0, [pc, #212]	@ (80017dc <NfcrdlibEx5_ISO15693+0x47c>)
 8001706:	f01b fb7f 	bl	801ce08 <iprintf>
 800170a:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4618      	mov	r0, r3
 8001712:	f01b faa3 	bl	801cc5c <fflush>
 8001716:	e00c      	b.n	8001732 <NfcrdlibEx5_ISO15693+0x3d2>
 8001718:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800171a:	461a      	mov	r2, r3
 800171c:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8001720:	482f      	ldr	r0, [pc, #188]	@ (80017e0 <NfcrdlibEx5_ISO15693+0x480>)
 8001722:	f01b fb71 	bl	801ce08 <iprintf>
 8001726:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f01b fa95 	bl	801cc5c <fflush>

                /* Make sure that example application is not detecting the same card continuously */
                do
                {
                    /* Clear UID buffer */
                    memset(aTempUid, 0x00, 0x08);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2208      	movs	r2, #8
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f01b fcc4 	bl	801d0c8 <memset>

                    /* Inventory request */
                    status = phpalSli15693_Inventory(pDiscLoop->pPalSli15693DataParams,
 8001740:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <NfcrdlibEx5_ISO15693+0x484>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001746:	f107 020c 	add.w	r2, r7, #12
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	f107 030b 	add.w	r3, r7, #11
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2340      	movs	r3, #64	@ 0x40
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4613      	mov	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	2126      	movs	r1, #38	@ 0x26
 8001760:	f014 f827 	bl	80157b2 <phpalSli15693_Sw_Inventory>
 8001764:	4603      	mov	r3, r0
 8001766:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                        ISO15693_UID_SIZE_BITS,
                        &bDsfid,
                        aTempUid);

                    /* Check for Status */
                    if (status != PH_ERR_SUCCESS)
 8001768:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800176a:	2b00      	cmp	r3, #0
 800176c:	d128      	bne.n	80017c0 <NfcrdlibEx5_ISO15693+0x460>
                    {
                        break; /* Card Removed, break from the loop */
                    }

                    /* Delay - 5 milli seconds*/
                    status = phhalHw_Wait(pDiscLoop->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, 5);
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <NfcrdlibEx5_ISO15693+0x484>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	2205      	movs	r2, #5
 8001776:	2101      	movs	r1, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f00b fd21 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 800177e:	4603      	mov	r3, r0
 8001780:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    CHECK_STATUS(status);
 8001782:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00d      	beq.n	80017a4 <NfcrdlibEx5_ISO15693+0x444>
 8001788:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800178a:	461a      	mov	r2, r3
 800178c:	f240 1153 	movw	r1, #339	@ 0x153
 8001790:	4812      	ldr	r0, [pc, #72]	@ (80017dc <NfcrdlibEx5_ISO15693+0x47c>)
 8001792:	f01b fb39 	bl	801ce08 <iprintf>
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4618      	mov	r0, r3
 800179e:	f01b fa5d 	bl	801cc5c <fflush>
 80017a2:	e7c6      	b.n	8001732 <NfcrdlibEx5_ISO15693+0x3d2>
 80017a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a6:	461a      	mov	r2, r3
 80017a8:	f240 1153 	movw	r1, #339	@ 0x153
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <NfcrdlibEx5_ISO15693+0x480>)
 80017ae:	f01b fb2b 	bl	801ce08 <iprintf>
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <NfcrdlibEx5_ISO15693+0x468>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f01b fa4f 	bl	801cc5c <fflush>
                    memset(aTempUid, 0x00, 0x08);
 80017be:	e7b8      	b.n	8001732 <NfcrdlibEx5_ISO15693+0x3d2>
                        break; /* Card Removed, break from the loop */
 80017c0:	bf00      	nop
        bNTag5_State = 0;
 80017c2:	e5fe      	b.n	80013c2 <NfcrdlibEx5_ISO15693+0x62>
 80017c4:	0801ef9c 	.word	0x0801ef9c
 80017c8:	2000002c 	.word	0x2000002c
 80017cc:	0801efac 	.word	0x0801efac
 80017d0:	0801efd0 	.word	0x0801efd0
 80017d4:	0801efec 	.word	0x0801efec
 80017d8:	2000052c 	.word	0x2000052c
 80017dc:	0801ed7c 	.word	0x0801ed7c
 80017e0:	0801ede4 	.word	0x0801ede4
 80017e4:	20000204 	.word	0x20000204

080017e8 <phExample_Init>:
 * \brief   Initializes the Reader Library
 * \param   none
 * \return  status  Returns the function status
 **********************************************************************************************/
static phStatus_t phExample_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
#if defined NXPBUILD__PHHAL_HW_RC663
    uint8_t bChipVersion;
#endif /* NXPBUILD__PHHAL_HW_RC663 */

    /* Device limit for Type V (ISO 15693) */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <phExample_Init+0xfc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	2113      	movs	r1, #19
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fa38 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <phExample_Init+0x3a>
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	461a      	mov	r2, r3
 800180a:	f240 1169 	movw	r1, #361	@ 0x169
 800180e:	4836      	ldr	r0, [pc, #216]	@ (80018e8 <phExample_Init+0x100>)
 8001810:	f01b fafa 	bl	801ce08 <iprintf>
 8001814:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <phExample_Init+0x104>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4618      	mov	r0, r3
 800181c:	f01b fa1e 	bl	801cc5c <fflush>
 8001820:	e00c      	b.n	800183c <phExample_Init+0x54>
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	461a      	mov	r2, r3
 8001826:	f240 1169 	movw	r1, #361	@ 0x169
 800182a:	4831      	ldr	r0, [pc, #196]	@ (80018f0 <phExample_Init+0x108>)
 800182c:	f01b faec 	bl	801ce08 <iprintf>
 8001830:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <phExample_Init+0x104>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4618      	mov	r0, r3
 8001838:	f01b fa10 	bl	801cc5c <fflush>

    /* Passive polling Tx Guard times in micro seconds. */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5000);
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <phExample_Init+0xfc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001844:	2104      	movs	r1, #4
 8001846:	4618      	mov	r0, r3
 8001848:	f005 fa10 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <phExample_Init+0x8a>
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	461a      	mov	r2, r3
 800185a:	f240 116d 	movw	r1, #365	@ 0x16d
 800185e:	4822      	ldr	r0, [pc, #136]	@ (80018e8 <phExample_Init+0x100>)
 8001860:	f01b fad2 	bl	801ce08 <iprintf>
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <phExample_Init+0x104>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f01b f9f6 	bl	801cc5c <fflush>
 8001870:	e00c      	b.n	800188c <phExample_Init+0xa4>
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	461a      	mov	r2, r3
 8001876:	f240 116d 	movw	r1, #365	@ 0x16d
 800187a:	481d      	ldr	r0, [pc, #116]	@ (80018f0 <phExample_Init+0x108>)
 800187c:	f01b fac4 	bl	801ce08 <iprintf>
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <phExample_Init+0x104>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4618      	mov	r0, r3
 8001888:	f01b f9e8 	bl	801cc5c <fflush>

    /* Bailout on Type V (ISO 15693) detect */
    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, PHAC_DISCLOOP_POS_BIT_MASK_V);
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <phExample_Init+0xfc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2210      	movs	r2, #16
 8001892:	2186      	movs	r1, #134	@ 0x86
 8001894:	4618      	mov	r0, r3
 8001896:	f005 f9e9 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
    CHECK_STATUS(status);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <phExample_Init+0xd8>
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f240 1171 	movw	r1, #369	@ 0x171
 80018ac:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <phExample_Init+0x100>)
 80018ae:	f01b faab 	bl	801ce08 <iprintf>
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <phExample_Init+0x104>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f01b f9cf 	bl	801cc5c <fflush>
 80018be:	e00c      	b.n	80018da <phExample_Init+0xf2>
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f240 1171 	movw	r1, #369	@ 0x171
 80018c8:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <phExample_Init+0x108>)
 80018ca:	f01b fa9d 	bl	801ce08 <iprintf>
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <phExample_Init+0x104>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f01b f9c1 	bl	801cc5c <fflush>
    CHECK_STATUS(status);
    DEBUG_PRINTF("\nReader chip RC663: 0x%02x\n", bChipVersion);
#endif /* NXPBUILD__PHHAL_HW_RC663 */

    /* Return Success */
    return PH_ERR_SUCCESS;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000204 	.word	0x20000204
 80018e8:	0801ed7c 	.word	0x0801ed7c
 80018ec:	2000002c 	.word	0x2000002c
 80018f0:	0801ede4 	.word	0x0801ede4

080018f4 <DisplayCardTypeInfo>:
 * \brief   This functions prints the Card type information like SLI, SLIX etc.
 * \param   *pUID   UID Pointer
 * \return  status  Returns the function status
 **********************************************************************************************/
static phStatus_t DisplayCardTypeInfo(uint8_t *pUID, uint8_t *pNTag5_State)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
    uint8_t bCardType;
    phStatus_t  status = PH_ERR_SUCCESS;
 80018fe:	2300      	movs	r3, #0
 8001900:	81fb      	strh	r3, [r7, #14]

    /* Check for ISO15693 NXP TAG */
    if (pUID[ISO15693_UID_NXP_IDPOS] != ISO15693_NXP_TAG_ID)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3306      	adds	r3, #6
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00b      	beq.n	8001924 <DisplayCardTypeInfo+0x30>
    {
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: Non NXP ISO15693 Tag Detected\n");
 800190c:	486f      	ldr	r0, [pc, #444]	@ (8001acc <DisplayCardTypeInfo+0x1d8>)
 800190e:	f01b faeb 	bl	801cee8 <puts>
 8001912:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f01b f99f 	bl	801cc5c <fflush>

        /* Return Status */
        return (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 800191e:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001922:	e0cf      	b.n	8001ac4 <DisplayCardTypeInfo+0x1d0>
    }

    /* Read SLI Card type information from UID (Byte 4) */
    bCardType = ((pUID[ISO15693_MFGID_CARDSEL_IDPOS] & ISO15693_MFGID_CARDSEL_MSK) >> ISO15693_MFGID_CARDSEL_BITPOS);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3304      	adds	r3, #4
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	10db      	asrs	r3, r3, #3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	737b      	strb	r3, [r7, #13]

    /* Switch based on Card Type(SLI/SLIX/SLIX2) */
    switch (bCardType)
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	2b03      	cmp	r3, #3
 8001938:	f200 80b6 	bhi.w	8001aa8 <DisplayCardTypeInfo+0x1b4>
 800193c:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <DisplayCardTypeInfo+0x50>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001955 	.word	0x08001955
 8001948:	08001a35 	.word	0x08001a35
 800194c:	080019c5 	.word	0x080019c5
 8001950:	08001a49 	.word	0x08001a49
    {
    case ISO15693_MFGID_SLI_STATE:          /* SLI Card state */
        /* Switch based on Card Type(SLI/SLI-S/SLI-L) */
        switch (pUID[ISO15693_UID_CARDSEL_IDPOS])
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3305      	adds	r3, #5
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d01a      	beq.n	8001994 <DisplayCardTypeInfo+0xa0>
 800195e:	2b03      	cmp	r3, #3
 8001960:	dc22      	bgt.n	80019a8 <DisplayCardTypeInfo+0xb4>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d002      	beq.n	800196c <DisplayCardTypeInfo+0x78>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d00a      	beq.n	8001980 <DisplayCardTypeInfo+0x8c>
 800196a:	e01d      	b.n	80019a8 <DisplayCardTypeInfo+0xb4>
        {
        case ISO15693_UID_SLI_STATE:        /* SLI Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI\n");
 800196c:	4859      	ldr	r0, [pc, #356]	@ (8001ad4 <DisplayCardTypeInfo+0x1e0>)
 800196e:	f01b fabb 	bl	801cee8 <puts>
 8001972:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f01b f96f 	bl	801cc5c <fflush>
            break;
 800197e:	e020      	b.n	80019c2 <DisplayCardTypeInfo+0xce>

        case ISO15693_UID_SLI_S_STATE:      /* SLI-S Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI-S\n");
 8001980:	4855      	ldr	r0, [pc, #340]	@ (8001ad8 <DisplayCardTypeInfo+0x1e4>)
 8001982:	f01b fab1 	bl	801cee8 <puts>
 8001986:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f01b f965 	bl	801cc5c <fflush>
            break;
 8001992:	e016      	b.n	80019c2 <DisplayCardTypeInfo+0xce>

        case ISO15693_UID_SLI_L_STATE:      /* SLI-L Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLI-L\n");
 8001994:	4851      	ldr	r0, [pc, #324]	@ (8001adc <DisplayCardTypeInfo+0x1e8>)
 8001996:	f01b faa7 	bl	801cee8 <puts>
 800199a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f01b f95b 	bl	801cc5c <fflush>
            break;
 80019a6:	e00c      	b.n	80019c2 <DisplayCardTypeInfo+0xce>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 80019a8:	484d      	ldr	r0, [pc, #308]	@ (8001ae0 <DisplayCardTypeInfo+0x1ec>)
 80019aa:	f01b fa9d 	bl	801cee8 <puts>
 80019ae:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f01b f951 	bl	801cc5c <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 80019ba:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 80019be:	81fb      	strh	r3, [r7, #14]
            break;
 80019c0:	bf00      	nop
        }
        break;
 80019c2:	e07e      	b.n	8001ac2 <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_SLIX_STATE:         /* SLIX Card state */
        /* Switch based on Card Type(SLIX/SLIX-S/SLIX-L) */
        switch (pUID[ISO15693_UID_CARDSEL_IDPOS])
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3305      	adds	r3, #5
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d01a      	beq.n	8001a04 <DisplayCardTypeInfo+0x110>
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	dc22      	bgt.n	8001a18 <DisplayCardTypeInfo+0x124>
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d002      	beq.n	80019dc <DisplayCardTypeInfo+0xe8>
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d00a      	beq.n	80019f0 <DisplayCardTypeInfo+0xfc>
 80019da:	e01d      	b.n	8001a18 <DisplayCardTypeInfo+0x124>
        {
        case ISO15693_UID_SLIX_STATE:       /* SLIX Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX\n");
 80019dc:	4841      	ldr	r0, [pc, #260]	@ (8001ae4 <DisplayCardTypeInfo+0x1f0>)
 80019de:	f01b fa83 	bl	801cee8 <puts>
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f01b f937 	bl	801cc5c <fflush>
            break;
 80019ee:	e020      	b.n	8001a32 <DisplayCardTypeInfo+0x13e>

        case ISO15693_UID_SLIX_S_STATE:     /* SLIX-S Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX-S\n");
 80019f0:	483d      	ldr	r0, [pc, #244]	@ (8001ae8 <DisplayCardTypeInfo+0x1f4>)
 80019f2:	f01b fa79 	bl	801cee8 <puts>
 80019f6:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f01b f92d 	bl	801cc5c <fflush>
            break;
 8001a02:	e016      	b.n	8001a32 <DisplayCardTypeInfo+0x13e>

        case ISO15693_UID_SLIX_L_STATE:     /* SLIX-L Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE SLIX-L\n");
 8001a04:	4839      	ldr	r0, [pc, #228]	@ (8001aec <DisplayCardTypeInfo+0x1f8>)
 8001a06:	f01b fa6f 	bl	801cee8 <puts>
 8001a0a:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f01b f923 	bl	801cc5c <fflush>
            break;
 8001a16:	e00c      	b.n	8001a32 <DisplayCardTypeInfo+0x13e>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001a18:	4831      	ldr	r0, [pc, #196]	@ (8001ae0 <DisplayCardTypeInfo+0x1ec>)
 8001a1a:	f01b fa65 	bl	801cee8 <puts>
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f01b f919 	bl	801cc5c <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001a2a:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001a2e:	81fb      	strh	r3, [r7, #14]
            break;
 8001a30:	bf00      	nop
        }
        break;
 8001a32:	e046      	b.n	8001ac2 <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_SLIX2_STATE:        /* SLIX2 Card state */
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: ICODE SLIX2\n");
 8001a34:	482e      	ldr	r0, [pc, #184]	@ (8001af0 <DisplayCardTypeInfo+0x1fc>)
 8001a36:	f01b fa57 	bl	801cee8 <puts>
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01b f90b 	bl	801cc5c <fflush>
        break;
 8001a46:	e03c      	b.n	8001ac2 <DisplayCardTypeInfo+0x1ce>

    case ISO15693_MFGID_DNA_STATE:
        /* Switch based on Card Type(ICode DNA or NTag 5 Series) */
        switch ((pUID[ISO15693_MFGID_CARDSEL_IDPOS] & ISO15693_MFGID_DNA_CARDSEL_MSK) >> ISO15693_MFGID_DNA_CARDSEL_BITPOS)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	119b      	asrs	r3, r3, #6
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <DisplayCardTypeInfo+0x16a>
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d00a      	beq.n	8001a72 <DisplayCardTypeInfo+0x17e>
 8001a5c:	e016      	b.n	8001a8c <DisplayCardTypeInfo+0x198>
        {
        case ISO15693_UID_ICODE_DNA_STATE:  /* ICode DNA Card state */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: ICODE DNA\n");
 8001a5e:	4825      	ldr	r0, [pc, #148]	@ (8001af4 <DisplayCardTypeInfo+0x200>)
 8001a60:	f01b fa42 	bl	801cee8 <puts>
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f01b f8f6 	bl	801cc5c <fflush>
            break;
 8001a70:	e019      	b.n	8001aa6 <DisplayCardTypeInfo+0x1b2>

        case ISO15693_UID_NTAG_5_SERIES:    /* NTag 5 Series */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: NTag 5 Series\n");
 8001a72:	4821      	ldr	r0, [pc, #132]	@ (8001af8 <DisplayCardTypeInfo+0x204>)
 8001a74:	f01b fa38 	bl	801cee8 <puts>
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f01b f8ec 	bl	801cc5c <fflush>
            *pNTag5_State = 1;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
            break;
 8001a8a:	e00c      	b.n	8001aa6 <DisplayCardTypeInfo+0x1b2>

        default:                            /* default */
            /* Print Product type */
            DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001a8c:	4814      	ldr	r0, [pc, #80]	@ (8001ae0 <DisplayCardTypeInfo+0x1ec>)
 8001a8e:	f01b fa2b 	bl	801cee8 <puts>
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f01b f8df 	bl	801cc5c <fflush>
            /* Update status */
            status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001a9e:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001aa2:	81fb      	strh	r3, [r7, #14]
            break;
 8001aa4:	bf00      	nop
        }
        break;
 8001aa6:	e00c      	b.n	8001ac2 <DisplayCardTypeInfo+0x1ce>

    default:                                /* default */
        /* Print Product type */
        DEBUG_PRINTF("\nProduct: Unidentified Tag\n");
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <DisplayCardTypeInfo+0x1ec>)
 8001aaa:	f01b fa1d 	bl	801cee8 <puts>
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <DisplayCardTypeInfo+0x1dc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f01b f8d1 	bl	801cc5c <fflush>
        /* Update status */
        status = (PH_COMP_PAL_SLI15693 | PH_ERR_INVALID_DATA_PARAMS);
 8001aba:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 8001abe:	81fb      	strh	r3, [r7, #14]
        break;
 8001ac0:	bf00      	nop
    }

    /* Return Status */
    return status;
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	0801f008 	.word	0x0801f008
 8001ad0:	2000002c 	.word	0x2000002c
 8001ad4:	0801f030 	.word	0x0801f030
 8001ad8:	0801f044 	.word	0x0801f044
 8001adc:	0801f05c 	.word	0x0801f05c
 8001ae0:	0801f074 	.word	0x0801f074
 8001ae4:	0801f090 	.word	0x0801f090
 8001ae8:	0801f0a8 	.word	0x0801f0a8
 8001aec:	0801f0c0 	.word	0x0801f0c0
 8001af0:	0801f0d8 	.word	0x0801f0d8
 8001af4:	0801f0f0 	.word	0x0801f0f0
 8001af8:	0801f104 	.word	0x0801f104

08001afc <ReadMultipleBlock_HighDataRate>:
 * \brief   This functions performs Read Multiple Blocks at higher data rates with NTag 5.
 * \param   *pUID   UID Pointer
 * \return  status  Returns the function status
 **********************************************************************************************/
static void ReadMultipleBlock_HighDataRate(uint8_t bNTag5_State)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
            DEBUG_PRINTF("\nFailed to switch to selected higher baud rate using Parameter Select Exchange");
            DEBUG_PRINTF("\n!!!!!!!!!!!!Try with NTag 5 Cards supporting higer data rates!!!!!!!!!!!!");
        }
    }
#endif /* CUSTOM_HIGH_DATA_RATE_DEMO */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <phhalHw_Pn5180_PollAndProcessIRQ>:
#endif /* NXPBUILD__PHHAL_HW_TARGET */


// 创建一个轮询函数来替代中断处理
phStatus_t phhalHw_Pn5180_PollAndProcessIRQ(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
    uint32_t dwIrqStatus;
    phStatus_t status;

    // 读取IRQ状态
    status = phhalHw_Pn5180_ReadRegister(pDataParams, IRQ_STATUS, &dwIrqStatus);
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2102      	movs	r1, #2
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f00a fe78 	bl	800c818 <phhalHw_Pn5180_ReadRegister>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	81fb      	strh	r3, [r7, #14]
    if (status != PH_ERR_SUCCESS) return status;
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <phhalHw_Pn5180_PollAndProcessIRQ+0x24>
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	e011      	b.n	8001b5a <phhalHw_Pn5180_PollAndProcessIRQ+0x48>

    // 如果有中断标志
    if (dwIrqStatus != 0)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <phhalHw_Pn5180_PollAndProcessIRQ+0x46>
    {
        // 处理中断（原本在中断回调中的逻辑）
        if (pDataParams->pRFISRCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <phhalHw_Pn5180_PollAndProcessIRQ+0x3a>
        {
            pDataParams->pRFISRCallback(pDataParams);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
        }

        // 清除已处理的中断标志
        phhalHw_Pn5180_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqStatus);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2103      	movs	r1, #3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f00a fe4e 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
    }

    return PH_ERR_SUCCESS;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bdc <MX_SPI3_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b82:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b96:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001b9a:	2218      	movs	r2, #24
 8001b9c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_SPI3_Init+0x74>)
 8001bc4:	f017 f8f6 	bl	8018db4 <HAL_SPI_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001bce:	f7ff fac6 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000020c 	.word	0x2000020c
 8001bdc:	40003c00 	.word	0x40003c00

08001be0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	@ (8001c5c <HAL_SPI_MspInit+0x7c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d128      	bne.n	8001c54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c02:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_SPI_MspInit+0x80>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 8001c32:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c44:	2306      	movs	r3, #6
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <HAL_SPI_MspInit+0x84>)
 8001c50:	f015 fd60 	bl	8017714 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	@ 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40003c00 	.word	0x40003c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000800 	.word	0x48000800

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_MspInit+0x44>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_MspInit+0x44>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_MspInit+0x44>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_MspInit+0x44>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <HAL_MspInit+0x44>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_MspInit+0x44>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f015 fb31 	bl	801736c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <TIM2_IRQHandler+0x10>)
 8001d16:	f017 ff51 	bl	8019bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200002c0 	.word	0x200002c0

08001d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <USART1_IRQHandler+0x10>)
 8001d2a:	f019 f82d 	bl	801ad88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000460 	.word	0x20000460

08001d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_kill>:

int _kill(int pid, int sig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d52:	f01b fa0b 	bl	801d16c <__errno>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2216      	movs	r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_exit>:

void _exit (int status)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ffe7 	bl	8001d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7a:	bf00      	nop
 8001d7c:	e7fd      	b.n	8001d7a <_exit+0x12>

08001d7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e00a      	b.n	8001da6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d90:	f3af 8000 	nop.w
 8001d94:	4601      	mov	r1, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbf0      	blt.n	8001d90 <_read+0x12>
  }

  return len;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e009      	b.n	8001dde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	60ba      	str	r2, [r7, #8]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fb18 	bl	8002408 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbf1      	blt.n	8001dca <_write+0x12>
  }
  return len;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_close>:

int _close(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e18:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_isatty>:

int _isatty(int file)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f01b f970 	bl	801d16c <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000c000 	.word	0x2000c000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	20000270 	.word	0x20000270
 8001ec0:	20001910 	.word	0x20001910

08001ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b096      	sub	sp, #88	@ 0x58
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	611a      	str	r2, [r3, #16]
 8001f0a:	615a      	str	r2, [r3, #20]
 8001f0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	222c      	movs	r2, #44	@ 0x2c
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f01b f8d7 	bl	801d0c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f1c:	4a38      	ldr	r2, [pc, #224]	@ (8002000 <MX_TIM1_Init+0x118>)
 8001f1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001f20:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f22:	224f      	movs	r2, #79	@ 0x4f
 8001f24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001f2c:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f2e:	f240 1271 	movw	r2, #369	@ 0x171
 8001f32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f34:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f3a:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f46:	482d      	ldr	r0, [pc, #180]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f48:	f017 fc7a 	bl	8019840 <HAL_TIM_PWM_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001f52:	f7ff f904 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f66:	4619      	mov	r1, r3
 8001f68:	4824      	ldr	r0, [pc, #144]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f6a:	f018 fced 	bl	801a948 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f74:	f7ff f8f3 	bl	800115e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f78:	2360      	movs	r3, #96	@ 0x60
 8001f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 8001f7c:	23b9      	movs	r3, #185	@ 0xb9
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f94:	220c      	movs	r2, #12
 8001f96:	4619      	mov	r1, r3
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001f9a:	f017 ff17 	bl	8019dcc <HAL_TIM_PWM_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001fa4:	f7ff f8db 	bl	800115e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001fde:	f018 fd19 	bl	801aa14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001fe8:	f7ff f8b9 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <MX_TIM1_Init+0x114>)
 8001fee:	f000 f8e5 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001ff2:	bf00      	nop
 8001ff4:	3758      	adds	r7, #88	@ 0x58
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000274 	.word	0x20000274
 8002000:	40012c00 	.word	0x40012c00

08002004 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <MX_TIM2_Init+0x98>)
 8002024:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800202a:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <MX_TIM2_Init+0x98>)
 800202c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <MX_TIM2_Init+0x98>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002038:	4b18      	ldr	r3, [pc, #96]	@ (800209c <MX_TIM2_Init+0x98>)
 800203a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800203e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b16      	ldr	r3, [pc, #88]	@ (800209c <MX_TIM2_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <MX_TIM2_Init+0x98>)
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800204c:	4813      	ldr	r0, [pc, #76]	@ (800209c <MX_TIM2_Init+0x98>)
 800204e:	f017 fad7 	bl	8019600 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002058:	f7ff f881 	bl	800115e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	480c      	ldr	r0, [pc, #48]	@ (800209c <MX_TIM2_Init+0x98>)
 800206a:	f017 ffc3 	bl	8019ff4 <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002074:	f7ff f873 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	@ (800209c <MX_TIM2_Init+0x98>)
 8002086:	f018 fc5f 	bl	801a948 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002090:	f7ff f865 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200002c0 	.word	0x200002c0

080020a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020b2:	4a15      	ldr	r2, [pc, #84]	@ (8002108 <MX_TIM6_Init+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80020b6:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020b8:	224f      	movs	r2, #79	@ 0x4f
 80020ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020d0:	f017 fa96 	bl	8019600 <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80020da:	f7ff f840 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	4806      	ldr	r0, [pc, #24]	@ (8002104 <MX_TIM6_Init+0x64>)
 80020ec:	f018 fc2c 	bl	801a948 <HAL_TIMEx_MasterConfigSynchronization>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020f6:	f7ff f832 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000030c 	.word	0x2000030c
 8002108:	40001000 	.word	0x40001000

0800210c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_TIM_PWM_MspInit+0x38>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10b      	bne.n	8002136 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 8002124:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215c:	d114      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_TIM_Base_MspInit+0x68>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <HAL_TIM_Base_MspInit+0x68>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6593      	str	r3, [r2, #88]	@ 0x58
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_TIM_Base_MspInit+0x68>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2102      	movs	r1, #2
 800217a:	201c      	movs	r0, #28
 800217c:	f015 fa15 	bl	80175aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002180:	201c      	movs	r0, #28
 8002182:	f015 fa2e 	bl	80175e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002186:	e010      	b.n	80021aa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_TIM_Base_MspInit+0x6c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10b      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_TIM_Base_MspInit+0x68>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_TIM_Base_MspInit+0x68>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	6593      	str	r3, [r2, #88]	@ 0x58
 800219e:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_TIM_Base_MspInit+0x68>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40001000 	.word	0x40001000

080021bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <HAL_TIM_MspPostInit+0x68>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11d      	bne.n	800221a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 80021f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002200:	2302      	movs	r3, #2
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002216:	f015 fa7d 	bl	8017714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40021000 	.word	0x40021000

0800222c <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800223c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8002240:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8002244:	3360      	adds	r3, #96	@ 0x60
 8002246:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 8002248:	480b      	ldr	r0, [pc, #44]	@ (8002278 <delay_us+0x4c>)
 800224a:	f017 fa31 	bl	80196b0 <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <delay_us+0x4c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	89fa      	ldrh	r2, [r7, #14]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 8002256:	e003      	b.n	8002260 <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <delay_us+0x4c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002266:	4293      	cmp	r3, r2
 8002268:	d9f6      	bls.n	8002258 <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 800226a:	4803      	ldr	r0, [pc, #12]	@ (8002278 <delay_us+0x4c>)
 800226c:	f017 fa6c 	bl	8019748 <HAL_TIM_Base_Stop>
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000030c 	.word	0x2000030c

0800227c <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	460a      	mov	r2, r1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 800228c:	e019      	b.n	80022c2 <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 800228e:	210c      	movs	r1, #12
 8002290:	4811      	ldr	r0, [pc, #68]	@ (80022d8 <beep_start+0x5c>)
 8002292:	f017 fb2d 	bl	80198f0 <HAL_TIM_PWM_Start>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 800229c:	f7fe ff5f 	bl	800115e <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f015 f882 	bl	80173ac <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 80022a8:	210c      	movs	r1, #12
 80022aa:	480b      	ldr	r0, [pc, #44]	@ (80022d8 <beep_start+0x5c>)
 80022ac:	f017 fbfe 	bl	8019aac <HAL_TIM_PWM_Stop>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 80022b6:	f7fe ff52 	bl	800115e <Error_Handler>
		}
		HAL_Delay(interval);
 80022ba:	88bb      	ldrh	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	f015 f875 	bl	80173ac <HAL_Delay>
	while( times -- )
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	71fa      	strb	r2, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e0      	bne.n	800228e <beep_start+0x12>
	}
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000274 	.word	0x20000274

080022dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e0:	4b16      	ldr	r3, [pc, #88]	@ (800233c <MX_USART1_UART_Init+0x60>)
 80022e2:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <MX_USART1_UART_Init+0x64>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <MX_USART1_UART_Init+0x60>)
 80022e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <MX_USART1_UART_Init+0x60>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <MX_USART1_UART_Init+0x60>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b10      	ldr	r3, [pc, #64]	@ (800233c <MX_USART1_UART_Init+0x60>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <MX_USART1_UART_Init+0x60>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <MX_USART1_UART_Init+0x60>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <MX_USART1_UART_Init+0x60>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <MX_USART1_UART_Init+0x60>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <MX_USART1_UART_Init+0x60>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4807      	ldr	r0, [pc, #28]	@ (800233c <MX_USART1_UART_Init+0x60>)
 8002320:	f018 fc0e 	bl	801ab40 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800232a:	f7fe ff18 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 800232e:	2201      	movs	r2, #1
 8002330:	4904      	ldr	r1, [pc, #16]	@ (8002344 <MX_USART1_UART_Init+0x68>)
 8002332:	4802      	ldr	r0, [pc, #8]	@ (800233c <MX_USART1_UART_Init+0x60>)
 8002334:	f018 fcdc 	bl	801acf0 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000460 	.word	0x20000460
 8002340:	40013800 	.word	0x40013800
 8002344:	20000358 	.word	0x20000358

08002348 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0a0      	sub	sp, #128	@ 0x80
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	225c      	movs	r2, #92	@ 0x5c
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f01a fead 	bl	801d0c8 <memset>
  if(uartHandle->Instance==USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <HAL_UART_MspInit+0xb8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d13f      	bne.n	80023f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002378:	2301      	movs	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	4618      	mov	r0, r3
 8002386:	f016 fa0b 	bl	80187a0 <HAL_RCCEx_PeriphCLKConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002390:	f7fe fee5 	bl	800115e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_UART_MspInit+0xbc>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002398:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <HAL_UART_MspInit+0xbc>)
 800239a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239e:	6613      	str	r3, [r2, #96]	@ 0x60
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_UART_MspInit+0xbc>)
 80023a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_UART_MspInit+0xbc>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <HAL_UART_MspInit+0xbc>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <HAL_UART_MspInit+0xbc>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d6:	2307      	movs	r3, #7
 80023d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e4:	f015 f996 	bl	8017714 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2025      	movs	r0, #37	@ 0x25
 80023ee:	f015 f8dc 	bl	80175aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f2:	2025      	movs	r0, #37	@ 0x25
 80023f4:	f015 f8f5 	bl	80175e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3780      	adds	r7, #128	@ 0x80
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013800 	.word	0x40013800
 8002404:	40021000 	.word	0x40021000

08002408 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002410:	1d39      	adds	r1, r7, #4
 8002412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002416:	2201      	movs	r2, #1
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <__io_putchar+0x20>)
 800241a:	f018 fbdf 	bl	801abdc <HAL_UART_Transmit>
	return ch;
 800241e:	687b      	ldr	r3, [r7, #4]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000460 	.word	0x20000460

0800242c <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_UART_RxCpltCallback+0x44>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d113      	bne.n	8002466 <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 800243e:	490d      	ldr	r1, [pc, #52]	@ (8002474 <HAL_UART_RxCpltCallback+0x48>)
 8002440:	480d      	ldr	r0, [pc, #52]	@ (8002478 <HAL_UART_RxCpltCallback+0x4c>)
 8002442:	f01a fce1 	bl	801ce08 <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_UART_RxCpltCallback+0x50>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	b2d1      	uxtb	r1, r2
 800244e:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_UART_RxCpltCallback+0x50>)
 8002450:	7011      	strb	r1, [r2, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_UART_RxCpltCallback+0x54>)
 8002456:	7819      	ldrb	r1, [r3, #0]
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_UART_RxCpltCallback+0x48>)
 800245a:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 800245c:	2201      	movs	r2, #1
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <HAL_UART_RxCpltCallback+0x54>)
 8002460:	4808      	ldr	r0, [pc, #32]	@ (8002484 <HAL_UART_RxCpltCallback+0x58>)
 8002462:	f018 fc45 	bl	801acf0 <HAL_UART_Receive_IT>
	}
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40013800 	.word	0x40013800
 8002474:	2000035c 	.word	0x2000035c
 8002478:	0801f11c 	.word	0x0801f11c
 800247c:	2000045c 	.word	0x2000045c
 8002480:	20000358 	.word	0x20000358
 8002484:	20000460 	.word	0x20000460

08002488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800248c:	f7ff fd1a 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002490:	480c      	ldr	r0, [pc, #48]	@ (80024c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002492:	490d      	ldr	r1, [pc, #52]	@ (80024c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <LoopForever+0xe>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002498:	e002      	b.n	80024a0 <LoopCopyDataInit>

0800249a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800249c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249e:	3304      	adds	r3, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a4:	d3f9      	bcc.n	800249a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a8:	4c0a      	ldr	r4, [pc, #40]	@ (80024d4 <LoopForever+0x16>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ac:	e001      	b.n	80024b2 <LoopFillZerobss>

080024ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b0:	3204      	adds	r2, #4

080024b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b4:	d3fb      	bcc.n	80024ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024b6:	f01a fe5f 	bl	801d178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ba:	f7fe fde1 	bl	8001080 <main>

080024be <LoopForever>:

LoopForever:
    b LoopForever
 80024be:	e7fe      	b.n	80024be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024c0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80024cc:	08020594 	.word	0x08020594
  ldr r2, =_sbss
 80024d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024d4:	2000190c 	.word	0x2000190c

080024d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC1_IRQHandler>
	...

080024dc <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e010      	b.n	8002510 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	480a      	ldr	r0, [pc, #40]	@ (8002524 <phApp_Print_Buff+0x48>)
 80024fa:	f01a fc85 	bl	801ce08 <iprintf>
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <phApp_Print_Buff+0x4c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4618      	mov	r0, r3
 8002506:	f01a fba9 	bl	801cc5c <fflush>
    for(i = 0; i < num; i++)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3301      	adds	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3ea      	bcc.n	80024ee <phApp_Print_Buff+0x12>
    }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	0801f1d4 	.word	0x0801f1d4
 8002528:	2000002c 	.word	0x2000002c

0800252c <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8002534:	2300      	movs	r3, #0
 8002536:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	60bb      	str	r3, [r7, #8]
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <phApp_Comp_Init+0x24>)
 8002540:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 8002542:	89fb      	ldrh	r3, [r7, #14]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	200004e8 	.word	0x200004e8

08002554 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	/* 轮询模式不需要配置IRQ，直接返回成功 */
    return PH_ERR_SUCCESS;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	460b      	mov	r3, r1
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	2b20      	cmp	r3, #32
 8002576:	d002      	beq.n	800257e <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002578:	f24e 4320 	movw	r3, #58400	@ 0xe420
 800257c:	e01b      	b.n	80025b6 <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <phCryptoRng_Sw_Init+0x24>
 8002584:	2321      	movs	r3, #33	@ 0x21
 8002586:	e016      	b.n	80025b6 <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <phCryptoRng_Sw_Init+0x2e>
 800258e:	2321      	movs	r3, #33	@ 0x21
 8002590:	e011      	b.n	80025b6 <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f24e 4201 	movw	r2, #58369	@ 0xe401
 8002598:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3308      	adds	r3, #8
 80025a4:	2210      	movs	r2, #16
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f01a fd8d 	bl	801d0c8 <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b092      	sub	sp, #72	@ 0x48
 80025c4:	af04      	add	r7, sp, #16
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d90e      	bls.n	80025f2 <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f107 0414 	add.w	r4, r7, #20
 80025da:	461d      	mov	r5, r3
 80025dc:	6828      	ldr	r0, [r5, #0]
 80025de:	6869      	ldr	r1, [r5, #4]
 80025e0:	68aa      	ldr	r2, [r5, #8]
 80025e2:	68eb      	ldr	r3, [r5, #12]
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	6928      	ldr	r0, [r5, #16]
 80025e8:	6969      	ldr	r1, [r5, #20]
 80025ea:	69aa      	ldr	r2, [r5, #24]
 80025ec:	69eb      	ldr	r3, [r5, #28]
 80025ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f0:	e006      	b.n	8002600 <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f01a fde3 	bl	801d1c6 <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	7f1b      	ldrb	r3, [r3, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10f      	bne.n	8002628 <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 8002608:	f107 0114 	add.w	r1, r7, #20
 800260c:	2300      	movs	r3, #0
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	2300      	movs	r3, #0
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	2220      	movs	r2, #32
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f8a9 	bl	8002774 <phCryptoRng_Sw_Instantiate>
 8002622:	4603      	mov	r3, r0
 8002624:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002626:	e00a      	b.n	800263e <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 8002628:	f107 0114 	add.w	r1, r7, #20
 800262c:	2300      	movs	r3, #0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	2220      	movs	r2, #32
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f914 	bl	8002862 <phCryptoRng_Sw_Reseed>
 800263a:	4603      	mov	r3, r0
 800263c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 800263e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <phCryptoRng_Sw_Seed+0x9c>
 8002644:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002646:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <phCryptoRng_Sw_Seed+0x9c>
 800264e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <phCryptoRng_Sw_Seed+0xa8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	e000      	b.n	800265e <phCryptoRng_Sw_Seed+0x9e>
 800265c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800265e:	4618      	mov	r0, r3
 8002660:	3738      	adds	r7, #56	@ 0x38
 8002662:	46bd      	mov	sp, r7
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	bf00      	nop
 8002668:	ffffe400 	.word	0xffffe400

0800266c <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f9fa 	bl	8002a70 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6858      	ldr	r0, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 0208 	add.w	r2, r3, #8
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2310      	movs	r3, #16
 800268e:	2100      	movs	r1, #0
 8002690:	f002 ff4e 	bl	8005530 <phCryptoSym_Encrypt>
 8002694:	4603      	mov	r3, r0
 8002696:	83bb      	strh	r3, [r7, #28]
 8002698:	8bbb      	ldrh	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <phCryptoRng_Sw_Update+0x36>
 800269e:	8bbb      	ldrh	r3, [r7, #28]
 80026a0:	e064      	b.n	800276c <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d018      	beq.n	80026da <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 80026a8:	2300      	movs	r3, #0
 80026aa:	77fb      	strb	r3, [r7, #31]
 80026ac:	e012      	b.n	80026d4 <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	3320      	adds	r3, #32
 80026b2:	443b      	add	r3, r7
 80026b4:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	7ffb      	ldrb	r3, [r7, #31]
 80026c2:	404a      	eors	r2, r1
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	3320      	adds	r3, #32
 80026c8:	443b      	add	r3, r7
 80026ca:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	3301      	adds	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d9e9      	bls.n	80026ae <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9c8 	bl	8002a70 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6858      	ldr	r0, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f103 0208 	add.w	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3308      	adds	r3, #8
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2310      	movs	r3, #16
 80026f2:	2100      	movs	r1, #0
 80026f4:	f002 ff1c 	bl	8005530 <phCryptoSym_Encrypt>
 80026f8:	4603      	mov	r3, r0
 80026fa:	83bb      	strh	r3, [r7, #28]
 80026fc:	8bbb      	ldrh	r3, [r7, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <phCryptoRng_Sw_Update+0x9a>
 8002702:	8bbb      	ldrh	r3, [r7, #28]
 8002704:	e032      	b.n	800276c <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d018      	beq.n	800273e <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 800270c:	2300      	movs	r3, #0
 800270e:	77fb      	strb	r3, [r7, #31]
 8002710:	e012      	b.n	8002738 <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	7a19      	ldrb	r1, [r3, #8]
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	3310      	adds	r3, #16
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	7ffb      	ldrb	r3, [r7, #31]
 8002726:	404a      	eors	r2, r1
 8002728:	b2d1      	uxtb	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	460a      	mov	r2, r1
 8002730:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002732:	7ffb      	ldrb	r3, [r7, #31]
 8002734:	3301      	adds	r3, #1
 8002736:	77fb      	strb	r3, [r7, #31]
 8002738:	7ffb      	ldrb	r3, [r7, #31]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	d9e9      	bls.n	8002712 <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f107 010c 	add.w	r1, r7, #12
 8002746:	2200      	movs	r2, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f002 ffb6 	bl	80056ba <phCryptoSym_LoadKeyDirect>
 800274e:	4603      	mov	r3, r0
 8002750:	83bb      	strh	r3, [r7, #28]
 8002752:	8bbb      	ldrh	r3, [r7, #28]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <phCryptoRng_Sw_Update+0xf0>
 8002758:	8bbb      	ldrh	r3, [r7, #28]
 800275a:	e007      	b.n	800276c <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	2210      	movs	r2, #16
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f01a fcaf 	bl	801d0c8 <memset>
    return PH_ERR_SUCCESS;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	@ 0x38
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002790:	441a      	add	r2, r3
 8002792:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002796:	4413      	add	r3, r2
 8002798:	2b20      	cmp	r3, #32
 800279a:	d002      	beq.n	80027a2 <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 800279c:	f24e 4321 	movw	r3, #58401	@ 0xe421
 80027a0:	e05b      	b.n	800285a <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f01a fd0b 	bl	801d1c6 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	f107 0214 	add.w	r2, r7, #20
 80027b6:	4413      	add	r3, r2
 80027b8:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f01a fd01 	bl	801d1c6 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80027ca:	4413      	add	r3, r2
 80027cc:	f107 0214 	add.w	r2, r7, #20
 80027d0:	4413      	add	r3, r2
 80027d2:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80027d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80027d8:	4618      	mov	r0, r3
 80027da:	f01a fcf4 	bl	801d1c6 <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f88f 	bl	8002908 <phCryptoRng_Sw_BlockCipherDf>
 80027ea:	4603      	mov	r3, r0
 80027ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80027ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <phCryptoRng_Sw_Instantiate+0x84>
 80027f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027f6:	e030      	b.n	800285a <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3308      	adds	r3, #8
 80027fc:	2210      	movs	r2, #16
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f01a fc61 	bl	801d0c8 <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6858      	ldr	r0, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3308      	adds	r3, #8
 800280e:	2200      	movs	r2, #0
 8002810:	4619      	mov	r1, r3
 8002812:	f002 ff52 	bl	80056ba <phCryptoSym_LoadKeyDirect>
 8002816:	4603      	mov	r3, r0
 8002818:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800281a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <phCryptoRng_Sw_Instantiate+0xb0>
 8002820:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002822:	e01a      	b.n	800285a <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff ff1e 	bl	800266c <phCryptoRng_Sw_Update>
 8002830:	4603      	mov	r3, r0
 8002832:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002834:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <phCryptoRng_Sw_Instantiate+0xca>
 800283a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800283c:	e00d      	b.n	800285a <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	2220      	movs	r2, #32
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f01a fc38 	bl	801d0c8 <memset>

    return PH_ERR_SUCCESS;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3738      	adds	r7, #56	@ 0x38
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b08e      	sub	sp, #56	@ 0x38
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	7f1b      	ldrb	r3, [r3, #28]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d002      	beq.n	8002880 <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 800287a:	f24e 4325 	movw	r3, #58405	@ 0xe425
 800287e:	e03e      	b.n	80028fe <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002886:	4413      	add	r3, r2
 8002888:	2b20      	cmp	r3, #32
 800288a:	d002      	beq.n	8002892 <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 800288c:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8002890:	e035      	b.n	80028fe <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f01a fc93 	bl	801d1c6 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f107 0214 	add.w	r2, r7, #20
 80028a6:	4413      	add	r3, r2
 80028a8:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f01a fc89 	bl	801d1c6 <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f824 	bl	8002908 <phCryptoRng_Sw_BlockCipherDf>
 80028c0:	4603      	mov	r3, r0
 80028c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80028c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <phCryptoRng_Sw_Reseed+0x6c>
 80028ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028cc:	e017      	b.n	80028fe <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fec9 	bl	800266c <phCryptoRng_Sw_Update>
 80028da:	4603      	mov	r3, r0
 80028dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80028de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <phCryptoRng_Sw_Reseed+0x86>
 80028e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80028e6:	e00a      	b.n	80028fe <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	2220      	movs	r2, #32
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f01a fbe6 	bl	801d0c8 <memset>

    return PH_ERR_SUCCESS;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3738      	adds	r7, #56	@ 0x38
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b096      	sub	sp, #88	@ 0x58
 800290c:	af02      	add	r7, sp, #8
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	4954      	ldr	r1, [pc, #336]	@ (8002a6c <phCryptoRng_Sw_BlockCipherDf+0x164>)
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fecd 	bl	80056ba <phCryptoSym_LoadKeyDirect>
 8002920:	4603      	mov	r3, r0
 8002922:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002926:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <phCryptoRng_Sw_BlockCipherDf+0x2c>
 800292e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002932:	e097      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	2240      	movs	r2, #64	@ 0x40
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f01a fbc3 	bl	801d0c8 <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 8002942:	2320      	movs	r3, #32
 8002944:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 8002946:	2320      	movs	r3, #32
 8002948:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	3318      	adds	r3, #24
 8002952:	2220      	movs	r2, #32
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f01a fc35 	bl	801d1c6 <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f107 010c 	add.w	r1, r7, #12
 800296a:	2210      	movs	r2, #16
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fe6e 	bl	800564e <phCryptoSym_LoadIv>
 8002972:	4603      	mov	r3, r0
 8002974:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <phCryptoRng_Sw_BlockCipherDf+0x7e>
 8002980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002984:	e06e      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6858      	ldr	r0, [r3, #4]
 800298a:	f107 020c 	add.w	r2, r7, #12
 800298e:	f107 030b 	add.w	r3, r7, #11
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2340      	movs	r3, #64	@ 0x40
 800299a:	2101      	movs	r1, #1
 800299c:	f002 fe0a 	bl	80055b4 <phCryptoSym_CalculateMac>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <phCryptoRng_Sw_BlockCipherDf+0xac>
 80029ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029b2:	e057      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 80029b4:	2301      	movs	r3, #1
 80029b6:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6858      	ldr	r0, [r3, #4]
 80029bc:	7afb      	ldrb	r3, [r7, #11]
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	f107 010c 	add.w	r1, r7, #12
 80029c8:	f107 020b 	add.w	r2, r7, #11
 80029cc:	9201      	str	r2, [sp, #4]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	460a      	mov	r2, r1
 80029d4:	2101      	movs	r1, #1
 80029d6:	f002 fded 	bl	80055b4 <phCryptoSym_CalculateMac>
 80029da:	4603      	mov	r3, r0
 80029dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <phCryptoRng_Sw_BlockCipherDf+0xe6>
 80029e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029ec:	e03a      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fe5f 	bl	80056ba <phCryptoSym_LoadKeyDirect>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <phCryptoRng_Sw_BlockCipherDf+0x108>
 8002a0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a0e:	e029      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6858      	ldr	r0, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f103 0210 	add.w	r2, r3, #16
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2310      	movs	r3, #16
 8002a20:	2100      	movs	r1, #0
 8002a22:	f002 fd85 	bl	8005530 <phCryptoSym_Encrypt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <phCryptoRng_Sw_BlockCipherDf+0x132>
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a38:	e014      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6858      	ldr	r0, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	3310      	adds	r3, #16
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2310      	movs	r3, #16
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f002 fd71 	bl	8005530 <phCryptoSym_Encrypt>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8002a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a60:	e000      	b.n	8002a64 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3750      	adds	r7, #80	@ 0x50
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	0801f88c 	.word	0x0801f88c

08002a70 <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	e018      	b.n	8002ab0 <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	7a1b      	ldrb	r3, [r3, #8]
 8002a86:	2bff      	cmp	r3, #255	@ 0xff
 8002a88:	d00a      	beq.n	8002aa0 <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	441a      	add	r2, r3
 8002a90:	7a12      	ldrb	r2, [r2, #8]
 8002a92:	3201      	adds	r2, #1
 8002a94:	b2d1      	uxtb	r1, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	721a      	strb	r2, [r3, #8]
            break;
 8002a9e:	e00b      	b.n	8002ab8 <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3301      	adds	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	d9e3      	bls.n	8002a7e <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <phCryptoRng_Seed+0x1a>
 8002ad8:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002adc:	e027      	b.n	8002b2e <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <phCryptoRng_Seed+0x2c>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <phCryptoRng_Seed+0x2c>
 8002aea:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8002aee:	e01e      	b.n	8002b2e <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002af8:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8002afc:	d004      	beq.n	8002b08 <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002afe:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002b02:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	e012      	b.n	8002b2e <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d108      	bne.n	8002b24 <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff fd51 	bl	80025c0 <phCryptoRng_Sw_Seed>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	82fb      	strh	r3, [r7, #22]
            break;
 8002b22:	e003      	b.n	8002b2c <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8002b24:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8002b28:	82fb      	strh	r3, [r7, #22]
            break;
 8002b2a:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8002b2c:	8afb      	ldrh	r3, [r7, #22]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 8002b48:	897b      	ldrh	r3, [r7, #10]
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d002      	beq.n	8002b54 <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8002b4e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8002b52:	e016      	b.n	8002b82 <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <phCryptoSym_Sw_Init+0x28>
 8002b5a:	2321      	movs	r3, #33	@ 0x21
 8002b5c:	e011      	b.n	8002b82 <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8002b64:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f80c 	bl	8002b8a <phCryptoSym_Sw_InvalidateKey>
 8002b72:	4603      	mov	r3, r0
 8002b74:	82fb      	strh	r3, [r7, #22]
 8002b76:	8afb      	ldrh	r3, [r7, #22]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <phCryptoSym_Sw_Init+0x4a>
 8002b7c:	8afb      	ldrh	r3, [r7, #22]
 8002b7e:	e000      	b.n	8002b82 <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3308      	adds	r3, #8
 8002b96:	2220      	movs	r2, #32
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f01a fa94 	bl	801d0c8 <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3328      	adds	r3, #40	@ 0x28
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f01a fa8d 	bl	801d0c8 <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb4:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fb13 	bl	8003228 <phCryptoSym_Sw_GetConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	82fb      	strh	r3, [r7, #22]
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <phCryptoSym_Sw_Encrypt+0x44>
 8002c0c:	8afb      	ldrh	r3, [r7, #22]
 8002c0e:	e097      	b.n	8002d40 <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 8002c10:	8aba      	ldrh	r2, [r7, #20]
 8002c12:	893b      	ldrh	r3, [r7, #8]
 8002c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c18:	fb01 f202 	mul.w	r2, r1, r2
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8002c24:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8002c28:	e08a      	b.n	8002d40 <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3328      	adds	r3, #40	@ 0x28
 8002c2e:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8002c34:	e070      	b.n	8002d18 <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d009      	beq.n	8002c52 <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c42:	18d0      	adds	r0, r2, r3
 8002c44:	8bfb      	ldrh	r3, [r7, #30]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	8aba      	ldrh	r2, [r7, #20]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f01a faba 	bl	801d1c6 <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d027      	beq.n	8002caa <phCryptoSym_Sw_Encrypt+0xde>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db22      	blt.n	8002ca4 <phCryptoSym_Sw_Encrypt+0xd8>
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d81f      	bhi.n	8002ca4 <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	777b      	strb	r3, [r7, #29]
 8002c68:	e016      	b.n	8002c98 <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 8002c6a:	7f7a      	ldrb	r2, [r7, #29]
 8002c6c:	8bfb      	ldrh	r3, [r7, #30]
 8002c6e:	4413      	add	r3, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	4413      	add	r3, r2
 8002c76:	7819      	ldrb	r1, [r3, #0]
 8002c78:	7f7b      	ldrb	r3, [r7, #29]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	7f78      	ldrb	r0, [r7, #29]
 8002c82:	8bfb      	ldrh	r3, [r7, #30]
 8002c84:	4403      	add	r3, r0
 8002c86:	4618      	mov	r0, r3
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	4403      	add	r3, r0
 8002c8c:	404a      	eors	r2, r1
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002c92:	7f7b      	ldrb	r3, [r7, #29]
 8002c94:	3301      	adds	r3, #1
 8002c96:	777b      	strb	r3, [r7, #29]
 8002c98:	7f7b      	ldrb	r3, [r7, #29]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	8abb      	ldrh	r3, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3e3      	bcc.n	8002c6a <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 8002ca2:	e003      	b.n	8002cac <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002ca4:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002ca8:	e04a      	b.n	8002d40 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8002caa:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d10d      	bne.n	8002cd0 <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8002cb4:	8bfb      	ldrh	r3, [r7, #30]
 8002cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cb8:	4413      	add	r3, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f002 fb91 	bl	80053e4 <phCryptoSym_Sw_DecryptBlock>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	82fb      	strh	r3, [r7, #22]
 8002cc6:	8afb      	ldrh	r3, [r7, #22]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00f      	beq.n	8002cec <phCryptoSym_Sw_Encrypt+0x120>
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	e037      	b.n	8002d40 <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8002cd0:	8bfb      	ldrh	r3, [r7, #30]
 8002cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f002 fadd 	bl	8005298 <phCryptoSym_Sw_EncryptBlock>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	82fb      	strh	r3, [r7, #22]
 8002ce2:	8afb      	ldrh	r3, [r7, #22]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <phCryptoSym_Sw_Encrypt+0x120>
 8002ce8:	8afb      	ldrh	r3, [r7, #22]
 8002cea:	e029      	b.n	8002d40 <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <phCryptoSym_Sw_Encrypt+0x142>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db07      	blt.n	8002d08 <phCryptoSym_Sw_Encrypt+0x13c>
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d804      	bhi.n	8002d08 <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 8002cfe:	8bfb      	ldrh	r3, [r7, #30]
 8002d00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d02:	4413      	add	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
                break;
 8002d06:	e003      	b.n	8002d10 <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002d08:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002d0c:	e018      	b.n	8002d40 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8002d0e:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8002d10:	8aba      	ldrh	r2, [r7, #20]
 8002d12:	8bfb      	ldrh	r3, [r7, #30]
 8002d14:	4413      	add	r3, r2
 8002d16:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8002d18:	8bfa      	ldrh	r2, [r7, #30]
 8002d1a:	893b      	ldrh	r3, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d38a      	bcc.n	8002c36 <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d003      	beq.n	8002d30 <phCryptoSym_Sw_Encrypt+0x164>
 8002d28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da06      	bge.n	8002d3e <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3328      	adds	r3, #40	@ 0x28
 8002d34:	8aba      	ldrh	r2, [r7, #20]
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f01a fa44 	bl	801d1c6 <memcpy>
    }

    return PH_ERR_SUCCESS;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b094      	sub	sp, #80	@ 0x50
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	817b      	strh	r3, [r7, #10]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8002d7e:	f107 0320 	add.w	r3, r7, #32
 8002d82:	2210      	movs	r2, #16
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f01a f99e 	bl	801d0c8 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	2210      	movs	r2, #16
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f01a f997 	bl	801d0c8 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 8002da0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002da4:	2210      	movs	r2, #16
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f01a f98d 	bl	801d0c8 <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8002dae:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8002db2:	461a      	mov	r2, r3
 8002db4:	2102      	movs	r1, #2
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa36 	bl	8003228 <phCryptoSym_Sw_GetConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002dc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <phCryptoSym_Sw_CalculateMac+0x88>
 8002dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dce:	e175      	b.n	80030bc <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d007      	beq.n	8002df2 <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3328      	adds	r3, #40	@ 0x28
 8002de6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f01a f96b 	bl	801d0c8 <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8002df2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da0e      	bge.n	8002e18 <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 8002dfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002dfe:	893b      	ldrh	r3, [r7, #8]
 8002e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e04:	fb01 f202 	mul.w	r2, r1, r2
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80ac 	beq.w	8002f6a <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8002e12:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8002e16:	e151      	b.n	80030bc <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 8002e18:	897b      	ldrh	r3, [r7, #10]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <phCryptoSym_Sw_CalculateMac+0xde>
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d015      	beq.n	8002e50 <phCryptoSym_Sw_CalculateMac+0x108>
 8002e24:	e011      	b.n	8002e4a <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 8002e26:	f107 0210 	add.w	r2, r7, #16
 8002e2a:	f107 0320 	add.w	r3, r7, #32
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f002 f987 	bl	8005144 <phCryptoSym_Sw_CMAC_GenerateK1K2>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002e3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <phCryptoSym_Sw_CalculateMac+0x10c>
 8002e44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e48:	e138      	b.n	80030bc <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8002e4a:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8002e4e:	e135      	b.n	80030bc <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 8002e54:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 8002e56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002e5a:	893b      	ldrh	r3, [r7, #8]
 8002e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e60:	fb01 f202 	mul.w	r2, r1, r2
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 8002e6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <phCryptoSym_Sw_CalculateMac+0x132>
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d13f      	bne.n	8002efa <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 8002e7a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	18d1      	adds	r1, r2, r3
 8002e8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e94:	4618      	mov	r0, r3
 8002e96:	f01a f996 	bl	801d1c6 <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 8002e9a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002e9e:	3350      	adds	r3, #80	@ 0x50
 8002ea0:	443b      	add	r3, r7
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002ea8:	897b      	ldrh	r3, [r7, #10]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d15c      	bne.n	8002f6a <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002eb6:	e018      	b.n	8002eea <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 8002eb8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ebc:	3350      	adds	r3, #80	@ 0x50
 8002ebe:	443b      	add	r3, r7
 8002ec0:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8002ec4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ec8:	3350      	adds	r3, #80	@ 0x50
 8002eca:	443b      	add	r3, r7
 8002ecc:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8002ed0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ed4:	404a      	eors	r2, r1
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	3350      	adds	r3, #80	@ 0x50
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002ee0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002eea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d3df      	bcc.n	8002eb8 <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002ef8:	e037      	b.n	8002f6a <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 8002efa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002efe:	893a      	ldrh	r2, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	18d1      	adds	r1, r2, r3
 8002f0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f14:	4618      	mov	r0, r3
 8002f16:	f01a f956 	bl	801d1c6 <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d123      	bne.n	8002f6a <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f28:	e018      	b.n	8002f5c <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 8002f2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f2e:	3350      	adds	r3, #80	@ 0x50
 8002f30:	443b      	add	r3, r7
 8002f32:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8002f36:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f3a:	3350      	adds	r3, #80	@ 0x50
 8002f3c:	443b      	add	r3, r7
 8002f3e:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8002f42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f46:	404a      	eors	r2, r1
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	3350      	adds	r3, #80	@ 0x50
 8002f4c:	443b      	add	r3, r7
 8002f4e:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f52:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f56:	3301      	adds	r3, #1
 8002f58:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3df      	bcc.n	8002f2a <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3328      	adds	r3, #40	@ 0x28
 8002f6e:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8002f76:	e03b      	b.n	8002ff0 <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002f7e:	e019      	b.n	8002fb4 <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 8002f80:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f86:	4413      	add	r3, r2
 8002f88:	7819      	ldrb	r1, [r3, #0]
 8002f8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002f8e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f92:	4413      	add	r3, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fa0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fa2:	4403      	add	r3, r0
 8002fa4:	404a      	eors	r2, r1
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8002faa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002fb4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d3de      	bcc.n	8002f80 <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8002fc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f002 f967 	bl	8005298 <phCryptoSym_Sw_EncryptBlock>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002fd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <phCryptoSym_Sw_CalculateMac+0x296>
 8002fd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fdc:	e06e      	b.n	80030bc <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 8002fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe0:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8002fe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002fea:	4413      	add	r3, r2
 8002fec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8002ff0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002ff4:	893b      	ldrh	r3, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3be      	bcc.n	8002f78 <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8002ffa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db2f      	blt.n	8003062 <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003002:	2300      	movs	r3, #0
 8003004:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003008:	e016      	b.n	8003038 <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 800300a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800300e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003010:	4413      	add	r3, r2
 8003012:	7819      	ldrb	r1, [r3, #0]
 8003014:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003018:	3350      	adds	r3, #80	@ 0x50
 800301a:	443b      	add	r3, r7
 800301c:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8003020:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003024:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003026:	4403      	add	r3, r0
 8003028:	404a      	eors	r2, r1
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800302e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003032:	3301      	adds	r3, #1
 8003034:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003038:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800303c:	b29a      	uxth	r2, r3
 800303e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003042:	429a      	cmp	r2, r3
 8003044:	d3e1      	bcc.n	800300a <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8003046:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f002 f925 	bl	8005298 <phCryptoSym_Sw_EncryptBlock>
 800304e:	4603      	mov	r3, r0
 8003050:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003054:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <phCryptoSym_Sw_CalculateMac+0x31a>
 800305c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003060:	e02c      	b.n	80030bc <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003066:	2b01      	cmp	r3, #1
 8003068:	d003      	beq.n	8003072 <phCryptoSym_Sw_CalculateMac+0x32a>
 800306a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800306e:	2b00      	cmp	r3, #0
 8003070:	da08      	bge.n	8003084 <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3328      	adds	r3, #40	@ 0x28
 8003076:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800307a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800307c:	4618      	mov	r0, r3
 800307e:	f01a f8a2 	bl	801d1c6 <memcpy>
 8003082:	e007      	b.n	8003094 <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3328      	adds	r3, #40	@ 0x28
 8003088:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f01a f81a 	bl	801d0c8 <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8003094:	f107 0320 	add.w	r3, r7, #32
 8003098:	2210      	movs	r2, #16
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f01a f813 	bl	801d0c8 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	2210      	movs	r2, #16
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f01a f80c 	bl	801d0c8 <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 80030b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030b8:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3750      	adds	r7, #80	@ 0x50
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	461a      	mov	r2, r3
 80030e0:	2102      	movs	r1, #2
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f8a0 	bl	8003228 <phCryptoSym_Sw_GetConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	82fb      	strh	r3, [r7, #22]
 80030ec:	8afb      	ldrh	r3, [r7, #22]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <phCryptoSym_Sw_LoadIv+0x32>
 80030f2:	8afb      	ldrh	r3, [r7, #22]
 80030f4:	e00f      	b.n	8003116 <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	8abb      	ldrh	r3, [r7, #20]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d002      	beq.n	8003106 <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8003100:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8003104:	e007      	b.n	8003116 <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3328      	adds	r3, #40	@ 0x28
 800310a:	8aba      	ldrh	r2, [r7, #20]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f01a f859 	bl	801d1c6 <memcpy>

    return PH_ERR_SUCCESS;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3308      	adds	r3, #8
 8003136:	2220      	movs	r2, #32
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f019 ffc4 	bl	801d0c8 <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d859      	bhi.n	80031fa <phCryptoSym_Sw_LoadKeyDirect+0xda>
 8003146:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003165 	.word	0x08003165
 8003150:	0800317f 	.word	0x0800317f
 8003154:	08003199 	.word	0x08003199
 8003158:	080031b3 	.word	0x080031b3
 800315c:	080031cb 	.word	0x080031cb
 8003160:	080031e3 	.word	0x080031e3
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8003164:	232c      	movs	r3, #44	@ 0x2c
 8003166:	2204      	movs	r2, #4
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f8d8 	bl	8003320 <phCryptoSym_Sw_Aes_KeyExpansion>
 8003170:	4603      	mov	r3, r0
 8003172:	82fb      	strh	r3, [r7, #22]
 8003174:	8afb      	ldrh	r3, [r7, #22]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d042      	beq.n	8003200 <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 800317a:	8afb      	ldrh	r3, [r7, #22]
 800317c:	e04f      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 800317e:	2334      	movs	r3, #52	@ 0x34
 8003180:	2206      	movs	r2, #6
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f8cb 	bl	8003320 <phCryptoSym_Sw_Aes_KeyExpansion>
 800318a:	4603      	mov	r3, r0
 800318c:	82fb      	strh	r3, [r7, #22]
 800318e:	8afb      	ldrh	r3, [r7, #22]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d037      	beq.n	8003204 <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 8003194:	8afb      	ldrh	r3, [r7, #22]
 8003196:	e042      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8003198:	233c      	movs	r3, #60	@ 0x3c
 800319a:	2208      	movs	r2, #8
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f8be 	bl	8003320 <phCryptoSym_Sw_Aes_KeyExpansion>
 80031a4:	4603      	mov	r3, r0
 80031a6:	82fb      	strh	r3, [r7, #22]
 80031a8:	8afb      	ldrh	r3, [r7, #22]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d02c      	beq.n	8003208 <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 80031ae:	8afb      	ldrh	r3, [r7, #22]
 80031b0:	e035      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 80031b2:	2201      	movs	r2, #1
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fe62 	bl	8003e80 <phCryptoSym_Sw_Des_KeyInit>
 80031bc:	4603      	mov	r3, r0
 80031be:	82fb      	strh	r3, [r7, #22]
 80031c0:	8afb      	ldrh	r3, [r7, #22]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d022      	beq.n	800320c <phCryptoSym_Sw_LoadKeyDirect+0xec>
 80031c6:	8afb      	ldrh	r3, [r7, #22]
 80031c8:	e029      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 80031ca:	2202      	movs	r2, #2
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fe56 	bl	8003e80 <phCryptoSym_Sw_Des_KeyInit>
 80031d4:	4603      	mov	r3, r0
 80031d6:	82fb      	strh	r3, [r7, #22]
 80031d8:	8afb      	ldrh	r3, [r7, #22]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 80031de:	8afb      	ldrh	r3, [r7, #22]
 80031e0:	e01d      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 80031e2:	2203      	movs	r2, #3
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fe4a 	bl	8003e80 <phCryptoSym_Sw_Des_KeyInit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	82fb      	strh	r3, [r7, #22]
 80031f0:	8afb      	ldrh	r3, [r7, #22]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	e011      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80031fa:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80031fe:	e00e      	b.n	800321e <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 8003200:	bf00      	nop
 8003202:	e008      	b.n	8003216 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003204:	bf00      	nop
 8003206:	e006      	b.n	8003216 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003208:	bf00      	nop
 800320a:	e004      	b.n	8003216 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 800320c:	bf00      	nop
 800320e:	e002      	b.n	8003216 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 8003214:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop

08003228 <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	460b      	mov	r3, r1
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	2b06      	cmp	r3, #6
 800323a:	d867      	bhi.n	800330c <phCryptoSym_Sw_GetConfig+0xe4>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <phCryptoSym_Sw_GetConfig+0x1c>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	080032ef 	.word	0x080032ef
 8003248:	08003261 	.word	0x08003261
 800324c:	080032c1 	.word	0x080032c1
 8003250:	080032f9 	.word	0x080032f9
 8003254:	0800330d 	.word	0x0800330d
 8003258:	0800330d 	.word	0x0800330d
 800325c:	08003303 	.word	0x08003303
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003264:	2b05      	cmp	r3, #5
 8003266:	d827      	bhi.n	80032b8 <phCryptoSym_Sw_GetConfig+0x90>
 8003268:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <phCryptoSym_Sw_GetConfig+0x48>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003289 	.word	0x08003289
 8003274:	08003291 	.word	0x08003291
 8003278:	08003299 	.word	0x08003299
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032a9 	.word	0x080032a9
 8003284:	080032b1 	.word	0x080032b1
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2210      	movs	r2, #16
 800328c:	801a      	strh	r2, [r3, #0]
                    break;
 800328e:	e016      	b.n	80032be <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2218      	movs	r2, #24
 8003294:	801a      	strh	r2, [r3, #0]
                    break;
 8003296:	e012      	b.n	80032be <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	801a      	strh	r2, [r3, #0]
                    break;
 800329e:	e00e      	b.n	80032be <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2208      	movs	r2, #8
 80032a4:	801a      	strh	r2, [r3, #0]
                    break;
 80032a6:	e00a      	b.n	80032be <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2210      	movs	r2, #16
 80032ac:	801a      	strh	r2, [r3, #0]
                    break;
 80032ae:	e006      	b.n	80032be <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2218      	movs	r2, #24
 80032b4:	801a      	strh	r2, [r3, #0]
                    break;
 80032b6:	e002      	b.n	80032be <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80032b8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80032bc:	e02a      	b.n	8003314 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 80032be:	e028      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	dc02      	bgt.n	80032ce <phCryptoSym_Sw_GetConfig+0xa6>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da04      	bge.n	80032d6 <phCryptoSym_Sw_GetConfig+0xae>
 80032cc:	e00b      	b.n	80032e6 <phCryptoSym_Sw_GetConfig+0xbe>
 80032ce:	3b03      	subs	r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d808      	bhi.n	80032e6 <phCryptoSym_Sw_GetConfig+0xbe>
 80032d4:	e003      	b.n	80032de <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2210      	movs	r2, #16
 80032da:	801a      	strh	r2, [r3, #0]
                    break;
 80032dc:	e006      	b.n	80032ec <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2208      	movs	r2, #8
 80032e2:	801a      	strh	r2, [r3, #0]
                    break;
 80032e4:	e002      	b.n	80032ec <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80032e6:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80032ea:	e013      	b.n	8003314 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 80032ec:	e011      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	801a      	strh	r2, [r3, #0]
            break;
 80032f6:	e00c      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	801a      	strh	r2, [r3, #0]
            break;
 8003300:	e007      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	801a      	strh	r2, [r3, #0]
            break;
 800330a:	e002      	b.n	8003312 <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 800330c:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8003310:	e000      	b.n	8003314 <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	460b      	mov	r3, r1
 8003330:	71fb      	strb	r3, [r7, #7]
 8003332:	4613      	mov	r3, r2
 8003334:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f103 0008 	add.w	r0, r3, #8
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	f019 ff3f 	bl	801d1c6 <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b090      	sub	sp, #64	@ 0x40
 8003356:	af02      	add	r7, sp, #8
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800336a:	2b02      	cmp	r3, #2
 800336c:	d00e      	beq.n	800338c <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 800336e:	2b02      	cmp	r3, #2
 8003370:	dc10      	bgt.n	8003394 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 8003376:	2b01      	cmp	r3, #1
 8003378:	d004      	beq.n	8003384 <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 800337a:	e00b      	b.n	8003394 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 800337c:	2304      	movs	r3, #4
 800337e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8003382:	e00a      	b.n	800339a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8003384:	2306      	movs	r3, #6
 8003386:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800338a:	e006      	b.n	800339a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 800338c:	2308      	movs	r3, #8
 800338e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8003392:	e002      	b.n	800339a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8003394:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8003398:	e04a      	b.n	8003430 <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f103 0108 	add.w	r1, r3, #8
 80033a0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80033a4:	009a      	lsls	r2, r3, #2
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4618      	mov	r0, r3
 80033ac:	f019 ff0b 	bl	801d1c6 <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80033b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80033b4:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80033b8:	f107 0114 	add.w	r1, r7, #20
 80033bc:	200f      	movs	r0, #15
 80033be:	9000      	str	r0, [sp, #0]
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f000 fba9 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80033cc:	e015      	b.n	80033fa <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f000 f8c8 	bl	8003564 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	f000 fa09 	bl	80037ec <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80033da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80033de:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80033e2:	f107 0114 	add.w	r1, r7, #20
 80033e6:	200f      	movs	r0, #15
 80033e8:	9000      	str	r0, [sp, #0]
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	f000 fb94 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 80033f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033f4:	3301      	adds	r3, #1
 80033f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80033fa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d3e4      	bcc.n	80033ce <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f000 f8ad 	bl	8003564 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 800340a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800340e:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003412:	f107 0114 	add.w	r1, r7, #20
 8003416:	200f      	movs	r0, #15
 8003418:	9000      	str	r0, [sp, #0]
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f000 fb7c 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2220      	movs	r2, #32
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f019 fe4d 	bl	801d0c8 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3738      	adds	r7, #56	@ 0x38
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b090      	sub	sp, #64	@ 0x40
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800344a:	2b02      	cmp	r3, #2
 800344c:	d014      	beq.n	8003478 <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 800344e:	2b02      	cmp	r3, #2
 8003450:	dc19      	bgt.n	8003486 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 8003456:	2b01      	cmp	r3, #1
 8003458:	d007      	beq.n	800346a <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 800345a:	e014      	b.n	8003486 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 800345c:	2304      	movs	r3, #4
 800345e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 8003462:	232b      	movs	r3, #43	@ 0x2b
 8003464:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8003468:	e010      	b.n	800348c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 800346a:	2306      	movs	r3, #6
 800346c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 8003470:	2333      	movs	r3, #51	@ 0x33
 8003472:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8003476:	e009      	b.n	800348c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8003478:	2308      	movs	r3, #8
 800347a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 800347e:	233b      	movs	r3, #59	@ 0x3b
 8003480:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8003484:	e002      	b.n	800348c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8003486:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 800348a:	e066      	b.n	800355a <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f103 0108 	add.w	r1, r3, #8
 8003492:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4618      	mov	r0, r3
 800349e:	f019 fe92 	bl	801d1c6 <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80034ae:	e00f      	b.n	80034d0 <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 80034b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80034b4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80034b8:	f107 0114 	add.w	r1, r7, #20
 80034bc:	2030      	movs	r0, #48	@ 0x30
 80034be:	9000      	str	r0, [sp, #0]
 80034c0:	68b8      	ldr	r0, [r7, #8]
 80034c2:	f000 fb29 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 80034c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80034ca:	3301      	adds	r3, #1
 80034cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80034d0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d9ea      	bls.n	80034b0 <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80034da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80034de:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80034e2:	f107 0114 	add.w	r1, r7, #20
 80034e6:	20c0      	movs	r0, #192	@ 0xc0
 80034e8:	9000      	str	r0, [sp, #0]
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f000 fb14 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80034f8:	e015      	b.n	8003526 <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80034fa:	68b8      	ldr	r0, [r7, #8]
 80034fc:	f000 f8d4 	bl	80036a8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8003500:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003504:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8003508:	f107 0114 	add.w	r1, r7, #20
 800350c:	20c0      	movs	r0, #192	@ 0xc0
 800350e:	9000      	str	r0, [sp, #0]
 8003510:	68b8      	ldr	r0, [r7, #8]
 8003512:	f000 fb01 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	f000 fa06 	bl	8003928 <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 800351c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003520:	3b01      	subs	r3, #1
 8003522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e5      	bne.n	80034fa <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 800352e:	68b8      	ldr	r0, [r7, #8]
 8003530:	f000 f8ba 	bl	80036a8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8003534:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003538:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800353c:	f107 0114 	add.w	r1, r7, #20
 8003540:	20c0      	movs	r0, #192	@ 0xc0
 8003542:	9000      	str	r0, [sp, #0]
 8003544:	68b8      	ldr	r0, [r7, #8]
 8003546:	f000 fae7 	bl	8003b18 <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 800354a:	f107 0314 	add.w	r3, r7, #20
 800354e:	2220      	movs	r2, #32
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f019 fdb8 	bl	801d0c8 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3738      	adds	r7, #56	@ 0x38
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003574:	5c9a      	ldrb	r2, [r3, r2]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	4a47      	ldr	r2, [pc, #284]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003588:	5c52      	ldrb	r2, [r2, r1]
 800358a:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3308      	adds	r3, #8
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3308      	adds	r3, #8
 8003598:	4a42      	ldr	r2, [pc, #264]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800359a:	5c52      	ldrb	r2, [r2, r1]
 800359c:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	330c      	adds	r3, #12
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	330c      	adds	r3, #12
 80035aa:	4a3e      	ldr	r2, [pc, #248]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035ac:	5c52      	ldrb	r2, [r2, r1]
 80035ae:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3301      	adds	r3, #1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b3a      	ldr	r3, [pc, #232]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3305      	adds	r3, #5
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a36      	ldr	r2, [pc, #216]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035cc:	5c52      	ldrb	r2, [r2, r1]
 80035ce:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3309      	adds	r3, #9
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	4619      	mov	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3305      	adds	r3, #5
 80035dc:	4a31      	ldr	r2, [pc, #196]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035de:	5c52      	ldrb	r2, [r2, r1]
 80035e0:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	330d      	adds	r3, #13
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3309      	adds	r3, #9
 80035ee:	4a2d      	ldr	r2, [pc, #180]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80035f0:	5c52      	ldrb	r2, [r2, r1]
 80035f2:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	330d      	adds	r3, #13
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3302      	adds	r3, #2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b27      	ldr	r3, [pc, #156]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003606:	5c9b      	ldrb	r3, [r3, r2]
 8003608:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	330a      	adds	r3, #10
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4619      	mov	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3302      	adds	r3, #2
 8003616:	4a23      	ldr	r2, [pc, #140]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003618:	5c52      	ldrb	r2, [r2, r1]
 800361a:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	330a      	adds	r3, #10
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3306      	adds	r3, #6
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	330e      	adds	r3, #14
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3306      	adds	r3, #6
 800363e:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003640:	5c52      	ldrb	r2, [r2, r1]
 8003642:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	330e      	adds	r3, #14
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	330f      	adds	r3, #15
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003656:	5c9b      	ldrb	r3, [r3, r2]
 8003658:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	330b      	adds	r3, #11
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4619      	mov	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	330f      	adds	r3, #15
 8003666:	4a0f      	ldr	r2, [pc, #60]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8003668:	5c52      	ldrb	r2, [r2, r1]
 800366a:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3307      	adds	r3, #7
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	330b      	adds	r3, #11
 8003678:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800367a:	5c52      	ldrb	r2, [r2, r1]
 800367c:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3303      	adds	r3, #3
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3307      	adds	r3, #7
 800368a:	4a06      	ldr	r2, [pc, #24]	@ (80036a4 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800368c:	5c52      	ldrb	r2, [r2, r1]
 800368e:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3303      	adds	r3, #3
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	701a      	strb	r2, [r3, #0]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	0801f89c 	.word	0x0801f89c

080036a8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b4c      	ldr	r3, [pc, #304]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80036b8:	5c9a      	ldrb	r2, [r3, r2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4a47      	ldr	r2, [pc, #284]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80036cc:	5c52      	ldrb	r2, [r2, r1]
 80036ce:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3308      	adds	r3, #8
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3308      	adds	r3, #8
 80036dc:	4a42      	ldr	r2, [pc, #264]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80036de:	5c52      	ldrb	r2, [r2, r1]
 80036e0:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	330c      	adds	r3, #12
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	330c      	adds	r3, #12
 80036ee:	4a3e      	ldr	r2, [pc, #248]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80036f0:	5c52      	ldrb	r2, [r2, r1]
 80036f2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	330d      	adds	r3, #13
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b3a      	ldr	r3, [pc, #232]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80036fe:	5c9b      	ldrb	r3, [r3, r2]
 8003700:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3309      	adds	r3, #9
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	330d      	adds	r3, #13
 800370e:	4a36      	ldr	r2, [pc, #216]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003710:	5c52      	ldrb	r2, [r2, r1]
 8003712:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3305      	adds	r3, #5
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3309      	adds	r3, #9
 8003720:	4a31      	ldr	r2, [pc, #196]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003722:	5c52      	ldrb	r2, [r2, r1]
 8003724:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3301      	adds	r3, #1
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3305      	adds	r3, #5
 8003732:	4a2d      	ldr	r2, [pc, #180]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003734:	5c52      	ldrb	r2, [r2, r1]
 8003736:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3301      	adds	r3, #1
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3302      	adds	r3, #2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	4b27      	ldr	r3, [pc, #156]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	330a      	adds	r3, #10
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4619      	mov	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3302      	adds	r3, #2
 800375a:	4a23      	ldr	r2, [pc, #140]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800375c:	5c52      	ldrb	r2, [r2, r1]
 800375e:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	330a      	adds	r3, #10
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3306      	adds	r3, #6
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b1d      	ldr	r3, [pc, #116]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	330e      	adds	r3, #14
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3306      	adds	r3, #6
 8003782:	4a19      	ldr	r2, [pc, #100]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8003784:	5c52      	ldrb	r2, [r2, r1]
 8003786:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	330e      	adds	r3, #14
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3303      	adds	r3, #3
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b13      	ldr	r3, [pc, #76]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3307      	adds	r3, #7
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4619      	mov	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3303      	adds	r3, #3
 80037aa:	4a0f      	ldr	r2, [pc, #60]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037ac:	5c52      	ldrb	r2, [r2, r1]
 80037ae:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	330b      	adds	r3, #11
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	4619      	mov	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3307      	adds	r3, #7
 80037bc:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037be:	5c52      	ldrb	r2, [r2, r1]
 80037c0:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	330f      	adds	r3, #15
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	330b      	adds	r3, #11
 80037ce:	4a06      	ldr	r2, [pc, #24]	@ (80037e8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80037d0:	5c52      	ldrb	r2, [r2, r1]
 80037d2:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	330f      	adds	r3, #15
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	701a      	strb	r2, [r3, #0]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	0801f99c 	.word	0x0801f99c

080037ec <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e089      	b.n	800390e <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b48      	ldr	r3, [pc, #288]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003802:	5c9a      	ldrb	r2, [r3, r2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3301      	adds	r3, #1
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	4b45      	ldr	r3, [pc, #276]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 800380e:	5c59      	ldrb	r1, [r3, r1]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3301      	adds	r3, #1
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	404b      	eors	r3, r1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	4053      	eors	r3, r2
 800381c:	b2da      	uxtb	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3302      	adds	r3, #2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4053      	eors	r3, r2
 8003826:	b2da      	uxtb	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3303      	adds	r3, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4053      	eors	r3, r2
 8003830:	b2db      	uxtb	r3, r3
 8003832:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3301      	adds	r3, #1
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4619      	mov	r1, r3
 8003840:	4b38      	ldr	r3, [pc, #224]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003842:	5c5b      	ldrb	r3, [r3, r1]
 8003844:	4053      	eors	r3, r2
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3302      	adds	r3, #2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003852:	5c59      	ldrb	r1, [r3, r1]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3302      	adds	r3, #2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	404b      	eors	r3, r1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	4053      	eors	r3, r2
 8003860:	b2da      	uxtb	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3303      	adds	r3, #3
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4053      	eors	r3, r2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3301      	adds	r3, #1
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4053      	eors	r3, r2
 800387a:	b2da      	uxtb	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3302      	adds	r3, #2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003886:	5c5b      	ldrb	r3, [r3, r1]
 8003888:	4053      	eors	r3, r2
 800388a:	b2da      	uxtb	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3303      	adds	r3, #3
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8003896:	5c59      	ldrb	r1, [r3, r1]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3303      	adds	r3, #3
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	404b      	eors	r3, r1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4053      	eors	r3, r2
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038b0:	5c9a      	ldrb	r2, [r3, r2]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	4053      	eors	r3, r2
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3301      	adds	r3, #1
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	4053      	eors	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3302      	adds	r3, #2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	4053      	eors	r3, r2
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3303      	adds	r3, #3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80038d8:	5c5b      	ldrb	r3, [r3, r1]
 80038da:	4053      	eors	r3, r2
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	7a3a      	ldrb	r2, [r7, #8]
 80038e8:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	7a7a      	ldrb	r2, [r7, #9]
 80038f2:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	7aba      	ldrb	r2, [r7, #10]
 80038fc:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	7afa      	ldrb	r2, [r7, #11]
 8003906:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	3301      	adds	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b03      	cmp	r3, #3
 8003912:	f67f af72 	bls.w	80037fa <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	0801fa9c 	.word	0x0801fa9c

08003928 <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e0df      	b.n	8003af6 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4b73      	ldr	r3, [pc, #460]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 800393e:	5c9a      	ldrb	r2, [r3, r2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	4b72      	ldr	r3, [pc, #456]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003948:	5c5b      	ldrb	r3, [r3, r1]
 800394a:	4053      	eors	r3, r2
 800394c:	b2da      	uxtb	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3301      	adds	r3, #1
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4619      	mov	r1, r3
 8003956:	4b6f      	ldr	r3, [pc, #444]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003958:	5c59      	ldrb	r1, [r3, r1]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3301      	adds	r3, #1
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	4b6b      	ldr	r3, [pc, #428]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003964:	5c1b      	ldrb	r3, [r3, r0]
 8003966:	404b      	eors	r3, r1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	4053      	eors	r3, r2
 800396c:	b2da      	uxtb	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3302      	adds	r3, #2
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	4b65      	ldr	r3, [pc, #404]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003978:	5c59      	ldrb	r1, [r3, r1]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3302      	adds	r3, #2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	404b      	eors	r3, r1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4053      	eors	r3, r2
 8003986:	b2da      	uxtb	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3303      	adds	r3, #3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	4b60      	ldr	r3, [pc, #384]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003992:	5c5b      	ldrb	r3, [r3, r1]
 8003994:	4053      	eors	r3, r2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80039a2:	5c9a      	ldrb	r2, [r3, r2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3301      	adds	r3, #1
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4b57      	ldr	r3, [pc, #348]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80039ae:	5c59      	ldrb	r1, [r3, r1]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3301      	adds	r3, #1
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 80039ba:	5c1b      	ldrb	r3, [r3, r0]
 80039bc:	404b      	eors	r3, r1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4053      	eors	r3, r2
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3302      	adds	r3, #2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	4619      	mov	r1, r3
 80039cc:	4b51      	ldr	r3, [pc, #324]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 80039ce:	5c59      	ldrb	r1, [r3, r1]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3302      	adds	r3, #2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 80039da:	5c1b      	ldrb	r3, [r3, r0]
 80039dc:	404b      	eors	r3, r1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4053      	eors	r3, r2
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3303      	adds	r3, #3
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 80039ee:	5c59      	ldrb	r1, [r3, r1]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3303      	adds	r3, #3
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	404b      	eors	r3, r1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4053      	eors	r3, r2
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a08:	5c9a      	ldrb	r2, [r3, r2]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4053      	eors	r3, r2
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3301      	adds	r3, #1
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a1c:	5c5b      	ldrb	r3, [r3, r1]
 8003a1e:	4053      	eors	r3, r2
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3302      	adds	r3, #2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a2c:	5c59      	ldrb	r1, [r3, r1]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3302      	adds	r3, #2
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a38:	5c1b      	ldrb	r3, [r3, r0]
 8003a3a:	404b      	eors	r3, r1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4053      	eors	r3, r2
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3303      	adds	r3, #3
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4b32      	ldr	r3, [pc, #200]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a4c:	5c59      	ldrb	r1, [r3, r1]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3303      	adds	r3, #3
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	4b2e      	ldr	r3, [pc, #184]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a58:	5c1b      	ldrb	r3, [r3, r0]
 8003a5a:	404b      	eors	r3, r1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	4053      	eors	r3, r2
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003a6c:	5c9a      	ldrb	r2, [r3, r2]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003a76:	5c5b      	ldrb	r3, [r3, r1]
 8003a78:	4053      	eors	r3, r2
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	4619      	mov	r1, r3
 8003a84:	4b21      	ldr	r3, [pc, #132]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003a86:	5c59      	ldrb	r1, [r3, r1]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	404b      	eors	r3, r1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4053      	eors	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8003aa0:	5c5b      	ldrb	r3, [r3, r1]
 8003aa2:	4053      	eors	r3, r2
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4619      	mov	r1, r3
 8003aae:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8003ab0:	5c59      	ldrb	r1, [r3, r1]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3303      	adds	r3, #3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8003abc:	5c1b      	ldrb	r3, [r3, r0]
 8003abe:	404b      	eors	r3, r1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	4053      	eors	r3, r2
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	7a3a      	ldrb	r2, [r7, #8]
 8003ad0:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	7a7a      	ldrb	r2, [r7, #9]
 8003ada:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	7aba      	ldrb	r2, [r7, #10]
 8003ae4:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	7afa      	ldrb	r2, [r7, #11]
 8003aee:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	3301      	adds	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	f67f af1c 	bls.w	8003936 <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	0801fc9c 	.word	0x0801fc9c
 8003b10:	0801fa9c 	.word	0x0801fa9c
 8003b14:	0801fb9c 	.word	0x0801fb9c

08003b18 <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	@ 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e197      	b.n	8003e60 <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b3a:	fb01 f202 	mul.w	r2, r1, r2
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	4413      	add	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8003b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b50:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b52:	d150      	bne.n	8003bf6 <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 8003b54:	7ffb      	ldrb	r3, [r7, #31]
 8003b56:	f1c3 0303 	rsb	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	7819      	ldrb	r1, [r3, #0]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	7ffb      	ldrb	r3, [r7, #31]
 8003b68:	f1c3 0303 	rsb	r3, r3, #3
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	4403      	add	r3, r0
 8003b72:	404a      	eors	r2, r1
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
 8003b7a:	f1c3 0303 	rsb	r3, r3, #3
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	3301      	adds	r3, #1
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4413      	add	r3, r2
 8003b86:	7819      	ldrb	r1, [r3, #0]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
 8003b90:	f1c3 0303 	rsb	r3, r3, #3
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3301      	adds	r3, #1
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	4403      	add	r3, r0
 8003b9c:	404a      	eors	r2, r1
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	f1c3 0303 	rsb	r3, r3, #3
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3302      	adds	r3, #2
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	7819      	ldrb	r1, [r3, #0]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	7ffb      	ldrb	r3, [r7, #31]
 8003bba:	f1c3 0303 	rsb	r3, r3, #3
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	4403      	add	r3, r0
 8003bc6:	404a      	eors	r2, r1
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	f1c3 0303 	rsb	r3, r3, #3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3303      	adds	r3, #3
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	7819      	ldrb	r1, [r3, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	3303      	adds	r3, #3
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	f1c3 0303 	rsb	r3, r3, #3
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3303      	adds	r3, #3
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	4403      	add	r3, r0
 8003bf0:	404a      	eors	r2, r1
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d903      	bls.n	8003c08 <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3304      	adds	r3, #4
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e0d1      	b.n	8003dac <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d153      	bne.n	8003cb6 <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	7dbb      	ldrb	r3, [r7, #22]
 8003c22:	69b9      	ldr	r1, [r7, #24]
 8003c24:	440b      	add	r3, r1
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4b93      	ldr	r3, [pc, #588]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003c2c:	5c59      	ldrb	r1, [r3, r1]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7818      	ldrb	r0, [r3, #0]
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	488f      	ldr	r0, [pc, #572]	@ (8003e7c <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 8003c3e:	5cc3      	ldrb	r3, [r0, r3]
 8003c40:	404b      	eors	r3, r1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	4053      	eors	r3, r2
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	7dbb      	ldrb	r3, [r7, #22]
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	440b      	add	r3, r1
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4b85      	ldr	r3, [pc, #532]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003c62:	5c5b      	ldrb	r3, [r3, r1]
 8003c64:	4053      	eors	r3, r2
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	7dbb      	ldrb	r3, [r7, #22]
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4b7d      	ldr	r3, [pc, #500]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003c82:	5c5b      	ldrb	r3, [r3, r1]
 8003c84:	4053      	eors	r3, r2
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	7dbb      	ldrb	r3, [r7, #22]
 8003c98:	3b04      	subs	r3, #4
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	440b      	add	r3, r1
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4b75      	ldr	r3, [pc, #468]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003ca4:	5c5b      	ldrb	r3, [r3, r1]
 8003ca6:	4053      	eors	r3, r2
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e07a      	b.n	8003dac <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d147      	bne.n	8003d4c <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cc6:	fb01 f202 	mul.w	r2, r1, r2
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d13c      	bne.n	8003d4c <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3b04      	subs	r3, #4
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4b66      	ldr	r3, [pc, #408]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003ce0:	5c5b      	ldrb	r3, [r3, r1]
 8003ce2:	4053      	eors	r3, r2
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003cfe:	5c5b      	ldrb	r3, [r3, r1]
 8003d00:	4053      	eors	r3, r2
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3b04      	subs	r3, #4
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4b57      	ldr	r3, [pc, #348]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d1c:	5c5b      	ldrb	r3, [r3, r1]
 8003d1e:	4053      	eors	r3, r2
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	3b04      	subs	r3, #4
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4b4f      	ldr	r3, [pc, #316]	@ (8003e78 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8003d3a:	5c5b      	ldrb	r3, [r3, r1]
 8003d3c:	4053      	eors	r3, r2
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	3301      	adds	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e02f      	b.n	8003dac <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	3b04      	subs	r3, #4
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	4053      	eors	r3, r2
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4053      	eors	r3, r2
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	3b04      	subs	r3, #4
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	4053      	eors	r3, r2
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	4053      	eors	r3, r2
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8003dac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003db0:	2bc0      	cmp	r3, #192	@ 0xc0
 8003db2:	d006      	beq.n	8003dc2 <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e005      	b.n	8003dce <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 8003dce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d141      	bne.n	8003e5a <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	7819      	ldrb	r1, [r3, #0]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3b04      	subs	r3, #4
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	4403      	add	r3, r0
 8003dee:	404a      	eors	r2, r1
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	3301      	adds	r3, #1
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	7819      	ldrb	r1, [r3, #0]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	3b03      	subs	r3, #3
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	4403      	add	r3, r0
 8003e10:	404a      	eors	r2, r1
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	7819      	ldrb	r1, [r3, #0]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3b02      	subs	r3, #2
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	7ffb      	ldrb	r3, [r7, #31]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	4403      	add	r3, r0
 8003e32:	404a      	eors	r2, r1
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3303      	adds	r3, #3
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	7819      	ldrb	r1, [r3, #0]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3303      	adds	r3, #3
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	4403      	add	r3, r0
 8003e54:	404a      	eors	r2, r1
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	f67f ae64 	bls.w	8003b30 <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3724      	adds	r7, #36	@ 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	0801f89c 	.word	0x0801f89c
 8003e7c:	0801fd9c 	.word	0x0801fd9c

08003e80 <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 8003e8e:	e00b      	b.n	8003ea8 <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	18d0      	adds	r0, r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f000 f9f0 	bl	8004288 <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	1e5a      	subs	r2, r3, #1
 8003eac:	71fa      	strb	r2, [r7, #7]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ee      	bne.n	8003e90 <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3308      	adds	r3, #8
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	4619      	mov	r1, r3
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	f000 f887 	bl	8003ff0 <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e021      	b.n	8003f2c <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	4a1a      	ldr	r2, [pc, #104]	@ (8003f54 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	69b8      	ldr	r0, [r7, #24]
 8003ef2:	f000 fd8f 	bl	8004a14 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	1d1a      	adds	r2, r3, #4
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	4915      	ldr	r1, [pc, #84]	@ (8003f54 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fd86 	bl	8004a14 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3320      	adds	r3, #32
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	69b8      	ldr	r0, [r7, #24]
 8003f10:	f000 fa3f 	bl	8004392 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f103 0220 	add.w	r2, r3, #32
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fdc2 	bl	8004aaa <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	d9da      	bls.n	8003ee8 <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 8003f32:	f107 0310 	add.w	r3, r7, #16
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fdf3 	bl	8004b22 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f8f3 	bl	800412e <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	0801fda8 	.word	0x0801fda8

08003f58 <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	4619      	mov	r1, r3
 8003f78:	68b8      	ldr	r0, [r7, #8]
 8003f7a:	f000 f839 	bl	8003ff0 <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 8003f7e:	230f      	movs	r3, #15
 8003f80:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3320      	adds	r3, #32
 8003f86:	4619      	mov	r1, r3
 8003f88:	69b8      	ldr	r0, [r7, #24]
 8003f8a:	f000 fa02 	bl	8004392 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8003f92:	5cd3      	ldrb	r3, [r2, r3]
 8003f94:	4619      	mov	r1, r3
 8003f96:	69b8      	ldr	r0, [r7, #24]
 8003f98:	f000 fce5 	bl	8004966 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
 8003fa2:	4912      	ldr	r1, [pc, #72]	@ (8003fec <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 fcdc 	bl	8004966 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f103 0220 	add.w	r2, r3, #32
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fd75 	bl	8004aaa <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	77fa      	strb	r2, [r7, #31]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1db      	bne.n	8003f82 <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 8003fca:	f107 0310 	add.w	r3, r7, #16
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fda7 	bl	8004b22 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 8003fd4:	f107 0310 	add.w	r3, r7, #16
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f8a7 	bl	800412e <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	0801fda8 	.word	0x0801fda8

08003ff0 <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
 8004002:	e089      	b.n	8004118 <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3304      	adds	r3, #4
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 8004012:	2300      	movs	r3, #0
 8004014:	73bb      	strb	r3, [r7, #14]
 8004016:	e046      	b.n	80040a6 <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3304      	adds	r3, #4
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b25a      	sxtb	r2, r3
 8004020:	7bbb      	ldrb	r3, [r7, #14]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	440b      	add	r3, r1
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b25b      	sxtb	r3, r3
 800402a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800402e:	b25b      	sxtb	r3, r3
 8004030:	4313      	orrs	r3, r2
 8004032:	b25a      	sxtb	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3304      	adds	r3, #4
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3304      	adds	r3, #4
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	3304      	adds	r3, #4
 8004046:	0852      	lsrs	r2, r2, #1
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 800404c:	7bbb      	ldrb	r3, [r7, #14]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	7bbb      	ldrb	r3, [r7, #14]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	440b      	add	r3, r1
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b25a      	sxtb	r2, r3
 8004066:	7bbb      	ldrb	r3, [r7, #14]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	440b      	add	r3, r1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b25b      	sxtb	r3, r3
 8004070:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004074:	b25b      	sxtb	r3, r3
 8004076:	4313      	orrs	r3, r2
 8004078:	b25b      	sxtb	r3, r3
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 800408c:	7bbb      	ldrb	r3, [r7, #14]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	440b      	add	r3, r1
 800409a:	0052      	lsls	r2, r2, #1
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	3301      	adds	r3, #1
 80040a4:	73bb      	strb	r3, [r7, #14]
 80040a6:	7bbb      	ldrb	r3, [r7, #14]
 80040a8:	2b06      	cmp	r3, #6
 80040aa:	d9b5      	bls.n	8004018 <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3304      	adds	r3, #4
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	b25a      	sxtb	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3307      	adds	r3, #7
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040c0:	b25b      	sxtb	r3, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b25a      	sxtb	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3304      	adds	r3, #4
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3307      	adds	r3, #7
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3307      	adds	r3, #7
 80040d8:	0052      	lsls	r2, r2, #1
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b25a      	sxtb	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3307      	adds	r3, #7
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3307      	adds	r3, #7
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3307      	adds	r3, #7
 8004106:	0052      	lsls	r2, r2, #1
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	3301      	adds	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b03      	cmp	r3, #3
 800411c:	f67f af72 	bls.w	8004004 <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 8004138:	2300      	movs	r3, #0
 800413a:	72fb      	strb	r3, [r7, #11]
 800413c:	e099      	b.n	8004272 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4413      	add	r3, r2
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 800414c:	2300      	movs	r3, #0
 800414e:	72bb      	strb	r3, [r7, #10]
 8004150:	e04c      	b.n	80041ec <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	4413      	add	r3, r2
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b25a      	sxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3304      	adds	r3, #4
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b25b      	sxtb	r3, r3
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	b25b      	sxtb	r3, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	b259      	sxtb	r1, r3
 800416e:	7afb      	ldrb	r3, [r7, #11]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	4413      	add	r3, r2
 8004174:	b2ca      	uxtb	r2, r1
 8004176:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8004178:	7afb      	ldrb	r3, [r7, #11]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4413      	add	r3, r2
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	7afb      	ldrb	r3, [r7, #11]
 8004182:	6839      	ldr	r1, [r7, #0]
 8004184:	440b      	add	r3, r1
 8004186:	0052      	lsls	r2, r2, #1
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 800418c:	7afb      	ldrb	r3, [r7, #11]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4413      	add	r3, r2
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b25a      	sxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	4313      	orrs	r3, r2
 80041a4:	b259      	sxtb	r1, r3
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	b2ca      	uxtb	r2, r1
 80041ae:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 80041b0:	7afb      	ldrb	r3, [r7, #11]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	4413      	add	r3, r2
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	440b      	add	r3, r1
 80041be:	0052      	lsls	r2, r2, #1
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3304      	adds	r3, #4
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	0852      	lsrs	r2, r2, #1
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
            inTmp++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 80041e6:	7abb      	ldrb	r3, [r7, #10]
 80041e8:	3301      	adds	r3, #1
 80041ea:	72bb      	strb	r3, [r7, #10]
 80041ec:	7abb      	ldrb	r3, [r7, #10]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d9af      	bls.n	8004152 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b25a      	sxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3304      	adds	r3, #4
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b25b      	sxtb	r3, r3
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	b25b      	sxtb	r3, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	b259      	sxtb	r1, r3
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	4413      	add	r3, r2
 8004214:	b2ca      	uxtb	r2, r1
 8004216:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	7afb      	ldrb	r3, [r7, #11]
 8004222:	6839      	ldr	r1, [r7, #0]
 8004224:	440b      	add	r3, r1
 8004226:	0052      	lsls	r2, r2, #1
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b25a      	sxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	b25b      	sxtb	r3, r3
 8004242:	4313      	orrs	r3, r2
 8004244:	b259      	sxtb	r1, r3
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4413      	add	r3, r2
 800424c:	b2ca      	uxtb	r2, r1
 800424e:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3304      	adds	r3, #4
 8004266:	0852      	lsrs	r2, r2, #1
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 800426c:	7afb      	ldrb	r3, [r7, #11]
 800426e:	3301      	adds	r3, #1
 8004270:	72fb      	strb	r3, [r7, #11]
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	2b07      	cmp	r3, #7
 8004276:	f67f af62 	bls.w	800413e <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	f107 030c 	add.w	r3, r7, #12
 8004298:	6810      	ldr	r0, [r2, #0]
 800429a:	6851      	ldr	r1, [r2, #4]
 800429c:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
 80042a2:	e050      	b.n	8004346 <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	75bb      	strb	r3, [r7, #22]
 80042b2:	e02d      	b.n	8004310 <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4413      	add	r3, r2
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25a      	sxtb	r2, r3
 80042be:	7dbb      	ldrb	r3, [r7, #22]
 80042c0:	3318      	adds	r3, #24
 80042c2:	443b      	add	r3, r7
 80042c4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80042ce:	b25b      	sxtb	r3, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b259      	sxtb	r1, r3
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	b2ca      	uxtb	r2, r1
 80042dc:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	440b      	add	r3, r1
 80042ec:	0852      	lsrs	r2, r2, #1
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 80042f2:	7dbb      	ldrb	r3, [r7, #22]
 80042f4:	3318      	adds	r3, #24
 80042f6:	443b      	add	r3, r7
 80042f8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80042fc:	7dbb      	ldrb	r3, [r7, #22]
 80042fe:	0052      	lsls	r2, r2, #1
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	3318      	adds	r3, #24
 8004304:	443b      	add	r3, r7
 8004306:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 800430a:	7dbb      	ldrb	r3, [r7, #22]
 800430c:	3301      	adds	r3, #1
 800430e:	75bb      	strb	r3, [r7, #22]
 8004310:	7dbb      	ldrb	r3, [r7, #22]
 8004312:	2b06      	cmp	r3, #6
 8004314:	d9ce      	bls.n	80042b4 <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	4413      	add	r3, r2
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b25a      	sxtb	r2, r3
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004328:	b25b      	sxtb	r3, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	b259      	sxtb	r1, r3
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	4413      	add	r3, r2
 8004334:	b2ca      	uxtb	r2, r1
 8004336:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	3301      	adds	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d9ab      	bls.n	80042a4 <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	3303      	adds	r3, #3
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3307      	adds	r3, #7
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3303      	adds	r3, #3
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3303      	adds	r3, #3
 8004366:	f022 020f 	bic.w	r2, r2, #15
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	799b      	ldrb	r3, [r3, #6]
 8004372:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3306      	adds	r3, #6
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	7912      	ldrb	r2, [r2, #4]
 800437c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	7dfa      	ldrb	r2, [r7, #23]
 8004384:	701a      	strb	r2, [r3, #0]

}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3301      	adds	r3, #1
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3302      	adds	r3, #2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	08db      	lsrs	r3, r3, #3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3301      	adds	r3, #1
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b25a      	sxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3302      	adds	r3, #2
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	4313      	orrs	r3, r2
 8004402:	b25b      	sxtb	r3, r3
 8004404:	b2da      	uxtb	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	b2db      	uxtb	r3, r3
 800441c:	4313      	orrs	r3, r2
 800441e:	b2da      	uxtb	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	b2da      	uxtb	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	f002 0220 	and.w	r2, r2, #32
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	b25a      	sxtb	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3303      	adds	r3, #3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b25b      	sxtb	r3, r3
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	b25b      	sxtb	r3, r3
 8004464:	4313      	orrs	r3, r2
 8004466:	b25a      	sxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b25a      	sxtb	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3301      	adds	r3, #1
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b25b      	sxtb	r3, r3
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	b25b      	sxtb	r3, r3
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	b25b      	sxtb	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	b25a      	sxtb	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b25a      	sxtb	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b25a      	sxtb	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	7819      	ldrb	r1, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3302      	adds	r3, #2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	430a      	orrs	r2, r1
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	7819      	ldrb	r1, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3301      	adds	r3, #1
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	430a      	orrs	r2, r1
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3302      	adds	r3, #2
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	3302      	adds	r3, #2
 8004504:	f002 0220 	and.w	r2, r2, #32
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	3302      	adds	r3, #2
 8004510:	7819      	ldrb	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3302      	adds	r3, #2
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	b2da      	uxtb	r2, r3
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	3302      	adds	r3, #2
 8004526:	430a      	orrs	r2, r1
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	3302      	adds	r3, #2
 8004530:	7819      	ldrb	r1, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3301      	adds	r3, #1
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	b2da      	uxtb	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	3302      	adds	r3, #2
 8004546:	430a      	orrs	r2, r1
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	3302      	adds	r3, #2
 8004550:	7819      	ldrb	r1, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	b2da      	uxtb	r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	3302      	adds	r3, #2
 8004564:	430a      	orrs	r2, r1
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	3302      	adds	r3, #2
 800456e:	7819      	ldrb	r1, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3303      	adds	r3, #3
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3302      	adds	r3, #2
 8004584:	430a      	orrs	r2, r1
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3302      	adds	r3, #2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b25a      	sxtb	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	b25b      	sxtb	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b25a      	sxtb	r2, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	3302      	adds	r3, #2
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3301      	adds	r3, #1
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	015b      	lsls	r3, r3, #5
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	3303      	adds	r3, #3
 80045b8:	f002 0220 	and.w	r2, r2, #32
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	3303      	adds	r3, #3
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	b25a      	sxtb	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	b25b      	sxtb	r3, r3
 80045d8:	4313      	orrs	r3, r2
 80045da:	b25a      	sxtb	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	3303      	adds	r3, #3
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	3303      	adds	r3, #3
 80045e8:	7819      	ldrb	r1, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3303      	adds	r3, #3
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	3303      	adds	r3, #3
 80045fe:	430a      	orrs	r2, r1
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3303      	adds	r3, #3
 8004608:	7819      	ldrb	r1, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3302      	adds	r3, #2
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	b2da      	uxtb	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	3303      	adds	r3, #3
 800461e:	430a      	orrs	r2, r1
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	3303      	adds	r3, #3
 8004628:	7819      	ldrb	r1, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3301      	adds	r3, #1
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	b2da      	uxtb	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	3303      	adds	r3, #3
 800463e:	430a      	orrs	r2, r1
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	3303      	adds	r3, #3
 8004648:	7819      	ldrb	r1, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	3303      	adds	r3, #3
 800465c:	430a      	orrs	r2, r1
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3305      	adds	r3, #5
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	b2da      	uxtb	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3304      	adds	r3, #4
 8004670:	f002 0220 	and.w	r2, r2, #32
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b25a      	sxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3306      	adds	r3, #6
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b25b      	sxtb	r3, r3
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	b25b      	sxtb	r3, r3
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	b25b      	sxtb	r3, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	b25a      	sxtb	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	3304      	adds	r3, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	7819      	ldrb	r1, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3304      	adds	r3, #4
 80046b8:	430a      	orrs	r2, r1
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	3304      	adds	r3, #4
 80046c2:	7819      	ldrb	r1, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3305      	adds	r3, #5
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	430a      	orrs	r2, r1
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	3304      	adds	r3, #4
 80046e2:	7819      	ldrb	r1, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3306      	adds	r3, #6
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3304      	adds	r3, #4
 80046f8:	430a      	orrs	r2, r1
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	3304      	adds	r3, #4
 8004702:	7819      	ldrb	r1, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3307      	adds	r3, #7
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	3304      	adds	r3, #4
 8004718:	430a      	orrs	r2, r1
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	b2da      	uxtb	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	3305      	adds	r3, #5
 800472c:	f002 0220 	and.w	r2, r2, #32
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	3305      	adds	r3, #5
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b25a      	sxtb	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3305      	adds	r3, #5
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b25b      	sxtb	r3, r3
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	b25b      	sxtb	r3, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	b25a      	sxtb	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	3305      	adds	r3, #5
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	3305      	adds	r3, #5
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	b25a      	sxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3306      	adds	r3, #6
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b25b      	sxtb	r3, r3
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	b25b      	sxtb	r3, r3
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	b25b      	sxtb	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	b25a      	sxtb	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	3305      	adds	r3, #5
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	3305      	adds	r3, #5
 8004780:	7819      	ldrb	r1, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3306      	adds	r3, #6
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	b2da      	uxtb	r2, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3305      	adds	r3, #5
 8004796:	430a      	orrs	r2, r1
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	3305      	adds	r3, #5
 80047a0:	7819      	ldrb	r1, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	3305      	adds	r3, #5
 80047b6:	430a      	orrs	r2, r1
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	3305      	adds	r3, #5
 80047c0:	7819      	ldrb	r1, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3306      	adds	r3, #6
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	3305      	adds	r3, #5
 80047d6:	430a      	orrs	r2, r1
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3305      	adds	r3, #5
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	015b      	lsls	r3, r3, #5
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	3306      	adds	r3, #6
 80047ea:	f002 0220 	and.w	r2, r2, #32
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	3306      	adds	r3, #6
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b25a      	sxtb	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3306      	adds	r3, #6
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b25b      	sxtb	r3, r3
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	b25b      	sxtb	r3, r3
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	b25b      	sxtb	r3, r3
 800480c:	4313      	orrs	r3, r2
 800480e:	b25a      	sxtb	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3306      	adds	r3, #6
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3306      	adds	r3, #6
 800481c:	7819      	ldrb	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3305      	adds	r3, #5
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	b2da      	uxtb	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	3306      	adds	r3, #6
 8004832:	430a      	orrs	r2, r1
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	3306      	adds	r3, #6
 800483c:	7819      	ldrb	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3307      	adds	r3, #7
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	b2da      	uxtb	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	3306      	adds	r3, #6
 8004852:	430a      	orrs	r2, r1
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	3306      	adds	r3, #6
 800485c:	7819      	ldrb	r1, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	b2da      	uxtb	r2, r3
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	3306      	adds	r3, #6
 8004872:	430a      	orrs	r2, r1
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	3306      	adds	r3, #6
 800487c:	7819      	ldrb	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3307      	adds	r3, #7
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	09db      	lsrs	r3, r3, #7
 8004886:	b2da      	uxtb	r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	3306      	adds	r3, #6
 800488c:	430a      	orrs	r2, r1
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3306      	adds	r3, #6
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	3307      	adds	r3, #7
 80048a0:	f002 0220 	and.w	r2, r2, #32
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	3307      	adds	r3, #7
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b25a      	sxtb	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3305      	adds	r3, #5
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	b25b      	sxtb	r3, r3
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	b25b      	sxtb	r3, r3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	b25a      	sxtb	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	3307      	adds	r3, #7
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3307      	adds	r3, #7
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b25a      	sxtb	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3306      	adds	r3, #6
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b25a      	sxtb	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	3307      	adds	r3, #7
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	3307      	adds	r3, #7
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	b25a      	sxtb	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b25b      	sxtb	r3, r3
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	b25b      	sxtb	r3, r3
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	b25b      	sxtb	r3, r3
 800490e:	4313      	orrs	r3, r2
 8004910:	b25a      	sxtb	r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	3307      	adds	r3, #7
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3307      	adds	r3, #7
 800491e:	7819      	ldrb	r1, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	b2da      	uxtb	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	3307      	adds	r3, #7
 8004934:	430a      	orrs	r2, r1
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	3307      	adds	r3, #7
 800493e:	7819      	ldrb	r1, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	3307      	adds	r3, #7
 8004954:	430a      	orrs	r2, r1
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 800497a:	e041      	b.n	8004a00 <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e01f      	b.n	80049c2 <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	01db      	lsls	r3, r3, #7
 800498c:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	440b      	add	r3, r1
 800499c:	0852      	lsrs	r2, r2, #1
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	7819      	ldrb	r1, [r3, #0]
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	7bba      	ldrb	r2, [r7, #14]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 80049b8:	7b7b      	ldrb	r3, [r7, #13]
 80049ba:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3301      	adds	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d9dc      	bls.n	8004982 <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3303      	adds	r3, #3
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00f      	beq.n	80049f6 <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3303      	adds	r3, #3
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3303      	adds	r3, #3
 80049ee:	f022 020f 	bic.w	r2, r2, #15
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ba      	bne.n	800497c <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 8004a28:	e035      	b.n	8004a96 <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	781a      	ldrb	r2, [r3, #0]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	440b      	add	r3, r1
 8004a4e:	0052      	lsls	r2, r2, #1
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	7819      	ldrb	r1, [r3, #0]
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	7bba      	ldrb	r2, [r7, #14]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8004a6a:	7b7b      	ldrb	r3, [r7, #13]
 8004a6c:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1dc      	bne.n	8004a2e <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3303      	adds	r3, #3
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3303      	adds	r3, #3
 8004a84:	f042 0210 	orr.w	r2, r2, #16
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1c6      	bne.n	8004a2a <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f83f 	bl	8004b50 <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	7819      	ldrb	r1, [r3, #0]
 8004ad8:	7b3a      	ldrb	r2, [r7, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	404a      	eors	r2, r1
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3305      	adds	r3, #5
 8004ae8:	7819      	ldrb	r1, [r3, #0]
 8004aea:	7b7a      	ldrb	r2, [r7, #13]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3305      	adds	r3, #5
 8004af0:	404a      	eors	r2, r1
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3306      	adds	r3, #6
 8004afa:	7819      	ldrb	r1, [r3, #0]
 8004afc:	7bba      	ldrb	r2, [r7, #14]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3306      	adds	r3, #6
 8004b02:	404a      	eors	r2, r1
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3307      	adds	r3, #7
 8004b0c:	7819      	ldrb	r1, [r3, #0]
 8004b0e:	7bfa      	ldrb	r2, [r7, #15]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3307      	adds	r3, #7
 8004b14:	404a      	eors	r2, r1
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa4d 	bl	8005000 <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]
 8004b6a:	e06d      	b.n	8004c48 <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	3318      	adds	r3, #24
 8004b72:	443b      	add	r3, r7
 8004b74:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	440b      	add	r3, r1
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	4053      	eors	r3, r2
 8004b84:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8004b86:	7dbb      	ldrb	r3, [r7, #22]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	7dbb      	ldrb	r3, [r7, #22]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	7dbb      	ldrb	r3, [r7, #22]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	005a      	lsls	r2, r3, #1
 8004bb2:	7dbb      	ldrb	r3, [r7, #22]
 8004bb4:	4923      	ldr	r1, [pc, #140]	@ (8004c44 <phCryptoSym_Sw_Des_F+0xf4>)
 8004bb6:	0192      	lsls	r2, r2, #6
 8004bb8:	440a      	add	r2, r1
 8004bba:	4413      	add	r3, r2
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	0112      	lsls	r2, r2, #4
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	443b      	add	r3, r7
 8004bc8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	3318      	adds	r3, #24
 8004bd4:	443b      	add	r3, r7
 8004bd6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	3301      	adds	r3, #1
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	440b      	add	r3, r1
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	4053      	eors	r3, r2
 8004be8:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8004bea:	7dbb      	ldrb	r3, [r7, #22]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	7dbb      	ldrb	r3, [r7, #22]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	7dbb      	ldrb	r3, [r7, #22]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	3318      	adds	r3, #24
 8004c16:	443b      	add	r3, r7
 8004c18:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	7dbb      	ldrb	r3, [r7, #22]
 8004c24:	4807      	ldr	r0, [pc, #28]	@ (8004c44 <phCryptoSym_Sw_Des_F+0xf4>)
 8004c26:	0192      	lsls	r2, r2, #6
 8004c28:	4402      	add	r2, r0
 8004c2a:	4413      	add	r3, r2
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	3318      	adds	r3, #24
 8004c36:	443b      	add	r3, r7
 8004c38:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
 8004c42:	e001      	b.n	8004c48 <phCryptoSym_Sw_Des_F+0xf8>
 8004c44:	0801fdb8 	.word	0x0801fdb8
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d98e      	bls.n	8004b6c <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 8004c4e:	7b3a      	ldrb	r2, [r7, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3301      	adds	r3, #1
 8004c54:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 8004c5c:	7b3b      	ldrb	r3, [r7, #12]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 8004c64:	7b3a      	ldrb	r2, [r7, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3302      	adds	r3, #2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b25a      	sxtb	r2, r3
 8004c7a:	7b3b      	ldrb	r3, [r7, #12]
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	015b      	lsls	r3, r3, #5
 8004c80:	b25b      	sxtb	r3, r3
 8004c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c86:	b25b      	sxtb	r3, r3
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b25a      	sxtb	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3302      	adds	r3, #2
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8004ca4:	7b3b      	ldrb	r3, [r7, #12]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3303      	adds	r3, #3
 8004cae:	f002 0210 	and.w	r2, r2, #16
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 8004cb6:	7b3b      	ldrb	r3, [r7, #12]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3303      	adds	r3, #3
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b25a      	sxtb	r2, r3
 8004cc6:	7b3b      	ldrb	r3, [r7, #12]
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b25a      	sxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3303      	adds	r3, #3
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 8004cdc:	7b3b      	ldrb	r3, [r7, #12]
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b25a      	sxtb	r2, r3
 8004cec:	7b3b      	ldrb	r3, [r7, #12]
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b25a      	sxtb	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	7b7b      	ldrb	r3, [r7, #13]
 8004d08:	01db      	lsls	r3, r3, #7
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3301      	adds	r3, #1
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b25a      	sxtb	r2, r3
 8004d1c:	7b7b      	ldrb	r3, [r7, #13]
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	015b      	lsls	r3, r3, #5
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	b25a      	sxtb	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3301      	adds	r3, #1
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b25a      	sxtb	r2, r3
 8004d3e:	7b7b      	ldrb	r3, [r7, #13]
 8004d40:	b25b      	sxtb	r3, r3
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	b25a      	sxtb	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3302      	adds	r3, #2
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b25a      	sxtb	r2, r3
 8004d60:	7b7b      	ldrb	r3, [r7, #13]
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b25a      	sxtb	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3303      	adds	r3, #3
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 8004d7a:	7b7b      	ldrb	r3, [r7, #13]
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b25a      	sxtb	r2, r3
 8004d88:	7b7b      	ldrb	r3, [r7, #13]
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	4313      	orrs	r3, r2
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8004d9c:	7b7b      	ldrb	r3, [r7, #13]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3303      	adds	r3, #3
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	b25a      	sxtb	r2, r3
 8004dac:	7b7b      	ldrb	r3, [r7, #13]
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	b25b      	sxtb	r3, r3
 8004db6:	4313      	orrs	r3, r2
 8004db8:	b25a      	sxtb	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3303      	adds	r3, #3
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 8004dc2:	7b7b      	ldrb	r3, [r7, #13]
 8004dc4:	08db      	lsrs	r3, r3, #3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b25a      	sxtb	r2, r3
 8004dd2:	7b7b      	ldrb	r3, [r7, #13]
 8004dd4:	b25b      	sxtb	r3, r3
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b25a      	sxtb	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3301      	adds	r3, #1
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8004de8:	7b7b      	ldrb	r3, [r7, #13]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3302      	adds	r3, #2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b25a      	sxtb	r2, r3
 8004df8:	7b7b      	ldrb	r3, [r7, #13]
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	b25a      	sxtb	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3302      	adds	r3, #2
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	7bbb      	ldrb	r3, [r7, #14]
 8004e14:	09db      	lsrs	r3, r3, #7
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3301      	adds	r3, #1
 8004e24:	7819      	ldrb	r1, [r3, #0]
 8004e26:	7bbb      	ldrb	r3, [r7, #14]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3301      	adds	r3, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3303      	adds	r3, #3
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	b25a      	sxtb	r2, r3
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e50:	b25b      	sxtb	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b25a      	sxtb	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 8004e5e:	7bbb      	ldrb	r3, [r7, #14]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b25a      	sxtb	r2, r3
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	b25b      	sxtb	r3, r3
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	b25b      	sxtb	r3, r3
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b25b      	sxtb	r3, r3
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b25a      	sxtb	r2, r3
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	4313      	orrs	r3, r2
 8004e92:	b25b      	sxtb	r3, r3
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3303      	adds	r3, #3
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b25a      	sxtb	r2, r3
 8004ea2:	7bbb      	ldrb	r3, [r7, #14]
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	b25b      	sxtb	r3, r3
 8004eac:	4313      	orrs	r3, r2
 8004eae:	b25a      	sxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 8004eb8:	7bbb      	ldrb	r3, [r7, #14]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b25a      	sxtb	r2, r3
 8004ec8:	7bbb      	ldrb	r3, [r7, #14]
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	b25b      	sxtb	r3, r3
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b25a      	sxtb	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	b25a      	sxtb	r2, r3
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	b25b      	sxtb	r3, r3
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	b25b      	sxtb	r3, r3
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b25a      	sxtb	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3302      	adds	r3, #2
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b25a      	sxtb	r2, r3
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	4313      	orrs	r3, r2
 8004f12:	b25b      	sxtb	r3, r3
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b25a      	sxtb	r2, r3
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b25a      	sxtb	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3303      	adds	r3, #3
 8004f3c:	7819      	ldrb	r1, [r3, #0]
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	09db      	lsrs	r3, r3, #7
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3303      	adds	r3, #3
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3302      	adds	r3, #2
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b25a      	sxtb	r2, r3
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	b25b      	sxtb	r3, r3
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b25a      	sxtb	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3303      	adds	r3, #3
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b25a      	sxtb	r2, r3
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	b25b      	sxtb	r3, r3
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	b25b      	sxtb	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b25a      	sxtb	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3303      	adds	r3, #3
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b25a      	sxtb	r2, r3
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	b25b      	sxtb	r3, r3
 8004fac:	4313      	orrs	r3, r2
 8004fae:	b25a      	sxtb	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	b25a      	sxtb	r2, r3
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	b25b      	sxtb	r3, r3
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	b25a      	sxtb	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b25a      	sxtb	r2, r3
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	b25b      	sxtb	r3, r3
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	701a      	strb	r2, [r3, #0]

}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3303      	adds	r3, #3
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	015b      	lsls	r3, r3, #5
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	4313      	orrs	r3, r2
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800502a:	b2da      	uxtb	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3301      	adds	r3, #1
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	09db      	lsrs	r3, r3, #7
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b2da      	uxtb	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b2da      	uxtb	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3302      	adds	r3, #2
 8005072:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3301      	adds	r3, #1
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3302      	adds	r3, #2
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	09db      	lsrs	r3, r3, #7
 800508c:	b2db      	uxtb	r3, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	b2da      	uxtb	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3303      	adds	r3, #3
 8005096:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3301      	adds	r3, #1
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	015b      	lsls	r3, r3, #5
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3302      	adds	r3, #2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4313      	orrs	r3, r2
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	3304      	adds	r3, #4
 80050c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3302      	adds	r3, #2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3303      	adds	r3, #3
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	09db      	lsrs	r3, r3, #7
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	4313      	orrs	r3, r2
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	3305      	adds	r3, #5
 80050e4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3302      	adds	r3, #2
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	015b      	lsls	r3, r3, #5
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3303      	adds	r3, #3
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4313      	orrs	r3, r2
 8005108:	b2da      	uxtb	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3306      	adds	r3, #6
 800510e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3303      	adds	r3, #3
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	09db      	lsrs	r3, r3, #7
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4313      	orrs	r3, r2
 800512a:	b2da      	uxtb	r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3307      	adds	r3, #7
 8005130:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	2210      	movs	r2, #16
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f017 ffb5 	bl	801d0c8 <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800515e:	f107 0312 	add.w	r3, r7, #18
 8005162:	461a      	mov	r2, r3
 8005164:	2102      	movs	r1, #2
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7fe f85e 	bl	8003228 <phCryptoSym_Sw_GetConfig>
 800516c:	4603      	mov	r3, r0
 800516e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 8005176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005178:	e058      	b.n	800522c <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 800517a:	8a7b      	ldrh	r3, [r7, #18]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d005      	beq.n	800518c <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 8005180:	2b10      	cmp	r3, #16
 8005182:	d107      	bne.n	8005194 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 8005184:	2387      	movs	r3, #135	@ 0x87
 8005186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800518a:	e006      	b.n	800519a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 800518c:	231b      	movs	r3, #27
 800518e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8005192:	e002      	b.n	800519a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8005194:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8005198:	e048      	b.n	800522c <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f879 	bl	8005298 <phCryptoSym_Sw_EncryptBlock>
 80051a6:	4603      	mov	r3, r0
 80051a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 80051b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051b2:	e03b      	b.n	800522c <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 80051b4:	8a7b      	ldrh	r3, [r7, #18]
 80051b6:	b2d9      	uxtb	r1, r3
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f838 	bl	8005234 <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 80051c4:	7d3b      	ldrb	r3, [r7, #20]
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da0d      	bge.n	80051e8 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 80051cc:	8a7b      	ldrh	r3, [r7, #18]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4413      	add	r3, r2
 80051d4:	7819      	ldrb	r1, [r3, #0]
 80051d6:	8a7b      	ldrh	r3, [r7, #18]
 80051d8:	3b01      	subs	r3, #1
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80051e2:	404a      	eors	r2, r1
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 80051e8:	8a7b      	ldrh	r3, [r7, #18]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4619      	mov	r1, r3
 80051f0:	68b8      	ldr	r0, [r7, #8]
 80051f2:	f000 f81f 	bl	8005234 <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b25b      	sxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da0d      	bge.n	800521c <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 8005200:	8a7b      	ldrh	r3, [r7, #18]
 8005202:	3b01      	subs	r3, #1
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	7819      	ldrb	r1, [r3, #0]
 800520a:	8a7b      	ldrh	r3, [r7, #18]
 800520c:	3b01      	subs	r3, #1
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4413      	add	r3, r2
 8005212:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005216:	404a      	eors	r2, r1
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	2210      	movs	r2, #16
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f017 ff4f 	bl	801d0c8 <memset>

    return PH_ERR_SUCCESS;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3728      	adds	r7, #40	@ 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	460b      	mov	r3, r1
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 8005246:	7afb      	ldrb	r3, [r7, #11]
 8005248:	3b01      	subs	r3, #1
 800524a:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 800524c:	7afb      	ldrb	r3, [r7, #11]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	7afb      	ldrb	r3, [r7, #11]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	440b      	add	r3, r1
 800525a:	0052      	lsls	r2, r2, #1
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	7819      	ldrb	r1, [r3, #0]
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	7dfa      	ldrb	r2, [r7, #23]
 8005270:	430a      	orrs	r2, r1
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8005276:	7afb      	ldrb	r3, [r7, #11]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	09db      	lsrs	r3, r3, #7
 8005280:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1de      	bne.n	8005246 <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	f200 8088 	bhi.w	80053bc <phCryptoSym_Sw_EncryptBlock+0x124>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <phCryptoSym_Sw_EncryptBlock+0x1c>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	08005315 	.word	0x08005315
 80052c4:	0800532d 	.word	0x0800532d
 80052c8:	08005375 	.word	0x08005375
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80052cc:	220a      	movs	r2, #10
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fe f83e 	bl	8003352 <phCryptoSym_Sw_Aes_EncryptBlock>
 80052d6:	4603      	mov	r3, r0
 80052d8:	81fb      	strh	r3, [r7, #14]
 80052da:	89fb      	ldrh	r3, [r7, #14]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d070      	beq.n	80053c2 <phCryptoSym_Sw_EncryptBlock+0x12a>
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	e07a      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80052e4:	220c      	movs	r2, #12
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fe f832 	bl	8003352 <phCryptoSym_Sw_Aes_EncryptBlock>
 80052ee:	4603      	mov	r3, r0
 80052f0:	81fb      	strh	r3, [r7, #14]
 80052f2:	89fb      	ldrh	r3, [r7, #14]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d066      	beq.n	80053c6 <phCryptoSym_Sw_EncryptBlock+0x12e>
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	e06e      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80052fc:	220e      	movs	r2, #14
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fe f826 	bl	8003352 <phCryptoSym_Sw_Aes_EncryptBlock>
 8005306:	4603      	mov	r3, r0
 8005308:	81fb      	strh	r3, [r7, #14]
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05c      	beq.n	80053ca <phCryptoSym_Sw_EncryptBlock+0x132>
 8005310:	89fb      	ldrh	r3, [r7, #14]
 8005312:	e062      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005314:	2200      	movs	r2, #0
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fe fdcf 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 800531e:	4603      	mov	r3, r0
 8005320:	81fb      	strh	r3, [r7, #14]
 8005322:	89fb      	ldrh	r3, [r7, #14]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d052      	beq.n	80053ce <phCryptoSym_Sw_EncryptBlock+0x136>
 8005328:	89fb      	ldrh	r3, [r7, #14]
 800532a:	e056      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800532c:	2200      	movs	r2, #0
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fe fdc3 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 8005336:	4603      	mov	r3, r0
 8005338:	81fb      	strh	r3, [r7, #14]
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <phCryptoSym_Sw_EncryptBlock+0xac>
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	e04a      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005344:	2201      	movs	r2, #1
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fe fe05 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 800534e:	4603      	mov	r3, r0
 8005350:	81fb      	strh	r3, [r7, #14]
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <phCryptoSym_Sw_EncryptBlock+0xc4>
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	e03e      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800535c:	2200      	movs	r2, #0
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fe fdab 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 8005366:	4603      	mov	r3, r0
 8005368:	81fb      	strh	r3, [r7, #14]
 800536a:	89fb      	ldrh	r3, [r7, #14]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d030      	beq.n	80053d2 <phCryptoSym_Sw_EncryptBlock+0x13a>
 8005370:	89fb      	ldrh	r3, [r7, #14]
 8005372:	e032      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005374:	2200      	movs	r2, #0
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fe fd9f 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 800537e:	4603      	mov	r3, r0
 8005380:	81fb      	strh	r3, [r7, #14]
 8005382:	89fb      	ldrh	r3, [r7, #14]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <phCryptoSym_Sw_EncryptBlock+0xf4>
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	e026      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 800538c:	2201      	movs	r2, #1
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7fe fde1 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 8005396:	4603      	mov	r3, r0
 8005398:	81fb      	strh	r3, [r7, #14]
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <phCryptoSym_Sw_EncryptBlock+0x10c>
 80053a0:	89fb      	ldrh	r3, [r7, #14]
 80053a2:	e01a      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80053a4:	2202      	movs	r2, #2
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fe fd87 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 80053ae:	4603      	mov	r3, r0
 80053b0:	81fb      	strh	r3, [r7, #14]
 80053b2:	89fb      	ldrh	r3, [r7, #14]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00e      	beq.n	80053d6 <phCryptoSym_Sw_EncryptBlock+0x13e>
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	e00e      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80053bc:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80053c0:	e00b      	b.n	80053da <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 80053c2:	bf00      	nop
 80053c4:	e008      	b.n	80053d8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80053c6:	bf00      	nop
 80053c8:	e006      	b.n	80053d8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80053ca:	bf00      	nop
 80053cc:	e004      	b.n	80053d8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80053d6:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop

080053e4 <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	f200 8088 	bhi.w	8005508 <phCryptoSym_Sw_DecryptBlock+0x124>
 80053f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <phCryptoSym_Sw_DecryptBlock+0x1c>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005419 	.word	0x08005419
 8005404:	08005431 	.word	0x08005431
 8005408:	08005449 	.word	0x08005449
 800540c:	08005461 	.word	0x08005461
 8005410:	08005479 	.word	0x08005479
 8005414:	080054c1 	.word	0x080054c1
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8005418:	220a      	movs	r2, #10
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fe f80b 	bl	8003438 <phCryptoSym_Sw_Aes_DecryptBlock>
 8005422:	4603      	mov	r3, r0
 8005424:	81fb      	strh	r3, [r7, #14]
 8005426:	89fb      	ldrh	r3, [r7, #14]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d070      	beq.n	800550e <phCryptoSym_Sw_DecryptBlock+0x12a>
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	e07a      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8005430:	220c      	movs	r2, #12
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fd ffff 	bl	8003438 <phCryptoSym_Sw_Aes_DecryptBlock>
 800543a:	4603      	mov	r3, r0
 800543c:	81fb      	strh	r3, [r7, #14]
 800543e:	89fb      	ldrh	r3, [r7, #14]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d066      	beq.n	8005512 <phCryptoSym_Sw_DecryptBlock+0x12e>
 8005444:	89fb      	ldrh	r3, [r7, #14]
 8005446:	e06e      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8005448:	220e      	movs	r2, #14
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fd fff3 	bl	8003438 <phCryptoSym_Sw_Aes_DecryptBlock>
 8005452:	4603      	mov	r3, r0
 8005454:	81fb      	strh	r3, [r7, #14]
 8005456:	89fb      	ldrh	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <phCryptoSym_Sw_DecryptBlock+0x132>
 800545c:	89fb      	ldrh	r3, [r7, #14]
 800545e:	e062      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005460:	2200      	movs	r2, #0
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fe fd77 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 800546a:	4603      	mov	r3, r0
 800546c:	81fb      	strh	r3, [r7, #14]
 800546e:	89fb      	ldrh	r3, [r7, #14]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d052      	beq.n	800551a <phCryptoSym_Sw_DecryptBlock+0x136>
 8005474:	89fb      	ldrh	r3, [r7, #14]
 8005476:	e056      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8005478:	2200      	movs	r2, #0
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fe fd6b 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 8005482:	4603      	mov	r3, r0
 8005484:	81fb      	strh	r3, [r7, #14]
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <phCryptoSym_Sw_DecryptBlock+0xac>
 800548c:	89fb      	ldrh	r3, [r7, #14]
 800548e:	e04a      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8005490:	2201      	movs	r2, #1
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fe fd11 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 800549a:	4603      	mov	r3, r0
 800549c:	81fb      	strh	r3, [r7, #14]
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <phCryptoSym_Sw_DecryptBlock+0xc4>
 80054a4:	89fb      	ldrh	r3, [r7, #14]
 80054a6:	e03e      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80054a8:	2200      	movs	r2, #0
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fe fd53 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 80054b2:	4603      	mov	r3, r0
 80054b4:	81fb      	strh	r3, [r7, #14]
 80054b6:	89fb      	ldrh	r3, [r7, #14]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d030      	beq.n	800551e <phCryptoSym_Sw_DecryptBlock+0x13a>
 80054bc:	89fb      	ldrh	r3, [r7, #14]
 80054be:	e032      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80054c0:	2202      	movs	r2, #2
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fe fd47 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 80054ca:	4603      	mov	r3, r0
 80054cc:	81fb      	strh	r3, [r7, #14]
 80054ce:	89fb      	ldrh	r3, [r7, #14]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <phCryptoSym_Sw_DecryptBlock+0xf4>
 80054d4:	89fb      	ldrh	r3, [r7, #14]
 80054d6:	e026      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80054d8:	2201      	movs	r2, #1
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fe fced 	bl	8003ebc <phCryptoSym_Sw_Des_EncryptBlock>
 80054e2:	4603      	mov	r3, r0
 80054e4:	81fb      	strh	r3, [r7, #14]
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <phCryptoSym_Sw_DecryptBlock+0x10c>
 80054ec:	89fb      	ldrh	r3, [r7, #14]
 80054ee:	e01a      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80054f0:	2200      	movs	r2, #0
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fe fd2f 	bl	8003f58 <phCryptoSym_Sw_Des_DecryptBlock>
 80054fa:	4603      	mov	r3, r0
 80054fc:	81fb      	strh	r3, [r7, #14]
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <phCryptoSym_Sw_DecryptBlock+0x13e>
 8005504:	89fb      	ldrh	r3, [r7, #14]
 8005506:	e00e      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8005508:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800550c:	e00b      	b.n	8005526 <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 800550e:	bf00      	nop
 8005510:	e008      	b.n	8005524 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8005512:	bf00      	nop
 8005514:	e006      	b.n	8005524 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8005516:	bf00      	nop
 8005518:	e004      	b.n	8005524 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 8005522:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	461a      	mov	r2, r3
 800553c:	460b      	mov	r3, r1
 800553e:	817b      	strh	r3, [r7, #10]
 8005540:	4613      	mov	r3, r2
 8005542:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <phCryptoSym_Encrypt+0x20>
 800554a:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800554e:	e02d      	b.n	80055ac <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <phCryptoSym_Encrypt+0x2c>
 8005556:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800555a:	e027      	b.n	80055ac <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <phCryptoSym_Encrypt+0x38>
 8005562:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005566:	e021      	b.n	80055ac <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005570:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8005574:	d004      	beq.n	8005580 <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005576:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800557a:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 800557c:	8afb      	ldrh	r3, [r7, #22]
 800557e:	e015      	b.n	80055ac <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10b      	bne.n	80055a2 <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 800558a:	893a      	ldrh	r2, [r7, #8]
 800558c:	8979      	ldrh	r1, [r7, #10]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7fd fb18 	bl	8002bcc <phCryptoSym_Sw_Encrypt>
 800559c:	4603      	mov	r3, r0
 800559e:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 80055a0:	e003      	b.n	80055aa <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80055a2:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80055a6:	82fb      	strh	r3, [r7, #22]
            break;
 80055a8:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80055aa:	8afb      	ldrh	r3, [r7, #22]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	461a      	mov	r2, r3
 80055c0:	460b      	mov	r3, r1
 80055c2:	817b      	strh	r3, [r7, #10]
 80055c4:	4613      	mov	r3, r2
 80055c6:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <phCryptoSym_CalculateMac+0x20>
 80055ce:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80055d2:	e038      	b.n	8005646 <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 80055d4:	893b      	ldrh	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <phCryptoSym_CalculateMac+0x32>
 80055e0:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80055e4:	e02f      	b.n	8005646 <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <phCryptoSym_CalculateMac+0x3e>
 80055ec:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80055f0:	e029      	b.n	8005646 <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <phCryptoSym_CalculateMac+0x4a>
 80055f8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80055fc:	e023      	b.n	8005646 <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005606:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800560a:	d004      	beq.n	8005616 <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800560c:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005610:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	e017      	b.n	8005646 <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10d      	bne.n	800563c <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 8005620:	893a      	ldrh	r2, [r7, #8]
 8005622:	8979      	ldrh	r1, [r7, #10]
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7fd fb89 	bl	8002d48 <phCryptoSym_Sw_CalculateMac>
 8005636:	4603      	mov	r3, r0
 8005638:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 800563a:	e003      	b.n	8005644 <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800563c:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005640:	82fb      	strh	r3, [r7, #22]
            break;
 8005642:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8005644:	8afb      	ldrh	r3, [r7, #22]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <phCryptoSym_LoadIv+0x1a>
 8005662:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005666:	e024      	b.n	80056b2 <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <phCryptoSym_LoadIv+0x26>
 800566e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8005672:	e01e      	b.n	80056b2 <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800567c:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8005680:	d004      	beq.n	800568c <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005682:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005686:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8005688:	8afb      	ldrh	r3, [r7, #22]
 800568a:	e012      	b.n	80056b2 <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	d108      	bne.n	80056a8 <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	461a      	mov	r2, r3
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7fd fd11 	bl	80030c4 <phCryptoSym_Sw_LoadIv>
 80056a2:	4603      	mov	r3, r0
 80056a4:	82fb      	strh	r3, [r7, #22]
            break;
 80056a6:	e003      	b.n	80056b0 <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80056a8:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056ac:	82fb      	strh	r3, [r7, #22]
            break;
 80056ae:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80056b0:	8afb      	ldrh	r3, [r7, #22]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <phCryptoSym_LoadKeyDirect+0x1a>
 80056ce:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056d2:	e024      	b.n	800571e <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <phCryptoSym_LoadKeyDirect+0x26>
 80056da:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80056de:	e01e      	b.n	800571e <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80056e8:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80056ec:	d004      	beq.n	80056f8 <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80056ee:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80056f2:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80056f4:	8afb      	ldrh	r3, [r7, #22]
 80056f6:	e012      	b.n	800571e <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d108      	bne.n	8005714 <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	461a      	mov	r2, r3
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7fd fd09 	bl	8003120 <phCryptoSym_Sw_LoadKeyDirect>
 800570e:	4603      	mov	r3, r0
 8005710:	82fb      	strh	r3, [r7, #22]
            break;
 8005712:	e003      	b.n	800571c <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8005714:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8005718:	82fb      	strh	r3, [r7, #22]
            break;
 800571a:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 800571c:	8afb      	ldrh	r3, [r7, #22]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b088      	sub	sp, #32
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	461a      	mov	r2, r3
 8005732:	460b      	mov	r3, r1
 8005734:	817b      	strh	r3, [r7, #10]
 8005736:	4613      	mov	r3, r2
 8005738:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 800573a:	897b      	ldrh	r3, [r7, #10]
 800573c:	2b18      	cmp	r3, #24
 800573e:	d002      	beq.n	8005746 <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 8005740:	f24e 2320 	movw	r3, #57888	@ 0xe220
 8005744:	e07b      	b.n	800583e <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <phKeyStore_Sw_Init+0x2a>
 800574c:	2321      	movs	r3, #33	@ 0x21
 800574e:	e076      	b.n	800583e <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <phKeyStore_Sw_Init+0x34>
 8005756:	2321      	movs	r3, #33	@ 0x21
 8005758:	e071      	b.n	800583e <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 800575a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <phKeyStore_Sw_Init+0x3e>
 8005760:	2321      	movs	r3, #33	@ 0x21
 8005762:	e06c      	b.n	800583e <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <phKeyStore_Sw_Init+0x48>
 800576a:	2321      	movs	r3, #33	@ 0x21
 800576c:	e067      	b.n	800583e <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f24e 2201 	movw	r2, #57857	@ 0xe201
 8005774:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005780:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	893a      	ldrh	r2, [r7, #8]
 8005786:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800578c:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005792:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005798:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 800579a:	2300      	movs	r3, #0
 800579c:	83fb      	strh	r3, [r7, #30]
 800579e:	e02e      	b.n	80057fe <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	8bfb      	ldrh	r3, [r7, #30]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057ae:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	8bfb      	ldrh	r3, [r7, #30]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057be:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 80057c0:	2300      	movs	r3, #0
 80057c2:	83bb      	strh	r3, [r7, #28]
 80057c4:	e013      	b.n	80057ee <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 80057c6:	f107 0314 	add.w	r3, r7, #20
 80057ca:	8bba      	ldrh	r2, [r7, #28]
 80057cc:	8bf9      	ldrh	r1, [r7, #30]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f90a 	bl	80059e8 <phKeyStore_Sw_GetKeyValuePtrPos>
 80057d4:	4603      	mov	r3, r0
 80057d6:	837b      	strh	r3, [r7, #26]
 80057d8:	8b7b      	ldrh	r3, [r7, #26]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <phKeyStore_Sw_Init+0xbc>
 80057de:	8b7b      	ldrh	r3, [r7, #26]
 80057e0:	e02d      	b.n	800583e <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 80057e8:	8bbb      	ldrh	r3, [r7, #28]
 80057ea:	3301      	adds	r3, #1
 80057ec:	83bb      	strh	r3, [r7, #28]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	89db      	ldrh	r3, [r3, #14]
 80057f2:	8bba      	ldrh	r2, [r7, #28]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3e6      	bcc.n	80057c6 <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 80057f8:	8bfb      	ldrh	r3, [r7, #30]
 80057fa:	3301      	adds	r3, #1
 80057fc:	83fb      	strh	r3, [r7, #30]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	899b      	ldrh	r3, [r3, #12]
 8005802:	8bfa      	ldrh	r2, [r7, #30]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3cb      	bcc.n	80057a0 <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 8005808:	2300      	movs	r3, #0
 800580a:	83fb      	strh	r3, [r7, #30]
 800580c:	e011      	b.n	8005832 <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	8bfb      	ldrh	r3, [r7, #30]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	8bfb      	ldrh	r3, [r7, #30]
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	2200      	movs	r2, #0
 800582a:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 800582c:	8bfb      	ldrh	r3, [r7, #30]
 800582e:	3301      	adds	r3, #1
 8005830:	83fb      	strh	r3, [r7, #30]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8a9b      	ldrh	r3, [r3, #20]
 8005836:	8bfa      	ldrh	r2, [r7, #30]
 8005838:	429a      	cmp	r2, r3
 800583a:	d3e8      	bcc.n	800580e <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	807b      	strh	r3, [r7, #2]
 8005852:	4613      	mov	r3, r2
 8005854:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	899b      	ldrh	r3, [r3, #12]
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005860:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005864:	e038      	b.n	80058d8 <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 8005866:	883b      	ldrh	r3, [r7, #0]
 8005868:	2b06      	cmp	r3, #6
 800586a:	d902      	bls.n	8005872 <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 800586c:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005870:	e032      	b.n	80058d8 <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 8005872:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	883a      	ldrh	r2, [r7, #0]
 8005880:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	887b      	ldrh	r3, [r7, #2]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005890:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8005892:	2300      	movs	r3, #0
 8005894:	81fb      	strh	r3, [r7, #14]
 8005896:	e019      	b.n	80058cc <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	89fa      	ldrh	r2, [r7, #14]
 800589e:	8879      	ldrh	r1, [r7, #2]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8a1 	bl	80059e8 <phKeyStore_Sw_GetKeyValuePtrPos>
 80058a6:	4603      	mov	r3, r0
 80058a8:	81bb      	strh	r3, [r7, #12]
 80058aa:	89bb      	ldrh	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <phKeyStore_Sw_FormatKeyEntry+0x6e>
 80058b0:	89bb      	ldrh	r3, [r7, #12]
 80058b2:	e011      	b.n	80058d8 <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2220      	movs	r2, #32
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f017 fc01 	bl	801d0c8 <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	3301      	adds	r3, #1
 80058ca:	81fb      	strh	r3, [r7, #14]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	89db      	ldrh	r3, [r3, #14]
 80058d0:	89fa      	ldrh	r2, [r7, #14]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3e0      	bcc.n	8005898 <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	817b      	strh	r3, [r7, #10]
 80058f2:	460b      	mov	r3, r1
 80058f4:	813b      	strh	r3, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 80058fa:	f107 0310 	add.w	r3, r7, #16
 80058fe:	893a      	ldrh	r2, [r7, #8]
 8005900:	8979      	ldrh	r1, [r7, #10]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f827 	bl	8005956 <phKeyStore_Sw_GetKeyValuePtrVersion>
 8005908:	4603      	mov	r3, r0
 800590a:	82fb      	strh	r3, [r7, #22]
 800590c:	8afb      	ldrh	r3, [r7, #22]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <phKeyStore_Sw_SetKey+0x36>
 8005912:	8afb      	ldrh	r3, [r7, #22]
 8005914:	e01b      	b.n	800594e <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	897b      	ldrh	r3, [r7, #10]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	429a      	cmp	r2, r3
 8005926:	d002      	beq.n	800592e <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005928:	f24e 2321 	movw	r3, #57889	@ 0xe221
 800592c:	e00f      	b.n	800594e <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	461c      	mov	r4, r3
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f88d 	bl	8005a54 <phKeyStore_GetKeySize>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005940:	4620      	mov	r0, r4
 8005942:	f017 fc40 	bl	801d1c6 <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800594a:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd90      	pop	{r4, r7, pc}

08005956 <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	817b      	strh	r3, [r7, #10]
 8005964:	4613      	mov	r3, r2
 8005966:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	899b      	ldrh	r3, [r3, #12]
 8005972:	897a      	ldrh	r2, [r7, #10]
 8005974:	429a      	cmp	r2, r3
 8005976:	d302      	bcc.n	800597e <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005978:	f24e 2321 	movw	r3, #57889	@ 0xe221
 800597c:	e02e      	b.n	80059dc <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 800597e:	2300      	movs	r3, #0
 8005980:	82fb      	strh	r3, [r7, #22]
 8005982:	e01b      	b.n	80059bc <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	89db      	ldrh	r3, [r3, #14]
 800598c:	8979      	ldrh	r1, [r7, #10]
 800598e:	fb11 f303 	smulbb	r3, r1, r3
 8005992:	b29b      	uxth	r3, r3
 8005994:	4619      	mov	r1, r3
 8005996:	8afb      	ldrh	r3, [r7, #22]
 8005998:	440b      	add	r3, r1
 800599a:	4619      	mov	r1, r3
 800599c:	460b      	mov	r3, r1
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	440b      	add	r3, r1
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	8c1b      	ldrh	r3, [r3, #32]
 80059b0:	893a      	ldrh	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d008      	beq.n	80059c8 <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 80059b6:	8afb      	ldrh	r3, [r7, #22]
 80059b8:	3301      	adds	r3, #1
 80059ba:	82fb      	strh	r3, [r7, #22]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	89db      	ldrh	r3, [r3, #14]
 80059c0:	8afa      	ldrh	r2, [r7, #22]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3de      	bcc.n	8005984 <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 80059c6:	e000      	b.n	80059ca <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 80059c8:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	89db      	ldrh	r3, [r3, #14]
 80059ce:	8afa      	ldrh	r2, [r7, #22]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d102      	bne.n	80059da <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 80059d4:	f24e 2321 	movw	r3, #57889	@ 0xe221
 80059d8:	e000      	b.n	80059dc <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	4613      	mov	r3, r2
 80059f8:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	899b      	ldrh	r3, [r3, #12]
 8005a04:	897a      	ldrh	r2, [r7, #10]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a0a:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a0e:	e01b      	b.n	8005a48 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	89db      	ldrh	r3, [r3, #14]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8005a1a:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8005a1e:	e013      	b.n	8005a48 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	89db      	ldrh	r3, [r3, #14]
 8005a28:	8979      	ldrh	r1, [r7, #10]
 8005a2a:	fb11 f303 	smulbb	r3, r1, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	440b      	add	r3, r1
 8005a36:	4619      	mov	r1, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	440b      	add	r3, r1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	441a      	add	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d81b      	bhi.n	8005a9c <phKeyStore_GetKeySize+0x48>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <phKeyStore_GetKeySize+0x18>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005a8d 	.word	0x08005a8d
 8005a7c:	08005a91 	.word	0x08005a91
 8005a80:	08005a95 	.word	0x08005a95
 8005a84:	08005a89 	.word	0x08005a89
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8005a88:	230c      	movs	r3, #12
 8005a8a:	e008      	b.n	8005a9e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	e006      	b.n	8005a9e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 8005a90:	2310      	movs	r3, #16
 8005a92:	e004      	b.n	8005a9e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 8005a94:	2318      	movs	r3, #24
 8005a96:	e002      	b.n	8005a9e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8005a98:	2320      	movs	r3, #32
 8005a9a:	e000      	b.n	8005a9e <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8005a9c:	2300      	movs	r3, #0
    }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop

08005aac <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e00a      	b.n	8005ad4 <phNfcLib_SetContext+0x28>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a07      	ldr	r2, [pc, #28]	@ (8005ae0 <phNfcLib_SetContext+0x34>)
 8005ac4:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	461a      	mov	r2, r3
 8005acc:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <phNfcLib_SetContext+0x34>)
 8005ace:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000530 	.word	0x20000530

08005ae4 <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005aea:	2300      	movs	r3, #0
 8005aec:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 8005aee:	2301      	movs	r3, #1
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	4b3c      	ldr	r3, [pc, #240]	@ (8005be4 <phNfcLib_CommonLayer_Init+0x100>)
 8005af4:	9302      	str	r3, [sp, #8]
 8005af6:	2302      	movs	r3, #2
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <phNfcLib_CommonLayer_Init+0x104>)
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	2308      	movs	r3, #8
 8005b00:	4a3a      	ldr	r2, [pc, #232]	@ (8005bec <phNfcLib_CommonLayer_Init+0x108>)
 8005b02:	2118      	movs	r1, #24
 8005b04:	483a      	ldr	r0, [pc, #232]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b06:	f7ff fe0e 	bl	8005726 <phKeyStore_Sw_Init>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	80fb      	strh	r3, [r7, #6]
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d162      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 8005b14:	2206      	movs	r2, #6
 8005b16:	2101      	movs	r1, #1
 8005b18:	4835      	ldr	r0, [pc, #212]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b1a:	f7ff fe94 	bl	8005846 <phKeyStore_Sw_FormatKeyEntry>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	80fb      	strh	r3, [r7, #6]
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d158      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <phNfcLib_CommonLayer_Init+0x110>)
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2306      	movs	r3, #6
 8005b32:	2200      	movs	r2, #0
 8005b34:	2101      	movs	r1, #1
 8005b36:	482e      	ldr	r0, [pc, #184]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b38:	f7ff fed2 	bl	80058e0 <phKeyStore_Sw_SetKey>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	80fb      	strh	r3, [r7, #6]
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d149      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005b46:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b48:	2140      	movs	r1, #64	@ 0x40
 8005b4a:	482b      	ldr	r0, [pc, #172]	@ (8005bf8 <phNfcLib_CommonLayer_Init+0x114>)
 8005b4c:	f7fc fff3 	bl	8002b36 <phCryptoSym_Sw_Init>
 8005b50:	4603      	mov	r3, r0
 8005b52:	80fb      	strh	r3, [r7, #6]
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d13f      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005b5a:	4a25      	ldr	r2, [pc, #148]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b5c:	2140      	movs	r1, #64	@ 0x40
 8005b5e:	4827      	ldr	r0, [pc, #156]	@ (8005bfc <phNfcLib_CommonLayer_Init+0x118>)
 8005b60:	f7fc ffe9 	bl	8002b36 <phCryptoSym_Sw_Init>
 8005b64:	4603      	mov	r3, r0
 8005b66:	80fb      	strh	r3, [r7, #6]
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d135      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005b6e:	4a20      	ldr	r2, [pc, #128]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005b70:	2140      	movs	r1, #64	@ 0x40
 8005b72:	4823      	ldr	r0, [pc, #140]	@ (8005c00 <phNfcLib_CommonLayer_Init+0x11c>)
 8005b74:	f7fc ffdf 	bl	8002b36 <phCryptoSym_Sw_Init>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	80fb      	strh	r3, [r7, #6]
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12b      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 8005b82:	22ff      	movs	r2, #255	@ 0xff
 8005b84:	2100      	movs	r1, #0
 8005b86:	481f      	ldr	r0, [pc, #124]	@ (8005c04 <phNfcLib_CommonLayer_Init+0x120>)
 8005b88:	f017 fa9e 	bl	801d0c8 <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 8005b8c:	22ff      	movs	r2, #255	@ 0xff
 8005b8e:	491d      	ldr	r1, [pc, #116]	@ (8005c04 <phNfcLib_CommonLayer_Init+0x120>)
 8005b90:	481d      	ldr	r0, [pc, #116]	@ (8005c08 <phNfcLib_CommonLayer_Init+0x124>)
 8005b92:	f000 fc0f 	bl	80063b4 <phTMIUtils_Init>
 8005b96:	4603      	mov	r3, r0
 8005b98:	80fb      	strh	r3, [r7, #6]
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11c      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8005ba0:	4a13      	ldr	r2, [pc, #76]	@ (8005bf0 <phNfcLib_CommonLayer_Init+0x10c>)
 8005ba2:	2140      	movs	r1, #64	@ 0x40
 8005ba4:	4819      	ldr	r0, [pc, #100]	@ (8005c0c <phNfcLib_CommonLayer_Init+0x128>)
 8005ba6:	f7fc ffc6 	bl	8002b36 <phCryptoSym_Sw_Init>
 8005baa:	4603      	mov	r3, r0
 8005bac:	80fb      	strh	r3, [r7, #6]
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d112      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 8005bb4:	4a15      	ldr	r2, [pc, #84]	@ (8005c0c <phNfcLib_CommonLayer_Init+0x128>)
 8005bb6:	2120      	movs	r1, #32
 8005bb8:	4815      	ldr	r0, [pc, #84]	@ (8005c10 <phNfcLib_CommonLayer_Init+0x12c>)
 8005bba:	f7fc fcd3 	bl	8002564 <phCryptoRng_Sw_Init>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d108      	bne.n	8005bda <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 8005bc8:	2208      	movs	r2, #8
 8005bca:	4912      	ldr	r1, [pc, #72]	@ (8005c14 <phNfcLib_CommonLayer_Init+0x130>)
 8005bcc:	4810      	ldr	r0, [pc, #64]	@ (8005c10 <phNfcLib_CommonLayer_Init+0x12c>)
 8005bce:	f7fc ff79 	bl	8002ac4 <phCryptoRng_Seed>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	80fb      	strh	r3, [r7, #6]
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 8005bda:	88fb      	ldrh	r3, [r7, #6]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20001784 	.word	0x20001784
 8005be8:	20001564 	.word	0x20001564
 8005bec:	20001544 	.word	0x20001544
 8005bf0:	200006cc 	.word	0x200006cc
 8005bf4:	2000000c 	.word	0x2000000c
 8005bf8:	20000cd0 	.word	0x20000cd0
 8005bfc:	20000d10 	.word	0x20000d10
 8005c00:	20000d50 	.word	0x20000d50
 8005c04:	20001160 	.word	0x20001160
 8005c08:	200014f0 	.word	0x200014f0
 8005c0c:	20001504 	.word	0x20001504
 8005c10:	20000d90 	.word	0x20000d90
 8005c14:	20001158 	.word	0x20001158

08005c18 <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 8005c22:	4a31      	ldr	r2, [pc, #196]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c24:	2118      	movs	r1, #24
 8005c26:	4831      	ldr	r0, [pc, #196]	@ (8005cec <phNfcLib_PAL_Init+0xd4>)
 8005c28:	f00d f80a 	bl	8012c40 <phpalI14443p3a_Sw_Init>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	80fb      	strh	r3, [r7, #6]
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d152      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c38:	212c      	movs	r1, #44	@ 0x2c
 8005c3a:	482d      	ldr	r0, [pc, #180]	@ (8005cf0 <phNfcLib_PAL_Init+0xd8>)
 8005c3c:	f00d fe00 	bl	8013840 <phpalI14443p3b_Sw_Init>
 8005c40:	4603      	mov	r3, r0
 8005c42:	80fb      	strh	r3, [r7, #6]
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d148      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 8005c4a:	4a27      	ldr	r2, [pc, #156]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c4c:	2114      	movs	r1, #20
 8005c4e:	4829      	ldr	r0, [pc, #164]	@ (8005cf4 <phNfcLib_PAL_Init+0xdc>)
 8005c50:	f00e fd84 	bl	801475c <phpalI14443p4a_Sw_Init>
 8005c54:	4603      	mov	r3, r0
 8005c56:	80fb      	strh	r3, [r7, #6]
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d13e      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 8005c5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c60:	2114      	movs	r1, #20
 8005c62:	4825      	ldr	r0, [pc, #148]	@ (8005cf8 <phNfcLib_PAL_Init+0xe0>)
 8005c64:	f00e fc60 	bl	8014528 <phpalI14443p4_Sw_Init>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	80fb      	strh	r3, [r7, #6]
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d134      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 8005c72:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <phNfcLib_PAL_Init+0xe0>)
 8005c74:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c76:	210c      	movs	r1, #12
 8005c78:	4820      	ldr	r0, [pc, #128]	@ (8005cfc <phNfcLib_PAL_Init+0xe4>)
 8005c7a:	f00f fd31 	bl	80156e0 <phpalMifare_Sw_Init>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	80fb      	strh	r3, [r7, #6]
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d129      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8005c88:	4a17      	ldr	r2, [pc, #92]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c8a:	2120      	movs	r1, #32
 8005c8c:	481c      	ldr	r0, [pc, #112]	@ (8005d00 <phNfcLib_PAL_Init+0xe8>)
 8005c8e:	f00c fd7d 	bl	801278c <phpalFelica_Sw_Init>
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11f      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 8005c9c:	4a12      	ldr	r2, [pc, #72]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005c9e:	211c      	movs	r1, #28
 8005ca0:	4818      	ldr	r0, [pc, #96]	@ (8005d04 <phNfcLib_PAL_Init+0xec>)
 8005ca2:	f00f fd46 	bl	8015732 <phpalSli15693_Sw_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	80fb      	strh	r3, [r7, #6]
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d115      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8005cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005cb2:	210c      	movs	r1, #12
 8005cb4:	4814      	ldr	r0, [pc, #80]	@ (8005d08 <phNfcLib_PAL_Init+0xf0>)
 8005cb6:	f00f fb2c 	bl	8015312 <phpalI18000p3m3_Sw_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	80fb      	strh	r3, [r7, #6]
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10b      	bne.n	8005cdc <phNfcLib_PAL_Init+0xc4>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 8005cc4:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <phNfcLib_PAL_Init+0xf4>)
 8005cc6:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <phNfcLib_PAL_Init+0xd0>)
 8005ccc:	2134      	movs	r1, #52	@ 0x34
 8005cce:	4810      	ldr	r0, [pc, #64]	@ (8005d10 <phNfcLib_PAL_Init+0xf8>)
 8005cd0:	f00f fa78 	bl	80151c4 <phpalI14443p4mC_Sw_Init>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	80fb      	strh	r3, [r7, #6]
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000538 	.word	0x20000538
 8005cec:	200006e8 	.word	0x200006e8
 8005cf0:	20000700 	.word	0x20000700
 8005cf4:	2000072c 	.word	0x2000072c
 8005cf8:	20000740 	.word	0x20000740
 8005cfc:	200007d4 	.word	0x200007d4
 8005d00:	2000077c 	.word	0x2000077c
 8005d04:	20000754 	.word	0x20000754
 8005d08:	20000770 	.word	0x20000770
 8005d0c:	20000530 	.word	0x20000530
 8005d10:	2000079c 	.word	0x2000079c

08005d14 <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 8005d1e:	4a7b      	ldr	r2, [pc, #492]	@ (8005f0c <phNfcLib_AL_Init+0x1f8>)
 8005d20:	210c      	movs	r1, #12
 8005d22:	487b      	ldr	r0, [pc, #492]	@ (8005f10 <phNfcLib_AL_Init+0x1fc>)
 8005d24:	f005 f92f 	bl	800af86 <phalFelica_Sw_Init>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	80fb      	strh	r3, [r7, #6]
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f040 80e6 	bne.w	8005f00 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 8005d34:	4b77      	ldr	r3, [pc, #476]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005d36:	4a78      	ldr	r2, [pc, #480]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005d38:	210c      	movs	r1, #12
 8005d3a:	4878      	ldr	r0, [pc, #480]	@ (8005f1c <phNfcLib_AL_Init+0x208>)
 8005d3c:	f005 fd61 	bl	800b802 <phalMfc_Sw_Init>
 8005d40:	4603      	mov	r3, r0
 8005d42:	80fb      	strh	r3, [r7, #6]
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f040 80da 	bne.w	8005f00 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8005d4c:	4b74      	ldr	r3, [pc, #464]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	2300      	movs	r3, #0
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4b6f      	ldr	r3, [pc, #444]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005d56:	4a70      	ldr	r2, [pc, #448]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005d58:	211c      	movs	r1, #28
 8005d5a:	4872      	ldr	r0, [pc, #456]	@ (8005f24 <phNfcLib_AL_Init+0x210>)
 8005d5c:	f006 f851 	bl	800be02 <phalMful_Sw_Init>
 8005d60:	4603      	mov	r3, r0
 8005d62:	80fb      	strh	r3, [r7, #6]
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 80ca 	bne.w	8005f00 <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8005d6c:	4b6e      	ldr	r3, [pc, #440]	@ (8005f28 <phNfcLib_AL_Init+0x214>)
 8005d6e:	9302      	str	r3, [sp, #8]
 8005d70:	4b6b      	ldr	r3, [pc, #428]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4b66      	ldr	r3, [pc, #408]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005d7a:	4a67      	ldr	r2, [pc, #412]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005d7c:	2168      	movs	r1, #104	@ 0x68
 8005d7e:	486b      	ldr	r0, [pc, #428]	@ (8005f2c <phNfcLib_AL_Init+0x218>)
 8005d80:	f005 fd68 	bl	800b854 <phalMfdf_Sw_Init>
 8005d84:	4603      	mov	r3, r0
 8005d86:	80fb      	strh	r3, [r7, #6]
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 80b8 	bne.w	8005f00 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 8005d90:	4b67      	ldr	r3, [pc, #412]	@ (8005f30 <phNfcLib_AL_Init+0x21c>)
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	4a67      	ldr	r2, [pc, #412]	@ (8005f34 <phNfcLib_AL_Init+0x220>)
 8005d96:	8812      	ldrh	r2, [r2, #0]
 8005d98:	9205      	str	r2, [sp, #20]
 8005d9a:	4a67      	ldr	r2, [pc, #412]	@ (8005f38 <phNfcLib_AL_Init+0x224>)
 8005d9c:	9204      	str	r2, [sp, #16]
 8005d9e:	9303      	str	r3, [sp, #12]
 8005da0:	4b66      	ldr	r3, [pc, #408]	@ (8005f3c <phNfcLib_AL_Init+0x228>)
 8005da2:	9302      	str	r3, [sp, #8]
 8005da4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	4b65      	ldr	r3, [pc, #404]	@ (8005f40 <phNfcLib_AL_Init+0x22c>)
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	4b59      	ldr	r3, [pc, #356]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005dae:	4a5a      	ldr	r2, [pc, #360]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005db0:	2154      	movs	r1, #84	@ 0x54
 8005db2:	4864      	ldr	r0, [pc, #400]	@ (8005f44 <phNfcLib_AL_Init+0x230>)
 8005db4:	f006 f95a 	bl	800c06c <phalVca_Sw_Init>
 8005db8:	4603      	mov	r3, r0
 8005dba:	80fb      	strh	r3, [r7, #6]
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 809e 	bne.w	8005f00 <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 8005dc4:	4b58      	ldr	r3, [pc, #352]	@ (8005f28 <phNfcLib_AL_Init+0x214>)
 8005dc6:	9305      	str	r3, [sp, #20]
 8005dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f44 <phNfcLib_AL_Init+0x230>)
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005f48 <phNfcLib_AL_Init+0x234>)
 8005dce:	9303      	str	r3, [sp, #12]
 8005dd0:	4b53      	ldr	r3, [pc, #332]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8005f4c <phNfcLib_AL_Init+0x238>)
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	4b59      	ldr	r3, [pc, #356]	@ (8005f40 <phNfcLib_AL_Init+0x22c>)
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005dde:	4a4e      	ldr	r2, [pc, #312]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005de0:	21b4      	movs	r1, #180	@ 0xb4
 8005de2:	485b      	ldr	r0, [pc, #364]	@ (8005f50 <phNfcLib_AL_Init+0x23c>)
 8005de4:	f005 fda0 	bl	800b928 <phalMfdfEVx_Sw_Init>
 8005de8:	4603      	mov	r3, r0
 8005dea:	80fb      	strh	r3, [r7, #6]
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 8086 	bne.w	8005f00 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8005df4:	4956      	ldr	r1, [pc, #344]	@ (8005f50 <phNfcLib_AL_Init+0x23c>)
 8005df6:	4853      	ldr	r0, [pc, #332]	@ (8005f44 <phNfcLib_AL_Init+0x230>)
 8005df8:	f006 faad 	bl	800c356 <phalVca_SetApplicationType>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	80fb      	strh	r3, [r7, #6]
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d17c      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 8005e06:	4b48      	ldr	r3, [pc, #288]	@ (8005f28 <phNfcLib_AL_Init+0x214>)
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f48 <phNfcLib_AL_Init+0x234>)
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	4b44      	ldr	r3, [pc, #272]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	4b4e      	ldr	r3, [pc, #312]	@ (8005f4c <phNfcLib_AL_Init+0x238>)
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	4b4a      	ldr	r3, [pc, #296]	@ (8005f40 <phNfcLib_AL_Init+0x22c>)
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005e1e:	21ac      	movs	r1, #172	@ 0xac
 8005e20:	484c      	ldr	r0, [pc, #304]	@ (8005f54 <phNfcLib_AL_Init+0x240>)
 8005e22:	f005 fe33 	bl	800ba8c <phalMfdfLight_Sw_Init>
 8005e26:	4603      	mov	r3, r0
 8005e28:	80fb      	strh	r3, [r7, #6]
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d167      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 8005e30:	4b44      	ldr	r3, [pc, #272]	@ (8005f44 <phNfcLib_AL_Init+0x230>)
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	4b44      	ldr	r3, [pc, #272]	@ (8005f48 <phNfcLib_AL_Init+0x234>)
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	4b47      	ldr	r3, [pc, #284]	@ (8005f58 <phNfcLib_AL_Init+0x244>)
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	4b38      	ldr	r3, [pc, #224]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	4b42      	ldr	r3, [pc, #264]	@ (8005f4c <phNfcLib_AL_Init+0x238>)
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	4b3e      	ldr	r3, [pc, #248]	@ (8005f40 <phNfcLib_AL_Init+0x22c>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4b32      	ldr	r3, [pc, #200]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005e4a:	4a33      	ldr	r2, [pc, #204]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005e4c:	2184      	movs	r1, #132	@ 0x84
 8005e4e:	4843      	ldr	r0, [pc, #268]	@ (8005f5c <phNfcLib_AL_Init+0x248>)
 8005e50:	f005 feda 	bl	800bc08 <phalMfpEVx_Sw_Init>
 8005e54:	4603      	mov	r3, r0
 8005e56:	80fb      	strh	r3, [r7, #6]
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d150      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8005e5e:	493f      	ldr	r1, [pc, #252]	@ (8005f5c <phNfcLib_AL_Init+0x248>)
 8005e60:	4838      	ldr	r0, [pc, #224]	@ (8005f44 <phNfcLib_AL_Init+0x230>)
 8005e62:	f006 fa78 	bl	800c356 <phalVca_SetApplicationType>
 8005e66:	4603      	mov	r3, r0
 8005e68:	80fb      	strh	r3, [r7, #6]
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d147      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 8005e70:	4b2d      	ldr	r3, [pc, #180]	@ (8005f28 <phNfcLib_AL_Init+0x214>)
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	4b2a      	ldr	r3, [pc, #168]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005e76:	9302      	str	r3, [sp, #8]
 8005e78:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <phNfcLib_AL_Init+0x238>)
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	4b30      	ldr	r3, [pc, #192]	@ (8005f40 <phNfcLib_AL_Init+0x22c>)
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4b24      	ldr	r3, [pc, #144]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005e82:	4a25      	ldr	r2, [pc, #148]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005e84:	21a8      	movs	r1, #168	@ 0xa8
 8005e86:	4836      	ldr	r0, [pc, #216]	@ (8005f60 <phNfcLib_AL_Init+0x24c>)
 8005e88:	f005 fc07 	bl	800b69a <phalMfNtag42XDna_Sw_Init>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	80fb      	strh	r3, [r7, #6]
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d134      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 8005e96:	4a33      	ldr	r2, [pc, #204]	@ (8005f64 <phNfcLib_AL_Init+0x250>)
 8005e98:	2110      	movs	r1, #16
 8005e9a:	4833      	ldr	r0, [pc, #204]	@ (8005f68 <phNfcLib_AL_Init+0x254>)
 8005e9c:	f005 ffec 	bl	800be78 <phalT1T_Sw_Init>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	80fb      	strh	r3, [r7, #6]
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d12a      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <phNfcLib_AL_Init+0x200>)
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	4b1c      	ldr	r3, [pc, #112]	@ (8005f20 <phNfcLib_AL_Init+0x20c>)
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f6c <phNfcLib_AL_Init+0x258>)
 8005eb6:	2120      	movs	r1, #32
 8005eb8:	482d      	ldr	r0, [pc, #180]	@ (8005f70 <phNfcLib_AL_Init+0x25c>)
 8005eba:	f005 f8cf 	bl	800b05c <phalICode_Sw_Init>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	80fb      	strh	r3, [r7, #6]
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11b      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 8005ec8:	4b26      	ldr	r3, [pc, #152]	@ (8005f64 <phNfcLib_AL_Init+0x250>)
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	4b28      	ldr	r3, [pc, #160]	@ (8005f70 <phNfcLib_AL_Init+0x25c>)
 8005ece:	9302      	str	r3, [sp, #8]
 8005ed0:	4b11      	ldr	r3, [pc, #68]	@ (8005f18 <phNfcLib_AL_Init+0x204>)
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f10 <phNfcLib_AL_Init+0x1fc>)
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <phNfcLib_AL_Init+0x210>)
 8005eda:	4a23      	ldr	r2, [pc, #140]	@ (8005f68 <phNfcLib_AL_Init+0x254>)
 8005edc:	2180      	movs	r1, #128	@ 0x80
 8005ede:	4825      	ldr	r0, [pc, #148]	@ (8005f74 <phNfcLib_AL_Init+0x260>)
 8005ee0:	f006 f874 	bl	800bfcc <phalTop_Sw_Init>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	80fb      	strh	r3, [r7, #6]
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 8005eee:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <phNfcLib_AL_Init+0x264>)
 8005ef0:	210c      	movs	r1, #12
 8005ef2:	4822      	ldr	r0, [pc, #136]	@ (8005f7c <phNfcLib_AL_Init+0x268>)
 8005ef4:	f005 f86f 	bl	800afd6 <phalI18000p3m3_Sw_Init>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	80fb      	strh	r3, [r7, #6]
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 8005f00:	88fb      	ldrh	r3, [r7, #6]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	2000077c 	.word	0x2000077c
 8005f10:	200007ec 	.word	0x200007ec
 8005f14:	200006cc 	.word	0x200006cc
 8005f18:	200007d4 	.word	0x200007d4
 8005f1c:	20000818 	.word	0x20000818
 8005f20:	20000d90 	.word	0x20000d90
 8005f24:	20000a70 	.word	0x20000a70
 8005f28:	20000538 	.word	0x20000538
 8005f2c:	20000824 	.word	0x20000824
 8005f30:	20000008 	.word	0x20000008
 8005f34:	2000000a 	.word	0x2000000a
 8005f38:	20001320 	.word	0x20001320
 8005f3c:	20001260 	.word	0x20001260
 8005f40:	20000cd0 	.word	0x20000cd0
 8005f44:	2000149c 	.word	0x2000149c
 8005f48:	200014f0 	.word	0x200014f0
 8005f4c:	20000d10 	.word	0x20000d10
 8005f50:	2000088c 	.word	0x2000088c
 8005f54:	20000940 	.word	0x20000940
 8005f58:	20000d50 	.word	0x20000d50
 8005f5c:	200009ec 	.word	0x200009ec
 8005f60:	20000a8c 	.word	0x20000a8c
 8005f64:	200006e8 	.word	0x200006e8
 8005f68:	20000b34 	.word	0x20000b34
 8005f6c:	20000754 	.word	0x20000754
 8005f70:	200007f8 	.word	0x200007f8
 8005f74:	20000b44 	.word	0x20000b44
 8005f78:	20000770 	.word	0x20000770
 8005f7c:	200007e0 	.word	0x200007e0

08005f80 <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 8005f86:	2300      	movs	r3, #0
 8005f88:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 8005f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80060bc <phNfcLib_Init+0x13c>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f040 808d 	bne.w	80060b2 <phNfcLib_Init+0x132>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 8005f98:	f7ff fda4 	bl	8005ae4 <phNfcLib_CommonLayer_Init>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	80fb      	strh	r3, [r7, #6]
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d159      	bne.n	800605a <phNfcLib_Init+0xda>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 8005fa6:	4b46      	ldr	r3, [pc, #280]	@ (80060c0 <phNfcLib_Init+0x140>)
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	4b44      	ldr	r3, [pc, #272]	@ (80060c4 <phNfcLib_Init+0x144>)
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <phNfcLib_Init+0x148>)
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4b43      	ldr	r3, [pc, #268]	@ (80060cc <phNfcLib_Init+0x14c>)
 8005fc0:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8005fc4:	4842      	ldr	r0, [pc, #264]	@ (80060d0 <phNfcLib_Init+0x150>)
 8005fc6:	f006 fa23 	bl	800c410 <phhalHw_Pn5180_Init>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	80fb      	strh	r3, [r7, #6]
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <phNfcLib_Init+0x58>
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	e06d      	b.n	80060b4 <phNfcLib_Init+0x134>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 8005fd8:	f7ff fe1e 	bl	8005c18 <phNfcLib_PAL_Init>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	80fb      	strh	r3, [r7, #6]
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d139      	bne.n	800605a <phNfcLib_Init+0xda>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 8005fe6:	f7ff fe95 	bl	8005d14 <phNfcLib_AL_Init>
 8005fea:	4603      	mov	r3, r0
 8005fec:	80fb      	strh	r3, [r7, #6]
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d132      	bne.n	800605a <phNfcLib_Init+0xda>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 8005ff4:	4a36      	ldr	r2, [pc, #216]	@ (80060d0 <phNfcLib_Init+0x150>)
 8005ff6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005ffa:	4836      	ldr	r0, [pc, #216]	@ (80060d4 <phNfcLib_Init+0x154>)
 8005ffc:	f000 fbf8 	bl	80067f0 <phacDiscLoop_Sw_Init>
 8006000:	4603      	mov	r3, r0
 8006002:	80fb      	strh	r3, [r7, #6]
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d127      	bne.n	800605a <phNfcLib_Init+0xda>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 800600a:	4b2d      	ldr	r3, [pc, #180]	@ (80060c0 <phNfcLib_Init+0x140>)
 800600c:	4a30      	ldr	r2, [pc, #192]	@ (80060d0 <phNfcLib_Init+0x150>)
 800600e:	f8c3 26bc 	str.w	r2, [r3, #1724]	@ 0x6bc

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 8006012:	4b2b      	ldr	r3, [pc, #172]	@ (80060c0 <phNfcLib_Init+0x140>)
 8006014:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <phNfcLib_Init+0x158>)
 8006016:	f8c3 26c0 	str.w	r2, [r3, #1728]	@ 0x6c0
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 800601a:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <phNfcLib_Init+0x140>)
 800601c:	4a2f      	ldr	r2, [pc, #188]	@ (80060dc <phNfcLib_Init+0x15c>)
 800601e:	f8c3 26c8 	str.w	r2, [r3, #1736]	@ 0x6c8
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 8006022:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <phNfcLib_Init+0x140>)
 8006024:	4a2e      	ldr	r2, [pc, #184]	@ (80060e0 <phNfcLib_Init+0x160>)
 8006026:	f8c3 26d0 	str.w	r2, [r3, #1744]	@ 0x6d0
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 800602a:	4b25      	ldr	r3, [pc, #148]	@ (80060c0 <phNfcLib_Init+0x140>)
 800602c:	4a2d      	ldr	r2, [pc, #180]	@ (80060e4 <phNfcLib_Init+0x164>)
 800602e:	f8c3 26cc 	str.w	r2, [r3, #1740]	@ 0x6cc
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 8006032:	4b23      	ldr	r3, [pc, #140]	@ (80060c0 <phNfcLib_Init+0x140>)
 8006034:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <phNfcLib_Init+0x168>)
 8006036:	f8c3 26c4 	str.w	r2, [r3, #1732]	@ 0x6c4
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 800603a:	4b21      	ldr	r3, [pc, #132]	@ (80060c0 <phNfcLib_Init+0x140>)
 800603c:	4a2b      	ldr	r2, [pc, #172]	@ (80060ec <phNfcLib_Init+0x16c>)
 800603e:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 8006042:	4b1f      	ldr	r3, [pc, #124]	@ (80060c0 <phNfcLib_Init+0x140>)
 8006044:	4a2a      	ldr	r2, [pc, #168]	@ (80060f0 <phNfcLib_Init+0x170>)
 8006046:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 800604a:	4b1d      	ldr	r3, [pc, #116]	@ (80060c0 <phNfcLib_Init+0x140>)
 800604c:	4a29      	ldr	r2, [pc, #164]	@ (80060f4 <phNfcLib_Init+0x174>)
 800604e:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <phNfcLib_Init+0x140>)
 8006054:	4a28      	ldr	r2, [pc, #160]	@ (80060f8 <phNfcLib_Init+0x178>)
 8006056:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <phNfcLib_Init+0xe6>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 8006060:	2310      	movs	r3, #16
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	e025      	b.n	80060b2 <phNfcLib_Init+0x132>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 8006066:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <phNfcLib_Init+0x13c>)
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 800606c:	4b13      	ldr	r3, [pc, #76]	@ (80060bc <phNfcLib_Init+0x13c>)
 800606e:	2200      	movs	r2, #0
 8006070:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 8006072:	4b12      	ldr	r3, [pc, #72]	@ (80060bc <phNfcLib_Init+0x13c>)
 8006074:	2200      	movs	r2, #0
 8006076:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 8006078:	4b10      	ldr	r3, [pc, #64]	@ (80060bc <phNfcLib_Init+0x13c>)
 800607a:	2201      	movs	r2, #1
 800607c:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 800607e:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <phNfcLib_Init+0x13c>)
 8006080:	2201      	movs	r2, #1
 8006082:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 8006084:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <phNfcLib_Init+0x13c>)
 8006086:	2200      	movs	r2, #0
 8006088:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <phNfcLib_Init+0x13c>)
 800608c:	2200      	movs	r2, #0
 800608e:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 8006090:	4b0a      	ldr	r3, [pc, #40]	@ (80060bc <phNfcLib_Init+0x13c>)
 8006092:	2200      	movs	r2, #0
 8006094:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <phNfcLib_Init+0x13c>)
 8006098:	22ff      	movs	r2, #255	@ 0xff
 800609a:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 800609e:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <phNfcLib_Init+0x140>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 80060a6:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <phNfcLib_Init+0x13c>)
 80060a8:	2208      	movs	r2, #8
 80060aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 80060ae:	2300      	movs	r3, #0
 80060b0:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 80060b2:	683b      	ldr	r3, [r7, #0]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000db0 	.word	0x20000db0
 80060c0:	20000530 	.word	0x20000530
 80060c4:	20000ef4 	.word	0x20000ef4
 80060c8:	20000dc8 	.word	0x20000dc8
 80060cc:	200006cc 	.word	0x200006cc
 80060d0:	20000538 	.word	0x20000538
 80060d4:	20000bc4 	.word	0x20000bc4
 80060d8:	200006e8 	.word	0x200006e8
 80060dc:	20000700 	.word	0x20000700
 80060e0:	2000072c 	.word	0x2000072c
 80060e4:	20000740 	.word	0x20000740
 80060e8:	2000077c 	.word	0x2000077c
 80060ec:	20000754 	.word	0x20000754
 80060f0:	20000770 	.word	0x20000770
 80060f4:	200007e0 	.word	0x200007e0
 80060f8:	20000b34 	.word	0x20000b34

080060fc <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 800610a:	4b8f      	ldr	r3, [pc, #572]	@ (8006348 <phNfcLib_GetDataParams+0x24c>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8112 	beq.w	8006338 <phNfcLib_GetDataParams+0x23c>
    {
        switch(wComponent & PH_COMP_MASK)
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800611a:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 800611e:	f000 8107 	beq.w	8006330 <phNfcLib_GetDataParams+0x234>
 8006122:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 8006126:	f300 8106 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800612a:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 800612e:	f000 80fc 	beq.w	800632a <phNfcLib_GetDataParams+0x22e>
 8006132:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8006136:	f300 80fe 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800613a:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 800613e:	f000 80ee 	beq.w	800631e <phNfcLib_GetDataParams+0x222>
 8006142:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 8006146:	f300 80f6 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800614a:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800614e:	f000 80e9 	beq.w	8006324 <phNfcLib_GetDataParams+0x228>
 8006152:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006156:	f300 80ee 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800615a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800615e:	f000 80db 	beq.w	8006318 <phNfcLib_GetDataParams+0x21c>
 8006162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006166:	f300 80e6 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800616a:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 800616e:	f000 80be 	beq.w	80062ee <phNfcLib_GetDataParams+0x1f2>
 8006172:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8006176:	f300 80de 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800617a:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800617e:	f000 80b0 	beq.w	80062e2 <phNfcLib_GetDataParams+0x1e6>
 8006182:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 8006186:	f300 80d6 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800618a:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 800618e:	f000 80ab 	beq.w	80062e8 <phNfcLib_GetDataParams+0x1ec>
 8006192:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 8006196:	f300 80ce 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 800619a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800619e:	f000 809d 	beq.w	80062dc <phNfcLib_GetDataParams+0x1e0>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061a6:	f300 80c6 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 80061aa:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80061ae:	f000 80ad 	beq.w	800630c <phNfcLib_GetDataParams+0x210>
 80061b2:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80061b6:	f300 80be 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 80061ba:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80061be:	f000 80a2 	beq.w	8006306 <phNfcLib_GetDataParams+0x20a>
 80061c2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80061c6:	f300 80b6 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 80061ca:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80061ce:	f000 8082 	beq.w	80062d6 <phNfcLib_GetDataParams+0x1da>
 80061d2:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80061d6:	f300 80ae 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 80061da:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80061de:	f000 8098 	beq.w	8006312 <phNfcLib_GetDataParams+0x216>
 80061e2:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80061e6:	f300 80a6 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 80061ea:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80061ee:	f000 8087 	beq.w	8006300 <phNfcLib_GetDataParams+0x204>
 80061f2:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 80061f6:	f300 809e 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 80061fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061fe:	d07c      	beq.n	80062fa <phNfcLib_GetDataParams+0x1fe>
 8006200:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006204:	f300 8097 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 8006208:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 800620c:	d072      	beq.n	80062f4 <phNfcLib_GetDataParams+0x1f8>
 800620e:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8006212:	f300 8090 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800621a:	d059      	beq.n	80062d0 <phNfcLib_GetDataParams+0x1d4>
 800621c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006220:	f300 8089 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 8006224:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006228:	d04f      	beq.n	80062ca <phNfcLib_GetDataParams+0x1ce>
 800622a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800622e:	f300 8082 	bgt.w	8006336 <phNfcLib_GetDataParams+0x23a>
 8006232:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8006236:	d042      	beq.n	80062be <phNfcLib_GetDataParams+0x1c2>
 8006238:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800623c:	dc7b      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 800623e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006242:	d039      	beq.n	80062b8 <phNfcLib_GetDataParams+0x1bc>
 8006244:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006248:	dc75      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 800624a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624e:	d039      	beq.n	80062c4 <phNfcLib_GetDataParams+0x1c8>
 8006250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006254:	dc6f      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 8006256:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800625a:	d02a      	beq.n	80062b2 <phNfcLib_GetDataParams+0x1b6>
 800625c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006260:	dc69      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 8006262:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006266:	d021      	beq.n	80062ac <phNfcLib_GetDataParams+0x1b0>
 8006268:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800626c:	dc63      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 800626e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006272:	d018      	beq.n	80062a6 <phNfcLib_GetDataParams+0x1aa>
 8006274:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006278:	dc5d      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627e:	d00f      	beq.n	80062a0 <phNfcLib_GetDataParams+0x1a4>
 8006280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006284:	dc57      	bgt.n	8006336 <phNfcLib_GetDataParams+0x23a>
 8006286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800628a:	d003      	beq.n	8006294 <phNfcLib_GetDataParams+0x198>
 800628c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006290:	d003      	beq.n	800629a <phNfcLib_GetDataParams+0x19e>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 8006292:	e050      	b.n	8006336 <phNfcLib_GetDataParams+0x23a>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 8006294:	4b2d      	ldr	r3, [pc, #180]	@ (800634c <phNfcLib_GetDataParams+0x250>)
 8006296:	60fb      	str	r3, [r7, #12]
            break;
 8006298:	e04e      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 800629a:	4b2d      	ldr	r3, [pc, #180]	@ (8006350 <phNfcLib_GetDataParams+0x254>)
 800629c:	60fb      	str	r3, [r7, #12]
            break;
 800629e:	e04b      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 80062a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006354 <phNfcLib_GetDataParams+0x258>)
 80062a2:	60fb      	str	r3, [r7, #12]
            break;
 80062a4:	e048      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 80062a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006358 <phNfcLib_GetDataParams+0x25c>)
 80062a8:	60fb      	str	r3, [r7, #12]
            break;
 80062aa:	e045      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <phNfcLib_GetDataParams+0x260>)
 80062ae:	60fb      	str	r3, [r7, #12]
            break;
 80062b0:	e042      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 80062b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006360 <phNfcLib_GetDataParams+0x264>)
 80062b4:	60fb      	str	r3, [r7, #12]
            break;
 80062b6:	e03f      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 80062b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006364 <phNfcLib_GetDataParams+0x268>)
 80062ba:	60fb      	str	r3, [r7, #12]
            break;
 80062bc:	e03c      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 80062be:	4b2a      	ldr	r3, [pc, #168]	@ (8006368 <phNfcLib_GetDataParams+0x26c>)
 80062c0:	60fb      	str	r3, [r7, #12]
            break;
 80062c2:	e039      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 80062c4:	4b29      	ldr	r3, [pc, #164]	@ (800636c <phNfcLib_GetDataParams+0x270>)
 80062c6:	60fb      	str	r3, [r7, #12]
            break;
 80062c8:	e036      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 80062ca:	4b29      	ldr	r3, [pc, #164]	@ (8006370 <phNfcLib_GetDataParams+0x274>)
 80062cc:	60fb      	str	r3, [r7, #12]
            break;
 80062ce:	e033      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 80062d0:	4b28      	ldr	r3, [pc, #160]	@ (8006374 <phNfcLib_GetDataParams+0x278>)
 80062d2:	60fb      	str	r3, [r7, #12]
            break;
 80062d4:	e030      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 80062d6:	4b28      	ldr	r3, [pc, #160]	@ (8006378 <phNfcLib_GetDataParams+0x27c>)
 80062d8:	60fb      	str	r3, [r7, #12]
            break;
 80062da:	e02d      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 80062dc:	4b27      	ldr	r3, [pc, #156]	@ (800637c <phNfcLib_GetDataParams+0x280>)
 80062de:	60fb      	str	r3, [r7, #12]
            break;
 80062e0:	e02a      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 80062e2:	4b27      	ldr	r3, [pc, #156]	@ (8006380 <phNfcLib_GetDataParams+0x284>)
 80062e4:	60fb      	str	r3, [r7, #12]
            break;
 80062e6:	e027      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 80062e8:	4b26      	ldr	r3, [pc, #152]	@ (8006384 <phNfcLib_GetDataParams+0x288>)
 80062ea:	60fb      	str	r3, [r7, #12]
            break;
 80062ec:	e024      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 80062ee:	4b26      	ldr	r3, [pc, #152]	@ (8006388 <phNfcLib_GetDataParams+0x28c>)
 80062f0:	60fb      	str	r3, [r7, #12]
            break;
 80062f2:	e021      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 80062f4:	4b25      	ldr	r3, [pc, #148]	@ (800638c <phNfcLib_GetDataParams+0x290>)
 80062f6:	60fb      	str	r3, [r7, #12]
            break;
 80062f8:	e01e      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 80062fa:	4b25      	ldr	r3, [pc, #148]	@ (8006390 <phNfcLib_GetDataParams+0x294>)
 80062fc:	60fb      	str	r3, [r7, #12]
            break;
 80062fe:	e01b      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 8006300:	4b24      	ldr	r3, [pc, #144]	@ (8006394 <phNfcLib_GetDataParams+0x298>)
 8006302:	60fb      	str	r3, [r7, #12]
            break;
 8006304:	e018      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 8006306:	4b24      	ldr	r3, [pc, #144]	@ (8006398 <phNfcLib_GetDataParams+0x29c>)
 8006308:	60fb      	str	r3, [r7, #12]
            break;
 800630a:	e015      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 800630c:	4b23      	ldr	r3, [pc, #140]	@ (800639c <phNfcLib_GetDataParams+0x2a0>)
 800630e:	60fb      	str	r3, [r7, #12]
            break;
 8006310:	e012      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 8006312:	4b23      	ldr	r3, [pc, #140]	@ (80063a0 <phNfcLib_GetDataParams+0x2a4>)
 8006314:	60fb      	str	r3, [r7, #12]
            break;
 8006316:	e00f      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 8006318:	4b22      	ldr	r3, [pc, #136]	@ (80063a4 <phNfcLib_GetDataParams+0x2a8>)
 800631a:	60fb      	str	r3, [r7, #12]
            break;
 800631c:	e00c      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sKeyStore;
 800631e:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <phNfcLib_GetDataParams+0x2ac>)
 8006320:	60fb      	str	r3, [r7, #12]
            break;
 8006322:	e009      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sCryptoSym;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
            break;
 8006328:	e006      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = (void *) PTR_sCryptoRng;
 800632a:	4b20      	ldr	r3, [pc, #128]	@ (80063ac <phNfcLib_GetDataParams+0x2b0>)
 800632c:	60fb      	str	r3, [r7, #12]
            break;
 800632e:	e003      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            pDataparam = &sTMI;
 8006330:	4b1f      	ldr	r3, [pc, #124]	@ (80063b0 <phNfcLib_GetDataParams+0x2b4>)
 8006332:	60fb      	str	r3, [r7, #12]
            break;
 8006334:	e000      	b.n	8006338 <phNfcLib_GetDataParams+0x23c>
            break;
 8006336:	bf00      	nop
        }
    }
    return pDataparam;
 8006338:	68fb      	ldr	r3, [r7, #12]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000db0 	.word	0x20000db0
 800634c:	20000538 	.word	0x20000538
 8006350:	200006e8 	.word	0x200006e8
 8006354:	20000700 	.word	0x20000700
 8006358:	2000072c 	.word	0x2000072c
 800635c:	20000740 	.word	0x20000740
 8006360:	200007d4 	.word	0x200007d4
 8006364:	20000754 	.word	0x20000754
 8006368:	20000770 	.word	0x20000770
 800636c:	2000077c 	.word	0x2000077c
 8006370:	2000079c 	.word	0x2000079c
 8006374:	20000818 	.word	0x20000818
 8006378:	20000824 	.word	0x20000824
 800637c:	2000088c 	.word	0x2000088c
 8006380:	20000940 	.word	0x20000940
 8006384:	200009ec 	.word	0x200009ec
 8006388:	20000a8c 	.word	0x20000a8c
 800638c:	20000a70 	.word	0x20000a70
 8006390:	200007ec 	.word	0x200007ec
 8006394:	200007f8 	.word	0x200007f8
 8006398:	20000b34 	.word	0x20000b34
 800639c:	20000b44 	.word	0x20000b44
 80063a0:	200007e0 	.word	0x200007e0
 80063a4:	20000bc4 	.word	0x20000bc4
 80063a8:	200006cc 	.word	0x200006cc
 80063ac:	20000d90 	.word	0x20000d90
 80063b0:	200014f0 	.word	0x200014f0

080063b4 <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <phTMIUtils_Init+0x16>
 80063c6:	2321      	movs	r3, #33	@ 0x21
 80063c8:	e018      	b.n	80063fc <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <phTMIUtils_Init+0x22>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80063d6:	f24e 5321 	movw	r3, #58657	@ 0xe521
 80063da:	e00f      	b.n	80063fc <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <phTMIUtils_ActivateTMICollection+0x1a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8006422:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8006426:	e02c      	b.n	8006482 <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	2b04      	cmp	r3, #4
 800642c:	d825      	bhi.n	800647a <phTMIUtils_ActivateTMICollection+0x72>
 800642e:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <phTMIUtils_ActivateTMICollection+0x2c>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006449 	.word	0x08006449
 8006438:	0800645d 	.word	0x0800645d
 800643c:	08006465 	.word	0x08006465
 8006440:	0800645d 	.word	0x0800645d
 8006444:	0800646d 	.word	0x0800646d
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	731a      	strb	r2, [r3, #12]
        break;
 800645a:	e011      	b.n	8006480 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	731a      	strb	r2, [r3, #12]
        break;
 8006462:	e00d      	b.n	8006480 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	731a      	strb	r2, [r3, #12]
        break;
 800646a:	e009      	b.n	8006480 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	611a      	str	r2, [r3, #16]
        break;
 8006478:	e002      	b.n	8006480 <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 800647a:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800647e:	e000      	b.n	8006482 <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6039      	str	r1, [r7, #0]
 8006498:	4611      	mov	r1, r2
 800649a:	461a      	mov	r2, r3
 800649c:	4603      	mov	r3, r0
 800649e:	71fb      	strb	r3, [r7, #7]
 80064a0:	460b      	mov	r3, r1
 80064a2:	80bb      	strh	r3, [r7, #4]
 80064a4:	4613      	mov	r3, r2
 80064a6:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <phTools_DecodeParity+0x24>
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d102      	bne.n	80064ba <phTools_DecodeParity+0x2a>
 80064b4:	79bb      	ldrb	r3, [r7, #6]
 80064b6:	2b07      	cmp	r3, #7
 80064b8:	d902      	bls.n	80064c0 <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 80064ba:	f24e 3321 	movw	r3, #58145	@ 0xe321
 80064be:	e0fa      	b.n	80066b6 <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 80064c0:	88bb      	ldrh	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10d      	bne.n	80064e2 <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 80064c6:	79bb      	ldrb	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	2200      	movs	r2, #0
 80064d0:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 80064d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 80064d8:	2300      	movs	r3, #0
 80064da:	e0ec      	b.n	80066b6 <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 80064dc:	f24e 3321 	movw	r3, #58145	@ 0xe321
 80064e0:	e0e9      	b.n	80066b6 <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 80064e2:	79bb      	ldrb	r3, [r7, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d111      	bne.n	800650c <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 80064e8:	88bb      	ldrh	r3, [r7, #4]
 80064ea:	4a75      	ldr	r2, [pc, #468]	@ (80066c0 <phTools_DecodeParity+0x230>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 80064f4:	88ba      	ldrh	r2, [r7, #4]
 80064f6:	4b72      	ldr	r3, [pc, #456]	@ (80066c0 <phTools_DecodeParity+0x230>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	0859      	lsrs	r1, r3, #1
 80064fe:	460b      	mov	r3, r1
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	440b      	add	r3, r1
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	73fb      	strb	r3, [r7, #15]
 800650a:	e012      	b.n	8006532 <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 800650c:	88bb      	ldrh	r3, [r7, #4]
 800650e:	3b01      	subs	r3, #1
 8006510:	4a6b      	ldr	r2, [pc, #428]	@ (80066c0 <phTools_DecodeParity+0x230>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 800651a:	88bb      	ldrh	r3, [r7, #4]
 800651c:	1e59      	subs	r1, r3, #1
 800651e:	4b68      	ldr	r3, [pc, #416]	@ (80066c0 <phTools_DecodeParity+0x230>)
 8006520:	fba3 2301 	umull	r2, r3, r3, r1
 8006524:	085a      	lsrs	r2, r3, #1
 8006526:	4613      	mov	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	1aca      	subs	r2, r1, r3
 800652e:	4613      	mov	r3, r2
 8006530:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 8006532:	8a3b      	ldrh	r3, [r7, #16]
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	b29a      	uxth	r2, r3
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	b29b      	uxth	r3, r3
 800653c:	4413      	add	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 8006544:	7bfa      	ldrb	r2, [r7, #15]
 8006546:	79bb      	ldrb	r3, [r7, #6]
 8006548:	429a      	cmp	r2, r3
 800654a:	d905      	bls.n	8006558 <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 8006558:	79bb      	ldrb	r3, [r7, #6]
 800655a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800655c:	8812      	ldrh	r2, [r2, #0]
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	b2da      	uxtb	r2, r3
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	8c3a      	ldrh	r2, [r7, #32]
 8006586:	429a      	cmp	r2, r3
 8006588:	d205      	bcs.n	8006596 <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	2200      	movs	r2, #0
 800658e:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 8006590:	f24e 3304 	movw	r3, #58116	@ 0xe304
 8006594:	e08f      	b.n	80066b6 <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 800659e:	2307      	movs	r3, #7
 80065a0:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 80065a2:	e068      	b.n	8006676 <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 80065a4:	8afb      	ldrh	r3, [r7, #22]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	7cfb      	ldrb	r3, [r7, #19]
 80065b0:	f1c3 0307 	rsb	r3, r3, #7
 80065b4:	fa42 f103 	asr.w	r1, r2, r3
 80065b8:	8abb      	ldrh	r3, [r7, #20]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065bc:	4413      	add	r3, r2
 80065be:	b2ca      	uxtb	r2, r1
 80065c0:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 80065c2:	8afb      	ldrh	r3, [r7, #22]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	88bb      	ldrh	r3, [r7, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d243      	bcs.n	8006654 <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 80065cc:	8abb      	ldrh	r3, [r7, #20]
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	4413      	add	r3, r2
 80065d2:	7819      	ldrb	r1, [r3, #0]
 80065d4:	8afb      	ldrh	r3, [r7, #22]
 80065d6:	3301      	adds	r3, #1
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	4413      	add	r3, r2
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	7cfb      	ldrb	r3, [r7, #19]
 80065e2:	3301      	adds	r3, #1
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8abb      	ldrh	r3, [r7, #20]
 80065ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065ee:	4403      	add	r3, r0
 80065f0:	430a      	orrs	r2, r1
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 80065fe:	8abb      	ldrh	r3, [r7, #20]
 8006600:	3301      	adds	r3, #1
 8006602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	4293      	cmp	r3, r2
 8006608:	d224      	bcs.n	8006654 <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 800660a:	8abb      	ldrh	r3, [r7, #20]
 800660c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660e:	4413      	add	r3, r2
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	79fa      	ldrb	r2, [r7, #7]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f854 	bl	80066c4 <phTools_CalcParity>
 800661c:	4603      	mov	r3, r0
 800661e:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 8006620:	8afb      	ldrh	r3, [r7, #22]
 8006622:	3301      	adds	r3, #1
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	4413      	add	r3, r2
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	7cfb      	ldrb	r3, [r7, #19]
 800662c:	f1c3 0307 	rsb	r3, r3, #7
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	b2db      	uxtb	r3, r3
 8006638:	4013      	ands	r3, r2
 800663a:	b2db      	uxtb	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	7bba      	ldrb	r2, [r7, #14]
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	f1c3 0307 	rsb	r3, r3, #7
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 800664e:	f24e 3302 	movw	r3, #58114	@ 0xe302
 8006652:	e030      	b.n	80066b6 <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 8006654:	7cfb      	ldrb	r3, [r7, #19]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 800665a:	2308      	movs	r3, #8
 800665c:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 800665e:	8afb      	ldrh	r3, [r7, #22]
 8006660:	3301      	adds	r3, #1
 8006662:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 8006664:	8abb      	ldrh	r3, [r7, #20]
 8006666:	3301      	adds	r3, #1
 8006668:	82bb      	strh	r3, [r7, #20]
 800666a:	8afb      	ldrh	r3, [r7, #22]
 800666c:	3301      	adds	r3, #1
 800666e:	82fb      	strh	r3, [r7, #22]
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	3b01      	subs	r3, #1
 8006674:	74fb      	strb	r3, [r7, #19]
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	8aba      	ldrh	r2, [r7, #20]
 800667c:	429a      	cmp	r2, r3
 800667e:	d391      	bcc.n	80065a4 <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	3b01      	subs	r3, #1
 800668e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006690:	4413      	add	r3, r2
 8006692:	7819      	ldrb	r1, [r3, #0]
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	f1c3 0308 	rsb	r3, r3, #8
 800669c:	22ff      	movs	r2, #255	@ 0xff
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066ac:	4403      	add	r3, r0
 80066ae:	400a      	ands	r2, r1
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	38e38e39 	.word	0x38e38e39

080066c4 <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	460a      	mov	r2, r1
 80066ce:	71fb      	strb	r3, [r7, #7]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 80066d4:	79bb      	ldrb	r3, [r7, #6]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 80066da:	2300      	movs	r3, #0
 80066dc:	73bb      	strb	r3, [r7, #14]
 80066de:	e001      	b.n	80066e4 <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e00f      	b.n	800670a <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2201      	movs	r2, #1
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	4013      	ands	r3, r2
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <phTools_CalcParity+0x40>
        {
            ++bParity;
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	3301      	adds	r3, #1
 8006702:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	3301      	adds	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	2b07      	cmp	r3, #7
 800670e:	d9ec      	bls.n	80066ea <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	4053      	eors	r3, r2
 800673a:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 800673c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	b25a      	sxtb	r2, r3
 8006744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006748:	4053      	eors	r3, r2
 800674a:	b25b      	sxtb	r3, r3
 800674c:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	b29b      	uxth	r3, r3
 8006756:	b21a      	sxth	r2, r3
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	b21b      	sxth	r3, r3
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	b21b      	sxth	r3, r3
 8006760:	4053      	eors	r3, r2
 8006762:	b21a      	sxth	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	b21b      	sxth	r3, r3
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	b21b      	sxth	r3, r3
 800676c:	4053      	eors	r3, r2
 800676e:	b21a      	sxth	r2, r3
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	b2db      	uxtb	r3, r3
 8006776:	b21b      	sxth	r3, r3
 8006778:	4053      	eors	r3, r2
 800677a:	b21b      	sxth	r3, r3
 800677c:	b29a      	uxth	r2, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	801a      	strh	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 800679e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067a2:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	60fa      	str	r2, [r7, #12]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 80067ae:	f107 0214 	add.w	r2, r7, #20
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ffb4 	bl	8006724 <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3b01      	subs	r3, #1
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ed      	bne.n	80067a4 <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 80067c8:	8abb      	ldrh	r3, [r7, #20]
 80067ca:	43db      	mvns	r3, r3
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 80067d0:	8abb      	ldrh	r3, [r7, #20]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 80067d8:	8abb      	ldrh	r3, [r7, #20]
 80067da:	0a1b      	lsrs	r3, r3, #8
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3301      	adds	r3, #1
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	460b      	mov	r3, r1
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 80067fe:	897b      	ldrh	r3, [r7, #10]
 8006800:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8006804:	d002      	beq.n	800680c <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 8006806:	f244 0320 	movw	r3, #16416	@ 0x4020
 800680a:	e154      	b.n	8006ab6 <phacDiscLoop_Sw_Init+0x2c6>
    }

    PH_ASSERT_NULL(pDataParams);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <phacDiscLoop_Sw_Init+0x26>
 8006812:	2321      	movs	r3, #33	@ 0x21
 8006814:	e14f      	b.n	8006ab6 <phacDiscLoop_Sw_Init+0x2c6>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f244 0201 	movw	r2, #16385	@ 0x4001
 800681c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2222      	movs	r2, #34	@ 0x22
 800686c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a8c      	ldr	r2, [pc, #560]	@ (8006ac4 <phacDiscLoop_Sw_Init+0x2d4>)
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80068be:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2208      	movs	r2, #8
 80068ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80068e2:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	789b      	ldrb	r3, [r3, #2]
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	709a      	strb	r2, [r3, #2]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	795b      	ldrb	r3, [r3, #5]
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	799b      	ldrb	r3, [r3, #6]
 8006904:	f043 0301 	orr.w	r3, r3, #1
 8006908:	b2da      	uxtb	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800691a:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	789b      	ldrb	r3, [r3, #2]
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 800693c:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8006944:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	789b      	ldrb	r3, [r3, #2]
 800694a:	f043 030c 	orr.w	r3, r3, #12
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	709a      	strb	r2, [r3, #2]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	795b      	ldrb	r3, [r3, #5]
 8006958:	f043 0304 	orr.w	r3, r3, #4
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	795b      	ldrb	r3, [r3, #5]
 8006966:	f043 0308 	orr.w	r3, r3, #8
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	799b      	ldrb	r3, [r3, #6]
 8006974:	f043 0304 	orr.w	r3, r3, #4
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	799b      	ldrb	r3, [r3, #6]
 8006982:	f043 0308 	orr.w	r3, r3, #8
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8006998:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	789b      	ldrb	r3, [r3, #2]
 800699e:	f043 0310 	orr.w	r3, r3, #16
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069b4:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	789b      	ldrb	r3, [r3, #2]
 80069ba:	f043 0320 	orr.w	r3, r3, #32
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2208      	movs	r2, #8
 80069d0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2208      	movs	r2, #8
 8006a08:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	22ff      	movs	r2, #255	@ 0xff
 8006a40:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	22ff      	movs	r2, #255	@ 0xff
 8006a48:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8006a54:	2300      	movs	r3, #0
 8006a56:	75fb      	strb	r3, [r7, #23]
 8006a58:	e00d      	b.n	8006a76 <phacDiscLoop_Sw_Init+0x286>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8006a5a:	7dfa      	ldrb	r2, [r7, #23]
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	00da      	lsls	r2, r3, #3
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	188b      	adds	r3, r1, r2
 8006a6a:	3393      	adds	r3, #147	@ 0x93
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	3301      	adds	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0ee      	beq.n	8006a5a <phacDiscLoop_Sw_Init+0x26a>
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	0801ffb8 	.word	0x0801ffb8

08006ac8 <phacDiscLoop_Sw_Run>:

phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	2200      	movs	r2, #0
 8006ada:	215e      	movs	r1, #94	@ 0x5e
 8006adc:	4618      	mov	r0, r3
 8006ade:	f006 fbf3 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	81fb      	strh	r3, [r7, #14]
 8006ae6:	89fb      	ldrh	r3, [r7, #14]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <phacDiscLoop_Sw_Run+0x28>
 8006aec:	89fb      	ldrh	r3, [r7, #14]
 8006aee:	e0b9      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	2200      	movs	r2, #0
 8006af6:	2120      	movs	r1, #32
 8006af8:	4618      	mov	r0, r3
 8006afa:	f006 fbe5 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8006afe:	4603      	mov	r3, r0
 8006b00:	81fb      	strh	r3, [r7, #14]
 8006b02:	89fb      	ldrh	r3, [r7, #14]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <phacDiscLoop_Sw_Run+0x44>
 8006b08:	89fb      	ldrh	r3, [r7, #14]
 8006b0a:	e0ab      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <phacDiscLoop_Sw_Run+0x50>
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d07a      	beq.n	8006c0c <phacDiscLoop_Sw_Run+0x144>
 8006b16:	e0a3      	b.n	8006c60 <phacDiscLoop_Sw_Run+0x198>
    {
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7fdb      	ldrb	r3, [r3, #31]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d017      	beq.n	8006b50 <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	891b      	ldrh	r3, [r3, #8]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d113      	bne.n	8006b50 <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f008 fe47 	bl	800f7c0 <phhalHw_Pn5180_Lpcd>
 8006b32:	4603      	mov	r3, r0
 8006b34:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8006b36:	89fb      	ldrh	r3, [r7, #14]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8006b3e:	89fb      	ldrh	r3, [r7, #14]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d102      	bne.n	8006b4c <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 8006b46:	f244 0384 	movw	r3, #16516	@ 0x4084
 8006b4a:	e08b      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
 8006b4e:	e089      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
            }
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* Check for active poll configuration */
        if((0U != (pDataParams->bActPollTechCfg))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	78db      	ldrb	r3, [r3, #3]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d037      	beq.n	8006bc8 <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	891b      	ldrh	r3, [r3, #8]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d133      	bne.n	8006bc8 <phacDiscLoop_Sw_Run+0x100>
        {
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f855 	bl	8007c10 <phacDiscLoop_Sw_Int_ActivePollMode>
 8006b66:	4603      	mov	r3, r0
 8006b68:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8006b6a:	89fb      	ldrh	r3, [r7, #14]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b84      	cmp	r3, #132	@ 0x84
 8006b70:	d00f      	beq.n	8006b92 <phacDiscLoop_Sw_Run+0xca>
            {
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8006b72:	89fb      	ldrh	r3, [r7, #14]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b8c      	cmp	r3, #140	@ 0x8c
 8006b78:	d009      	beq.n	8006b8e <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8006b7e:	2b82      	cmp	r3, #130	@ 0x82
 8006b80:	d005      	beq.n	8006b8e <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	89fa      	ldrh	r2, [r7, #14]
 8006b86:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006b88:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006b8c:	e06a      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
                }
                return wDiscloopStatus;
 8006b8e:	89fb      	ldrh	r3, [r7, #14]
 8006b90:	e068      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	4618      	mov	r0, r3
 8006b98:	f006 faee 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	81fb      	strh	r3, [r7, #14]
 8006ba0:	89fb      	ldrh	r3, [r7, #14]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <phacDiscLoop_Sw_Run+0xe2>
 8006ba6:	89fb      	ldrh	r3, [r7, #14]
 8006ba8:	e05c      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8b9b      	ldrh	r3, [r3, #28]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f006 fb03 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	81fb      	strh	r3, [r7, #14]
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <phacDiscLoop_Sw_Run+0x100>
 8006bc4:	89fb      	ldrh	r3, [r7, #14]
 8006bc6:	e04d      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
        }

        /* Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	789b      	ldrb	r3, [r3, #2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d012      	beq.n	8006bf6 <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f84c 	bl	8007c6e <phacDiscLoop_Sw_Int_PollMode>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8006bda:	89fb      	ldrh	r3, [r7, #14]
 8006bdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006be4:	d005      	beq.n	8006bf2 <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	89fa      	ldrh	r2, [r7, #14]
 8006bea:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006bec:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006bf0:	e038      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8006bf2:	89fb      	ldrh	r3, [r7, #14]
 8006bf4:	e036      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8006c06:	f244 0384 	movw	r3, #16516	@ 0x4084
 8006c0a:	e02b      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
        }

    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	795b      	ldrb	r3, [r3, #5]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <phacDiscLoop_Sw_Run+0x154>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	799b      	ldrb	r3, [r3, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01e      	beq.n	8006c5a <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	4618      	mov	r0, r3
 8006c22:	f006 faa9 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 8006c26:	4603      	mov	r3, r0
 8006c28:	81fb      	strh	r3, [r7, #14]
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <phacDiscLoop_Sw_Run+0x16c>
 8006c30:	89fb      	ldrh	r3, [r7, #14]
 8006c32:	e017      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 ff8b 	bl	8007b50 <phacDiscLoop_Sw_Int_ListenMode>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
 8006c40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c48:	d005      	beq.n	8006c56 <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	89fa      	ldrh	r2, [r7, #14]
 8006c4e:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8006c50:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8006c54:	e006      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8006c56:	89fb      	ldrh	r3, [r7, #14]
 8006c58:	e004      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006c5a:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006c5e:	e001      	b.n	8006c64 <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006c60:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	807b      	strh	r3, [r7, #2]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 8006c84:	887b      	ldrh	r3, [r7, #2]
 8006c86:	2b94      	cmp	r3, #148	@ 0x94
 8006c88:	f200 83f0 	bhi.w	800746c <phacDiscLoop_Sw_SetConfig+0x800>
 8006c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <phacDiscLoop_Sw_SetConfig+0x28>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006f51 	.word	0x08006f51
 8006c98:	08006f59 	.word	0x08006f59
 8006c9c:	08006f61 	.word	0x08006f61
 8006ca0:	08006f79 	.word	0x08006f79
 8006ca4:	08006f91 	.word	0x08006f91
 8006ca8:	08006f99 	.word	0x08006f99
 8006cac:	08006fcb 	.word	0x08006fcb
 8006cb0:	0800746d 	.word	0x0800746d
 8006cb4:	0800746d 	.word	0x0800746d
 8006cb8:	0800746d 	.word	0x0800746d
 8006cbc:	0800746d 	.word	0x0800746d
 8006cc0:	0800746d 	.word	0x0800746d
 8006cc4:	0800746d 	.word	0x0800746d
 8006cc8:	0800746d 	.word	0x0800746d
 8006ccc:	0800746d 	.word	0x0800746d
 8006cd0:	0800746d 	.word	0x0800746d
 8006cd4:	080070dd 	.word	0x080070dd
 8006cd8:	080071c5 	.word	0x080071c5
 8006cdc:	080072e1 	.word	0x080072e1
 8006ce0:	080072fb 	.word	0x080072fb
 8006ce4:	080073ff 	.word	0x080073ff
 8006ce8:	0800746d 	.word	0x0800746d
 8006cec:	0800746d 	.word	0x0800746d
 8006cf0:	0800746d 	.word	0x0800746d
 8006cf4:	0800746d 	.word	0x0800746d
 8006cf8:	0800746d 	.word	0x0800746d
 8006cfc:	0800746d 	.word	0x0800746d
 8006d00:	0800746d 	.word	0x0800746d
 8006d04:	0800746d 	.word	0x0800746d
 8006d08:	0800746d 	.word	0x0800746d
 8006d0c:	0800746d 	.word	0x0800746d
 8006d10:	0800746d 	.word	0x0800746d
 8006d14:	0800746d 	.word	0x0800746d
 8006d18:	0800746d 	.word	0x0800746d
 8006d1c:	0800746d 	.word	0x0800746d
 8006d20:	0800746d 	.word	0x0800746d
 8006d24:	0800746d 	.word	0x0800746d
 8006d28:	0800746d 	.word	0x0800746d
 8006d2c:	0800746d 	.word	0x0800746d
 8006d30:	0800746d 	.word	0x0800746d
 8006d34:	0800746d 	.word	0x0800746d
 8006d38:	0800746d 	.word	0x0800746d
 8006d3c:	0800746d 	.word	0x0800746d
 8006d40:	0800746d 	.word	0x0800746d
 8006d44:	0800746d 	.word	0x0800746d
 8006d48:	0800746d 	.word	0x0800746d
 8006d4c:	0800746d 	.word	0x0800746d
 8006d50:	0800746d 	.word	0x0800746d
 8006d54:	080071df 	.word	0x080071df
 8006d58:	080071eb 	.word	0x080071eb
 8006d5c:	08007205 	.word	0x08007205
 8006d60:	0800721d 	.word	0x0800721d
 8006d64:	08007235 	.word	0x08007235
 8006d68:	08007241 	.word	0x08007241
 8006d6c:	08007269 	.word	0x08007269
 8006d70:	0800746d 	.word	0x0800746d
 8006d74:	0800746d 	.word	0x0800746d
 8006d78:	0800746d 	.word	0x0800746d
 8006d7c:	0800746d 	.word	0x0800746d
 8006d80:	0800746d 	.word	0x0800746d
 8006d84:	0800746d 	.word	0x0800746d
 8006d88:	0800746d 	.word	0x0800746d
 8006d8c:	0800746d 	.word	0x0800746d
 8006d90:	0800746d 	.word	0x0800746d
 8006d94:	08007139 	.word	0x08007139
 8006d98:	08007151 	.word	0x08007151
 8006d9c:	08007169 	.word	0x08007169
 8006da0:	08007175 	.word	0x08007175
 8006da4:	0800719d 	.word	0x0800719d
 8006da8:	0800746d 	.word	0x0800746d
 8006dac:	0800746d 	.word	0x0800746d
 8006db0:	0800746d 	.word	0x0800746d
 8006db4:	0800746d 	.word	0x0800746d
 8006db8:	0800746d 	.word	0x0800746d
 8006dbc:	0800746d 	.word	0x0800746d
 8006dc0:	0800746d 	.word	0x0800746d
 8006dc4:	0800746d 	.word	0x0800746d
 8006dc8:	0800746d 	.word	0x0800746d
 8006dcc:	0800746d 	.word	0x0800746d
 8006dd0:	0800746d 	.word	0x0800746d
 8006dd4:	0800746d 	.word	0x0800746d
 8006dd8:	0800746d 	.word	0x0800746d
 8006ddc:	0800746d 	.word	0x0800746d
 8006de0:	0800746d 	.word	0x0800746d
 8006de4:	0800746d 	.word	0x0800746d
 8006de8:	0800746d 	.word	0x0800746d
 8006dec:	0800746d 	.word	0x0800746d
 8006df0:	080072d5 	.word	0x080072d5
 8006df4:	0800746d 	.word	0x0800746d
 8006df8:	0800746d 	.word	0x0800746d
 8006dfc:	0800746d 	.word	0x0800746d
 8006e00:	0800746d 	.word	0x0800746d
 8006e04:	0800746d 	.word	0x0800746d
 8006e08:	0800746d 	.word	0x0800746d
 8006e0c:	0800746d 	.word	0x0800746d
 8006e10:	0800746d 	.word	0x0800746d
 8006e14:	08007315 	.word	0x08007315
 8006e18:	08007355 	.word	0x08007355
 8006e1c:	0800746d 	.word	0x0800746d
 8006e20:	0800746d 	.word	0x0800746d
 8006e24:	0800746d 	.word	0x0800746d
 8006e28:	0800746d 	.word	0x0800746d
 8006e2c:	0800746d 	.word	0x0800746d
 8006e30:	0800746d 	.word	0x0800746d
 8006e34:	0800746d 	.word	0x0800746d
 8006e38:	0800746d 	.word	0x0800746d
 8006e3c:	0800746d 	.word	0x0800746d
 8006e40:	0800746d 	.word	0x0800746d
 8006e44:	0800746d 	.word	0x0800746d
 8006e48:	0800746d 	.word	0x0800746d
 8006e4c:	0800746d 	.word	0x0800746d
 8006e50:	0800746d 	.word	0x0800746d
 8006e54:	08007419 	.word	0x08007419
 8006e58:	08007437 	.word	0x08007437
 8006e5c:	0800746d 	.word	0x0800746d
 8006e60:	0800746d 	.word	0x0800746d
 8006e64:	0800746d 	.word	0x0800746d
 8006e68:	0800746d 	.word	0x0800746d
 8006e6c:	0800746d 	.word	0x0800746d
 8006e70:	0800746d 	.word	0x0800746d
 8006e74:	0800746d 	.word	0x0800746d
 8006e78:	0800746d 	.word	0x0800746d
 8006e7c:	0800746d 	.word	0x0800746d
 8006e80:	0800746d 	.word	0x0800746d
 8006e84:	0800746d 	.word	0x0800746d
 8006e88:	0800746d 	.word	0x0800746d
 8006e8c:	0800746d 	.word	0x0800746d
 8006e90:	0800746d 	.word	0x0800746d
 8006e94:	080070b5 	.word	0x080070b5
 8006e98:	0800746d 	.word	0x0800746d
 8006e9c:	08006fe9 	.word	0x08006fe9
 8006ea0:	08006f07 	.word	0x08006f07
 8006ea4:	08006f11 	.word	0x08006f11
 8006ea8:	0800746d 	.word	0x0800746d
 8006eac:	08006fd3 	.word	0x08006fd3
 8006eb0:	0800746d 	.word	0x0800746d
 8006eb4:	08006f45 	.word	0x08006f45
 8006eb8:	08006ee9 	.word	0x08006ee9
 8006ebc:	08006ef3 	.word	0x08006ef3
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006f3b 	.word	0x08006f3b
 8006ec8:	0800746d 	.word	0x0800746d
 8006ecc:	0800746d 	.word	0x0800746d
 8006ed0:	0800746d 	.word	0x0800746d
 8006ed4:	08007455 	.word	0x08007455
 8006ed8:	080070bf 	.word	0x080070bf
 8006edc:	08006fa1 	.word	0x08006fa1
 8006ee0:	080070f7 	.word	0x080070f7
 8006ee4:	08007291 	.word	0x08007291
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 8006ee8:	883b      	ldrh	r3, [r7, #0]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	719a      	strb	r2, [r3, #6]
        break;
 8006ef0:	e2c1      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 8006ef2:	883b      	ldrh	r3, [r7, #0]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	70da      	strb	r2, [r3, #3]
        break;
 8006efa:	e2bc      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 8006efc:	883b      	ldrh	r3, [r7, #0]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	715a      	strb	r2, [r3, #5]
        break;
 8006f04:	e2b7      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 8006f06:	883b      	ldrh	r3, [r7, #0]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	779a      	strb	r2, [r3, #30]
        break;
 8006f0e:	e2b2      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006f10:	883b      	ldrh	r3, [r7, #0]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d00a      	beq.n	8006f2e <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 8006f18:	883b      	ldrh	r3, [r7, #0]
 8006f1a:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d006      	beq.n	8006f2e <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 8006f20:	883b      	ldrh	r3, [r7, #0]
 8006f22:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d002      	beq.n	8006f2e <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006f28:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006f2c:	e2a4      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 8006f2e:	883b      	ldrh	r3, [r7, #0]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	811a      	strh	r2, [r3, #8]
        break;
 8006f38:	e29d      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 8006f3a:	883b      	ldrh	r3, [r7, #0]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	709a      	strb	r2, [r3, #2]
        break;
 8006f42:	e298      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 8006f44:	883b      	ldrh	r3, [r7, #0]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 8006f4e:	e292      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	883a      	ldrh	r2, [r7, #0]
 8006f54:	821a      	strh	r2, [r3, #16]
        break;
 8006f56:	e28e      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	883a      	ldrh	r2, [r7, #0]
 8006f5c:	825a      	strh	r2, [r3, #18]
        break;
 8006f5e:	e28a      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 8006f60:	883b      	ldrh	r3, [r7, #0]
 8006f62:	f644 72af 	movw	r2, #20399	@ 0x4faf
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d802      	bhi.n	8006f70 <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006f6a:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006f6e:	e283      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	883a      	ldrh	r2, [r7, #0]
 8006f74:	829a      	strh	r2, [r3, #20]
        break;
 8006f76:	e27e      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 8006f78:	883b      	ldrh	r3, [r7, #0]
 8006f7a:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d802      	bhi.n	8006f88 <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006f82:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006f86:	e277      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	883a      	ldrh	r2, [r7, #0]
 8006f8c:	82da      	strh	r2, [r3, #22]
        break;
 8006f8e:	e272      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	883a      	ldrh	r2, [r7, #0]
 8006f94:	831a      	strh	r2, [r3, #24]
        break;
 8006f96:	e26e      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	883a      	ldrh	r2, [r7, #0]
 8006f9c:	835a      	strh	r2, [r3, #26]
        break;
 8006f9e:	e26a      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8006fa0:	883b      	ldrh	r3, [r7, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8006fac:	883b      	ldrh	r3, [r7, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006fb8:	f244 0323 	movw	r3, #16419	@ 0x4023
 8006fbc:	e25c      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 8006fbe:	883b      	ldrh	r3, [r7, #0]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 8006fc8:	e255      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	883a      	ldrh	r2, [r7, #0]
 8006fce:	839a      	strh	r2, [r3, #28]
        break;
 8006fd0:	e251      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 8006fd2:	883b      	ldrh	r3, [r7, #0]
 8006fd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fd6:	d902      	bls.n	8006fde <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006fd8:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006fdc:	e24c      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 8006fde:	883b      	ldrh	r3, [r7, #0]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	711a      	strb	r2, [r3, #4]
        break;
 8006fe6:	e246      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 8006fe8:	883b      	ldrh	r3, [r7, #0]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d008      	beq.n	8007000 <phacDiscLoop_Sw_SetConfig+0x394>
 8006fee:	883b      	ldrh	r3, [r7, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d005      	beq.n	8007000 <phacDiscLoop_Sw_SetConfig+0x394>
 8006ff4:	883b      	ldrh	r3, [r7, #0]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d002      	beq.n	8007000 <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8006ffa:	f244 0321 	movw	r3, #16417	@ 0x4021
 8006ffe:	e23b      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 8007000:	883b      	ldrh	r3, [r7, #0]
 8007002:	b2da      	uxtb	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	883a      	ldrh	r2, [r7, #0]
 8007010:	215a      	movs	r1, #90	@ 0x5a
 8007012:	4618      	mov	r0, r3
 8007014:	f006 f958 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8007018:	4603      	mov	r3, r0
 800701a:	81fb      	strh	r3, [r7, #14]
 800701c:	89fb      	ldrh	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <phacDiscLoop_Sw_SetConfig+0x3ba>
 8007022:	89fb      	ldrh	r3, [r7, #14]
 8007024:	e228      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	883a      	ldrh	r2, [r7, #0]
 800702c:	2106      	movs	r1, #6
 800702e:	4618      	mov	r0, r3
 8007030:	f00d fb08 	bl	8014644 <phpalI14443p4_Sw_SetConfig>
 8007034:	4603      	mov	r3, r0
 8007036:	81fb      	strh	r3, [r7, #14]
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <phacDiscLoop_Sw_SetConfig+0x3d6>
 800703e:	89fb      	ldrh	r3, [r7, #14]
 8007040:	e21a      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007046:	883a      	ldrh	r2, [r7, #0]
 8007048:	2101      	movs	r1, #1
 800704a:	4618      	mov	r0, r3
 800704c:	f00c fc5e 	bl	801390c <phpalI14443p3b_Sw_SetConfig>
 8007050:	4603      	mov	r3, r0
 8007052:	81fb      	strh	r3, [r7, #14]
 8007054:	89fb      	ldrh	r3, [r7, #14]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <phacDiscLoop_Sw_SetConfig+0x3f2>
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	e20c      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	883a      	ldrh	r2, [r7, #0]
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f00b fe1b 	bl	8012ca2 <phpalI14443p3a_Sw_SetConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	81fb      	strh	r3, [r7, #14]
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <phacDiscLoop_Sw_SetConfig+0x40e>
 8007076:	89fb      	ldrh	r3, [r7, #14]
 8007078:	e1fe      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707e:	883a      	ldrh	r2, [r7, #0]
 8007080:	2101      	movs	r1, #1
 8007082:	4618      	mov	r0, r3
 8007084:	f00d fbb0 	bl	80147e8 <phpalI14443p4a_Sw_SetConfig>
 8007088:	4603      	mov	r3, r0
 800708a:	81fb      	strh	r3, [r7, #14]
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <phacDiscLoop_Sw_SetConfig+0x42a>
 8007092:	89fb      	ldrh	r3, [r7, #14]
 8007094:	e1f0      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	883a      	ldrh	r2, [r7, #0]
 800709c:	210a      	movs	r1, #10
 800709e:	4618      	mov	r0, r3
 80070a0:	f00e ff0e 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 80070a4:	4603      	mov	r3, r0
 80070a6:	81fb      	strh	r3, [r7, #14]
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 81e2 	beq.w	8007474 <phacDiscLoop_Sw_SetConfig+0x808>
 80070b0:	89fb      	ldrh	r3, [r7, #14]
 80070b2:	e1e1      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 80070b4:	883b      	ldrh	r3, [r7, #0]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	77da      	strb	r2, [r3, #31]
        break;
 80070bc:	e1db      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 80070be:	883b      	ldrh	r3, [r7, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d005      	beq.n	80070d0 <phacDiscLoop_Sw_SetConfig+0x464>
 80070c4:	883b      	ldrh	r3, [r7, #0]
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d002      	beq.n	80070d0 <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80070ca:	f244 0321 	movw	r3, #16417	@ 0x4021
 80070ce:	e1d3      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 80070d0:	883b      	ldrh	r3, [r7, #0]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 80070da:	e1cc      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80070dc:	883b      	ldrh	r3, [r7, #0]
 80070de:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80070e6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80070ea:	e1c5      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 80070ec:	883b      	ldrh	r3, [r7, #0]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	729a      	strb	r2, [r3, #10]
        break;
 80070f4:	e1bf      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80070f6:	883b      	ldrh	r3, [r7, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d006      	beq.n	800710c <phacDiscLoop_Sw_SetConfig+0x4a0>
 80070fe:	883b      	ldrh	r3, [r7, #0]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007106:	f244 0321 	movw	r3, #16417	@ 0x4021
 800710a:	e1b5      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 800710c:	883b      	ldrh	r3, [r7, #0]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	b29b      	uxth	r3, r3
 8007112:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8007114:	7b7b      	ldrb	r3, [r7, #13]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800711a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800711e:	e1ab      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 8007120:	7b7a      	ldrb	r2, [r7, #13]
 8007122:	883b      	ldrh	r3, [r7, #0]
 8007124:	b2d8      	uxtb	r0, r3
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	440b      	add	r3, r1
 8007130:	336c      	adds	r3, #108	@ 0x6c
 8007132:	4602      	mov	r2, r0
 8007134:	701a      	strb	r2, [r3, #0]
        break;
 8007136:	e19e      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 8007138:	883b      	ldrh	r3, [r7, #0]
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d902      	bls.n	8007144 <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800713e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007142:	e199      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 8007144:	883b      	ldrh	r3, [r7, #0]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 800714e:	e192      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 8007150:	883b      	ldrh	r3, [r7, #0]
 8007152:	2b0e      	cmp	r3, #14
 8007154:	d902      	bls.n	800715c <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007156:	f244 0321 	movw	r3, #16417	@ 0x4021
 800715a:	e18d      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 800715c:	883b      	ldrh	r3, [r7, #0]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 8007166:	e186      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 8007168:	883b      	ldrh	r3, [r7, #0]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 8007172:	e180      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8007174:	883b      	ldrh	r3, [r7, #0]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d807      	bhi.n	800718a <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8007180:	2b01      	cmp	r3, #1
 8007182:	d105      	bne.n	8007190 <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8007184:	883b      	ldrh	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800718a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800718e:	e173      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 8007190:	883b      	ldrh	r3, [r7, #0]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 800719a:	e16c      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800719c:	883b      	ldrh	r3, [r7, #0]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d807      	bhi.n	80071b2 <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d105      	bne.n	80071b8 <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 80071ac:	883b      	ldrh	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071b2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071b6:	e15f      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 80071b8:	883b      	ldrh	r3, [r7, #0]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        break;
 80071c2:	e158      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80071c4:	883b      	ldrh	r3, [r7, #0]
 80071c6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <phacDiscLoop_Sw_SetConfig+0x568>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80071ce:	f244 0321 	movw	r3, #16417	@ 0x4021
 80071d2:	e151      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 80071d4:	883b      	ldrh	r3, [r7, #0]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	72da      	strb	r2, [r3, #11]
    break;
 80071dc:	e14b      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 80071de:	883b      	ldrh	r3, [r7, #0]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
      break;
 80071e8:	e145      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 80071ea:	883b      	ldrh	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <phacDiscLoop_Sw_SetConfig+0x58e>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 80071f8:	e13d      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
      break;
 8007202:	e138      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 8007204:	883b      	ldrh	r3, [r7, #0]
 8007206:	2b0c      	cmp	r3, #12
 8007208:	d902      	bls.n	8007210 <phacDiscLoop_Sw_SetConfig+0x5a4>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800720a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800720e:	e133      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 8007210:	883b      	ldrh	r3, [r7, #0]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      break;
 800721a:	e12c      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 800721c:	883b      	ldrh	r3, [r7, #0]
 800721e:	2b0e      	cmp	r3, #14
 8007220:	d902      	bls.n	8007228 <phacDiscLoop_Sw_SetConfig+0x5bc>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007222:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007226:	e127      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 8007228:	883b      	ldrh	r3, [r7, #0]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
      break;
 8007232:	e120      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 8007234:	883b      	ldrh	r3, [r7, #0]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
        break;
 800723e:	e11a      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8007240:	883b      	ldrh	r3, [r7, #0]
 8007242:	2b03      	cmp	r3, #3
 8007244:	d807      	bhi.n	8007256 <phacDiscLoop_Sw_SetConfig+0x5ea>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <phacDiscLoop_Sw_SetConfig+0x5f0>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8007250:	883b      	ldrh	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <phacDiscLoop_Sw_SetConfig+0x5f0>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007256:	f244 0321 	movw	r3, #16417	@ 0x4021
 800725a:	e10d      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 800725c:	883b      	ldrh	r3, [r7, #0]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
      break;
 8007266:	e106      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8007268:	883b      	ldrh	r3, [r7, #0]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d807      	bhi.n	800727e <phacDiscLoop_Sw_SetConfig+0x612>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <phacDiscLoop_Sw_SetConfig+0x618>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8007278:	883b      	ldrh	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <phacDiscLoop_Sw_SetConfig+0x618>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800727e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007282:	e0f9      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 8007284:	883b      	ldrh	r3, [r7, #0]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
      break;
 800728e:	e0f2      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 8007290:	883b      	ldrh	r3, [r7, #0]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b01      	cmp	r3, #1
 8007296:	d006      	beq.n	80072a6 <phacDiscLoop_Sw_SetConfig+0x63a>
 8007298:	883b      	ldrh	r3, [r7, #0]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <phacDiscLoop_Sw_SetConfig+0x63a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072a0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072a4:	e0e8      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80072a6:	883b      	ldrh	r3, [r7, #0]
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80072ae:	7b7b      	ldrb	r3, [r7, #13]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <phacDiscLoop_Sw_SetConfig+0x64e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072b4:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072b8:	e0de      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80072ba:	7b7a      	ldrb	r2, [r7, #13]
 80072bc:	883b      	ldrh	r3, [r7, #0]
 80072be:	b2d8      	uxtb	r0, r3
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	33b1      	adds	r3, #177	@ 0xb1
 80072ce:	4602      	mov	r2, r0
 80072d0:	701a      	strb	r2, [r3, #0]
        break;
 80072d2:	e0d0      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 80072d4:	883b      	ldrh	r3, [r7, #0]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 80072de:	e0ca      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80072e0:	883b      	ldrh	r3, [r7, #0]
 80072e2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <phacDiscLoop_Sw_SetConfig+0x684>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80072ea:	f244 0321 	movw	r3, #16417	@ 0x4021
 80072ee:	e0c3      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 80072f0:	883b      	ldrh	r3, [r7, #0]
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	731a      	strb	r2, [r3, #12]
        break;
 80072f8:	e0bd      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 80072fa:	883b      	ldrh	r3, [r7, #0]
 80072fc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <phacDiscLoop_Sw_SetConfig+0x69e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007304:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007308:	e0b6      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 800730a:	883b      	ldrh	r3, [r7, #0]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	739a      	strb	r2, [r3, #14]
        break;
 8007312:	e0b0      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 8007314:	883b      	ldrh	r3, [r7, #0]
 8007316:	2b0d      	cmp	r3, #13
 8007318:	d005      	beq.n	8007326 <phacDiscLoop_Sw_SetConfig+0x6ba>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 800731a:	883b      	ldrh	r3, [r7, #0]
 800731c:	2b0c      	cmp	r3, #12
 800731e:	d002      	beq.n	8007326 <phacDiscLoop_Sw_SetConfig+0x6ba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007320:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007324:	e0a8      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 8007326:	883b      	ldrh	r3, [r7, #0]
 8007328:	2b0d      	cmp	r3, #13
 800732a:	d109      	bne.n	8007340 <phacDiscLoop_Sw_SetConfig+0x6d4>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8007332:	f043 0302 	orr.w	r3, r3, #2
 8007336:	b2da      	uxtb	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 800733e:	e09a      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8007346:	f023 0302 	bic.w	r3, r3, #2
 800734a:	b2da      	uxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
        break;
 8007352:	e090      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 8007354:	883b      	ldrh	r3, [r7, #0]
 8007356:	2b20      	cmp	r3, #32
 8007358:	d008      	beq.n	800736c <phacDiscLoop_Sw_SetConfig+0x700>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 800735a:	883b      	ldrh	r3, [r7, #0]
 800735c:	2b10      	cmp	r3, #16
 800735e:	d005      	beq.n	800736c <phacDiscLoop_Sw_SetConfig+0x700>
 8007360:	883b      	ldrh	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <phacDiscLoop_Sw_SetConfig+0x700>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007366:	f244 0321 	movw	r3, #16417	@ 0x4021
 800736a:	e085      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	f107 020a 	add.w	r2, r7, #10
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f00e ff78 	bl	801626c <phpalSli15693_Sw_GetConfig>
 800737c:	4603      	mov	r3, r0
 800737e:	81fb      	strh	r3, [r7, #14]
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <phacDiscLoop_Sw_SetConfig+0x71e>
 8007386:	89fb      	ldrh	r3, [r7, #14]
 8007388:	e076      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 800738a:	883b      	ldrh	r3, [r7, #0]
 800738c:	2b10      	cmp	r3, #16
 800738e:	d10a      	bne.n	80073a6 <phacDiscLoop_Sw_SetConfig+0x73a>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8007390:	897b      	ldrh	r3, [r7, #10]
 8007392:	f043 0310 	orr.w	r3, r3, #16
 8007396:	b29b      	uxth	r3, r3
 8007398:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 800739a:	897b      	ldrh	r3, [r7, #10]
 800739c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	817b      	strh	r3, [r7, #10]
 80073a4:	e017      	b.n	80073d6 <phacDiscLoop_Sw_SetConfig+0x76a>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 80073a6:	883b      	ldrh	r3, [r7, #0]
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d10a      	bne.n	80073c2 <phacDiscLoop_Sw_SetConfig+0x756>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 80073ac:	897b      	ldrh	r3, [r7, #10]
 80073ae:	f043 0320 	orr.w	r3, r3, #32
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 80073b6:	897b      	ldrh	r3, [r7, #10]
 80073b8:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80073bc:	b29b      	uxth	r3, r3
 80073be:	817b      	strh	r3, [r7, #10]
 80073c0:	e009      	b.n	80073d6 <phacDiscLoop_Sw_SetConfig+0x76a>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 80073c2:	897b      	ldrh	r3, [r7, #10]
 80073c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 80073cc:	897b      	ldrh	r3, [r7, #10]
 80073ce:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073da:	897a      	ldrh	r2, [r7, #10]
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f00e fd6e 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 80073e4:	4603      	mov	r3, r0
 80073e6:	81fb      	strh	r3, [r7, #14]
 80073e8:	89fb      	ldrh	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <phacDiscLoop_Sw_SetConfig+0x786>
 80073ee:	89fb      	ldrh	r3, [r7, #14]
 80073f0:	e042      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 80073f2:	883b      	ldrh	r3, [r7, #0]
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
        break;
 80073fc:	e03b      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 80073fe:	883b      	ldrh	r3, [r7, #0]
 8007400:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <phacDiscLoop_Sw_SetConfig+0x7a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007408:	f244 0321 	movw	r3, #16417	@ 0x4021
 800740c:	e034      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 800740e:	883b      	ldrh	r3, [r7, #0]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	73da      	strb	r2, [r3, #15]
        break;
 8007416:	e02e      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 8007418:	883b      	ldrh	r3, [r7, #0]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d005      	beq.n	800742a <phacDiscLoop_Sw_SetConfig+0x7be>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 800741e:	883b      	ldrh	r3, [r7, #0]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d002      	beq.n	800742a <phacDiscLoop_Sw_SetConfig+0x7be>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007424:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007428:	e026      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 800742a:	883b      	ldrh	r3, [r7, #0]
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        break;
 8007434:	e01f      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 8007436:	883b      	ldrh	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <phacDiscLoop_Sw_SetConfig+0x7dc>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 800743c:	883b      	ldrh	r3, [r7, #0]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d002      	beq.n	8007448 <phacDiscLoop_Sw_SetConfig+0x7dc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007442:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007446:	e017      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 8007448:	883b      	ldrh	r3, [r7, #0]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
        break;
 8007452:	e010      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 8007454:	883b      	ldrh	r3, [r7, #0]
 8007456:	2bff      	cmp	r3, #255	@ 0xff
 8007458:	d902      	bls.n	8007460 <phacDiscLoop_Sw_SetConfig+0x7f4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800745a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800745e:	e00b      	b.n	8007478 <phacDiscLoop_Sw_SetConfig+0x80c>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 8007460:	883b      	ldrh	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        break;
 800746a:	e004      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800746c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007470:	81fb      	strh	r3, [r7, #14]
 8007472:	e000      	b.n	8007476 <phacDiscLoop_Sw_SetConfig+0x80a>
        break;
 8007474:	bf00      	nop
    }

    return status;
 8007476:	89fb      	ldrh	r3, [r7, #14]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	460b      	mov	r3, r1
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800748e:	2300      	movs	r3, #0
 8007490:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 8007492:	897b      	ldrh	r3, [r7, #10]
 8007494:	2b92      	cmp	r3, #146	@ 0x92
 8007496:	f200 8250 	bhi.w	800793a <phacDiscLoop_Sw_GetConfig+0x4ba>
 800749a:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <phacDiscLoop_Sw_GetConfig+0x20>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080077a9 	.word	0x080077a9
 80074a4:	08007813 	.word	0x08007813
 80074a8:	08007861 	.word	0x08007861
 80074ac:	0800786b 	.word	0x0800786b
 80074b0:	0800789d 	.word	0x0800789d
 80074b4:	080078ed 	.word	0x080078ed
 80074b8:	08007783 	.word	0x08007783
 80074bc:	0800793b 	.word	0x0800793b
 80074c0:	0800793b 	.word	0x0800793b
 80074c4:	0800793b 	.word	0x0800793b
 80074c8:	0800793b 	.word	0x0800793b
 80074cc:	0800793b 	.word	0x0800793b
 80074d0:	0800793b 	.word	0x0800793b
 80074d4:	0800793b 	.word	0x0800793b
 80074d8:	0800793b 	.word	0x0800793b
 80074dc:	0800793b 	.word	0x0800793b
 80074e0:	080077c1 	.word	0x080077c1
 80074e4:	0800782b 	.word	0x0800782b
 80074e8:	08007883 	.word	0x08007883
 80074ec:	080078a7 	.word	0x080078a7
 80074f0:	080078f7 	.word	0x080078f7
 80074f4:	0800793b 	.word	0x0800793b
 80074f8:	0800793b 	.word	0x0800793b
 80074fc:	0800793b 	.word	0x0800793b
 8007500:	0800793b 	.word	0x0800793b
 8007504:	0800793b 	.word	0x0800793b
 8007508:	0800793b 	.word	0x0800793b
 800750c:	0800793b 	.word	0x0800793b
 8007510:	0800793b 	.word	0x0800793b
 8007514:	0800793b 	.word	0x0800793b
 8007518:	0800793b 	.word	0x0800793b
 800751c:	0800793b 	.word	0x0800793b
 8007520:	080077b3 	.word	0x080077b3
 8007524:	0800781d 	.word	0x0800781d
 8007528:	08007875 	.word	0x08007875
 800752c:	080078b3 	.word	0x080078b3
 8007530:	08007903 	.word	0x08007903
 8007534:	08007837 	.word	0x08007837
 8007538:	0800793b 	.word	0x0800793b
 800753c:	0800793b 	.word	0x0800793b
 8007540:	0800793b 	.word	0x0800793b
 8007544:	0800793b 	.word	0x0800793b
 8007548:	0800793b 	.word	0x0800793b
 800754c:	0800793b 	.word	0x0800793b
 8007550:	0800793b 	.word	0x0800793b
 8007554:	0800793b 	.word	0x0800793b
 8007558:	0800793b 	.word	0x0800793b
 800755c:	0800793b 	.word	0x0800793b
 8007560:	0800793b 	.word	0x0800793b
 8007564:	0800793b 	.word	0x0800793b
 8007568:	0800793b 	.word	0x0800793b
 800756c:	0800793b 	.word	0x0800793b
 8007570:	0800793b 	.word	0x0800793b
 8007574:	08007845 	.word	0x08007845
 8007578:	08007853 	.word	0x08007853
 800757c:	0800793b 	.word	0x0800793b
 8007580:	0800793b 	.word	0x0800793b
 8007584:	0800793b 	.word	0x0800793b
 8007588:	0800793b 	.word	0x0800793b
 800758c:	0800793b 	.word	0x0800793b
 8007590:	0800793b 	.word	0x0800793b
 8007594:	0800793b 	.word	0x0800793b
 8007598:	0800793b 	.word	0x0800793b
 800759c:	0800793b 	.word	0x0800793b
 80075a0:	080077cd 	.word	0x080077cd
 80075a4:	080077db 	.word	0x080077db
 80075a8:	080077e9 	.word	0x080077e9
 80075ac:	08007805 	.word	0x08007805
 80075b0:	080077f7 	.word	0x080077f7
 80075b4:	0800793b 	.word	0x0800793b
 80075b8:	0800793b 	.word	0x0800793b
 80075bc:	0800793b 	.word	0x0800793b
 80075c0:	0800793b 	.word	0x0800793b
 80075c4:	0800793b 	.word	0x0800793b
 80075c8:	0800793b 	.word	0x0800793b
 80075cc:	0800793b 	.word	0x0800793b
 80075d0:	0800793b 	.word	0x0800793b
 80075d4:	0800793b 	.word	0x0800793b
 80075d8:	0800793b 	.word	0x0800793b
 80075dc:	0800793b 	.word	0x0800793b
 80075e0:	0800793b 	.word	0x0800793b
 80075e4:	0800793b 	.word	0x0800793b
 80075e8:	0800793b 	.word	0x0800793b
 80075ec:	0800793b 	.word	0x0800793b
 80075f0:	0800793b 	.word	0x0800793b
 80075f4:	0800793b 	.word	0x0800793b
 80075f8:	0800793b 	.word	0x0800793b
 80075fc:	0800788f 	.word	0x0800788f
 8007600:	0800793b 	.word	0x0800793b
 8007604:	0800793b 	.word	0x0800793b
 8007608:	0800793b 	.word	0x0800793b
 800760c:	0800793b 	.word	0x0800793b
 8007610:	0800793b 	.word	0x0800793b
 8007614:	0800793b 	.word	0x0800793b
 8007618:	0800793b 	.word	0x0800793b
 800761c:	0800793b 	.word	0x0800793b
 8007620:	080078c1 	.word	0x080078c1
 8007624:	080078df 	.word	0x080078df
 8007628:	0800793b 	.word	0x0800793b
 800762c:	0800793b 	.word	0x0800793b
 8007630:	0800793b 	.word	0x0800793b
 8007634:	0800793b 	.word	0x0800793b
 8007638:	0800793b 	.word	0x0800793b
 800763c:	0800793b 	.word	0x0800793b
 8007640:	0800793b 	.word	0x0800793b
 8007644:	0800793b 	.word	0x0800793b
 8007648:	0800793b 	.word	0x0800793b
 800764c:	0800793b 	.word	0x0800793b
 8007650:	0800793b 	.word	0x0800793b
 8007654:	0800793b 	.word	0x0800793b
 8007658:	0800793b 	.word	0x0800793b
 800765c:	0800793b 	.word	0x0800793b
 8007660:	08007911 	.word	0x08007911
 8007664:	0800791f 	.word	0x0800791f
 8007668:	0800793b 	.word	0x0800793b
 800766c:	0800793b 	.word	0x0800793b
 8007670:	0800793b 	.word	0x0800793b
 8007674:	0800793b 	.word	0x0800793b
 8007678:	0800793b 	.word	0x0800793b
 800767c:	0800793b 	.word	0x0800793b
 8007680:	0800793b 	.word	0x0800793b
 8007684:	0800793b 	.word	0x0800793b
 8007688:	0800793b 	.word	0x0800793b
 800768c:	0800793b 	.word	0x0800793b
 8007690:	0800793b 	.word	0x0800793b
 8007694:	0800793b 	.word	0x0800793b
 8007698:	0800793b 	.word	0x0800793b
 800769c:	0800793b 	.word	0x0800793b
 80076a0:	0800776d 	.word	0x0800776d
 80076a4:	08007747 	.word	0x08007747
 80076a8:	0800793b 	.word	0x0800793b
 80076ac:	08007711 	.word	0x08007711
 80076b0:	0800771d 	.word	0x0800771d
 80076b4:	08007779 	.word	0x08007779
 80076b8:	08007755 	.word	0x08007755
 80076bc:	08007739 	.word	0x08007739
 80076c0:	0800772b 	.word	0x0800772b
 80076c4:	080076f9 	.word	0x080076f9
 80076c8:	08007705 	.word	0x08007705
 80076cc:	080076ed 	.word	0x080076ed
 80076d0:	08007761 	.word	0x08007761
 80076d4:	0800793b 	.word	0x0800793b
 80076d8:	0800793b 	.word	0x0800793b
 80076dc:	0800793b 	.word	0x0800793b
 80076e0:	0800792d 	.word	0x0800792d
 80076e4:	0800778d 	.word	0x0800778d
 80076e8:	0800779b 	.word	0x0800779b
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	795b      	ldrb	r3, [r3, #5]
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	801a      	strh	r2, [r3, #0]
        break;
 80076f6:	e123      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	799b      	ldrb	r3, [r3, #6]
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	801a      	strh	r2, [r3, #0]
        break;
 8007702:	e11d      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	78db      	ldrb	r3, [r3, #3]
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	801a      	strh	r2, [r3, #0]
        break;
 800770e:	e117      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	7f9b      	ldrb	r3, [r3, #30]
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	801a      	strh	r2, [r3, #0]
        break;
 800771a:	e111      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	891b      	ldrh	r3, [r3, #8]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	801a      	strh	r2, [r3, #0]
        break;
 8007728:	e10a      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007730:	461a      	mov	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	801a      	strh	r2, [r3, #0]
        break;
 8007736:	e103      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	801a      	strh	r2, [r3, #0]
        break;
 8007744:	e0fc      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	801a      	strh	r2, [r3, #0]
         break;
 8007752:	e0f5      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	801a      	strh	r2, [r3, #0]
        break;
 800775e:	e0ef      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	789b      	ldrb	r3, [r3, #2]
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	801a      	strh	r2, [r3, #0]
        break;
 800776a:	e0e9      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	7fdb      	ldrb	r3, [r3, #31]
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	801a      	strh	r2, [r3, #0]
        break;
 8007776:	e0e3      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	801a      	strh	r2, [r3, #0]
        break;
 8007780:	e0de      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8b9a      	ldrh	r2, [r3, #28]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	801a      	strh	r2, [r3, #0]
        break;
 800778a:	e0d9      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	801a      	strh	r2, [r3, #0]
        break;
 8007798:	e0d2      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	801a      	strh	r2, [r3, #0]
        break;
 80077a6:	e0cb      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8a1a      	ldrh	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	801a      	strh	r2, [r3, #0]
        break;
 80077b0:	e0c6      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	801a      	strh	r2, [r3, #0]
        break;
 80077be:	e0bf      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7a9b      	ldrb	r3, [r3, #10]
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	801a      	strh	r2, [r3, #0]
        break;
 80077ca:	e0b9      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	801a      	strh	r2, [r3, #0]
        break;
 80077d8:	e0b2      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	801a      	strh	r2, [r3, #0]
        break;
 80077e6:	e0ab      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	801a      	strh	r2, [r3, #0]
        break;
 80077f4:	e0a4      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	801a      	strh	r2, [r3, #0]
        break;
 8007802:	e09d      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	801a      	strh	r2, [r3, #0]
        break;
 8007810:	e096      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8a5a      	ldrh	r2, [r3, #18]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	801a      	strh	r2, [r3, #0]
        break;
 800781a:	e091      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	801a      	strh	r2, [r3, #0]
        break;
 8007828:	e08a      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	7adb      	ldrb	r3, [r3, #11]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	801a      	strh	r2, [r3, #0]
        break;
 8007834:	e084      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800783c:	461a      	mov	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	801a      	strh	r2, [r3, #0]
        break;
 8007842:	e07d      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	801a      	strh	r2, [r3, #0]
        break;
 8007850:	e076      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	801a      	strh	r2, [r3, #0]
        break;
 800785e:	e06f      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8a9a      	ldrh	r2, [r3, #20]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	801a      	strh	r2, [r3, #0]
         break;
 8007868:	e06a      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8ada      	ldrh	r2, [r3, #22]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	801a      	strh	r2, [r3, #0]
         break;
 8007872:	e065      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	801a      	strh	r2, [r3, #0]
        break;
 8007880:	e05e      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	7b1b      	ldrb	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	801a      	strh	r2, [r3, #0]
        break;
 800788c:	e058      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007894:	461a      	mov	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	801a      	strh	r2, [r3, #0]
         break;
 800789a:	e051      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>
        break;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8b1a      	ldrh	r2, [r3, #24]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	801a      	strh	r2, [r3, #0]
        break;
 80078a4:	e04c      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	7b9b      	ldrb	r3, [r3, #14]
 80078aa:	461a      	mov	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	801a      	strh	r2, [r3, #0]
        break;
 80078b0:	e046      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	801a      	strh	r2, [r3, #0]
        break;
 80078be:	e03f      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <phacDiscLoop_Sw_GetConfig+0x456>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 80078d4:	e034      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	220c      	movs	r2, #12
 80078da:	801a      	strh	r2, [r3, #0]
        break;
 80078dc:	e030      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	801a      	strh	r2, [r3, #0]
        break;
 80078ea:	e029      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8b5a      	ldrh	r2, [r3, #26]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	801a      	strh	r2, [r3, #0]
        break;
 80078f4:	e024      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	7bdb      	ldrb	r3, [r3, #15]
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	801a      	strh	r2, [r3, #0]
        break;
 8007900:	e01e      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8007908:	461a      	mov	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	801a      	strh	r2, [r3, #0]
        break;
 800790e:	e017      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8007916:	461a      	mov	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	801a      	strh	r2, [r3, #0]
        break;
 800791c:	e010      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	801a      	strh	r2, [r3, #0]
        break;
 800792a:	e009      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	801a      	strh	r2, [r3, #0]
        break;
 8007938:	e002      	b.n	8007940 <phacDiscLoop_Sw_GetConfig+0x4c0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800793a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800793e:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 8007940:	8afb      	ldrh	r3, [r7, #22]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop

08007950 <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 8007958:	2300      	movs	r3, #0
 800795a:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8007960:	2301      	movs	r3, #1
 8007962:	737b      	strb	r3, [r7, #13]
 8007964:	e0ba      	b.n	8007adc <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	4413      	add	r3, r2
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 8007972:	7b3b      	ldrb	r3, [r7, #12]
 8007974:	2b04      	cmp	r3, #4
 8007976:	f240 80ae 	bls.w	8007ad6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800797a:	7b3b      	ldrb	r3, [r7, #12]
 800797c:	2b05      	cmp	r3, #5
 800797e:	d106      	bne.n	800798e <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	789b      	ldrb	r3, [r3, #2]
 8007984:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80a3 	beq.w	8007ad4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 800798e:	7b3b      	ldrb	r3, [r7, #12]
 8007990:	2b05      	cmp	r3, #5
 8007992:	d115      	bne.n	80079c0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007998:	2b20      	cmp	r3, #32
 800799a:	d111      	bne.n	80079c0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 800799c:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80079a0:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	461a      	mov	r2, r3
 80079a6:	2105      	movs	r1, #5
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff f95f 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 80079ae:	4603      	mov	r3, r0
 80079b0:	81fb      	strh	r3, [r7, #14]
 80079b2:	89fb      	ldrh	r3, [r7, #14]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 80079b8:	89fb      	ldrh	r3, [r7, #14]
 80079ba:	e094      	b.n	8007ae6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	e092      	b.n	8007ae6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 80079c0:	7b7b      	ldrb	r3, [r7, #13]
 80079c2:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	4413      	add	r3, r2
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 80079d6:	7b3b      	ldrb	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	789b      	ldrb	r3, [r3, #2]
 80079e0:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d134      	bne.n	8007a52 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 80079e8:	7b3b      	ldrb	r3, [r7, #12]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d105      	bne.n	80079fa <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	789b      	ldrb	r3, [r3, #2]
 80079f2:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d12b      	bne.n	8007a52 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 80079fa:	7b3b      	ldrb	r3, [r7, #12]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d105      	bne.n	8007a0c <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	789b      	ldrb	r3, [r3, #2]
 8007a04:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d122      	bne.n	8007a52 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8007a0c:	7b3b      	ldrb	r3, [r7, #12]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d105      	bne.n	8007a1e <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d119      	bne.n	8007a52 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8007a1e:	7b3b      	ldrb	r3, [r7, #12]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d105      	bne.n	8007a30 <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d110      	bne.n	8007a52 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8007a30:	7b3b      	ldrb	r3, [r7, #12]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d105      	bne.n	8007a42 <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 8007a48:	2306      	movs	r3, #6
 8007a4a:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1b8      	bne.n	80079c4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 8007a52:	7b3b      	ldrb	r3, [r7, #12]
 8007a54:	2b06      	cmp	r3, #6
 8007a56:	d825      	bhi.n	8007aa4 <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 8007a58:	a201      	add	r2, pc, #4	@ (adr r2, 8007a60 <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 8007a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5e:	bf00      	nop
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a85 	.word	0x08007a85
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007a8d 	.word	0x08007a8d
 8007a70:	08007a95 	.word	0x08007a95
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007a9d 	.word	0x08007a9d
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 8007a7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a80:	813b      	strh	r3, [r7, #8]
                break;
 8007a82:	e013      	b.n	8007aac <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 8007a84:	f640 63d8 	movw	r3, #3800	@ 0xed8
 8007a88:	813b      	strh	r3, [r7, #8]
                break;
 8007a8a:	e00f      	b.n	8007aac <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 8007a8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a90:	813b      	strh	r3, [r7, #8]
                break;
 8007a92:	e00b      	b.n	8007aac <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8007a94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a98:	813b      	strh	r3, [r7, #8]
                break;
 8007a9a:	e007      	b.n	8007aac <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 8007a9c:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8007aa0:	813b      	strh	r3, [r7, #8]
                break;
 8007aa2:	e003      	b.n	8007aac <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8007aa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007aa8:	813b      	strh	r3, [r7, #8]
                break;
 8007aaa:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ab0:	7b7b      	ldrb	r3, [r7, #13]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d10d      	bne.n	8007ad6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 8007aba:	893b      	ldrh	r3, [r7, #8]
 8007abc:	461a      	mov	r2, r3
 8007abe:	2105      	movs	r1, #5
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff f8d3 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	81fb      	strh	r3, [r7, #14]
 8007aca:	89fb      	ldrh	r3, [r7, #14]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	e008      	b.n	8007ae6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 8007ad4:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8007ad6:	7b7b      	ldrb	r3, [r7, #13]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	737b      	strb	r3, [r7, #13]
 8007adc:	7b7b      	ldrb	r3, [r7, #13]
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	f67f af41 	bls.w	8007966 <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop

08007af0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	4618      	mov	r0, r3
 8007afe:	f005 fb3b 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 8007b02:	4603      	mov	r3, r0
 8007b04:	81fb      	strh	r3, [r7, #14]
 8007b06:	89fb      	ldrh	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	e01b      	b.n	8007b48 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f005 fb50 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8007b20:	4603      	mov	r3, r0
 8007b22:	81fb      	strh	r3, [r7, #14]
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
 8007b2c:	e00c      	b.n	8007b48 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b32:	4618      	mov	r0, r3
 8007b34:	f005 faca 	bl	800d0cc <phhalHw_Pn5180_FieldOn>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	81fb      	strh	r3, [r7, #14]
 8007b3c:	89fb      	ldrh	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 8007b42:	89fb      	ldrh	r3, [r7, #14]
 8007b44:	e000      	b.n	8007b48 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 8007b58:	237f      	movs	r3, #127	@ 0x7f
 8007b5a:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8007b62:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 8007b64:	2300      	movs	r3, #0
 8007b66:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	799b      	ldrb	r3, [r3, #6]
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	799b      	ldrb	r3, [r3, #6]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007b7e:	89bb      	ldrh	r3, [r7, #12]
 8007b80:	f043 0304 	orr.w	r3, r3, #4
 8007b84:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 8007b86:	89bb      	ldrh	r3, [r7, #12]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	795b      	ldrb	r3, [r3, #5]
 8007b90:	b21b      	sxth	r3, r3
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	b21a      	sxth	r2, r3
 8007b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	795b      	ldrb	r3, [r3, #5]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007bae:	89bb      	ldrh	r3, [r7, #12]
 8007bb0:	f043 0304 	orr.w	r3, r3, #4
 8007bb4:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 7482 	add.w	r4, r3, #260	@ 0x104
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8007bcc:	89b9      	ldrh	r1, [r7, #12]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	f007 fb65 	bl	800f2a0 <phhalHw_Pn5180_Autocoll>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 8007bda:	897b      	ldrh	r3, [r7, #10]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	1e5a      	subs	r2, r3, #1
 8007be6:	73fa      	strb	r2, [r7, #15]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e4      	bne.n	8007bb6 <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 8007bec:	897b      	ldrh	r3, [r7, #10]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	d102      	bne.n	8007bfa <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 8007bf4:	f244 0383 	movw	r3, #16515	@ 0x4083
 8007bf8:	e006      	b.n	8007c08 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 8007bfa:	897b      	ldrh	r3, [r7, #10]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 8007c00:	897b      	ldrh	r3, [r7, #10]
 8007c02:	e001      	b.n	8007c08 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 8007c04:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd90      	pop	{r4, r7, pc}

08007c10 <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	e018      	b.n	8007c58 <phacDiscLoop_Sw_Int_ActivePollMode+0x48>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	78db      	ldrb	r3, [r3, #3]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	400b      	ands	r3, r1
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d006      	beq.n	8007c48 <phacDiscLoop_Sw_Int_ActivePollMode+0x38>
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d806      	bhi.n	8007c4c <phacDiscLoop_Sw_Int_ActivePollMode+0x3c>
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d006      	beq.n	8007c50 <phacDiscLoop_Sw_Int_ActivePollMode+0x40>
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d000      	beq.n	8007c48 <phacDiscLoop_Sw_Int_ActivePollMode+0x38>
                }
#endif
                break;

            default:
                break;
 8007c46:	e001      	b.n	8007c4c <phacDiscLoop_Sw_Int_ActivePollMode+0x3c>
                break;
 8007c48:	bf00      	nop
 8007c4a:	e002      	b.n	8007c52 <phacDiscLoop_Sw_Int_ActivePollMode+0x42>
                break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <phacDiscLoop_Sw_Int_ActivePollMode+0x42>
                break;
 8007c50:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	3301      	adds	r3, #1
 8007c56:	73fb      	strb	r3, [r7, #15]
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d9e3      	bls.n	8007c26 <phacDiscLoop_Sw_Int_ActivePollMode+0x16>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007c5e:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 8007c7a:	2321      	movs	r3, #33	@ 0x21
 8007c7c:	81fb      	strh	r3, [r7, #14]

    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	891b      	ldrh	r3, [r3, #8]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d145      	bne.n	8007d12 <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d004      	beq.n	8007c9a <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d110      	bne.n	8007cbc <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7919      	ldrb	r1, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	789a      	ldrb	r2, [r3, #2]
 8007ca2:	f107 030b 	add.w	r3, r7, #11
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f976 	bl	8007f98 <phacDiscLoop_Sw_Int_TechDetectActivity>
 8007cac:	4603      	mov	r3, r0
 8007cae:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8007cb0:	89fb      	ldrh	r3, [r7, #14]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b12      	cmp	r3, #18
 8007cb6:	d116      	bne.n	8007ce6 <phacDiscLoop_Sw_Int_PollMode+0x78>
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	e092      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d10f      	bne.n	8007ce6 <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	789b      	ldrb	r3, [r3, #2]
 8007cca:	f107 020b 	add.w	r2, r7, #11
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa95 	bl	8008200 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8007cda:	89fb      	ldrh	r3, [r7, #14]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b12      	cmp	r3, #18
 8007ce0:	d101      	bne.n	8007ce6 <phacDiscLoop_Sw_Int_PollMode+0x78>
 8007ce2:	89fb      	ldrh	r3, [r7, #14]
 8007ce4:	e07d      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7fdb      	ldrb	r3, [r3, #31]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d006      	beq.n	8007d04 <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 8007cf6:	89fb      	ldrh	r3, [r7, #14]
 8007cf8:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 8007cfa:	2b84      	cmp	r3, #132	@ 0x84
 8007cfc:	d102      	bne.n	8007d04 <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007cfe:	f244 0386 	movw	r3, #16518	@ 0x4086
 8007d02:	e06e      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b87      	cmp	r3, #135	@ 0x87
 8007d0a:	d102      	bne.n	8007d12 <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	811a      	strh	r2, [r3, #8]
        }
    }

    /* Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	891b      	ldrh	r3, [r3, #8]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d145      	bne.n	8007da6 <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	789b      	ldrb	r3, [r3, #2]
 8007d24:	4013      	ands	r3, r2
 8007d26:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 8007d28:	7b7b      	ldrb	r3, [r7, #13]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 8007d2e:	7b7b      	ldrb	r3, [r7, #13]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	7b7b      	ldrb	r3, [r7, #13]
 8007d36:	4013      	ands	r3, r2
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007d3e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007d42:	e04e      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007d44:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007d48:	e04b      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	733b      	strb	r3, [r7, #12]
 8007d4e:	e005      	b.n	8007d5c <phacDiscLoop_Sw_Int_PollMode+0xee>
 8007d50:	7b7b      	ldrb	r3, [r7, #13]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	737b      	strb	r3, [r7, #13]
 8007d56:	7b3b      	ldrb	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	733b      	strb	r3, [r7, #12]
 8007d5c:	7b7b      	ldrb	r3, [r7, #13]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f6      	bne.n	8007d50 <phacDiscLoop_Sw_Int_PollMode+0xe2>
 8007d62:	7b3b      	ldrb	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <phacDiscLoop_Sw_Int_PollMode+0xfe>
 8007d68:	237f      	movs	r3, #127	@ 0x7f
 8007d6a:	e03a      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 8007d6c:	7b3b      	ldrb	r3, [r7, #12]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fbb7 	bl	80084e8 <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 8007d7e:	89fb      	ldrh	r3, [r7, #14]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b89      	cmp	r3, #137	@ 0x89
 8007d84:	d109      	bne.n	8007d9a <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 8007d86:	7b3b      	ldrb	r3, [r7, #12]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fbe5 	bl	8008560 <phacDiscLoop_Sw_Int_ActivateDevice>
 8007d96:	4603      	mov	r3, r0
 8007d98:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 8007d9a:	89fb      	ldrh	r3, [r7, #14]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b12      	cmp	r3, #18
 8007da0:	d101      	bne.n	8007da6 <phacDiscLoop_Sw_Int_PollMode+0x138>
 8007da2:	89fb      	ldrh	r3, [r7, #14]
 8007da4:	e01d      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
    }
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	891b      	ldrh	r3, [r3, #8]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d109      	bne.n	8007dc2 <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d104      	bne.n	8007dc2 <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f816 	bl	8007dea <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8007dc2:	89fb      	ldrh	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8007dc8:	89fb      	ldrh	r3, [r7, #14]
 8007dca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <phacDiscLoop_Sw_Int_PollMode+0x172>
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	e000      	b.n	8007de2 <phacDiscLoop_Sw_Int_PollMode+0x174>
 8007de0:	89fb      	ldrh	r3, [r7, #14]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b086      	sub	sp, #24
 8007dee:	af02      	add	r7, sp, #8
 8007df0:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f005 f9bc 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 8007e00:	4603      	mov	r3, r0
 8007e02:	81fb      	strh	r3, [r7, #14]
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 8007e0a:	89fb      	ldrh	r3, [r7, #14]
 8007e0c:	e0bf      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f005 f9d1 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	81fb      	strh	r3, [r7, #14]
 8007e22:	89fb      	ldrh	r3, [r7, #14]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 8007e28:	89fb      	ldrh	r3, [r7, #14]
 8007e2a:	e0b0      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d054      	beq.n	8007eea <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f004 fcf4 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8007e54:	4603      	mov	r3, r0
 8007e56:	81fb      	strh	r3, [r7, #14]
 8007e58:	89fb      	ldrh	r3, [r7, #14]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 8007e5e:	89fb      	ldrh	r3, [r7, #14]
 8007e60:	e095      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fbba 	bl	80085dc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	81fb      	strh	r3, [r7, #14]
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d037      	beq.n	8007ee2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 8007e72:	89fb      	ldrh	r3, [r7, #14]
 8007e74:	e08b      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8a1b      	ldrh	r3, [r3, #16]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2135      	movs	r1, #53	@ 0x35
 8007e82:	f005 fa21 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8007e86:	4603      	mov	r3, r0
 8007e88:	81fb      	strh	r3, [r7, #14]
 8007e8a:	89fb      	ldrh	r3, [r7, #14]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 8007e90:	89fb      	ldrh	r3, [r7, #14]
 8007e92:	e07c      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	335e      	adds	r3, #94	@ 0x5e
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	f00a ff41 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d015      	beq.n	8007edc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8007eb0:	89fb      	ldrh	r3, [r7, #14]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b12      	cmp	r3, #18
 8007eb6:	d101      	bne.n	8007ebc <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 8007eb8:	89fb      	ldrh	r3, [r7, #14]
 8007eba:	e068      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f00a ff3f 	bl	8012d44 <phpalI14443p3a_Sw_HaltA>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	81fb      	strh	r3, [r7, #14]
 8007eca:	89fb      	ldrh	r3, [r7, #14]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b12      	cmp	r3, #18
 8007ed0:	d101      	bne.n	8007ed6 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	e05b      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	737b      	strb	r3, [r7, #13]
 8007eda:	e002      	b.n	8007ee2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 8007edc:	7b7b      	ldrb	r3, [r7, #13]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 8007ee2:	7b7b      	ldrb	r3, [r7, #13]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d9c6      	bls.n	8007e76 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 8007ee8:	e04a      	b.n	8007f80 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	2102      	movs	r1, #2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f004 fc9f 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8007efe:	4603      	mov	r3, r0
 8007f00:	81fb      	strh	r3, [r7, #14]
 8007f02:	89fb      	ldrh	r3, [r7, #14]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	e040      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fb65 	bl	80085dc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8007f12:	4603      	mov	r3, r0
 8007f14:	81fb      	strh	r3, [r7, #14]
 8007f16:	89fb      	ldrh	r3, [r7, #14]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d02e      	beq.n	8007f7a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8007f1c:	89fb      	ldrh	r3, [r7, #14]
 8007f1e:	e036      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8a5b      	ldrh	r3, [r3, #18]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2135      	movs	r1, #53	@ 0x35
 8007f2c:	f005 f9cc 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8007f30:	4603      	mov	r3, r0
 8007f32:	81fb      	strh	r3, [r7, #14]
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
 8007f3c:	e027      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	33a2      	adds	r3, #162	@ 0xa2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	32af      	adds	r2, #175	@ 0xaf
 8007f4a:	9201      	str	r2, [sp, #4]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2200      	movs	r2, #0
 8007f52:	2100      	movs	r1, #0
 8007f54:	f00b fd79 	bl	8013a4a <phpalI14443p3b_Sw_WakeUpB>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007f5c:	89fb      	ldrh	r3, [r7, #14]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d007      	beq.n	8007f74 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8007f68:	89fb      	ldrh	r3, [r7, #14]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b12      	cmp	r3, #18
 8007f6e:	d104      	bne.n	8007f7a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8007f70:	89fb      	ldrh	r3, [r7, #14]
 8007f72:	e00c      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 8007f74:	7b7b      	ldrb	r3, [r7, #13]
 8007f76:	3301      	adds	r3, #1
 8007f78:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 8007f7a:	7b7b      	ldrb	r3, [r7, #13]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d9cf      	bls.n	8007f20 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8007f80:	89fb      	ldrh	r3, [r7, #14]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d001      	beq.n	8007f8c <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	e000      	b.n	8007f8e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 8007f8c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	607b      	str	r3, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	72fb      	strb	r3, [r7, #11]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8007faa:	2384      	movs	r3, #132	@ 0x84
 8007fac:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff fcc2 	bl	8007950 <phacDiscLoop_Sw_Int_Apply_PTGT>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 8007fd0:	8afb      	ldrh	r3, [r7, #22]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 8007fd6:	8afb      	ldrh	r3, [r7, #22]
 8007fd8:	e109      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8007fda:	2300      	movs	r3, #0
 8007fdc:	757b      	strb	r3, [r7, #21]
 8007fde:	e0e6      	b.n	80081ae <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d106      	bne.n	8007ff8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 8007fea:	7d3b      	ldrb	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 8007ff0:	7d7b      	ldrb	r3, [r7, #21]
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	f000 80e0 	beq.w	80081b8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ffc:	7d7b      	ldrb	r3, [r7, #21]
 8007ffe:	4413      	add	r3, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 8008004:	7cbb      	ldrb	r3, [r7, #18]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d002      	beq.n	8008010 <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 800800a:	7cbb      	ldrb	r3, [r7, #18]
 800800c:	2b03      	cmp	r3, #3
 800800e:	d103      	bne.n	8008018 <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 8008010:	7cfb      	ldrb	r3, [r7, #19]
 8008012:	2b01      	cmp	r3, #1
 8008014:	f000 80c7 	beq.w	80081a6 <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 8008018:	7aba      	ldrb	r2, [r7, #10]
 800801a:	7cbb      	ldrb	r3, [r7, #18]
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80bf 	beq.w	80081a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802e:	f107 0210 	add.w	r2, r7, #16
 8008032:	215f      	movs	r1, #95	@ 0x5f
 8008034:	4618      	mov	r0, r3
 8008036:	f006 fd95 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 800803a:	4603      	mov	r3, r0
 800803c:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 800803e:	8afb      	ldrh	r3, [r7, #22]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 8008044:	8afb      	ldrh	r3, [r7, #22]
 8008046:	e0d2      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 8008048:	8a3b      	ldrh	r3, [r7, #16]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d123      	bne.n	8008096 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 800804e:	7cbb      	ldrb	r3, [r7, #18]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d002      	beq.n	800805a <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 8008054:	7cbb      	ldrb	r3, [r7, #18]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d10b      	bne.n	8008072 <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800805a:	7cbb      	ldrb	r3, [r7, #18]
 800805c:	4619      	mov	r1, r3
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f002 f874 	bl	800a14c <phacDiscLoop_Sw_Int_Config_GTF>
 8008064:	4603      	mov	r3, r0
 8008066:	82fb      	strh	r3, [r7, #22]
 8008068:	8afb      	ldrh	r3, [r7, #22]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 800806e:	8afb      	ldrh	r3, [r7, #22]
 8008070:	e0bd      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008076:	7cba      	ldrb	r2, [r7, #18]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3208      	adds	r2, #8
 800807c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008080:	461a      	mov	r2, r3
 8008082:	2135      	movs	r1, #53	@ 0x35
 8008084:	f005 f920 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	82fb      	strh	r3, [r7, #22]
 800808c:	8afb      	ldrh	r3, [r7, #22]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 8008092:	8afb      	ldrh	r3, [r7, #22]
 8008094:	e0ab      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800809a:	7cbb      	ldrb	r3, [r7, #18]
 800809c:	4956      	ldr	r1, [pc, #344]	@ (80081f8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 800809e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f004 fbc8 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 80080ac:	4603      	mov	r3, r0
 80080ae:	82fb      	strh	r3, [r7, #22]
 80080b0:	8afb      	ldrh	r3, [r7, #22]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 80080b6:	8afb      	ldrh	r3, [r7, #22]
 80080b8:	e099      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fab8 	bl	8008630 <phacDiscLoop_Sw_Int_FieldOn>
 80080c0:	4603      	mov	r3, r0
 80080c2:	82fb      	strh	r3, [r7, #22]
 80080c4:	8afb      	ldrh	r3, [r7, #22]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 80080ca:	8afb      	ldrh	r3, [r7, #22]
 80080cc:	e08f      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 80080ce:	8a3b      	ldrh	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d123      	bne.n	800811c <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 80080d4:	7cbb      	ldrb	r3, [r7, #18]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d002      	beq.n	80080e0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 80080da:	7cbb      	ldrb	r3, [r7, #18]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d10b      	bne.n	80080f8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 80080e0:	7cbb      	ldrb	r3, [r7, #18]
 80080e2:	4619      	mov	r1, r3
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f002 f831 	bl	800a14c <phacDiscLoop_Sw_Int_Config_GTF>
 80080ea:	4603      	mov	r3, r0
 80080ec:	82fb      	strh	r3, [r7, #22]
 80080ee:	8afb      	ldrh	r3, [r7, #22]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d013      	beq.n	800811c <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	e07a      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80080fc:	7cba      	ldrb	r2, [r7, #18]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3208      	adds	r2, #8
 8008102:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008106:	461a      	mov	r2, r3
 8008108:	2135      	movs	r1, #53	@ 0x35
 800810a:	f005 f8dd 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800810e:	4603      	mov	r3, r0
 8008110:	82fb      	strh	r3, [r7, #22]
 8008112:	8afb      	ldrh	r3, [r7, #22]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 8008118:	8afb      	ldrh	r3, [r7, #22]
 800811a:	e068      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 800811c:	7cbb      	ldrb	r3, [r7, #18]
 800811e:	4a37      	ldr	r2, [pc, #220]	@ (80081fc <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 8008120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 800812c:	8afb      	ldrh	r3, [r7, #22]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b87      	cmp	r3, #135	@ 0x87
 8008132:	d123      	bne.n	800817c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800813a:	7cbb      	ldrb	r3, [r7, #18]
 800813c:	2101      	movs	r1, #1
 800813e:	fa01 f303 	lsl.w	r3, r1, r3
 8008142:	b2db      	uxtb	r3, r3
 8008144:	4313      	orrs	r3, r2
 8008146:	b2da      	uxtb	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 800814e:	7d3b      	ldrb	r3, [r7, #20]
 8008150:	3301      	adds	r3, #1
 8008152:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7d3a      	ldrb	r2, [r7, #20]
 8008174:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 8008176:	2301      	movs	r3, #1
 8008178:	74fb      	strb	r3, [r7, #19]
 800817a:	e005      	b.n	8008188 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 800817c:	8afb      	ldrh	r3, [r7, #22]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b12      	cmp	r3, #18
 8008182:	d101      	bne.n	8008188 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 8008184:	8afb      	ldrh	r3, [r7, #22]
 8008186:	e032      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 8008188:	7afa      	ldrb	r2, [r7, #11]
 800818a:	7cbb      	ldrb	r3, [r7, #18]
 800818c:	fa22 f303 	lsr.w	r3, r2, r3
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 8008198:	7d3b      	ldrb	r3, [r7, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7d3a      	ldrb	r2, [r7, #20]
 80081a2:	701a      	strb	r2, [r3, #0]
                break;
 80081a4:	e009      	b.n	80081ba <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 80081a6:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80081a8:	7d7b      	ldrb	r3, [r7, #21]
 80081aa:	3301      	adds	r3, #1
 80081ac:	757b      	strb	r3, [r7, #21]
 80081ae:	7d7b      	ldrb	r3, [r7, #21]
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	f67f af15 	bls.w	8007fe0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 80081b6:	e000      	b.n	80081ba <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 80081b8:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 80081ba:	7d3b      	ldrb	r3, [r7, #20]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d105      	bne.n	80081cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7d3a      	ldrb	r2, [r7, #20]
 80081c4:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80081c6:	f244 0387 	movw	r3, #16519	@ 0x4087
 80081ca:	e010      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 80081cc:	7d3b      	ldrb	r3, [r7, #20]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d905      	bls.n	80081de <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7d3a      	ldrb	r2, [r7, #20]
 80081d6:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80081d8:	f244 0388 	movw	r3, #16520	@ 0x4088
 80081dc:	e007      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 80081de:	8afb      	ldrh	r3, [r7, #22]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d102      	bne.n	80081ec <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80081e6:	f244 0384 	movw	r3, #16516	@ 0x4084
 80081ea:	e000      	b.n	80081ee <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 80081ec:	8afb      	ldrh	r3, [r7, #22]
    }
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	0801ffc0 	.word	0x0801ffc0
 80081fc:	0801fff0 	.word	0x0801fff0

08008200 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	460b      	mov	r3, r1
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800820e:	2384      	movs	r3, #132	@ 0x84
 8008210:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 8008222:	2300      	movs	r3, #0
 8008224:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 8008226:	2300      	movs	r3, #0
 8008228:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 800822a:	2300      	movs	r3, #0
 800822c:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d105      	bne.n	800824c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008244:	3301      	adds	r3, #1
 8008246:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 8008248:	2b01      	cmp	r3, #1
 800824a:	d002      	beq.n	8008252 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 800824c:	f244 0325 	movw	r3, #16421	@ 0x4025
 8008250:	e142      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008256:	f107 0212 	add.w	r2, r7, #18
 800825a:	215f      	movs	r1, #95	@ 0x5f
 800825c:	4618      	mov	r0, r3
 800825e:	f006 fc81 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8008262:	4603      	mov	r3, r0
 8008264:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 8008266:	8bfb      	ldrh	r3, [r7, #30]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 800826c:	8bfb      	ldrh	r3, [r7, #30]
 800826e:	e133      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 8008270:	8a7b      	ldrh	r3, [r7, #18]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 8104 	bne.w	8008480 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	2201      	movs	r2, #1
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f004 fada 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8008288:	4603      	mov	r3, r0
 800828a:	83fb      	strh	r3, [r7, #30]
 800828c:	8bfb      	ldrh	r3, [r7, #30]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 8008292:	8bfb      	ldrh	r3, [r7, #30]
 8008294:	e120      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 f9a0 	bl	80085dc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800829c:	4603      	mov	r3, r0
 800829e:	83fb      	strh	r3, [r7, #30]
 80082a0:	8bfb      	ldrh	r3, [r7, #30]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 80082a6:	8bfb      	ldrh	r3, [r7, #30]
 80082a8:	e116      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ae:	f107 0212 	add.w	r2, r7, #18
 80082b2:	215f      	movs	r1, #95	@ 0x5f
 80082b4:	4618      	mov	r0, r3
 80082b6:	f006 fc55 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 80082ba:	4603      	mov	r3, r0
 80082bc:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 80082be:	8bfb      	ldrh	r3, [r7, #30]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 80082c4:	8bfb      	ldrh	r3, [r7, #30]
 80082c6:	e107      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 80082c8:	8a7b      	ldrh	r3, [r7, #18]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	f000 80d8 	beq.w	8008480 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 80082d0:	f244 030a 	movw	r3, #16394	@ 0x400a
 80082d4:	e100      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	773b      	strb	r3, [r7, #28]
 80082da:	e0bf      	b.n	800845c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082e0:	7f3b      	ldrb	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 80082e8:	7d3b      	ldrb	r3, [r7, #20]
 80082ea:	2201      	movs	r2, #1
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 80082f2:	7afa      	ldrb	r2, [r7, #11]
 80082f4:	7d7b      	ldrb	r3, [r7, #21]
 80082f6:	4013      	ands	r3, r2
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 80ab 	beq.w	8008456 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 8008300:	7e7b      	ldrb	r3, [r7, #25]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 80a7 	bne.w	8008456 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800830e:	7d7b      	ldrb	r3, [r7, #21]
 8008310:	4013      	ands	r3, r2
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 809c 	bne.w	8008452 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 800831a:	7d7b      	ldrb	r3, [r7, #21]
 800831c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 8008324:	2301      	movs	r3, #1
 8008326:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 800832e:	7d7b      	ldrb	r3, [r7, #21]
 8008330:	4013      	ands	r3, r2
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 8008338:	7ebb      	ldrb	r3, [r7, #26]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d102      	bne.n	8008344 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fbd6 	bl	8007af0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8008344:	7d7b      	ldrb	r3, [r7, #21]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d12c      	bne.n	80083a4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d011      	beq.n	800837c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 8008358:	7d3a      	ldrb	r2, [r7, #20]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3208      	adds	r2, #8
 800835e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 8008362:	f240 424c 	movw	r2, #1100	@ 0x44c
 8008366:	4293      	cmp	r3, r2
 8008368:	d908      	bls.n	800837c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 800836a:	7d3a      	ldrb	r2, [r7, #20]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3208      	adds	r2, #8
 8008370:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008374:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8008378:	82fb      	strh	r3, [r7, #22]
 800837a:	e005      	b.n	8008388 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 800837c:	7d3a      	ldrb	r2, [r7, #20]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3208      	adds	r2, #8
 8008382:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008386:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	8afa      	ldrh	r2, [r7, #22]
 800838e:	2135      	movs	r1, #53	@ 0x35
 8008390:	4618      	mov	r0, r3
 8008392:	f004 ff99 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8008396:	4603      	mov	r3, r0
 8008398:	83fb      	strh	r3, [r7, #30]
 800839a:	8bfb      	ldrh	r3, [r7, #30]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d013      	beq.n	80083c8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 80083a0:	8bfb      	ldrh	r3, [r7, #30]
 80083a2:	e099      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80083a8:	7d3a      	ldrb	r2, [r7, #20]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3208      	adds	r2, #8
 80083ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80083b2:	461a      	mov	r2, r3
 80083b4:	2135      	movs	r1, #53	@ 0x35
 80083b6:	f004 ff87 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80083ba:	4603      	mov	r3, r0
 80083bc:	83fb      	strh	r3, [r7, #30]
 80083be:	8bfb      	ldrh	r3, [r7, #30]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 80083c4:	8bfb      	ldrh	r3, [r7, #30]
 80083c6:	e087      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083cc:	7d3b      	ldrb	r3, [r7, #20]
 80083ce:	4944      	ldr	r1, [pc, #272]	@ (80084e0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 80083d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	4610      	mov	r0, r2
 80083da:	f004 fa2f 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 80083de:	4603      	mov	r3, r0
 80083e0:	83fb      	strh	r3, [r7, #30]
 80083e2:	8bfb      	ldrh	r3, [r7, #30]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 80083e8:	8bfb      	ldrh	r3, [r7, #30]
 80083ea:	e075      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 80083ec:	7d3b      	ldrb	r3, [r7, #20]
 80083ee:	4a3d      	ldr	r2, [pc, #244]	@ (80084e4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 80083f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 80083fc:	8bfb      	ldrh	r3, [r7, #30]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b87      	cmp	r3, #135	@ 0x87
 8008402:	d10c      	bne.n	800841e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800840a:	7d7b      	ldrb	r3, [r7, #21]
 800840c:	4313      	orrs	r3, r2
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 8008416:	7f7b      	ldrb	r3, [r7, #29]
 8008418:	3301      	adds	r3, #1
 800841a:	777b      	strb	r3, [r7, #29]
 800841c:	e005      	b.n	800842a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 800841e:	8bfb      	ldrh	r3, [r7, #30]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b12      	cmp	r3, #18
 8008424:	d101      	bne.n	800842a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 8008426:	8bfb      	ldrh	r3, [r7, #30]
 8008428:	e056      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8008430:	7d7b      	ldrb	r3, [r7, #21]
 8008432:	4013      	ands	r3, r2
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 800843a:	7ebb      	ldrb	r3, [r7, #26]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d105      	bne.n	800844c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fb55 	bl	8007af0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 8008446:	2301      	movs	r3, #1
 8008448:	76fb      	strb	r3, [r7, #27]
 800844a:	e004      	b.n	8008456 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 800844c:	2300      	movs	r3, #0
 800844e:	76fb      	strb	r3, [r7, #27]
 8008450:	e001      	b.n	8008456 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 8008452:	2301      	movs	r3, #1
 8008454:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8008456:	7f3b      	ldrb	r3, [r7, #28]
 8008458:	3301      	adds	r3, #1
 800845a:	773b      	strb	r3, [r7, #28]
 800845c:	7f3b      	ldrb	r3, [r7, #28]
 800845e:	2b05      	cmp	r3, #5
 8008460:	f67f af3c 	bls.w	80082dc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 8008464:	7f7b      	ldrb	r3, [r7, #29]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 800846a:	2301      	movs	r3, #1
 800846c:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 800846e:	7ebb      	ldrb	r3, [r7, #26]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d105      	bne.n	8008480 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 8008474:	7efb      	ldrb	r3, [r7, #27]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d102      	bne.n	8008480 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7ff fb38 	bl	8007af0 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 8008480:	7e7b      	ldrb	r3, [r7, #25]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f43f af27 	beq.w	80082d6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 8008488:	7f7b      	ldrb	r3, [r7, #29]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d105      	bne.n	800849a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7f7a      	ldrb	r2, [r7, #29]
 8008492:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 8008494:	2387      	movs	r3, #135	@ 0x87
 8008496:	83fb      	strh	r3, [r7, #30]
 8008498:	e00e      	b.n	80084b8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 800849a:	7f7b      	ldrb	r3, [r7, #29]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d905      	bls.n	80084ac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7f7a      	ldrb	r2, [r7, #29]
 80084a4:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 80084a6:	2388      	movs	r3, #136	@ 0x88
 80084a8:	83fb      	strh	r3, [r7, #30]
 80084aa:	e005      	b.n	80084b8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 80084ac:	8bfb      	ldrh	r3, [r7, #30]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 80084b4:	2384      	movs	r3, #132	@ 0x84
 80084b6:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 80084b8:	8bfb      	ldrh	r3, [r7, #30]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 80084be:	8bfb      	ldrh	r3, [r7, #30]
 80084c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d106      	bne.n	80084d6 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 80084c8:	8bfb      	ldrh	r3, [r7, #30]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	e000      	b.n	80084d8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 80084d6:	8bfb      	ldrh	r3, [r7, #30]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	0801ffc0 	.word	0x0801ffc0
 80084e4:	0801fff0 	.word	0x0801fff0

080084e8 <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	4a15      	ldr	r2, [pc, #84]	@ (800855c <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 8008508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	4798      	blx	r3
 8008510:	4603      	mov	r3, r0
 8008512:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008514:	89fb      	ldrh	r3, [r7, #14]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d112      	bne.n	8008542 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	2201      	movs	r2, #1
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	b2da      	uxtb	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008532:	2b01      	cmp	r3, #1
 8008534:	d902      	bls.n	800853c <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 8008536:	f244 038a 	movw	r3, #16522	@ 0x408a
 800853a:	e00a      	b.n	8008552 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800853c:	f244 0389 	movw	r3, #16521	@ 0x4089
 8008540:	e007      	b.n	8008552 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8008542:	89fb      	ldrh	r3, [r7, #14]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b01      	cmp	r3, #1
 8008548:	d102      	bne.n	8008550 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800854a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800854e:	e000      	b.n	8008552 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 8008550:	89fb      	ldrh	r3, [r7, #14]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	0801ffd8 	.word	0x0801ffd8

08008560 <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
 800856c:	4613      	mov	r3, r2
 800856e:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	4a17      	ldr	r2, [pc, #92]	@ (80085d8 <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 800857c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008580:	78ba      	ldrb	r2, [r7, #2]
 8008582:	4611      	mov	r1, r2
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
 8008588:	4603      	mov	r3, r0
 800858a:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	2201      	movs	r2, #1
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	b2da      	uxtb	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 80085a4:	f244 038b 	movw	r3, #16523	@ 0x408b
 80085a8:	e012      	b.n	80085d0 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 80085aa:	89fb      	ldrh	r3, [r7, #14]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b8e      	cmp	r3, #142	@ 0x8e
 80085b0:	d003      	beq.n	80085ba <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 80085b2:	89fb      	ldrh	r3, [r7, #14]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b8d      	cmp	r3, #141	@ 0x8d
 80085b8:	d109      	bne.n	80085ce <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	2201      	movs	r2, #1
 80085be:	fa02 f303 	lsl.w	r3, r2, r3
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 80085ca:	89fb      	ldrh	r3, [r7, #14]
 80085cc:	e000      	b.n	80085d0 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 80085ce:	89fb      	ldrh	r3, [r7, #14]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	08020008 	.word	0x08020008

080085dc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80085e4:	2300      	movs	r3, #0
 80085e6:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ec:	2200      	movs	r2, #0
 80085ee:	2156      	movs	r1, #86	@ 0x56
 80085f0:	4618      	mov	r0, r3
 80085f2:	f004 fe69 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80085f6:	4603      	mov	r3, r0
 80085f8:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 80085fa:	89fb      	ldrh	r3, [r7, #14]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b23      	cmp	r3, #35	@ 0x23
 8008600:	d005      	beq.n	800860e <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 800860a:	89fb      	ldrh	r3, [r7, #14]
 800860c:	e00c      	b.n	8008628 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008612:	4618      	mov	r0, r3
 8008614:	f004 fd5a 	bl	800d0cc <phhalHw_Pn5180_FieldOn>
 8008618:	4603      	mov	r3, r0
 800861a:	81fb      	strh	r3, [r7, #14]
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 8008622:	89fb      	ldrh	r3, [r7, #14]
 8008624:	e000      	b.n	8008628 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 8008626:	89fb      	ldrh	r3, [r7, #14]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008638:	2300      	movs	r3, #0
 800863a:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	2201      	movs	r2, #1
 8008642:	2156      	movs	r1, #86	@ 0x56
 8008644:	4618      	mov	r0, r3
 8008646:	f004 fe3f 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800864a:	4603      	mov	r3, r0
 800864c:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b23      	cmp	r3, #35	@ 0x23
 8008654:	d005      	beq.n	8008662 <phacDiscLoop_Sw_Int_FieldOn+0x32>
 8008656:	89fb      	ldrh	r3, [r7, #14]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 800865e:	89fb      	ldrh	r3, [r7, #14]
 8008660:	e01d      	b.n	800869e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008666:	4618      	mov	r0, r3
 8008668:	f004 fd30 	bl	800d0cc <phhalHw_Pn5180_FieldOn>
 800866c:	4603      	mov	r3, r0
 800866e:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 8008670:	89fb      	ldrh	r3, [r7, #14]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b0a      	cmp	r3, #10
 8008676:	d102      	bne.n	800867e <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 8008678:	f244 0382 	movw	r3, #16514	@ 0x4082
 800867c:	e00f      	b.n	800869e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 800867e:	89fb      	ldrh	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 800868e:	89fb      	ldrh	r3, [r7, #14]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	b29b      	uxth	r3, r3
 8008694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008698:	b29b      	uxth	r3, r3
 800869a:	e000      	b.n	800869e <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 800869c:	89fb      	ldrh	r3, [r7, #14]
    }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	4603      	mov	r3, r0
 80086ae:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00f      	beq.n	80086d8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 80086b8:	88fb      	ldrh	r3, [r7, #6]
 80086ba:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d00b      	beq.n	80086d8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 80086c4:	2b05      	cmp	r3, #5
 80086c6:	d007      	beq.n	80086d8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d003      	beq.n	80086d8 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 80086d4:	2b06      	cmp	r3, #6
 80086d6:	d101      	bne.n	80086dc <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 80086dc:	2300      	movs	r3, #0
    }
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7f9b      	ldrb	r3, [r3, #30]
 80086fe:	f023 0301 	bic.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
 800870c:	e014      	b.n	8008738 <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 800870e:	7bfa      	ldrb	r2, [r7, #15]
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	440b      	add	r3, r1
 800871a:	336c      	adds	r3, #108	@ 0x6c
 800871c:	2200      	movs	r2, #0
 800871e:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 8008720:	7bfa      	ldrb	r2, [r7, #15]
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	4613      	mov	r3, r2
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	440b      	add	r3, r1
 800872c:	336a      	adds	r3, #106	@ 0x6a
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	3301      	adds	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0e7      	beq.n	800870e <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	335e      	adds	r3, #94	@ 0x5e
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f00a faec 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 800874e:	4603      	mov	r3, r0
 8008750:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8008752:	89bb      	ldrh	r3, [r7, #12]
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff ffa6 	bl	80086a6 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d02d      	beq.n	80087bc <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008760:	89bb      	ldrh	r3, [r7, #12]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b03      	cmp	r3, #3
 8008766:	d106      	bne.n	8008776 <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7f9b      	ldrb	r3, [r3, #30]
 800876c:	f043 0301 	orr.w	r3, r3, #1
 8008770:	b2da      	uxtb	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800877e:	2107      	movs	r1, #7
 8008780:	4618      	mov	r0, r3
 8008782:	f004 fda1 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8008786:	4603      	mov	r3, r0
 8008788:	81bb      	strh	r3, [r7, #12]
 800878a:	89bb      	ldrh	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 8008790:	89bb      	ldrh	r3, [r7, #12]
 8008792:	e014      	b.n	80087be <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008798:	4618      	mov	r0, r3
 800879a:	f00a fad3 	bl	8012d44 <phpalI14443p3a_Sw_HaltA>
 800879e:	4603      	mov	r3, r0
 80087a0:	81bb      	strh	r3, [r7, #12]
 80087a2:	89bb      	ldrh	r3, [r7, #12]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b12      	cmp	r3, #18
 80087a8:	d101      	bne.n	80087ae <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 80087aa:	89bb      	ldrh	r3, [r7, #12]
 80087ac:	e007      	b.n	80087be <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80087b6:	f244 0387 	movw	r3, #16519	@ 0x4087
 80087ba:	e000      	b.n	80087be <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 80087bc:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 80087c8:	b590      	push	{r4, r7, lr}
 80087ca:	b08b      	sub	sp, #44	@ 0x2c
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 80087d0:	2300      	movs	r3, #0
 80087d2:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 80087d4:	f107 030c 	add.w	r3, r7, #12
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 80087ec:	2300      	movs	r3, #0
 80087ee:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7f9b      	ldrb	r3, [r3, #30]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7a9b      	ldrb	r3, [r3, #10]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800880c:	f244 0385 	movw	r3, #16517	@ 0x4085
 8008810:	e2d9      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	8a1b      	ldrh	r3, [r3, #16]
 800881a:	461a      	mov	r2, r3
 800881c:	2135      	movs	r1, #53	@ 0x35
 800881e:	f004 fd53 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8008822:	4603      	mov	r3, r0
 8008824:	83fb      	strh	r3, [r7, #30]
 8008826:	8bfb      	ldrh	r3, [r7, #30]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 800882c:	8bfb      	ldrh	r3, [r7, #30]
 800882e:	e2ca      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008834:	2101      	movs	r1, #1
 8008836:	4618      	mov	r0, r3
 8008838:	f004 f800 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 800883c:	4603      	mov	r3, r0
 800883e:	83fb      	strh	r3, [r7, #30]
 8008840:	8bfb      	ldrh	r3, [r7, #30]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 8008846:	8bfb      	ldrh	r3, [r7, #30]
 8008848:	e2bd      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	335e      	adds	r3, #94	@ 0x5e
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f00a fa66 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 800885a:	4603      	mov	r3, r0
 800885c:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800885e:	8bfb      	ldrh	r3, [r7, #30]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d109      	bne.n	800887a <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008870:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008874:	e2a7      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 8008876:	2301      	movs	r3, #1
 8008878:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800888a:	8bfb      	ldrh	r3, [r7, #30]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d14a      	bne.n	8008928 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8008898:	2b00      	cmp	r3, #0
 800889a:	f040 809e 	bne.w	80089da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	2201      	movs	r2, #1
 80088a4:	2120      	movs	r1, #32
 80088a6:	4618      	mov	r0, r3
 80088a8:	f004 fd0e 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80088ac:	4603      	mov	r3, r0
 80088ae:	83fb      	strh	r3, [r7, #30]
 80088b0:	8bfb      	ldrh	r3, [r7, #30]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 80088b6:	8bfb      	ldrh	r3, [r7, #30]
 80088b8:	e285      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	336a      	adds	r3, #106	@ 0x6a
 80088be:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3360      	adds	r3, #96	@ 0x60
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4619      	mov	r1, r3
 80088cc:	f003 faf9 	bl	800bec2 <phalT1T_Sw_ReadUID>
 80088d0:	4603      	mov	r3, r0
 80088d2:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80088d4:	8bfb      	ldrh	r3, [r7, #30]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d115      	bne.n	8008908 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7f9b      	ldrb	r3, [r3, #30]
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 8008902:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008906:	e25e      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008908:	8bfb      	ldrh	r3, [r7, #30]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b03      	cmp	r3, #3
 800890e:	d109      	bne.n	8008924 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7f9b      	ldrb	r3, [r3, #30]
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800891e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008922:	e250      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 8008924:	8bfb      	ldrh	r3, [r7, #30]
 8008926:	e24e      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8008928:	8bfb      	ldrh	r3, [r7, #30]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d010      	beq.n	8008952 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7a9b      	ldrb	r3, [r3, #10]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10c      	bne.n	8008952 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	7f9b      	ldrb	r3, [r3, #30]
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	b2da      	uxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	779a      	strb	r2, [r3, #30]
            return status;
 800894e:	8bfb      	ldrh	r3, [r7, #30]
 8008950:	e239      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008958:	2b01      	cmp	r3, #1
 800895a:	d131      	bne.n	80089c0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008960:	e01b      	b.n	800899a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 8008962:	7ebb      	ldrb	r3, [r7, #26]
 8008964:	3301      	adds	r3, #1
 8008966:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f004 fc24 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8008978:	4603      	mov	r3, r0
 800897a:	83fb      	strh	r3, [r7, #30]
 800897c:	8bfb      	ldrh	r3, [r7, #30]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 8008982:	8bfb      	ldrh	r3, [r7, #30]
 8008984:	e21f      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	335e      	adds	r3, #94	@ 0x5e
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f00a f9c8 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 8008996:	4603      	mov	r3, r0
 8008998:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800899a:	8bfb      	ldrh	r3, [r7, #30]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d102      	bne.n	80089a8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 80089a2:	7ebb      	ldrb	r3, [r7, #26]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d9dc      	bls.n	8008962 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	7f9b      	ldrb	r3, [r3, #30]
 80089ac:	f023 0301 	bic.w	r3, r3, #1
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 80089b6:	8bfb      	ldrh	r3, [r7, #30]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00e      	beq.n	80089da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 80089bc:	8bfb      	ldrh	r3, [r7, #30]
 80089be:	e202      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 80089c0:	8bfb      	ldrh	r3, [r7, #30]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d008      	beq.n	80089da <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	7f9b      	ldrb	r3, [r3, #30]
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	779a      	strb	r2, [r3, #30]
                return status;
 80089d6:	8bfb      	ldrh	r3, [r7, #30]
 80089d8:	e1f5      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 81d9 	bne.w	8008d98 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7f9b      	ldrb	r3, [r3, #30]
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 80089f4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80089f8:	e1e5      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7a9b      	ldrb	r3, [r3, #10]
 80089fe:	7f3a      	ldrb	r2, [r7, #28]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	f200 81c6 	bhi.w	8008d92 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	7f9b      	ldrb	r3, [r3, #30]
 8008a0a:	f023 0301 	bic.w	r3, r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 8008a14:	2300      	movs	r3, #0
 8008a16:	76fb      	strb	r3, [r7, #27]
 8008a18:	e13f      	b.n	8008c9a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 8008a1e:	e0a8      	b.n	8008b72 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008a24:	7efb      	ldrb	r3, [r7, #27]
 8008a26:	4a9a      	ldr	r2, [pc, #616]	@ (8008c90 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008a28:	5cd1      	ldrb	r1, [r2, r3]
 8008a2a:	7cfc      	ldrb	r4, [r7, #19]
 8008a2c:	f107 020c 	add.w	r2, r7, #12
 8008a30:	f107 0313 	add.w	r3, r7, #19
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	f00a f9d8 	bl	8012df2 <phpalI14443p3a_Sw_Anticollision>
 8008a42:	4603      	mov	r3, r0
 8008a44:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d12e      	bne.n	8008aae <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008a54:	e024      	b.n	8008aa0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 8008a56:	7ebb      	ldrb	r3, [r7, #26]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a60:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f004 fbaa 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	83fb      	strh	r3, [r7, #30]
 8008a70:	8bfb      	ldrh	r3, [r7, #30]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 8008a76:	8bfb      	ldrh	r3, [r7, #30]
 8008a78:	e1a5      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008a7e:	7efb      	ldrb	r3, [r7, #27]
 8008a80:	4a83      	ldr	r2, [pc, #524]	@ (8008c90 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008a82:	5cd1      	ldrb	r1, [r2, r3]
 8008a84:	7cfc      	ldrb	r4, [r7, #19]
 8008a86:	f107 020c 	add.w	r2, r7, #12
 8008a8a:	f107 0313 	add.w	r3, r7, #19
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4623      	mov	r3, r4
 8008a98:	f00a f9ab 	bl	8012df2 <phpalI14443p3a_Sw_Anticollision>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008aa0:	8bfb      	ldrh	r3, [r7, #30]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d102      	bne.n	8008aae <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 8008aa8:	7ebb      	ldrb	r3, [r7, #26]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d9d3      	bls.n	8008a56 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008aae:	8bfb      	ldrh	r3, [r7, #30]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d158      	bne.n	8008b68 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d102      	bne.n	8008ac6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8008ac0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008ac4:	e17f      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7f9b      	ldrb	r3, [r3, #30]
 8008aca:	f043 0301 	orr.w	r3, r3, #1
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7a9b      	ldrb	r3, [r3, #10]
 8008ad8:	7f3a      	ldrb	r2, [r7, #28]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d301      	bcc.n	8008ae2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e171      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 8008ae2:	7cfb      	ldrb	r3, [r7, #19]
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	dc1d      	bgt.n	8008b28 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 8008aec:	7cfb      	ldrb	r3, [r7, #19]
 8008aee:	3301      	adds	r3, #1
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 8008af4:	7cfb      	ldrb	r3, [r7, #19]
 8008af6:	091b      	lsrs	r3, r3, #4
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	3320      	adds	r3, #32
 8008afc:	443b      	add	r3, r7
 8008afe:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8008b02:	7cfb      	ldrb	r3, [r7, #19]
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	7cf9      	ldrb	r1, [r7, #19]
 8008b14:	0909      	lsrs	r1, r1, #4
 8008b16:	b2c9      	uxtb	r1, r1
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	f101 0320 	add.w	r3, r1, #32
 8008b20:	443b      	add	r3, r7
 8008b22:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008b26:	e024      	b.n	8008b72 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 8008b28:	7cfb      	ldrb	r3, [r7, #19]
 8008b2a:	091b      	lsrs	r3, r3, #4
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	3301      	adds	r3, #1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	011b      	lsls	r3, r3, #4
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 8008b38:	7cfb      	ldrb	r3, [r7, #19]
 8008b3a:	091b      	lsrs	r3, r3, #4
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	3320      	adds	r3, #32
 8008b44:	443b      	add	r3, r7
 8008b46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8008b4a:	7cfa      	ldrb	r2, [r7, #19]
 8008b4c:	0912      	lsrs	r2, r2, #4
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	3a01      	subs	r2, #1
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	4611      	mov	r1, r2
 8008b56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	f101 0320 	add.w	r3, r1, #32
 8008b60:	443b      	add	r3, r7
 8008b62:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008b66:	e004      	b.n	8008b72 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 8008b68:	8bfb      	ldrh	r3, [r7, #30]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 8008b6e:	8bfb      	ldrh	r3, [r7, #30]
 8008b70:	e129      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 8008b72:	7cfb      	ldrb	r3, [r7, #19]
 8008b74:	2b40      	cmp	r3, #64	@ 0x40
 8008b76:	f47f af53 	bne.w	8008a20 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 8008b7a:	7e7b      	ldrb	r3, [r7, #25]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d12d      	bne.n	8008bdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7f9b      	ldrb	r3, [r3, #30]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d127      	bne.n	8008bdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 8008b8c:	7f3a      	ldrb	r2, [r7, #28]
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	440b      	add	r3, r1
 8008b98:	335e      	adds	r3, #94	@ 0x5e
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 8008ba4:	7efb      	ldrb	r3, [r7, #27]
 8008ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8008c90 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008ba8:	5cd3      	ldrb	r3, [r2, r3]
 8008baa:	2b93      	cmp	r3, #147	@ 0x93
 8008bac:	d010      	beq.n	8008bd0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 8008bae:	7f3a      	ldrb	r2, [r7, #28]
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	440b      	add	r3, r1
 8008bba:	335e      	adds	r3, #94	@ 0x5e
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d10a      	bne.n	8008bdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 8008bc6:	7efb      	ldrb	r3, [r7, #27]
 8008bc8:	4a31      	ldr	r2, [pc, #196]	@ (8008c90 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008bca:	5cd3      	ldrb	r3, [r2, r3]
 8008bcc:	2b95      	cmp	r3, #149	@ 0x95
 8008bce:	d105      	bne.n	8008bdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 8008bd0:	7b3b      	ldrb	r3, [r7, #12]
 8008bd2:	2b88      	cmp	r3, #136	@ 0x88
 8008bd4:	d102      	bne.n	8008bdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 8008bd6:	f244 0306 	movw	r3, #16390	@ 0x4006
 8008bda:	e0f4      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008be0:	7efb      	ldrb	r3, [r7, #27]
 8008be2:	4a2b      	ldr	r2, [pc, #172]	@ (8008c90 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008be4:	5cd1      	ldrb	r1, [r2, r3]
 8008be6:	7f3a      	ldrb	r2, [r7, #28]
 8008be8:	4613      	mov	r3, r2
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	1a9b      	subs	r3, r3, r2
 8008bee:	3360      	adds	r3, #96	@ 0x60
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	330b      	adds	r3, #11
 8008bf6:	f107 020c 	add.w	r2, r7, #12
 8008bfa:	f00a fb31 	bl	8013260 <phpalI14443p3a_Sw_Select>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d12e      	bne.n	8008c6a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008c10:	e024      	b.n	8008c5c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 8008c12:	7ebb      	ldrb	r3, [r7, #26]
 8008c14:	3301      	adds	r3, #1
 8008c16:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f004 facc 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	83fb      	strh	r3, [r7, #30]
 8008c2c:	8bfb      	ldrh	r3, [r7, #30]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 8008c32:	8bfb      	ldrh	r3, [r7, #30]
 8008c34:	e0c7      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008c3a:	7efb      	ldrb	r3, [r7, #27]
 8008c3c:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 8008c3e:	5cd1      	ldrb	r1, [r2, r3]
 8008c40:	7f3a      	ldrb	r2, [r7, #28]
 8008c42:	4613      	mov	r3, r2
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	3360      	adds	r3, #96	@ 0x60
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	330b      	adds	r3, #11
 8008c50:	f107 020c 	add.w	r2, r7, #12
 8008c54:	f00a fb04 	bl	8013260 <phpalI14443p3a_Sw_Select>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8008c5c:	8bfb      	ldrh	r3, [r7, #30]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d102      	bne.n	8008c6a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 8008c64:	7ebb      	ldrb	r3, [r7, #26]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d9d3      	bls.n	8008c12 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008c6a:	8bfb      	ldrh	r3, [r7, #30]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10c      	bne.n	8008c8c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 8008c72:	7f3a      	ldrb	r2, [r7, #28]
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	336b      	adds	r3, #107	@ 0x6b
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d104      	bne.n	8008c94 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 8008c8a:	e00a      	b.n	8008ca2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 8008c8c:	8bfb      	ldrh	r3, [r7, #30]
 8008c8e:	e09a      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 8008c90:	08020020 	.word	0x08020020
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 8008c94:	7efb      	ldrb	r3, [r7, #27]
 8008c96:	3301      	adds	r3, #1
 8008c98:	76fb      	strb	r3, [r7, #27]
 8008c9a:	7efb      	ldrb	r3, [r7, #27]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	f67f aebc 	bls.w	8008a1a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 8008ca2:	8bfb      	ldrh	r3, [r7, #30]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d174      	bne.n	8008d92 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008cac:	7f3a      	ldrb	r2, [r7, #28]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	011b      	lsls	r3, r3, #4
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	3358      	adds	r3, #88	@ 0x58
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f103 0108 	add.w	r1, r3, #8
 8008cbe:	7f3a      	ldrb	r2, [r7, #28]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	3360      	adds	r3, #96	@ 0x60
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4413      	add	r3, r2
 8008ccc:	330a      	adds	r3, #10
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f00a fd97 	bl	8013802 <phpalI14443p3a_Sw_GetSerialNo>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 8008cd8:	8bfb      	ldrh	r3, [r7, #30]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 8008cde:	8bfb      	ldrh	r3, [r7, #30]
 8008ce0:	e071      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 8008ce2:	7f3b      	ldrb	r3, [r7, #28]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7f9b      	ldrb	r3, [r3, #30]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d057      	beq.n	8008da4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	7a9b      	ldrb	r3, [r3, #10]
 8008cf8:	7f3a      	ldrb	r2, [r7, #28]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d252      	bcs.n	8008da4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	4618      	mov	r0, r3
 8008d04:	f00a f81e 	bl	8012d44 <phpalI14443p3a_Sw_HaltA>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 8008d0c:	8bfb      	ldrh	r3, [r7, #30]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 8008d12:	8bfb      	ldrh	r3, [r7, #30]
 8008d14:	e057      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 8008d16:	7f3b      	ldrb	r3, [r7, #28]
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	440b      	add	r3, r1
 8008d24:	336c      	adds	r3, #108	@ 0x6c
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008d2e:	7f3a      	ldrb	r2, [r7, #28]
 8008d30:	4613      	mov	r3, r2
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	3358      	adds	r3, #88	@ 0x58
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3306      	adds	r3, #6
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f009 ffe2 	bl	8012d08 <phpalI14443p3a_Sw_RequestA>
 8008d44:	4603      	mov	r3, r0
 8008d46:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8008d48:	8bfb      	ldrh	r3, [r7, #30]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d112      	bne.n	8008d76 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 8008d50:	7f3a      	ldrb	r2, [r7, #28]
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	335e      	adds	r3, #94	@ 0x5e
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d116      	bne.n	8008d92 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7f9b      	ldrb	r3, [r3, #30]
 8008d68:	f043 0301 	orr.w	r3, r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e027      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8008d76:	8bfb      	ldrh	r3, [r7, #30]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d107      	bne.n	8008d8e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7f9b      	ldrb	r3, [r3, #30]
 8008d82:	f043 0301 	orr.w	r3, r3, #1
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	779a      	strb	r2, [r3, #30]
 8008d8c:	e001      	b.n	8008d92 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 8008d8e:	8bfb      	ldrh	r3, [r7, #30]
 8008d90:	e019      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 8008d92:	7f7b      	ldrb	r3, [r7, #29]
 8008d94:	3301      	adds	r3, #1
 8008d96:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	7a9b      	ldrb	r3, [r3, #10]
 8008d9c:	7f7a      	ldrb	r2, [r7, #29]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	f67f ae2b 	bls.w	80089fa <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7f3a      	ldrb	r2, [r7, #28]
 8008da8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7f3a      	ldrb	r2, [r7, #28]
 8008db0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8008dbe:	f244 0385 	movw	r3, #16517	@ 0x4085
 8008dc2:	e000      	b.n	8008dc6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 8008dc4:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3724      	adds	r7, #36	@ 0x24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd90      	pop	{r4, r7, pc}
 8008dce:	bf00      	nop

08008dd0 <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 8008dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dd2:	b08f      	sub	sp, #60	@ 0x3c
 8008dd4:	af04      	add	r7, sp, #16
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d202      	bcs.n	8008df8 <phacDiscLoop_Sw_Int_ActivateA+0x28>
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <phacDiscLoop_Sw_Int_ActivateA+0x2e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008df8:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008dfc:	e1d1      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d902      	bls.n	8008e0e <phacDiscLoop_Sw_Int_ActivateA+0x3e>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 8008e08:	f244 037f 	movw	r3, #16511	@ 0x407f
 8008e0c:	e1c9      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	1a9b      	subs	r3, r3, r2
 8008e18:	440b      	add	r3, r1
 8008e1a:	336c      	adds	r3, #108	@ 0x6c
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d175      	bne.n	8008f0e <phacDiscLoop_Sw_Int_ActivateA+0x13e>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e28:	e021      	b.n	8008e6e <phacDiscLoop_Sw_Int_ActivateA+0x9e>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 8008e2a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	440b      	add	r3, r1
 8008e38:	336c      	adds	r3, #108	@ 0x6c
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d111      	bne.n	8008e64 <phacDiscLoop_Sw_Int_ActivateA+0x94>
 8008e40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d00c      	beq.n	8008e64 <phacDiscLoop_Sw_Int_ActivateA+0x94>
            {
                bActiveDevice = 1;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 8008e50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	336c      	adds	r3, #108	@ 0x6c
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 8008e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e68:	3301      	adds	r3, #1
 8008e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e74:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3d6      	bcc.n	8008e2a <phacDiscLoop_Sw_Int_ActivateA+0x5a>
            }
        }
        if (bActiveDevice != 0U)
 8008e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <phacDiscLoop_Sw_Int_ActivateA+0xcc>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f009 ff5b 	bl	8012d44 <phpalI14443p3a_Sw_HaltA>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 8008e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <phacDiscLoop_Sw_Int_ActivateA+0xcc>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 8008e98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e9a:	e182      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008ea0:	78fa      	ldrb	r2, [r7, #3]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	3358      	adds	r3, #88	@ 0x58
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	f103 0408 	add.w	r4, r3, #8
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	336a      	adds	r3, #106	@ 0x6a
 8008ec0:	7819      	ldrb	r1, [r3, #0]
 8008ec2:	78fa      	ldrb	r2, [r7, #3]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	1a9b      	subs	r3, r3, r2
 8008eca:	3360      	adds	r3, #96	@ 0x60
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	330b      	adds	r3, #11
 8008ed2:	f107 0518 	add.w	r5, r7, #24
 8008ed6:	f107 0216 	add.w	r2, r7, #22
 8008eda:	9202      	str	r2, [sp, #8]
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	f107 0317 	add.w	r3, r7, #23
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	462b      	mov	r3, r5
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	4621      	mov	r1, r4
 8008eea:	f00a f9d1 	bl	8013290 <phpalI14443p3a_Sw_ActivateCard>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <phacDiscLoop_Sw_Int_ActivateA+0x12c>
 8008ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008efa:	e152      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4613      	mov	r3, r2
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	440b      	add	r3, r1
 8008f08:	336c      	adds	r3, #108	@ 0x6c
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	440b      	add	r3, r1
 8008f1a:	336b      	adds	r3, #107	@ 0x6b
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 8008f26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f2a:	095b      	lsrs	r3, r3, #5
 8008f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 8008f30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 809f 	bne.w	8009078 <phacDiscLoop_Sw_Int_ActivateA+0x2a8>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3e:	2201      	movs	r2, #1
 8008f40:	215e      	movs	r1, #94	@ 0x5e
 8008f42:	4618      	mov	r0, r3
 8008f44:	f004 f9c0 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008f4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <phacDiscLoop_Sw_Int_ActivateA+0x186>
 8008f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f54:	e125      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 4071 	ldrb.w	r4, [r3, #113]	@ 0x71
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 5073 	ldrb.w	r5, [r3, #115]	@ 0x73
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8008f76:	9201      	str	r2, [sp, #4]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	462b      	mov	r3, r5
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	f00c f843 	bl	8015008 <phpalI14443p4a_Sw_ActivateCard>
 8008f82:	4603      	mov	r3, r0
 8008f84:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008f86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <phacDiscLoop_Sw_Int_ActivateA+0x1c0>
 8008f8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f8e:	e108      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d027      	beq.n	8008fea <phacDiscLoop_Sw_Int_ActivateA+0x21a>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9e:	f107 020e 	add.w	r2, r7, #14
 8008fa2:	2103      	movs	r1, #3
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f00b fc4d 	bl	8014844 <phpalI14443p4a_Sw_GetConfig>
 8008faa:	4603      	mov	r3, r0
 8008fac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <phacDiscLoop_Sw_Int_ActivateA+0x1e8>
 8008fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fb6:	e0f4      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc6:	f107 020e 	add.w	r2, r7, #14
 8008fca:	2104      	movs	r1, #4
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f00b fc39 	bl	8014844 <phpalI14443p4a_Sw_GetConfig>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <phacDiscLoop_Sw_Int_ActivateA+0x210>
 8008fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fde:	e0e0      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 8008fe0:	89fb      	ldrh	r3, [r7, #14]
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008fee:	f107 0413 	add.w	r4, r7, #19
 8008ff2:	f107 0214 	add.w	r2, r7, #20
 8008ff6:	f107 0115 	add.w	r1, r7, #21
 8008ffa:	f107 0310 	add.w	r3, r7, #16
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	f107 0311 	add.w	r3, r7, #17
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	f107 0312 	add.w	r3, r7, #18
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	4623      	mov	r3, r4
 800900e:	f00c f8b3 	bl	8015178 <phpalI14443p4a_Sw_GetProtocolParams>
 8009012:	4603      	mov	r3, r0
 8009014:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <phacDiscLoop_Sw_Int_ActivateA+0x250>
 800901c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800901e:	e0c0      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009026:	2b01      	cmp	r3, #1
 8009028:	d109      	bne.n	800903e <phacDiscLoop_Sw_Int_ActivateA+0x26e>
        {
            if (bFsci > pDataParams->bFsciMax)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009030:	7c3b      	ldrb	r3, [r7, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d203      	bcs.n	800903e <phacDiscLoop_Sw_Int_ActivateA+0x26e>
            {
                bFsci = pDataParams->bFsciMax;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800903c:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009042:	7d7d      	ldrb	r5, [r7, #21]
 8009044:	7d3e      	ldrb	r6, [r7, #20]
 8009046:	f897 c013 	ldrb.w	ip, [r7, #19]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8009050:	7cba      	ldrb	r2, [r7, #18]
 8009052:	7c79      	ldrb	r1, [r7, #17]
 8009054:	7c38      	ldrb	r0, [r7, #16]
 8009056:	9003      	str	r0, [sp, #12]
 8009058:	9102      	str	r1, [sp, #8]
 800905a:	9201      	str	r2, [sp, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4663      	mov	r3, ip
 8009060:	4632      	mov	r2, r6
 8009062:	4629      	mov	r1, r5
 8009064:	4620      	mov	r0, r4
 8009066:	f00b fa88 	bl	801457a <phpalI14443p4_Sw_SetProtocol>
 800906a:	4603      	mov	r3, r0
 800906c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800906e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <phacDiscLoop_Sw_Int_ActivateA+0x2a8>
 8009074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009076:	e094      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 8009078:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800907c:	2b02      	cmp	r3, #2
 800907e:	d10a      	bne.n	8009096 <phacDiscLoop_Sw_Int_ActivateA+0x2c6>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009086:	2b01      	cmp	r3, #1
 8009088:	d102      	bne.n	8009090 <phacDiscLoop_Sw_Int_ActivateA+0x2c0>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800908a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800908e:	e088      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009090:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009094:	e085      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 8009096:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800909a:	2b03      	cmp	r3, #3
 800909c:	d174      	bne.n	8009188 <phacDiscLoop_Sw_Int_ActivateA+0x3b8>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d16c      	bne.n	8009182 <phacDiscLoop_Sw_Int_ActivateA+0x3b2>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ac:	2201      	movs	r2, #1
 80090ae:	215e      	movs	r1, #94	@ 0x5e
 80090b0:	4618      	mov	r0, r3
 80090b2:	f004 f909 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80090b6:	4603      	mov	r3, r0
 80090b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80090ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <phacDiscLoop_Sw_Int_ActivateA+0x2f4>
 80090c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090c2:	e06e      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 4071 	ldrb.w	r4, [r3, #113]	@ 0x71
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 5073 	ldrb.w	r5, [r3, #115]	@ 0x73
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80090e4:	9201      	str	r2, [sp, #4]
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	462b      	mov	r3, r5
 80090ea:	4622      	mov	r2, r4
 80090ec:	f00b ff8c 	bl	8015008 <phpalI14443p4a_Sw_ActivateCard>
 80090f0:	4603      	mov	r3, r0
 80090f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80090f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <phacDiscLoop_Sw_Int_ActivateA+0x32e>
 80090fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090fc:	e051      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009102:	f107 0413 	add.w	r4, r7, #19
 8009106:	f107 0214 	add.w	r2, r7, #20
 800910a:	f107 0115 	add.w	r1, r7, #21
 800910e:	f107 0310 	add.w	r3, r7, #16
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	f107 0311 	add.w	r3, r7, #17
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	f107 0312 	add.w	r3, r7, #18
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4623      	mov	r3, r4
 8009122:	f00c f829 	bl	8015178 <phpalI14443p4a_Sw_GetProtocolParams>
 8009126:	4603      	mov	r3, r0
 8009128:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800912a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <phacDiscLoop_Sw_Int_ActivateA+0x364>
 8009130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009132:	e036      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800913a:	7c3b      	ldrb	r3, [r7, #16]
 800913c:	429a      	cmp	r2, r3
 800913e:	d203      	bcs.n	8009148 <phacDiscLoop_Sw_Int_ActivateA+0x378>
            {
                bFsci = pDataParams->bFsciMax;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009146:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800914c:	7d7d      	ldrb	r5, [r7, #21]
 800914e:	7d3e      	ldrb	r6, [r7, #20]
 8009150:	f897 c013 	ldrb.w	ip, [r7, #19]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800915a:	7cba      	ldrb	r2, [r7, #18]
 800915c:	7c79      	ldrb	r1, [r7, #17]
 800915e:	7c38      	ldrb	r0, [r7, #16]
 8009160:	9003      	str	r0, [sp, #12]
 8009162:	9102      	str	r1, [sp, #8]
 8009164:	9201      	str	r2, [sp, #4]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4663      	mov	r3, ip
 800916a:	4632      	mov	r2, r6
 800916c:	4629      	mov	r1, r5
 800916e:	4620      	mov	r0, r4
 8009170:	f00b fa03 	bl	801457a <phpalI14443p4_Sw_SetProtocol>
 8009174:	4603      	mov	r3, r0
 8009176:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <phacDiscLoop_Sw_Int_ActivateA+0x3b8>
 800917e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009180:	e00f      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 8009182:	f244 038e 	movw	r3, #16526	@ 0x408e
 8009186:	e00c      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8009188:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800918c:	2b00      	cmp	r3, #0
 800918e:	d107      	bne.n	80091a0 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009196:	2b01      	cmp	r3, #1
 8009198:	d102      	bne.n	80091a0 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800919a:	f244 0385 	movw	r3, #16517	@ 0x4085
 800919e:	e000      	b.n	80091a2 <phacDiscLoop_Sw_Int_ActivateA+0x3d2>
    }

    return PH_ERR_SUCCESS;
 80091a0:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	372c      	adds	r7, #44	@ 0x2c
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091aa <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 80091aa:	b590      	push	{r4, r7, lr}
 80091ac:	b087      	sub	sp, #28
 80091ae:	af02      	add	r7, sp, #8
 80091b0:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7f9b      	ldrb	r3, [r3, #30]
 80091c6:	f023 0302 	bic.w	r3, r3, #2
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
 80091d4:	e00c      	b.n	80091f0 <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 80091d6:	7bfa      	ldrb	r2, [r7, #15]
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	33b1      	adds	r3, #177	@ 0xb1
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3301      	adds	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0ef      	beq.n	80091d6 <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 1096 	ldrb.w	r1, [r3, #150]	@ 0x96
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 4097 	ldrb.w	r4, [r3, #151]	@ 0x97
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	33a2      	adds	r3, #162	@ 0xa2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	32af      	adds	r2, #175	@ 0xaf
 800920e:	9201      	str	r2, [sp, #4]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4623      	mov	r3, r4
 8009214:	460a      	mov	r2, r1
 8009216:	2100      	movs	r1, #0
 8009218:	f00a fc17 	bl	8013a4a <phpalI14443p3b_Sw_WakeUpB>
 800921c:	4603      	mov	r3, r0
 800921e:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8009220:	89bb      	ldrh	r3, [r7, #12]
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fa3f 	bl	80086a6 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d015      	beq.n	800925a <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800922e:	89bb      	ldrh	r3, [r7, #12]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d006      	beq.n	8009244 <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7f9b      	ldrb	r3, [r3, #30]
 800923a:	f043 0302 	orr.w	r3, r3, #2
 800923e:	b2da      	uxtb	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800924a:	3301      	adds	r3, #1
 800924c:	b2da      	uxtb	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009254:	f244 0387 	movw	r3, #16519	@ 0x4087
 8009258:	e000      	b.n	800925c <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 800925a:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	bd90      	pop	{r4, r7, pc}

08009264 <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8009264:	b5b0      	push	{r4, r5, r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af02      	add	r7, sp, #8
 800926a:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800926c:	2300      	movs	r3, #0
 800926e:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7f9b      	ldrb	r3, [r3, #30]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	7adb      	ldrb	r3, [r3, #11]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800928c:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009290:	e1e3      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    bRetryCount = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	8a5b      	ldrh	r3, [r3, #18]
 80092a2:	461a      	mov	r2, r3
 80092a4:	2135      	movs	r1, #53	@ 0x35
 80092a6:	f004 f80f 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80092aa:	4603      	mov	r3, r0
 80092ac:	81fb      	strh	r3, [r7, #14]
 80092ae:	89fb      	ldrh	r3, [r7, #14]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 80092b4:	89fb      	ldrh	r3, [r7, #14]
 80092b6:	e1d0      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092bc:	2102      	movs	r1, #2
 80092be:	4618      	mov	r0, r3
 80092c0:	f003 fabc 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 80092c4:	4603      	mov	r3, r0
 80092c6:	81fb      	strh	r3, [r7, #14]
 80092c8:	89fb      	ldrh	r3, [r7, #14]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	e1c3      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	33a2      	adds	r3, #162	@ 0xa2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	32af      	adds	r2, #175	@ 0xaf
 80092ea:	7ab9      	ldrb	r1, [r7, #10]
 80092ec:	9201      	str	r2, [sp, #4]
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	462b      	mov	r3, r5
 80092f2:	4622      	mov	r2, r4
 80092f4:	f00a fba9 	bl	8013a4a <phpalI14443p3b_Sw_WakeUpB>
 80092f8:	4603      	mov	r3, r0
 80092fa:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 80092fc:	89fb      	ldrh	r3, [r7, #14]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8197 	beq.w	8009634 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800930c:	2b01      	cmp	r3, #1
 800930e:	d148      	bne.n	80093a2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009310:	89fb      	ldrh	r3, [r7, #14]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b03      	cmp	r3, #3
 8009316:	d130      	bne.n	800937a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7f9b      	ldrb	r3, [r3, #30]
 800931c:	f023 0302 	bic.w	r3, r3, #2
 8009320:	b2da      	uxtb	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8009326:	f244 0381 	movw	r3, #16513	@ 0x4081
 800932a:	e196      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 800932c:	7a7b      	ldrb	r3, [r7, #9]
 800932e:	3301      	adds	r3, #1
 8009330:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009336:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800933a:	2100      	movs	r1, #0
 800933c:	4618      	mov	r0, r3
 800933e:	f003 ff3f 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8009342:	4603      	mov	r3, r0
 8009344:	81fb      	strh	r3, [r7, #14]
 8009346:	89fb      	ldrh	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 800934c:	89fb      	ldrh	r3, [r7, #14]
 800934e:	e184      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	33a2      	adds	r3, #162	@ 0xa2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	32af      	adds	r2, #175	@ 0xaf
 8009368:	7ab9      	ldrb	r1, [r7, #10]
 800936a:	9201      	str	r2, [sp, #4]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	462b      	mov	r3, r5
 8009370:	4622      	mov	r2, r4
 8009372:	f00a fb6a 	bl	8013a4a <phpalI14443p3b_Sw_WakeUpB>
 8009376:	4603      	mov	r3, r0
 8009378:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800937a:	89fb      	ldrh	r3, [r7, #14]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b01      	cmp	r3, #1
 8009380:	d102      	bne.n	8009388 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 8009382:	7a7b      	ldrb	r3, [r7, #9]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d9d1      	bls.n	800932c <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7f9b      	ldrb	r3, [r3, #30]
 800938c:	f023 0302 	bic.w	r3, r3, #2
 8009390:	b2da      	uxtb	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 8009396:	89fb      	ldrh	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 814b 	beq.w	8009634 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
 800939e:	89fb      	ldrh	r3, [r7, #14]
 80093a0:	e15b      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 80093aa:	89fb      	ldrh	r3, [r7, #14]
 80093ac:	e155      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	7adb      	ldrb	r3, [r3, #11]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 813e 	bne.w	8009634 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3d0>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	7f9b      	ldrb	r3, [r3, #30]
 80093c4:	f043 0302 	orr.w	r3, r3, #2
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	779a      	strb	r2, [r3, #30]
                    return status;
 80093ce:	89fb      	ldrh	r3, [r7, #14]
 80093d0:	e143      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7f9b      	ldrb	r3, [r3, #30]
 80093ea:	f023 0302 	bic.w	r3, r3, #2
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 80093f4:	e11a      	b.n	800962c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d060      	beq.n	80094c0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 80093fe:	89fb      	ldrh	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d156      	bne.n	80094b2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 8009404:	7b3b      	ldrb	r3, [r7, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d01f      	beq.n	800944a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009414:	1e5a      	subs	r2, r3, #1
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	3398      	adds	r3, #152	@ 0x98
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	3306      	adds	r3, #6
 8009426:	4619      	mov	r1, r3
 8009428:	f00b f86a 	bl	8014500 <phpalI14443p3b_Sw_SetSerialNo>
 800942c:	4603      	mov	r3, r0
 800942e:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009434:	4618      	mov	r0, r3
 8009436:	f00a fb67 	bl	8013b08 <phpalI14443p3b_Sw_HaltB>
 800943a:	4603      	mov	r3, r0
 800943c:	81fb      	strh	r3, [r7, #14]
 800943e:	89fb      	ldrh	r3, [r7, #14]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b12      	cmp	r3, #18
 8009444:	d101      	bne.n	800944a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	e107      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009450:	461a      	mov	r2, r3
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	3398      	adds	r3, #152	@ 0x98
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	4413      	add	r3, r2
 8009460:	1d9a      	adds	r2, r3, #6
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009468:	4619      	mov	r1, r3
 800946a:	460b      	mov	r3, r1
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	3399      	adds	r3, #153	@ 0x99
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	440b      	add	r3, r1
 8009478:	330a      	adds	r3, #10
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009484:	3301      	adds	r3, #1
 8009486:	b2da      	uxtb	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
                    bCurrentDeviceCount++;
 800948e:	7b3b      	ldrb	r3, [r7, #12]
 8009490:	3301      	adds	r3, #1
 8009492:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7adb      	ldrb	r3, [r3, #11]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d30e      	bcc.n	80094c0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 80094ae:	2300      	movs	r3, #0
 80094b0:	e0d3      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7f9b      	ldrb	r3, [r3, #30]
 80094b6:	f043 0302 	orr.w	r3, r3, #2
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 80094c0:	7b7b      	ldrb	r3, [r7, #13]
 80094c2:	3301      	adds	r3, #1
 80094c4:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 80094c6:	7b7a      	ldrb	r2, [r7, #13]
 80094c8:	7abb      	ldrb	r3, [r7, #10]
 80094ca:	2101      	movs	r1, #1
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	429a      	cmp	r2, r3
 80094d2:	da29      	bge.n	8009528 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c4>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80094d8:	7b7b      	ldrb	r3, [r7, #13]
 80094da:	3301      	adds	r3, #1
 80094dc:	b2d9      	uxtb	r1, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80094e4:	461a      	mov	r2, r3
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	3398      	adds	r3, #152	@ 0x98
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	4413      	add	r3, r2
 80094f4:	f103 040a 	add.w	r4, r3, #10
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80094fe:	461a      	mov	r2, r3
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	33a8      	adds	r3, #168	@ 0xa8
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	3307      	adds	r3, #7
 8009510:	4622      	mov	r2, r4
 8009512:	f00a fab9 	bl	8013a88 <phpalI14443p3b_Sw_SlotMarker>
 8009516:	4603      	mov	r3, r0
 8009518:	81fb      	strh	r3, [r7, #14]
 800951a:	89fb      	ldrh	r3, [r7, #14]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b12      	cmp	r3, #18
 8009520:	f040 8084 	bne.w	800962c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
 8009524:	89fb      	ldrh	r3, [r7, #14]
 8009526:	e098      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 8009528:	2301      	movs	r3, #1
 800952a:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7f9b      	ldrb	r3, [r3, #30]
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b00      	cmp	r3, #0
 8009536:	d069      	beq.n	800960c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a8>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00e      	beq.n	8009560 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fc>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7adb      	ldrb	r3, [r3, #11]
 800954c:	429a      	cmp	r2, r3
 800954e:	d31d      	bcc.n	800958c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x328>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 800955c:	2300      	movs	r3, #0
 800955e:	e07c      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 8009560:	7abb      	ldrb	r3, [r7, #10]
 8009562:	2b04      	cmp	r3, #4
 8009564:	d10f      	bne.n	8009586 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x322>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31e>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800957c:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009580:	e06b      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                            }

                            return PH_ERR_SUCCESS;
 8009582:	2300      	movs	r3, #0
 8009584:	e069      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 8009586:	7abb      	ldrb	r3, [r7, #10]
 8009588:	3301      	adds	r3, #1
 800958a:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 800958c:	7b3b      	ldrb	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00c      	beq.n	80095ac <phacDiscLoop_Sw_Int_CollisionResolutionB+0x348>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009596:	4618      	mov	r0, r3
 8009598:	f00a fab6 	bl	8013b08 <phpalI14443p3b_Sw_HaltB>
 800959c:	4603      	mov	r3, r0
 800959e:	81fb      	strh	r3, [r7, #14]
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b12      	cmp	r3, #18
 80095a6:	d101      	bne.n	80095ac <phacDiscLoop_Sw_Int_CollisionResolutionB+0x348>
 80095a8:	89fb      	ldrh	r3, [r7, #14]
 80095aa:	e056      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 4096 	ldrb.w	r4, [r3, #150]	@ 0x96
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 5097 	ldrb.w	r5, [r3, #151]	@ 0x97
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80095c2:	461a      	mov	r2, r3
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	3398      	adds	r3, #152	@ 0x98
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	4413      	add	r3, r2
 80095d2:	f103 020a 	add.w	r2, r3, #10
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80095dc:	4619      	mov	r1, r3
 80095de:	460b      	mov	r3, r1
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	33a8      	adds	r3, #168	@ 0xa8
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	440b      	add	r3, r1
 80095ec:	3307      	adds	r3, #7
 80095ee:	7ab9      	ldrb	r1, [r7, #10]
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	9200      	str	r2, [sp, #0]
 80095f4:	462b      	mov	r3, r5
 80095f6:	4622      	mov	r2, r4
 80095f8:	f00a fa08 	bl	8013a0c <phpalI14443p3b_Sw_RequestB>
 80095fc:	4603      	mov	r3, r0
 80095fe:	81fb      	strh	r3, [r7, #14]
 8009600:	89fb      	ldrh	r3, [r7, #14]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b12      	cmp	r3, #18
 8009606:	d111      	bne.n	800962c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c8>
 8009608:	89fb      	ldrh	r3, [r7, #14]
 800960a:	e026      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 8009622:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009626:	e018      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
                    }
                    return PH_ERR_SUCCESS;
 8009628:	2300      	movs	r3, #0
 800962a:	e016      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
        while(0U == bLastSlotReached)
 800962c:	7afb      	ldrb	r3, [r7, #11]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f43f aee1 	beq.w	80093f6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 8009634:	7abb      	ldrb	r3, [r7, #10]
 8009636:	2b04      	cmp	r3, #4
 8009638:	f67f aecb 	bls.w	80093d2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 2095 	ldrb.w	r2, [r3, #149]	@ 0x95
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800964e:	2b00      	cmp	r3, #0
 8009650:	d102      	bne.n	8009658 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f4>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 8009652:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009656:	e000      	b.n	800965a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f6>
    }

    return PH_ERR_SUCCESS;
 8009658:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bdb0      	pop	{r4, r5, r7, pc}

08009662 <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 8009662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009664:	b08f      	sub	sp, #60	@ 0x3c
 8009666:	af04      	add	r7, sp, #16
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800966e:	2300      	movs	r3, #0
 8009670:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	429a      	cmp	r2, r3
 800967c:	d302      	bcc.n	8009684 <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800967e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009682:	e1bb      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800968c:	3b01      	subs	r3, #1
 800968e:	429a      	cmp	r2, r3
 8009690:	db0a      	blt.n	80096a8 <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	33b1      	adds	r3, #177	@ 0xb1
 80096a2:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d119      	bne.n	80096dc <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 2096 	ldrb.w	r2, [r3, #150]	@ 0x96
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 1097 	ldrb.w	r1, [r3, #151]	@ 0x97
 80096b8:	f107 0320 	add.w	r3, r7, #32
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	460b      	mov	r3, r1
 80096c6:	2100      	movs	r1, #0
 80096c8:	f00a f9bf 	bl	8013a4a <phpalI14443p3b_Sw_WakeUpB>
 80096cc:	4603      	mov	r3, r0
 80096ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b12      	cmp	r3, #18
 80096d6:	d101      	bne.n	80096dc <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 80096d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096da:	e18f      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	2201      	movs	r2, #1
 80096e2:	215e      	movs	r1, #94	@ 0x5e
 80096e4:	4618      	mov	r0, r3
 80096e6:	f003 fdef 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80096ea:	4603      	mov	r3, r0
 80096ec:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <phacDiscLoop_Sw_Int_ActivateB+0x96>
 80096f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096f6:	e181      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	33b0      	adds	r3, #176	@ 0xb0
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	33ac      	adds	r3, #172	@ 0xac
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	4613      	mov	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	33b0      	adds	r3, #176	@ 0xb0
 8009736:	2201      	movs	r2, #1
 8009738:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009740:	2b03      	cmp	r3, #3
 8009742:	d004      	beq.n	800974e <phacDiscLoop_Sw_Int_ActivateB+0xec>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800974a:	2b02      	cmp	r3, #2
 800974c:	d10c      	bne.n	8009768 <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	4613      	mov	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	440b      	add	r3, r1
 800975c:	33b0      	adds	r3, #176	@ 0xb0
 800975e:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 8009764:	2300      	movs	r3, #0
 8009766:	e149      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	33ab      	adds	r3, #171	@ 0xab
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009784:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800978e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 8009792:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009796:	2b00      	cmp	r3, #0
 8009798:	d104      	bne.n	80097a4 <phacDiscLoop_Sw_Int_ActivateB+0x142>
 800979a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 8081 	beq.w	80098a6 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 80097a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097a8:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d17a      	bne.n	80098a6 <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 80097b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 80097bc:	2303      	movs	r3, #3
 80097be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097c2:	e016      	b.n	80097f2 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 80097c4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 80097d0:	2302      	movs	r3, #2
 80097d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097d6:	e00c      	b.n	80097f2 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 80097d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097ea:	e002      	b.n	80097f2 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 80097f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 80097fe:	2303      	movs	r3, #3
 8009800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009804:	e016      	b.n	8009834 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 8009806:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 8009812:	2302      	movs	r3, #2
 8009814:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009818:	e00c      	b.n	8009834 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 800981a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800982c:	e002      	b.n	8009834 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 800982e:	2300      	movs	r3, #0
 8009830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 8009834:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800983c:	429a      	cmp	r2, r3
 800983e:	d009      	beq.n	8009854 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 8009840:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009848:	429a      	cmp	r2, r3
 800984a:	d903      	bls.n	8009854 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 800984c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009850:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 8009854:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800985c:	429a      	cmp	r2, r3
 800985e:	d009      	beq.n	8009874 <phacDiscLoop_Sw_Int_ActivateB+0x212>
 8009860:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009868:	429a      	cmp	r2, r3
 800986a:	d903      	bls.n	8009874 <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 800986c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009870:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 8009874:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8009878:	2b00      	cmp	r3, #0
 800987a:	da14      	bge.n	80098a6 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 800987c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8009880:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009884:	429a      	cmp	r2, r3
 8009886:	d00e      	beq.n	80098a6 <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8009888:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800988c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009890:	429a      	cmp	r2, r3
 8009892:	d204      	bcs.n	800989e <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 8009894:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009898:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800989c:	e003      	b.n	80098a6 <phacDiscLoop_Sw_Int_ActivateB+0x244>
 800989e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	3398      	adds	r3, #152	@ 0x98
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	f103 040a 	add.w	r4, r3, #10
 80098be:	78fa      	ldrb	r2, [r7, #3]
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	440b      	add	r3, r1
 80098cc:	33af      	adds	r3, #175	@ 0xaf
 80098ce:	7819      	ldrb	r1, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 5099 	ldrb.w	r5, [r3, #153]	@ 0x99
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	32b2      	adds	r2, #178	@ 0xb2
 80098e0:	9203      	str	r2, [sp, #12]
 80098e2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80098e6:	9202      	str	r2, [sp, #8]
 80098e8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80098ec:	9201      	str	r2, [sp, #4]
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	462b      	mov	r3, r5
 80098f2:	460a      	mov	r2, r1
 80098f4:	4621      	mov	r1, r4
 80098f6:	f00a f94f 	bl	8013b98 <phpalI14443p3b_Sw_Attrib>
 80098fa:	4603      	mov	r3, r0
 80098fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80098fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <phacDiscLoop_Sw_Int_ActivateB+0x2a6>
 8009904:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009906:	e079      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800990e:	2b01      	cmp	r3, #1
 8009910:	d027      	beq.n	8009962 <phacDiscLoop_Sw_Int_ActivateB+0x300>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009916:	f107 0208 	add.w	r2, r7, #8
 800991a:	2104      	movs	r1, #4
 800991c:	4618      	mov	r0, r3
 800991e:	f00a f837 	bl	8013990 <phpalI14443p3b_Sw_GetConfig>
 8009922:	4603      	mov	r3, r0
 8009924:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009926:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <phacDiscLoop_Sw_Int_ActivateB+0x2ce>
 800992c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800992e:	e065      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 8009930:	893b      	ldrh	r3, [r7, #8]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800993e:	f107 0208 	add.w	r2, r7, #8
 8009942:	2105      	movs	r1, #5
 8009944:	4618      	mov	r0, r3
 8009946:	f00a f823 	bl	8013990 <phpalI14443p3b_Sw_GetConfig>
 800994a:	4603      	mov	r3, r0
 800994c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800994e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <phacDiscLoop_Sw_Int_ActivateB+0x2f6>
 8009954:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009956:	e051      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 8009958:	893b      	ldrh	r3, [r7, #8]
 800995a:	b2da      	uxtb	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009966:	f107 040d 	add.w	r4, r7, #13
 800996a:	f107 020e 	add.w	r2, r7, #14
 800996e:	f107 010f 	add.w	r1, r7, #15
 8009972:	f107 030a 	add.w	r3, r7, #10
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	f107 030b 	add.w	r3, r7, #11
 800997c:	9301      	str	r3, [sp, #4]
 800997e:	f107 030c 	add.w	r3, r7, #12
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	4623      	mov	r3, r4
 8009986:	f00a fbc5 	bl	8014114 <phpalI14443p3b_Sw_GetProtocolParams>
 800998a:	4603      	mov	r3, r0
 800998c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800998e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <phacDiscLoop_Sw_Int_ActivateB+0x336>
 8009994:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009996:	e031      	b.n	80099fc <phacDiscLoop_Sw_Int_ActivateB+0x39a>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d109      	bne.n	80099b6 <phacDiscLoop_Sw_Int_ActivateB+0x354>
    {
        if (bFsci > pDataParams->bFsciMax)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80099a8:	7abb      	ldrb	r3, [r7, #10]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d203      	bcs.n	80099b6 <phacDiscLoop_Sw_Int_ActivateB+0x354>
        {
            bFsci = pDataParams->bFsciMax;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80099b4:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80099ba:	7bfd      	ldrb	r5, [r7, #15]
 80099bc:	7bbe      	ldrb	r6, [r7, #14]
 80099be:	f897 c00d 	ldrb.w	ip, [r7, #13]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80099c8:	7b3a      	ldrb	r2, [r7, #12]
 80099ca:	7af9      	ldrb	r1, [r7, #11]
 80099cc:	7ab8      	ldrb	r0, [r7, #10]
 80099ce:	9003      	str	r0, [sp, #12]
 80099d0:	9102      	str	r1, [sp, #8]
 80099d2:	9201      	str	r2, [sp, #4]
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4663      	mov	r3, ip
 80099d8:	4632      	mov	r2, r6
 80099da:	4629      	mov	r1, r5
 80099dc:	4620      	mov	r0, r4
 80099de:	f00a fdcc 	bl	801457a <phpalI14443p4_Sw_SetProtocol>
 80099e2:	4603      	mov	r3, r0
 80099e4:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	33b1      	adds	r3, #177	@ 0xb1
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
    return status;
 80099fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	372c      	adds	r7, #44	@ 0x2c
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a04 <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	75fb      	strb	r3, [r7, #23]
 8009a1e:	e019      	b.n	8009a54 <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 8009a20:	7dfa      	ldrb	r2, [r7, #23]
 8009a22:	4613      	mov	r3, r2
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	4413      	add	r3, r2
 8009a28:	00da      	lsls	r2, r3, #3
 8009a2a:	1ad2      	subs	r2, r2, r3
 8009a2c:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	3308      	adds	r3, #8
 8009a36:	2210      	movs	r2, #16
 8009a38:	4619      	mov	r1, r3
 8009a3a:	68b8      	ldr	r0, [r7, #8]
 8009a3c:	f013 fb34 	bl	801d0a8 <memcmp>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 8009a4c:	e008      	b.n	8009a60 <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	3301      	adds	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009a5a:	7dfa      	ldrb	r2, [r7, #23]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d3df      	bcc.n	8009a20 <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b086      	sub	sp, #24
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	4611      	mov	r1, r2
 8009a76:	461a      	mov	r2, r3
 8009a78:	460b      	mov	r3, r1
 8009a7a:	71fb      	strb	r3, [r7, #7]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 8009a80:	2300      	movs	r3, #0
 8009a82:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 8009a84:	2300      	movs	r3, #0
 8009a86:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 8009a88:	f107 0313 	add.w	r3, r7, #19
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff ffb7 	bl	8009a04 <phacDiscLoop_Sw_Int_CheckForDuplication>
 8009a96:	4603      	mov	r3, r0
 8009a98:	82bb      	strh	r3, [r7, #20]
 8009a9a:	8abb      	ldrh	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 8009aa0:	8abb      	ldrh	r3, [r7, #20]
 8009aa2:	e086      	b.n	8009bb2 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 8009aa4:	7cfb      	ldrb	r3, [r7, #19]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d179      	bne.n	8009b9e <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aae:	f107 0210 	add.w	r2, r7, #16
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f009 f886 	bl	8012bc6 <phpalFelica_Sw_GetConfig>
 8009aba:	4603      	mov	r3, r0
 8009abc:	82bb      	strh	r3, [r7, #20]
 8009abe:	8abb      	ldrh	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 8009ac4:	8abb      	ldrh	r3, [r7, #20]
 8009ac6:	e074      	b.n	8009bb2 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009ace:	461a      	mov	r2, r3
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	441a      	add	r2, r3
 8009ad4:	68f9      	ldr	r1, [r7, #12]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	00da      	lsls	r2, r3, #3
 8009ade:	1ad2      	subs	r2, r2, r3
 8009ae0:	188b      	adds	r3, r1, r2
 8009ae2:	3394      	adds	r3, #148	@ 0x94
 8009ae4:	79fa      	ldrb	r2, [r7, #7]
 8009ae6:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 8009ae8:	8a3b      	ldrh	r3, [r7, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d018      	beq.n	8009b20 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d915      	bls.n	8009b20 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009afa:	461a      	mov	r2, r3
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	441a      	add	r2, r3
 8009b00:	4613      	mov	r3, r2
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	00da      	lsls	r2, r3, #3
 8009b08:	1ad2      	subs	r2, r2, r3
 8009b0a:	f102 0388 	add.w	r3, r2, #136	@ 0x88
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	3308      	adds	r3, #8
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	3210      	adds	r2, #16
 8009b18:	8812      	ldrh	r2, [r2, #0]
 8009b1a:	b292      	uxth	r2, r2
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e014      	b.n	8009b4a <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b26:	461a      	mov	r2, r3
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	441a      	add	r2, r3
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	4413      	add	r3, r2
 8009b32:	00da      	lsls	r2, r3, #3
 8009b34:	1ad2      	subs	r2, r2, r3
 8009b36:	f102 0388 	add.w	r3, r2, #136	@ 0x88
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	3308      	adds	r3, #8
 8009b40:	2202      	movs	r2, #2
 8009b42:	2100      	movs	r1, #0
 8009b44:	4618      	mov	r0, r3
 8009b46:	f013 fabf 	bl	801d0c8 <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b50:	461a      	mov	r2, r3
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	441a      	add	r2, r3
 8009b56:	4613      	mov	r3, r2
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	4413      	add	r3, r2
 8009b5c:	00da      	lsls	r2, r3, #3
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	4413      	add	r3, r2
 8009b68:	3308      	adds	r3, #8
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f013 fb29 	bl	801d1c6 <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	441a      	add	r2, r3
 8009b80:	88bb      	ldrh	r3, [r7, #4]
 8009b82:	b2d8      	uxtb	r0, r3
 8009b84:	68f9      	ldr	r1, [r7, #12]
 8009b86:	4613      	mov	r3, r2
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	00da      	lsls	r2, r3, #3
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	188b      	adds	r3, r1, r2
 8009b92:	3392      	adds	r3, #146	@ 0x92
 8009b94:	4602      	mov	r2, r0
 8009b96:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return PH_ERR_SUCCESS;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 8009bba:	b590      	push	{r4, r7, lr}
 8009bbc:	b08b      	sub	sp, #44	@ 0x2c
 8009bbe:	af02      	add	r7, sp, #8
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	70fb      	strb	r3, [r7, #3]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 8009bca:	237f      	movs	r3, #127	@ 0x7f
 8009bcc:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 8009bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bd2:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009be4:	f107 0410 	add.w	r4, r7, #16
 8009be8:	78fa      	ldrb	r2, [r7, #3]
 8009bea:	f107 011c 	add.w	r1, r7, #28
 8009bee:	f107 031a 	add.w	r3, r7, #26
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	f008 fdfb 	bl	80127f0 <phpalFelica_Sw_ReqC>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009bfe:	8bfb      	ldrh	r3, [r7, #30]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d164      	bne.n	8009cd0 <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8009c06:	78fb      	ldrb	r3, [r7, #3]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d048      	beq.n	8009c9e <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	f107 021a 	add.w	r2, r7, #26
 8009c14:	2101      	movs	r1, #1
 8009c16:	4618      	mov	r0, r3
 8009c18:	f008 ffd5 	bl	8012bc6 <phpalFelica_Sw_GetConfig>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	83fb      	strh	r3, [r7, #30]
 8009c20:	8bfb      	ldrh	r3, [r7, #30]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d037      	beq.n	8009c96 <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 8009c26:	8bfb      	ldrh	r3, [r7, #30]
 8009c28:	e053      	b.n	8009cd2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c36:	8b7b      	ldrh	r3, [r7, #26]
 8009c38:	b2d9      	uxtb	r1, r3
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	f107 040c 	add.w	r4, r7, #12
 8009c40:	f107 030f 	add.w	r3, r7, #15
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f107 0314 	add.w	r3, r7, #20
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	4623      	mov	r3, r4
 8009c4e:	f008 fee5 	bl	8012a1c <phpalFelica_Sw_GetFrameInfo>
 8009c52:	4603      	mov	r3, r0
 8009c54:	83fb      	strh	r3, [r7, #30]
 8009c56:	8bfb      	ldrh	r3, [r7, #30]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 8009c5c:	8bfb      	ldrh	r3, [r7, #30]
 8009c5e:	e038      	b.n	8009cd2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 8009c60:	89bb      	ldrh	r3, [r7, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10c      	bne.n	8009c80 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 8009c66:	6979      	ldr	r1, [r7, #20]
 8009c68:	7bfa      	ldrb	r2, [r7, #15]
 8009c6a:	883b      	ldrh	r3, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fefc 	bl	8009a6a <phacDiscLoop_Sw_Int_UpdateSensFResp>
 8009c72:	4603      	mov	r3, r0
 8009c74:	83fb      	strh	r3, [r7, #30]
 8009c76:	8bfb      	ldrh	r3, [r7, #30]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 8009c7c:	8bfb      	ldrh	r3, [r7, #30]
 8009c7e:	e028      	b.n	8009cd2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 8009c80:	8b7b      	ldrh	r3, [r7, #26]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	7b1b      	ldrb	r3, [r3, #12]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d211      	bcs.n	8009cba <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 8009c96:	8b7b      	ldrh	r3, [r7, #26]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1c6      	bne.n	8009c2a <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 8009c9c:	e00e      	b.n	8009cbc <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 8009c9e:	6939      	ldr	r1, [r7, #16]
 8009ca0:	8b7b      	ldrh	r3, [r7, #26]
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	883b      	ldrh	r3, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fedf 	bl	8009a6a <phacDiscLoop_Sw_Int_UpdateSensFResp>
 8009cac:	4603      	mov	r3, r0
 8009cae:	83fb      	strh	r3, [r7, #30]
 8009cb0:	8bfb      	ldrh	r3, [r7, #30]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 8009cb6:	8bfb      	ldrh	r3, [r7, #30]
 8009cb8:	e00b      	b.n	8009cd2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 8009cba:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d102      	bne.n	8009ccc <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 8009cc6:	f244 037f 	movw	r3, #16511	@ 0x407f
 8009cca:	e002      	b.n	8009cd2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	e000      	b.n	8009cd2 <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 8009cd0:	8bfb      	ldrh	r3, [r7, #30]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3724      	adds	r7, #36	@ 0x24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd90      	pop	{r4, r7, pc}

08009cda <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 8009ce2:	237f      	movs	r3, #127	@ 0x7f
 8009ce4:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f008 ff31 	bl	8012b56 <phpalFelica_Sw_SetConfig>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	81fb      	strh	r3, [r7, #14]
 8009cf8:	89fb      	ldrh	r3, [r7, #14]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <phacDiscLoop_Sw_DetTechTypeF+0x28>
 8009cfe:	89fb      	ldrh	r3, [r7, #14]
 8009d00:	e042      	b.n	8009d88 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 8009d02:	f107 030c 	add.w	r3, r7, #12
 8009d06:	461a      	mov	r2, r3
 8009d08:	2157      	movs	r1, #87	@ 0x57
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7fd fbb8 	bl	8007480 <phacDiscLoop_Sw_GetConfig>
 8009d10:	4603      	mov	r3, r0
 8009d12:	81fb      	strh	r3, [r7, #14]
 8009d14:	89fb      	ldrh	r3, [r7, #14]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <phacDiscLoop_Sw_DetTechTypeF+0x44>
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	e034      	b.n	8009d88 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009d24:	f003 030c 	and.w	r3, r3, #12
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d103      	bne.n	8009d34 <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7f9a      	ldrb	r2, [r3, #30]
 8009d38:	89bb      	ldrh	r3, [r7, #12]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	4013      	ands	r3, r2
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 8009d48:	89bb      	ldrh	r3, [r7, #12]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	2103      	movs	r1, #3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff ff33 	bl	8009bba <phacDiscLoop_Sw_Int_SendSensFReq>
 8009d54:	4603      	mov	r3, r0
 8009d56:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8009d58:	89fb      	ldrh	r3, [r7, #14]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fca3 	bl	80086a6 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00c      	beq.n	8009d80 <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009d66:	89fb      	ldrh	r3, [r7, #14]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d10a      	bne.n	8009d84 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	7f9a      	ldrb	r2, [r3, #30]
 8009d72:	89bb      	ldrh	r3, [r7, #12]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	4313      	orrs	r3, r2
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	779a      	strb	r2, [r3, #30]
 8009d7e:	e001      	b.n	8009d84 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 8009d80:	89fb      	ldrh	r3, [r7, #14]
 8009d82:	e001      	b.n	8009d88 <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009d84:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 8009d9c:	f107 030a 	add.w	r3, r7, #10
 8009da0:	461a      	mov	r2, r3
 8009da2:	2157      	movs	r1, #87	@ 0x57
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fd fb6b 	bl	8007480 <phacDiscLoop_Sw_GetConfig>
 8009daa:	4603      	mov	r3, r0
 8009dac:	81bb      	strh	r3, [r7, #12]
 8009dae:	89bb      	ldrh	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 8009db4:	89bb      	ldrh	r3, [r7, #12]
 8009db6:	e0e3      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7f9b      	ldrb	r3, [r3, #30]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	897b      	ldrh	r3, [r7, #10]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	7b1b      	ldrb	r3, [r3, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d106      	bne.n	8009ddc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009dd6:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009dda:	e0d1      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73bb      	strb	r3, [r7, #14]
 8009de0:	e00d      	b.n	8009dfe <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8009de2:	7bba      	ldrb	r2, [r7, #14]
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	4413      	add	r3, r2
 8009dec:	00da      	lsls	r2, r3, #3
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	188b      	adds	r3, r1, r2
 8009df2:	3393      	adds	r3, #147	@ 0x93
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	73bb      	strb	r3, [r7, #14]
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d0ee      	beq.n	8009de2 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7b1b      	ldrb	r3, [r3, #12]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d324      	bcc.n	8009e5c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d10c      	bne.n	8009e32 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	2103      	movs	r1, #3
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 fd0c 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009e24:	4603      	mov	r3, r0
 8009e26:	81bb      	strh	r3, [r7, #12]
 8009e28:	89bb      	ldrh	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00e      	beq.n	8009e4c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 8009e2e:	89bb      	ldrh	r3, [r7, #12]
 8009e30:	e0a6      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	210a      	movs	r1, #10
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f002 fcff 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	81bb      	strh	r3, [r7, #12]
 8009e42:	89bb      	ldrh	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 8009e48:	89bb      	ldrh	r3, [r7, #12]
 8009e4a:	e099      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e091      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	7f9a      	ldrb	r2, [r3, #30]
 8009e60:	897b      	ldrh	r3, [r7, #10]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	43db      	mvns	r3, r3
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4013      	ands	r3, r2
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e74:	2200      	movs	r2, #0
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f008 fe6c 	bl	8012b56 <phpalFelica_Sw_SetConfig>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 8009e82:	89bb      	ldrh	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 8009e88:	89bb      	ldrh	r3, [r7, #12]
 8009e8a:	e079      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	8a9b      	ldrh	r3, [r3, #20]
 8009e94:	461a      	mov	r2, r3
 8009e96:	2135      	movs	r1, #53	@ 0x35
 8009e98:	f003 fa16 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	81bb      	strh	r3, [r7, #12]
 8009ea0:	89bb      	ldrh	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 8009ea6:	89bb      	ldrh	r3, [r7, #12]
 8009ea8:	e06a      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 8009eaa:	897b      	ldrh	r3, [r7, #10]
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d10c      	bne.n	8009eca <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb4:	2103      	movs	r1, #3
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 fcc0 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	81bb      	strh	r3, [r7, #12]
 8009ec0:	89bb      	ldrh	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00e      	beq.n	8009ee4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 8009ec6:	89bb      	ldrh	r3, [r7, #12]
 8009ec8:	e05a      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ece:	210a      	movs	r1, #10
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 fcb3 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	81bb      	strh	r3, [r7, #12]
 8009eda:	89bb      	ldrh	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 8009ee0:	89bb      	ldrh	r3, [r7, #12]
 8009ee2:	e04d      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 8009ee4:	897b      	ldrh	r3, [r7, #10]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	210f      	movs	r1, #15
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff fe65 	bl	8009bba <phacDiscLoop_Sw_Int_SendSensFReq>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 8009ef4:	89bb      	ldrh	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 8009efa:	89bb      	ldrh	r3, [r7, #12]
 8009efc:	e040      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 8009f02:	e030      	b.n	8009f66 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 8009f04:	7bfa      	ldrb	r2, [r7, #15]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	4413      	add	r3, r2
 8009f0e:	00da      	lsls	r2, r3, #3
 8009f10:	1ad2      	subs	r2, r2, r3
 8009f12:	188b      	adds	r3, r1, r2
 8009f14:	3380      	adds	r3, #128	@ 0x80
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d121      	bne.n	8009f60 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 8009f1c:	7bfa      	ldrb	r2, [r7, #15]
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	00da      	lsls	r2, r3, #3
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	188b      	adds	r3, r1, r2
 8009f2c:	3381      	adds	r3, #129	@ 0x81
 8009f2e:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 8009f30:	2bfe      	cmp	r3, #254	@ 0xfe
 8009f32:	d115      	bne.n	8009f60 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f38:	2201      	movs	r2, #1
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f008 fe0a 	bl	8012b56 <phpalFelica_Sw_SetConfig>
 8009f42:	4603      	mov	r3, r0
 8009f44:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 8009f46:	89bb      	ldrh	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 8009f4c:	89bb      	ldrh	r3, [r7, #12]
 8009f4e:	e017      	b.n	8009f80 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 8009f50:	897b      	ldrh	r3, [r7, #10]
 8009f52:	461a      	mov	r2, r3
 8009f54:	210f      	movs	r1, #15
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff fe2f 	bl	8009bba <phacDiscLoop_Sw_Int_SendSensFReq>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	3301      	adds	r3, #1
 8009f64:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009f6c:	7bfa      	ldrb	r2, [r7, #15]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d3c8      	bcc.n	8009f04 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 8009f7e:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 8009f88:	b590      	push	{r4, r7, lr}
 8009f8a:	b08b      	sub	sp, #44	@ 0x2c
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009f94:	2300      	movs	r3, #0
 8009f96:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 8009f9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fa0:	833b      	strh	r3, [r7, #24]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d202      	bcs.n	8009fbc <phacDiscLoop_Sw_Int_ActivateF+0x34>
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <phacDiscLoop_Sw_Int_ActivateF+0x3a>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009fbc:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009fc0:	e0c0      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	4413      	add	r3, r2
 8009fce:	00da      	lsls	r2, r3, #3
 8009fd0:	1ad2      	subs	r2, r2, r3
 8009fd2:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	4413      	add	r3, r2
 8009fda:	3308      	adds	r3, #8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f008 fda6 	bl	8012b2e <phpalFelica_Sw_SetSerialNo>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	83fb      	strh	r3, [r7, #30]
 8009fe6:	8bfb      	ldrh	r3, [r7, #30]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <phacDiscLoop_Sw_Int_ActivateF+0x68>
 8009fec:	8bfb      	ldrh	r3, [r7, #30]
 8009fee:	e0a9      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 8009ff0:	78fa      	ldrb	r2, [r7, #3]
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	4413      	add	r3, r2
 8009ffa:	00da      	lsls	r2, r3, #3
 8009ffc:	1ad2      	subs	r2, r2, r3
 8009ffe:	188b      	adds	r3, r1, r2
 800a000:	3380      	adds	r3, #128	@ 0x80
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	f040 808f 	bne.w	800a128 <phacDiscLoop_Sw_Int_ActivateF+0x1a0>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800a00a:	78fa      	ldrb	r2, [r7, #3]
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	00da      	lsls	r2, r3, #3
 800a016:	1ad2      	subs	r2, r2, r3
 800a018:	188b      	adds	r3, r1, r2
 800a01a:	3381      	adds	r3, #129	@ 0x81
 800a01c:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800a01e:	2bfe      	cmp	r3, #254	@ 0xfe
 800a020:	f040 8082 	bne.w	800a128 <phacDiscLoop_Sw_Int_ActivateF+0x1a0>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800a024:	78fa      	ldrb	r2, [r7, #3]
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4613      	mov	r3, r2
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	4413      	add	r3, r2
 800a02e:	00da      	lsls	r2, r3, #3
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	188b      	adds	r3, r1, r2
 800a034:	3393      	adds	r3, #147	@ 0x93
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8081 	beq.w	800a140 <phacDiscLoop_Sw_Int_ActivateF+0x1b8>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f008 fd85 	bl	8012b56 <phpalFelica_Sw_SetConfig>
 800a04c:	4603      	mov	r3, r0
 800a04e:	83fb      	strh	r3, [r7, #30]
            PH_CHECK_SUCCESS(status);
 800a050:	8bfb      	ldrh	r3, [r7, #30]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <phacDiscLoop_Sw_Int_ActivateF+0xd2>
 800a056:	8bfb      	ldrh	r3, [r7, #30]
 800a058:	e074      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a05e:	f107 0214 	add.w	r2, r7, #20
 800a062:	f107 0118 	add.w	r1, r7, #24
 800a066:	f107 030e 	add.w	r3, r7, #14
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	4613      	mov	r3, r2
 800a06e:	2203      	movs	r2, #3
 800a070:	f008 fbbe 	bl	80127f0 <phpalFelica_Sw_ReqC>
 800a074:	4603      	mov	r3, r0
 800a076:	83fb      	strh	r3, [r7, #30]
            PH_CHECK_SUCCESS(status);
 800a078:	8bfb      	ldrh	r3, [r7, #30]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <phacDiscLoop_Sw_Int_ActivateF+0xfa>
 800a07e:	8bfb      	ldrh	r3, [r7, #30]
 800a080:	e060      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800a082:	78fa      	ldrb	r2, [r7, #3]
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	4413      	add	r3, r2
 800a08c:	00da      	lsls	r2, r3, #3
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	188b      	adds	r3, r1, r2
 800a092:	3393      	adds	r3, #147	@ 0x93
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09c:	f107 020c 	add.w	r2, r7, #12
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f008 fd8f 	bl	8012bc6 <phpalFelica_Sw_GetConfig>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	83fb      	strh	r3, [r7, #30]
 800a0ac:	8bfb      	ldrh	r3, [r7, #30]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d02e      	beq.n	800a110 <phacDiscLoop_Sw_Int_ActivateF+0x188>
 800a0b2:	8bfb      	ldrh	r3, [r7, #30]
 800a0b4:	e046      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	72fb      	strb	r3, [r7, #11]
                    wFrameStatus = 0x00;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	813b      	strh	r3, [r7, #8]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a0c2:	89bb      	ldrh	r3, [r7, #12]
 800a0c4:	b2d9      	uxtb	r1, r3
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	f107 0408 	add.w	r4, r7, #8
 800a0cc:	f107 030b 	add.w	r3, r7, #11
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f107 0310 	add.w	r3, r7, #16
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4623      	mov	r3, r4
 800a0da:	f008 fc9f 	bl	8012a1c <phpalFelica_Sw_GetFrameInfo>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	83fb      	strh	r3, [r7, #30]
 800a0e2:	8bfb      	ldrh	r3, [r7, #30]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <phacDiscLoop_Sw_Int_ActivateF+0x164>
 800a0e8:	8bfb      	ldrh	r3, [r7, #30]
 800a0ea:	e02b      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f107 021d 	add.w	r2, r7, #29
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff fc85 	bl	8009a04 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	83fb      	strh	r3, [r7, #30]
 800a0fe:	8bfb      	ldrh	r3, [r7, #30]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <phacDiscLoop_Sw_Int_ActivateF+0x180>
 800a104:	8bfb      	ldrh	r3, [r7, #30]
 800a106:	e01d      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800a108:	89bb      	ldrh	r3, [r7, #12]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	81bb      	strh	r3, [r7, #12]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800a110:	89bb      	ldrh	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <phacDiscLoop_Sw_Int_ActivateF+0x194>
 800a116:	7f7b      	ldrb	r3, [r7, #29]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0cc      	beq.n	800a0b6 <phacDiscLoop_Sw_Int_ActivateF+0x12e>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800a11c:	7f7b      	ldrb	r3, [r7, #29]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10e      	bne.n	800a140 <phacDiscLoop_Sw_Int_ActivateF+0x1b8>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800a122:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800a126:	e00d      	b.n	800a144 <phacDiscLoop_Sw_Int_ActivateF+0x1bc>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800a128:	78fa      	ldrb	r2, [r7, #3]
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	4413      	add	r3, r2
 800a132:	00da      	lsls	r2, r3, #3
 800a134:	1ad2      	subs	r2, r2, r3
 800a136:	188b      	adds	r3, r1, r2
 800a138:	3393      	adds	r3, #147	@ 0x93
 800a13a:	2200      	movs	r2, #0
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	e000      	b.n	800a142 <phacDiscLoop_Sw_Int_ActivateF+0x1ba>
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800a140:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 800a142:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800a144:	4618      	mov	r0, r3
 800a146:	3724      	adds	r7, #36	@ 0x24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd90      	pop	{r4, r7, pc}

0800a14c <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800a158:	237f      	movs	r3, #127	@ 0x7f
 800a15a:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	789b      	ldrb	r3, [r3, #2]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01e      	beq.n	800a1a6 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d00a      	beq.n	800a188 <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d114      	bne.n	800a1a6 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	789b      	ldrb	r3, [r3, #2]
 800a180:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10e      	bne.n	800a1a6 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	8adb      	ldrh	r3, [r3, #22]
 800a190:	461a      	mov	r2, r3
 800a192:	2135      	movs	r1, #53	@ 0x35
 800a194:	f003 f898 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800a198:	4603      	mov	r3, r0
 800a19a:	81fb      	strh	r3, [r7, #14]
 800a19c:	89fb      	ldrh	r3, [r7, #14]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800a1a2:	89fb      	ldrh	r3, [r7, #14]
 800a1a4:	e02a      	b.n	800a1fc <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	8a9b      	ldrh	r3, [r3, #20]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	2135      	movs	r1, #53	@ 0x35
 800a1b2:	f003 f889 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	81fb      	strh	r3, [r7, #14]
 800a1ba:	89fb      	ldrh	r3, [r7, #14]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800a1c0:	89fb      	ldrh	r3, [r7, #14]
 800a1c2:	e01b      	b.n	800a1fc <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800a1c4:	78fb      	ldrb	r3, [r7, #3]
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d10b      	bne.n	800a1e2 <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800a1ca:	2208      	movs	r2, #8
 800a1cc:	2157      	movs	r1, #87	@ 0x57
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7fc fd4c 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	81fb      	strh	r3, [r7, #14]
 800a1d8:	89fb      	ldrh	r3, [r7, #14]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00d      	beq.n	800a1fa <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800a1de:	89fb      	ldrh	r3, [r7, #14]
 800a1e0:	e00c      	b.n	800a1fc <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800a1e2:	2204      	movs	r2, #4
 800a1e4:	2157      	movs	r1, #87	@ 0x57
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7fc fd40 	bl	8006c6c <phacDiscLoop_Sw_SetConfig>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	81fb      	strh	r3, [r7, #14]
 800a1f0:	89fb      	ldrh	r3, [r7, #14]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800a1f6:	89fb      	ldrh	r3, [r7, #14]
 800a1f8:	e000      	b.n	800a1fc <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b09b      	sub	sp, #108	@ 0x6c
 800a208:	af08      	add	r7, sp, #32
 800a20a:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a20c:	f107 031c 	add.w	r3, r7, #28
 800a210:	2227      	movs	r2, #39	@ 0x27
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f012 ff57 	bl	801d0c8 <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a21a:	f107 0314 	add.w	r3, r7, #20
 800a21e:	2100      	movs	r1, #0
 800a220:	460a      	mov	r2, r1
 800a222:	801a      	strh	r2, [r3, #0]
 800a224:	460a      	mov	r2, r1
 800a226:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a238:	f107 031a 	add.w	r3, r7, #26
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f107 031b 	add.w	r3, r7, #27
 800a242:	9306      	str	r3, [sp, #24]
 800a244:	f107 031c 	add.w	r3, r7, #28
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	2300      	movs	r3, #0
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	2300      	movs	r3, #0
 800a250:	9303      	str	r3, [sp, #12]
 800a252:	2300      	movs	r3, #0
 800a254:	9302      	str	r3, [sp, #8]
 800a256:	2300      	movs	r3, #0
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	f107 0313 	add.w	r3, r7, #19
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2301      	movs	r3, #1
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	f00b f87f 	bl	8015368 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a270:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800a278:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a27c:	e043      	b.n	800a306 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800a28e:	f107 0314 	add.w	r3, r7, #20
 800a292:	9304      	str	r3, [sp, #16]
 800a294:	2300      	movs	r3, #0
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	2300      	movs	r3, #0
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	2300      	movs	r3, #0
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f00b f978 	bl	801559a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a2b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800a2b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a2bc:	e023      	b.n	800a306 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a2c2:	7efa      	ldrb	r2, [r7, #27]
 800a2c4:	7ebc      	ldrb	r4, [r7, #26]
 800a2c6:	f107 011c 	add.w	r1, r7, #28
 800a2ca:	f107 030a 	add.w	r3, r7, #10
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	f107 0314 	add.w	r3, r7, #20
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	f005 fb5d 	bl	800f9a0 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800a2ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe f9d8 	bl	80086a6 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a2fc:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a300:	e001      	b.n	800a306 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800a302:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a306:	4618      	mov	r0, r3
 800a308:	374c      	adds	r7, #76	@ 0x4c
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd90      	pop	{r4, r7, pc}

0800a30e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800a30e:	b590      	push	{r4, r7, lr}
 800a310:	b09b      	sub	sp, #108	@ 0x6c
 800a312:	af08      	add	r7, sp, #32
 800a314:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800a316:	2304      	movs	r3, #4
 800a318:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a31c:	f107 0318 	add.w	r3, r7, #24
 800a320:	2227      	movs	r2, #39	@ 0x27
 800a322:	2100      	movs	r1, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f012 fecf 	bl	801d0c8 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	2100      	movs	r1, #0
 800a330:	460a      	mov	r2, r1
 800a332:	801a      	strh	r2, [r3, #0]
 800a334:	460a      	mov	r2, r1
 800a336:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7f9b      	ldrb	r3, [r3, #30]
 800a34c:	f023 0320 	bic.w	r3, r3, #32
 800a350:	b2da      	uxtb	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bNumOfCards = 0;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800a366:	2300      	movs	r3, #0
 800a368:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	8b5b      	ldrh	r3, [r3, #26]
 800a374:	461a      	mov	r2, r3
 800a376:	2135      	movs	r1, #53	@ 0x35
 800a378:	f002 ffa6 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a382:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800a38a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a38e:	e1c2      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a394:	2106      	movs	r1, #6
 800a396:	4618      	mov	r0, r3
 800a398:	f002 fa50 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a3a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800a3aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3ae:	e1b2      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bNumOfCards = 0;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a3c4:	f107 0316 	add.w	r3, r7, #22
 800a3c8:	9307      	str	r3, [sp, #28]
 800a3ca:	f107 0317 	add.w	r3, r7, #23
 800a3ce:	9306      	str	r3, [sp, #24]
 800a3d0:	f107 0318 	add.w	r3, r7, #24
 800a3d4:	9305      	str	r3, [sp, #20]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9302      	str	r3, [sp, #8]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	f107 0309 	add.w	r3, r7, #9
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f00a ffb9 	bl	8015368 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a3fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800a404:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a408:	e185      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800a40a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b71      	cmp	r3, #113	@ 0x71
 800a412:	d113      	bne.n	800a43c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	f107 020a 	add.w	r2, r7, #10
 800a41c:	f107 010c 	add.w	r1, r7, #12
 800a420:	4618      	mov	r0, r3
 800a422:	f005 fc55 	bl	800fcd0 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800a426:	4603      	mov	r3, r0
 800a428:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a42c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b12      	cmp	r3, #18
 800a434:	d150      	bne.n	800a4d8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800a436:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a43a:	e16c      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800a44c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800a456:	f107 0210 	add.w	r2, r7, #16
 800a45a:	9204      	str	r2, [sp, #16]
 800a45c:	9303      	str	r3, [sp, #12]
 800a45e:	2300      	movs	r3, #0
 800a460:	9302      	str	r3, [sp, #8]
 800a462:	2300      	movs	r3, #0
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	2300      	movs	r3, #0
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	2300      	movs	r3, #0
 800a46c:	4622      	mov	r2, r4
 800a46e:	f00b f894 	bl	801559a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a472:	4603      	mov	r3, r0
 800a474:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a478:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800a480:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a484:	e147      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a48a:	7dfa      	ldrb	r2, [r7, #23]
 800a48c:	7dbc      	ldrb	r4, [r7, #22]
 800a48e:	f107 0118 	add.w	r1, r7, #24
 800a492:	f107 030a 	add.w	r3, r7, #10
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	9302      	str	r3, [sp, #8]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	f005 fa79 	bl	800f9a0 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800a4b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b12      	cmp	r3, #18
 800a4bc:	d102      	bne.n	800a4c4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800a4be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4c2:	e128      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	7f9b      	ldrb	r3, [r3, #30]
 800a4ce:	f023 0320 	bic.w	r3, r3, #32
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800a4de:	e0fc      	b.n	800a6da <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
        {
            if(pRxBuffer[wIndex] == 0U)
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a4e6:	4413      	add	r3, r2
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 80c8 	bne.w	800a680 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x372>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a4f6:	3302      	adds	r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a500:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a504:	e107      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800a506:	2302      	movs	r3, #2
 800a508:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a518:	3303      	adds	r3, #3
 800a51a:	4413      	add	r3, r2
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d015      	beq.n	800a552 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800a526:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a52a:	3302      	adds	r3, #2
 800a52c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800a530:	2302      	movs	r3, #2
 800a532:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a53c:	3305      	adds	r3, #5
 800a53e:	4413      	add	r3, r2
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b25b      	sxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	da04      	bge.n	800a552 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800a548:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a54c:	3302      	adds	r3, #2
 800a54e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a558:	3301      	adds	r3, #1
 800a55a:	4413      	add	r3, r2
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	4619      	mov	r1, r3
 800a560:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a564:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a568:	4413      	add	r3, r2
 800a56a:	4299      	cmp	r1, r3
 800a56c:	dd53      	ble.n	800a616 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x308>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a574:	3301      	adds	r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	4619      	mov	r1, r3
 800a57c:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a580:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a584:	4413      	add	r3, r2
 800a586:	1acb      	subs	r3, r1, r3
 800a588:	2b3a      	cmp	r3, #58	@ 0x3a
 800a58a:	dc41      	bgt.n	800a610 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x302>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a592:	461a      	mov	r2, r3
 800a594:	4613      	mov	r3, r2
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	1a9b      	subs	r3, r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	33c0      	adds	r3, #192	@ 0xc0
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	1d18      	adds	r0, r3, #4
                        (void)memcpy(
 800a5a4:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800a5a6:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800a5aa:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a5ae:	440b      	add	r3, r1
 800a5b0:	3303      	adds	r3, #3
 800a5b2:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	4413      	add	r3, r2
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a5c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a5ca:	4413      	add	r3, r2
                        (void)memcpy(
 800a5cc:	1ae3      	subs	r3, r4, r3
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f012 fdf9 	bl	801d1c6 <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5da:	3301      	adds	r3, #1
 800a5dc:	4413      	add	r3, r2
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800a5e6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a5ea:	4413      	add	r3, r2
 800a5ec:	1acb      	subs	r3, r1, r3
 800a5ee:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800a5f6:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	1a5b      	subs	r3, r3, r1
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	33fe      	adds	r3, #254	@ 0xfe
 800a60a:	4602      	mov	r2, r0
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	e00f      	b.n	800a630 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x322>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a610:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a614:	e07f      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a61c:	4619      	mov	r1, r3
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	1a5b      	subs	r3, r3, r1
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	33fe      	adds	r3, #254	@ 0xfe
 800a62c:	2200      	movs	r2, #0
 800a62e:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a636:	3301      	adds	r3, #1
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                pDataParams->bNumOfCards++;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a646:	3301      	adds	r3, #1
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d301      	bcc.n	800a662 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x354>
                {
                    return PH_ERR_SUCCESS;
 800a65e:	2300      	movs	r3, #0
 800a660:	e059      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a668:	3301      	adds	r3, #1
 800a66a:	4413      	add	r3, r2
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a674:	4413      	add	r3, r2
 800a676:	b29b      	uxth	r3, r3
 800a678:	3303      	adds	r3, #3
 800a67a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a67e:	e02c      	b.n	800a6da <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a686:	4413      	add	r3, r2
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d102      	bne.n	800a694 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x386>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a68e:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a692:	e040      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a69a:	4413      	add	r3, r2
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d105      	bne.n	800a6ae <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a0>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800a6a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6a6:	3303      	adds	r3, #3
 800a6a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a6ac:	e015      	b.n	800a6da <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800a6ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a6b2:	3303      	adds	r3, #3
 800a6b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7f9b      	ldrb	r3, [r3, #30]
 800a6c2:	f043 0320 	orr.w	r3, r3, #32
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7bdb      	ldrb	r3, [r3, #15]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d102      	bne.n	800a6da <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3cc>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a6d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a6d8:	e01d      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
        while(wIndex < wRxBufferLen)
 800a6da:	897b      	ldrh	r3, [r7, #10]
 800a6dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	f4ff aefd 	bcc.w	800a4e0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800a6e6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3ea>
 800a6ee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a6f2:	2b0f      	cmp	r3, #15
 800a6f4:	f67f ae89 	bls.w	800a40a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800a6f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b71      	cmp	r3, #113	@ 0x71
 800a700:	f43f ae83 	beq.w	800a40a <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x404>
    {
        return PH_ERR_SUCCESS;
 800a70e:	2300      	movs	r3, #0
 800a710:	e001      	b.n	800a716 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x408>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a712:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a716:	4618      	mov	r0, r3
 800a718:	374c      	adds	r7, #76	@ 0x4c
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd90      	pop	{r4, r7, pc}

0800a71e <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800a71e:	b590      	push	{r4, r7, lr}
 800a720:	b09b      	sub	sp, #108	@ 0x6c
 800a722:	af08      	add	r7, sp, #32
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	460b      	mov	r3, r1
 800a728:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800a72a:	f107 031c 	add.w	r3, r7, #28
 800a72e:	2227      	movs	r2, #39	@ 0x27
 800a730:	2100      	movs	r1, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f012 fcc8 	bl	801d0c8 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800a738:	f107 0314 	add.w	r3, r7, #20
 800a73c:	2100      	movs	r1, #0
 800a73e:	460a      	mov	r2, r1
 800a740:	801a      	strh	r2, [r3, #0]
 800a742:	460a      	mov	r2, r1
 800a744:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800a74e:	2320      	movs	r3, #32
 800a750:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d202      	bcs.n	800a764 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800a75e:	78fb      	ldrb	r3, [r7, #3]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a764:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a768:	e099      	b.n	800a89e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800a76a:	78fa      	ldrb	r2, [r7, #3]
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	1a9b      	subs	r3, r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	33fe      	adds	r3, #254	@ 0xfe
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	2bff      	cmp	r3, #255	@ 0xff
 800a77e:	d903      	bls.n	800a788 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6a>
    {
        bMaskLength = 255;
 800a780:	23ff      	movs	r3, #255	@ 0xff
 800a782:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a786:	e00a      	b.n	800a79e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x80>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800a788:	78fa      	ldrb	r2, [r7, #3]
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	011b      	lsls	r3, r3, #4
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	33fe      	adds	r3, #254	@ 0xfe
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	011b      	lsls	r3, r3, #4
 800a7a8:	1a9b      	subs	r3, r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	33c0      	adds	r3, #192	@ 0xc0
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	f107 021a 	add.w	r2, r7, #26
 800a7b8:	9207      	str	r2, [sp, #28]
 800a7ba:	f107 021b 	add.w	r2, r7, #27
 800a7be:	9206      	str	r2, [sp, #24]
 800a7c0:	f107 021c 	add.w	r2, r7, #28
 800a7c4:	9205      	str	r2, [sp, #20]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	9204      	str	r2, [sp, #16]
 800a7ca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a7ce:	9203      	str	r2, [sp, #12]
 800a7d0:	9302      	str	r3, [sp, #8]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	f107 030d 	add.w	r3, r7, #13
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	2301      	movs	r3, #1
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	f00a fdc1 	bl	8015368 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a7ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xdc>
 800a7f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a7f8:	e051      	b.n	800a89e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800a80a:	f107 0314 	add.w	r3, r7, #20
 800a80e:	9304      	str	r3, [sp, #16]
 800a810:	2300      	movs	r3, #0
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	2300      	movs	r3, #0
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	2300      	movs	r3, #0
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	2300      	movs	r3, #0
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	2300      	movs	r3, #0
 800a822:	f00a feba 	bl	801559a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800a826:	4603      	mov	r3, r0
 800a828:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a82c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x11c>
 800a834:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a838:	e031      	b.n	800a89e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a83e:	7efa      	ldrb	r2, [r7, #27]
 800a840:	7ebc      	ldrb	r4, [r7, #26]
 800a842:	f107 011c 	add.w	r1, r7, #28
 800a846:	f107 030e 	add.w	r3, r7, #14
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	f107 0310 	add.w	r3, r7, #16
 800a850:	9302      	str	r3, [sp, #8]
 800a852:	2302      	movs	r3, #2
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	f107 0314 	add.w	r3, r7, #20
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	4623      	mov	r3, r4
 800a85e:	f005 f89f 	bl	800f9a0 <phhalHw_Pn5180_I18000p3m3Inventory>
 800a862:	4603      	mov	r3, r0
 800a864:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a868:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x158>
 800a870:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a874:	e013      	b.n	800a89e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	89fb      	ldrh	r3, [r7, #14]
 800a87e:	3b02      	subs	r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	4619      	mov	r1, r3
 800a884:	f000 fbd5 	bl	800b032 <phalI18000p3m3_Sw_SetHandle>
 800a888:	4603      	mov	r3, r0
 800a88a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a88e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x17e>
 800a896:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a89a:	e000      	b.n	800a89e <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x180>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800a89c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	374c      	adds	r7, #76	@ 0x4c
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd90      	pop	{r4, r7, pc}

0800a8a6 <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af04      	add	r7, sp, #16
 800a8ac:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800a8ae:	237f      	movs	r3, #127	@ 0x7f
 800a8b0:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800a8bc:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800a8c0:	b2d9      	uxtb	r1, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	33b7      	adds	r3, #183	@ 0xb7
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	32b8      	adds	r2, #184	@ 0xb8
 800a8ca:	9202      	str	r2, [sp, #8]
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f00a ff6c 	bl	80157b2 <phpalSli15693_Sw_Inventory>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800a8de:	89fb      	ldrh	r3, [r7, #14]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fd fee0 	bl	80086a6 <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a8ec:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a8f0:	e000      	b.n	800a8f4 <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800a8f2:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800a8fc:	b590      	push	{r4, r7, lr}
 800a8fe:	b09b      	sub	sp, #108	@ 0x6c
 800a900:	af04      	add	r7, sp, #16
 800a902:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800a904:	237f      	movs	r3, #127	@ 0x7f
 800a906:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800a92e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	605a      	str	r2, [r3, #4]
 800a938:	609a      	str	r2, [r3, #8]
 800a93a:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800a93c:	f107 030c 	add.w	r3, r7, #12
 800a940:	2220      	movs	r2, #32
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f012 fbbf 	bl	801d0c8 <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7f9b      	ldrb	r3, [r3, #30]
 800a956:	f023 0310 	bic.w	r3, r3, #16
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	8b1b      	ldrh	r3, [r3, #24]
 800a968:	461a      	mov	r2, r3
 800a96a:	2135      	movs	r1, #53	@ 0x35
 800a96c:	f002 fcac 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800a970:	4603      	mov	r3, r0
 800a972:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a976:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800a97e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a982:	e2bd      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a988:	2104      	movs	r1, #4
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 ff56 	bl	800c83c <phhalHw_Pn5180_ApplyProtocolSettings>
 800a990:	4603      	mov	r3, r0
 800a992:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800a99e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9a2:	e2ad      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800a9ae:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800a9b2:	b2d9      	uxtb	r1, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	33b7      	adds	r3, #183	@ 0xb7
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	32b8      	adds	r2, #184	@ 0xb8
 800a9bc:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800a9c0:	9202      	str	r2, [sp, #8]
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4623      	mov	r3, r4
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f00a fef0 	bl	80157b2 <phpalSli15693_Sw_Inventory>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800a9d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d102      	bne.n	800a9e8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800a9e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9e6:	e28b      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a9e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d111      	bne.n	800aa16 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            pDataParams->bNumOfCards++;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800aa08:	3301      	adds	r3, #1
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e274      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800aa16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d005      	beq.n	800aa2c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800aa20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	f040 825e 	bne.w	800aee8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ec>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7f9b      	ldrb	r3, [r3, #30]
 800aa30:	f043 0310 	orr.w	r3, r3, #16
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	7b9b      	ldrb	r3, [r3, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 8243 	bne.w	800aeca <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ce>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800aa44:	f244 0381 	movw	r3, #16513	@ 0x4081
 800aa48:	e25a      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	7f9b      	ldrb	r3, [r3, #30]
 800aa54:	f023 0310 	bic.w	r3, r3, #16
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800aa68:	f043 0304 	orr.w	r3, r3, #4
 800aa6c:	b2dc      	uxtb	r4, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aa74:	461a      	mov	r2, r3
 800aa76:	4613      	mov	r3, r2
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	4413      	add	r3, r2
 800aa7c:	33b0      	adds	r3, #176	@ 0xb0
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	4413      	add	r3, r2
 800aa82:	1dda      	adds	r2, r3, #7
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	440b      	add	r3, r1
 800aa92:	33b0      	adds	r3, #176	@ 0xb0
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	440b      	add	r3, r1
 800aa98:	3308      	adds	r3, #8
 800aa9a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800aa9e:	9302      	str	r3, [sp, #8]
 800aaa0:	9201      	str	r2, [sp, #4]
 800aaa2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4621      	mov	r1, r4
 800aaae:	f00a fe80 	bl	80157b2 <phpalSli15693_Sw_Inventory>
 800aab2:	4603      	mov	r3, r0
 800aab4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800aab8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d04f      	beq.n	800ab62 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800aac2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b06      	cmp	r3, #6
 800aaca:	d04a      	beq.n	800ab62 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800aacc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d004      	beq.n	800aae0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e4>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800aad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d11f      	bne.n	800ab20 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x224>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7f9b      	ldrb	r3, [r3, #30]
 800aae4:	f043 0310 	orr.w	r3, r3, #16
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800aaee:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	3358      	adds	r3, #88	@ 0x58
 800aaf6:	443b      	add	r3, r7
 800aaf8:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800aafc:	b21a      	sxth	r2, r3
 800aafe:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ab02:	2101      	movs	r1, #1
 800ab04:	fa01 f303 	lsl.w	r3, r1, r3
 800ab08:	b21b      	sxth	r3, r3
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	b21a      	sxth	r2, r3
 800ab0e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ab12:	b292      	uxth	r2, r2
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	3358      	adds	r3, #88	@ 0x58
 800ab18:	443b      	add	r3, r7
 800ab1a:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800ab1e:	e020      	b.n	800ab62 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800ab20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d118      	bne.n	800ab5c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x260>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ab30:	3301      	adds	r3, #1
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                            pDataParams->bNumOfCards++;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ab40:	3301      	adds	r3, #1
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7b9b      	ldrb	r3, [r3, #14]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d304      	bcc.n	800ab62 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x266>
                            {
                                return PH_ERR_SUCCESS;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e1d1      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800ab5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab60:	e1ce      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800ab62:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ab66:	3301      	adds	r3, #1
 800ab68:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ab6c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ab70:	2b10      	cmp	r3, #16
 800ab72:	d102      	bne.n	800ab7a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x27e>
                        {
                            bNextSlot = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800ab7a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d031      	beq.n	800abe6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ea>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	4613      	mov	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	4413      	add	r3, r2
 800ab94:	33b0      	adds	r3, #176	@ 0xb0
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	4413      	add	r3, r2
 800ab9a:	1dd9      	adds	r1, r3, #7
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aba2:	461a      	mov	r2, r3
 800aba4:	4613      	mov	r3, r2
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	4413      	add	r3, r2
 800abaa:	33b0      	adds	r3, #176	@ 0xb0
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	4413      	add	r3, r2
 800abb0:	f103 0208 	add.w	r2, r3, #8
 800abb4:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800abb8:	9302      	str	r3, [sp, #8]
 800abba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	4613      	mov	r3, r2
 800abc8:	460a      	mov	r2, r1
 800abca:	2100      	movs	r1, #0
 800abcc:	f00a fe1b 	bl	8015806 <phpalSli15693_Sw_SendEof>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800abd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b12      	cmp	r3, #18
 800abde:	d102      	bne.n	800abe6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ea>
 800abe0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800abe4:	e18c      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
                        }
                    }
                    while(0U != bNextSlot);
 800abe6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800abea:	2b00      	cmp	r3, #0
 800abec:	f47f af64 	bne.w	800aab8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1bc>
                    bNextSlot = 1;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800abfc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	3358      	adds	r3, #88	@ 0x58
 800ac04:	443b      	add	r3, r7
 800ac06:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 8120 	beq.w	800ae50 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x554>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800ac10:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ac14:	3358      	adds	r3, #88	@ 0x58
 800ac16:	443b      	add	r3, r7
 800ac18:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac1c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800ac20:	e110      	b.n	800ae44 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x548>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800ac22:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	3358      	adds	r3, #88	@ 0x58
 800ac2a:	443b      	add	r3, r7
 800ac2c:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ac30:	461a      	mov	r2, r3
 800ac32:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ac36:	fa42 f303 	asr.w	r3, r2, r3
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 80c8 	beq.w	800add4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4d8>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800ac44:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800ac52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10a      	bne.n	800ac70 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x374>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800ac5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ac5e:	08db      	lsrs	r3, r3, #3
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	3358      	adds	r3, #88	@ 0x58
 800ac64:	443b      	add	r3, r7
 800ac66:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ac6a:	f803 2c14 	strb.w	r2, [r3, #-20]
 800ac6e:	e047      	b.n	800ad00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x404>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800ac70:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ac74:	08db      	lsrs	r3, r3, #3
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	3358      	adds	r3, #88	@ 0x58
 800ac7a:	443b      	add	r3, r7
 800ac7c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ac80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac84:	f1c3 0308 	rsb	r3, r3, #8
 800ac88:	21ff      	movs	r1, #255	@ 0xff
 800ac8a:	fa41 f303 	asr.w	r3, r1, r3
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800ac94:	08c9      	lsrs	r1, r1, #3
 800ac96:	b2c9      	uxtb	r1, r1
 800ac98:	4013      	ands	r3, r2
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800aca0:	443b      	add	r3, r7
 800aca2:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800aca6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800acaa:	08db      	lsrs	r3, r3, #3
 800acac:	b2db      	uxtb	r3, r3
 800acae:	3358      	adds	r3, #88	@ 0x58
 800acb0:	443b      	add	r3, r7
 800acb2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800acb6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800acba:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800acbe:	408b      	lsls	r3, r1
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800acc6:	08c9      	lsrs	r1, r1, #3
 800acc8:	b2c9      	uxtb	r1, r1
 800acca:	4313      	orrs	r3, r2
 800accc:	b2da      	uxtb	r2, r3
 800acce:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800acd2:	443b      	add	r3, r7
 800acd4:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800acd8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d90f      	bls.n	800ad00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x404>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800ace0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ace4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800ace8:	fa43 f202 	asr.w	r2, r3, r2
 800acec:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800acf0:	08db      	lsrs	r3, r3, #3
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	3301      	adds	r3, #1
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	3358      	adds	r3, #88	@ 0x58
 800acfa:	443b      	add	r3, r7
 800acfc:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800ad00:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ad04:	3304      	adds	r3, #4
 800ad06:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	7f9b      	ldrb	r3, [r3, #30]
 800ad0e:	f043 0310 	orr.w	r3, r3, #16
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800ad18:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	3358      	adds	r3, #88	@ 0x58
 800ad20:	443b      	add	r3, r7
 800ad22:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800ad26:	b21a      	sxth	r2, r3
 800ad28:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad32:	b21b      	sxth	r3, r3
 800ad34:	43db      	mvns	r3, r3
 800ad36:	b21b      	sxth	r3, r3
 800ad38:	4013      	ands	r3, r2
 800ad3a:	b21a      	sxth	r2, r3
 800ad3c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad40:	b292      	uxth	r2, r2
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	3358      	adds	r3, #88	@ 0x58
 800ad46:	443b      	add	r3, r7
 800ad48:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800ad4c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ad50:	2b0f      	cmp	r3, #15
 800ad52:	d124      	bne.n	800ad9e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a2>
                                    {
                                        bCount[bLevel] = 0U;
 800ad54:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad58:	3358      	adds	r3, #88	@ 0x58
 800ad5a:	443b      	add	r3, r7
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800ad62:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	3358      	adds	r3, #88	@ 0x58
 800ad6a:	443b      	add	r3, r7
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800ad72:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d103      	bne.n	800ad82 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x486>
                                        {
                                            bEnd = 1;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800ad80:	e098      	b.n	800aeb4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                            bCount[bLevel] = bSlotCount;
 800ad82:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad86:	3358      	adds	r3, #88	@ 0x58
 800ad88:	443b      	add	r3, r7
 800ad8a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ad8e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800ad92:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ad96:	3301      	adds	r3, #1
 800ad98:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800ad9c:	e08a      	b.n	800aeb4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                        bCount[bLevel] = bSlotCount;
 800ad9e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ada2:	3358      	adds	r3, #88	@ 0x58
 800ada4:	443b      	add	r3, r7
 800ada6:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800adaa:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800adae:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adb2:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800adb6:	443a      	add	r2, r7
 800adb8:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800adbc:	3201      	adds	r2, #1
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	3358      	adds	r3, #88	@ 0x58
 800adc2:	443b      	add	r3, r7
 800adc4:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800adc8:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800adcc:	3301      	adds	r3, #1
 800adce:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800add2:	e06f      	b.n	800aeb4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800add4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800add8:	2b0f      	cmp	r3, #15
 800adda:	d12e      	bne.n	800ae3a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x53e>
                                    {
                                        if(bLevel == 0U)
 800addc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4fe>
                                        {
                                            bEnd = 1;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	7f9b      	ldrb	r3, [r3, #30]
 800adee:	f023 0310 	bic.w	r3, r3, #16
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	779a      	strb	r2, [r3, #30]
 800adf8:	e01f      	b.n	800ae3a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x53e>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7f9b      	ldrb	r3, [r3, #30]
 800adfe:	f023 0310 	bic.w	r3, r3, #16
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800ae08:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ae0c:	3b04      	subs	r3, #4
 800ae0e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800ae12:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae16:	005b      	lsls	r3, r3, #1
 800ae18:	3358      	adds	r3, #88	@ 0x58
 800ae1a:	443b      	add	r3, r7
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800ae22:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae26:	3358      	adds	r3, #88	@ 0x58
 800ae28:	443b      	add	r3, r7
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800ae30:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae34:	3b01      	subs	r3, #1
 800ae36:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800ae3a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800ae44:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ae48:	2b0f      	cmp	r3, #15
 800ae4a:	f67f aeea 	bls.w	800ac22 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x326>
 800ae4e:	e031      	b.n	800aeb4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800ae50:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10a      	bne.n	800ae6e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x572>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7f9b      	ldrb	r3, [r3, #30]
 800ae5c:	f023 0310 	bic.w	r3, r3, #16
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800ae6c:	e022      	b.n	800aeb4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5b8>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7f9b      	ldrb	r3, [r3, #30]
 800ae72:	f023 0310 	bic.w	r3, r3, #16
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800ae7c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800ae80:	3b04      	subs	r3, #4
 800ae82:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800ae86:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	3358      	adds	r3, #88	@ 0x58
 800ae8e:	443b      	add	r3, r7
 800ae90:	2200      	movs	r2, #0
 800ae92:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800ae96:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800ae9a:	3358      	adds	r3, #88	@ 0x58
 800ae9c:	443b      	add	r3, r7
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800aea4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800aeb4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f47f ae9c 	bne.w	800abf6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fa>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	7f9b      	ldrb	r3, [r3, #30]
 800aec2:	f003 0310 	and.w	r3, r3, #16
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d008      	beq.n	800aedc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e0>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7b9b      	ldrb	r3, [r3, #14]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	f4ff adb8 	bcc.w	800aa4a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800aeda:	e000      	b.n	800aede <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e2>
                    {
                        break;
 800aedc:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800aede:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f1      	beq.n	800aeca <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5ce>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800aee6:	e002      	b.n	800aeee <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f2>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800aee8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800aeec:	e008      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x600>
    {
        return PH_ERR_SUCCESS;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e001      	b.n	800af00 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800aefc:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800af00:	4618      	mov	r0, r3
 800af02:	375c      	adds	r7, #92	@ 0x5c
 800af04:	46bd      	mov	sp, r7
 800af06:	bd90      	pop	{r4, r7, pc}

0800af08 <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800af14:	237f      	movs	r3, #127	@ 0x7f
 800af16:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800af1e:	78fa      	ldrb	r2, [r7, #3]
 800af20:	429a      	cmp	r2, r3
 800af22:	d202      	bcs.n	800af2a <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d002      	beq.n	800af30 <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800af2a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800af2e:	e026      	b.n	800af7e <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800af34:	78fa      	ldrb	r2, [r7, #3]
 800af36:	4613      	mov	r3, r2
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	4413      	add	r3, r2
 800af3c:	33b0      	adds	r3, #176	@ 0xb0
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	4413      	add	r3, r2
 800af42:	3308      	adds	r3, #8
 800af44:	2208      	movs	r2, #8
 800af46:	4619      	mov	r1, r3
 800af48:	f00a ff9d 	bl	8015e86 <phpalSli15693_Sw_SetSerialNo>
 800af4c:	4603      	mov	r3, r0
 800af4e:	81fb      	strh	r3, [r7, #14]
 800af50:	89fb      	ldrh	r3, [r7, #14]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800af56:	89fb      	ldrh	r3, [r7, #14]
 800af58:	e011      	b.n	800af7e <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 800af60:	2b10      	cmp	r3, #16
 800af62:	d10b      	bne.n	800af7c <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af68:	4618      	mov	r0, r3
 800af6a:	f00a fe24 	bl	8015bb6 <phpalSli15693_Sw_Select>
 800af6e:	4603      	mov	r3, r0
 800af70:	81fb      	strh	r3, [r7, #14]
 800af72:	89fb      	ldrh	r3, [r7, #14]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800af78:	89fb      	ldrh	r3, [r7, #14]
 800af7a:	e000      	b.n	800af7e <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800af7c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	460b      	mov	r3, r1
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800af94:	897b      	ldrh	r3, [r7, #10]
 800af96:	2b0c      	cmp	r3, #12
 800af98:	d002      	beq.n	800afa0 <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800af9a:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800af9e:	e014      	b.n	800afca <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <phalFelica_Sw_Init+0x24>
 800afa6:	2321      	movs	r3, #33	@ 0x21
 800afa8:	e00f      	b.n	800afca <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <phalFelica_Sw_Init+0x2e>
 800afb0:	2321      	movs	r3, #33	@ 0x21
 800afb2:	e00a      	b.n	800afca <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f241 4201 	movw	r2, #5121	@ 0x1401
 800afba:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	460b      	mov	r3, r1
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800afe4:	897b      	ldrh	r3, [r7, #10]
 800afe6:	2b0c      	cmp	r3, #12
 800afe8:	d002      	beq.n	800aff0 <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800afea:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800afee:	e01a      	b.n	800b026 <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <phalI18000p3m3_Sw_Init+0x24>
 800aff6:	2321      	movs	r3, #33	@ 0x21
 800aff8:	e015      	b.n	800b026 <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <phalI18000p3m3_Sw_Init+0x2e>
 800b000:	2321      	movs	r3, #33	@ 0x21
 800b002:	e010      	b.n	800b026 <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f641 0201 	movw	r2, #6145	@ 0x1801
 800b00a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3308      	adds	r3, #8
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	8812      	ldrh	r2, [r2, #0]
 800b044:	b292      	uxth	r2, r2
 800b046:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	607a      	str	r2, [r7, #4]
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	460b      	mov	r3, r1
 800b06a:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d102      	bne.n	800b078 <phalICode_Sw_Init+0x1c>
 800b072:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800b076:	e026      	b.n	800b0c6 <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <phalICode_Sw_Init+0x28>
 800b07e:	f241 5321 	movw	r3, #5409	@ 0x1521
 800b082:	e020      	b.n	800b0c6 <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800b084:	897b      	ldrh	r3, [r7, #10]
 800b086:	2b20      	cmp	r3, #32
 800b088:	d002      	beq.n	800b090 <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800b08a:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800b08e:	e01a      	b.n	800b0c6 <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f241 5201 	movw	r2, #5377	@ 0x1501
 800b096:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	220a      	movs	r2, #10
 800b0bc:	2100      	movs	r1, #0
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f012 f802 	bl	801d0c8 <memset>

    return PH_ERR_SUCCESS;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <phalICode_Sw_ReadSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_ReadSingleBlock(phalICode_Sw_DataParams_t * pDataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t ** ppData,
        uint16_t * pDataLen)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b088      	sub	sp, #32
 800b0d2:	af02      	add	r7, sp, #8
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	607b      	str	r3, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	72fb      	strb	r3, [r7, #11]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wRetries = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	82bb      	strh	r3, [r7, #20]

    /* Retrieve max retry count */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f107 0214 	add.w	r2, r7, #20
 800b0f0:	2108      	movs	r1, #8
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f00b f8ba 	bl	801626c <phpalSli15693_Sw_GetConfig>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	82fb      	strh	r3, [r7, #22]
 800b0fc:	8afb      	ldrh	r3, [r7, #22]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <phalICode_Sw_ReadSingleBlock+0x38>
 800b102:	8afb      	ldrh	r3, [r7, #22]
 800b104:	e01f      	b.n	800b146 <phalICode_Sw_ReadSingleBlock+0x78>
            pDataParams->pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT,
            &wRetries));

    if(wRetries < 0xFF)
 800b106:	8abb      	ldrh	r3, [r7, #20]
 800b108:	2bfe      	cmp	r3, #254	@ 0xfe
 800b10a:	d803      	bhi.n	800b114 <phalICode_Sw_ReadSingleBlock+0x46>
    {
        wRetries = wRetries + (uint8_t)1U;
 800b10c:	8abb      	ldrh	r3, [r7, #20]
 800b10e:	3301      	adds	r3, #1
 800b110:	b29b      	uxth	r3, r3
 800b112:	82bb      	strh	r3, [r7, #20]
    }

    do
    {
        wStatus = phalICode_Int_ReadSingleBlock(
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6858      	ldr	r0, [r3, #4]
 800b118:	7aba      	ldrb	r2, [r7, #10]
 800b11a:	7af9      	ldrb	r1, [r7, #11]
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f000 f9f3 	bl	800b50c <phalICode_Int_ReadSingleBlock>
 800b126:	4603      	mov	r3, r0
 800b128:	82fb      	strh	r3, [r7, #22]
                bOption,
                bBlockNo,
                ppData,
                pDataLen);

        if(wRetries != 0)
 800b12a:	8abb      	ldrh	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <phalICode_Sw_ReadSingleBlock+0x6a>
        {
            wRetries = wRetries - (uint8_t)1U;
 800b130:	8abb      	ldrh	r3, [r7, #20]
 800b132:	3b01      	subs	r3, #1
 800b134:	b29b      	uxth	r3, r3
 800b136:	82bb      	strh	r3, [r7, #20]
        }

    }while((wStatus != PH_ERR_SUCCESS) && (wRetries != 0U));
 800b138:	8afb      	ldrh	r3, [r7, #22]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <phalICode_Sw_ReadSingleBlock+0x76>
 800b13e:	8abb      	ldrh	r3, [r7, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1e7      	bne.n	800b114 <phalICode_Sw_ReadSingleBlock+0x46>

    return wStatus;
 800b144:	8afb      	ldrh	r3, [r7, #22]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <phalICode_Sw_WriteSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_WriteSingleBlock(phalICode_Sw_DataParams_t * pDataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t * pData,
        uint8_t bDataLen)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b088      	sub	sp, #32
 800b152:	af02      	add	r7, sp, #8
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	607b      	str	r3, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	72fb      	strb	r3, [r7, #11]
 800b15c:	4613      	mov	r3, r2
 800b15e:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wRetries = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	82bb      	strh	r3, [r7, #20]

    /* Retrieve max retry count */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f107 0214 	add.w	r2, r7, #20
 800b170:	2108      	movs	r1, #8
 800b172:	4618      	mov	r0, r3
 800b174:	f00b f87a 	bl	801626c <phpalSli15693_Sw_GetConfig>
 800b178:	4603      	mov	r3, r0
 800b17a:	82fb      	strh	r3, [r7, #22]
 800b17c:	8afb      	ldrh	r3, [r7, #22]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <phalICode_Sw_WriteSingleBlock+0x38>
 800b182:	8afb      	ldrh	r3, [r7, #22]
 800b184:	e020      	b.n	800b1c8 <phalICode_Sw_WriteSingleBlock+0x7a>
            pDataParams->pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT,
            &wRetries));

    if(wRetries < 0xFF)
 800b186:	8abb      	ldrh	r3, [r7, #20]
 800b188:	2bfe      	cmp	r3, #254	@ 0xfe
 800b18a:	d803      	bhi.n	800b194 <phalICode_Sw_WriteSingleBlock+0x46>
    {
        wRetries = wRetries + (uint8_t)1U;
 800b18c:	8abb      	ldrh	r3, [r7, #20]
 800b18e:	3301      	adds	r3, #1
 800b190:	b29b      	uxth	r3, r3
 800b192:	82bb      	strh	r3, [r7, #20]
    }

    do
    {
        wStatus = phalICode_Int_WriteSingleBlock(
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6858      	ldr	r0, [r3, #4]
 800b198:	7aba      	ldrb	r2, [r7, #10]
 800b19a:	7af9      	ldrb	r1, [r7, #11]
 800b19c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f000 fa19 	bl	800b5da <phalICode_Int_WriteSingleBlock>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	82fb      	strh	r3, [r7, #22]
                bOption,
                bBlockNo,
                pData,
                bDataLen);

        if(wRetries != 0)
 800b1ac:	8abb      	ldrh	r3, [r7, #20]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <phalICode_Sw_WriteSingleBlock+0x6c>
        {
            wRetries = wRetries - (uint8_t)1U;
 800b1b2:	8abb      	ldrh	r3, [r7, #20]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	82bb      	strh	r3, [r7, #20]
        }

    }while((wStatus != PH_ERR_SUCCESS) && (wRetries != 0U));
 800b1ba:	8afb      	ldrh	r3, [r7, #22]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <phalICode_Sw_WriteSingleBlock+0x78>
 800b1c0:	8abb      	ldrh	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e6      	bne.n	800b194 <phalICode_Sw_WriteSingleBlock+0x46>

    return wStatus;
 800b1c6:	8afb      	ldrh	r3, [r7, #22]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <phalICode_Int_SetOptionBit>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_SetOptionBit(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bUpdateTiming)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM wStatus  = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wCurFlag = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	817b      	strh	r3, [r7, #10]
    uint16_t    PH_MEMLOC_REM wNewFlag = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	81fb      	strh	r3, [r7, #14]

    /* Check if the Option Byte has a valid value. */
    if (bOption > PHAL_ICODE_OPTION_ON)
 800b1ec:	78fb      	ldrb	r3, [r7, #3]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d902      	bls.n	800b1f8 <phalICode_Int_SetOptionBit+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AL_ICODE);
 800b1f2:	f241 5321 	movw	r3, #5409	@ 0x1521
 800b1f6:	e04b      	b.n	800b290 <phalICode_Int_SetOptionBit+0xc0>
    }

    /* Retrieve the flags byte */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b1f8:	f107 030a 	add.w	r3, r7, #10
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	2100      	movs	r1, #0
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f00b f833 	bl	801626c <phpalSli15693_Sw_GetConfig>
 800b206:	4603      	mov	r3, r0
 800b208:	81bb      	strh	r3, [r7, #12]
 800b20a:	89bb      	ldrh	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <phalICode_Int_SetOptionBit+0x44>
 800b210:	89bb      	ldrh	r3, [r7, #12]
 800b212:	e03d      	b.n	800b290 <phalICode_Int_SetOptionBit+0xc0>
            pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_FLAGS,
            &wCurFlag));

    /* Update Option bit with provided information. */
    if (bOption != PHAL_ICODE_OPTION_OFF)
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d004      	beq.n	800b224 <phalICode_Int_SetOptionBit+0x54>
    {
        wNewFlag = wCurFlag | PHPAL_SLI15693_FLAG_OPTION;
 800b21a:	897b      	ldrh	r3, [r7, #10]
 800b21c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b220:	81fb      	strh	r3, [r7, #14]
 800b222:	e003      	b.n	800b22c <phalICode_Int_SetOptionBit+0x5c>
    }
    /* Clear option bit */
    else
    {
        wNewFlag = wCurFlag & (uint8_t)(~(uint8_t)PHPAL_SLI15693_FLAG_OPTION & 0xFF);
 800b224:	897b      	ldrh	r3, [r7, #10]
 800b226:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 800b22a:	81fb      	strh	r3, [r7, #14]
    }

    /* Update the Option bit in the Flag's byte. */
    if (wNewFlag != wCurFlag)
 800b22c:	897b      	ldrh	r3, [r7, #10]
 800b22e:	89fa      	ldrh	r2, [r7, #14]
 800b230:	429a      	cmp	r2, r3
 800b232:	d00c      	beq.n	800b24e <phalICode_Int_SetOptionBit+0x7e>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b234:	89fb      	ldrh	r3, [r7, #14]
 800b236:	461a      	mov	r2, r3
 800b238:	2100      	movs	r1, #0
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f00a fe40 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 800b240:	4603      	mov	r3, r0
 800b242:	81bb      	strh	r3, [r7, #12]
 800b244:	89bb      	ldrh	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <phalICode_Int_SetOptionBit+0x7e>
 800b24a:	89bb      	ldrh	r3, [r7, #12]
 800b24c:	e020      	b.n	800b290 <phalICode_Int_SetOptionBit+0xc0>
                pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_FLAGS,
                wNewFlag));
    }

    if(bUpdateTiming == PH_ON)
 800b24e:	78bb      	ldrb	r3, [r7, #2]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d11c      	bne.n	800b28e <phalICode_Int_SetOptionBit+0xbe>
    {
        /* Set special frame EOF timeout. */
        if(bOption != PHAL_ICODE_OPTION_OFF)
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00c      	beq.n	800b274 <phalICode_Int_SetOptionBit+0xa4>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b25a:	f244 12d2 	movw	r2, #16850	@ 0x41d2
 800b25e:	2102      	movs	r1, #2
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f00a fe2d 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 800b266:	4603      	mov	r3, r0
 800b268:	81bb      	strh	r3, [r7, #12]
 800b26a:	89bb      	ldrh	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00e      	beq.n	800b28e <phalICode_Int_SetOptionBit+0xbe>
 800b270:	89bb      	ldrh	r3, [r7, #12]
 800b272:	e00d      	b.n	800b290 <phalICode_Int_SetOptionBit+0xc0>
        }

        /* Set long timeout. */
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b274:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b278:	2102      	movs	r1, #2
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f00a fe20 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 800b280:	4603      	mov	r3, r0
 800b282:	81bb      	strh	r3, [r7, #12]
 800b284:	89bb      	ldrh	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <phalICode_Int_SetOptionBit+0xbe>
 800b28a:	89bb      	ldrh	r3, [r7, #12]
 800b28c:	e000      	b.n	800b290 <phalICode_Int_SetOptionBit+0xc0>
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,
                PHPAL_SLI15693_TIMEOUT_LONG_US));
        }
    }

    return PH_ERR_SUCCESS;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <phalICode_Int_WriteAlikeHandling>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_WriteAlikeHandling(void * pPalSli15693DataParams, phStatus_t wExchangeStatus)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	@ 0x30
 800b29c:	af04      	add	r7, sp, #16
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	807b      	strh	r3, [r7, #2]
    uint8_t     PH_MEMLOC_REM bDsfid = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	77fb      	strb	r3, [r7, #31]
    uint8_t     PH_MEMLOC_REM bUid[PHPAL_SLI15693_UID_LENGTH];
    uint8_t     PH_MEMLOC_REM bUidLen = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	74fb      	strb	r3, [r7, #19]
    uint8_t     PH_MEMLOC_REM aData[1];
    uint16_t    PH_MEMLOC_REM wDataLen = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	81fb      	strh	r3, [r7, #14]

    switch (wExchangeStatus & PH_ERR_MASK)
 800b2b0:	887b      	ldrh	r3, [r7, #2]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b05      	cmp	r3, #5
 800b2b6:	d83a      	bhi.n	800b32e <phalICode_Int_WriteAlikeHandling+0x96>
 800b2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c0 <phalICode_Int_WriteAlikeHandling+0x28>)
 800b2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2be:	bf00      	nop
 800b2c0:	0800b2d9 	.word	0x0800b2d9
 800b2c4:	0800b2df 	.word	0x0800b2df
 800b2c8:	0800b307 	.word	0x0800b307
 800b2cc:	0800b307 	.word	0x0800b307
 800b2d0:	0800b32f 	.word	0x0800b32f
 800b2d4:	0800b307 	.word	0x0800b307
    {
    /* Check for protocol error.  */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_ICODE);
 800b2d8:	f241 5306 	movw	r3, #5382	@ 0x1506
 800b2dc:	e028      	b.n	800b330 <phalICode_Int_WriteAlikeHandling+0x98>

        /* Timeout is correct behaviour, send EOF. */
    case PH_ERR_IO_TIMEOUT:
        /* card answers after next EOF -> correct status is timeout */
        return phpalSli15693_SendEof(
 800b2de:	f107 0114 	add.w	r1, r7, #20
 800b2e2:	f107 021f 	add.w	r2, r7, #31
 800b2e6:	f107 030e 	add.w	r3, r7, #14
 800b2ea:	9302      	str	r3, [sp, #8]
 800b2ec:	f107 0310 	add.w	r3, r7, #16
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	f107 0313 	add.w	r3, r7, #19
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	2102      	movs	r1, #2
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f00a fa82 	bl	8015806 <phpalSli15693_Sw_SendEof>
 800b302:	4603      	mov	r3, r0
 800b304:	e014      	b.n	800b330 <phalICode_Int_WriteAlikeHandling+0x98>

        /* Framing errors etc. are ignored and the waiting until EOF sending is continued. */
    case PH_ERR_INTEGRITY_ERROR:
    case PH_ERR_COLLISION_ERROR:
    case PH_ERR_FRAMING_ERROR:
        return phpalSli15693_SendEof(
 800b306:	f107 0114 	add.w	r1, r7, #20
 800b30a:	f107 021f 	add.w	r2, r7, #31
 800b30e:	f107 030e 	add.w	r3, r7, #14
 800b312:	9302      	str	r3, [sp, #8]
 800b314:	f107 0310 	add.w	r3, r7, #16
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	f107 0313 	add.w	r3, r7, #19
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	460b      	mov	r3, r1
 800b322:	2103      	movs	r1, #3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f00a fa6e 	bl	8015806 <phpalSli15693_Sw_SendEof>
 800b32a:	4603      	mov	r3, r0
 800b32c:	e000      	b.n	800b330 <phalICode_Int_WriteAlikeHandling+0x98>
                aData,
                &wDataLen);

        /* Directly return all other errors */
    default:
        return wExchangeStatus;
 800b32e:	887b      	ldrh	r3, [r7, #2]
    }
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <phalICode_Int_ComputeErrorCode>:
 * Return:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_ComputeErrorCode(void * pPalSli15693DataParams, phStatus_t wStatus)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM wStatusTmp = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wValue = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	81bb      	strh	r3, [r7, #12]

    /* Update the temporary status variable. */
    wStatusTmp = wStatus;
 800b34c:	887b      	ldrh	r3, [r7, #2]
 800b34e:	81fb      	strh	r3, [r7, #14]

    /*  Compute the custom error codes in case PAL returns an error. */
    if((wStatus & PH_ERR_MASK) == PHPAL_SLI15693_ERR_ISO15693)
 800b350:	887b      	ldrh	r3, [r7, #2]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b80      	cmp	r3, #128	@ 0x80
 800b356:	f040 80d4 	bne.w	800b502 <phalICode_Int_ComputeErrorCode+0x1ca>
    {
        /* Get the error code from additional info. */
        PH_CHECK_SUCCESS_FCT(wStatusTmp, phpalSli15693_GetConfig(
 800b35a:	f107 030c 	add.w	r3, r7, #12
 800b35e:	461a      	mov	r2, r3
 800b360:	2101      	movs	r1, #1
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f00a ff82 	bl	801626c <phpalSli15693_Sw_GetConfig>
 800b368:	4603      	mov	r3, r0
 800b36a:	81fb      	strh	r3, [r7, #14]
 800b36c:	89fb      	ldrh	r3, [r7, #14]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <phalICode_Int_ComputeErrorCode+0x3e>
 800b372:	89fb      	ldrh	r3, [r7, #14]
 800b374:	e0c6      	b.n	800b504 <phalICode_Int_ComputeErrorCode+0x1cc>
                pPalSli15693DataParams,
                PHPAL_SLI15693_CONFIG_ADD_INFO,
                &wValue));

        /* Compute the custom code. */
        if((wValue >= 0xA0U) && (wValue <= 0xDFU))
 800b376:	89bb      	ldrh	r3, [r7, #12]
 800b378:	2b9f      	cmp	r3, #159	@ 0x9f
 800b37a:	d905      	bls.n	800b388 <phalICode_Int_ComputeErrorCode+0x50>
 800b37c:	89bb      	ldrh	r3, [r7, #12]
 800b37e:	2bdf      	cmp	r3, #223	@ 0xdf
 800b380:	d802      	bhi.n	800b388 <phalICode_Int_ComputeErrorCode+0x50>
        {
            /* Error mapping for error codes returned by Custom commands. */
            wStatusTmp = PHAL_ICODE_ERR_CUSTOM_COMMANDS_ERROR;
 800b382:	2380      	movs	r3, #128	@ 0x80
 800b384:	81fb      	strh	r3, [r7, #14]
 800b386:	e0ab      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
        }
        else
        {
            switch(wValue)
 800b388:	89bb      	ldrh	r3, [r7, #12]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	2b3f      	cmp	r3, #63	@ 0x3f
 800b38e:	f200 80a4 	bhi.w	800b4da <phalICode_Int_ComputeErrorCode+0x1a2>
 800b392:	a201      	add	r2, pc, #4	@ (adr r2, 800b398 <phalICode_Int_ComputeErrorCode+0x60>)
 800b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b398:	0800b499 	.word	0x0800b499
 800b39c:	0800b49f 	.word	0x0800b49f
 800b3a0:	0800b4a5 	.word	0x0800b4a5
 800b3a4:	0800b4db 	.word	0x0800b4db
 800b3a8:	0800b4db 	.word	0x0800b4db
 800b3ac:	0800b4db 	.word	0x0800b4db
 800b3b0:	0800b4db 	.word	0x0800b4db
 800b3b4:	0800b4db 	.word	0x0800b4db
 800b3b8:	0800b4db 	.word	0x0800b4db
 800b3bc:	0800b4db 	.word	0x0800b4db
 800b3c0:	0800b4db 	.word	0x0800b4db
 800b3c4:	0800b4db 	.word	0x0800b4db
 800b3c8:	0800b4db 	.word	0x0800b4db
 800b3cc:	0800b4db 	.word	0x0800b4db
 800b3d0:	0800b4ab 	.word	0x0800b4ab
 800b3d4:	0800b4b1 	.word	0x0800b4b1
 800b3d8:	0800b4b7 	.word	0x0800b4b7
 800b3dc:	0800b4bd 	.word	0x0800b4bd
 800b3e0:	0800b4c3 	.word	0x0800b4c3
 800b3e4:	0800b4c9 	.word	0x0800b4c9
 800b3e8:	0800b4cf 	.word	0x0800b4cf
 800b3ec:	0800b4db 	.word	0x0800b4db
 800b3f0:	0800b4db 	.word	0x0800b4db
 800b3f4:	0800b4db 	.word	0x0800b4db
 800b3f8:	0800b4db 	.word	0x0800b4db
 800b3fc:	0800b4db 	.word	0x0800b4db
 800b400:	0800b4db 	.word	0x0800b4db
 800b404:	0800b4db 	.word	0x0800b4db
 800b408:	0800b4db 	.word	0x0800b4db
 800b40c:	0800b4db 	.word	0x0800b4db
 800b410:	0800b4db 	.word	0x0800b4db
 800b414:	0800b4db 	.word	0x0800b4db
 800b418:	0800b4db 	.word	0x0800b4db
 800b41c:	0800b4db 	.word	0x0800b4db
 800b420:	0800b4db 	.word	0x0800b4db
 800b424:	0800b4db 	.word	0x0800b4db
 800b428:	0800b4db 	.word	0x0800b4db
 800b42c:	0800b4db 	.word	0x0800b4db
 800b430:	0800b4db 	.word	0x0800b4db
 800b434:	0800b4db 	.word	0x0800b4db
 800b438:	0800b4db 	.word	0x0800b4db
 800b43c:	0800b4db 	.word	0x0800b4db
 800b440:	0800b4db 	.word	0x0800b4db
 800b444:	0800b4db 	.word	0x0800b4db
 800b448:	0800b4db 	.word	0x0800b4db
 800b44c:	0800b4db 	.word	0x0800b4db
 800b450:	0800b4db 	.word	0x0800b4db
 800b454:	0800b4db 	.word	0x0800b4db
 800b458:	0800b4db 	.word	0x0800b4db
 800b45c:	0800b4db 	.word	0x0800b4db
 800b460:	0800b4db 	.word	0x0800b4db
 800b464:	0800b4db 	.word	0x0800b4db
 800b468:	0800b4db 	.word	0x0800b4db
 800b46c:	0800b4db 	.word	0x0800b4db
 800b470:	0800b4db 	.word	0x0800b4db
 800b474:	0800b4db 	.word	0x0800b4db
 800b478:	0800b4db 	.word	0x0800b4db
 800b47c:	0800b4db 	.word	0x0800b4db
 800b480:	0800b4db 	.word	0x0800b4db
 800b484:	0800b4db 	.word	0x0800b4db
 800b488:	0800b4db 	.word	0x0800b4db
 800b48c:	0800b4db 	.word	0x0800b4db
 800b490:	0800b4db 	.word	0x0800b4db
 800b494:	0800b4d5 	.word	0x0800b4d5
            {
            case PHAL_ICODE_RESP_ERR_COMMAND_NOT_SUPPORTED          : wStatusTmp = PHAL_ICODE_ERR_COMMAND_NOT_SUPPORTED;        break;
 800b498:	2381      	movs	r3, #129	@ 0x81
 800b49a:	81fb      	strh	r3, [r7, #14]
 800b49c:	e020      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_COMMAND_NOT_RECOGNIZED         : wStatusTmp = PHAL_ICODE_ERR_COMMAND_NOT_RECOGNIZED;       break;
 800b49e:	2382      	movs	r3, #130	@ 0x82
 800b4a0:	81fb      	strh	r3, [r7, #14]
 800b4a2:	e01d      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_COMMAND_OPTION_NOT_SUPPORTED   : wStatusTmp = PHAL_ICODE_ERR_COMMAND_OPTION_NOT_SUPPORTED; break;
 800b4a4:	2383      	movs	r3, #131	@ 0x83
 800b4a6:	81fb      	strh	r3, [r7, #14]
 800b4a8:	e01a      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_NO_INFORMATION                 : wStatusTmp = PHAL_ICODE_ERR_NO_INFORMATION;               break;
 800b4aa:	2384      	movs	r3, #132	@ 0x84
 800b4ac:	81fb      	strh	r3, [r7, #14]
 800b4ae:	e017      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_NOT_AVAILABLE            : wStatusTmp = PHAL_ICODE_ERR_BLOCK_NOT_AVAILABLE;          break;
 800b4b0:	2385      	movs	r3, #133	@ 0x85
 800b4b2:	81fb      	strh	r3, [r7, #14]
 800b4b4:	e014      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_LOCKED                   : wStatusTmp = PHAL_ICODE_ERR_BLOCK_LOCKED;                 break;
 800b4b6:	2386      	movs	r3, #134	@ 0x86
 800b4b8:	81fb      	strh	r3, [r7, #14]
 800b4ba:	e011      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_CONTENT_CHANGE_FAILURE         : wStatusTmp = PHAL_ICODE_ERR_CONTENT_CHANGE_FAILURE;       break;
 800b4bc:	2387      	movs	r3, #135	@ 0x87
 800b4be:	81fb      	strh	r3, [r7, #14]
 800b4c0:	e00e      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_PROGRAMMING_FAILURE      : wStatusTmp = PHAL_ICODE_ERR_BLOCK_PROGRAMMING_FAILURE;    break;
 800b4c2:	2388      	movs	r3, #136	@ 0x88
 800b4c4:	81fb      	strh	r3, [r7, #14]
 800b4c6:	e00b      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_NOT_LOCKED               : wStatusTmp = PHAL_ICODE_ERR_BLOCK_NOT_LOCKED;             break;
 800b4c8:	2389      	movs	r3, #137	@ 0x89
 800b4ca:	81fb      	strh	r3, [r7, #14]
 800b4cc:	e008      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_BLOCK_PROTECTED                : wStatusTmp = PHAL_ICODE_ERR_BLOCK_PROTECTED;              break;
 800b4ce:	238a      	movs	r3, #138	@ 0x8a
 800b4d0:	81fb      	strh	r3, [r7, #14]
 800b4d2:	e005      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>
            case PHAL_ICODE_RESP_ERR_GENERIC_CRYPTO_ERROR           : wStatusTmp = PHAL_ICODE_ERR_GENERIC_CRYPTO_ERROR;         break;
 800b4d4:	238b      	movs	r3, #139	@ 0x8b
 800b4d6:	81fb      	strh	r3, [r7, #14]
 800b4d8:	e002      	b.n	800b4e0 <phalICode_Int_ComputeErrorCode+0x1a8>

            default: wStatusTmp = PH_ERR_PROTOCOL_ERROR; break;
 800b4da:	2306      	movs	r3, #6
 800b4dc:	81fb      	strh	r3, [r7, #14]
 800b4de:	bf00      	nop
            }
        }

        /* Merge the status code with component code. */
        wStatusTmp = PH_ADD_COMPCODE(wStatusTmp, PH_COMP_AL_ICODE);
 800b4e0:	89fb      	ldrh	r3, [r7, #14]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00b      	beq.n	800b4fe <phalICode_Int_ComputeErrorCode+0x1c6>
 800b4e6:	89fb      	ldrh	r3, [r7, #14]
 800b4e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <phalICode_Int_ComputeErrorCode+0x1c6>
 800b4f0:	89fb      	ldrh	r3, [r7, #14]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	f443 53a8 	orr.w	r3, r3, #5376	@ 0x1500
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	e000      	b.n	800b500 <phalICode_Int_ComputeErrorCode+0x1c8>
 800b4fe:	89fb      	ldrh	r3, [r7, #14]
 800b500:	81fb      	strh	r3, [r7, #14]
    }

    return wStatusTmp;
 800b502:	89fb      	ldrh	r3, [r7, #14]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <phalICode_Int_ReadSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_ReadSingleBlock(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t ** ppData,
        uint16_t * pDataLen)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af02      	add	r7, sp, #8
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	607b      	str	r3, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	72fb      	strb	r3, [r7, #11]
 800b51a:	4613      	mov	r3, r2
 800b51c:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM aCmdBuff[2];
    uint16_t    PH_MEMLOC_REM wOpeMode = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	827b      	strh	r3, [r7, #18]

    /* Frame ReadSingleBlock command information. */
    aCmdBuff[0] = PHAL_ICODE_CMD_READ_SINGLE_BLOCK;
 800b526:	2320      	movs	r3, #32
 800b528:	753b      	strb	r3, [r7, #20]
    aCmdBuff[1] = bBlockNo;
 800b52a:	7abb      	ldrb	r3, [r7, #10]
 800b52c:	757b      	strb	r3, [r7, #21]

    /* Set or clear the flags option bit indicated by bOption. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_SetOptionBit(
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	2200      	movs	r2, #0
 800b532:	4619      	mov	r1, r3
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff fe4b 	bl	800b1d0 <phalICode_Int_SetOptionBit>
 800b53a:	4603      	mov	r3, r0
 800b53c:	82fb      	strh	r3, [r7, #22]
 800b53e:	8afb      	ldrh	r3, [r7, #22]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <phalICode_Int_ReadSingleBlock+0x3c>
 800b544:	8afb      	ldrh	r3, [r7, #22]
 800b546:	e044      	b.n	800b5d2 <phalICode_Int_ReadSingleBlock+0xc6>
            pPalSli15693DataParams,
            bOption,
            PH_OFF));

    /* Get Operation mode. */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_GetConfig(
 800b548:	f107 0312 	add.w	r3, r7, #18
 800b54c:	461a      	mov	r2, r3
 800b54e:	210a      	movs	r1, #10
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f00a fe8b 	bl	801626c <phpalSli15693_Sw_GetConfig>
 800b556:	4603      	mov	r3, r0
 800b558:	82fb      	strh	r3, [r7, #22]
 800b55a:	8afb      	ldrh	r3, [r7, #22]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <phalICode_Int_ReadSingleBlock+0x58>
 800b560:	8afb      	ldrh	r3, [r7, #22]
 800b562:	e036      	b.n	800b5d2 <phalICode_Int_ReadSingleBlock+0xc6>
            pPalSli15693DataParams,
            PHPAL_SLI15693_CONFIG_OPE_MODE,
            &wOpeMode));

    if(wOpeMode == RD_LIB_MODE_NFC)
 800b564:	8a7b      	ldrh	r3, [r7, #18]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d10c      	bne.n	800b584 <phalICode_Int_ReadSingleBlock+0x78>
    {
        /* Set short + Tolerance(Delta) Timeout(50ms). */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b56a:	f24c 4294 	movw	r2, #50324	@ 0xc494
 800b56e:	2102      	movs	r1, #2
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f00a fca5 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 800b576:	4603      	mov	r3, r0
 800b578:	82fb      	strh	r3, [r7, #22]
 800b57a:	8afb      	ldrh	r3, [r7, #22]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00e      	beq.n	800b59e <phalICode_Int_ReadSingleBlock+0x92>
 800b580:	8afb      	ldrh	r3, [r7, #22]
 800b582:	e026      	b.n	800b5d2 <phalICode_Int_ReadSingleBlock+0xc6>
                PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US));
    }
    else
    {
        /* Set short + Tolerance(Delta) Timeout. */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_SetConfig(
 800b584:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800b588:	2102      	movs	r1, #2
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f00a fc98 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 800b590:	4603      	mov	r3, r0
 800b592:	82fb      	strh	r3, [r7, #22]
 800b594:	8afb      	ldrh	r3, [r7, #22]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <phalICode_Int_ReadSingleBlock+0x92>
 800b59a:	8afb      	ldrh	r3, [r7, #22]
 800b59c:	e019      	b.n	800b5d2 <phalICode_Int_ReadSingleBlock+0xc6>
                PHPAL_SLI15693_CONFIG_TIMEOUT_US,
                PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US));
    }

    /* Exchange the command information to PAL layer. */
    wStatus = phpalSli15693_Exchange(
 800b59e:	f107 0214 	add.w	r2, r7, #20
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f00a fb53 	bl	8015c5a <phpalSli15693_Sw_Exchange>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	82fb      	strh	r3, [r7, #22]
            2,
            ppData,
            pDataLen);

    /* Compute the status code. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_ComputeErrorCode(pPalSli15693DataParams, wStatus));
 800b5b8:	8afb      	ldrh	r3, [r7, #22]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7ff febb 	bl	800b338 <phalICode_Int_ComputeErrorCode>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	82fb      	strh	r3, [r7, #22]
 800b5c6:	8afb      	ldrh	r3, [r7, #22]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <phalICode_Int_ReadSingleBlock+0xc4>
 800b5cc:	8afb      	ldrh	r3, [r7, #22]
 800b5ce:	e000      	b.n	800b5d2 <phalICode_Int_ReadSingleBlock+0xc6>

    return PH_ERR_SUCCESS;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <phalICode_Int_WriteSingleBlock>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Int_WriteSingleBlock(void * pPalSli15693DataParams, uint8_t bOption, uint8_t bBlockNo, uint8_t * pData,
        uint8_t bDataLen)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b08a      	sub	sp, #40	@ 0x28
 800b5de:	af02      	add	r7, sp, #8
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	607b      	str	r3, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	72fb      	strb	r3, [r7, #11]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM aCmdBuff[2];
    uint8_t *   PH_MEMLOC_REM pResponse = NULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLen = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	82fb      	strh	r3, [r7, #22]

    /* Frame WriteSingleBlock command. */
    aCmdBuff[0] = PHAL_ICODE_CMD_WRITE_SINGLE_BLOCK;
 800b5f8:	2321      	movs	r3, #33	@ 0x21
 800b5fa:	773b      	strb	r3, [r7, #28]
    aCmdBuff[1] = bBlockNo;
 800b5fc:	7abb      	ldrb	r3, [r7, #10]
 800b5fe:	777b      	strb	r3, [r7, #29]

    /* Set or clear the flags option bit indicated by bOption. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_SetOptionBit(
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	2201      	movs	r2, #1
 800b604:	4619      	mov	r1, r3
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7ff fde2 	bl	800b1d0 <phalICode_Int_SetOptionBit>
 800b60c:	4603      	mov	r3, r0
 800b60e:	83fb      	strh	r3, [r7, #30]
 800b610:	8bfb      	ldrh	r3, [r7, #30]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <phalICode_Int_WriteSingleBlock+0x40>
 800b616:	8bfb      	ldrh	r3, [r7, #30]
 800b618:	e03b      	b.n	800b692 <phalICode_Int_WriteSingleBlock+0xb8>
            pPalSli15693DataParams,
            bOption,
            PH_ON));

    /* Buffer the command information to exchange buffer. */
    PH_CHECK_SUCCESS_FCT(wStatus, phpalSli15693_Exchange(
 800b61a:	f107 021c 	add.w	r2, r7, #28
 800b61e:	2300      	movs	r3, #0
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	2300      	movs	r3, #0
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	2302      	movs	r3, #2
 800b628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f00a fb14 	bl	8015c5a <phpalSli15693_Sw_Exchange>
 800b632:	4603      	mov	r3, r0
 800b634:	83fb      	strh	r3, [r7, #30]
 800b636:	8bfb      	ldrh	r3, [r7, #30]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <phalICode_Int_WriteSingleBlock+0x66>
 800b63c:	8bfb      	ldrh	r3, [r7, #30]
 800b63e:	e028      	b.n	800b692 <phalICode_Int_WriteSingleBlock+0xb8>
            2,
            NULL,
            NULL));

    /* Buffer the data to exchange buffer and exchange the bufferred information to PAL layer. */
    wStatus = phpalSli15693_Exchange(
 800b640:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b644:	b29a      	uxth	r2, r3
 800b646:	f107 0316 	add.w	r3, r7, #22
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	f107 0318 	add.w	r3, r7, #24
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4613      	mov	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f00a fafd 	bl	8015c5a <phpalSli15693_Sw_Exchange>
 800b660:	4603      	mov	r3, r0
 800b662:	83fb      	strh	r3, [r7, #30]
            bDataLen,
            &pResponse,
            &wRespLen);

    /* Write-alike handling */
    if (0U != (bOption))
 800b664:	7afb      	ldrb	r3, [r7, #11]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d006      	beq.n	800b678 <phalICode_Int_WriteSingleBlock+0x9e>
    {
        wStatus = phalICode_Int_WriteAlikeHandling(pPalSli15693DataParams, wStatus);
 800b66a:	8bfb      	ldrh	r3, [r7, #30]
 800b66c:	4619      	mov	r1, r3
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f7ff fe12 	bl	800b298 <phalICode_Int_WriteAlikeHandling>
 800b674:	4603      	mov	r3, r0
 800b676:	83fb      	strh	r3, [r7, #30]
    }

    /* Compute the status code. */
    PH_CHECK_SUCCESS_FCT(wStatus, phalICode_Int_ComputeErrorCode(pPalSli15693DataParams, wStatus));
 800b678:	8bfb      	ldrh	r3, [r7, #30]
 800b67a:	4619      	mov	r1, r3
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff fe5b 	bl	800b338 <phalICode_Int_ComputeErrorCode>
 800b682:	4603      	mov	r3, r0
 800b684:	83fb      	strh	r3, [r7, #30]
 800b686:	8bfb      	ldrh	r3, [r7, #30]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <phalICode_Int_WriteSingleBlock+0xb6>
 800b68c:	8bfb      	ldrh	r3, [r7, #30]
 800b68e:	e000      	b.n	800b692 <phalICode_Int_WriteSingleBlock+0xb8>

    return PH_ERR_SUCCESS;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3720      	adds	r7, #32
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800b6aa:	897b      	ldrh	r3, [r7, #10]
 800b6ac:	2ba8      	cmp	r3, #168	@ 0xa8
 800b6ae:	d002      	beq.n	800b6b6 <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800b6b0:	f242 6320 	movw	r3, #9760	@ 0x2620
 800b6b4:	e0a1      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <phalMfNtag42XDna_Sw_Init+0x28>
 800b6bc:	f242 6320 	movw	r3, #9760	@ 0x2620
 800b6c0:	e09b      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d102      	bne.n	800b6ce <phalMfNtag42XDna_Sw_Init+0x34>
 800b6c8:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b6cc:	e095      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <phalMfNtag42XDna_Sw_Init+0x40>
 800b6d4:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b6d8:	e08f      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d102      	bne.n	800b6e6 <phalMfNtag42XDna_Sw_Init+0x4c>
 800b6e0:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b6e4:	e089      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <phalMfNtag42XDna_Sw_Init+0x58>
 800b6ec:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b6f0:	e083      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <phalMfNtag42XDna_Sw_Init+0x64>
 800b6f8:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b6fc:	e07d      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <phalMfNtag42XDna_Sw_Init+0x70>
 800b704:	f242 6321 	movw	r3, #9761	@ 0x2621
 800b708:	e077      	b.n	800b7fa <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f242 6201 	movw	r2, #9729	@ 0x2601
 800b710:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	69fa      	ldr	r2, [r7, #28]
 800b728:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6a3a      	ldr	r2, [r7, #32]
 800b72e:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b734:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b73c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f04f 32ff 	mov.w	r2, #4294967295
 800b746:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	331c      	adds	r3, #28
 800b74c:	2218      	movs	r2, #24
 800b74e:	2100      	movs	r1, #0
 800b750:	4618      	mov	r0, r3
 800b752:	f011 fcb9 	bl	801d0c8 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	22ff      	movs	r2, #255	@ 0xff
 800b75a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3335      	adds	r3, #53	@ 0x35
 800b762:	2210      	movs	r2, #16
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f011 fcae 	bl	801d0c8 <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3346      	adds	r3, #70	@ 0x46
 800b770:	2203      	movs	r2, #3
 800b772:	2100      	movs	r1, #0
 800b774:	4618      	mov	r0, r3
 800b776:	f011 fca7 	bl	801d0c8 <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	22ff      	movs	r2, #255	@ 0xff
 800b77e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	22ff      	movs	r2, #255	@ 0xff
 800b78e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	335e      	adds	r3, #94	@ 0x5e
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f011 fc85 	bl	801d0c8 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3362      	adds	r3, #98	@ 0x62
 800b7c2:	2210      	movs	r2, #16
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f011 fc7e 	bl	801d0c8 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3382      	adds	r3, #130	@ 0x82
 800b7d0:	2210      	movs	r2, #16
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f011 fc77 	bl	801d0c8 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3393      	adds	r3, #147	@ 0x93
 800b7e6:	2210      	movs	r2, #16
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f011 fc6c 	bl	801d0c8 <memset>
    pDataParams->bLastBlockIndex = 0;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800b802:	b480      	push	{r7}
 800b804:	b085      	sub	sp, #20
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	603b      	str	r3, [r7, #0]
 800b80e:	460b      	mov	r3, r1
 800b810:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800b812:	897b      	ldrh	r3, [r7, #10]
 800b814:	2b0c      	cmp	r3, #12
 800b816:	d002      	beq.n	800b81e <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800b818:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800b81c:	e014      	b.n	800b848 <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <phalMfc_Sw_Init+0x26>
 800b824:	2321      	movs	r3, #33	@ 0x21
 800b826:	e00f      	b.n	800b848 <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <phalMfc_Sw_Init+0x30>
 800b82e:	2321      	movs	r3, #33	@ 0x21
 800b830:	e00a      	b.n	800b848 <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f241 0201 	movw	r2, #4097	@ 0x1001
 800b838:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	607a      	str	r2, [r7, #4]
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	460b      	mov	r3, r1
 800b862:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800b864:	897b      	ldrh	r3, [r7, #10]
 800b866:	2b68      	cmp	r3, #104	@ 0x68
 800b868:	d002      	beq.n	800b870 <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800b86a:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800b86e:	e057      	b.n	800b920 <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <phalMfdf_Sw_Init+0x26>
 800b876:	2321      	movs	r3, #33	@ 0x21
 800b878:	e052      	b.n	800b920 <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <phalMfdf_Sw_Init+0x30>
 800b880:	2321      	movs	r3, #33	@ 0x21
 800b882:	e04d      	b.n	800b920 <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f641 1201 	movw	r2, #6401	@ 0x1901
 800b88a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a3a      	ldr	r2, [r7, #32]
 800b8b0:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b8b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3318      	adds	r3, #24
 800b8c8:	2218      	movs	r2, #24
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f011 fbfb 	bl	801d0c8 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	22ff      	movs	r2, #255	@ 0xff
 800b8d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3331      	adds	r3, #49	@ 0x31
 800b8de:	2210      	movs	r2, #16
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f011 fbf0 	bl	801d0c8 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3342      	adds	r3, #66	@ 0x42
 800b8ec:	2203      	movs	r2, #3
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f011 fbe9 	bl	801d0c8 <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	22ff      	movs	r2, #255	@ 0xff
 800b8fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	22ff      	movs	r2, #255	@ 0xff
 800b90a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	460b      	mov	r3, r1
 800b936:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800b938:	897b      	ldrh	r3, [r7, #10]
 800b93a:	2bb4      	cmp	r3, #180	@ 0xb4
 800b93c:	d002      	beq.n	800b944 <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800b93e:	f242 0320 	movw	r3, #8224	@ 0x2020
 800b942:	e09f      	b.n	800ba84 <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <phalMfdfEVx_Sw_Init+0x28>
 800b94a:	f242 0320 	movw	r3, #8224	@ 0x2020
 800b94e:	e099      	b.n	800ba84 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d102      	bne.n	800b95c <phalMfdfEVx_Sw_Init+0x34>
 800b956:	f242 0321 	movw	r3, #8225	@ 0x2021
 800b95a:	e093      	b.n	800ba84 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d102      	bne.n	800b968 <phalMfdfEVx_Sw_Init+0x40>
 800b962:	f242 0321 	movw	r3, #8225	@ 0x2021
 800b966:	e08d      	b.n	800ba84 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800b968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <phalMfdfEVx_Sw_Init+0x4c>
 800b96e:	f242 0321 	movw	r3, #8225	@ 0x2021
 800b972:	e087      	b.n	800ba84 <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f242 0201 	movw	r2, #8193	@ 0x2001
 800b97a:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6a3a      	ldr	r2, [r7, #32]
 800b998:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b99e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ae:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f246 3263 	movw	r2, #25443	@ 0x6363
 800b9b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	331c      	adds	r3, #28
 800b9c6:	2218      	movs	r2, #24
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f011 fb7c 	bl	801d0c8 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	22ff      	movs	r2, #255	@ 0xff
 800b9d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3335      	adds	r3, #53	@ 0x35
 800b9dc:	2210      	movs	r2, #16
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f011 fb71 	bl	801d0c8 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3347      	adds	r3, #71	@ 0x47
 800b9ea:	2203      	movs	r2, #3
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f011 fb6a 	bl	801d0c8 <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	22ff      	movs	r2, #255	@ 0xff
 800b9f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	22ff      	movs	r2, #255	@ 0xff
 800ba08:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	335e      	adds	r3, #94	@ 0x5e
 800ba2e:	2204      	movs	r2, #4
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f011 fb48 	bl	801d0c8 <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3362      	adds	r3, #98	@ 0x62
 800ba3c:	2210      	movs	r2, #16
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f011 fb41 	bl	801d0c8 <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3372      	adds	r3, #114	@ 0x72
 800ba4a:	2210      	movs	r2, #16
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f011 fb3a 	bl	801d0c8 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3383      	adds	r3, #131	@ 0x83
 800ba60:	2210      	movs	r2, #16
 800ba62:	2100      	movs	r1, #0
 800ba64:	4618      	mov	r0, r3
 800ba66:	f011 fb2f 	bl	801d0c8 <memset>
    pDataParams->bLastBlockIndex = 0;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	22ff      	movs	r2, #255	@ 0xff
 800ba76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	607a      	str	r2, [r7, #4]
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800ba9c:	897b      	ldrh	r3, [r7, #10]
 800ba9e:	2bac      	cmp	r3, #172	@ 0xac
 800baa0:	d002      	beq.n	800baa8 <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800baa2:	f242 3320 	movw	r3, #8992	@ 0x2320
 800baa6:	e0ab      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <phalMfdfLight_Sw_Init+0x28>
 800baae:	f242 3320 	movw	r3, #8992	@ 0x2320
 800bab2:	e0a5      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <phalMfdfLight_Sw_Init+0x34>
 800baba:	f242 3321 	movw	r3, #8993	@ 0x2321
 800babe:	e09f      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <phalMfdfLight_Sw_Init+0x40>
 800bac6:	f242 3321 	movw	r3, #8993	@ 0x2321
 800baca:	e099      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d102      	bne.n	800bad8 <phalMfdfLight_Sw_Init+0x4c>
 800bad2:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bad6:	e093      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <phalMfdfLight_Sw_Init+0x58>
 800bade:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bae2:	e08d      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d102      	bne.n	800baf0 <phalMfdfLight_Sw_Init+0x64>
 800baea:	f242 3321 	movw	r3, #8993	@ 0x2321
 800baee:	e087      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800baf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d102      	bne.n	800bafc <phalMfdfLight_Sw_Init+0x70>
 800baf6:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bafa:	e081      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <phalMfdfLight_Sw_Init+0x7c>
 800bb02:	f242 3321 	movw	r3, #8993	@ 0x2321
 800bb06:	e07b      	b.n	800bc00 <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f242 3201 	movw	r2, #8961	@ 0x2301
 800bb0e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	69ba      	ldr	r2, [r7, #24]
 800bb20:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a3a      	ldr	r2, [r7, #32]
 800bb2c:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb32:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb3a:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f246 3263 	movw	r2, #25443	@ 0x6363
 800bb42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4c:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	331c      	adds	r3, #28
 800bb52:	2218      	movs	r2, #24
 800bb54:	2100      	movs	r1, #0
 800bb56:	4618      	mov	r0, r3
 800bb58:	f011 fab6 	bl	801d0c8 <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	22ff      	movs	r2, #255	@ 0xff
 800bb60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3335      	adds	r3, #53	@ 0x35
 800bb68:	2210      	movs	r2, #16
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f011 faab 	bl	801d0c8 <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3346      	adds	r3, #70	@ 0x46
 800bb76:	2203      	movs	r2, #3
 800bb78:	2100      	movs	r1, #0
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f011 faa4 	bl	801d0c8 <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	22ff      	movs	r2, #255	@ 0xff
 800bb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	22ff      	movs	r2, #255	@ 0xff
 800bb94:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	335e      	adds	r3, #94	@ 0x5e
 800bbba:	2204      	movs	r2, #4
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f011 fa82 	bl	801d0c8 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3362      	adds	r3, #98	@ 0x62
 800bbc8:	2210      	movs	r2, #16
 800bbca:	2100      	movs	r1, #0
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f011 fa7b 	bl	801d0c8 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3382      	adds	r3, #130	@ 0x82
 800bbd6:	2210      	movs	r2, #16
 800bbd8:	2100      	movs	r1, #0
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f011 fa74 	bl	801d0c8 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3393      	adds	r3, #147	@ 0x93
 800bbec:	2210      	movs	r2, #16
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f011 fa69 	bl	801d0c8 <memset>
    pDataParams->bLastBlockIndex = 0;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	607a      	str	r2, [r7, #4]
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	460b      	mov	r3, r1
 800bc16:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800bc1c:	897b      	ldrh	r3, [r7, #10]
 800bc1e:	2b84      	cmp	r3, #132	@ 0x84
 800bc20:	d002      	beq.n	800bc28 <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800bc22:	f242 1320 	movw	r3, #8480	@ 0x2120
 800bc26:	e063      	b.n	800bcf0 <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <phalMfpEVx_Sw_Init+0x2c>
 800bc2e:	f242 1320 	movw	r3, #8480	@ 0x2120
 800bc32:	e05d      	b.n	800bcf0 <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d102      	bne.n	800bc40 <phalMfpEVx_Sw_Init+0x38>
 800bc3a:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bc3e:	e057      	b.n	800bcf0 <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800bc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d102      	bne.n	800bc4c <phalMfpEVx_Sw_Init+0x44>
 800bc46:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bc4a:	e051      	b.n	800bcf0 <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d102      	bne.n	800bc58 <phalMfpEVx_Sw_Init+0x50>
 800bc52:	f242 1321 	movw	r3, #8481	@ 0x2121
 800bc56:	e04b      	b.n	800bcf0 <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f242 1201 	movw	r2, #8449	@ 0x2101
 800bc5e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a3a      	ldr	r2, [r7, #32]
 800bc70:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc76:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc7c:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc82:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc88:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc9e:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	3360      	adds	r3, #96	@ 0x60
 800bcb4:	2210      	movs	r2, #16
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f011 fa05 	bl	801d0c8 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3370      	adds	r3, #112	@ 0x70
 800bcc2:	2210      	movs	r2, #16
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f011 f9fe 	bl	801d0c8 <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3350      	adds	r3, #80	@ 0x50
 800bcd0:	2210      	movs	r2, #16
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f011 f9f7 	bl	801d0c8 <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 f80c 	bl	800bcf8 <phalMfpEVx_Sw_ResetSecMsgState>
 800bce0:	4603      	mov	r3, r0
 800bce2:	82fb      	strh	r3, [r7, #22]
 800bce4:	8afb      	ldrh	r3, [r7, #22]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <phalMfpEVx_Sw_Init+0xe6>
 800bcea:	8afb      	ldrh	r3, [r7, #22]
 800bcec:	e000      	b.n	800bcf0 <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d009      	beq.n	800bd46 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d004      	beq.n	800bd46 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d104      	bne.n	800bd50 <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2205      	movs	r2, #5
 800bd4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bd4e:	e012      	b.n	800bd76 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d004      	beq.n	800bd64 <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d104      	bne.n	800bd6e <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2204      	movs	r2, #4
 800bd68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bd6c:	e003      	b.n	800bd76 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	3350      	adds	r3, #80	@ 0x50
 800bd7a:	2210      	movs	r2, #16
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f011 f9a2 	bl	801d0c8 <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3360      	adds	r3, #96	@ 0x60
 800bd88:	2210      	movs	r2, #16
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f011 f99b 	bl	801d0c8 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3370      	adds	r3, #112	@ 0x70
 800bd96:	2210      	movs	r2, #16
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f011 f994 	bl	801d0c8 <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	332a      	adds	r3, #42	@ 0x2a
 800bda4:	2204      	movs	r2, #4
 800bda6:	2100      	movs	r1, #0
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f011 f98d 	bl	801d0c8 <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	2104      	movs	r1, #4
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fa fb27 	bl	8006408 <phTMIUtils_ActivateTMICollection>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d009      	beq.n	800bdda <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a18      	ldr	r0, [r3, #32]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3370      	adds	r3, #112	@ 0x70
 800bdce:	2200      	movs	r2, #0
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	f000 fa8a 	bl	800c2ea <phalVca_SetSessionKeyUtility>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800bdda:	89fb      	ldrh	r3, [r7, #14]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800bde0:	89fb      	ldrh	r3, [r7, #14]
 800bde2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800bdea:	89fb      	ldrh	r3, [r7, #14]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	e000      	b.n	800bdfa <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800bdf8:	89fb      	ldrh	r3, [r7, #14]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
 800be0e:	460b      	mov	r3, r1
 800be10:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800be12:	897b      	ldrh	r3, [r7, #10]
 800be14:	2b1c      	cmp	r3, #28
 800be16:	d002      	beq.n	800be1e <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800be18:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800be1c:	e026      	b.n	800be6c <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <phalMful_Sw_Init+0x26>
 800be24:	2321      	movs	r3, #33	@ 0x21
 800be26:	e021      	b.n	800be6c <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <phalMful_Sw_Init+0x30>
 800be2e:	2321      	movs	r3, #33	@ 0x21
 800be30:	e01c      	b.n	800be6c <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f241 1201 	movw	r2, #4353	@ 0x1101
 800be38:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	69fa      	ldr	r2, [r7, #28]
 800be50:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	22ff      	movs	r2, #255	@ 0xff
 800be56:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	460b      	mov	r3, r1
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800be86:	897b      	ldrh	r3, [r7, #10]
 800be88:	2b10      	cmp	r3, #16
 800be8a:	d002      	beq.n	800be92 <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800be8c:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800be90:	e011      	b.n	800beb6 <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <phalT1T_Sw_Init+0x24>
 800be98:	2321      	movs	r3, #33	@ 0x21
 800be9a:	e00c      	b.n	800beb6 <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <phalT1T_Sw_Init+0x2e>
 800bea2:	2321      	movs	r3, #33	@ 0x21
 800bea4:	e007      	b.n	800beb6 <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800beac:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b08c      	sub	sp, #48	@ 0x30
 800bec6:	af02      	add	r7, sp, #8
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	60b9      	str	r1, [r7, #8]
 800becc:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800bed2:	2307      	movs	r3, #7
 800bed4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800bed6:	2304      	movs	r3, #4
 800bed8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800beda:	2378      	movs	r3, #120	@ 0x78
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	f107 0318 	add.w	r3, r7, #24
 800bee2:	2100      	movs	r1, #0
 800bee4:	460a      	mov	r2, r1
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	460a      	mov	r2, r1
 800beea:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	f240 1223 	movw	r2, #291	@ 0x123
 800bef4:	2103      	movs	r1, #3
 800bef6:	4618      	mov	r0, r3
 800bef8:	f006 fed3 	bl	8012ca2 <phpalI14443p3a_Sw_SetConfig>
 800befc:	4603      	mov	r3, r0
 800befe:	843b      	strh	r3, [r7, #32]
 800bf00:	8c3b      	ldrh	r3, [r7, #32]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <phalT1T_Sw_ReadUID+0x48>
 800bf06:	8c3b      	ldrh	r3, [r7, #32]
 800bf08:	e05c      	b.n	800bfc4 <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6858      	ldr	r0, [r3, #4]
 800bf0e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800bf10:	f107 0214 	add.w	r2, r7, #20
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	f107 031c 	add.w	r3, r7, #28
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	2100      	movs	r1, #0
 800bf22:	f007 fb69 	bl	80135f8 <phpalI14443p3a_Sw_Exchange>
 800bf26:	4603      	mov	r3, r0
 800bf28:	843b      	strh	r3, [r7, #32]
 800bf2a:	8c3b      	ldrh	r3, [r7, #32]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <phalT1T_Sw_ReadUID+0x72>
 800bf30:	8c3b      	ldrh	r3, [r7, #32]
 800bf32:	e047      	b.n	800bfc4 <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	7d1b      	ldrb	r3, [r3, #20]
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d10c      	bne.n	800bf58 <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	2b06      	cmp	r3, #6
 800bf44:	d105      	bne.n	800bf52 <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800bf52:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800bf56:	e035      	b.n	800bfc4 <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	2b06      	cmp	r3, #6
 800bf5e:	d002      	beq.n	800bf66 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800bf60:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800bf64:	e02e      	b.n	800bfc4 <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	781a      	ldrb	r2, [r3, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	785a      	ldrb	r2, [r3, #1]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800bf76:	2300      	movs	r3, #0
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf7c:	e01a      	b.n	800bfb4 <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800bf7e:	69fa      	ldr	r2, [r7, #28]
 800bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf84:	3302      	adds	r3, #2
 800bf86:	441a      	add	r2, r3
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf8c:	7811      	ldrb	r1, [r2, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4413      	add	r3, r2
 800bf92:	460a      	mov	r2, r1
 800bf94:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800bf96:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	440b      	add	r3, r1
 800bfa2:	68f9      	ldr	r1, [r7, #12]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	7a92      	ldrb	r2, [r2, #10]
 800bfa8:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800bfaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfae:	3301      	adds	r3, #1
 800bfb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d9e0      	bls.n	800bf7e <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bfc0:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3728      	adds	r7, #40	@ 0x28
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800bfdc:	897b      	ldrh	r3, [r7, #10]
 800bfde:	2b80      	cmp	r3, #128	@ 0x80
 800bfe0:	d002      	beq.n	800bfe8 <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800bfe2:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800bfe6:	e01e      	b.n	800c026 <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <phalTop_Sw_Init+0x26>
 800bfee:	2321      	movs	r3, #33	@ 0x21
 800bff0:	e019      	b.n	800c026 <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800bff8:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6a3a      	ldr	r2, [r7, #32]
 800c016:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c01c:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f000 f805 	bl	800c02e <phalTop_Sw_Reset>
 800c024:	4603      	mov	r3, r0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b082      	sub	sp, #8
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3328      	adds	r3, #40	@ 0x28
 800c058:	2258      	movs	r2, #88	@ 0x58
 800c05a:	2100      	movs	r1, #0
 800c05c:	4618      	mov	r0, r3
 800c05e:	f011 f833 	bl	801d0c8 <memset>

    return PH_ERR_SUCCESS;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	607a      	str	r2, [r7, #4]
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	460b      	mov	r3, r1
 800c07a:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800c07c:	897b      	ldrh	r3, [r7, #10]
 800c07e:	2b54      	cmp	r3, #84	@ 0x54
 800c080:	d002      	beq.n	800c088 <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c082:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c086:	e06d      	b.n	800c164 <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d102      	bne.n	800c094 <phalVca_Sw_Init+0x28>
 800c08e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c092:	e067      	b.n	800c164 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <phalVca_Sw_Init+0x34>
 800c09a:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c09e:	e061      	b.n	800c164 <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <phalVca_Sw_Init+0x40>
 800c0a6:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0aa:	e05b      	b.n	800c164 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d102      	bne.n	800c0b8 <phalVca_Sw_Init+0x4c>
 800c0b2:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0b6:	e055      	b.n	800c164 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <phalVca_Sw_Init+0x58>
 800c0be:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0c2:	e04f      	b.n	800c164 <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800c0c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d005      	beq.n	800c0d6 <phalVca_Sw_Init+0x6a>
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d102      	bne.n	800c0d6 <phalVca_Sw_Init+0x6a>
 800c0d0:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0d4:	e046      	b.n	800c164 <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800c0d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d005      	beq.n	800c0e8 <phalVca_Sw_Init+0x7c>
 800c0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d102      	bne.n	800c0e8 <phalVca_Sw_Init+0x7c>
 800c0e2:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c0e6:	e03d      	b.n	800c164 <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f241 3201 	movw	r2, #4865	@ 0x1301
 800c0ee:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c10c:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c112:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6a3a      	ldr	r2, [r7, #32]
 800c118:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c124:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	69fa      	ldr	r2, [r7, #28]
 800c12a:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	2bff      	cmp	r3, #255	@ 0xff
 800c182:	d07d      	beq.n	800c280 <phalVca_Sw_SetSessionKeyUtility+0x110>
 800c184:	2bff      	cmp	r3, #255	@ 0xff
 800c186:	f300 808c 	bgt.w	800c2a2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c18a:	2baa      	cmp	r3, #170	@ 0xaa
 800c18c:	d04f      	beq.n	800c22e <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800c18e:	2baa      	cmp	r3, #170	@ 0xaa
 800c190:	f300 8087 	bgt.w	800c2a2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c194:	2b1a      	cmp	r3, #26
 800c196:	dc3d      	bgt.n	800c214 <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f2c0 8082 	blt.w	800c2a2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c19e:	2b1a      	cmp	r3, #26
 800c1a0:	d87f      	bhi.n	800c2a2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800c1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a8 <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800c1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a8:	0800c277 	.word	0x0800c277
 800c1ac:	0800c2a3 	.word	0x0800c2a3
 800c1b0:	0800c247 	.word	0x0800c247
 800c1b4:	0800c25f 	.word	0x0800c25f
 800c1b8:	0800c277 	.word	0x0800c277
 800c1bc:	0800c277 	.word	0x0800c277
 800c1c0:	0800c2a3 	.word	0x0800c2a3
 800c1c4:	0800c2a3 	.word	0x0800c2a3
 800c1c8:	0800c2a3 	.word	0x0800c2a3
 800c1cc:	0800c2a3 	.word	0x0800c2a3
 800c1d0:	0800c21b 	.word	0x0800c21b
 800c1d4:	0800c2a3 	.word	0x0800c2a3
 800c1d8:	0800c2a3 	.word	0x0800c2a3
 800c1dc:	0800c2a3 	.word	0x0800c2a3
 800c1e0:	0800c2a3 	.word	0x0800c2a3
 800c1e4:	0800c2a3 	.word	0x0800c2a3
 800c1e8:	0800c2a3 	.word	0x0800c2a3
 800c1ec:	0800c2a3 	.word	0x0800c2a3
 800c1f0:	0800c2a3 	.word	0x0800c2a3
 800c1f4:	0800c2a3 	.word	0x0800c2a3
 800c1f8:	0800c2a3 	.word	0x0800c2a3
 800c1fc:	0800c2a3 	.word	0x0800c2a3
 800c200:	0800c2a3 	.word	0x0800c2a3
 800c204:	0800c2a3 	.word	0x0800c2a3
 800c208:	0800c2a3 	.word	0x0800c2a3
 800c20c:	0800c2a3 	.word	0x0800c2a3
 800c210:	0800c225 	.word	0x0800c225
 800c214:	2b71      	cmp	r3, #113	@ 0x71
 800c216:	d038      	beq.n	800c28a <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800c218:	e043      	b.n	800c2a2 <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2204      	movs	r2, #4
 800c21e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c222:	e043      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2205      	movs	r2, #5
 800c228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c22c:	e03e      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2207      	movs	r2, #7
 800c232:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3328      	adds	r3, #40	@ 0x28
 800c23a:	2220      	movs	r2, #32
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	4618      	mov	r0, r3
 800c240:	f010 ffc1 	bl	801d1c6 <memcpy>
        break;
 800c244:	e032      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2208      	movs	r2, #8
 800c24a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3328      	adds	r3, #40	@ 0x28
 800c252:	2220      	movs	r2, #32
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	4618      	mov	r0, r3
 800c258:	f010 ffb5 	bl	801d1c6 <memcpy>
        break;
 800c25c:	e026      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2209      	movs	r2, #9
 800c262:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3328      	adds	r3, #40	@ 0x28
 800c26a:	2220      	movs	r2, #32
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	4618      	mov	r0, r3
 800c270:	f010 ffa9 	bl	801d1c6 <memcpy>
        break;
 800c274:	e01a      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2203      	movs	r2, #3
 800c27a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c27e:	e015      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2203      	movs	r2, #3
 800c284:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c288:	e010      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2206      	movs	r2, #6
 800c28e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3328      	adds	r3, #40	@ 0x28
 800c296:	2220      	movs	r2, #32
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f010 ff93 	bl	801d1c6 <memcpy>
        break;
 800c2a0:	e004      	b.n	800c2ac <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800c2aa:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop

0800c2b8 <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <phalVca_Sw_SetApplicationType+0x14>
 800c2c8:	2321      	movs	r3, #33	@ 0x21
 800c2ca:	e008      	b.n	800c2de <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <phalVca_Sw_SetApplicationType+0x1e>
 800c2d2:	2321      	movs	r3, #33	@ 0x21
 800c2d4:	e003      	b.n	800c2de <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b086      	sub	sp, #24
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d102      	bne.n	800c304 <phalVca_SetSessionKeyUtility+0x1a>
 800c2fe:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c302:	e024      	b.n	800c34e <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d102      	bne.n	800c310 <phalVca_SetSessionKeyUtility+0x26>
 800c30a:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c30e:	e01e      	b.n	800c34e <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c318:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800c31c:	d004      	beq.n	800c328 <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c31e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c322:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800c324:	8afb      	ldrh	r3, [r7, #22]
 800c326:	e012      	b.n	800c34e <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d108      	bne.n	800c344 <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	461a      	mov	r2, r3
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff ff19 	bl	800c170 <phalVca_Sw_SetSessionKeyUtility>
 800c33e:	4603      	mov	r3, r0
 800c340:	82fb      	strh	r3, [r7, #22]
            break;
 800c342:	e003      	b.n	800c34c <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c344:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c348:	82fb      	strh	r3, [r7, #22]
            break;
 800c34a:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800c34c:	8afb      	ldrh	r3, [r7, #22]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <phalVca_SetApplicationType+0x16>
 800c366:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c36a:	e022      	b.n	800c3b2 <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <phalVca_SetApplicationType+0x22>
 800c372:	f241 3321 	movw	r3, #4897	@ 0x1321
 800c376:	e01c      	b.n	800c3b2 <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c380:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800c384:	d004      	beq.n	800c390 <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c386:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c38a:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800c38c:	89fb      	ldrh	r3, [r7, #14]
 800c38e:	e010      	b.n	800c3b2 <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b01      	cmp	r3, #1
 800c398:	d106      	bne.n	800c3a8 <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff ff8b 	bl	800c2b8 <phalVca_Sw_SetApplicationType>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	81fb      	strh	r3, [r7, #14]
            break;
 800c3a6:	e003      	b.n	800c3b0 <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800c3a8:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800c3ac:	81fb      	strh	r3, [r7, #14]
            break;
 800c3ae:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800c3b0:	89fb      	ldrh	r3, [r7, #14]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	2108      	movs	r1, #8
 800c3d6:	f00a fe31 	bl	801703c <phOsal_EventPost>
}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800c3e8:	4807      	ldr	r0, [pc, #28]	@ (800c408 <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800c3ea:	f010 fd7d 	bl	801cee8 <puts>
    if(xEventHandle != NULL)
 800c3ee:	4b07      	ldr	r3, [pc, #28]	@ (800c40c <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	2108      	movs	r1, #8
 800c3fc:	4803      	ldr	r0, [pc, #12]	@ (800c40c <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800c3fe:	f00a fe1d 	bl	801703c <phOsal_EventPost>
    }
}
 800c402:	bf00      	nop
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0801f6e8 	.word	0x0801f6e8
 800c40c:	2000178c 	.word	0x2000178c

0800c410 <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	460b      	mov	r3, r1
 800c41e:	817b      	strh	r3, [r7, #10]
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800c420:	897b      	ldrh	r3, [r7, #10]
 800c422:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800c426:	d002      	beq.n	800c42e <phhalHw_Pn5180_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800c428:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800c42c:	e1cf      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800c42e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <phhalHw_Pn5180_Init+0x2a>
 800c434:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d102      	bne.n	800c440 <phhalHw_Pn5180_Init+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800c43a:	f240 2321 	movw	r3, #545	@ 0x221
 800c43e:	e1c6      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <phhalHw_Pn5180_Init+0x3a>
 800c446:	2321      	movs	r3, #33	@ 0x21
 800c448:	e1c1      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    PH_ASSERT_NULL(pBalDataParams);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <phhalHw_Pn5180_Init+0x44>
 800c450:	2321      	movs	r3, #33	@ 0x21
 800c452:	e1bc      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    PH_ASSERT_NULL(pTxBuffer);
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <phhalHw_Pn5180_Init+0x4e>
 800c45a:	2321      	movs	r3, #33	@ 0x21
 800c45c:	e1b7      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    PH_ASSERT_NULL(pRxBuffer);
 800c45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <phhalHw_Pn5180_Init+0x58>
 800c464:	2321      	movs	r3, #33	@ 0x21
 800c466:	e1b2      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	1c5a      	adds	r2, r3, #1
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800c470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c472:	3b01      	subs	r3, #1
 800c474:	b29a      	uxth	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	1c9a      	adds	r2, r3, #2
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800c482:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c484:	3b02      	subs	r3, #2
 800c486:	b29a      	uxth	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f240 220e 	movw	r2, #526	@ 0x20e
 800c492:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2205      	movs	r2, #5
 800c4e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2202      	movs	r2, #2
 800c50a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2203      	movs	r2, #3
 800c538:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2201      	movs	r2, #1
 800c53e:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	4a98      	ldr	r2, [pc, #608]	@ (800c7d8 <phhalHw_Pn5180_Init+0x3c8>)
 800c576:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4a98      	ldr	r2, [pc, #608]	@ (800c7dc <phhalHw_Pn5180_Init+0x3cc>)
 800c57c:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

#ifndef _WIN32


    /* Config Reset pin as output and set to high. */
    pinCfg.bPullSelect = PHDRIVER_PIN_RESET_PULL_CFG;
 800c58e:	2301      	movs	r3, #1
 800c590:	743b      	strb	r3, [r7, #16]
    pinCfg.bOutputLogic = RESET_POWERUP_LEVEL;
 800c592:	2301      	movs	r3, #1
 800c594:	747b      	strb	r3, [r7, #17]
    PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_RESET, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c596:	f107 0310 	add.w	r3, r7, #16
 800c59a:	2202      	movs	r2, #2
 800c59c:	2120      	movs	r1, #32
 800c59e:	4890      	ldr	r0, [pc, #576]	@ (800c7e0 <phhalHw_Pn5180_Init+0x3d0>)
 800c5a0:	f00a fb3c 	bl	8016c1c <phDriver_PinConfig>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	82fb      	strh	r3, [r7, #22]
 800c5a8:	8afb      	ldrh	r3, [r7, #22]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <phhalHw_Pn5180_Init+0x1a2>
 800c5ae:	8afb      	ldrh	r3, [r7, #22]
 800c5b0:	e10d      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	789b      	ldrb	r3, [r3, #2]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d113      	bne.n	800c5e2 <phhalHw_Pn5180_Init+0x1d2>
    {
        /* Config NSS (Chip Select) pin as GPIO output and set to high. */
        pinCfg.bPullSelect = PHDRIVER_PIN_NSS_PULL_CFG;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	743b      	strb	r3, [r7, #16]
        pinCfg.bOutputLogic = PH_DRIVER_SET_HIGH;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	747b      	strb	r3, [r7, #17]
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_SSEL, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));
 800c5c2:	f107 0310 	add.w	r3, r7, #16
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c5cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c5d0:	f00a fb24 	bl	8016c1c <phDriver_PinConfig>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	82fb      	strh	r3, [r7, #22]
 800c5d8:	8afb      	ldrh	r3, [r7, #22]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <phhalHw_Pn5180_Init+0x1d2>
 800c5de:	8afb      	ldrh	r3, [r7, #22]
 800c5e0:	e0f5      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    }

    /* Set Dwl Pin as output, pullup enable and set to low. */
    pinCfg.bPullSelect = PHDRIVER_PIN_IRQ_PULL_CFG;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	743b      	strb	r3, [r7, #16]
    pinCfg.bOutputLogic = PH_DRIVER_SET_LOW;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	747b      	strb	r3, [r7, #17]
//    PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_DWL, PH_DRIVER_PINFUNC_OUTPUT, &pinCfg));

    if (((phbalReg_Type_t *)pBalDataParams)->bBalType != PHBAL_REG_TYPE_KERNEL_SPI)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	789b      	ldrb	r3, [r3, #2]
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	d010      	beq.n	800c614 <phhalHw_Pn5180_Init+0x204>
    {
        /* Busy pin as input and pullup enabled. */
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	743b      	strb	r3, [r7, #16]
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
 800c5f6:	f107 0310 	add.w	r3, r7, #16
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	2102      	movs	r1, #2
 800c5fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c602:	f00a fb0b 	bl	8016c1c <phDriver_PinConfig>
 800c606:	4603      	mov	r3, r0
 800c608:	82fb      	strh	r3, [r7, #22]
 800c60a:	8afb      	ldrh	r3, [r7, #22]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <phhalHw_Pn5180_Init+0x204>
 800c610:	8afb      	ldrh	r3, [r7, #22]
 800c612:	e0dc      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    }

    printf("[------1]\n");
 800c614:	4873      	ldr	r0, [pc, #460]	@ (800c7e4 <phhalHw_Pn5180_Init+0x3d4>)
 800c616:	f010 fc67 	bl	801cee8 <puts>
    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800c61a:	f003 fbeb 	bl	800fdf4 <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	789b      	ldrb	r3, [r3, #2]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d11a      	bne.n	800c65c <phhalHw_Pn5180_Init+0x24c>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800c626:	2100      	movs	r1, #0
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f003 fc0b 	bl	800fe44 <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800c62e:	2200      	movs	r2, #0
 800c630:	2102      	movs	r1, #2
 800c632:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c636:	f00a fb25 	bl	8016c84 <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800c63a:	2201      	movs	r2, #1
 800c63c:	2102      	movs	r1, #2
 800c63e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c642:	f00a fafb 	bl	8016c3c <phDriver_PinRead>
 800c646:	4603      	mov	r3, r0
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d103      	bne.n	800c654 <phhalHw_Pn5180_Init+0x244>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }


        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800c654:	2101      	movs	r1, #1
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f003 fbf4 	bl	800fe44 <phhalHw_Pn5180_WriteSSEL>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800c65c:	f107 0214 	add.w	r2, r7, #20
 800c660:	2302      	movs	r3, #2
 800c662:	2112      	movs	r1, #18
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f003 ffcd 	bl	8010604 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800c66a:	4603      	mov	r3, r0
 800c66c:	82fb      	strh	r3, [r7, #22]
 800c66e:	8afb      	ldrh	r3, [r7, #22]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <phhalHw_Pn5180_Init+0x268>
 800c674:	8afb      	ldrh	r3, [r7, #22]
 800c676:	e0aa      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>

    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800c678:	7d3b      	ldrb	r3, [r7, #20]
 800c67a:	2bff      	cmp	r3, #255	@ 0xff
 800c67c:	d105      	bne.n	800c68a <phhalHw_Pn5180_Init+0x27a>
 800c67e:	7d7b      	ldrb	r3, [r7, #21]
 800c680:	2bff      	cmp	r3, #255	@ 0xff
 800c682:	d102      	bne.n	800c68a <phhalHw_Pn5180_Init+0x27a>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800c684:	f240 1301 	movw	r3, #257	@ 0x101
 800c688:	e0a1      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800c690:	2301      	movs	r3, #1
 800c692:	2117      	movs	r1, #23
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f003 ffb5 	bl	8010604 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800c69a:	4603      	mov	r3, r0
 800c69c:	82fb      	strh	r3, [r7, #22]
 800c69e:	8afb      	ldrh	r3, [r7, #22]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <phhalHw_Pn5180_Init+0x298>
 800c6a4:	8afb      	ldrh	r3, [r7, #22]
 800c6a6:	e092      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800c6ae:	b25b      	sxtb	r3, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da04      	bge.n	800c6be <phhalHw_Pn5180_Init+0x2ae>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800c6bc:	e003      	b.n	800c6c6 <phhalHw_Pn5180_Init+0x2b6>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800c6c6:	f06f 0204 	mvn.w	r2, #4
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f003 fcf1 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	82fb      	strh	r3, [r7, #22]
 800c6d6:	8afb      	ldrh	r3, [r7, #22]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <phhalHw_Pn5180_Init+0x2d0>
 800c6dc:	8afb      	ldrh	r3, [r7, #22]
 800c6de:	e076      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800c6e0:	4a41      	ldr	r2, [pc, #260]	@ (800c7e8 <phhalHw_Pn5180_Init+0x3d8>)
 800c6e2:	2103      	movs	r1, #3
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f003 fbf9 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	82fb      	strh	r3, [r7, #22]
 800c6ee:	8afb      	ldrh	r3, [r7, #22]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <phhalHw_Pn5180_Init+0x2e8>
 800c6f4:	8afb      	ldrh	r3, [r7, #22]
 800c6f6:	e06a      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>

    /* Create the event. */
    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4a3c      	ldr	r2, [pc, #240]	@ (800c7ec <phhalHw_Pn5180_Init+0x3dc>)
 800c6fc:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    pDataParams->HwEventObj.intialValue = 0U;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800c714:	4619      	mov	r1, r3
 800c716:	4610      	mov	r0, r2
 800c718:	f00a fbb0 	bl	8016e7c <phOsal_EventCreate>
 800c71c:	4603      	mov	r3, r0
 800c71e:	82fb      	strh	r3, [r7, #22]
 800c720:	8afb      	ldrh	r3, [r7, #22]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <phhalHw_Pn5180_Init+0x31a>
 800c726:	8afb      	ldrh	r3, [r7, #22]
 800c728:	e051      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800c730:	2300      	movs	r3, #0
 800c732:	2201      	movs	r2, #1
 800c734:	2100      	movs	r1, #0
 800c736:	f00a fcb9 	bl	80170ac <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800c740:	4a2b      	ldr	r2, [pc, #172]	@ (800c7f0 <phhalHw_Pn5180_Init+0x3e0>)
 800c742:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800c744:	7d7b      	ldrb	r3, [r7, #21]
 800c746:	461a      	mov	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c754:	b21b      	sxth	r3, r3
 800c756:	021b      	lsls	r3, r3, #8
 800c758:	b21a      	sxth	r2, r3
 800c75a:	7d3b      	ldrb	r3, [r7, #20]
 800c75c:	b21b      	sxth	r3, r3
 800c75e:	4313      	orrs	r3, r2
 800c760:	b21b      	sxth	r3, r3
 800c762:	b29a      	uxth	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c770:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800c774:	d202      	bcs.n	800c77c <phhalHw_Pn5180_Init+0x36c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800c776:	f240 230b 	movw	r3, #523	@ 0x20b
 800c77a:	e028      	b.n	800c7ce <phhalHw_Pn5180_Init+0x3be>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800c782:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800c786:	d321      	bcc.n	800c7cc <phhalHw_Pn5180_Init+0x3bc>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800c788:	f107 0213 	add.w	r2, r7, #19
 800c78c:	2301      	movs	r3, #1
 800c78e:	21e8      	movs	r1, #232	@ 0xe8
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f003 ff37 	bl	8010604 <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800c796:	7cfb      	ldrb	r3, [r7, #19]
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d004      	beq.n	800c7aa <phhalHw_Pn5180_Init+0x39a>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800c7a0:	7cfb      	ldrb	r3, [r7, #19]
 800c7a2:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d010      	beq.n	800c7cc <phhalHw_Pn5180_Init+0x3bc>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800c7aa:	7cfb      	ldrb	r3, [r7, #19]
 800c7ac:	f023 0306 	bic.w	r3, r3, #6
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	74fb      	strb	r3, [r7, #19]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800c7b4:	7cfb      	ldrb	r3, [r7, #19]
 800c7b6:	f043 0303 	orr.w	r3, r3, #3
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	74fb      	strb	r3, [r7, #19]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800c7be:	f107 0213 	add.w	r2, r7, #19
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	21e8      	movs	r1, #232	@ 0xe8
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f003 fea4 	bl	8010514 <phhalHw_Pn5180_Instr_WriteE2Prom>
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }

    return PH_ERR_SUCCESS;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	0800c3bb 	.word	0x0800c3bb
 800c7dc:	0800c3e5 	.word	0x0800c3e5
 800c7e0:	48000400 	.word	0x48000400
 800c7e4:	0801f6f8 	.word	0x0801f6f8
 800c7e8:	000fffff 	.word	0x000fffff
 800c7ec:	08020024 	.word	0x08020024
 800c7f0:	2000178c 	.word	0x2000178c

0800c7f4 <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800c802:	7afb      	ldrb	r3, [r7, #11]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	4619      	mov	r1, r3
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f003 fb67 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800c80e:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	460b      	mov	r3, r1
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800c826:	7afb      	ldrb	r3, [r7, #11]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	4619      	mov	r1, r3
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f003 fd69 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800c832:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800c848:	2200      	movs	r2, #0
 800c84a:	215e      	movs	r1, #94	@ 0x5e
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fd3b 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800c852:	4603      	mov	r3, r0
 800c854:	823b      	strh	r3, [r7, #16]
 800c856:	8a3b      	ldrh	r3, [r7, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800c85c:	8a3b      	ldrh	r3, [r7, #16]
 800c85e:	e1af      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00a      	beq.n	800c87c <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	78fa      	ldrb	r2, [r7, #3]
 800c86a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800c876:	2301      	movs	r3, #1
 800c878:	767b      	strb	r3, [r7, #25]
 800c87a:	e001      	b.n	800c880 <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	2b09      	cmp	r3, #9
 800c8b0:	f200 8104 	bhi.w	800cabc <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800c8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c8bc <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800c8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ba:	bf00      	nop
 800c8bc:	0800c8e5 	.word	0x0800c8e5
 800c8c0:	0800c90f 	.word	0x0800c90f
 800c8c4:	0800c939 	.word	0x0800c939
 800c8c8:	0800ca53 	.word	0x0800ca53
 800c8cc:	0800cabd 	.word	0x0800cabd
 800c8d0:	0800ca7d 	.word	0x0800ca7d
 800c8d4:	0800c9b5 	.word	0x0800c9b5
 800c8d8:	0800c9ef 	.word	0x0800c9ef
 800c8dc:	0800ca21 	.word	0x0800ca21
 800c8e0:	0800c977 	.word	0x0800c977
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800c8e4:	2280      	movs	r2, #128	@ 0x80
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f004 f9f1 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	823b      	strh	r3, [r7, #16]
 800c8f2:	8a3b      	ldrh	r3, [r7, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800c8f8:	8a3b      	ldrh	r3, [r7, #16]
 800c8fa:	e161      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800c8fc:	4b99      	ldr	r3, [pc, #612]	@ (800cb64 <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800c8fe:	61fb      	str	r3, [r7, #28]
 800c900:	230a      	movs	r3, #10
 800c902:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c904:	2300      	movs	r3, #0
 800c906:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c908:	2300      	movs	r3, #0
 800c90a:	827b      	strh	r3, [r7, #18]
        break;
 800c90c:	e0de      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800c90e:	2284      	movs	r2, #132	@ 0x84
 800c910:	2104      	movs	r1, #4
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f004 f9dc 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c918:	4603      	mov	r3, r0
 800c91a:	823b      	strh	r3, [r7, #16]
 800c91c:	8a3b      	ldrh	r3, [r7, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800c922:	8a3b      	ldrh	r3, [r7, #16]
 800c924:	e14c      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800c926:	4b90      	ldr	r3, [pc, #576]	@ (800cb68 <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800c928:	61fb      	str	r3, [r7, #28]
 800c92a:	230b      	movs	r3, #11
 800c92c:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c92e:	2300      	movs	r3, #0
 800c930:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c932:	2300      	movs	r3, #0
 800c934:	827b      	strh	r3, [r7, #18]
        break;
 800c936:	e0c9      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800c938:	2288      	movs	r2, #136	@ 0x88
 800c93a:	2108      	movs	r1, #8
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f004 f9c7 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c942:	4603      	mov	r3, r0
 800c944:	823b      	strh	r3, [r7, #16]
 800c946:	8a3b      	ldrh	r3, [r7, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800c94c:	8a3b      	ldrh	r3, [r7, #16]
 800c94e:	e137      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800c950:	4b86      	ldr	r3, [pc, #536]	@ (800cb6c <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800c952:	61fb      	str	r3, [r7, #28]
 800c954:	230b      	movs	r3, #11
 800c956:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800c958:	2301      	movs	r3, #1
 800c95a:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800c95c:	2301      	movs	r3, #1
 800c95e:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f004 fe57 	bl	8011614 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800c966:	4603      	mov	r3, r0
 800c968:	823b      	strh	r3, [r7, #16]
 800c96a:	8a3b      	ldrh	r3, [r7, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f000 80a8 	beq.w	800cac2 <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800c972:	8a3b      	ldrh	r3, [r7, #16]
 800c974:	e124      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800c976:	2289      	movs	r2, #137	@ 0x89
 800c978:	2109      	movs	r1, #9
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f004 f9a8 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c980:	4603      	mov	r3, r0
 800c982:	823b      	strh	r3, [r7, #16]
 800c984:	8a3b      	ldrh	r3, [r7, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800c98a:	8a3b      	ldrh	r3, [r7, #16]
 800c98c:	e118      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800c98e:	4b78      	ldr	r3, [pc, #480]	@ (800cb70 <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800c990:	61fb      	str	r3, [r7, #28]
 800c992:	230b      	movs	r3, #11
 800c994:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800c996:	2302      	movs	r3, #2
 800c998:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800c99a:	2302      	movs	r3, #2
 800c99c:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f004 fe38 	bl	8011614 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	823b      	strh	r3, [r7, #16]
 800c9a8:	8a3b      	ldrh	r3, [r7, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 808b 	beq.w	800cac6 <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800c9b0:	8a3b      	ldrh	r3, [r7, #16]
 800c9b2:	e105      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800c9b4:	228a      	movs	r2, #138	@ 0x8a
 800c9b6:	210a      	movs	r1, #10
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f004 f989 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	823b      	strh	r3, [r7, #16]
 800c9c2:	8a3b      	ldrh	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800c9c8:	8a3b      	ldrh	r3, [r7, #16]
 800c9ca:	e0f9      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800c9cc:	4b69      	ldr	r3, [pc, #420]	@ (800cb74 <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800c9ce:	61fb      	str	r3, [r7, #28]
 800c9d0:	230b      	movs	r3, #11
 800c9d2:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800c9ec:	e06e      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800c9ee:	228b      	movs	r2, #139	@ 0x8b
 800c9f0:	210b      	movs	r1, #11
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f004 f96c 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	823b      	strh	r3, [r7, #16]
 800c9fc:	8a3b      	ldrh	r3, [r7, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800ca02:	8a3b      	ldrh	r3, [r7, #16]
 800ca04:	e0dc      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800ca06:	4b5c      	ldr	r3, [pc, #368]	@ (800cb78 <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800ca08:	61fb      	str	r3, [r7, #28]
 800ca0a:	230b      	movs	r3, #11
 800ca0c:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800ca12:	2301      	movs	r3, #1
 800ca14:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800ca1e:	e055      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca20:	228c      	movs	r2, #140	@ 0x8c
 800ca22:	210c      	movs	r1, #12
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f004 f953 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	823b      	strh	r3, [r7, #16]
 800ca2e:	8a3b      	ldrh	r3, [r7, #16]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800ca34:	8a3b      	ldrh	r3, [r7, #16]
 800ca36:	e0c3      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800ca38:	4b50      	ldr	r3, [pc, #320]	@ (800cb7c <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800ca3a:	61fb      	str	r3, [r7, #28]
 800ca3c:	230b      	movs	r3, #11
 800ca3e:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ca40:	2302      	movs	r3, #2
 800ca42:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800ca44:	2302      	movs	r3, #2
 800ca46:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800ca50:	e03c      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca52:	228d      	movs	r2, #141	@ 0x8d
 800ca54:	210d      	movs	r1, #13
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f004 f93a 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	823b      	strh	r3, [r7, #16]
 800ca60:	8a3b      	ldrh	r3, [r7, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800ca66:	8a3b      	ldrh	r3, [r7, #16]
 800ca68:	e0aa      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800ca6a:	4b45      	ldr	r3, [pc, #276]	@ (800cb80 <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800ca6c:	61fb      	str	r3, [r7, #28]
 800ca6e:	230c      	movs	r3, #12
 800ca70:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800ca72:	230b      	movs	r3, #11
 800ca74:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800ca76:	230d      	movs	r3, #13
 800ca78:	827b      	strh	r3, [r7, #18]

        break;
 800ca7a:	e027      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800ca7c:	2290      	movs	r2, #144	@ 0x90
 800ca7e:	2110      	movs	r1, #16
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f004 f925 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800ca86:	4603      	mov	r3, r0
 800ca88:	823b      	strh	r3, [r7, #16]
 800ca8a:	8a3b      	ldrh	r3, [r7, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800ca90:	8a3b      	ldrh	r3, [r7, #16]
 800ca92:	e095      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800ca94:	4b3b      	ldr	r3, [pc, #236]	@ (800cb84 <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	230c      	movs	r3, #12
 800ca9a:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800ca9c:	2311      	movs	r3, #17
 800ca9e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800caa0:	2313      	movs	r3, #19
 800caa2:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800caa4:	2205      	movs	r2, #5
 800caa6:	210e      	movs	r1, #14
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fc0d 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800caae:	4603      	mov	r3, r0
 800cab0:	823b      	strh	r3, [r7, #16]
 800cab2:	8a3b      	ldrh	r3, [r7, #16]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d008      	beq.n	800caca <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800cab8:	8a3b      	ldrh	r3, [r7, #16]
 800caba:	e081      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800cabc:	f240 2321 	movw	r3, #545	@ 0x221
 800cac0:	e07e      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800cac2:	bf00      	nop
 800cac4:	e002      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800cac6:	bf00      	nop
 800cac8:	e000      	b.n	800cacc <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800caca:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800cacc:	7e7b      	ldrb	r3, [r7, #25]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d069      	beq.n	800cba6 <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800cad8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800cadc:	e070      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3358      	adds	r3, #88	@ 0x58
 800cae2:	2220      	movs	r2, #32
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f010 faee 	bl	801d0c8 <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800caec:	2300      	movs	r3, #0
 800caee:	82fb      	strh	r3, [r7, #22]
 800caf0:	e04d      	b.n	800cb8e <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800caf2:	8afb      	ldrh	r3, [r7, #22]
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	4413      	add	r3, r2
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800cafe:	8afb      	ldrh	r3, [r7, #22]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	3302      	adds	r3, #2
 800cb04:	69fa      	ldr	r2, [r7, #28]
 800cb06:	4413      	add	r3, r2
 800cb08:	89fa      	ldrh	r2, [r7, #14]
 800cb0a:	8819      	ldrh	r1, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	322c      	adds	r2, #44	@ 0x2c
 800cb10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800cb14:	89fb      	ldrh	r3, [r7, #14]
 800cb16:	2b07      	cmp	r3, #7
 800cb18:	d136      	bne.n	800cb88 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d109      	bne.n	800cb38 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d004      	beq.n	800cb38 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb34:	2b0a      	cmp	r3, #10
 800cb36:	d127      	bne.n	800cb88 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d123      	bne.n	800cb88 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800cb40:	89fa      	ldrh	r2, [r7, #14]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	322c      	adds	r2, #44	@ 0x2c
 800cb46:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800cb4a:	89fb      	ldrh	r3, [r7, #14]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fbba 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800cb54:	4603      	mov	r3, r0
 800cb56:	823b      	strh	r3, [r7, #16]
 800cb58:	8a3b      	ldrh	r3, [r7, #16]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d014      	beq.n	800cb88 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800cb5e:	8a3b      	ldrh	r3, [r7, #16]
 800cb60:	e02e      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800cb62:	bf00      	nop
 800cb64:	08020028 	.word	0x08020028
 800cb68:	08020050 	.word	0x08020050
 800cb6c:	0802007c 	.word	0x0802007c
 800cb70:	080200a8 	.word	0x080200a8
 800cb74:	08020134 	.word	0x08020134
 800cb78:	08020160 	.word	0x08020160
 800cb7c:	0802018c 	.word	0x0802018c
 800cb80:	080200d4 	.word	0x080200d4
 800cb84:	08020104 	.word	0x08020104
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800cb88:	8afb      	ldrh	r3, [r7, #22]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	82fb      	strh	r3, [r7, #22]
 800cb8e:	8afa      	ldrh	r2, [r7, #22]
 800cb90:	8b7b      	ldrh	r3, [r7, #26]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d3ad      	bcc.n	800caf2 <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	8aba      	ldrh	r2, [r7, #20]
 800cb9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	8a7a      	ldrh	r2, [r7, #18]
 800cba2:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800cba6:	2201      	movs	r2, #1
 800cba8:	212e      	movs	r1, #46	@ 0x2e
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fb8c 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	823b      	strh	r3, [r7, #16]
 800cbb4:	8a3b      	ldrh	r3, [r7, #16]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800cbba:	8a3b      	ldrh	r3, [r7, #16]
 800cbbc:	e000      	b.n	800cbc0 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3720      	adds	r7, #32
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b090      	sub	sp, #64	@ 0x40
 800cbcc:	af02      	add	r7, sp, #8
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	607a      	str	r2, [r7, #4]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	817b      	strh	r3, [r7, #10]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800cbec:	2300      	movs	r3, #0
 800cbee:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800cbf8:	893b      	ldrh	r3, [r7, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <phhalHw_Pn5180_Exchange+0x42>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d102      	bne.n	800cc0a <phhalHw_Pn5180_Exchange+0x42>
 800cc04:	f240 2321 	movw	r3, #545	@ 0x221
 800cc08:	e253      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800cc1a:	f240 2325 	movw	r3, #549	@ 0x225
 800cc1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cc20:	e1cf      	b.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800cc22:	897b      	ldrh	r3, [r7, #10]
 800cc24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800cc2c:	f240 2321 	movw	r3, #545	@ 0x221
 800cc30:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cc32:	e1c6      	b.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800cc34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <phhalHw_Pn5180_Exchange+0x78>
 800cc3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d107      	bne.n	800cc50 <phhalHw_Pn5180_Exchange+0x88>
 800cc40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	db03      	blt.n	800cc50 <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800cc48:	f240 2321 	movw	r3, #545	@ 0x221
 800cc4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800cc4e:	e1b8      	b.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d115      	bne.n	800cc86 <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800cc5a:	f107 0310 	add.w	r3, r7, #16
 800cc5e:	461a      	mov	r2, r3
 800cc60:	211d      	movs	r1, #29
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f003 fb4e 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cc6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <phhalHw_Pn5180_Exchange+0xae>
 800cc72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc74:	e21d      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d102      	bne.n	800cc86 <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800cc80:	f240 230a 	movw	r3, #522	@ 0x20a
 800cc84:	e215      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800cc86:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800cc8a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800cc8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	460b      	mov	r3, r1
 800cc96:	2101      	movs	r1, #1
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f004 f8f0 	bl	8010e7e <phhalHw_Pn5180_GetTxBuffer>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cca2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f040 818c 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800ccaa:	897b      	ldrh	r3, [r7, #10]
 800ccac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d105      	bne.n	800ccc0 <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800ccc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800ccc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccc8:	2200      	movs	r2, #0
 800ccca:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d150      	bne.n	800cd78 <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800ccda:	893b      	ldrh	r3, [r7, #8]
 800ccdc:	f107 0218 	add.w	r2, r7, #24
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7f9 fd53 	bl	800678e <phTools_ComputeCrc_B>
 800cce8:	4603      	mov	r3, r0
 800ccea:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ccec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f040 8167 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 fae5 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f040 815c 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f000 fada 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800cd14:	4603      	mov	r3, r0
 800cd16:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f040 8151 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800cd20:	2200      	movs	r2, #0
 800cd22:	2102      	movs	r1, #2
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f000 facf 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f040 8146 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800cd36:	2207      	movs	r2, #7
 800cd38:	2103      	movs	r1, #3
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f000 fac4 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800cd40:	4603      	mov	r3, r0
 800cd42:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f040 813b 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	2104      	movs	r1, #4
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f003 f939 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800cd56:	4603      	mov	r3, r0
 800cd58:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f040 8130 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800cd62:	221d      	movs	r2, #29
 800cd64:	2107      	movs	r1, #7
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f000 faae 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cd70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f040 8125 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	8b9b      	ldrh	r3, [r3, #28]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d122      	bne.n	800cdc6 <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800cd80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	8b9b      	ldrh	r3, [r3, #28]
 800cd86:	1c59      	adds	r1, r3, #1
 800cd88:	b288      	uxth	r0, r1
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	8388      	strh	r0, [r1, #28]
 800cd8e:	4413      	add	r3, r2
 800cd90:	2209      	movs	r2, #9
 800cd92:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800cd94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	8b9b      	ldrh	r3, [r3, #28]
 800cd9a:	1c59      	adds	r1, r3, #1
 800cd9c:	b288      	uxth	r0, r1
 800cd9e:	68f9      	ldr	r1, [r7, #12]
 800cda0:	8388      	strh	r0, [r1, #28]
 800cda2:	4413      	add	r3, r2
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d109      	bne.n	800cdc6 <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800cdb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	8b9b      	ldrh	r3, [r3, #28]
 800cdb8:	1c59      	adds	r1, r3, #1
 800cdba:	b288      	uxth	r0, r1
 800cdbc:	68f9      	ldr	r1, [r7, #12]
 800cdbe:	8388      	strh	r0, [r1, #28]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	22f0      	movs	r2, #240	@ 0xf0
 800cdc4:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800cdc6:	893b      	ldrh	r3, [r7, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d03d      	beq.n	800ce48 <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800cdcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdce:	4619      	mov	r1, r3
 800cdd0:	893b      	ldrh	r3, [r7, #8]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	8a52      	ldrh	r2, [r2, #18]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	8b92      	ldrh	r2, [r2, #28]
 800cddc:	4413      	add	r3, r2
 800cdde:	4299      	cmp	r1, r3
 800cde0:	da09      	bge.n	800cdf6 <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2200      	movs	r2, #0
 800cde6:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2200      	movs	r2, #0
 800cdec:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800cdee:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800cdf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800cdf4:	e0e5      	b.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800cdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	8b92      	ldrh	r2, [r2, #28]
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	8a52      	ldrh	r2, [r2, #18]
 800ce02:	440a      	add	r2, r1
 800ce04:	4413      	add	r3, r2
 800ce06:	893a      	ldrh	r2, [r7, #8]
 800ce08:	6879      	ldr	r1, [r7, #4]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f010 f9db 	bl	801d1c6 <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	8a5a      	ldrh	r2, [r3, #18]
 800ce14:	893b      	ldrh	r3, [r7, #8]
 800ce16:	4413      	add	r3, r2
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d10f      	bne.n	800ce48 <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800ce28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	8b92      	ldrh	r2, [r2, #28]
 800ce2e:	4611      	mov	r1, r2
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	8a52      	ldrh	r2, [r2, #18]
 800ce34:	440a      	add	r2, r1
 800ce36:	4413      	add	r3, r2
 800ce38:	8b3a      	ldrh	r2, [r7, #24]
 800ce3a:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	8a5b      	ldrh	r3, [r3, #18]
 800ce40:	3302      	adds	r3, #2
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800ce4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	da01      	bge.n	800ce58 <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800ce54:	2300      	movs	r3, #0
 800ce56:	e12c      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	8a5a      	ldrh	r2, [r3, #18]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	8b9b      	ldrh	r3, [r3, #28]
 800ce60:	4413      	add	r3, r2
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	8a5b      	ldrh	r3, [r3, #18]
 800ce6c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800ce70:	d903      	bls.n	800ce7a <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800ce72:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800ce76:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800ce78:	e0a3      	b.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800ce7a:	2103      	movs	r1, #3
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f005 fb11 	bl	80124a4 <phhalHw_Pn5180_Int_LoadCommand>
 800ce82:	4603      	mov	r3, r0
 800ce84:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ce86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f040 809a 	bne.w	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d103      	bne.n	800cea0 <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800ce98:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800ce9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce9e:	e001      	b.n	800cea4 <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800cea0:	4b86      	ldr	r3, [pc, #536]	@ (800d0bc <phhalHw_Pn5180_Exchange+0x4f4>)
 800cea2:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d103      	bne.n	800ceb6 <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800ceb4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800ceb6:	4a82      	ldr	r2, [pc, #520]	@ (800d0c0 <phhalHw_Pn5180_Exchange+0x4f8>)
 800ceb8:	2103      	movs	r1, #3
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f003 f80e 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800cec0:	4603      	mov	r3, r0
 800cec2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cec4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d17b      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800ced0:	2300      	movs	r3, #0
 800ced2:	2201      	movs	r2, #1
 800ced4:	2100      	movs	r1, #0
 800ced6:	f00a f8e9 	bl	80170ac <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800ceda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cedc:	2101      	movs	r1, #1
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f002 fffc 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800cee4:	4603      	mov	r3, r0
 800cee6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cee8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d169      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d116      	bne.n	800cf26 <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800cef8:	f640 0301 	movw	r3, #2049	@ 0x801
 800cefc:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d103      	bne.n	800cf10 <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800cf0e:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	461a      	mov	r2, r3
 800cf14:	210f      	movs	r1, #15
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f002 ffe0 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d14d      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d01a      	beq.n	800cf66 <phhalHw_Pn5180_Exchange+0x39e>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d115      	bne.n	800cf66 <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800cf3a:	4b62      	ldr	r3, [pc, #392]	@ (800d0c4 <phhalHw_Pn5180_Exchange+0x4fc>)
 800cf3c:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d103      	bne.n	800cf50 <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800cf4e:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	461a      	mov	r2, r3
 800cf54:	210f      	movs	r1, #15
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f002 ffc0 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d12d      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800cf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6e:	3301      	adds	r3, #1
 800cf70:	b2d2      	uxtb	r2, r2
 800cf72:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800cf74:	2300      	movs	r3, #0
 800cf76:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01f      	beq.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800cf82:	f107 0320 	add.w	r3, r7, #32
 800cf86:	461a      	mov	r2, r3
 800cf88:	211d      	movs	r1, #29
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f003 f9ba 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800cf90:	4603      	mov	r3, r0
 800cf92:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cf94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d113      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800cf9a:	6a3b      	ldr	r3, [r7, #32]
 800cf9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10e      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f000 f8e7 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cfae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f000 f889 	bl	800d0cc <phhalHw_Pn5180_FieldOn>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cfbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfc0:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d120      	bne.n	800d00e <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800cfd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d110      	bne.n	800cffc <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800cfda:	f107 0314 	add.w	r3, r7, #20
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2322      	movs	r3, #34	@ 0x22
 800cfe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe6:	2105      	movs	r1, #5
 800cfe8:	4837      	ldr	r0, [pc, #220]	@ (800d0c8 <phhalHw_Pn5180_Exchange+0x500>)
 800cfea:	f009 ff93 	bl	8016f14 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	f003 0320 	and.w	r3, r3, #32
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800cff8:	2312      	movs	r3, #18
 800cffa:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800cffc:	f009 fe8c 	bl	8016d18 <phDriver_TimerStop>
 800d000:	4603      	mov	r3, r0
 800d002:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d004:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <phhalHw_Pn5180_Exchange+0x446>
 800d00a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d00c:	e051      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800d00e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800d014:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d016:	e04c      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800d018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	8a5a      	ldrh	r2, [r3, #18]
 800d01e:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800d020:	f107 031a 	add.w	r3, r7, #26
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	f107 031c 	add.w	r3, r7, #28
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	4603      	mov	r3, r0
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f002 f89a 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 800d034:	4603      	mov	r3, r0
 800d036:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d038:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <phhalHw_Pn5180_Exchange+0x47a>
 800d03e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d040:	e037      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00b      	beq.n	800d070 <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800d058:	2200      	movs	r2, #0
 800d05a:	2103      	movs	r1, #3
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f000 f933 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800d062:	4603      	mov	r3, r0
 800d064:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d066:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <phhalHw_Pn5180_Exchange+0x4a8>
 800d06c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d06e:	e020      	b.n	800d0b2 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800d070:	2301      	movs	r3, #1
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f004 ff90 	bl	8011fa0 <phhalHw_Pn5180_Receive_Int>
 800d080:	4603      	mov	r3, r0
 800d082:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800d084:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d004      	beq.n	800d096 <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f005 f9e7 	bl	8012460 <phhalHw_Pn5180_Int_IdleCommand>
 800d092:	4603      	mov	r3, r0
 800d094:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d007      	beq.n	800d0b0 <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800d0a0:	f06f 0201 	mvn.w	r2, #1
 800d0a4:	210f      	movs	r1, #15
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f003 f804 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800d0b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3738      	adds	r7, #56	@ 0x38
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	00021001 	.word	0x00021001
 800d0c0:	000fffff 	.word	0x000fffff
 800d0c4:	00100801 	.word	0x00100801
 800d0c8:	2000178c 	.word	0x2000178c

0800d0cc <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	78db      	ldrb	r3, [r3, #3]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d103      	bne.n	800d0e8 <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	f043 0301 	orr.w	r3, r3, #1
 800d0e6:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d103      	bne.n	800d0fa <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
 800d0f4:	f043 0302 	orr.w	r3, r3, #2
 800d0f8:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800d0fa:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800d0fe:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	461a      	mov	r2, r3
 800d104:	2103      	movs	r1, #3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f002 ff5e 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800d10c:	4603      	mov	r3, r0
 800d10e:	81bb      	strh	r3, [r7, #12]
 800d110:	89bb      	ldrh	r3, [r7, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <phhalHw_Pn5180_FieldOn+0x4e>
 800d116:	89bb      	ldrh	r3, [r7, #12]
 800d118:	e02a      	b.n	800d170 <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f003 fe34 	bl	8010d8c <phhalHw_Pn5180_Instr_RfOn>
 800d124:	4603      	mov	r3, r0
 800d126:	81bb      	strh	r3, [r7, #12]
 800d128:	89bb      	ldrh	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <phhalHw_Pn5180_FieldOn+0x66>
 800d12e:	89bb      	ldrh	r3, [r7, #12]
 800d130:	e01e      	b.n	800d170 <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800d132:	f107 0308 	add.w	r3, r7, #8
 800d136:	461a      	mov	r2, r3
 800d138:	211d      	movs	r1, #29
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f003 f8e2 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800d140:	4603      	mov	r3, r0
 800d142:	81bb      	strh	r3, [r7, #12]
 800d144:	89bb      	ldrh	r3, [r7, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d001      	beq.n	800d14e <phhalHw_Pn5180_FieldOn+0x82>
 800d14a:	89bb      	ldrh	r3, [r7, #12]
 800d14c:	e010      	b.n	800d170 <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10a      	bne.n	800d16e <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800d162:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800d166:	e003      	b.n	800d170 <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800d168:	f240 230a 	movw	r3, #522	@ 0x20a
 800d16c:	e000      	b.n	800d170 <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800d188:	2200      	movs	r2, #0
 800d18a:	215e      	movs	r1, #94	@ 0x5e
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f89b 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800d192:	4603      	mov	r3, r0
 800d194:	81fb      	strh	r3, [r7, #14]
 800d196:	89fb      	ldrh	r3, [r7, #14]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d001      	beq.n	800d1a0 <phhalHw_Pn5180_FieldOff+0x28>
 800d19c:	89fb      	ldrh	r3, [r7, #14]
 800d19e:	e00a      	b.n	800d1b6 <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f003 fe32 	bl	8010e0a <phhalHw_Pn5180_Instr_RfOff>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	81fb      	strh	r3, [r7, #14]
 800d1aa:	89fb      	ldrh	r3, [r7, #14]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <phhalHw_Pn5180_FieldOff+0x3c>
 800d1b0:	89fb      	ldrh	r3, [r7, #14]
 800d1b2:	e000      	b.n	800d1b6 <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	70fb      	strb	r3, [r7, #3]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	803b      	strh	r3, [r7, #0]
	#ifdef USE_POLLING_MODE
    // 轮询模式：主动检查IRQ_STATUS寄存器
    uint32_t dwStartTime = HAL_GetTick();
 800d1d0:	f00a f8e0 	bl	8017394 <HAL_GetTick>
 800d1d4:	6138      	str	r0, [r7, #16]
    uint32_t dwTimeout = wTimeout;
 800d1d6:	883b      	ldrh	r3, [r7, #0]
 800d1d8:	617b      	str	r3, [r7, #20]

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS) {
 800d1da:	78fb      	ldrb	r3, [r7, #3]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d128      	bne.n	800d232 <phhalHw_Pn5180_Wait+0x72>
        dwTimeout = (wTimeout + 999) / 1000; // 转换为毫秒
 800d1e0:	883b      	ldrh	r3, [r7, #0]
 800d1e2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800d1e6:	4a19      	ldr	r2, [pc, #100]	@ (800d24c <phhalHw_Pn5180_Wait+0x8c>)
 800d1e8:	fb82 1203 	smull	r1, r2, r2, r3
 800d1ec:	1192      	asrs	r2, r2, #6
 800d1ee:	17db      	asrs	r3, r3, #31
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	617b      	str	r3, [r7, #20]
    }

    while ((HAL_GetTick() - dwStartTime) < dwTimeout)
 800d1f4:	e01d      	b.n	800d232 <phhalHw_Pn5180_Wait+0x72>
        // 读取IRQ_STATUS寄存器
        uint32_t dwIrqStatus;
        phStatus_t status;

        // 读取IRQ_STATUS寄存器
        status = phhalHw_Pn5180_ReadRegister(pDataParams, IRQ_STATUS, &dwIrqStatus);
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	2102      	movs	r1, #2
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff fb0a 	bl	800c818 <phhalHw_Pn5180_ReadRegister>
 800d204:	4603      	mov	r3, r0
 800d206:	81fb      	strh	r3, [r7, #14]
        if (status != PH_ERR_SUCCESS)
 800d208:	89fb      	ldrh	r3, [r7, #14]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <phhalHw_Pn5180_Wait+0x52>
        {
    	    return status;
 800d20e:	89fb      	ldrh	r3, [r7, #14]
 800d210:	e018      	b.n	800d244 <phhalHw_Pn5180_Wait+0x84>
        }

        // 使用正确的宏定义检查中断标志
        if (dwIrqStatus & (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_IDLE_IRQ_MASK | IRQ_STATUS_TX_IRQ_MASK))
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	f003 0307 	and.w	r3, r3, #7
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d007      	beq.n	800d22c <phhalHw_Pn5180_Wait+0x6c>
        {
            // 清除检测到的中断标志
            phhalHw_Pn5180_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqStatus);
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	461a      	mov	r2, r3
 800d220:	2103      	movs	r1, #3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff fae6 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
            return PH_ERR_SUCCESS;
 800d228:	2300      	movs	r3, #0
 800d22a:	e00b      	b.n	800d244 <phhalHw_Pn5180_Wait+0x84>
        }

        HAL_Delay(1); // 短暂延时
 800d22c:	2001      	movs	r0, #1
 800d22e:	f00a f8bd 	bl	80173ac <HAL_Delay>
    while ((HAL_GetTick() - dwStartTime) < dwTimeout)
 800d232:	f00a f8af 	bl	8017394 <HAL_GetTick>
 800d236:	4602      	mov	r2, r0
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d8d9      	bhi.n	800d1f6 <phhalHw_Pn5180_Wait+0x36>
    }

    return PH_ERR_IO_TIMEOUT;
 800d242:	2301      	movs	r3, #1
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
    }

    return PH_ERR_SUCCESS;
#endif
}
 800d244:	4618      	mov	r0, r3
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	10624dd3 	.word	0x10624dd3

0800d250 <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7ff ff8d 	bl	800d178 <phhalHw_Pn5180_FieldOff>
 800d25e:	4603      	mov	r3, r0
 800d260:	81fb      	strh	r3, [r7, #14]
 800d262:	89fb      	ldrh	r3, [r7, #14]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <phhalHw_Pn5180_FieldReset+0x1c>
 800d268:	89fb      	ldrh	r3, [r7, #14]
 800d26a:	e026      	b.n	800d2ba <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d270:	461a      	mov	r2, r3
 800d272:	2101      	movs	r1, #1
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff ffa3 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 800d27a:	4603      	mov	r3, r0
 800d27c:	81fb      	strh	r3, [r7, #14]
 800d27e:	89fb      	ldrh	r3, [r7, #14]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <phhalHw_Pn5180_FieldReset+0x38>
 800d284:	89fb      	ldrh	r3, [r7, #14]
 800d286:	e018      	b.n	800d2ba <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff ff1f 	bl	800d0cc <phhalHw_Pn5180_FieldOn>
 800d28e:	4603      	mov	r3, r0
 800d290:	81fb      	strh	r3, [r7, #14]
 800d292:	89fb      	ldrh	r3, [r7, #14]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <phhalHw_Pn5180_FieldReset+0x4c>
 800d298:	89fb      	ldrh	r3, [r7, #14]
 800d29a:	e00e      	b.n	800d2ba <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff ff8b 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	81fb      	strh	r3, [r7, #14]
 800d2ae:	89fb      	ldrh	r3, [r7, #14]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <phhalHw_Pn5180_FieldReset+0x68>
 800d2b4:	89fb      	ldrh	r3, [r7, #14]
 800d2b6:	e000      	b.n	800d2ba <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	0000      	movs	r0, r0
 800d2c4:	0000      	movs	r0, r0
	...

0800d2c8 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 800d2c8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ca:	b090      	sub	sp, #64	@ 0x40
 800d2cc:	af02      	add	r7, sp, #8
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	807b      	strh	r3, [r7, #2]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 800d2e0:	f04f 0300 	mov.w	r3, #0
 800d2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 800d2e6:	23ff      	movs	r3, #255	@ 0xff
 800d2e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 800d2ea:	887b      	ldrh	r3, [r7, #2]
 800d2ec:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800d2f0:	3b25      	subs	r3, #37	@ 0x25
 800d2f2:	2b07      	cmp	r3, #7
 800d2f4:	d809      	bhi.n	800d30a <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d2fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d300:	d805      	bhi.n	800d30e <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800d302:	f240 2325 	movw	r3, #549	@ 0x225
 800d306:	f001 bc22 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 800d30a:	bf00      	nop
 800d30c:	e000      	b.n	800d310 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 800d30e:	bf00      	nop
    }

    switch(wConfig)
 800d310:	887b      	ldrh	r3, [r7, #2]
 800d312:	2b5e      	cmp	r3, #94	@ 0x5e
 800d314:	f300 8154 	bgt.w	800d5c0 <phhalHw_Pn5180_SetConfig+0x2f8>
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f280 808d 	bge.w	800d438 <phhalHw_Pn5180_SetConfig+0x170>
 800d31e:	f001 bbd3 	b.w	800eac8 <phhalHw_Pn5180_SetConfig+0x1800>
 800d322:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800d326:	3b10      	subs	r3, #16
 800d328:	2b40      	cmp	r3, #64	@ 0x40
 800d32a:	f201 83cd 	bhi.w	800eac8 <phhalHw_Pn5180_SetConfig+0x1800>
 800d32e:	a201      	add	r2, pc, #4	@ (adr r2, 800d334 <phhalHw_Pn5180_SetConfig+0x6c>)
 800d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d334:	0800e1b9 	.word	0x0800e1b9
 800d338:	0800eac9 	.word	0x0800eac9
 800d33c:	0800eac9 	.word	0x0800eac9
 800d340:	0800eac9 	.word	0x0800eac9
 800d344:	0800eac9 	.word	0x0800eac9
 800d348:	0800eac9 	.word	0x0800eac9
 800d34c:	0800eac9 	.word	0x0800eac9
 800d350:	0800eac9 	.word	0x0800eac9
 800d354:	0800eac9 	.word	0x0800eac9
 800d358:	0800eac9 	.word	0x0800eac9
 800d35c:	0800eac9 	.word	0x0800eac9
 800d360:	0800eac9 	.word	0x0800eac9
 800d364:	0800eac9 	.word	0x0800eac9
 800d368:	0800eac9 	.word	0x0800eac9
 800d36c:	0800eac9 	.word	0x0800eac9
 800d370:	0800eac9 	.word	0x0800eac9
 800d374:	0800eac9 	.word	0x0800eac9
 800d378:	0800eac9 	.word	0x0800eac9
 800d37c:	0800eac9 	.word	0x0800eac9
 800d380:	0800eac9 	.word	0x0800eac9
 800d384:	0800eac9 	.word	0x0800eac9
 800d388:	0800e9d9 	.word	0x0800e9d9
 800d38c:	0800ea0b 	.word	0x0800ea0b
 800d390:	0800ea27 	.word	0x0800ea27
 800d394:	0800ea41 	.word	0x0800ea41
 800d398:	0800ea5b 	.word	0x0800ea5b
 800d39c:	0800ea75 	.word	0x0800ea75
 800d3a0:	0800ea91 	.word	0x0800ea91
 800d3a4:	0800eaad 	.word	0x0800eaad
 800d3a8:	0800eac9 	.word	0x0800eac9
 800d3ac:	0800eac9 	.word	0x0800eac9
 800d3b0:	0800eac9 	.word	0x0800eac9
 800d3b4:	0800eac9 	.word	0x0800eac9
 800d3b8:	0800eac9 	.word	0x0800eac9
 800d3bc:	0800eac9 	.word	0x0800eac9
 800d3c0:	0800eac9 	.word	0x0800eac9
 800d3c4:	0800eac9 	.word	0x0800eac9
 800d3c8:	0800eac9 	.word	0x0800eac9
 800d3cc:	0800eac9 	.word	0x0800eac9
 800d3d0:	0800eac9 	.word	0x0800eac9
 800d3d4:	0800eac9 	.word	0x0800eac9
 800d3d8:	0800eac9 	.word	0x0800eac9
 800d3dc:	0800eac9 	.word	0x0800eac9
 800d3e0:	0800eac9 	.word	0x0800eac9
 800d3e4:	0800eac9 	.word	0x0800eac9
 800d3e8:	0800eac9 	.word	0x0800eac9
 800d3ec:	0800eac9 	.word	0x0800eac9
 800d3f0:	0800eac9 	.word	0x0800eac9
 800d3f4:	0800eac9 	.word	0x0800eac9
 800d3f8:	0800eac9 	.word	0x0800eac9
 800d3fc:	0800eac9 	.word	0x0800eac9
 800d400:	0800eac9 	.word	0x0800eac9
 800d404:	0800eac9 	.word	0x0800eac9
 800d408:	0800eac9 	.word	0x0800eac9
 800d40c:	0800eac9 	.word	0x0800eac9
 800d410:	0800eac9 	.word	0x0800eac9
 800d414:	0800eac9 	.word	0x0800eac9
 800d418:	0800eac9 	.word	0x0800eac9
 800d41c:	0800eac9 	.word	0x0800eac9
 800d420:	0800eac9 	.word	0x0800eac9
 800d424:	0800eac9 	.word	0x0800eac9
 800d428:	0800eac9 	.word	0x0800eac9
 800d42c:	0800eac9 	.word	0x0800eac9
 800d430:	0800eac9 	.word	0x0800eac9
 800d434:	0800e25b 	.word	0x0800e25b
 800d438:	2b5e      	cmp	r3, #94	@ 0x5e
 800d43a:	f201 8345 	bhi.w	800eac8 <phhalHw_Pn5180_SetConfig+0x1800>
 800d43e:	a201      	add	r2, pc, #4	@ (adr r2, 800d444 <phhalHw_Pn5180_SetConfig+0x17c>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d5d9 	.word	0x0800d5d9
 800d448:	0800d651 	.word	0x0800d651
 800d44c:	0800d651 	.word	0x0800d651
 800d450:	0800d617 	.word	0x0800d617
 800d454:	0800eac9 	.word	0x0800eac9
 800d458:	0800d699 	.word	0x0800d699
 800d45c:	0800d919 	.word	0x0800d919
 800d460:	0800d9f3 	.word	0x0800d9f3
 800d464:	0800d7e1 	.word	0x0800d7e1
 800d468:	0800dd53 	.word	0x0800dd53
 800d46c:	0800df33 	.word	0x0800df33
 800d470:	0800dad3 	.word	0x0800dad3
 800d474:	0800d5d9 	.word	0x0800d5d9
 800d478:	0800e085 	.word	0x0800e085
 800d47c:	0800e0df 	.word	0x0800e0df
 800d480:	0800e139 	.word	0x0800e139
 800d484:	0800eac9 	.word	0x0800eac9
 800d488:	0800eac9 	.word	0x0800eac9
 800d48c:	0800eac9 	.word	0x0800eac9
 800d490:	0800e209 	.word	0x0800e209
 800d494:	0800e221 	.word	0x0800e221
 800d498:	0800e44b 	.word	0x0800e44b
 800d49c:	0800e65d 	.word	0x0800e65d
 800d4a0:	0800e795 	.word	0x0800e795
 800d4a4:	0800d841 	.word	0x0800d841
 800d4a8:	0800eac9 	.word	0x0800eac9
 800d4ac:	0800eac9 	.word	0x0800eac9
 800d4b0:	0800eac9 	.word	0x0800eac9
 800d4b4:	0800eac9 	.word	0x0800eac9
 800d4b8:	0800eac9 	.word	0x0800eac9
 800d4bc:	0800eac9 	.word	0x0800eac9
 800d4c0:	0800eac9 	.word	0x0800eac9
 800d4c4:	0800e22b 	.word	0x0800e22b
 800d4c8:	0800eac9 	.word	0x0800eac9
 800d4cc:	0800eac9 	.word	0x0800eac9
 800d4d0:	0800eac9 	.word	0x0800eac9
 800d4d4:	0800eac9 	.word	0x0800eac9
 800d4d8:	0800eac9 	.word	0x0800eac9
 800d4dc:	0800eac9 	.word	0x0800eac9
 800d4e0:	0800eac9 	.word	0x0800eac9
 800d4e4:	0800eac9 	.word	0x0800eac9
 800d4e8:	0800eac9 	.word	0x0800eac9
 800d4ec:	0800eac9 	.word	0x0800eac9
 800d4f0:	0800eac9 	.word	0x0800eac9
 800d4f4:	0800eac9 	.word	0x0800eac9
 800d4f8:	0800eac9 	.word	0x0800eac9
 800d4fc:	0800dc1b 	.word	0x0800dc1b
 800d500:	0800dc57 	.word	0x0800dc57
 800d504:	0800dc7d 	.word	0x0800dc7d
 800d508:	0800eac9 	.word	0x0800eac9
 800d50c:	0800eac9 	.word	0x0800eac9
 800d510:	0800dcc1 	.word	0x0800dcc1
 800d514:	0800dd05 	.word	0x0800dd05
 800d518:	0800e99f 	.word	0x0800e99f
 800d51c:	0800eac9 	.word	0x0800eac9
 800d520:	0800eac9 	.word	0x0800eac9
 800d524:	0800eac9 	.word	0x0800eac9
 800d528:	0800eac9 	.word	0x0800eac9
 800d52c:	0800eac9 	.word	0x0800eac9
 800d530:	0800eac9 	.word	0x0800eac9
 800d534:	0800eac9 	.word	0x0800eac9
 800d538:	0800eac9 	.word	0x0800eac9
 800d53c:	0800eac9 	.word	0x0800eac9
 800d540:	0800eac9 	.word	0x0800eac9
 800d544:	0800eac9 	.word	0x0800eac9
 800d548:	0800eac9 	.word	0x0800eac9
 800d54c:	0800eac9 	.word	0x0800eac9
 800d550:	0800eac9 	.word	0x0800eac9
 800d554:	0800eac9 	.word	0x0800eac9
 800d558:	0800eac9 	.word	0x0800eac9
 800d55c:	0800eac9 	.word	0x0800eac9
 800d560:	0800eac9 	.word	0x0800eac9
 800d564:	0800eac9 	.word	0x0800eac9
 800d568:	0800eac9 	.word	0x0800eac9
 800d56c:	0800eac9 	.word	0x0800eac9
 800d570:	0800eac9 	.word	0x0800eac9
 800d574:	0800eac9 	.word	0x0800eac9
 800d578:	0800eac9 	.word	0x0800eac9
 800d57c:	0800eac9 	.word	0x0800eac9
 800d580:	0800eac9 	.word	0x0800eac9
 800d584:	0800eac9 	.word	0x0800eac9
 800d588:	0800e2fb 	.word	0x0800e2fb
 800d58c:	0800eac9 	.word	0x0800eac9
 800d590:	0800e317 	.word	0x0800e317
 800d594:	0800eac9 	.word	0x0800eac9
 800d598:	0800e93f 	.word	0x0800e93f
 800d59c:	0800e365 	.word	0x0800e365
 800d5a0:	0800e381 	.word	0x0800e381
 800d5a4:	0800eac9 	.word	0x0800eac9
 800d5a8:	0800eac9 	.word	0x0800eac9
 800d5ac:	0800e279 	.word	0x0800e279
 800d5b0:	0800eac9 	.word	0x0800eac9
 800d5b4:	0800e3dd 	.word	0x0800e3dd
 800d5b8:	0800e3fb 	.word	0x0800e3fb
 800d5bc:	0800e287 	.word	0x0800e287
 800d5c0:	f248 0250 	movw	r2, #32848	@ 0x8050
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	f301 827f 	bgt.w	800eac8 <phhalHw_Pn5180_SetConfig+0x1800>
 800d5ca:	f248 0210 	movw	r2, #32784	@ 0x8010
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	f6bf aea7 	bge.w	800d322 <phhalHw_Pn5180_SetConfig+0x5a>
 800d5d4:	f001 ba78 	b.w	800eac8 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 800d5d8:	887a      	ldrh	r2, [r7, #2]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	322c      	adds	r2, #44	@ 0x2c
 800d5de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d5e2:	883a      	ldrh	r2, [r7, #0]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	f001 8272 	beq.w	800eace <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800d5ea:	883a      	ldrh	r2, [r7, #0]
 800d5ec:	887b      	ldrh	r3, [r7, #2]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f003 fe47 	bl	8011284 <phhalHw_Pn5180_SetConfig_Int>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d5fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <phhalHw_Pn5180_SetConfig+0x33e>
 800d600:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d602:	f001 baa4 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d606:	887a      	ldrh	r2, [r7, #2]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	322c      	adds	r2, #44	@ 0x2c
 800d60c:	8839      	ldrh	r1, [r7, #0]
 800d60e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d612:	f001 ba5c 	b.w	800eace <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d616:	887a      	ldrh	r2, [r7, #2]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	322c      	adds	r2, #44	@ 0x2c
 800d61c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d620:	883a      	ldrh	r2, [r7, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d105      	bne.n	800d632 <phhalHw_Pn5180_SetConfig+0x36a>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	f001 8250 	beq.w	800ead2 <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 800d632:	883b      	ldrh	r3, [r7, #0]
 800d634:	2b07      	cmp	r3, #7
 800d636:	d903      	bls.n	800d640 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d638:	f240 2321 	movw	r3, #545	@ 0x221
 800d63c:	f001 ba87 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d640:	887a      	ldrh	r2, [r7, #2]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	322c      	adds	r2, #44	@ 0x2c
 800d646:	8839      	ldrh	r1, [r7, #0]
 800d648:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d64c:	f001 ba41 	b.w	800ead2 <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d650:	887a      	ldrh	r2, [r7, #2]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	322c      	adds	r2, #44	@ 0x2c
 800d656:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d65a:	883a      	ldrh	r2, [r7, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d105      	bne.n	800d66c <phhalHw_Pn5180_SetConfig+0x3a4>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d666:	2b01      	cmp	r3, #1
 800d668:	f001 8235 	beq.w	800ead6 <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800d66c:	883a      	ldrh	r2, [r7, #0]
 800d66e:	887b      	ldrh	r3, [r7, #2]
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f003 fe06 	bl	8011284 <phhalHw_Pn5180_SetConfig_Int>
 800d678:	4603      	mov	r3, r0
 800d67a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d67c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <phhalHw_Pn5180_SetConfig+0x3c0>
 800d682:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d684:	f001 ba63 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d688:	887a      	ldrh	r2, [r7, #2]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	322c      	adds	r2, #44	@ 0x2c
 800d68e:	8839      	ldrh	r1, [r7, #0]
 800d690:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 800d694:	f001 ba1f 	b.w	800ead6 <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d698:	887a      	ldrh	r2, [r7, #2]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	322c      	adds	r2, #44	@ 0x2c
 800d69e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d6a2:	883a      	ldrh	r2, [r7, #0]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d105      	bne.n	800d6b4 <phhalHw_Pn5180_SetConfig+0x3ec>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	f001 8213 	beq.w	800eada <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 800d6b4:	883b      	ldrh	r3, [r7, #0]
 800d6b6:	2b07      	cmp	r3, #7
 800d6b8:	d903      	bls.n	800d6c2 <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d6ba:	f240 2321 	movw	r3, #545	@ 0x221
 800d6be:	f001 ba46 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 800d6c6:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 800d6ca:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800d6cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6ce:	1c5a      	adds	r2, r3, #1
 800d6d0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d6d2:	3338      	adds	r3, #56	@ 0x38
 800d6d4:	443b      	add	r3, r7
 800d6d6:	2212      	movs	r2, #18
 800d6d8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800d6dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d6e2:	3338      	adds	r3, #56	@ 0x38
 800d6e4:	443b      	add	r3, r7
 800d6e6:	2203      	movs	r2, #3
 800d6e8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6f0:	1c59      	adds	r1, r3, #1
 800d6f2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d6f4:	b2d2      	uxtb	r2, r2
 800d6f6:	3338      	adds	r3, #56	@ 0x38
 800d6f8:	443b      	add	r3, r7
 800d6fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	0a1a      	lsrs	r2, r3, #8
 800d702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d704:	1c59      	adds	r1, r3, #1
 800d706:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d708:	b2d2      	uxtb	r2, r2
 800d70a:	3338      	adds	r3, #56	@ 0x38
 800d70c:	443b      	add	r3, r7
 800d70e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	0c1a      	lsrs	r2, r3, #16
 800d716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d718:	1c59      	adds	r1, r3, #1
 800d71a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d71c:	b2d2      	uxtb	r2, r2
 800d71e:	3338      	adds	r3, #56	@ 0x38
 800d720:	443b      	add	r3, r7
 800d722:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	0e1a      	lsrs	r2, r3, #24
 800d72a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d72c:	1c59      	adds	r1, r3, #1
 800d72e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d730:	b2d2      	uxtb	r2, r2
 800d732:	3338      	adds	r3, #56	@ 0x38
 800d734:	443b      	add	r3, r7
 800d736:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 800d73a:	883b      	ldrh	r3, [r7, #0]
 800d73c:	019b      	lsls	r3, r3, #6
 800d73e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800d742:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800d744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d74a:	3338      	adds	r3, #56	@ 0x38
 800d74c:	443b      	add	r3, r7
 800d74e:	2212      	movs	r2, #18
 800d750:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800d754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800d75a:	3338      	adds	r3, #56	@ 0x38
 800d75c:	443b      	add	r3, r7
 800d75e:	2202      	movs	r2, #2
 800d760:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d768:	1c59      	adds	r1, r3, #1
 800d76a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d76c:	b2d2      	uxtb	r2, r2
 800d76e:	3338      	adds	r3, #56	@ 0x38
 800d770:	443b      	add	r3, r7
 800d772:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	0a1a      	lsrs	r2, r3, #8
 800d77a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d77c:	1c59      	adds	r1, r3, #1
 800d77e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d780:	b2d2      	uxtb	r2, r2
 800d782:	3338      	adds	r3, #56	@ 0x38
 800d784:	443b      	add	r3, r7
 800d786:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	0c1a      	lsrs	r2, r3, #16
 800d78e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d790:	1c59      	adds	r1, r3, #1
 800d792:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d794:	b2d2      	uxtb	r2, r2
 800d796:	3338      	adds	r3, #56	@ 0x38
 800d798:	443b      	add	r3, r7
 800d79a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	0e1a      	lsrs	r2, r3, #24
 800d7a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7a4:	1c59      	adds	r1, r3, #1
 800d7a6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	3338      	adds	r3, #56	@ 0x38
 800d7ac:	443b      	add	r3, r7
 800d7ae:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800d7b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7b4:	f107 030c 	add.w	r3, r7, #12
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f002 fcf0 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d7c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <phhalHw_Pn5180_SetConfig+0x508>
 800d7ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7cc:	f001 b9bf 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d7d0:	887a      	ldrh	r2, [r7, #2]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	322c      	adds	r2, #44	@ 0x2c
 800d7d6:	8839      	ldrh	r1, [r7, #0]
 800d7d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d7dc:	f001 b97d 	b.w	800eada <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 800d7e0:	887a      	ldrh	r2, [r7, #2]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	322c      	adds	r2, #44	@ 0x2c
 800d7e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d7ea:	883a      	ldrh	r2, [r7, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	f001 8176 	beq.w	800eade <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 800d7f2:	883b      	ldrh	r3, [r7, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10d      	bne.n	800d814 <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 800d7f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7fc:	2112      	movs	r1, #18
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f002 fbe2 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800d804:	4603      	mov	r3, r0
 800d806:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d808:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d010      	beq.n	800d830 <phhalHw_Pn5180_SetConfig+0x568>
 800d80e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d810:	f001 b99d 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 800d814:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800d818:	2112      	movs	r1, #18
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f002 fc4a 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d820:	4603      	mov	r3, r0
 800d822:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <phhalHw_Pn5180_SetConfig+0x568>
 800d82a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d82c:	f001 b98f 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d830:	887a      	ldrh	r2, [r7, #2]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	322c      	adds	r2, #44	@ 0x2c
 800d836:	8839      	ldrh	r1, [r7, #0]
 800d838:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800d83c:	f001 b94f 	b.w	800eade <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 800d840:	883b      	ldrh	r3, [r7, #0]
 800d842:	f240 228a 	movw	r2, #650	@ 0x28a
 800d846:	4293      	cmp	r3, r2
 800d848:	d903      	bls.n	800d852 <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d84a:	f240 2321 	movw	r3, #545	@ 0x221
 800d84e:	f001 b97e 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 800d852:	883a      	ldrh	r2, [r7, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 800d858:	f04f 0300 	mov.w	r3, #0
 800d85c:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800d85e:	237f      	movs	r3, #127	@ 0x7f
 800d860:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 800d862:	883b      	ldrh	r3, [r7, #0]
 800d864:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d868:	fb02 f303 	mul.w	r3, r2, r3
 800d86c:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d043      	beq.n	800d8fc <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	ee07 3a90 	vmov	s15, r3
 800d87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d87e:	ee17 0a90 	vmov	r0, s15
 800d882:	f7f2 fe61 	bl	8000548 <__aeabi_f2d>
 800d886:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	f7f2 feb3 	bl	80005f8 <__aeabi_dmul>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	4614      	mov	r4, r2
 800d898:	461d      	mov	r5, r3
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	ee07 3a90 	vmov	s15, r3
 800d8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a4:	ee17 0a90 	vmov	r0, s15
 800d8a8:	f7f2 fe4e 	bl	8000548 <__aeabi_f2d>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f7f2 ffca 	bl	800084c <__aeabi_ddiv>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4619      	mov	r1, r3
 800d8c0:	f7f3 f972 	bl	8000ba8 <__aeabi_d2f>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 800d8c8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d8cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8d0:	ee17 3a90 	vmov	r3, s15
 800d8d4:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	021b      	lsls	r3, r3, #8
 800d8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800d8e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8e2:	2117      	movs	r1, #23
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f7fe ff85 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d8ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f001 80f6 	beq.w	800eae2 <phhalHw_Pn5180_SetConfig+0x181a>
 800d8f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d8f8:	f001 b929 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800d8fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8fe:	2117      	movs	r1, #23
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7fe ff77 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
 800d906:	4603      	mov	r3, r0
 800d908:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d90a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f001 80e8 	beq.w	800eae2 <phhalHw_Pn5180_SetConfig+0x181a>
 800d912:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d914:	f001 b91b 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d918:	887a      	ldrh	r2, [r7, #2]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	322c      	adds	r2, #44	@ 0x2c
 800d91e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d922:	883a      	ldrh	r2, [r7, #0]
 800d924:	429a      	cmp	r2, r3
 800d926:	d105      	bne.n	800d934 <phhalHw_Pn5180_SetConfig+0x66c>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d92e:	2b01      	cmp	r3, #1
 800d930:	f001 80d9 	beq.w	800eae6 <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800d934:	887a      	ldrh	r2, [r7, #2]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	322c      	adds	r2, #44	@ 0x2c
 800d93a:	8839      	ldrh	r1, [r7, #0]
 800d93c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800d940:	237f      	movs	r3, #127	@ 0x7f
 800d942:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800d944:	883b      	ldrh	r3, [r7, #0]
 800d946:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d043      	beq.n	800d9d6 <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	ee07 3a90 	vmov	s15, r3
 800d954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d958:	ee17 0a90 	vmov	r0, s15
 800d95c:	f7f2 fdf4 	bl	8000548 <__aeabi_f2d>
 800d960:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	f7f2 fe46 	bl	80005f8 <__aeabi_dmul>
 800d96c:	4602      	mov	r2, r0
 800d96e:	460b      	mov	r3, r1
 800d970:	4614      	mov	r4, r2
 800d972:	461d      	mov	r5, r3
 800d974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d976:	ee07 3a90 	vmov	s15, r3
 800d97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97e:	ee17 0a90 	vmov	r0, s15
 800d982:	f7f2 fde1 	bl	8000548 <__aeabi_f2d>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4620      	mov	r0, r4
 800d98c:	4629      	mov	r1, r5
 800d98e:	f7f2 ff5d 	bl	800084c <__aeabi_ddiv>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4610      	mov	r0, r2
 800d998:	4619      	mov	r1, r3
 800d99a:	f7f3 f905 	bl	8000ba8 <__aeabi_d2f>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800d9a2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800d9a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9aa:	ee17 3a90 	vmov	r3, s15
 800d9ae:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800d9ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9bc:	2111      	movs	r1, #17
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f002 fa8c 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d9c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f001 808b 	beq.w	800eae6 <phhalHw_Pn5180_SetConfig+0x181e>
 800d9d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9d2:	f001 b8bc 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800d9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9d8:	2111      	movs	r1, #17
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f002 fa7e 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d9e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f001 807d 	beq.w	800eae6 <phhalHw_Pn5180_SetConfig+0x181e>
 800d9ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d9ee:	f001 b8ae 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800d9f2:	887a      	ldrh	r2, [r7, #2]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	322c      	adds	r2, #44	@ 0x2c
 800d9f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d9fc:	883a      	ldrh	r2, [r7, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d105      	bne.n	800da0e <phhalHw_Pn5180_SetConfig+0x746>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800da08:	2b01      	cmp	r3, #1
 800da0a:	f001 806e 	beq.w	800eaea <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800da0e:	887a      	ldrh	r2, [r7, #2]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	322c      	adds	r2, #44	@ 0x2c
 800da14:	8839      	ldrh	r1, [r7, #0]
 800da16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 800da1a:	f04f 0300 	mov.w	r3, #0
 800da1e:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800da20:	237f      	movs	r3, #127	@ 0x7f
 800da22:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800da24:	883b      	ldrh	r3, [r7, #0]
 800da26:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d043      	beq.n	800dab6 <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da38:	ee17 0a90 	vmov	r0, s15
 800da3c:	f7f2 fd84 	bl	8000548 <__aeabi_f2d>
 800da40:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 800da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da48:	f7f2 fdd6 	bl	80005f8 <__aeabi_dmul>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	4614      	mov	r4, r2
 800da52:	461d      	mov	r5, r3
 800da54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da56:	ee07 3a90 	vmov	s15, r3
 800da5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da5e:	ee17 0a90 	vmov	r0, s15
 800da62:	f7f2 fd71 	bl	8000548 <__aeabi_f2d>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	4620      	mov	r0, r4
 800da6c:	4629      	mov	r1, r5
 800da6e:	f7f2 feed 	bl	800084c <__aeabi_ddiv>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4610      	mov	r0, r2
 800da78:	4619      	mov	r1, r3
 800da7a:	f7f3 f895 	bl	8000ba8 <__aeabi_d2f>
 800da7e:	4603      	mov	r3, r0
 800da80:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800da82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800da86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da8a:	ee17 3a90 	vmov	r3, s15
 800da8e:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	021b      	lsls	r3, r3, #8
 800da94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da96:	4313      	orrs	r3, r2
 800da98:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800da9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da9c:	2117      	movs	r1, #23
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7fe fea8 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
 800daa4:	4603      	mov	r3, r0
 800daa6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800daa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f001 801d 	beq.w	800eaea <phhalHw_Pn5180_SetConfig+0x1822>
 800dab0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dab2:	f001 b84c 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800dab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dab8:	2117      	movs	r1, #23
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7fe fe9a 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
 800dac0:	4603      	mov	r3, r0
 800dac2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dac4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f001 800f 	beq.w	800eaea <phhalHw_Pn5180_SetConfig+0x1822>
 800dacc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dace:	f001 b83e 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800dad2:	887a      	ldrh	r2, [r7, #2]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	322c      	adds	r2, #44	@ 0x2c
 800dad8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dadc:	883a      	ldrh	r2, [r7, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d105      	bne.n	800daee <phhalHw_Pn5180_SetConfig+0x826>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dae8:	2b01      	cmp	r3, #1
 800daea:	f001 8000 	beq.w	800eaee <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 800daee:	883b      	ldrh	r3, [r7, #0]
 800daf0:	2b1f      	cmp	r3, #31
 800daf2:	d903      	bls.n	800dafc <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800daf4:	f240 2321 	movw	r3, #545	@ 0x221
 800daf8:	f001 b829 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800dafc:	2300      	movs	r3, #0
 800dafe:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 800db00:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 800db04:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800db06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800db0c:	3338      	adds	r3, #56	@ 0x38
 800db0e:	443b      	add	r3, r7
 800db10:	2220      	movs	r2, #32
 800db12:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800db16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db18:	1c5a      	adds	r2, r3, #1
 800db1a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800db1c:	3338      	adds	r3, #56	@ 0x38
 800db1e:	443b      	add	r3, r7
 800db20:	2203      	movs	r2, #3
 800db22:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db2a:	1c59      	adds	r1, r3, #1
 800db2c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db2e:	b2d2      	uxtb	r2, r2
 800db30:	3338      	adds	r3, #56	@ 0x38
 800db32:	443b      	add	r3, r7
 800db34:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	0a1a      	lsrs	r2, r3, #8
 800db3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db3e:	1c59      	adds	r1, r3, #1
 800db40:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db42:	b2d2      	uxtb	r2, r2
 800db44:	3338      	adds	r3, #56	@ 0x38
 800db46:	443b      	add	r3, r7
 800db48:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	0c1a      	lsrs	r2, r3, #16
 800db50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db52:	1c59      	adds	r1, r3, #1
 800db54:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db56:	b2d2      	uxtb	r2, r2
 800db58:	3338      	adds	r3, #56	@ 0x38
 800db5a:	443b      	add	r3, r7
 800db5c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	0e1a      	lsrs	r2, r3, #24
 800db64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db66:	1c59      	adds	r1, r3, #1
 800db68:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800db6a:	b2d2      	uxtb	r2, r2
 800db6c:	3338      	adds	r3, #56	@ 0x38
 800db6e:	443b      	add	r3, r7
 800db70:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 800db74:	883b      	ldrh	r3, [r7, #0]
 800db76:	035b      	lsls	r3, r3, #13
 800db78:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 800db7c:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800db7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db80:	1c5a      	adds	r2, r3, #1
 800db82:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800db84:	3338      	adds	r3, #56	@ 0x38
 800db86:	443b      	add	r3, r7
 800db88:	2220      	movs	r2, #32
 800db8a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800db8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800db94:	3338      	adds	r3, #56	@ 0x38
 800db96:	443b      	add	r3, r7
 800db98:	2202      	movs	r2, #2
 800db9a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dba2:	1c59      	adds	r1, r3, #1
 800dba4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dba6:	b2d2      	uxtb	r2, r2
 800dba8:	3338      	adds	r3, #56	@ 0x38
 800dbaa:	443b      	add	r3, r7
 800dbac:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	0a1a      	lsrs	r2, r3, #8
 800dbb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbb6:	1c59      	adds	r1, r3, #1
 800dbb8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dbba:	b2d2      	uxtb	r2, r2
 800dbbc:	3338      	adds	r3, #56	@ 0x38
 800dbbe:	443b      	add	r3, r7
 800dbc0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	0c1a      	lsrs	r2, r3, #16
 800dbc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbca:	1c59      	adds	r1, r3, #1
 800dbcc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dbce:	b2d2      	uxtb	r2, r2
 800dbd0:	3338      	adds	r3, #56	@ 0x38
 800dbd2:	443b      	add	r3, r7
 800dbd4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	0e1a      	lsrs	r2, r3, #24
 800dbdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbde:	1c59      	adds	r1, r3, #1
 800dbe0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800dbe2:	b2d2      	uxtb	r2, r2
 800dbe4:	3338      	adds	r3, #56	@ 0x38
 800dbe6:	443b      	add	r3, r7
 800dbe8:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800dbec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dbee:	f107 030c 	add.w	r3, r7, #12
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f002 fad3 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dbfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <phhalHw_Pn5180_SetConfig+0x942>
 800dc04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc06:	f000 bfa2 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800dc0a:	887a      	ldrh	r2, [r7, #2]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	322c      	adds	r2, #44	@ 0x2c
 800dc10:	8839      	ldrh	r1, [r7, #0]
 800dc12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800dc16:	f000 bf6a 	b.w	800eaee <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 800dc1a:	883b      	ldrh	r3, [r7, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 8768 	beq.w	800eaf2 <phhalHw_Pn5180_SetConfig+0x182a>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	f040 8762 	bne.w	800eaf2 <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 800dc2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dc32:	2100      	movs	r1, #0
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f002 fa3d 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dc3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <phhalHw_Pn5180_SetConfig+0x982>
 800dc44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc46:	f000 bf82 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 800dc52:	f000 bf4e 	b.w	800eaf2 <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 800dc56:	883b      	ldrh	r3, [r7, #0]
 800dc58:	3302      	adds	r3, #2
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	f040 8745 	bne.w	800eaf6 <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800dc70:	3301      	adds	r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 800dc78:	f000 bf3d 	b.w	800eaf6 <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800dc7c:	f107 0118 	add.w	r1, r7, #24
 800dc80:	f107 021c 	add.w	r2, r7, #28
 800dc84:	f107 031a 	add.w	r3, r7, #26
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	2101      	movs	r1, #1
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f003 f931 	bl	8010ef6 <phhalHw_Pn5180_GetRxBuffer>
 800dc94:	4603      	mov	r3, r0
 800dc96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dc98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d002      	beq.n	800dca4 <phhalHw_Pn5180_SetConfig+0x9dc>
 800dc9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dca0:	f000 bf55 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	8b1b      	ldrh	r3, [r3, #24]
 800dca8:	883a      	ldrh	r2, [r7, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d303      	bcc.n	800dcb6 <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dcae:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800dcb2:	f000 bf4c 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	883a      	ldrh	r2, [r7, #0]
 800dcba:	83da      	strh	r2, [r3, #30]
        break;
 800dcbc:	f000 bf46 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800dcc0:	f107 0118 	add.w	r1, r7, #24
 800dcc4:	f107 021c 	add.w	r2, r7, #28
 800dcc8:	f107 031a 	add.w	r3, r7, #26
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	2101      	movs	r1, #1
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f003 f8d3 	bl	8010e7e <phhalHw_Pn5180_GetTxBuffer>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dcdc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <phhalHw_Pn5180_SetConfig+0xa20>
 800dce2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dce4:	f000 bf33 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	8a1b      	ldrh	r3, [r3, #16]
 800dcec:	883a      	ldrh	r2, [r7, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d903      	bls.n	800dcfa <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dcf2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800dcf6:	f000 bf2a 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	883a      	ldrh	r2, [r7, #0]
 800dcfe:	825a      	strh	r2, [r3, #18]
        break;
 800dd00:	f000 bf24 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800dd04:	f107 0118 	add.w	r1, r7, #24
 800dd08:	f107 021c 	add.w	r2, r7, #28
 800dd0c:	f107 031a 	add.w	r3, r7, #26
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	460b      	mov	r3, r1
 800dd14:	2101      	movs	r1, #1
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f003 f8b1 	bl	8010e7e <phhalHw_Pn5180_GetTxBuffer>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dd20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <phhalHw_Pn5180_SetConfig+0xa64>
 800dd26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd28:	f000 bf11 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	8a1b      	ldrh	r3, [r3, #16]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d303      	bcc.n	800dd40 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800dd38:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800dd3c:	f000 bf07 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800dd46:	4413      	add	r3, r2
 800dd48:	883a      	ldrh	r2, [r7, #0]
 800dd4a:	b2d2      	uxtb	r2, r2
 800dd4c:	701a      	strb	r2, [r3, #0]
        break;
 800dd4e:	f000 befd 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800dd52:	887a      	ldrh	r2, [r7, #2]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	322c      	adds	r2, #44	@ 0x2c
 800dd58:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dd5c:	883a      	ldrh	r2, [r7, #0]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d105      	bne.n	800dd6e <phhalHw_Pn5180_SetConfig+0xaa6>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	f000 86c6 	beq.w	800eafa <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800dd6e:	883b      	ldrh	r3, [r7, #0]
 800dd70:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dd74:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800dd76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd78:	0a1b      	lsrs	r3, r3, #8
 800dd7a:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800dd7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d011      	beq.n	800dda6 <phhalHw_Pn5180_SetConfig+0xade>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dd88:	461a      	mov	r2, r3
 800dd8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d00a      	beq.n	800dda6 <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800dd90:	883b      	ldrh	r3, [r7, #0]
 800dd92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd9a:	d004      	beq.n	800dda6 <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800dd9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800dda6:	883b      	ldrh	r3, [r7, #0]
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d104      	bne.n	800ddc0 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 800ddb6:	883b      	ldrh	r3, [r7, #0]
 800ddb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800ddba:	230b      	movs	r3, #11
 800ddbc:	803b      	strh	r3, [r7, #0]
 800ddbe:	e00f      	b.n	800dde0 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ddc6:	8839      	ldrh	r1, [r7, #0]
 800ddc8:	22ff      	movs	r2, #255	@ 0xff
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f003 fcdc 	bl	8011788 <phhalHw_Pn5180_SetCardMode>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ddd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <phhalHw_Pn5180_SetConfig+0xb18>
 800ddda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dddc:	f000 beb7 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800dde0:	887a      	ldrh	r2, [r7, #2]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	322c      	adds	r2, #44	@ 0x2c
 800dde6:	8839      	ldrh	r1, [r7, #0]
 800dde8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ddf2:	2b04      	cmp	r3, #4
 800ddf4:	d11d      	bne.n	800de32 <phhalHw_Pn5180_SetConfig+0xb6a>
 800ddf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ddf8:	2b0b      	cmp	r3, #11
 800ddfa:	d11a      	bne.n	800de32 <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 800ddfc:	2204      	movs	r2, #4
 800ddfe:	2142      	movs	r1, #66	@ 0x42
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f002 f86b 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800de06:	4603      	mov	r3, r0
 800de08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <phhalHw_Pn5180_SetConfig+0xb4e>
 800de10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de12:	f000 be9c 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 800de16:	2243      	movs	r2, #67	@ 0x43
 800de18:	213b      	movs	r1, #59	@ 0x3b
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f002 f85e 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800de20:	4603      	mov	r3, r0
 800de22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8081 	beq.w	800df2e <phhalHw_Pn5180_SetConfig+0xc66>
 800de2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de2e:	f000 be8e 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de38:	2b04      	cmp	r3, #4
 800de3a:	d123      	bne.n	800de84 <phhalHw_Pn5180_SetConfig+0xbbc>
 800de3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de3e:	2b1b      	cmp	r3, #27
 800de40:	d120      	bne.n	800de84 <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 800de42:	2205      	movs	r2, #5
 800de44:	2142      	movs	r1, #66	@ 0x42
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f002 f848 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800de4c:	4603      	mov	r3, r0
 800de4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <phhalHw_Pn5180_SetConfig+0xb94>
 800de56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de58:	f000 be79 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 800de5c:	2244      	movs	r2, #68	@ 0x44
 800de5e:	213b      	movs	r1, #59	@ 0x3b
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f002 f83b 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800de66:	4603      	mov	r3, r0
 800de68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800de6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <phhalHw_Pn5180_SetConfig+0xbae>
 800de70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de72:	f000 be6c 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800de76:	887a      	ldrh	r2, [r7, #2]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	322c      	adds	r2, #44	@ 0x2c
 800de7c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800de7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800de82:	e054      	b.n	800df2e <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de8a:	2b04      	cmp	r3, #4
 800de8c:	d123      	bne.n	800ded6 <phhalHw_Pn5180_SetConfig+0xc0e>
 800de8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800de90:	2b00      	cmp	r3, #0
 800de92:	d120      	bne.n	800ded6 <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 800de94:	2206      	movs	r2, #6
 800de96:	2142      	movs	r1, #66	@ 0x42
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f002 f81f 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800de9e:	4603      	mov	r3, r0
 800dea0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <phhalHw_Pn5180_SetConfig+0xbe6>
 800dea8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800deaa:	f000 be50 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 800deae:	2245      	movs	r2, #69	@ 0x45
 800deb0:	213b      	movs	r1, #59	@ 0x3b
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f002 f812 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800deb8:	4603      	mov	r3, r0
 800deba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800debc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <phhalHw_Pn5180_SetConfig+0xc00>
 800dec2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dec4:	f000 be43 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800dec8:	887a      	ldrh	r2, [r7, #2]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	322c      	adds	r2, #44	@ 0x2c
 800dece:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800ded0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800ded4:	e02b      	b.n	800df2e <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dedc:	2b04      	cmp	r3, #4
 800dede:	f040 860c 	bne.w	800eafa <phhalHw_Pn5180_SetConfig+0x1832>
 800dee2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	f040 8608 	bne.w	800eafa <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 800deea:	2207      	movs	r2, #7
 800deec:	2142      	movs	r1, #66	@ 0x42
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f001 fff4 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800def4:	4603      	mov	r3, r0
 800def6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800def8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <phhalHw_Pn5180_SetConfig+0xc3c>
 800defe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df00:	f000 be25 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 800df04:	2246      	movs	r2, #70	@ 0x46
 800df06:	213b      	movs	r1, #59	@ 0x3b
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f001 ffe7 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800df0e:	4603      	mov	r3, r0
 800df10:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800df12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <phhalHw_Pn5180_SetConfig+0xc56>
 800df18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df1a:	f000 be18 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800df1e:	887a      	ldrh	r2, [r7, #2]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	322c      	adds	r2, #44	@ 0x2c
 800df24:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800df26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 800df2a:	f000 bde6 	b.w	800eafa <phhalHw_Pn5180_SetConfig+0x1832>
 800df2e:	f000 bde4 	b.w	800eafa <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800df32:	887a      	ldrh	r2, [r7, #2]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	322c      	adds	r2, #44	@ 0x2c
 800df38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800df3c:	883a      	ldrh	r2, [r7, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d105      	bne.n	800df4e <phhalHw_Pn5180_SetConfig+0xc86>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800df48:	2b01      	cmp	r3, #1
 800df4a:	f000 85d8 	beq.w	800eafe <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800df4e:	883b      	ldrh	r3, [r7, #0]
 800df50:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800df54:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800df56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df58:	0a1b      	lsrs	r3, r3, #8
 800df5a:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800df5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d011      	beq.n	800df86 <phhalHw_Pn5180_SetConfig+0xcbe>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df68:	461a      	mov	r2, r3
 800df6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d00a      	beq.n	800df86 <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800df70:	883b      	ldrh	r3, [r7, #0]
 800df72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df7a:	d004      	beq.n	800df86 <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800df7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800df86:	883b      	ldrh	r3, [r7, #0]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df92:	2b04      	cmp	r3, #4
 800df94:	d106      	bne.n	800dfa4 <phhalHw_Pn5180_SetConfig+0xcdc>
 800df96:	883b      	ldrh	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d103      	bne.n	800dfa4 <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 800df9c:	883b      	ldrh	r3, [r7, #0]
 800df9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 800dfa0:	230f      	movs	r3, #15
 800dfa2:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800dfaa:	883a      	ldrh	r2, [r7, #0]
 800dfac:	21ff      	movs	r1, #255	@ 0xff
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f003 fbea 	bl	8011788 <phhalHw_Pn5180_SetCardMode>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dfb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d002      	beq.n	800dfc4 <phhalHw_Pn5180_SetConfig+0xcfc>
 800dfbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfc0:	f000 bdc5 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800dfc4:	887a      	ldrh	r2, [r7, #2]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	322c      	adds	r2, #44	@ 0x2c
 800dfca:	8839      	ldrh	r1, [r7, #0]
 800dfcc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dfd6:	2b04      	cmp	r3, #4
 800dfd8:	f040 8591 	bne.w	800eafe <phhalHw_Pn5180_SetConfig+0x1836>
 800dfdc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f040 858d 	bne.w	800eafe <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 800dfe4:	f107 0308 	add.w	r3, r7, #8
 800dfe8:	461a      	mov	r2, r3
 800dfea:	211a      	movs	r1, #26
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f002 f989 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800dff2:	4603      	mov	r3, r0
 800dff4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dff6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <phhalHw_Pn5180_SetConfig+0xd3a>
 800dffc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dffe:	f000 bda6 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 800e008:	4013      	ands	r3, r2
 800e00a:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	f043 0304 	orr.w	r3, r3, #4
 800e012:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	461a      	mov	r2, r3
 800e018:	211a      	movs	r1, #26
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f001 ff5e 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800e020:	4603      	mov	r3, r0
 800e022:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e024:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <phhalHw_Pn5180_SetConfig+0xd68>
 800e02a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e02c:	f000 bd8f 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 800e030:	f107 0308 	add.w	r3, r7, #8
 800e034:	461a      	mov	r2, r3
 800e036:	211c      	movs	r1, #28
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f002 f963 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800e03e:	4603      	mov	r3, r0
 800e040:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e042:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <phhalHw_Pn5180_SetConfig+0xd86>
 800e048:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e04a:	f000 bd80 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 800e054:	4013      	ands	r3, r2
 800e056:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	461a      	mov	r2, r3
 800e05c:	211c      	movs	r1, #28
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f001 ff3c 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800e064:	4603      	mov	r3, r0
 800e066:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e068:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <phhalHw_Pn5180_SetConfig+0xdac>
 800e06e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e070:	f000 bd6d 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800e074:	887a      	ldrh	r2, [r7, #2]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	322c      	adds	r2, #44	@ 0x2c
 800e07a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e07c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 800e080:	f000 bd3d 	b.w	800eafe <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e084:	887a      	ldrh	r2, [r7, #2]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	322c      	adds	r2, #44	@ 0x2c
 800e08a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e08e:	883a      	ldrh	r2, [r7, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d10a      	bne.n	800e0aa <phhalHw_Pn5180_SetConfig+0xde2>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d105      	bne.n	800e0aa <phhalHw_Pn5180_SetConfig+0xde2>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	f000 852c 	beq.w	800eb02 <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e0aa:	883b      	ldrh	r3, [r7, #0]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f003 fe5f 	bl	8011d74 <phhalHw_Pn5180_SetTmo>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e0ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <phhalHw_Pn5180_SetConfig+0xdfe>
 800e0c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e0c2:	f000 bd44 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e0c6:	887a      	ldrh	r2, [r7, #2]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	322c      	adds	r2, #44	@ 0x2c
 800e0cc:	8839      	ldrh	r1, [r7, #0]
 800e0ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800e0da:	f000 bd12 	b.w	800eb02 <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e0de:	887a      	ldrh	r2, [r7, #2]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	322c      	adds	r2, #44	@ 0x2c
 800e0e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e0e8:	883a      	ldrh	r2, [r7, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d10a      	bne.n	800e104 <phhalHw_Pn5180_SetConfig+0xe3c>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d105      	bne.n	800e104 <phhalHw_Pn5180_SetConfig+0xe3c>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	f000 8501 	beq.w	800eb06 <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e104:	883b      	ldrh	r3, [r7, #0]
 800e106:	2201      	movs	r2, #1
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f003 fe32 	bl	8011d74 <phhalHw_Pn5180_SetTmo>
 800e110:	4603      	mov	r3, r0
 800e112:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <phhalHw_Pn5180_SetConfig+0xe58>
 800e11a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e11c:	f000 bd17 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e120:	887a      	ldrh	r2, [r7, #2]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	322c      	adds	r2, #44	@ 0x2c
 800e126:	8839      	ldrh	r1, [r7, #0]
 800e128:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800e134:	f000 bce7 	b.w	800eb06 <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e138:	887a      	ldrh	r2, [r7, #2]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	322c      	adds	r2, #44	@ 0x2c
 800e13e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e142:	883a      	ldrh	r2, [r7, #0]
 800e144:	429a      	cmp	r2, r3
 800e146:	d105      	bne.n	800e154 <phhalHw_Pn5180_SetConfig+0xe8c>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e14e:	2b01      	cmp	r3, #1
 800e150:	f000 84db 	beq.w	800eb0a <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e15a:	2b04      	cmp	r3, #4
 800e15c:	d008      	beq.n	800e170 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e164:	2b06      	cmp	r3, #6
 800e166:	d003      	beq.n	800e170 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e168:	f240 2325 	movw	r3, #549	@ 0x225
 800e16c:	f000 bcef 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e176:	2b04      	cmp	r3, #4
 800e178:	d106      	bne.n	800e188 <phhalHw_Pn5180_SetConfig+0xec0>
 800e17a:	883b      	ldrh	r3, [r7, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e180:	f240 2323 	movw	r3, #547	@ 0x223
 800e184:	f000 bce3 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 800e194:	883b      	ldrh	r3, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f003 faf6 	bl	8011788 <phhalHw_Pn5180_SetCardMode>
 800e19c:	4603      	mov	r3, r0
 800e19e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e1a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <phhalHw_Pn5180_SetConfig+0xee4>
 800e1a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1a8:	f000 bcd1 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	883a      	ldrh	r2, [r7, #0]
 800e1b0:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 800e1b4:	f000 bca9 	b.w	800eb0a <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800e1b8:	883b      	ldrh	r3, [r7, #0]
 800e1ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d006      	beq.n	800e1d0 <phhalHw_Pn5180_SetConfig+0xf08>
 800e1c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1c6:	d003      	beq.n	800e1d0 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e1c8:	f240 2321 	movw	r3, #545	@ 0x221
 800e1cc:	f000 bcbf 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e1d0:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800e1d2:	883b      	ldrh	r3, [r7, #0]
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	dc02      	bgt.n	800e1e0 <phhalHw_Pn5180_SetConfig+0xf18>
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	da03      	bge.n	800e1e6 <phhalHw_Pn5180_SetConfig+0xf1e>
 800e1de:	e00f      	b.n	800e200 <phhalHw_Pn5180_SetConfig+0xf38>
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d009      	beq.n	800e1f8 <phhalHw_Pn5180_SetConfig+0xf30>
 800e1e4:	e00c      	b.n	800e200 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	883a      	ldrh	r2, [r7, #0]
 800e1f0:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 800e1f2:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 800e1f4:	f000 bcaa 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e1f8:	f240 2323 	movw	r3, #547	@ 0x223
 800e1fc:	f000 bca7 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e200:	f240 2321 	movw	r3, #545	@ 0x221
 800e204:	f000 bca3 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 800e208:	883b      	ldrh	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d103      	bne.n	800e216 <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e20e:	f240 2321 	movw	r3, #545	@ 0x221
 800e212:	f000 bc9c 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	883a      	ldrh	r2, [r7, #0]
 800e21a:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 800e21c:	f000 bc96 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	883a      	ldrh	r2, [r7, #0]
 800e224:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 800e226:	f000 bc91 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 800e22a:	883b      	ldrh	r3, [r7, #0]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d106      	bne.n	800e23e <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800e230:	883b      	ldrh	r3, [r7, #0]
 800e232:	b2da      	uxtb	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 800e23a:	f000 bc87 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 800e23e:	883b      	ldrh	r3, [r7, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d106      	bne.n	800e252 <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800e244:	883b      	ldrh	r3, [r7, #0]
 800e246:	b2da      	uxtb	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 800e24e:	f000 bc7d 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e252:	f240 2321 	movw	r3, #545	@ 0x221
 800e256:	f000 bc7a 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 800e25a:	883b      	ldrh	r3, [r7, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d105      	bne.n	800e26c <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 800e268:	f000 bc70 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800e274:	f000 bc6a 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 800e278:	883b      	ldrh	r3, [r7, #0]
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 800e282:	f000 bc63 	b.w	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 800e286:	883b      	ldrh	r3, [r7, #0]
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 800e290:	883b      	ldrh	r3, [r7, #0]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d122      	bne.n	800e2dc <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	d00e      	beq.n	800e2be <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 800e2a0:	f240 1207 	movw	r2, #263	@ 0x107
 800e2a4:	2128      	movs	r1, #40	@ 0x28
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fe faa4 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e2b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f000 842b 	beq.w	800eb0e <phhalHw_Pn5180_SetConfig+0x1846>
 800e2b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2ba:	f000 bc48 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 800e2be:	f240 1203 	movw	r2, #259	@ 0x103
 800e2c2:	2128      	movs	r1, #40	@ 0x28
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7fe fa95 	bl	800c7f4 <phhalHw_Pn5180_WriteRegister>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e2ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 841c 	beq.w	800eb0e <phhalHw_Pn5180_SetConfig+0x1846>
 800e2d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2d8:	f000 bc39 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 800e2dc:	f06f 0201 	mvn.w	r2, #1
 800e2e0:	2128      	movs	r1, #40	@ 0x28
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f001 fee6 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e2ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 840d 	beq.w	800eb0e <phhalHw_Pn5180_SetConfig+0x1846>
 800e2f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e2f6:	f000 bc2a 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 800e2fa:	883b      	ldrh	r3, [r7, #0]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fec6 	bl	800f090 <phhalHw_Pn5180_SetMinFDT>
 800e304:	4603      	mov	r3, r0
 800e306:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e308:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f000 8401 	beq.w	800eb12 <phhalHw_Pn5180_SetConfig+0x184a>
 800e310:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e312:	f000 bc1c 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 800e316:	883b      	ldrh	r3, [r7, #0]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d111      	bne.n	800e340 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 800e324:	2202      	movs	r2, #2
 800e326:	2104      	movs	r1, #4
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 fe4d 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e32e:	4603      	mov	r3, r0
 800e330:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e332:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 83ee 	beq.w	800eb16 <phhalHw_Pn5180_SetConfig+0x184e>
 800e33a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e33c:	f000 bc07 	b.w	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 800e348:	f06f 0202 	mvn.w	r2, #2
 800e34c:	2104      	movs	r1, #4
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f001 feb0 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e354:	4603      	mov	r3, r0
 800e356:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e358:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f000 83db 	beq.w	800eb16 <phhalHw_Pn5180_SetConfig+0x184e>
 800e360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e362:	e3f4      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e364:	883b      	ldrh	r3, [r7, #0]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d005      	beq.n	800e376 <phhalHw_Pn5180_SetConfig+0x10ae>
 800e36a:	883b      	ldrh	r3, [r7, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e370:	f240 2321 	movw	r3, #545	@ 0x221
 800e374:	e3eb      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 800e376:	883b      	ldrh	r3, [r7, #0]
 800e378:	b2da      	uxtb	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	70da      	strb	r2, [r3, #3]
        break;
 800e37e:	e3e5      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e380:	883b      	ldrh	r3, [r7, #0]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d00c      	beq.n	800e3a0 <phhalHw_Pn5180_SetConfig+0x10d8>
 800e386:	883b      	ldrh	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d009      	beq.n	800e3a0 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e38c:	f240 2321 	movw	r3, #545	@ 0x221
 800e390:	e3dd      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
 800e392:	bf00      	nop
 800e394:	f3af 8000 	nop.w
 800e398:	51eb851f 	.word	0x51eb851f
 800e39c:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 800e3a0:	883b      	ldrh	r3, [r7, #0]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d10c      	bne.n	800e3c0 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800e3a6:	2280      	movs	r2, #128	@ 0x80
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f001 fd96 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e3b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f000 83af 	beq.w	800eb1a <phhalHw_Pn5180_SetConfig+0x1852>
 800e3bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3be:	e3c6      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800e3c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f001 fe74 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e3d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 83a1 	beq.w	800eb1a <phhalHw_Pn5180_SetConfig+0x1852>
 800e3d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e3da:	e3b8      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e3dc:	883b      	ldrh	r3, [r7, #0]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d005      	beq.n	800e3ee <phhalHw_Pn5180_SetConfig+0x1126>
 800e3e2:	883b      	ldrh	r3, [r7, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e3e8:	f240 2321 	movw	r3, #545	@ 0x221
 800e3ec:	e3af      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 800e3ee:	883b      	ldrh	r3, [r7, #0]
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 800e3f8:	e3a8      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 800e3fa:	883b      	ldrh	r3, [r7, #0]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d005      	beq.n	800e40c <phhalHw_Pn5180_SetConfig+0x1144>
 800e400:	883b      	ldrh	r3, [r7, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e406:	f240 2321 	movw	r3, #545	@ 0x221
 800e40a:	e3a0      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 800e40c:	883b      	ldrh	r3, [r7, #0]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d10d      	bne.n	800e42e <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 800e412:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e416:	2118      	movs	r1, #24
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f001 fe4b 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e41e:	4603      	mov	r3, r0
 800e420:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e422:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 837a 	beq.w	800eb1e <phhalHw_Pn5180_SetConfig+0x1856>
 800e42a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e42c:	e38f      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 800e42e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e432:	2118      	movs	r1, #24
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f001 fdc7 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e43a:	4603      	mov	r3, r0
 800e43c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e43e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 836c 	beq.w	800eb1e <phhalHw_Pn5180_SetConfig+0x1856>
 800e446:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e448:	e381      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e450:	2b05      	cmp	r3, #5
 800e452:	d00c      	beq.n	800e46e <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800e45a:	2b04      	cmp	r3, #4
 800e45c:	d007      	beq.n	800e46e <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800e464:	2b06      	cmp	r3, #6
 800e466:	d002      	beq.n	800e46e <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e468:	f240 2325 	movw	r3, #549	@ 0x225
 800e46c:	e36f      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800e46e:	883b      	ldrh	r3, [r7, #0]
 800e470:	2b07      	cmp	r3, #7
 800e472:	d82b      	bhi.n	800e4cc <phhalHw_Pn5180_SetConfig+0x1204>
 800e474:	a201      	add	r2, pc, #4	@ (adr r2, 800e47c <phhalHw_Pn5180_SetConfig+0x11b4>)
 800e476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47a:	bf00      	nop
 800e47c:	0800e4d3 	.word	0x0800e4d3
 800e480:	0800e49d 	.word	0x0800e49d
 800e484:	0800e49d 	.word	0x0800e49d
 800e488:	0800e4cd 	.word	0x0800e4cd
 800e48c:	0800e49d 	.word	0x0800e49d
 800e490:	0800e4ad 	.word	0x0800e4ad
 800e494:	0800e4bd 	.word	0x0800e4bd
 800e498:	0800e4bd 	.word	0x0800e4bd
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	d017      	beq.n	800e4d6 <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4a6:	f240 2321 	movw	r3, #545	@ 0x221
 800e4aa:	e350      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4b2:	2b04      	cmp	r3, #4
 800e4b4:	d011      	beq.n	800e4da <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4b6:	f240 2321 	movw	r3, #545	@ 0x221
 800e4ba:	e348      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4c2:	2b06      	cmp	r3, #6
 800e4c4:	d00b      	beq.n	800e4de <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e4c6:	f240 2321 	movw	r3, #545	@ 0x221
 800e4ca:	e340      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800e4cc:	f240 2323 	movw	r3, #547	@ 0x223
 800e4d0:	e33d      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e4d2:	bf00      	nop
 800e4d4:	e004      	b.n	800e4e0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e4d6:	bf00      	nop
 800e4d8:	e002      	b.n	800e4e0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e4da:	bf00      	nop
 800e4dc:	e000      	b.n	800e4e0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800e4de:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 800e4e4:	883b      	ldrh	r3, [r7, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d103      	bne.n	800e4f2 <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 800e4ea:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 800e4ee:	60bb      	str	r3, [r7, #8]
 800e4f0:	e002      	b.n	800e4f8 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 800e4f2:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800e4f6:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e4f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e4fe:	3338      	adds	r3, #56	@ 0x38
 800e500:	443b      	add	r3, r7
 800e502:	2218      	movs	r2, #24
 800e504:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e50e:	3338      	adds	r3, #56	@ 0x38
 800e510:	443b      	add	r3, r7
 800e512:	2203      	movs	r2, #3
 800e514:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e51c:	1c59      	adds	r1, r3, #1
 800e51e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e520:	b2d2      	uxtb	r2, r2
 800e522:	3338      	adds	r3, #56	@ 0x38
 800e524:	443b      	add	r3, r7
 800e526:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	0a1a      	lsrs	r2, r3, #8
 800e52e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e530:	1c59      	adds	r1, r3, #1
 800e532:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e534:	b2d2      	uxtb	r2, r2
 800e536:	3338      	adds	r3, #56	@ 0x38
 800e538:	443b      	add	r3, r7
 800e53a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	0c1a      	lsrs	r2, r3, #16
 800e542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e544:	1c59      	adds	r1, r3, #1
 800e546:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e548:	b2d2      	uxtb	r2, r2
 800e54a:	3338      	adds	r3, #56	@ 0x38
 800e54c:	443b      	add	r3, r7
 800e54e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	0e1a      	lsrs	r2, r3, #24
 800e556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e558:	1c59      	adds	r1, r3, #1
 800e55a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e55c:	b2d2      	uxtb	r2, r2
 800e55e:	3338      	adds	r3, #56	@ 0x38
 800e560:	443b      	add	r3, r7
 800e562:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 800e56a:	883b      	ldrh	r3, [r7, #0]
 800e56c:	3b01      	subs	r3, #1
 800e56e:	2b06      	cmp	r3, #6
 800e570:	d822      	bhi.n	800e5b8 <phhalHw_Pn5180_SetConfig+0x12f0>
 800e572:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <phhalHw_Pn5180_SetConfig+0x12b0>)
 800e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e578:	0800e595 	.word	0x0800e595
 800e57c:	0800e59b 	.word	0x0800e59b
 800e580:	0800e5b9 	.word	0x0800e5b9
 800e584:	0800e5a1 	.word	0x0800e5a1
 800e588:	0800e5a7 	.word	0x0800e5a7
 800e58c:	0800e5ad 	.word	0x0800e5ad
 800e590:	0800e5b3 	.word	0x0800e5b3
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 800e594:	2303      	movs	r3, #3
 800e596:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e598:	e00f      	b.n	800e5ba <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 800e59a:	2301      	movs	r3, #1
 800e59c:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e59e:	e00c      	b.n	800e5ba <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5a4:	e009      	b.n	800e5ba <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 800e5a6:	2303      	movs	r3, #3
 800e5a8:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5aa:	e006      	b.n	800e5ba <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5b0:	e003      	b.n	800e5ba <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 800e5b2:	2302      	movs	r3, #2
 800e5b4:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800e5b6:	e000      	b.n	800e5ba <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 800e5b8:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5bc:	019b      	lsls	r3, r3, #6
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c4:	029b      	lsls	r3, r3, #10
 800e5c6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e5d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e5d6:	3338      	adds	r3, #56	@ 0x38
 800e5d8:	443b      	add	r3, r7
 800e5da:	2218      	movs	r2, #24
 800e5dc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e5e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e5e6:	3338      	adds	r3, #56	@ 0x38
 800e5e8:	443b      	add	r3, r7
 800e5ea:	2202      	movs	r2, #2
 800e5ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5f4:	1c59      	adds	r1, r3, #1
 800e5f6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e5f8:	b2d2      	uxtb	r2, r2
 800e5fa:	3338      	adds	r3, #56	@ 0x38
 800e5fc:	443b      	add	r3, r7
 800e5fe:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	0a1a      	lsrs	r2, r3, #8
 800e606:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e608:	1c59      	adds	r1, r3, #1
 800e60a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e60c:	b2d2      	uxtb	r2, r2
 800e60e:	3338      	adds	r3, #56	@ 0x38
 800e610:	443b      	add	r3, r7
 800e612:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	0c1a      	lsrs	r2, r3, #16
 800e61a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e61c:	1c59      	adds	r1, r3, #1
 800e61e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e620:	b2d2      	uxtb	r2, r2
 800e622:	3338      	adds	r3, #56	@ 0x38
 800e624:	443b      	add	r3, r7
 800e626:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	0e1a      	lsrs	r2, r3, #24
 800e62e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e630:	1c59      	adds	r1, r3, #1
 800e632:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	3338      	adds	r3, #56	@ 0x38
 800e638:	443b      	add	r3, r7
 800e63a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e63e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e640:	f107 030c 	add.w	r3, r7, #12
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f001 fdaa 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e64c:	4603      	mov	r3, r0
 800e64e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e650:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 8265 	beq.w	800eb22 <phhalHw_Pn5180_SetConfig+0x185a>
 800e658:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e65a:	e278      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e662:	2b05      	cmp	r3, #5
 800e664:	d002      	beq.n	800e66c <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e666:	f240 2325 	movw	r3, #549	@ 0x225
 800e66a:	e270      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800e66c:	883b      	ldrh	r3, [r7, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d004      	beq.n	800e67c <phhalHw_Pn5180_SetConfig+0x13b4>
 800e672:	2b03      	cmp	r3, #3
 800e674:	d002      	beq.n	800e67c <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e676:	f240 2321 	movw	r3, #545	@ 0x221
 800e67a:	e268      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800e67c:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 800e67e:	883b      	ldrh	r3, [r7, #0]
 800e680:	2b03      	cmp	r3, #3
 800e682:	f040 8083 	bne.w	800e78c <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 800e686:	2300      	movs	r3, #0
 800e688:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 800e68a:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 800e68e:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e696:	3338      	adds	r3, #56	@ 0x38
 800e698:	443b      	add	r3, r7
 800e69a:	2218      	movs	r2, #24
 800e69c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e6a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e6a6:	3338      	adds	r3, #56	@ 0x38
 800e6a8:	443b      	add	r3, r7
 800e6aa:	2203      	movs	r2, #3
 800e6ac:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6b4:	1c59      	adds	r1, r3, #1
 800e6b6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6b8:	b2d2      	uxtb	r2, r2
 800e6ba:	3338      	adds	r3, #56	@ 0x38
 800e6bc:	443b      	add	r3, r7
 800e6be:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	0a1a      	lsrs	r2, r3, #8
 800e6c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6c8:	1c59      	adds	r1, r3, #1
 800e6ca:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	3338      	adds	r3, #56	@ 0x38
 800e6d0:	443b      	add	r3, r7
 800e6d2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	0c1a      	lsrs	r2, r3, #16
 800e6da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6dc:	1c59      	adds	r1, r3, #1
 800e6de:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6e0:	b2d2      	uxtb	r2, r2
 800e6e2:	3338      	adds	r3, #56	@ 0x38
 800e6e4:	443b      	add	r3, r7
 800e6e6:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	0e1a      	lsrs	r2, r3, #24
 800e6ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6f0:	1c59      	adds	r1, r3, #1
 800e6f2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e6f4:	b2d2      	uxtb	r2, r2
 800e6f6:	3338      	adds	r3, #56	@ 0x38
 800e6f8:	443b      	add	r3, r7
 800e6fa:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 800e6fe:	2300      	movs	r3, #0
 800e700:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800e702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e708:	3338      	adds	r3, #56	@ 0x38
 800e70a:	443b      	add	r3, r7
 800e70c:	2218      	movs	r2, #24
 800e70e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e712:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e714:	1c5a      	adds	r2, r3, #1
 800e716:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e718:	3338      	adds	r3, #56	@ 0x38
 800e71a:	443b      	add	r3, r7
 800e71c:	2202      	movs	r2, #2
 800e71e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e726:	1c59      	adds	r1, r3, #1
 800e728:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e72a:	b2d2      	uxtb	r2, r2
 800e72c:	3338      	adds	r3, #56	@ 0x38
 800e72e:	443b      	add	r3, r7
 800e730:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	0a1a      	lsrs	r2, r3, #8
 800e738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e73a:	1c59      	adds	r1, r3, #1
 800e73c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e73e:	b2d2      	uxtb	r2, r2
 800e740:	3338      	adds	r3, #56	@ 0x38
 800e742:	443b      	add	r3, r7
 800e744:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	0c1a      	lsrs	r2, r3, #16
 800e74c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e74e:	1c59      	adds	r1, r3, #1
 800e750:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e752:	b2d2      	uxtb	r2, r2
 800e754:	3338      	adds	r3, #56	@ 0x38
 800e756:	443b      	add	r3, r7
 800e758:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	0e1a      	lsrs	r2, r3, #24
 800e760:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e762:	1c59      	adds	r1, r3, #1
 800e764:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e766:	b2d2      	uxtb	r2, r2
 800e768:	3338      	adds	r3, #56	@ 0x38
 800e76a:	443b      	add	r3, r7
 800e76c:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e770:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e772:	f107 030c 	add.w	r3, r7, #12
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f001 fd11 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e77e:	4603      	mov	r3, r0
 800e780:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e782:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e784:	2b00      	cmp	r3, #0
 800e786:	d003      	beq.n	800e790 <phhalHw_Pn5180_SetConfig+0x14c8>
 800e788:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e78a:	e1e0      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 800e78c:	bf00      	nop
 800e78e:	e1dd      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 800e790:	bf00      	nop
        }

        break;
 800e792:	e1db      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 800e794:	883a      	ldrh	r2, [r7, #0]
 800e796:	f240 1303 	movw	r3, #259	@ 0x103
 800e79a:	4013      	ands	r3, r2
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e7a0:	f240 2321 	movw	r3, #545	@ 0x221
 800e7a4:	e1d3      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 800e7ae:	883b      	ldrh	r3, [r7, #0]
 800e7b0:	f003 0301 	and.w	r3, r3, #1
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d015      	beq.n	800e7e4 <phhalHw_Pn5180_SetConfig+0x151c>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7be:	2b06      	cmp	r3, #6
 800e7c0:	d110      	bne.n	800e7e4 <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c4:	f043 0304 	orr.w	r3, r3, #4
 800e7c8:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7cc:	f043 0302 	orr.w	r3, r3, #2
 800e7d0:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800e7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7d4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800e7d8:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800e7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7dc:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800e7e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7e2:	e008      	b.n	800e7f6 <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 800e7e4:	883b      	ldrh	r3, [r7, #0]
 800e7e6:	f003 0302 	and.w	r3, r3, #2
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800e7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7f0:	f043 0304 	orr.w	r3, r3, #4
 800e7f4:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 800e7f6:	883b      	ldrh	r3, [r7, #0]
 800e7f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d004      	beq.n	800e80a <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e802:	f043 0302 	orr.w	r3, r3, #2
 800e806:	633b      	str	r3, [r7, #48]	@ 0x30
 800e808:	e003      	b.n	800e812 <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800e80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e80c:	f043 0302 	orr.w	r3, r3, #2
 800e810:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e818:	2b06      	cmp	r3, #6
 800e81a:	d10c      	bne.n	800e836 <phhalHw_Pn5180_SetConfig+0x156e>
 800e81c:	883b      	ldrh	r3, [r7, #0]
 800e81e:	f003 0302 	and.w	r3, r3, #2
 800e822:	2b00      	cmp	r3, #0
 800e824:	d007      	beq.n	800e836 <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800e826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e828:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800e82c:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800e82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e830:	f043 0318 	orr.w	r3, r3, #24
 800e834:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 800e836:	2300      	movs	r3, #0
 800e838:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 800e83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e83c:	43db      	mvns	r3, r3
 800e83e:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800e840:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e846:	3338      	adds	r3, #56	@ 0x38
 800e848:	443b      	add	r3, r7
 800e84a:	2219      	movs	r2, #25
 800e84c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e856:	3338      	adds	r3, #56	@ 0x38
 800e858:	443b      	add	r3, r7
 800e85a:	2203      	movs	r2, #3
 800e85c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e864:	1c59      	adds	r1, r3, #1
 800e866:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e868:	b2d2      	uxtb	r2, r2
 800e86a:	3338      	adds	r3, #56	@ 0x38
 800e86c:	443b      	add	r3, r7
 800e86e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	0a1a      	lsrs	r2, r3, #8
 800e876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e878:	1c59      	adds	r1, r3, #1
 800e87a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e87c:	b2d2      	uxtb	r2, r2
 800e87e:	3338      	adds	r3, #56	@ 0x38
 800e880:	443b      	add	r3, r7
 800e882:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	0c1a      	lsrs	r2, r3, #16
 800e88a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e88c:	1c59      	adds	r1, r3, #1
 800e88e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e890:	b2d2      	uxtb	r2, r2
 800e892:	3338      	adds	r3, #56	@ 0x38
 800e894:	443b      	add	r3, r7
 800e896:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	0e1a      	lsrs	r2, r3, #24
 800e89e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8a0:	1c59      	adds	r1, r3, #1
 800e8a2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8a4:	b2d2      	uxtb	r2, r2
 800e8a6:	3338      	adds	r3, #56	@ 0x38
 800e8a8:	443b      	add	r3, r7
 800e8aa:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b0:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800e8b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8b4:	1c5a      	adds	r2, r3, #1
 800e8b6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e8b8:	3338      	adds	r3, #56	@ 0x38
 800e8ba:	443b      	add	r3, r7
 800e8bc:	2219      	movs	r2, #25
 800e8be:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e8c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e8c8:	3338      	adds	r3, #56	@ 0x38
 800e8ca:	443b      	add	r3, r7
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8d6:	1c59      	adds	r1, r3, #1
 800e8d8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8da:	b2d2      	uxtb	r2, r2
 800e8dc:	3338      	adds	r3, #56	@ 0x38
 800e8de:	443b      	add	r3, r7
 800e8e0:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	0a1a      	lsrs	r2, r3, #8
 800e8e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8ea:	1c59      	adds	r1, r3, #1
 800e8ec:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e8ee:	b2d2      	uxtb	r2, r2
 800e8f0:	3338      	adds	r3, #56	@ 0x38
 800e8f2:	443b      	add	r3, r7
 800e8f4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	0c1a      	lsrs	r2, r3, #16
 800e8fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8fe:	1c59      	adds	r1, r3, #1
 800e900:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e902:	b2d2      	uxtb	r2, r2
 800e904:	3338      	adds	r3, #56	@ 0x38
 800e906:	443b      	add	r3, r7
 800e908:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	0e1a      	lsrs	r2, r3, #24
 800e910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e912:	1c59      	adds	r1, r3, #1
 800e914:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e916:	b2d2      	uxtb	r2, r2
 800e918:	3338      	adds	r3, #56	@ 0x38
 800e91a:	443b      	add	r3, r7
 800e91c:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e920:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e922:	f107 030c 	add.w	r3, r7, #12
 800e926:	4619      	mov	r1, r3
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 fc39 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e92e:	4603      	mov	r3, r0
 800e930:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e932:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e934:	2b00      	cmp	r3, #0
 800e936:	f000 80f6 	beq.w	800eb26 <phhalHw_Pn5180_SetConfig+0x185e>
 800e93a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e93c:	e107      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800e93e:	883b      	ldrh	r3, [r7, #0]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d005      	beq.n	800e950 <phhalHw_Pn5180_SetConfig+0x1688>
 800e944:	883b      	ldrh	r3, [r7, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e94a:	f240 2321 	movw	r3, #545	@ 0x221
 800e94e:	e0fe      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 800e950:	883b      	ldrh	r3, [r7, #0]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d111      	bne.n	800e97a <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e95a:	2100      	movs	r1, #0
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f001 fb33 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e962:	4603      	mov	r3, r0
 800e964:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e966:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d001      	beq.n	800e970 <phhalHw_Pn5180_SetConfig+0x16a8>
 800e96c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e96e:	e0ee      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 800e978:	e0e8      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800e97a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800e97e:	2100      	movs	r1, #0
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f001 fb97 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e986:	4603      	mov	r3, r0
 800e988:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e98a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d001      	beq.n	800e994 <phhalHw_Pn5180_SetConfig+0x16cc>
 800e990:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e992:	e0dc      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 800e99c:	e0d6      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 800e99e:	883b      	ldrh	r3, [r7, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	e0d2      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4868      	ldr	r0, [pc, #416]	@ (800eb58 <phhalHw_Pn5180_SetConfig+0x1890>)
 800e9b8:	f008 fb78 	bl	80170ac <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 800e9bc:	883b      	ldrh	r3, [r7, #0]
 800e9be:	4a67      	ldr	r2, [pc, #412]	@ (800eb5c <phhalHw_Pn5180_SetConfig+0x1894>)
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4867      	ldr	r0, [pc, #412]	@ (800eb60 <phhalHw_Pn5180_SetConfig+0x1898>)
 800e9c4:	f008 f95e 	bl	8016c84 <phDriver_TimerStart>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e9cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f000 80ab 	beq.w	800eb2a <phhalHw_Pn5180_SetConfig+0x1862>
 800e9d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9d6:	e0ba      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 800e9d8:	883b      	ldrh	r3, [r7, #0]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d107      	bne.n	800e9ee <phhalHw_Pn5180_SetConfig+0x1726>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e9e4:	2b04      	cmp	r3, #4
 800e9e6:	d002      	beq.n	800e9ee <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e9e8:	f240 2325 	movw	r3, #549	@ 0x225
 800e9ec:	e0af      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800e9ee:	883b      	ldrh	r3, [r7, #0]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f002 fe3d 	bl	8011674 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e9fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 8094 	beq.w	800eb2e <phhalHw_Pn5180_SetConfig+0x1866>
 800ea06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea08:	e0a1      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea0a:	883b      	ldrh	r3, [r7, #0]
 800ea0c:	2202      	movs	r2, #2
 800ea0e:	4619      	mov	r1, r3
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f002 fe2f 	bl	8011674 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea16:	4603      	mov	r3, r0
 800ea18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 8088 	beq.w	800eb32 <phhalHw_Pn5180_SetConfig+0x186a>
 800ea22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea24:	e093      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea26:	883b      	ldrh	r3, [r7, #0]
 800ea28:	2204      	movs	r2, #4
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f002 fe21 	bl	8011674 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea32:	4603      	mov	r3, r0
 800ea34:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d07c      	beq.n	800eb36 <phhalHw_Pn5180_SetConfig+0x186e>
 800ea3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea3e:	e086      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea40:	883b      	ldrh	r3, [r7, #0]
 800ea42:	2208      	movs	r2, #8
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f002 fe14 	bl	8011674 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d071      	beq.n	800eb3a <phhalHw_Pn5180_SetConfig+0x1872>
 800ea56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea58:	e079      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea5a:	883b      	ldrh	r3, [r7, #0]
 800ea5c:	2210      	movs	r2, #16
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f002 fe07 	bl	8011674 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800ea66:	4603      	mov	r3, r0
 800ea68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d066      	beq.n	800eb3e <phhalHw_Pn5180_SetConfig+0x1876>
 800ea70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea72:	e06c      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea74:	8839      	ldrh	r1, [r7, #0]
 800ea76:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800ea7a:	2208      	movs	r2, #8
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f002 fe45 	bl	801170c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ea82:	4603      	mov	r3, r0
 800ea84:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d05a      	beq.n	800eb42 <phhalHw_Pn5180_SetConfig+0x187a>
 800ea8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea8e:	e05e      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800ea90:	8839      	ldrh	r1, [r7, #0]
 800ea92:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800ea96:	2210      	movs	r2, #16
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f002 fe37 	bl	801170c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eaa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d04e      	beq.n	800eb46 <phhalHw_Pn5180_SetConfig+0x187e>
 800eaa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eaaa:	e050      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800eaac:	8839      	ldrh	r1, [r7, #0]
 800eaae:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800eab2:	2218      	movs	r2, #24
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f002 fe29 	bl	801170c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800eaba:	4603      	mov	r3, r0
 800eabc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eabe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d042      	beq.n	800eb4a <phhalHw_Pn5180_SetConfig+0x1882>
 800eac4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eac6:	e042      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800eac8:	f240 2323 	movw	r3, #547	@ 0x223
 800eacc:	e03f      	b.n	800eb4e <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 800eace:	bf00      	nop
 800ead0:	e03c      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ead2:	bf00      	nop
 800ead4:	e03a      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800ead6:	bf00      	nop
 800ead8:	e038      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eada:	bf00      	nop
 800eadc:	e036      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eade:	bf00      	nop
 800eae0:	e034      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eae2:	bf00      	nop
 800eae4:	e032      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eae6:	bf00      	nop
 800eae8:	e030      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eaea:	bf00      	nop
 800eaec:	e02e      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eaee:	bf00      	nop
 800eaf0:	e02c      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eaf2:	bf00      	nop
 800eaf4:	e02a      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eaf6:	bf00      	nop
 800eaf8:	e028      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eafa:	bf00      	nop
 800eafc:	e026      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eafe:	bf00      	nop
 800eb00:	e024      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb02:	bf00      	nop
 800eb04:	e022      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb06:	bf00      	nop
 800eb08:	e020      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb0a:	bf00      	nop
 800eb0c:	e01e      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb0e:	bf00      	nop
 800eb10:	e01c      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb12:	bf00      	nop
 800eb14:	e01a      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb16:	bf00      	nop
 800eb18:	e018      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb1a:	bf00      	nop
 800eb1c:	e016      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb1e:	bf00      	nop
 800eb20:	e014      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb22:	bf00      	nop
 800eb24:	e012      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb26:	bf00      	nop
 800eb28:	e010      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb2a:	bf00      	nop
 800eb2c:	e00e      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb2e:	bf00      	nop
 800eb30:	e00c      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb32:	bf00      	nop
 800eb34:	e00a      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb36:	bf00      	nop
 800eb38:	e008      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb3a:	bf00      	nop
 800eb3c:	e006      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb3e:	bf00      	nop
 800eb40:	e004      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb42:	bf00      	nop
 800eb44:	e002      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb46:	bf00      	nop
 800eb48:	e000      	b.n	800eb4c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800eb4a:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3738      	adds	r7, #56	@ 0x38
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bdb0      	pop	{r4, r5, r7, pc}
 800eb56:	bf00      	nop
 800eb58:	2000178c 	.word	0x2000178c
 800eb5c:	0800c3e5 	.word	0x0800c3e5
 800eb60:	000f4240 	.word	0x000f4240

0800eb64 <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08a      	sub	sp, #40	@ 0x28
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	607a      	str	r2, [r7, #4]
 800eb70:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800eb72:	2300      	movs	r3, #0
 800eb74:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <phhalHw_Pn5180_GetConfig+0x20>
 800eb80:	2321      	movs	r3, #33	@ 0x21
 800eb82:	e281      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 800eb84:	897b      	ldrh	r3, [r7, #10]
 800eb86:	f248 0250 	movw	r2, #32848	@ 0x8050
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	f000 817f 	beq.w	800ee8e <phhalHw_Pn5180_GetConfig+0x32a>
 800eb90:	f248 0250 	movw	r2, #32848	@ 0x8050
 800eb94:	4293      	cmp	r3, r2
 800eb96:	f300 8273 	bgt.w	800f080 <phhalHw_Pn5180_GetConfig+0x51c>
 800eb9a:	f248 0212 	movw	r2, #32786	@ 0x8012
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	f000 814c 	beq.w	800ee3c <phhalHw_Pn5180_GetConfig+0x2d8>
 800eba4:	f248 0212 	movw	r2, #32786	@ 0x8012
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	f300 8269 	bgt.w	800f080 <phhalHw_Pn5180_GetConfig+0x51c>
 800ebae:	f248 0211 	movw	r2, #32785	@ 0x8011
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	f000 8131 	beq.w	800ee1a <phhalHw_Pn5180_GetConfig+0x2b6>
 800ebb8:	f248 0211 	movw	r2, #32785	@ 0x8011
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	f300 825f 	bgt.w	800f080 <phhalHw_Pn5180_GetConfig+0x51c>
 800ebc2:	2b5f      	cmp	r3, #95	@ 0x5f
 800ebc4:	f300 80ca 	bgt.w	800ed5c <phhalHw_Pn5180_GetConfig+0x1f8>
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f2c0 8259 	blt.w	800f080 <phhalHw_Pn5180_GetConfig+0x51c>
 800ebce:	2b5f      	cmp	r3, #95	@ 0x5f
 800ebd0:	f200 8256 	bhi.w	800f080 <phhalHw_Pn5180_GetConfig+0x51c>
 800ebd4:	a201      	add	r2, pc, #4	@ (adr r2, 800ebdc <phhalHw_Pn5180_GetConfig+0x78>)
 800ebd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebda:	bf00      	nop
 800ebdc:	0800ed83 	.word	0x0800ed83
 800ebe0:	0800ed83 	.word	0x0800ed83
 800ebe4:	0800ed83 	.word	0x0800ed83
 800ebe8:	0800ed83 	.word	0x0800ed83
 800ebec:	0800ed93 	.word	0x0800ed93
 800ebf0:	0800f081 	.word	0x0800f081
 800ebf4:	0800ed83 	.word	0x0800ed83
 800ebf8:	0800ed83 	.word	0x0800ed83
 800ebfc:	0800ed83 	.word	0x0800ed83
 800ec00:	0800ed83 	.word	0x0800ed83
 800ec04:	0800ed83 	.word	0x0800ed83
 800ec08:	0800ed83 	.word	0x0800ed83
 800ec0c:	0800ed83 	.word	0x0800ed83
 800ec10:	0800ed9d 	.word	0x0800ed9d
 800ec14:	0800ede1 	.word	0x0800ede1
 800ec18:	0800ed83 	.word	0x0800ed83
 800ec1c:	0800f081 	.word	0x0800f081
 800ec20:	0800f081 	.word	0x0800f081
 800ec24:	0800f081 	.word	0x0800f081
 800ec28:	0800ee6d 	.word	0x0800ee6d
 800ec2c:	0800ee77 	.word	0x0800ee77
 800ec30:	0800f081 	.word	0x0800f081
 800ec34:	0800f081 	.word	0x0800f081
 800ec38:	0800f081 	.word	0x0800f081
 800ec3c:	0800f081 	.word	0x0800f081
 800ec40:	0800f081 	.word	0x0800f081
 800ec44:	0800f081 	.word	0x0800f081
 800ec48:	0800f081 	.word	0x0800f081
 800ec4c:	0800f081 	.word	0x0800f081
 800ec50:	0800f081 	.word	0x0800f081
 800ec54:	0800f081 	.word	0x0800f081
 800ec58:	0800f081 	.word	0x0800f081
 800ec5c:	0800ee81 	.word	0x0800ee81
 800ec60:	0800f035 	.word	0x0800f035
 800ec64:	0800f081 	.word	0x0800f081
 800ec68:	0800f081 	.word	0x0800f081
 800ec6c:	0800f081 	.word	0x0800f081
 800ec70:	0800f081 	.word	0x0800f081
 800ec74:	0800f081 	.word	0x0800f081
 800ec78:	0800f081 	.word	0x0800f081
 800ec7c:	0800f081 	.word	0x0800f081
 800ec80:	0800f081 	.word	0x0800f081
 800ec84:	0800f081 	.word	0x0800f081
 800ec88:	0800f081 	.word	0x0800f081
 800ec8c:	0800f081 	.word	0x0800f081
 800ec90:	0800f081 	.word	0x0800f081
 800ec94:	0800ee9d 	.word	0x0800ee9d
 800ec98:	0800ed93 	.word	0x0800ed93
 800ec9c:	0800eeb7 	.word	0x0800eeb7
 800eca0:	0800eec1 	.word	0x0800eec1
 800eca4:	0800eeef 	.word	0x0800eeef
 800eca8:	0800ef1d 	.word	0x0800ef1d
 800ecac:	0800ef4b 	.word	0x0800ef4b
 800ecb0:	0800f081 	.word	0x0800f081
 800ecb4:	0800f081 	.word	0x0800f081
 800ecb8:	0800f081 	.word	0x0800f081
 800ecbc:	0800f081 	.word	0x0800f081
 800ecc0:	0800f081 	.word	0x0800f081
 800ecc4:	0800f081 	.word	0x0800f081
 800ecc8:	0800f081 	.word	0x0800f081
 800eccc:	0800f081 	.word	0x0800f081
 800ecd0:	0800f081 	.word	0x0800f081
 800ecd4:	0800f081 	.word	0x0800f081
 800ecd8:	0800f081 	.word	0x0800f081
 800ecdc:	0800f081 	.word	0x0800f081
 800ece0:	0800f081 	.word	0x0800f081
 800ece4:	0800f081 	.word	0x0800f081
 800ece8:	0800f081 	.word	0x0800f081
 800ecec:	0800f081 	.word	0x0800f081
 800ecf0:	0800f081 	.word	0x0800f081
 800ecf4:	0800f081 	.word	0x0800f081
 800ecf8:	0800f081 	.word	0x0800f081
 800ecfc:	0800f081 	.word	0x0800f081
 800ed00:	0800f081 	.word	0x0800f081
 800ed04:	0800f081 	.word	0x0800f081
 800ed08:	0800f081 	.word	0x0800f081
 800ed0c:	0800f081 	.word	0x0800f081
 800ed10:	0800f081 	.word	0x0800f081
 800ed14:	0800f081 	.word	0x0800f081
 800ed18:	0800f081 	.word	0x0800f081
 800ed1c:	0800f081 	.word	0x0800f081
 800ed20:	0800f081 	.word	0x0800f081
 800ed24:	0800efc9 	.word	0x0800efc9
 800ed28:	0800ef95 	.word	0x0800ef95
 800ed2c:	0800efbb 	.word	0x0800efbb
 800ed30:	0800efff 	.word	0x0800efff
 800ed34:	0800f081 	.word	0x0800f081
 800ed38:	0800f081 	.word	0x0800f081
 800ed3c:	0800f081 	.word	0x0800f081
 800ed40:	0800efb1 	.word	0x0800efb1
 800ed44:	0800ed67 	.word	0x0800ed67
 800ed48:	0800f081 	.word	0x0800f081
 800ed4c:	0800efa3 	.word	0x0800efa3
 800ed50:	0800f081 	.word	0x0800f081
 800ed54:	0800ed75 	.word	0x0800ed75
 800ed58:	0800f043 	.word	0x0800f043
 800ed5c:	f248 0210 	movw	r2, #32784	@ 0x8010
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d055      	beq.n	800ee10 <phhalHw_Pn5180_GetConfig+0x2ac>
 800ed64:	e18c      	b.n	800f080 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	801a      	strh	r2, [r3, #0]
        break;
 800ed72:	e188      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	801a      	strh	r2, [r3, #0]
        break;
 800ed80:	e181      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 800ed82:	897a      	ldrh	r2, [r7, #10]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	322c      	adds	r2, #44	@ 0x2c
 800ed88:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	801a      	strh	r2, [r3, #0]
        break;
 800ed90:	e179      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	801a      	strh	r2, [r3, #0]
        break;
 800ed9a:	e174      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d107      	bne.n	800edb6 <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800eda6:	897a      	ldrh	r2, [r7, #10]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	322c      	adds	r2, #44	@ 0x2c
 800edac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 800edb4:	e167      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800edbc:	2b41      	cmp	r3, #65	@ 0x41
 800edbe:	d902      	bls.n	800edc6 <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800edc0:	f240 2322 	movw	r3, #546	@ 0x222
 800edc4:	e160      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800edcc:	461a      	mov	r2, r3
 800edce:	0152      	lsls	r2, r2, #5
 800edd0:	1ad2      	subs	r2, r2, r3
 800edd2:	0092      	lsls	r2, r2, #2
 800edd4:	4413      	add	r3, r2
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	b29a      	uxth	r2, r3
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	801a      	strh	r2, [r3, #0]
        break;
 800edde:	e152      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d107      	bne.n	800edfa <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800edea:	897a      	ldrh	r2, [r7, #10]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	322c      	adds	r2, #44	@ 0x2c
 800edf0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 800edf8:	e145      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ee00:	4a9b      	ldr	r2, [pc, #620]	@ (800f070 <phhalHw_Pn5180_GetConfig+0x50c>)
 800ee02:	fba2 2303 	umull	r2, r3, r2, r3
 800ee06:	099b      	lsrs	r3, r3, #6
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	801a      	strh	r2, [r3, #0]
        break;
 800ee0e:	e13a      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	801a      	strh	r2, [r3, #0]
        break;
 800ee18:	e135      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6a1b      	ldr	r3, [r3, #32]
 800ee1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee22:	d302      	bcc.n	800ee2a <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ee24:	f240 2322 	movw	r3, #546	@ 0x222
 800ee28:	e12e      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	621a      	str	r2, [r3, #32]
        break;
 800ee3a:	e124      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6a1b      	ldr	r3, [r3, #32]
 800ee40:	4a8c      	ldr	r2, [pc, #560]	@ (800f074 <phhalHw_Pn5180_GetConfig+0x510>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d905      	bls.n	800ee52 <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ee4c:	f240 2322 	movw	r3, #546	@ 0x222
 800ee50:	e11a      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6a1b      	ldr	r3, [r3, #32]
 800ee56:	4a86      	ldr	r2, [pc, #536]	@ (800f070 <phhalHw_Pn5180_GetConfig+0x50c>)
 800ee58:	fba2 2303 	umull	r2, r3, r2, r3
 800ee5c:	099b      	lsrs	r3, r3, #6
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	621a      	str	r2, [r3, #32]
        break;
 800ee6a:	e10c      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	801a      	strh	r2, [r3, #0]
        break;
 800ee74:	e107      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	801a      	strh	r2, [r3, #0]
        break;
 800ee7e:	e102      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee86:	461a      	mov	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	801a      	strh	r2, [r3, #0]
        break;
 800ee8c:	e0fb      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee94:	461a      	mov	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	801a      	strh	r2, [r3, #0]
        break;
 800ee9a:	e0f4      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d103      	bne.n	800eeae <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 800eeac:	e0eb      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	801a      	strh	r2, [r3, #0]
        break;
 800eeb4:	e0e7      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	8bda      	ldrh	r2, [r3, #30]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	801a      	strh	r2, [r3, #0]
        break;
 800eebe:	e0e2      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800eec0:	f107 0116 	add.w	r1, r7, #22
 800eec4:	f107 0218 	add.w	r2, r7, #24
 800eec8:	f107 0314 	add.w	r3, r7, #20
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	460b      	mov	r3, r1
 800eed0:	2101      	movs	r1, #1
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f002 f80f 	bl	8010ef6 <phhalHw_Pn5180_GetRxBuffer>
 800eed8:	4603      	mov	r3, r0
 800eeda:	83fb      	strh	r3, [r7, #30]
 800eedc:	8bfb      	ldrh	r3, [r7, #30]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d001      	beq.n	800eee6 <phhalHw_Pn5180_GetConfig+0x382>
 800eee2:	8bfb      	ldrh	r3, [r7, #30]
 800eee4:	e0d0      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 800eee6:	8aba      	ldrh	r2, [r7, #20]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	801a      	strh	r2, [r3, #0]
        break;
 800eeec:	e0cb      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800eeee:	f107 0116 	add.w	r1, r7, #22
 800eef2:	f107 0218 	add.w	r2, r7, #24
 800eef6:	f107 0314 	add.w	r3, r7, #20
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	460b      	mov	r3, r1
 800eefe:	2101      	movs	r1, #1
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f001 ffbc 	bl	8010e7e <phhalHw_Pn5180_GetTxBuffer>
 800ef06:	4603      	mov	r3, r0
 800ef08:	83fb      	strh	r3, [r7, #30]
 800ef0a:	8bfb      	ldrh	r3, [r7, #30]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <phhalHw_Pn5180_GetConfig+0x3b0>
 800ef10:	8bfb      	ldrh	r3, [r7, #30]
 800ef12:	e0b9      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 800ef14:	8aba      	ldrh	r2, [r7, #20]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	801a      	strh	r2, [r3, #0]
        break;
 800ef1a:	e0b4      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef1c:	f107 0116 	add.w	r1, r7, #22
 800ef20:	f107 0218 	add.w	r2, r7, #24
 800ef24:	f107 0314 	add.w	r3, r7, #20
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f001 ffa5 	bl	8010e7e <phhalHw_Pn5180_GetTxBuffer>
 800ef34:	4603      	mov	r3, r0
 800ef36:	83fb      	strh	r3, [r7, #30]
 800ef38:	8bfb      	ldrh	r3, [r7, #30]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <phhalHw_Pn5180_GetConfig+0x3de>
 800ef3e:	8bfb      	ldrh	r3, [r7, #30]
 800ef40:	e0a2      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 800ef42:	8afa      	ldrh	r2, [r7, #22]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	801a      	strh	r2, [r3, #0]
        break;
 800ef48:	e09d      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef4a:	f107 0116 	add.w	r1, r7, #22
 800ef4e:	f107 0218 	add.w	r2, r7, #24
 800ef52:	f107 0314 	add.w	r3, r7, #20
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	460b      	mov	r3, r1
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f001 ff8e 	bl	8010e7e <phhalHw_Pn5180_GetTxBuffer>
 800ef62:	4603      	mov	r3, r0
 800ef64:	83fb      	strh	r3, [r7, #30]
 800ef66:	8bfb      	ldrh	r3, [r7, #30]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d001      	beq.n	800ef70 <phhalHw_Pn5180_GetConfig+0x40c>
 800ef6c:	8bfb      	ldrh	r3, [r7, #30]
 800ef6e:	e08b      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	8a1b      	ldrh	r3, [r3, #16]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d302      	bcc.n	800ef82 <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800ef7c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800ef80:	e082      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800ef88:	4413      	add	r3, r2
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	801a      	strh	r2, [r3, #0]
        break;
 800ef92:	e078      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	801a      	strh	r2, [r3, #0]
        break;
 800efa0:	e071      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800efa8:	461a      	mov	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	801a      	strh	r2, [r3, #0]
        break;
 800efae:	e06a      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	801a      	strh	r2, [r3, #0]
        break;
 800efb8:	e065      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efc0:	461a      	mov	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	801a      	strh	r2, [r3, #0]
        break;
 800efc6:	e05e      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800efc8:	f107 0310 	add.w	r3, r7, #16
 800efcc:	461a      	mov	r2, r3
 800efce:	211d      	movs	r1, #29
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f001 f997 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800efd6:	4603      	mov	r3, r0
 800efd8:	83fb      	strh	r3, [r7, #30]
 800efda:	8bfb      	ldrh	r3, [r7, #30]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d001      	beq.n	800efe4 <phhalHw_Pn5180_GetConfig+0x480>
 800efe0:	8bfb      	ldrh	r3, [r7, #30]
 800efe2:	e051      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800efea:	2b00      	cmp	r3, #0
 800efec:	d003      	beq.n	800eff6 <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2201      	movs	r2, #1
 800eff2:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 800eff4:	e047      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	801a      	strh	r2, [r3, #0]
        break;
 800effc:	e043      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800effe:	f107 0310 	add.w	r3, r7, #16
 800f002:	461a      	mov	r2, r3
 800f004:	2100      	movs	r1, #0
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f001 f97c 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800f00c:	4603      	mov	r3, r0
 800f00e:	83fb      	strh	r3, [r7, #30]
 800f010:	8bfb      	ldrh	r3, [r7, #30]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d001      	beq.n	800f01a <phhalHw_Pn5180_GetConfig+0x4b6>
 800f016:	8bfb      	ldrh	r3, [r7, #30]
 800f018:	e036      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f020:	2b00      	cmp	r3, #0
 800f022:	d003      	beq.n	800f02c <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 800f02a:	e02c      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	801a      	strh	r2, [r3, #0]
        break;
 800f032:	e028      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f03a:	461a      	mov	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	801a      	strh	r2, [r3, #0]
        break;
 800f040:	e021      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800f042:	f107 0310 	add.w	r3, r7, #16
 800f046:	461a      	mov	r2, r3
 800f048:	211d      	movs	r1, #29
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f001 f95a 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800f050:	4603      	mov	r3, r0
 800f052:	83fb      	strh	r3, [r7, #30]
 800f054:	8bfb      	ldrh	r3, [r7, #30]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <phhalHw_Pn5180_GetConfig+0x4fa>
 800f05a:	8bfb      	ldrh	r3, [r7, #30]
 800f05c:	e014      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f064:	2b00      	cmp	r3, #0
 800f066:	d007      	beq.n	800f078 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 800f06e:	e00a      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>
 800f070:	10624dd3 	.word	0x10624dd3
 800f074:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	801a      	strh	r2, [r3, #0]
        break;
 800f07e:	e002      	b.n	800f086 <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f080:	f240 2323 	movw	r3, #547	@ 0x223
 800f084:	e000      	b.n	800f088 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3720      	adds	r7, #32
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	460b      	mov	r3, r1
 800f09a:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 800f09c:	2300      	movs	r3, #0
 800f09e:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 800f0a8:	887b      	ldrh	r3, [r7, #2]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d146      	bne.n	800f13c <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 800f0ae:	f107 030c 	add.w	r3, r7, #12
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	210e      	movs	r1, #14
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7ff fd54 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	81fb      	strh	r3, [r7, #14]
 800f0c0:	89fb      	ldrh	r3, [r7, #14]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <phhalHw_Pn5180_SetMinFDT+0x3a>
 800f0c6:	89fb      	ldrh	r3, [r7, #14]
 800f0c8:	e04a      	b.n	800f160 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 800f0ca:	89ba      	ldrh	r2, [r7, #12]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 800f0d0:	f107 030a 	add.w	r3, r7, #10
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	2109      	movs	r1, #9
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7ff fd43 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	81fb      	strh	r3, [r7, #14]
 800f0e2:	89fb      	ldrh	r3, [r7, #14]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d001      	beq.n	800f0ec <phhalHw_Pn5180_SetMinFDT+0x5c>
 800f0e8:	89fb      	ldrh	r3, [r7, #14]
 800f0ea:	e039      	b.n	800f160 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 800f0ec:	897b      	ldrh	r3, [r7, #10]
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d816      	bhi.n	800f120 <phhalHw_Pn5180_SetMinFDT+0x90>
 800f0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0f8 <phhalHw_Pn5180_SetMinFDT+0x68>)
 800f0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f8:	0800f109 	.word	0x0800f109
 800f0fc:	0800f10f 	.word	0x0800f10f
 800f100:	0800f115 	.word	0x0800f115
 800f104:	0800f11b 	.word	0x0800f11b
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 800f108:	2365      	movs	r3, #101	@ 0x65
 800f10a:	81bb      	strh	r3, [r7, #12]
            break;
 800f10c:	e009      	b.n	800f122 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 800f10e:	237f      	movs	r3, #127	@ 0x7f
 800f110:	81bb      	strh	r3, [r7, #12]
            break;
 800f112:	e006      	b.n	800f122 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 800f114:	2377      	movs	r3, #119	@ 0x77
 800f116:	81bb      	strh	r3, [r7, #12]
            break;
 800f118:	e003      	b.n	800f122 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 800f11a:	2380      	movs	r3, #128	@ 0x80
 800f11c:	81bb      	strh	r3, [r7, #12]
            break;
 800f11e:	e000      	b.n	800f122 <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 800f120:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 800f122:	89bb      	ldrh	r3, [r7, #12]
 800f124:	461a      	mov	r2, r3
 800f126:	210d      	movs	r1, #13
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7fe f8cd 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800f12e:	4603      	mov	r3, r0
 800f130:	81fb      	strh	r3, [r7, #14]
 800f132:	89fb      	ldrh	r3, [r7, #14]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d012      	beq.n	800f15e <phhalHw_Pn5180_SetMinFDT+0xce>
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	e011      	b.n	800f160 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 800f13c:	887b      	ldrh	r3, [r7, #2]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d10d      	bne.n	800f15e <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f146:	461a      	mov	r2, r3
 800f148:	210e      	movs	r1, #14
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7fe f8bc 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800f150:	4603      	mov	r3, r0
 800f152:	81fb      	strh	r3, [r7, #14]
 800f154:	89fb      	ldrh	r3, [r7, #14]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <phhalHw_Pn5180_SetMinFDT+0xce>
 800f15a:	89fb      	ldrh	r3, [r7, #14]
 800f15c:	e000      	b.n	800f160 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 800f15e:	2300      	movs	r3, #0
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b08a      	sub	sp, #40	@ 0x28
 800f16c:	af04      	add	r7, sp, #16
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	4611      	mov	r1, r2
 800f174:	461a      	mov	r2, r3
 800f176:	460b      	mov	r3, r1
 800f178:	80fb      	strh	r3, [r7, #6]
 800f17a:	4613      	mov	r3, r2
 800f17c:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	789b      	ldrb	r3, [r3, #2]
 800f184:	2b04      	cmp	r3, #4
 800f186:	d10f      	bne.n	800f1a8 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6858      	ldr	r0, [r3, #4]
 800f18c:	88fa      	ldrh	r2, [r7, #6]
 800f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f190:	9302      	str	r3, [sp, #8]
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	88bb      	ldrh	r3, [r7, #4]
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	4613      	mov	r3, r2
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	2100      	movs	r1, #0
 800f1a0:	f007 fde2 	bl	8016d68 <phbalReg_Exchange>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	e077      	b.n	800f298 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f1a8:	bf00      	nop
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	2102      	movs	r1, #2
 800f1ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f1b2:	f007 fd43 	bl	8016c3c <phDriver_PinRead>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1f6      	bne.n	800f1aa <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 fe3e 	bl	800fe44 <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6858      	ldr	r0, [r3, #4]
 800f1cc:	88fa      	ldrh	r2, [r7, #6]
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d0:	9302      	str	r3, [sp, #8]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	88fb      	ldrh	r3, [r7, #6]
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	2100      	movs	r1, #0
 800f1e0:	f007 fdc2 	bl	8016d68 <phbalReg_Exchange>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	82fb      	strh	r3, [r7, #22]
 800f1e8:	8afb      	ldrh	r3, [r7, #22]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <phhalHw_Pn5180_BalExchange+0x8a>
 800f1ee:	8afb      	ldrh	r3, [r7, #22]
 800f1f0:	e052      	b.n	800f298 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d109      	bne.n	800f210 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f1fc:	bf00      	nop
 800f1fe:	2201      	movs	r2, #1
 800f200:	2102      	movs	r1, #2
 800f202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f206:	f007 fd19 	bl	8016c3c <phDriver_PinRead>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d0f6      	beq.n	800f1fe <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	2101      	movs	r1, #1
 800f216:	4618      	mov	r0, r3
 800f218:	f000 fe14 	bl	800fe44 <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 800f21c:	88bb      	ldrh	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d039      	beq.n	800f296 <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f222:	bf00      	nop
 800f224:	2201      	movs	r2, #1
 800f226:	2102      	movs	r1, #2
 800f228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f22c:	f007 fd06 	bl	8016c3c <phDriver_PinRead>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1f6      	bne.n	800f224 <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	2100      	movs	r1, #0
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 fe01 	bl	800fe44 <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6858      	ldr	r0, [r3, #4]
 800f246:	88ba      	ldrh	r2, [r7, #4]
 800f248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24a:	9302      	str	r3, [sp, #8]
 800f24c:	6a3b      	ldr	r3, [r7, #32]
 800f24e:	9301      	str	r3, [sp, #4]
 800f250:	88bb      	ldrh	r3, [r7, #4]
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	4613      	mov	r3, r2
 800f256:	2200      	movs	r2, #0
 800f258:	2100      	movs	r1, #0
 800f25a:	f007 fd85 	bl	8016d68 <phbalReg_Exchange>
 800f25e:	4603      	mov	r3, r0
 800f260:	82fb      	strh	r3, [r7, #22]
 800f262:	8afb      	ldrh	r3, [r7, #22]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d001      	beq.n	800f26c <phhalHw_Pn5180_BalExchange+0x104>
 800f268:	8afb      	ldrh	r3, [r7, #22]
 800f26a:	e015      	b.n	800f298 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800f272:	2b01      	cmp	r3, #1
 800f274:	d109      	bne.n	800f28a <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 800f276:	bf00      	nop
 800f278:	2201      	movs	r2, #1
 800f27a:	2102      	movs	r1, #2
 800f27c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f280:	f007 fcdc 	bl	8016c3c <phDriver_PinRead>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0f6      	beq.n	800f278 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	2101      	movs	r1, #1
 800f290:	4618      	mov	r0, r3
 800f292:	f000 fdd7 	bl	800fe44 <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 800f296:	2300      	movs	r3, #0
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3718      	adds	r7, #24
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b090      	sub	sp, #64	@ 0x40
 800f2a4:	af02      	add	r7, sp, #8
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	607a      	str	r2, [r7, #4]
 800f2aa:	603b      	str	r3, [r7, #0]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800f2b0:	237f      	movs	r3, #127	@ 0x7f
 800f2b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	215e      	movs	r1, #94	@ 0x5e
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7fd ffef 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f2ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <phhalHw_Pn5180_Autocoll+0x58>
 800f2f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f2f6:	e25e      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d008      	beq.n	800f318 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d005      	beq.n	800f318 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d002      	beq.n	800f318 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 800f312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f314:	2b00      	cmp	r3, #0
 800f316:	d102      	bne.n	800f31e <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f318:	f240 2321 	movw	r3, #545	@ 0x221
 800f31c:	e24b      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f324:	2b01      	cmp	r3, #1
 800f326:	d103      	bne.n	800f330 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 800f328:	2301      	movs	r3, #1
 800f32a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800f32e:	e037      	b.n	800f3a0 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 800f330:	897b      	ldrh	r3, [r7, #10]
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 800f33a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f33e:	f043 0301 	orr.w	r3, r3, #1
 800f342:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 800f346:	897b      	ldrh	r3, [r7, #10]
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d005      	beq.n	800f35c <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 800f350:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f354:	f043 0302 	orr.w	r3, r3, #2
 800f358:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 800f35c:	897b      	ldrh	r3, [r7, #10]
 800f35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f362:	2b00      	cmp	r3, #0
 800f364:	d005      	beq.n	800f372 <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 800f366:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f36a:	f043 0304 	orr.w	r3, r3, #4
 800f36e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 800f372:	897b      	ldrh	r3, [r7, #10]
 800f374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 800f37c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f380:	f043 0308 	orr.w	r3, r3, #8
 800f384:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 800f388:	897b      	ldrh	r3, [r7, #10]
 800f38a:	f003 0302 	and.w	r3, r3, #2
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d104      	bne.n	800f39c <phhalHw_Pn5180_Autocoll+0xfc>
 800f392:	897b      	ldrh	r3, [r7, #10]
 800f394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 800f39c:	2300      	movs	r3, #0
 800f39e:	e20a      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f003 f84c 	bl	8012460 <phhalHw_Pn5180_Int_IdleCommand>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f3cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <phhalHw_Pn5180_Autocoll+0x136>
 800f3d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3d4:	e1ef      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f001 fd17 	bl	8010e0a <phhalHw_Pn5180_Instr_RfOff>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f3e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d001      	beq.n	800f3ea <phhalHw_Pn5180_Autocoll+0x14a>
 800f3e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3e8:	e1e5      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800f3ea:	4b9d      	ldr	r3, [pc, #628]	@ (800f660 <phhalHw_Pn5180_Autocoll+0x3c0>)
 800f3ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800f3ee:	4a9d      	ldr	r2, [pc, #628]	@ (800f664 <phhalHw_Pn5180_Autocoll+0x3c4>)
 800f3f0:	2103      	movs	r1, #3
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f000 fd72 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f3fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <phhalHw_Pn5180_Autocoll+0x166>
 800f402:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f404:	e1d7      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f40c:	2300      	movs	r3, #0
 800f40e:	2201      	movs	r2, #1
 800f410:	2100      	movs	r1, #0
 800f412:	f007 fe4b 	bl	80170ac <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800f416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f418:	2101      	movs	r1, #1
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f000 fd5e 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800f420:	4603      	mov	r3, r0
 800f422:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f424:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <phhalHw_Pn5180_Autocoll+0x18e>
 800f42a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f42c:	e1c3      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 800f42e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800f432:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f436:	4619      	mov	r1, r3
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f001 fa3b 	bl	80108b4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 800f43e:	4603      	mov	r3, r0
 800f440:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f442:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <phhalHw_Pn5180_Autocoll+0x1ac>
 800f448:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f44a:	e1b4      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 800f44c:	f107 0314 	add.w	r3, r7, #20
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f454:	2200      	movs	r2, #0
 800f456:	2101      	movs	r1, #1
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f003 f8b3 	bl	80125c4 <phhalHw_Pn5180_WaitIrq>
 800f45e:	4603      	mov	r3, r0
 800f460:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 800f462:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b12      	cmp	r3, #18
 800f468:	d10c      	bne.n	800f484 <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f001 fa7b 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f470:	4603      	mov	r3, r0
 800f472:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f474:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <phhalHw_Pn5180_Autocoll+0x1de>
 800f47a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f47c:	e19b      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 800f47e:	f240 2312 	movw	r3, #530	@ 0x212
 800f482:	e198      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00c      	beq.n	800f4a8 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f001 fa69 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f494:	4603      	mov	r3, r0
 800f496:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f498:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d001      	beq.n	800f4a2 <phhalHw_Pn5180_Autocoll+0x202>
 800f49e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4a0:	e189      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 800f4a2:	f240 237f 	movw	r3, #639	@ 0x27f
 800f4a6:	e186      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 815d 	beq.w	800f76e <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 800f4b4:	231b      	movs	r3, #27
 800f4b6:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 800f4b8:	231a      	movs	r3, #26
 800f4ba:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 800f4bc:	2313      	movs	r3, #19
 800f4be:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 800f4c0:	231d      	movs	r3, #29
 800f4c2:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 800f4c4:	f107 0318 	add.w	r3, r7, #24
 800f4c8:	f107 011c 	add.w	r1, r7, #28
 800f4cc:	2204      	movs	r2, #4
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 ff86 	bl	80103e0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f4d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d001      	beq.n	800f4e2 <phhalHw_Pn5180_Autocoll+0x242>
 800f4de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4e0:	e169      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	021b      	lsls	r3, r3, #8
 800f4f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	3302      	adds	r3, #2
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	041b      	lsls	r3, r3, #16
 800f4fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f500:	4313      	orrs	r3, r2
 800f502:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	3303      	adds	r3, #3
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	061b      	lsls	r3, r3, #24
 800f50c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f50e:	4313      	orrs	r3, r2
 800f510:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 800f512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f514:	0f5b      	lsrs	r3, r3, #29
 800f516:	b2db      	uxtb	r3, r3
 800f518:	f003 0303 	and.w	r3, r3, #3
 800f51c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	3304      	adds	r3, #4
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	3305      	adds	r3, #5
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	021b      	lsls	r3, r3, #8
 800f530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f532:	4313      	orrs	r3, r2
 800f534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	3306      	adds	r3, #6
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	041b      	lsls	r3, r3, #16
 800f53e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f540:	4313      	orrs	r3, r2
 800f542:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	3307      	adds	r3, #7
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	061b      	lsls	r3, r3, #24
 800f54c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f54e:	4313      	orrs	r3, r2
 800f550:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 800f552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f554:	b2db      	uxtb	r3, r3
 800f556:	f003 0307 	and.w	r3, r3, #7
 800f55a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 800f55e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f562:	3b04      	subs	r3, #4
 800f564:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	3308      	adds	r3, #8
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	3309      	adds	r3, #9
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	021b      	lsls	r3, r3, #8
 800f578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f57a:	4313      	orrs	r3, r2
 800f57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	330a      	adds	r3, #10
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	041b      	lsls	r3, r3, #16
 800f586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f588:	4313      	orrs	r3, r2
 800f58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	330b      	adds	r3, #11
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	061b      	lsls	r3, r3, #24
 800f594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f596:	4313      	orrs	r3, r2
 800f598:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	330c      	adds	r3, #12
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	330d      	adds	r3, #13
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	021b      	lsls	r3, r3, #8
 800f5aa:	6a3a      	ldr	r2, [r7, #32]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	330e      	adds	r3, #14
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	041b      	lsls	r3, r3, #16
 800f5b8:	6a3a      	ldr	r2, [r7, #32]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	330f      	adds	r3, #15
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	061b      	lsls	r3, r3, #24
 800f5c6:	6a3a      	ldr	r2, [r7, #32]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 800f5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00c      	beq.n	800f5f0 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f001 f9c5 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f5e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <phhalHw_Pn5180_Autocoll+0x34a>
 800f5e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f5e8:	e0e5      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 800f5ea:	f240 2302 	movw	r3, #514	@ 0x202
 800f5ee:	e0e2      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 800f5f0:	683a      	ldr	r2, [r7, #0]
 800f5f2:	6879      	ldr	r1, [r7, #4]
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f001 fd0a 	bl	801100e <phhalHw_Pn5180_ReadData>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f5fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f600:	2b00      	cmp	r3, #0
 800f602:	d001      	beq.n	800f608 <phhalHw_Pn5180_Autocoll+0x368>
 800f604:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f606:	e0d6      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	f003 0310 	and.w	r3, r3, #16
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d02a      	beq.n	800f668 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00c      	beq.n	800f636 <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f001 f9a2 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f622:	4603      	mov	r3, r0
 800f624:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f626:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <phhalHw_Pn5180_Autocoll+0x390>
 800f62c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f62e:	e0c2      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800f630:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800f634:	e0bf      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 800f63e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f642:	2b00      	cmp	r3, #0
 800f644:	d134      	bne.n	800f6b0 <phhalHw_Pn5180_Autocoll+0x410>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2bf0      	cmp	r3, #240	@ 0xf0
 800f64e:	d12f      	bne.n	800f6b0 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 800f650:	2301      	movs	r3, #1
 800f652:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 800f656:	2301      	movs	r3, #1
 800f658:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f65c:	e028      	b.n	800f6b0 <phhalHw_Pn5180_Autocoll+0x410>
 800f65e:	bf00      	nop
 800f660:	00020041 	.word	0x00020041
 800f664:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d111      	bne.n	800f696 <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2201      	movs	r2, #1
 800f676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 800f67a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d105      	bne.n	800f68e <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 800f682:	2301      	movs	r3, #1
 800f684:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 800f688:	2303      	movs	r3, #3
 800f68a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 800f68e:	2301      	movs	r3, #1
 800f690:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800f694:	e00c      	b.n	800f6b0 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f001 f965 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f69c:	4603      	mov	r3, r0
 800f69e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f6a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <phhalHw_Pn5180_Autocoll+0x40a>
 800f6a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f6a8:	e085      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 800f6aa:	f240 2306 	movw	r3, #518	@ 0x206
 800f6ae:	e082      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d115      	bne.n	800f6e6 <phhalHw_Pn5180_Autocoll+0x446>
 800f6ba:	897b      	ldrh	r3, [r7, #10]
 800f6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d110      	bne.n	800f6e6 <phhalHw_Pn5180_Autocoll+0x446>
 800f6c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d10c      	bne.n	800f6e6 <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	f001 f94a 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f6d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <phhalHw_Pn5180_Autocoll+0x440>
 800f6dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f6de:	e06a      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 800f6e0:	f240 2306 	movw	r3, #518	@ 0x206
 800f6e4:	e067      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 800f6e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d108      	bne.n	800f700 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 800f6ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6fc:	801a      	strh	r2, [r3, #0]
 800f6fe:	e01b      	b.n	800f738 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 800f700:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f704:	2b01      	cmp	r3, #1
 800f706:	d108      	bne.n	800f71a <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 800f708:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f712:	b29a      	uxth	r2, r3
 800f714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f716:	801a      	strh	r2, [r3, #0]
 800f718:	e00e      	b.n	800f738 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 800f71a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f71e:	2b02      	cmp	r3, #2
 800f720:	d108      	bne.n	800f734 <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 800f722:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f726:	b29b      	uxth	r3, r3
 800f728:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f730:	801a      	strh	r2, [r3, #0]
 800f732:	e001      	b.n	800f738 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 800f734:	2305      	movs	r3, #5
 800f736:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	881a      	ldrh	r2, [r3, #0]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	695a      	ldr	r2, [r3, #20]
 800f744:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800f748:	441a      	add	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	8b5a      	ldrh	r2, [r3, #26]
 800f752:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f756:	b29b      	uxth	r3, r3
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 800f760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f762:	881a      	ldrh	r2, [r3, #0]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 800f768:	2300      	movs	r3, #0
 800f76a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f76c:	e006      	b.n	800f77c <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f774:	2b00      	cmp	r3, #0
 800f776:	d001      	beq.n	800f77c <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 800f778:	2310      	movs	r3, #16
 800f77a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 800f77c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d009      	beq.n	800f796 <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f001 f8ef 	bl	8010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 800f788:	4603      	mov	r3, r0
 800f78a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f78c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d001      	beq.n	800f796 <phhalHw_Pn5180_Autocoll+0x4f6>
 800f792:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f794:	e00f      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800f796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <phhalHw_Pn5180_Autocoll+0x514>
 800f79c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f79e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <phhalHw_Pn5180_Autocoll+0x514>
 800f7a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	e000      	b.n	800f7b6 <phhalHw_Pn5180_Autocoll+0x516>
 800f7b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3738      	adds	r7, #56	@ 0x38
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop

0800f7c0 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b090      	sub	sp, #64	@ 0x40
 800f7c4:	af02      	add	r7, sp, #8
 800f7c6:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d002      	beq.n	800f7e8 <phhalHw_Pn5180_Lpcd+0x28>
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d072      	beq.n	800f8cc <phhalHw_Pn5180_Lpcd+0x10c>
 800f7e6:	e0c4      	b.n	800f972 <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 800f7e8:	f107 031c 	add.w	r3, r7, #28
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	2126      	movs	r1, #38	@ 0x26
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 fd87 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f7fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <phhalHw_Pn5180_Lpcd+0x44>
 800f800:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f802:	e0c9      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 800f804:	f107 0210 	add.w	r2, r7, #16
 800f808:	2305      	movs	r3, #5
 800f80a:	2134      	movs	r1, #52	@ 0x34
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fef9 	bl	8010604 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f812:	4603      	mov	r3, r0
 800f814:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f816:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d001      	beq.n	800f820 <phhalHw_Pn5180_Lpcd+0x60>
 800f81c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f81e:	e0bb      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 800f820:	f107 020c 	add.w	r2, r7, #12
 800f824:	2301      	movs	r3, #1
 800f826:	2159      	movs	r1, #89	@ 0x59
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 feeb 	bl	8010604 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800f82e:	4603      	mov	r3, r0
 800f830:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f832:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f834:	2b00      	cmp	r3, #0
 800f836:	d001      	beq.n	800f83c <phhalHw_Pn5180_Lpcd+0x7c>
 800f838:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f83a:	e0ad      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 800f83c:	7d3b      	ldrb	r3, [r7, #20]
 800f83e:	f003 0303 	and.w	r3, r3, #3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d109      	bne.n	800f85a <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 800f846:	7c3b      	ldrb	r3, [r7, #16]
 800f848:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 800f84a:	7c7b      	ldrb	r3, [r7, #17]
 800f84c:	021b      	lsls	r3, r3, #8
 800f84e:	b29b      	uxth	r3, r3
 800f850:	461a      	mov	r2, r3
 800f852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f854:	4313      	orrs	r3, r2
 800f856:	633b      	str	r3, [r7, #48]	@ 0x30
 800f858:	e002      	b.n	800f860 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f85e:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 800f860:	7cfb      	ldrb	r3, [r7, #19]
 800f862:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	b29b      	uxth	r3, r3
 800f868:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 800f872:	7b3b      	ldrb	r3, [r7, #12]
 800f874:	f003 0301 	and.w	r3, r3, #1
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d009      	beq.n	800f890 <phhalHw_Pn5180_Lpcd+0xd0>
 800f87c:	69fa      	ldr	r2, [r7, #28]
 800f87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f880:	4053      	eors	r3, r2
 800f882:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f886:	2b00      	cmp	r3, #0
 800f888:	d002      	beq.n	800f890 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 800f88a:	2300      	movs	r3, #0
 800f88c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 800f88e:	e073      	b.n	800f978 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f896:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 800f898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f89a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f89e:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 800f8a0:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 800f8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d203      	bcs.n	800f8b0 <phhalHw_Pn5180_Lpcd+0xf0>
 800f8a8:	69fa      	ldr	r2, [r7, #28]
 800f8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	e002      	b.n	800f8b6 <phhalHw_Pn5180_Lpcd+0xf6>
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8b4:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 800f8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 800f8b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d902      	bls.n	800f8c6 <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f8c4:	e058      	b.n	800f978 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f8ca:	e055      	b.n	800f978 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800f8cc:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 800f8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 800f8d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8d4:	2103      	movs	r1, #3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fb00 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f8e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d001      	beq.n	800f8ea <phhalHw_Pn5180_Lpcd+0x12a>
 800f8e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f8e8:	e056      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	f007 fbd9 	bl	80170ac <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800f8fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 faec 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800f904:	4603      	mov	r3, r0
 800f906:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f908:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d001      	beq.n	800f912 <phhalHw_Pn5180_Lpcd+0x152>
 800f90e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f910:	e042      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 ff72 	bl	8010802 <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 800f91e:	4603      	mov	r3, r0
 800f920:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <phhalHw_Pn5180_Lpcd+0x16c>
 800f928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f92a:	e035      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800f92c:	f107 0318 	add.w	r3, r7, #24
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f934:	2200      	movs	r2, #0
 800f936:	2101      	movs	r1, #1
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f002 fe43 	bl	80125c4 <phhalHw_Pn5180_WaitIrq>
 800f93e:	4603      	mov	r3, r0
 800f940:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f942:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f944:	2b00      	cmp	r3, #0
 800f946:	d001      	beq.n	800f94c <phhalHw_Pn5180_Lpcd+0x18c>
 800f948:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f94a:	e025      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f952:	2b00      	cmp	r3, #0
 800f954:	d002      	beq.n	800f95c <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 800f956:	2300      	movs	r3, #0
 800f958:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 800f95a:	e00d      	b.n	800f978 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 800f966:	2321      	movs	r3, #33	@ 0x21
 800f968:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f96a:	e005      	b.n	800f978 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 800f96c:	2301      	movs	r3, #1
 800f96e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 800f970:	e002      	b.n	800f978 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f972:	f240 2321 	movw	r3, #545	@ 0x221
 800f976:	e00f      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800f978:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00b      	beq.n	800f996 <phhalHw_Pn5180_Lpcd+0x1d6>
 800f97e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f980:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f984:	2b00      	cmp	r3, #0
 800f986:	d106      	bne.n	800f996 <phhalHw_Pn5180_Lpcd+0x1d6>
 800f988:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f992:	b29b      	uxth	r3, r3
 800f994:	e000      	b.n	800f998 <phhalHw_Pn5180_Lpcd+0x1d8>
 800f996:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3738      	adds	r7, #56	@ 0x38
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b08e      	sub	sp, #56	@ 0x38
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	71fb      	strb	r3, [r7, #7]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d101      	bne.n	800f9e4 <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 800f9e0:	2321      	movs	r3, #33	@ 0x21
 800f9e2:	e16b      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 800f9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d101      	bne.n	800f9ee <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 800f9ea:	2321      	movs	r3, #33	@ 0x21
 800f9ec:	e166      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 800f9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 800f9f4:	2321      	movs	r3, #33	@ 0x21
 800f9f6:	e161      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 800f9f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d101      	bne.n	800fa02 <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 800f9fe:	2321      	movs	r3, #33	@ 0x21
 800fa00:	e15c      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 800fa02:	79fb      	ldrb	r3, [r7, #7]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d02f      	beq.n	800fa68 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 800fa10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa14:	085b      	lsrs	r3, r3, #1
 800fa16:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 800fa1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 800fa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa28:	3301      	adds	r3, #1
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	091b      	lsrs	r3, r3, #4
 800fa2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 800fa32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa36:	f003 0303 	and.w	r3, r3, #3
 800fa3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 800fa3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d001      	beq.n	800fa4a <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d109      	bne.n	800fa5e <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 800fa4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fa4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d007      	beq.n	800fa66 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fa56:	f240 2321 	movw	r3, #545	@ 0x221
 800fa5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 800fa5c:	e003      	b.n	800fa66 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800fa5e:	f240 2321 	movw	r3, #545	@ 0x221
 800fa62:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fa64:	e000      	b.n	800fa68 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 800fa66:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d120      	bne.n	800fab4 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2200      	movs	r2, #0
 800fa76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800fa7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d110      	bne.n	800faa2 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800fa80:	f107 0314 	add.w	r3, r7, #20
 800fa84:	9300      	str	r3, [sp, #0]
 800fa86:	2322      	movs	r3, #34	@ 0x22
 800fa88:	f04f 32ff 	mov.w	r2, #4294967295
 800fa8c:	2105      	movs	r1, #5
 800fa8e:	488d      	ldr	r0, [pc, #564]	@ (800fcc4 <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 800fa90:	f007 fa40 	bl	8016f14 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	f003 0320 	and.w	r3, r3, #32
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 800fa9e:	2312      	movs	r3, #18
 800faa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800faa2:	f007 f939 	bl	8016d18 <phDriver_TimerStop>
 800faa6:	4603      	mov	r3, r0
 800faa8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800faaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800faac:	2b00      	cmp	r3, #0
 800faae:	d001      	beq.n	800fab4 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 800fab0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fab2:	e103      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800fab4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 800faba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fabc:	e0fe      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fabe:	4b82      	ldr	r3, [pc, #520]	@ (800fcc8 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 800fac0:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800fac2:	4a82      	ldr	r2, [pc, #520]	@ (800fccc <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 800fac4:	2103      	movs	r1, #3
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f000 fa08 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800facc:	4603      	mov	r3, r0
 800face:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fad0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d001      	beq.n	800fada <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 800fad6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fad8:	e0f0      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fae0:	2300      	movs	r3, #0
 800fae2:	2201      	movs	r2, #1
 800fae4:	2100      	movs	r1, #0
 800fae6:	f007 fae1 	bl	80170ac <phOsal_EventClear>
 800faea:	4603      	mov	r3, r0
 800faec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800faee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 800faf4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800faf6:	e0e1      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800faf8:	6a3a      	ldr	r2, [r7, #32]
 800fafa:	2101      	movs	r1, #1
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 fa63 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fb02:	4603      	mov	r3, r0
 800fb04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d001      	beq.n	800fb10 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 800fb0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb0e:	e0d5      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 800fb10:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d101      	bne.n	800fb1c <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 800fb1c:	79b9      	ldrb	r1, [r7, #6]
 800fb1e:	79fa      	ldrb	r2, [r7, #7]
 800fb20:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fb24:	9301      	str	r3, [sp, #4]
 800fb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	68b9      	ldr	r1, [r7, #8]
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f000 ff4e 	bl	80109d0 <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 800fb34:	4603      	mov	r3, r0
 800fb36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 800fb3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb40:	e0bc      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800fb42:	f107 0318 	add.w	r3, r7, #24
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	6a3b      	ldr	r3, [r7, #32]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	2101      	movs	r1, #1
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f002 fd38 	bl	80125c4 <phhalHw_Pn5180_WaitIrq>
 800fb54:	4603      	mov	r3, r0
 800fb56:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb58:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d001      	beq.n	800fb62 <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 800fb5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb60:	e0ac      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	f003 0301 	and.w	r3, r3, #1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f000 8095 	beq.w	800fc98 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 800fb6e:	f107 031c 	add.w	r3, r7, #28
 800fb72:	4619      	mov	r1, r3
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f000 ffba 	bl	8010aee <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 800fb84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb86:	e099      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 800fb88:	8bbb      	ldrh	r3, [r7, #28]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f001 f803 	bl	8010b9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 800fb94:	4603      	mov	r3, r0
 800fb96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d001      	beq.n	800fba2 <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 800fb9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fba0:	e08c      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 800fba2:	8bba      	ldrh	r2, [r7, #28]
 800fba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fba6:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 800fba8:	8bbb      	ldrh	r3, [r7, #28]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d071      	beq.n	800fc92 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 800fbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	f003 0307 	and.w	r3, r3, #7
 800fbb8:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 800fbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbbc:	3302      	adds	r3, #2
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fbc4:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 800fbc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	b25a      	sxtb	r2, r3
 800fbce:	7fbb      	ldrb	r3, [r7, #30]
 800fbd0:	09db      	lsrs	r3, r3, #7
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	b25b      	sxtb	r3, r3
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	b25b      	sxtb	r3, r3
 800fbda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 800fbe2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbec:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 800fbf0:	e04a      	b.n	800fc88 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 800fbf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fbf8:	4413      	add	r3, r2
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	d112      	bne.n	800fc26 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 800fc00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc06:	3301      	adds	r3, #1
 800fc08:	4413      	add	r3, r2
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d10a      	bne.n	800fc26 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 800fc10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc16:	3302      	adds	r3, #2
 800fc18:	4413      	add	r3, r2
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d102      	bne.n	800fc26 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 800fc20:	2301      	movs	r3, #1
 800fc22:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fc24:	e028      	b.n	800fc78 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 800fc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc2c:	4413      	add	r3, r2
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	2b03      	cmp	r3, #3
 800fc32:	d11e      	bne.n	800fc72 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 800fc34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	4413      	add	r3, r2
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d116      	bne.n	800fc72 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 800fc44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc4a:	3302      	adds	r3, #2
 800fc4c:	4413      	add	r3, r2
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10e      	bne.n	800fc72 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 800fc54:	2303      	movs	r3, #3
 800fc56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 800fc58:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fc5c:	f003 0301 	and.w	r3, r3, #1
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d11b      	bne.n	800fc9c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 800fc64:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800fc68:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d115      	bne.n	800fc9c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 800fc70:	e002      	b.n	800fc78 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 800fc72:	2300      	movs	r3, #0
 800fc74:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 800fc76:	e011      	b.n	800fc9c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 800fc78:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc7a:	3303      	adds	r3, #3
 800fc7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 800fc7e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fc82:	3b01      	subs	r3, #1
 800fc84:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 800fc88:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1b0      	bne.n	800fbf2 <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 800fc90:	e004      	b.n	800fc9c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 800fc92:	237f      	movs	r3, #127	@ 0x7f
 800fc94:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fc96:	e001      	b.n	800fc9c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800fc9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00b      	beq.n	800fcba <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 800fca2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fca4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d106      	bne.n	800fcba <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 800fcac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	e000      	b.n	800fcbc <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 800fcba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3730      	adds	r7, #48	@ 0x30
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	2000178c 	.word	0x2000178c
 800fcc8:	00020001 	.word	0x00020001
 800fccc:	000fffff 	.word	0x000fffff

0800fcd0 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b08a      	sub	sp, #40	@ 0x28
 800fcd4:	af02      	add	r7, sp, #8
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 800fce6:	2321      	movs	r3, #33	@ 0x21
 800fce8:	e07d      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d101      	bne.n	800fcf4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 800fcf0:	2321      	movs	r3, #33	@ 0x21
 800fcf2:	e078      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 800fcf4:	4b3e      	ldr	r3, [pc, #248]	@ (800fdf0 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 800fcf6:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 800fcf8:	69ba      	ldr	r2, [r7, #24]
 800fcfa:	2103      	movs	r1, #3
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 f8ed 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 800fd02:	4603      	mov	r3, r0
 800fd04:	82fb      	strh	r3, [r7, #22]
 800fd06:	8afb      	ldrh	r3, [r7, #22]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 800fd0c:	8afb      	ldrh	r3, [r7, #22]
 800fd0e:	e06a      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800fd16:	2300      	movs	r3, #0
 800fd18:	2201      	movs	r2, #1
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	f007 f9c6 	bl	80170ac <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800fd20:	69ba      	ldr	r2, [r7, #24]
 800fd22:	2101      	movs	r1, #1
 800fd24:	68f8      	ldr	r0, [r7, #12]
 800fd26:	f000 f94f 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	82fb      	strh	r3, [r7, #22]
 800fd2e:	8afb      	ldrh	r3, [r7, #22]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d001      	beq.n	800fd38 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 800fd34:	8afb      	ldrh	r3, [r7, #22]
 800fd36:	e056      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 ff8e 	bl	8010c5a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	82fb      	strh	r3, [r7, #22]
 800fd42:	8afb      	ldrh	r3, [r7, #22]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 800fd48:	8afb      	ldrh	r3, [r7, #22]
 800fd4a:	e04c      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 800fd4c:	f107 0310 	add.w	r3, r7, #16
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	2200      	movs	r2, #0
 800fd56:	2101      	movs	r1, #1
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f002 fc33 	bl	80125c4 <phhalHw_Pn5180_WaitIrq>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	82fb      	strh	r3, [r7, #22]
 800fd62:	8afb      	ldrh	r3, [r7, #22]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 800fd68:	8afb      	ldrh	r3, [r7, #22]
 800fd6a:	e03c      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	f003 0301 	and.w	r3, r3, #1
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d025      	beq.n	800fdc2 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 800fd76:	f107 0314 	add.w	r3, r7, #20
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f000 feb6 	bl	8010aee <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 800fd82:	4603      	mov	r3, r0
 800fd84:	82fb      	strh	r3, [r7, #22]
 800fd86:	8afb      	ldrh	r3, [r7, #22]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 800fd8c:	8afb      	ldrh	r3, [r7, #22]
 800fd8e:	e02a      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 800fd90:	8abb      	ldrh	r3, [r7, #20]
 800fd92:	461a      	mov	r2, r3
 800fd94:	68b9      	ldr	r1, [r7, #8]
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	f000 feff 	bl	8010b9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	82fb      	strh	r3, [r7, #22]
 800fda0:	8afb      	ldrh	r3, [r7, #22]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 800fda6:	8afb      	ldrh	r3, [r7, #22]
 800fda8:	e01d      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 800fdaa:	8aba      	ldrh	r2, [r7, #20]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 800fdb0:	8abb      	ldrh	r3, [r7, #20]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	83fb      	strh	r3, [r7, #30]
 800fdba:	e004      	b.n	800fdc6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 800fdbc:	237f      	movs	r3, #127	@ 0x7f
 800fdbe:	83fb      	strh	r3, [r7, #30]
 800fdc0:	e001      	b.n	800fdc6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 800fdc6:	8bfb      	ldrh	r3, [r7, #30]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d00b      	beq.n	800fde4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 800fdcc:	8bfb      	ldrh	r3, [r7, #30]
 800fdce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d106      	bne.n	800fde4 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 800fdd6:	8bfb      	ldrh	r3, [r7, #30]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	e000      	b.n	800fde6 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 800fde4:	8bfb      	ldrh	r3, [r7, #30]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3720      	adds	r7, #32
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	00020001 	.word	0x00020001

0800fdf4 <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	2120      	movs	r1, #32
 800fdfc:	4810      	ldr	r0, [pc, #64]	@ (800fe40 <phhalHw_Pn5180_Reset+0x4c>)
 800fdfe:	f006 ff2f 	bl	8016c60 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800fe02:	2200      	movs	r2, #0
 800fe04:	2102      	movs	r1, #2
 800fe06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fe0a:	f006 ff3b 	bl	8016c84 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2120      	movs	r1, #32
 800fe12:	480b      	ldr	r0, [pc, #44]	@ (800fe40 <phhalHw_Pn5180_Reset+0x4c>)
 800fe14:	f006 ff24 	bl	8016c60 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800fe18:	2200      	movs	r2, #0
 800fe1a:	2102      	movs	r1, #2
 800fe1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fe20:	f006 ff30 	bl	8016c84 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 800fe24:	2201      	movs	r2, #1
 800fe26:	2120      	movs	r1, #32
 800fe28:	4805      	ldr	r0, [pc, #20]	@ (800fe40 <phhalHw_Pn5180_Reset+0x4c>)
 800fe2a:	f006 ff19 	bl	8016c60 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 800fe2e:	2200      	movs	r2, #0
 800fe30:	2102      	movs	r1, #2
 800fe32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fe36:	f006 ff25 	bl	8016c84 <phDriver_TimerStart>
#endif /*_WIN32*/
}
 800fe3a:	bf00      	nop
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	48000400 	.word	0x48000400

0800fe44 <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	789b      	ldrb	r3, [r3, #2]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d107      	bne.n	800fe68 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 800fe58:	78fb      	ldrb	r3, [r7, #3]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fe60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800fe64:	f006 fefc 	bl	8016c60 <phDriver_PinWrite>
    }
}
 800fe68:	bf00      	nop
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800fe8c:	801a      	strh	r2, [r3, #0]
}
 800fe8e:	bf00      	nop
 800fe90:	3714      	adds	r7, #20
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr
	...

0800fe9c <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	4603      	mov	r3, r0
 800fea4:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 800fea6:	2300      	movs	r3, #0
 800fea8:	73fb      	strb	r3, [r7, #15]
 800feaa:	e00b      	b.n	800fec4 <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	4a0a      	ldr	r2, [pc, #40]	@ (800fed8 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 800feb0:	5cd3      	ldrb	r3, [r2, r3]
 800feb2:	79fa      	ldrb	r2, [r7, #7]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d102      	bne.n	800febe <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 800feb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800febc:	e006      	b.n	800fecc <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	3301      	adds	r3, #1
 800fec2:	73fb      	strb	r3, [r7, #15]
 800fec4:	7bfb      	ldrb	r3, [r7, #15]
 800fec6:	2b06      	cmp	r3, #6
 800fec8:	d9f0      	bls.n	800feac <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 800feca:	2300      	movs	r3, #0

}
 800fecc:	4618      	mov	r0, r3
 800fece:	3714      	adds	r7, #20
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr
 800fed8:	080201b8 	.word	0x080201b8

0800fedc <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b08a      	sub	sp, #40	@ 0x28
 800fee0:	af02      	add	r7, sp, #8
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	460b      	mov	r3, r1
 800fee6:	607a      	str	r2, [r7, #4]
 800fee8:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d006      	beq.n	800fefe <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 800fef0:	7afb      	ldrb	r3, [r7, #11]
 800fef2:	2b43      	cmp	r3, #67	@ 0x43
 800fef4:	d906      	bls.n	800ff04 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 800fef6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	db02      	blt.n	800ff04 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fefe:	f240 2321 	movw	r3, #545	@ 0x221
 800ff02:	e05d      	b.n	800ffc0 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 800ff04:	7afb      	ldrb	r3, [r7, #11]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7ff ffc8 	bl	800fe9c <phhalHw_Pn5180_Check_Reg_Readonly>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	83fb      	strh	r3, [r7, #30]
 800ff10:	8bfb      	ldrh	r3, [r7, #30]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 800ff16:	8bfb      	ldrh	r3, [r7, #30]
 800ff18:	e052      	b.n	800ffc0 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 800ff1e:	7f7b      	ldrb	r3, [r7, #29]
 800ff20:	1c5a      	adds	r2, r3, #1
 800ff22:	777a      	strb	r2, [r7, #29]
 800ff24:	3320      	adds	r3, #32
 800ff26:	443b      	add	r3, r7
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 800ff2e:	7f7b      	ldrb	r3, [r7, #29]
 800ff30:	1c5a      	adds	r2, r3, #1
 800ff32:	777a      	strb	r2, [r7, #29]
 800ff34:	3320      	adds	r3, #32
 800ff36:	443b      	add	r3, r7
 800ff38:	7afa      	ldrb	r2, [r7, #11]
 800ff3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 800ff3e:	7f7b      	ldrb	r3, [r7, #29]
 800ff40:	1c5a      	adds	r2, r3, #1
 800ff42:	777a      	strb	r2, [r7, #29]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	3320      	adds	r3, #32
 800ff4a:	443b      	add	r3, r7
 800ff4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	0a1a      	lsrs	r2, r3, #8
 800ff54:	7f7b      	ldrb	r3, [r7, #29]
 800ff56:	1c59      	adds	r1, r3, #1
 800ff58:	7779      	strb	r1, [r7, #29]
 800ff5a:	b2d2      	uxtb	r2, r2
 800ff5c:	3320      	adds	r3, #32
 800ff5e:	443b      	add	r3, r7
 800ff60:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	0c1a      	lsrs	r2, r3, #16
 800ff68:	7f7b      	ldrb	r3, [r7, #29]
 800ff6a:	1c59      	adds	r1, r3, #1
 800ff6c:	7779      	strb	r1, [r7, #29]
 800ff6e:	b2d2      	uxtb	r2, r2
 800ff70:	3320      	adds	r3, #32
 800ff72:	443b      	add	r3, r7
 800ff74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	0e1a      	lsrs	r2, r3, #24
 800ff7c:	7f7b      	ldrb	r3, [r7, #29]
 800ff7e:	1c59      	adds	r1, r3, #1
 800ff80:	7779      	strb	r1, [r7, #29]
 800ff82:	b2d2      	uxtb	r2, r2
 800ff84:	3320      	adds	r3, #32
 800ff86:	443b      	add	r3, r7
 800ff88:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800ff90:	7f7b      	ldrb	r3, [r7, #29]
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	7f3b      	ldrb	r3, [r7, #28]
 800ff96:	b298      	uxth	r0, r3
 800ff98:	f107 0114 	add.w	r1, r7, #20
 800ff9c:	f107 031a 	add.w	r3, r7, #26
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	f107 0310 	add.w	r3, r7, #16
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f7ff f8dc 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	83fb      	strh	r3, [r7, #30]
 800ffb4:	8bfb      	ldrh	r3, [r7, #30]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 800ffba:	8bfb      	ldrh	r3, [r7, #30]
 800ffbc:	e000      	b.n	800ffc0 <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b08a      	sub	sp, #40	@ 0x28
 800ffcc:	af02      	add	r7, sp, #8
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	607a      	str	r2, [r7, #4]
 800ffd4:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 800ffdc:	7afb      	ldrb	r3, [r7, #11]
 800ffde:	2b43      	cmp	r3, #67	@ 0x43
 800ffe0:	d906      	bls.n	800fff0 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 800ffe2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	db02      	blt.n	800fff0 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800ffea:	f240 2321 	movw	r3, #545	@ 0x221
 800ffee:	e05d      	b.n	80100ac <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 800fff0:	7afb      	ldrb	r3, [r7, #11]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff ff52 	bl	800fe9c <phhalHw_Pn5180_Check_Reg_Readonly>
 800fff8:	4603      	mov	r3, r0
 800fffa:	83fb      	strh	r3, [r7, #30]
 800fffc:	8bfb      	ldrh	r3, [r7, #30]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d001      	beq.n	8010006 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 8010002:	8bfb      	ldrh	r3, [r7, #30]
 8010004:	e052      	b.n	80100ac <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 8010006:	2300      	movs	r3, #0
 8010008:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 801000a:	7f7b      	ldrb	r3, [r7, #29]
 801000c:	1c5a      	adds	r2, r3, #1
 801000e:	777a      	strb	r2, [r7, #29]
 8010010:	3320      	adds	r3, #32
 8010012:	443b      	add	r3, r7
 8010014:	2201      	movs	r2, #1
 8010016:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801001a:	7f7b      	ldrb	r3, [r7, #29]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	777a      	strb	r2, [r7, #29]
 8010020:	3320      	adds	r3, #32
 8010022:	443b      	add	r3, r7
 8010024:	7afa      	ldrb	r2, [r7, #11]
 8010026:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 801002a:	7f7b      	ldrb	r3, [r7, #29]
 801002c:	1c5a      	adds	r2, r3, #1
 801002e:	777a      	strb	r2, [r7, #29]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	b2d2      	uxtb	r2, r2
 8010034:	3320      	adds	r3, #32
 8010036:	443b      	add	r3, r7
 8010038:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	0a1a      	lsrs	r2, r3, #8
 8010040:	7f7b      	ldrb	r3, [r7, #29]
 8010042:	1c59      	adds	r1, r3, #1
 8010044:	7779      	strb	r1, [r7, #29]
 8010046:	b2d2      	uxtb	r2, r2
 8010048:	3320      	adds	r3, #32
 801004a:	443b      	add	r3, r7
 801004c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	0c1a      	lsrs	r2, r3, #16
 8010054:	7f7b      	ldrb	r3, [r7, #29]
 8010056:	1c59      	adds	r1, r3, #1
 8010058:	7779      	strb	r1, [r7, #29]
 801005a:	b2d2      	uxtb	r2, r2
 801005c:	3320      	adds	r3, #32
 801005e:	443b      	add	r3, r7
 8010060:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	0e1a      	lsrs	r2, r3, #24
 8010068:	7f7b      	ldrb	r3, [r7, #29]
 801006a:	1c59      	adds	r1, r3, #1
 801006c:	7779      	strb	r1, [r7, #29]
 801006e:	b2d2      	uxtb	r2, r2
 8010070:	3320      	adds	r3, #32
 8010072:	443b      	add	r3, r7
 8010074:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8010078:	2300      	movs	r3, #0
 801007a:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801007c:	7f7b      	ldrb	r3, [r7, #29]
 801007e:	b29a      	uxth	r2, r3
 8010080:	7f3b      	ldrb	r3, [r7, #28]
 8010082:	b298      	uxth	r0, r3
 8010084:	f107 0114 	add.w	r1, r7, #20
 8010088:	f107 031a 	add.w	r3, r7, #26
 801008c:	9301      	str	r3, [sp, #4]
 801008e:	f107 0310 	add.w	r3, r7, #16
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	4603      	mov	r3, r0
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f7ff f866 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 801009c:	4603      	mov	r3, r0
 801009e:	83fb      	strh	r3, [r7, #30]
 80100a0:	8bfb      	ldrh	r3, [r7, #30]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d001      	beq.n	80100aa <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 80100a6:	8bfb      	ldrh	r3, [r7, #30]
 80100a8:	e000      	b.n	80100ac <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3720      	adds	r7, #32
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08a      	sub	sp, #40	@ 0x28
 80100b8:	af02      	add	r7, sp, #8
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	460b      	mov	r3, r1
 80100be:	607a      	str	r2, [r7, #4]
 80100c0:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d006      	beq.n	80100d6 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80100c8:	7afb      	ldrb	r3, [r7, #11]
 80100ca:	2b43      	cmp	r3, #67	@ 0x43
 80100cc:	d906      	bls.n	80100dc <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80100ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	db02      	blt.n	80100dc <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80100d6:	f240 2321 	movw	r3, #545	@ 0x221
 80100da:	e05d      	b.n	8010198 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80100dc:	7afb      	ldrb	r3, [r7, #11]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fedc 	bl	800fe9c <phhalHw_Pn5180_Check_Reg_Readonly>
 80100e4:	4603      	mov	r3, r0
 80100e6:	83fb      	strh	r3, [r7, #30]
 80100e8:	8bfb      	ldrh	r3, [r7, #30]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d001      	beq.n	80100f2 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 80100ee:	8bfb      	ldrh	r3, [r7, #30]
 80100f0:	e052      	b.n	8010198 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80100f2:	2300      	movs	r3, #0
 80100f4:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 80100f6:	7f7b      	ldrb	r3, [r7, #29]
 80100f8:	1c5a      	adds	r2, r3, #1
 80100fa:	777a      	strb	r2, [r7, #29]
 80100fc:	3320      	adds	r3, #32
 80100fe:	443b      	add	r3, r7
 8010100:	2202      	movs	r2, #2
 8010102:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8010106:	7f7b      	ldrb	r3, [r7, #29]
 8010108:	1c5a      	adds	r2, r3, #1
 801010a:	777a      	strb	r2, [r7, #29]
 801010c:	3320      	adds	r3, #32
 801010e:	443b      	add	r3, r7
 8010110:	7afa      	ldrb	r2, [r7, #11]
 8010112:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 8010116:	7f7b      	ldrb	r3, [r7, #29]
 8010118:	1c5a      	adds	r2, r3, #1
 801011a:	777a      	strb	r2, [r7, #29]
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	b2d2      	uxtb	r2, r2
 8010120:	3320      	adds	r3, #32
 8010122:	443b      	add	r3, r7
 8010124:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	0a1a      	lsrs	r2, r3, #8
 801012c:	7f7b      	ldrb	r3, [r7, #29]
 801012e:	1c59      	adds	r1, r3, #1
 8010130:	7779      	strb	r1, [r7, #29]
 8010132:	b2d2      	uxtb	r2, r2
 8010134:	3320      	adds	r3, #32
 8010136:	443b      	add	r3, r7
 8010138:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	0c1a      	lsrs	r2, r3, #16
 8010140:	7f7b      	ldrb	r3, [r7, #29]
 8010142:	1c59      	adds	r1, r3, #1
 8010144:	7779      	strb	r1, [r7, #29]
 8010146:	b2d2      	uxtb	r2, r2
 8010148:	3320      	adds	r3, #32
 801014a:	443b      	add	r3, r7
 801014c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	0e1a      	lsrs	r2, r3, #24
 8010154:	7f7b      	ldrb	r3, [r7, #29]
 8010156:	1c59      	adds	r1, r3, #1
 8010158:	7779      	strb	r1, [r7, #29]
 801015a:	b2d2      	uxtb	r2, r2
 801015c:	3320      	adds	r3, #32
 801015e:	443b      	add	r3, r7
 8010160:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8010164:	2300      	movs	r3, #0
 8010166:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010168:	7f7b      	ldrb	r3, [r7, #29]
 801016a:	b29a      	uxth	r2, r3
 801016c:	7f3b      	ldrb	r3, [r7, #28]
 801016e:	b298      	uxth	r0, r3
 8010170:	f107 0114 	add.w	r1, r7, #20
 8010174:	f107 031a 	add.w	r3, r7, #26
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	f107 0310 	add.w	r3, r7, #16
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	4603      	mov	r3, r0
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7fe fff0 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010188:	4603      	mov	r3, r0
 801018a:	83fb      	strh	r3, [r7, #30]
 801018c:	8bfb      	ldrh	r3, [r7, #30]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 8010192:	8bfb      	ldrh	r3, [r7, #30]
 8010194:	e000      	b.n	8010198 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010196:	2300      	movs	r3, #0
}
 8010198:	4618      	mov	r0, r3
 801019a:	3720      	adds	r7, #32
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b08c      	sub	sp, #48	@ 0x30
 80101a4:	af02      	add	r7, sp, #8
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	4613      	mov	r3, r2
 80101ac:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d016      	beq.n	80101ea <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d013      	beq.n	80101ea <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 80101c2:	88fb      	ldrh	r3, [r7, #6]
 80101c4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80101c8:	d80f      	bhi.n	80101ea <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 80101ca:	88fb      	ldrh	r3, [r7, #6]
 80101cc:	2b05      	cmp	r3, #5
 80101ce:	d90c      	bls.n	80101ea <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 80101d0:	88fa      	ldrh	r2, [r7, #6]
 80101d2:	4b4b      	ldr	r3, [pc, #300]	@ (8010300 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 80101d4:	fba3 1302 	umull	r1, r3, r3, r2
 80101d8:	0899      	lsrs	r1, r3, #2
 80101da:	460b      	mov	r3, r1
 80101dc:	005b      	lsls	r3, r3, #1
 80101de:	440b      	add	r3, r1
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	1ad3      	subs	r3, r2, r3
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d002      	beq.n	80101f0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80101ea:	f240 2321 	movw	r3, #545	@ 0x221
 80101ee:	e082      	b.n	80102f6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80101f0:	2300      	movs	r3, #0
 80101f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101f6:	e038      	b.n	801026a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 80101f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	4413      	add	r3, r2
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	4618      	mov	r0, r3
 8010204:	f7ff fe4a 	bl	800fe9c <phhalHw_Pn5180_Check_Reg_Readonly>
 8010208:	4603      	mov	r3, r0
 801020a:	843b      	strh	r3, [r7, #32]
 801020c:	8c3b      	ldrh	r3, [r7, #32]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 8010212:	8c3b      	ldrh	r3, [r7, #32]
 8010214:	e06f      	b.n	80102f6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	4413      	add	r3, r2
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b43      	cmp	r3, #67	@ 0x43
 8010222:	d90a      	bls.n	801023a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	4413      	add	r3, r2
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	b25b      	sxtb	r3, r3
 8010230:	2b00      	cmp	r3, #0
 8010232:	db02      	blt.n	801023a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010234:	f240 2321 	movw	r3, #545	@ 0x221
 8010238:	e05d      	b.n	80102f6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 801023a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801023e:	3301      	adds	r3, #1
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	4413      	add	r3, r2
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d007      	beq.n	801025a <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 801024a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801024e:	3301      	adds	r3, #1
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	4413      	add	r3, r2
 8010254:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 8010256:	2b03      	cmp	r3, #3
 8010258:	d902      	bls.n	8010260 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801025a:	f240 2321 	movw	r3, #545	@ 0x221
 801025e:	e04a      	b.n	80102f6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 8010260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010264:	3306      	adds	r3, #6
 8010266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801026a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801026e:	b29b      	uxth	r3, r3
 8010270:	88fa      	ldrh	r2, [r7, #6]
 8010272:	429a      	cmp	r2, r3
 8010274:	d8c0      	bhi.n	80101f8 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010276:	f107 0216 	add.w	r2, r7, #22
 801027a:	f107 0318 	add.w	r3, r7, #24
 801027e:	4619      	mov	r1, r3
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f7ff fdf5 	bl	800fe70 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 8010286:	8afb      	ldrh	r3, [r7, #22]
 8010288:	461a      	mov	r2, r3
 801028a:	88fb      	ldrh	r3, [r7, #6]
 801028c:	3301      	adds	r3, #1
 801028e:	429a      	cmp	r2, r3
 8010290:	d202      	bcs.n	8010298 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010292:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010296:	e02e      	b.n	80102f6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010298:	2300      	movs	r3, #0
 801029a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102a0:	1c59      	adds	r1, r3, #1
 80102a2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 80102a4:	4413      	add	r3, r2
 80102a6:	2203      	movs	r2, #3
 80102a8:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 80102aa:	69ba      	ldr	r2, [r7, #24]
 80102ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102ae:	4413      	add	r3, r2
 80102b0:	88fa      	ldrh	r2, [r7, #6]
 80102b2:	68b9      	ldr	r1, [r7, #8]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f00c ff86 	bl	801d1c6 <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 80102ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80102bc:	88fb      	ldrh	r3, [r7, #6]
 80102be:	4413      	add	r3, r2
 80102c0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 80102c2:	2300      	movs	r3, #0
 80102c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80102c8:	69b9      	ldr	r1, [r7, #24]
 80102ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80102ce:	b298      	uxth	r0, r3
 80102d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80102d2:	f107 031e 	add.w	r3, r7, #30
 80102d6:	9301      	str	r3, [sp, #4]
 80102d8:	f107 0314 	add.w	r3, r7, #20
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	4603      	mov	r3, r0
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f7fe ff41 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 80102e6:	4603      	mov	r3, r0
 80102e8:	843b      	strh	r3, [r7, #32]
 80102ea:	8c3b      	ldrh	r3, [r7, #32]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d001      	beq.n	80102f4 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 80102f0:	8c3b      	ldrh	r3, [r7, #32]
 80102f2:	e000      	b.n	80102f6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3728      	adds	r7, #40	@ 0x28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	aaaaaaab 	.word	0xaaaaaaab

08010304 <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b08c      	sub	sp, #48	@ 0x30
 8010308:	af02      	add	r7, sp, #8
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	460b      	mov	r3, r1
 801030e:	607a      	str	r2, [r7, #4]
 8010310:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d009      	beq.n	8010330 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d006      	beq.n	8010330 <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010322:	7afb      	ldrb	r3, [r7, #11]
 8010324:	2b43      	cmp	r3, #67	@ 0x43
 8010326:	d906      	bls.n	8010336 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010328:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801032c:	2b00      	cmp	r3, #0
 801032e:	db02      	blt.n	8010336 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010330:	f240 2321 	movw	r3, #545	@ 0x221
 8010334:	e050      	b.n	80103d8 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010336:	2300      	movs	r3, #0
 8010338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 801033c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8010346:	3328      	adds	r3, #40	@ 0x28
 8010348:	443b      	add	r3, r7
 801034a:	2204      	movs	r2, #4
 801034c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 8010350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010354:	1c5a      	adds	r2, r3, #1
 8010356:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801035a:	3328      	adds	r3, #40	@ 0x28
 801035c:	443b      	add	r3, r7
 801035e:	7afa      	ldrb	r2, [r7, #11]
 8010360:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 8010364:	2304      	movs	r3, #4
 8010366:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801036c:	b29a      	uxth	r2, r3
 801036e:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8010370:	f107 011c 	add.w	r1, r7, #28
 8010374:	f107 0320 	add.w	r3, r7, #32
 8010378:	9301      	str	r3, [sp, #4]
 801037a:	f107 0314 	add.w	r3, r7, #20
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	4603      	mov	r3, r0
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f7fe fef0 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010388:	4603      	mov	r3, r0
 801038a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801038c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 8010392:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010394:	e020      	b.n	80103d8 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 8010396:	8c3b      	ldrh	r3, [r7, #32]
 8010398:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801039a:	429a      	cmp	r2, r3
 801039c:	d002      	beq.n	80103a4 <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801039e:	f240 237f 	movw	r3, #639	@ 0x27f
 80103a2:	e019      	b.n	80103d8 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 80103a4:	7d3b      	ldrb	r3, [r7, #20]
 80103a6:	461a      	mov	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	7d7b      	ldrb	r3, [r7, #21]
 80103b2:	021b      	lsls	r3, r3, #8
 80103b4:	431a      	orrs	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	7dbb      	ldrb	r3, [r7, #22]
 80103c0:	041b      	lsls	r3, r3, #16
 80103c2:	431a      	orrs	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	7dfb      	ldrb	r3, [r7, #23]
 80103ce:	061b      	lsls	r3, r3, #24
 80103d0:	431a      	orrs	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80103d6:	2300      	movs	r3, #0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3728      	adds	r7, #40	@ 0x28
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 80103e0:	b590      	push	{r4, r7, lr}
 80103e2:	b091      	sub	sp, #68	@ 0x44
 80103e4:	af02      	add	r7, sp, #8
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	603b      	str	r3, [r7, #0]
 80103ec:	4613      	mov	r3, r2
 80103ee:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80103f0:	2300      	movs	r3, #0
 80103f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00b      	beq.n	8010416 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d008      	beq.n	8010416 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d005      	beq.n	8010416 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 801040a:	79fb      	ldrb	r3, [r7, #7]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	2b12      	cmp	r3, #18
 8010414:	d902      	bls.n	801041c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010416:	f240 2321 	movw	r3, #545	@ 0x221
 801041a:	e077      	b.n	801050c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 801041c:	2300      	movs	r3, #0
 801041e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010422:	e016      	b.n	8010452 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8010424:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	4413      	add	r3, r2
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b43      	cmp	r3, #67	@ 0x43
 8010430:	d90a      	bls.n	8010448 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 8010432:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	4413      	add	r3, r2
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	b25b      	sxtb	r3, r3
 801043e:	2b00      	cmp	r3, #0
 8010440:	db02      	blt.n	8010448 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010442:	f240 2321 	movw	r3, #545	@ 0x221
 8010446:	e061      	b.n	801050c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8010448:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801044c:	3301      	adds	r3, #1
 801044e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010452:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8010456:	79fb      	ldrb	r3, [r7, #7]
 8010458:	429a      	cmp	r2, r3
 801045a:	d3e3      	bcc.n	8010424 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 801045c:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 8010460:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010464:	4619      	mov	r1, r3
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f7ff fd02 	bl	800fe70 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 801046c:	79fb      	ldrb	r3, [r7, #7]
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 8010474:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010478:	b29a      	uxth	r2, r3
 801047a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801047c:	429a      	cmp	r2, r3
 801047e:	d902      	bls.n	8010486 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010480:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010484:	e042      	b.n	801050c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 8010486:	2300      	movs	r3, #0
 8010488:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 801048c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010490:	1c5a      	adds	r2, r3, #1
 8010492:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8010496:	3338      	adds	r3, #56	@ 0x38
 8010498:	443b      	add	r3, r7
 801049a:	2205      	movs	r2, #5
 801049c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 80104a0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80104a4:	f107 0214 	add.w	r2, r7, #20
 80104a8:	4413      	add	r3, r2
 80104aa:	79fa      	ldrb	r2, [r7, #7]
 80104ac:	68b9      	ldr	r1, [r7, #8]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f00c fe89 	bl	801d1c6 <memcpy>
    wBufferLength+= bNumOfRegisters;
 80104b4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	4413      	add	r3, r2
 80104bc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80104c0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80104c4:	b298      	uxth	r0, r3
 80104c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104ca:	b29c      	uxth	r4, r3
 80104cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ce:	f107 0114 	add.w	r1, r7, #20
 80104d2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80104d6:	9201      	str	r2, [sp, #4]
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	4623      	mov	r3, r4
 80104dc:	4602      	mov	r2, r0
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7fe fe42 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 80104e4:	4603      	mov	r3, r0
 80104e6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80104e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d001      	beq.n	80104f2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 80104ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80104f0:	e00c      	b.n	801050c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 80104f2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d002      	beq.n	8010504 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80104fe:	f240 237f 	movw	r3, #639	@ 0x27f
 8010502:	e003      	b.n	801050c <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 8010504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801050a:	2300      	movs	r3, #0
}
 801050c:	4618      	mov	r0, r3
 801050e:	373c      	adds	r7, #60	@ 0x3c
 8010510:	46bd      	mov	sp, r7
 8010512:	bd90      	pop	{r4, r7, pc}

08010514 <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b08a      	sub	sp, #40	@ 0x28
 8010518:	af02      	add	r7, sp, #8
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	607a      	str	r2, [r7, #4]
 801051e:	461a      	mov	r2, r3
 8010520:	460b      	mov	r3, r1
 8010522:	72fb      	strb	r3, [r7, #11]
 8010524:	4613      	mov	r3, r2
 8010526:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010528:	2300      	movs	r3, #0
 801052a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801052c:	2300      	movs	r3, #0
 801052e:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00b      	beq.n	801054e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d008      	beq.n	801054e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 801053c:	7afb      	ldrb	r3, [r7, #11]
 801053e:	2bfd      	cmp	r3, #253	@ 0xfd
 8010540:	d805      	bhi.n	801054e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 8010542:	7afb      	ldrb	r3, [r7, #11]
 8010544:	2b15      	cmp	r3, #21
 8010546:	d902      	bls.n	801054e <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 8010548:	7abb      	ldrb	r3, [r7, #10]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d102      	bne.n	8010554 <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801054e:	f240 2321 	movw	r3, #545	@ 0x221
 8010552:	e053      	b.n	80105fc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8010554:	7afb      	ldrb	r3, [r7, #11]
 8010556:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801055a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801055e:	33fe      	adds	r3, #254	@ 0xfe
 8010560:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 8010562:	7ffa      	ldrb	r2, [r7, #31]
 8010564:	7abb      	ldrb	r3, [r7, #10]
 8010566:	429a      	cmp	r2, r3
 8010568:	d202      	bcs.n	8010570 <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801056a:	f240 2322 	movw	r3, #546	@ 0x222
 801056e:	e045      	b.n	80105fc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010570:	f107 0212 	add.w	r2, r7, #18
 8010574:	f107 0314 	add.w	r3, r7, #20
 8010578:	4619      	mov	r1, r3
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f7ff fc78 	bl	800fe70 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 8010580:	8a7b      	ldrh	r3, [r7, #18]
 8010582:	461a      	mov	r2, r3
 8010584:	7abb      	ldrb	r3, [r7, #10]
 8010586:	3303      	adds	r3, #3
 8010588:	429a      	cmp	r2, r3
 801058a:	d202      	bcs.n	8010592 <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801058c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010590:	e034      	b.n	80105fc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010592:	2300      	movs	r3, #0
 8010594:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 8010596:	697a      	ldr	r2, [r7, #20]
 8010598:	7fbb      	ldrb	r3, [r7, #30]
 801059a:	1c59      	adds	r1, r3, #1
 801059c:	77b9      	strb	r1, [r7, #30]
 801059e:	4413      	add	r3, r2
 80105a0:	2206      	movs	r2, #6
 80105a2:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 80105a4:	697a      	ldr	r2, [r7, #20]
 80105a6:	7fbb      	ldrb	r3, [r7, #30]
 80105a8:	1c59      	adds	r1, r3, #1
 80105aa:	77b9      	strb	r1, [r7, #30]
 80105ac:	4413      	add	r3, r2
 80105ae:	7afa      	ldrb	r2, [r7, #11]
 80105b0:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 80105b2:	697a      	ldr	r2, [r7, #20]
 80105b4:	7fbb      	ldrb	r3, [r7, #30]
 80105b6:	4413      	add	r3, r2
 80105b8:	7aba      	ldrb	r2, [r7, #10]
 80105ba:	6879      	ldr	r1, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	f00c fe02 	bl	801d1c6 <memcpy>
    wBufferLength += bDataLength;
 80105c2:	7fba      	ldrb	r2, [r7, #30]
 80105c4:	7abb      	ldrb	r3, [r7, #10]
 80105c6:	4413      	add	r3, r2
 80105c8:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 80105ca:	2300      	movs	r3, #0
 80105cc:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80105ce:	6979      	ldr	r1, [r7, #20]
 80105d0:	7fbb      	ldrb	r3, [r7, #30]
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	7f7b      	ldrb	r3, [r7, #29]
 80105d6:	b298      	uxth	r0, r3
 80105d8:	f107 0318 	add.w	r3, r7, #24
 80105dc:	9301      	str	r3, [sp, #4]
 80105de:	f107 0310 	add.w	r3, r7, #16
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	4603      	mov	r3, r0
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f7fe fdbe 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 80105ec:	4603      	mov	r3, r0
 80105ee:	837b      	strh	r3, [r7, #26]
 80105f0:	8b7b      	ldrh	r3, [r7, #26]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 80105f6:	8b7b      	ldrh	r3, [r7, #26]
 80105f8:	e000      	b.n	80105fc <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b08a      	sub	sp, #40	@ 0x28
 8010608:	af02      	add	r7, sp, #8
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	607a      	str	r2, [r7, #4]
 801060e:	461a      	mov	r2, r3
 8010610:	460b      	mov	r3, r1
 8010612:	72fb      	strb	r3, [r7, #11]
 8010614:	4613      	mov	r3, r2
 8010616:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 8010618:	2300      	movs	r3, #0
 801061a:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d008      	beq.n	8010634 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d005      	beq.n	8010634 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8010628:	7afb      	ldrb	r3, [r7, #11]
 801062a:	2bfd      	cmp	r3, #253	@ 0xfd
 801062c:	d802      	bhi.n	8010634 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 801062e:	7abb      	ldrb	r3, [r7, #10]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d11f      	bne.n	8010674 <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d101      	bne.n	801063e <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 801063a:	4934      	ldr	r1, [pc, #208]	@ (801070c <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 801063c:	e000      	b.n	8010640 <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 801063e:	4934      	ldr	r1, [pc, #208]	@ (8010710 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 8010646:	4a33      	ldr	r2, [pc, #204]	@ (8010714 <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 8010648:	e000      	b.n	801064c <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 801064a:	4a31      	ldr	r2, [pc, #196]	@ (8010710 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 801064c:	7afb      	ldrb	r3, [r7, #11]
 801064e:	2bfd      	cmp	r3, #253	@ 0xfd
 8010650:	d901      	bls.n	8010656 <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 8010652:	4831      	ldr	r0, [pc, #196]	@ (8010718 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 8010654:	e000      	b.n	8010658 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 8010656:	482e      	ldr	r0, [pc, #184]	@ (8010710 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8010658:	7abb      	ldrb	r3, [r7, #10]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 801065e:	4b2f      	ldr	r3, [pc, #188]	@ (801071c <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 8010660:	e000      	b.n	8010664 <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 8010662:	4b2b      	ldr	r3, [pc, #172]	@ (8010710 <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	4603      	mov	r3, r0
 8010668:	482d      	ldr	r0, [pc, #180]	@ (8010720 <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 801066a:	f00c fbcd 	bl	801ce08 <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801066e:	f240 2321 	movw	r3, #545	@ 0x221
 8010672:	e046      	b.n	8010702 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8010674:	7afb      	ldrb	r3, [r7, #11]
 8010676:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801067a:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801067e:	33fe      	adds	r3, #254	@ 0xfe
 8010680:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 8010682:	7ffa      	ldrb	r2, [r7, #31]
 8010684:	7abb      	ldrb	r3, [r7, #10]
 8010686:	429a      	cmp	r2, r3
 8010688:	d202      	bcs.n	8010690 <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801068a:	f240 2322 	movw	r3, #546	@ 0x222
 801068e:	e038      	b.n	8010702 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010690:	2300      	movs	r3, #0
 8010692:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 8010694:	7fbb      	ldrb	r3, [r7, #30]
 8010696:	1c5a      	adds	r2, r3, #1
 8010698:	77ba      	strb	r2, [r7, #30]
 801069a:	3320      	adds	r3, #32
 801069c:	443b      	add	r3, r7
 801069e:	2207      	movs	r2, #7
 80106a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 80106a4:	7fbb      	ldrb	r3, [r7, #30]
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	77ba      	strb	r2, [r7, #30]
 80106aa:	3320      	adds	r3, #32
 80106ac:	443b      	add	r3, r7
 80106ae:	7afa      	ldrb	r2, [r7, #11]
 80106b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 80106b4:	7fbb      	ldrb	r3, [r7, #30]
 80106b6:	1c5a      	adds	r2, r3, #1
 80106b8:	77ba      	strb	r2, [r7, #30]
 80106ba:	3320      	adds	r3, #32
 80106bc:	443b      	add	r3, r7
 80106be:	7aba      	ldrb	r2, [r7, #10]
 80106c0:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80106c4:	7fbb      	ldrb	r3, [r7, #30]
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	7abb      	ldrb	r3, [r7, #10]
 80106ca:	b298      	uxth	r0, r3
 80106cc:	f107 0114 	add.w	r1, r7, #20
 80106d0:	f107 031a 	add.w	r3, r7, #26
 80106d4:	9301      	str	r3, [sp, #4]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	4603      	mov	r3, r0
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f7fe fd43 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 80106e2:	4603      	mov	r3, r0
 80106e4:	83bb      	strh	r3, [r7, #28]
 80106e6:	8bbb      	ldrh	r3, [r7, #28]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d001      	beq.n	80106f0 <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 80106ec:	8bbb      	ldrh	r3, [r7, #28]
 80106ee:	e008      	b.n	8010702 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 80106f0:	7abb      	ldrb	r3, [r7, #10]
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	8b7b      	ldrh	r3, [r7, #26]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d002      	beq.n	8010700 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80106fa:	f240 237f 	movw	r3, #639	@ 0x27f
 80106fe:	e000      	b.n	8010702 <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3720      	adds	r7, #32
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801f704 	.word	0x0801f704
 8010710:	0801f718 	.word	0x0801f718
 8010714:	0801f71c 	.word	0x0801f71c
 8010718:	0801f72c 	.word	0x0801f72c
 801071c:	0801f73c 	.word	0x0801f73c
 8010720:	0801f74c 	.word	0x0801f74c

08010724 <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b08b      	sub	sp, #44	@ 0x2c
 8010728:	af02      	add	r7, sp, #8
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	4613      	mov	r3, r2
 8010730:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010732:	2300      	movs	r3, #0
 8010734:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d002      	beq.n	8010746 <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d102      	bne.n	801074c <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010746:	f240 2321 	movw	r3, #545	@ 0x221
 801074a:	e056      	b.n	80107fa <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 801074c:	88fb      	ldrh	r3, [r7, #6]
 801074e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010752:	d802      	bhi.n	801075a <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 8010754:	88fb      	ldrh	r3, [r7, #6]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d102      	bne.n	8010760 <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801075a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 801075e:	e04c      	b.n	80107fa <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8010760:	f107 0116 	add.w	r1, r7, #22
 8010764:	f107 0218 	add.w	r2, r7, #24
 8010768:	f107 0314 	add.w	r3, r7, #20
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	460b      	mov	r3, r1
 8010770:	2101      	movs	r1, #1
 8010772:	68f8      	ldr	r0, [r7, #12]
 8010774:	f000 fbbf 	bl	8010ef6 <phhalHw_Pn5180_GetRxBuffer>
 8010778:	4603      	mov	r3, r0
 801077a:	83fb      	strh	r3, [r7, #30]
 801077c:	8bfb      	ldrh	r3, [r7, #30]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d001      	beq.n	8010786 <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 8010782:	8bfb      	ldrh	r3, [r7, #30]
 8010784:	e039      	b.n	80107fa <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 8010786:	8abb      	ldrh	r3, [r7, #20]
 8010788:	88fa      	ldrh	r2, [r7, #6]
 801078a:	429a      	cmp	r2, r3
 801078c:	d902      	bls.n	8010794 <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801078e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010792:	e032      	b.n	80107fa <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010794:	2300      	movs	r3, #0
 8010796:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 8010798:	7f7b      	ldrb	r3, [r7, #29]
 801079a:	1c5a      	adds	r2, r3, #1
 801079c:	777a      	strb	r2, [r7, #29]
 801079e:	3320      	adds	r3, #32
 80107a0:	443b      	add	r3, r7
 80107a2:	220a      	movs	r2, #10
 80107a4:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 80107a8:	7f7b      	ldrb	r3, [r7, #29]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	777a      	strb	r2, [r7, #29]
 80107ae:	3320      	adds	r3, #32
 80107b0:	443b      	add	r3, r7
 80107b2:	2200      	movs	r2, #0
 80107b4:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 80107b8:	7f7b      	ldrb	r3, [r7, #29]
 80107ba:	b298      	uxth	r0, r3
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	88fc      	ldrh	r4, [r7, #6]
 80107c0:	f107 0110 	add.w	r1, r7, #16
 80107c4:	f107 0212 	add.w	r2, r7, #18
 80107c8:	9201      	str	r2, [sp, #4]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	4623      	mov	r3, r4
 80107ce:	4602      	mov	r2, r0
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f7fe fcc9 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 80107d6:	4603      	mov	r3, r0
 80107d8:	83fb      	strh	r3, [r7, #30]
 80107da:	8bfb      	ldrh	r3, [r7, #30]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 80107e0:	8bfb      	ldrh	r3, [r7, #30]
 80107e2:	e00a      	b.n	80107fa <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 80107e4:	8a7b      	ldrh	r3, [r7, #18]
 80107e6:	88fa      	ldrh	r2, [r7, #6]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d002      	beq.n	80107f2 <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80107ec:	f240 237f 	movw	r3, #639	@ 0x27f
 80107f0:	e003      	b.n	80107fa <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3724      	adds	r7, #36	@ 0x24
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd90      	pop	{r4, r7, pc}

08010802 <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b088      	sub	sp, #32
 8010806:	af02      	add	r7, sp, #8
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	460b      	mov	r3, r1
 801080c:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801080e:	2300      	movs	r3, #0
 8010810:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d007      	beq.n	8010828 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 8010818:	887b      	ldrh	r3, [r7, #2]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d004      	beq.n	8010828 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 801081e:	887b      	ldrh	r3, [r7, #2]
 8010820:	f640 2282 	movw	r2, #2690	@ 0xa82
 8010824:	4293      	cmp	r3, r2
 8010826:	d902      	bls.n	801082e <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010828:	f240 2321 	movw	r3, #545	@ 0x221
 801082c:	e03e      	b.n	80108ac <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801082e:	2300      	movs	r3, #0
 8010830:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8010832:	7dfb      	ldrb	r3, [r7, #23]
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	75fa      	strb	r2, [r7, #23]
 8010838:	3318      	adds	r3, #24
 801083a:	443b      	add	r3, r7
 801083c:	220b      	movs	r2, #11
 801083e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 8010842:	7dfb      	ldrb	r3, [r7, #23]
 8010844:	1c5a      	adds	r2, r3, #1
 8010846:	75fa      	strb	r2, [r7, #23]
 8010848:	3318      	adds	r3, #24
 801084a:	443b      	add	r3, r7
 801084c:	2201      	movs	r2, #1
 801084e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 8010852:	7dfb      	ldrb	r3, [r7, #23]
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	75fa      	strb	r2, [r7, #23]
 8010858:	887a      	ldrh	r2, [r7, #2]
 801085a:	b2d2      	uxtb	r2, r2
 801085c:	3318      	adds	r3, #24
 801085e:	443b      	add	r3, r7
 8010860:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 8010864:	887b      	ldrh	r3, [r7, #2]
 8010866:	0a1b      	lsrs	r3, r3, #8
 8010868:	b29a      	uxth	r2, r3
 801086a:	7dfb      	ldrb	r3, [r7, #23]
 801086c:	1c59      	adds	r1, r3, #1
 801086e:	75f9      	strb	r1, [r7, #23]
 8010870:	b2d2      	uxtb	r2, r2
 8010872:	3318      	adds	r3, #24
 8010874:	443b      	add	r3, r7
 8010876:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 801087a:	2300      	movs	r3, #0
 801087c:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801087e:	7dfb      	ldrb	r3, [r7, #23]
 8010880:	b29a      	uxth	r2, r3
 8010882:	8ab8      	ldrh	r0, [r7, #20]
 8010884:	f107 010c 	add.w	r1, r7, #12
 8010888:	f107 0310 	add.w	r3, r7, #16
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	f107 0308 	add.w	r3, r7, #8
 8010892:	9300      	str	r3, [sp, #0]
 8010894:	4603      	mov	r3, r0
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7fe fc66 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 801089c:	4603      	mov	r3, r0
 801089e:	827b      	strh	r3, [r7, #18]
 80108a0:	8a7b      	ldrh	r3, [r7, #18]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d001      	beq.n	80108aa <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 80108a6:	8a7b      	ldrh	r3, [r7, #18]
 80108a8:	e000      	b.n	80108ac <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3718      	adds	r7, #24
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b088      	sub	sp, #32
 80108b8:	af02      	add	r7, sp, #8
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
 80108c0:	4613      	mov	r3, r2
 80108c2:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80108c4:	2300      	movs	r3, #0
 80108c6:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 80108c8:	78fb      	ldrb	r3, [r7, #3]
 80108ca:	f003 030f 	and.w	r3, r3, #15
 80108ce:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d005      	beq.n	80108e2 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 80108d6:	78fb      	ldrb	r3, [r7, #3]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 80108dc:	78bb      	ldrb	r3, [r7, #2]
 80108de:	2b02      	cmp	r3, #2
 80108e0:	d902      	bls.n	80108e8 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80108e2:	f240 2321 	movw	r3, #545	@ 0x221
 80108e6:	e03a      	b.n	801095e <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80108e8:	2300      	movs	r3, #0
 80108ea:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 80108ec:	7dfb      	ldrb	r3, [r7, #23]
 80108ee:	1c5a      	adds	r2, r3, #1
 80108f0:	75fa      	strb	r2, [r7, #23]
 80108f2:	3318      	adds	r3, #24
 80108f4:	443b      	add	r3, r7
 80108f6:	220b      	movs	r2, #11
 80108f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 80108fc:	7dfb      	ldrb	r3, [r7, #23]
 80108fe:	1c5a      	adds	r2, r3, #1
 8010900:	75fa      	strb	r2, [r7, #23]
 8010902:	3318      	adds	r3, #24
 8010904:	443b      	add	r3, r7
 8010906:	2202      	movs	r2, #2
 8010908:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 801090c:	7dfb      	ldrb	r3, [r7, #23]
 801090e:	1c5a      	adds	r2, r3, #1
 8010910:	75fa      	strb	r2, [r7, #23]
 8010912:	3318      	adds	r3, #24
 8010914:	443b      	add	r3, r7
 8010916:	78fa      	ldrb	r2, [r7, #3]
 8010918:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 801091c:	7dfb      	ldrb	r3, [r7, #23]
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	75fa      	strb	r2, [r7, #23]
 8010922:	3318      	adds	r3, #24
 8010924:	443b      	add	r3, r7
 8010926:	78ba      	ldrb	r2, [r7, #2]
 8010928:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 801092c:	2300      	movs	r3, #0
 801092e:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	b29a      	uxth	r2, r3
 8010934:	8ab8      	ldrh	r0, [r7, #20]
 8010936:	f107 010c 	add.w	r1, r7, #12
 801093a:	f107 0310 	add.w	r3, r7, #16
 801093e:	9301      	str	r3, [sp, #4]
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	4603      	mov	r3, r0
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f7fe fc0d 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 801094e:	4603      	mov	r3, r0
 8010950:	827b      	strh	r3, [r7, #18]
 8010952:	8a7b      	ldrh	r3, [r7, #18]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 8010958:	8a7b      	ldrh	r3, [r7, #18]
 801095a:	e000      	b.n	801095e <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3718      	adds	r7, #24
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b088      	sub	sp, #32
 801096a:	af02      	add	r7, sp, #8
 801096c:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 801096e:	2300      	movs	r3, #0
 8010970:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 8010972:	2300      	movs	r3, #0
 8010974:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	1c5a      	adds	r2, r3, #1
 801097a:	75fa      	strb	r2, [r7, #23]
 801097c:	3318      	adds	r3, #24
 801097e:	443b      	add	r3, r7
 8010980:	220b      	movs	r2, #11
 8010982:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	1c5a      	adds	r2, r3, #1
 801098a:	75fa      	strb	r2, [r7, #23]
 801098c:	3318      	adds	r3, #24
 801098e:	443b      	add	r3, r7
 8010990:	2203      	movs	r2, #3
 8010992:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010996:	2300      	movs	r3, #0
 8010998:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801099a:	7dfb      	ldrb	r3, [r7, #23]
 801099c:	b29a      	uxth	r2, r3
 801099e:	8ab8      	ldrh	r0, [r7, #20]
 80109a0:	f107 0110 	add.w	r1, r7, #16
 80109a4:	f107 030a 	add.w	r3, r7, #10
 80109a8:	9301      	str	r3, [sp, #4]
 80109aa:	f107 030c 	add.w	r3, r7, #12
 80109ae:	9300      	str	r3, [sp, #0]
 80109b0:	4603      	mov	r3, r0
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fe fbd8 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 80109b8:	4603      	mov	r3, r0
 80109ba:	827b      	strh	r3, [r7, #18]
 80109bc:	8a7b      	ldrh	r3, [r7, #18]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d001      	beq.n	80109c6 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 80109c2:	8a7b      	ldrh	r3, [r7, #18]
 80109c4:	e000      	b.n	80109c8 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 80109c6:	2300      	movs	r3, #0
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3718      	adds	r7, #24
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08a      	sub	sp, #40	@ 0x28
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	4611      	mov	r1, r2
 80109dc:	461a      	mov	r2, r3
 80109de:	460b      	mov	r3, r1
 80109e0:	71fb      	strb	r3, [r7, #7]
 80109e2:	4613      	mov	r3, r2
 80109e4:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d006      	beq.n	8010a02 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 80109f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d003      	beq.n	8010a02 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 80109fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d902      	bls.n	8010a08 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a02:	f240 2321 	movw	r3, #545	@ 0x221
 8010a06:	e06e      	b.n	8010ae6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 8010a08:	79fb      	ldrb	r3, [r7, #7]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00b      	beq.n	8010a26 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d005      	beq.n	8010a20 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 8010a14:	79fb      	ldrb	r3, [r7, #7]
 8010a16:	2b27      	cmp	r3, #39	@ 0x27
 8010a18:	d802      	bhi.n	8010a20 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 8010a1a:	79bb      	ldrb	r3, [r7, #6]
 8010a1c:	2b07      	cmp	r3, #7
 8010a1e:	d902      	bls.n	8010a26 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010a20:	f240 2321 	movw	r3, #545	@ 0x221
 8010a24:	e05f      	b.n	8010ae6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010a26:	f107 0212 	add.w	r2, r7, #18
 8010a2a:	f107 0314 	add.w	r3, r7, #20
 8010a2e:	4619      	mov	r1, r3
 8010a30:	68f8      	ldr	r0, [r7, #12]
 8010a32:	f7ff fa1d 	bl	800fe70 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 8010a36:	8a7b      	ldrh	r3, [r7, #18]
 8010a38:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a3a:	d802      	bhi.n	8010a42 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010a3c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010a40:	e051      	b.n	8010ae6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010a42:	2300      	movs	r3, #0
 8010a44:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8010a46:	697a      	ldr	r2, [r7, #20]
 8010a48:	8bfb      	ldrh	r3, [r7, #30]
 8010a4a:	1c59      	adds	r1, r3, #1
 8010a4c:	83f9      	strh	r1, [r7, #30]
 8010a4e:	4413      	add	r3, r2
 8010a50:	220d      	movs	r2, #13
 8010a52:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8010a54:	697a      	ldr	r2, [r7, #20]
 8010a56:	8bfb      	ldrh	r3, [r7, #30]
 8010a58:	1c59      	adds	r1, r3, #1
 8010a5a:	83f9      	strh	r1, [r7, #30]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	79fa      	ldrb	r2, [r7, #7]
 8010a60:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d013      	beq.n	8010a90 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8010a68:	697a      	ldr	r2, [r7, #20]
 8010a6a:	8bfb      	ldrh	r3, [r7, #30]
 8010a6c:	1c59      	adds	r1, r3, #1
 8010a6e:	83f9      	strh	r1, [r7, #30]
 8010a70:	4413      	add	r3, r2
 8010a72:	79ba      	ldrb	r2, [r7, #6]
 8010a74:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	8bfb      	ldrh	r3, [r7, #30]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f00c fba0 	bl	801d1c6 <memcpy>
        wBufferLength+= bSelectCommandLength;
 8010a86:	79fb      	ldrb	r3, [r7, #7]
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	8bfb      	ldrh	r3, [r7, #30]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	8bfb      	ldrh	r3, [r7, #30]
 8010a94:	4413      	add	r3, r2
 8010a96:	2203      	movs	r2, #3
 8010a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f00c fb93 	bl	801d1c6 <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8010aa0:	8bfb      	ldrh	r3, [r7, #30]
 8010aa2:	3303      	adds	r3, #3
 8010aa4:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 8010aa6:	697a      	ldr	r2, [r7, #20]
 8010aa8:	8bfb      	ldrh	r3, [r7, #30]
 8010aaa:	1c59      	adds	r1, r3, #1
 8010aac:	83f9      	strh	r1, [r7, #30]
 8010aae:	4413      	add	r3, r2
 8010ab0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010ab4:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010aba:	6979      	ldr	r1, [r7, #20]
 8010abc:	7f7b      	ldrb	r3, [r7, #29]
 8010abe:	b298      	uxth	r0, r3
 8010ac0:	8bfa      	ldrh	r2, [r7, #30]
 8010ac2:	f107 0318 	add.w	r3, r7, #24
 8010ac6:	9301      	str	r3, [sp, #4]
 8010ac8:	f107 0310 	add.w	r3, r7, #16
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	4603      	mov	r3, r0
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7fe fb49 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	837b      	strh	r3, [r7, #26]
 8010ada:	8b7b      	ldrh	r3, [r7, #26]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 8010ae0:	8b7b      	ldrh	r3, [r7, #26]
 8010ae2:	e000      	b.n	8010ae6 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010ae4:	2300      	movs	r3, #0
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3720      	adds	r7, #32
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b088      	sub	sp, #32
 8010af2:	af02      	add	r7, sp, #8
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010af8:	2300      	movs	r3, #0
 8010afa:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d002      	beq.n	8010b08 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010b08:	f240 2321 	movw	r3, #545	@ 0x221
 8010b0c:	e041      	b.n	8010b92 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 8010b12:	7dfb      	ldrb	r3, [r7, #23]
 8010b14:	1c5a      	adds	r2, r3, #1
 8010b16:	75fa      	strb	r2, [r7, #23]
 8010b18:	3318      	adds	r3, #24
 8010b1a:	443b      	add	r3, r7
 8010b1c:	220f      	movs	r2, #15
 8010b1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010b22:	7dfb      	ldrb	r3, [r7, #23]
 8010b24:	1c5a      	adds	r2, r3, #1
 8010b26:	75fa      	strb	r2, [r7, #23]
 8010b28:	3318      	adds	r3, #24
 8010b2a:	443b      	add	r3, r7
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 8010b32:	2302      	movs	r3, #2
 8010b34:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	8ab8      	ldrh	r0, [r7, #20]
 8010b3c:	f107 010c 	add.w	r1, r7, #12
 8010b40:	f107 0310 	add.w	r3, r7, #16
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	f107 0308 	add.w	r3, r7, #8
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7fe fb0a 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010b54:	4603      	mov	r3, r0
 8010b56:	827b      	strh	r3, [r7, #18]
 8010b58:	8a7b      	ldrh	r3, [r7, #18]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d001      	beq.n	8010b62 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 8010b5e:	8a7b      	ldrh	r3, [r7, #18]
 8010b60:	e017      	b.n	8010b92 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 8010b62:	8a3b      	ldrh	r3, [r7, #16]
 8010b64:	8aba      	ldrh	r2, [r7, #20]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d002      	beq.n	8010b70 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010b6a:	f240 237f 	movw	r3, #639	@ 0x27f
 8010b6e:	e010      	b.n	8010b92 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8010b70:	7a3b      	ldrb	r3, [r7, #8]
 8010b72:	461a      	mov	r2, r3
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	881b      	ldrh	r3, [r3, #0]
 8010b7c:	b21a      	sxth	r2, r3
 8010b7e:	7a7b      	ldrb	r3, [r7, #9]
 8010b80:	b21b      	sxth	r3, r3
 8010b82:	021b      	lsls	r3, r3, #8
 8010b84:	b21b      	sxth	r3, r3
 8010b86:	4313      	orrs	r3, r2
 8010b88:	b21b      	sxth	r3, r3
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3718      	adds	r7, #24
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 8010b9a:	b590      	push	{r4, r7, lr}
 8010b9c:	b08b      	sub	sp, #44	@ 0x2c
 8010b9e:	af02      	add	r7, sp, #8
 8010ba0:	60f8      	str	r0, [r7, #12]
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8010bac:	2300      	movs	r3, #0
 8010bae:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d002      	beq.n	8010bbc <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d102      	bne.n	8010bc2 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010bbc:	f240 2321 	movw	r3, #545	@ 0x221
 8010bc0:	e047      	b.n	8010c52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 8010bc2:	88fb      	ldrh	r3, [r7, #6]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d102      	bne.n	8010bce <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010bc8:	f240 2321 	movw	r3, #545	@ 0x221
 8010bcc:	e041      	b.n	8010c52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 8010bd2:	7ffb      	ldrb	r3, [r7, #31]
 8010bd4:	1c5a      	adds	r2, r3, #1
 8010bd6:	77fa      	strb	r2, [r7, #31]
 8010bd8:	3320      	adds	r3, #32
 8010bda:	443b      	add	r3, r7
 8010bdc:	2210      	movs	r2, #16
 8010bde:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010be2:	7ffb      	ldrb	r3, [r7, #31]
 8010be4:	1c5a      	adds	r2, r3, #1
 8010be6:	77fa      	strb	r2, [r7, #31]
 8010be8:	3320      	adds	r3, #32
 8010bea:	443b      	add	r3, r7
 8010bec:	2200      	movs	r2, #0
 8010bee:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8010bf2:	f107 0216 	add.w	r2, r7, #22
 8010bf6:	f107 0318 	add.w	r3, r7, #24
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f7ff f937 	bl	800fe70 <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 8010c02:	8afb      	ldrh	r3, [r7, #22]
 8010c04:	88fa      	ldrh	r2, [r7, #6]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d902      	bls.n	8010c10 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8010c0a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010c0e:	e020      	b.n	8010c52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010c10:	7ffb      	ldrb	r3, [r7, #31]
 8010c12:	b298      	uxth	r0, r3
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	88fc      	ldrh	r4, [r7, #6]
 8010c18:	f107 0110 	add.w	r1, r7, #16
 8010c1c:	f107 0214 	add.w	r2, r7, #20
 8010c20:	9201      	str	r2, [sp, #4]
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	4623      	mov	r3, r4
 8010c26:	4602      	mov	r2, r0
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7fe fa9d 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	83bb      	strh	r3, [r7, #28]
 8010c32:	8bbb      	ldrh	r3, [r7, #28]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 8010c38:	8bbb      	ldrh	r3, [r7, #28]
 8010c3a:	e00a      	b.n	8010c52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 8010c3c:	8abb      	ldrh	r3, [r7, #20]
 8010c3e:	88fa      	ldrh	r2, [r7, #6]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d002      	beq.n	8010c4a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8010c44:	f240 237f 	movw	r3, #639	@ 0x27f
 8010c48:	e003      	b.n	8010c52 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 8010c4a:	69ba      	ldr	r2, [r7, #24]
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8010c50:	2300      	movs	r3, #0

}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3724      	adds	r7, #36	@ 0x24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd90      	pop	{r4, r7, pc}

08010c5a <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b088      	sub	sp, #32
 8010c5e:	af02      	add	r7, sp, #8
 8010c60:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8010c62:	2300      	movs	r3, #0
 8010c64:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010c6c:	f240 2321 	movw	r3, #545	@ 0x221
 8010c70:	e02a      	b.n	8010cc8 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010c72:	2300      	movs	r3, #0
 8010c74:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 8010c76:	7dfb      	ldrb	r3, [r7, #23]
 8010c78:	1c5a      	adds	r2, r3, #1
 8010c7a:	75fa      	strb	r2, [r7, #23]
 8010c7c:	3318      	adds	r3, #24
 8010c7e:	443b      	add	r3, r7
 8010c80:	220e      	movs	r2, #14
 8010c82:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
 8010c88:	1c5a      	adds	r2, r3, #1
 8010c8a:	75fa      	strb	r2, [r7, #23]
 8010c8c:	3318      	adds	r3, #24
 8010c8e:	443b      	add	r3, r7
 8010c90:	2200      	movs	r2, #0
 8010c92:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8010c96:	2300      	movs	r3, #0
 8010c98:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8010c9a:	7dfb      	ldrb	r3, [r7, #23]
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	8ab8      	ldrh	r0, [r7, #20]
 8010ca0:	f107 010c 	add.w	r1, r7, #12
 8010ca4:	f107 0310 	add.w	r3, r7, #16
 8010ca8:	9301      	str	r3, [sp, #4]
 8010caa:	f107 0308 	add.w	r3, r7, #8
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7fe fa58 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	827b      	strh	r3, [r7, #18]
 8010cbc:	8a7b      	ldrh	r3, [r7, #18]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 8010cc2:	8a7b      	ldrh	r3, [r7, #18]
 8010cc4:	e000      	b.n	8010cc8 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8010cc6:	2300      	movs	r3, #0
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3718      	adds	r7, #24
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	70fb      	strb	r3, [r7, #3]
 8010cdc:	4613      	mov	r3, r2
 8010cde:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00f      	beq.n	8010d06 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 8010ce6:	78fb      	ldrb	r3, [r7, #3]
 8010ce8:	2b1c      	cmp	r3, #28
 8010cea:	d902      	bls.n	8010cf2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8010cec:	78fb      	ldrb	r3, [r7, #3]
 8010cee:	2bff      	cmp	r3, #255	@ 0xff
 8010cf0:	d109      	bne.n	8010d06 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 8010cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	da05      	bge.n	8010d06 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 8010cfa:	78bb      	ldrb	r3, [r7, #2]
 8010cfc:	2b9d      	cmp	r3, #157	@ 0x9d
 8010cfe:	d905      	bls.n	8010d0c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8010d00:	78bb      	ldrb	r3, [r7, #2]
 8010d02:	2bff      	cmp	r3, #255	@ 0xff
 8010d04:	d002      	beq.n	8010d0c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010d06:	f240 2321 	movw	r3, #545	@ 0x221
 8010d0a:	e03b      	b.n	8010d84 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8010d0c:	78fa      	ldrb	r2, [r7, #3]
 8010d0e:	78bb      	ldrb	r3, [r7, #2]
 8010d10:	4013      	ands	r3, r2
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	2bff      	cmp	r3, #255	@ 0xff
 8010d16:	d101      	bne.n	8010d1c <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	e033      	b.n	8010d84 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
 8010d22:	1c5a      	adds	r2, r3, #1
 8010d24:	75fa      	strb	r2, [r7, #23]
 8010d26:	3318      	adds	r3, #24
 8010d28:	443b      	add	r3, r7
 8010d2a:	2211      	movs	r2, #17
 8010d2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 8010d30:	7dfb      	ldrb	r3, [r7, #23]
 8010d32:	1c5a      	adds	r2, r3, #1
 8010d34:	75fa      	strb	r2, [r7, #23]
 8010d36:	3318      	adds	r3, #24
 8010d38:	443b      	add	r3, r7
 8010d3a:	78fa      	ldrb	r2, [r7, #3]
 8010d3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 8010d40:	7dfb      	ldrb	r3, [r7, #23]
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	75fa      	strb	r2, [r7, #23]
 8010d46:	3318      	adds	r3, #24
 8010d48:	443b      	add	r3, r7
 8010d4a:	78ba      	ldrb	r2, [r7, #2]
 8010d4c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010d50:	2300      	movs	r3, #0
 8010d52:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010d54:	7dfb      	ldrb	r3, [r7, #23]
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	7dbb      	ldrb	r3, [r7, #22]
 8010d5a:	b298      	uxth	r0, r3
 8010d5c:	f107 010c 	add.w	r1, r7, #12
 8010d60:	f107 0312 	add.w	r3, r7, #18
 8010d64:	9301      	str	r3, [sp, #4]
 8010d66:	f107 0308 	add.w	r3, r7, #8
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7fe f9fa 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010d74:	4603      	mov	r3, r0
 8010d76:	82bb      	strh	r3, [r7, #20]
 8010d78:	8abb      	ldrh	r3, [r7, #20]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d001      	beq.n	8010d82 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 8010d7e:	8abb      	ldrh	r3, [r7, #20]
 8010d80:	e000      	b.n	8010d84 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3718      	adds	r7, #24
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af02      	add	r7, sp, #8
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	460b      	mov	r3, r1
 8010d96:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 8010d9e:	78fb      	ldrb	r3, [r7, #3]
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	d902      	bls.n	8010daa <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010da4:	f240 2321 	movw	r3, #545	@ 0x221
 8010da8:	e02b      	b.n	8010e02 <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 8010daa:	2300      	movs	r3, #0
 8010dac:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	1c5a      	adds	r2, r3, #1
 8010db2:	75fa      	strb	r2, [r7, #23]
 8010db4:	3318      	adds	r3, #24
 8010db6:	443b      	add	r3, r7
 8010db8:	2216      	movs	r2, #22
 8010dba:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 8010dbe:	7dfb      	ldrb	r3, [r7, #23]
 8010dc0:	1c5a      	adds	r2, r3, #1
 8010dc2:	75fa      	strb	r2, [r7, #23]
 8010dc4:	3318      	adds	r3, #24
 8010dc6:	443b      	add	r3, r7
 8010dc8:	78fa      	ldrb	r2, [r7, #3]
 8010dca:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010dd2:	7dfb      	ldrb	r3, [r7, #23]
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	7dbb      	ldrb	r3, [r7, #22]
 8010dd8:	b298      	uxth	r0, r3
 8010dda:	f107 0110 	add.w	r1, r7, #16
 8010dde:	f107 0312 	add.w	r3, r7, #18
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	f107 030c 	add.w	r3, r7, #12
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	4603      	mov	r3, r0
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7fe f9bb 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010df2:	4603      	mov	r3, r0
 8010df4:	82bb      	strh	r3, [r7, #20]
 8010df6:	8abb      	ldrh	r3, [r7, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <phhalHw_Pn5180_Instr_RfOn+0x74>
 8010dfc:	8abb      	ldrh	r3, [r7, #20]
 8010dfe:	e000      	b.n	8010e02 <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010e00:	2300      	movs	r3, #0

}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3718      	adds	r7, #24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b088      	sub	sp, #32
 8010e0e:	af02      	add	r7, sp, #8
 8010e10:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d102      	bne.n	8010e1e <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010e18:	f240 2321 	movw	r3, #545	@ 0x221
 8010e1c:	e02b      	b.n	8010e76 <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	1c5a      	adds	r2, r3, #1
 8010e26:	75fa      	strb	r2, [r7, #23]
 8010e28:	3318      	adds	r3, #24
 8010e2a:	443b      	add	r3, r7
 8010e2c:	2217      	movs	r2, #23
 8010e2e:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	1c5a      	adds	r2, r3, #1
 8010e36:	75fa      	strb	r2, [r7, #23]
 8010e38:	3318      	adds	r3, #24
 8010e3a:	443b      	add	r3, r7
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8010e42:	2300      	movs	r3, #0
 8010e44:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8010e46:	7dfb      	ldrb	r3, [r7, #23]
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	7dbb      	ldrb	r3, [r7, #22]
 8010e4c:	b298      	uxth	r0, r3
 8010e4e:	f107 0110 	add.w	r1, r7, #16
 8010e52:	f107 0312 	add.w	r3, r7, #18
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	f107 030c 	add.w	r3, r7, #12
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	4603      	mov	r3, r0
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7fe f981 	bl	800f168 <phhalHw_Pn5180_BalExchange>
 8010e66:	4603      	mov	r3, r0
 8010e68:	82bb      	strh	r3, [r7, #20]
 8010e6a:	8abb      	ldrh	r3, [r7, #20]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d001      	beq.n	8010e74 <phhalHw_Pn5180_Instr_RfOff+0x6a>
 8010e70:	8abb      	ldrh	r3, [r7, #20]
 8010e72:	e000      	b.n	8010e76 <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8010e74:	2300      	movs	r3, #0

}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3718      	adds	r7, #24
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b086      	sub	sp, #24
 8010e82:	af02      	add	r7, sp, #8
 8010e84:	60f8      	str	r0, [r7, #12]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	603b      	str	r3, [r7, #0]
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8010e8e:	7afb      	ldrb	r3, [r7, #11]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d023      	beq.n	8010edc <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	68da      	ldr	r2, [r3, #12]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	695b      	ldr	r3, [r3, #20]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d10f      	bne.n	8010ec0 <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	8bd2      	ldrh	r2, [r2, #30]
 8010ea8:	441a      	add	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	8a1a      	ldrh	r2, [r3, #16]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	8bdb      	ldrh	r3, [r3, #30]
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	801a      	strh	r2, [r3, #0]
 8010ebe:	e007      	b.n	8010ed0 <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	68da      	ldr	r2, [r3, #12]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	8a1a      	ldrh	r2, [r3, #16]
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	8a5a      	ldrh	r2, [r3, #18]
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	e008      	b.n	8010eee <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 8010edc:	7af9      	ldrb	r1, [r7, #11]
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f000 f805 	bl	8010ef6 <phhalHw_Pn5180_GetRxBuffer>
 8010eec:	4603      	mov	r3, r0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3710      	adds	r7, #16
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 8010ef6:	b480      	push	{r7}
 8010ef8:	b087      	sub	sp, #28
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	60f8      	str	r0, [r7, #12]
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	603b      	str	r3, [r7, #0]
 8010f02:	460b      	mov	r3, r1
 8010f04:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 8010f06:	2300      	movs	r3, #0
 8010f08:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 8010f0a:	7afb      	ldrb	r3, [r7, #11]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d021      	beq.n	8010f54 <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d101      	bne.n	8010f1e <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	695b      	ldr	r3, [r3, #20]
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	8bd2      	ldrh	r2, [r2, #30]
 8010f26:	4611      	mov	r1, r2
 8010f28:	7dfa      	ldrb	r2, [r7, #23]
 8010f2a:	1a8a      	subs	r2, r1, r2
 8010f2c:	441a      	add	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	8b1a      	ldrh	r2, [r3, #24]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	8bdb      	ldrh	r3, [r3, #30]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	7dfb      	ldrb	r3, [r7, #23]
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	1ad3      	subs	r3, r2, r3
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	6a3b      	ldr	r3, [r7, #32]
 8010f48:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	8b5a      	ldrh	r2, [r3, #26]
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	801a      	strh	r2, [r3, #0]
 8010f52:	e055      	b.n	8011000 <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	2200      	movs	r2, #0
 8010f58:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	68da      	ldr	r2, [r3, #12]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	695b      	ldr	r3, [r3, #20]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d11f      	bne.n	8010fa6 <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d103      	bne.n	8010f76 <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	8bdb      	ldrh	r3, [r3, #30]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d017      	beq.n	8010fa6 <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	8bd2      	ldrh	r2, [r2, #30]
 8010f7e:	4611      	mov	r1, r2
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	8a52      	ldrh	r2, [r2, #18]
 8010f84:	440a      	add	r2, r1
 8010f86:	441a      	add	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	8a1a      	ldrh	r2, [r3, #16]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	8bd9      	ldrh	r1, [r3, #30]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	8a5b      	ldrh	r3, [r3, #18]
 8010f98:	440b      	add	r3, r1
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	6a3b      	ldr	r3, [r7, #32]
 8010fa2:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 8010fa4:	e02c      	b.n	8011000 <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	8a1b      	ldrh	r3, [r3, #16]
 8010faa:	461a      	mov	r2, r3
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	8a5b      	ldrh	r3, [r3, #18]
 8010fb0:	1ad2      	subs	r2, r2, r3
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	8b1b      	ldrh	r3, [r3, #24]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	8bdb      	ldrh	r3, [r3, #30]
 8010fbc:	1acb      	subs	r3, r1, r3
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	db0f      	blt.n	8010fe2 <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	8a52      	ldrh	r2, [r2, #18]
 8010fca:	441a      	add	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	8a1a      	ldrh	r2, [r3, #16]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	8a5b      	ldrh	r3, [r3, #18]
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	801a      	strh	r2, [r3, #0]
 8010fe0:	e00e      	b.n	8011000 <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	695b      	ldr	r3, [r3, #20]
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	8bd2      	ldrh	r2, [r2, #30]
 8010fea:	441a      	add	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	8b1a      	ldrh	r2, [r3, #24]
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	8bdb      	ldrh	r3, [r3, #30]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	6a3b      	ldr	r3, [r7, #32]
 8010ffe:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 8011000:	2300      	movs	r3, #0
}
 8011002:	4618      	mov	r0, r3
 8011004:	371c      	adds	r7, #28
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr

0801100e <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b086      	sub	sp, #24
 8011012:	af00      	add	r7, sp, #0
 8011014:	60f8      	str	r0, [r7, #12]
 8011016:	60b9      	str	r1, [r7, #8]
 8011018:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 801101a:	2300      	movs	r3, #0
 801101c:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 801101e:	f107 0310 	add.w	r3, r7, #16
 8011022:	461a      	mov	r2, r3
 8011024:	2113      	movs	r1, #19
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f7fb fbf6 	bl	800c818 <phhalHw_Pn5180_ReadRegister>
 801102c:	4603      	mov	r3, r0
 801102e:	82bb      	strh	r3, [r7, #20]
 8011030:	8abb      	ldrh	r3, [r7, #20]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <phhalHw_Pn5180_ReadData+0x2c>
 8011036:	8abb      	ldrh	r3, [r7, #20]
 8011038:	e02d      	b.n	8011096 <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011040:	2b01      	cmp	r3, #1
 8011042:	d10f      	bne.n	8011064 <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	b29b      	uxth	r3, r3
 8011048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801104c:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8011052:	b29b      	uxth	r3, r3
 8011054:	f003 030f 	and.w	r3, r3, #15
 8011058:	b29b      	uxth	r3, r3
 801105a:	015b      	lsls	r3, r3, #5
 801105c:	b29b      	uxth	r3, r3
 801105e:	4313      	orrs	r3, r2
 8011060:	82fb      	strh	r3, [r7, #22]
 8011062:	e004      	b.n	801106e <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	b29b      	uxth	r3, r3
 8011068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801106c:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 801106e:	8afb      	ldrh	r3, [r7, #22]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00c      	beq.n	801108e <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 8011074:	8afb      	ldrh	r3, [r7, #22]
 8011076:	461a      	mov	r2, r3
 8011078:	68b9      	ldr	r1, [r7, #8]
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	f7ff fb52 	bl	8010724 <phhalHw_Pn5180_Instr_RetrieveRxData>
 8011080:	4603      	mov	r3, r0
 8011082:	82bb      	strh	r3, [r7, #20]
 8011084:	8abb      	ldrh	r3, [r7, #20]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d001      	beq.n	801108e <phhalHw_Pn5180_ReadData+0x80>
 801108a:	8abb      	ldrh	r3, [r7, #20]
 801108c:	e003      	b.n	8011096 <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	8afa      	ldrh	r2, [r7, #22]
 8011092:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3718      	adds	r7, #24
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b08e      	sub	sp, #56	@ 0x38
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	60f8      	str	r0, [r7, #12]
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	603b      	str	r3, [r7, #0]
 80110aa:	460b      	mov	r3, r1
 80110ac:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 80110ae:	7afb      	ldrb	r3, [r7, #11]
 80110b0:	2b10      	cmp	r3, #16
 80110b2:	d018      	beq.n	80110e6 <phhalHw_Pn5180_TimerStart+0x48>
 80110b4:	2b10      	cmp	r3, #16
 80110b6:	dc1f      	bgt.n	80110f8 <phhalHw_Pn5180_TimerStart+0x5a>
 80110b8:	2b0e      	cmp	r3, #14
 80110ba:	d002      	beq.n	80110c2 <phhalHw_Pn5180_TimerStart+0x24>
 80110bc:	2b0f      	cmp	r3, #15
 80110be:	d009      	beq.n	80110d4 <phhalHw_Pn5180_TimerStart+0x36>
 80110c0:	e01a      	b.n	80110f8 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 80110c2:	230e      	movs	r3, #14
 80110c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 80110c8:	230b      	movs	r3, #11
 80110ca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 80110ce:	2301      	movs	r3, #1
 80110d0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80110d2:	e014      	b.n	80110fe <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 80110d4:	230f      	movs	r3, #15
 80110d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 80110da:	230c      	movs	r3, #12
 80110dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 80110e0:	2301      	movs	r3, #1
 80110e2:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80110e4:	e00b      	b.n	80110fe <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 80110e6:	2310      	movs	r3, #16
 80110e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 80110ec:	230d      	movs	r3, #13
 80110ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 80110f2:	2301      	movs	r3, #1
 80110f4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80110f6:	e002      	b.n	80110fe <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80110f8:	f240 2321 	movw	r3, #545	@ 0x221
 80110fc:	e0bd      	b.n	801127a <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 80110fe:	2300      	movs	r3, #0
 8011100:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8011102:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011108:	3338      	adds	r3, #56	@ 0x38
 801110a:	443b      	add	r3, r7
 801110c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011110:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 8011114:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801111a:	3338      	adds	r3, #56	@ 0x38
 801111c:	443b      	add	r3, r7
 801111e:	2201      	movs	r2, #1
 8011120:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8011124:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801112a:	3338      	adds	r3, #56	@ 0x38
 801112c:	443b      	add	r3, r7
 801112e:	2200      	movs	r2, #0
 8011130:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8011134:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011136:	1c5a      	adds	r2, r3, #1
 8011138:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801113a:	3338      	adds	r3, #56	@ 0x38
 801113c:	443b      	add	r3, r7
 801113e:	2200      	movs	r2, #0
 8011140:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8011144:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011146:	1c5a      	adds	r2, r3, #1
 8011148:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801114a:	3338      	adds	r3, #56	@ 0x38
 801114c:	443b      	add	r3, r7
 801114e:	2200      	movs	r2, #0
 8011150:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8011154:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801115a:	3338      	adds	r3, #56	@ 0x38
 801115c:	443b      	add	r3, r7
 801115e:	2200      	movs	r2, #0
 8011160:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 8011164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801116a:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 801116c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011172:	3338      	adds	r3, #56	@ 0x38
 8011174:	443b      	add	r3, r7
 8011176:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 801117a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801117e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011180:	1c5a      	adds	r2, r3, #1
 8011182:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011184:	3338      	adds	r3, #56	@ 0x38
 8011186:	443b      	add	r3, r7
 8011188:	2201      	movs	r2, #1
 801118a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801118e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011190:	1c5a      	adds	r2, r3, #1
 8011192:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011196:	b2d2      	uxtb	r2, r2
 8011198:	3338      	adds	r3, #56	@ 0x38
 801119a:	443b      	add	r3, r7
 801119c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80111a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a2:	0a1a      	lsrs	r2, r3, #8
 80111a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111a6:	1c59      	adds	r1, r3, #1
 80111a8:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80111aa:	b2d2      	uxtb	r2, r2
 80111ac:	3338      	adds	r3, #56	@ 0x38
 80111ae:	443b      	add	r3, r7
 80111b0:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 80111b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b6:	0c1a      	lsrs	r2, r3, #16
 80111b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111ba:	1c59      	adds	r1, r3, #1
 80111bc:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80111be:	b2d2      	uxtb	r2, r2
 80111c0:	3338      	adds	r3, #56	@ 0x38
 80111c2:	443b      	add	r3, r7
 80111c4:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 80111c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ca:	0e1a      	lsrs	r2, r3, #24
 80111cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111ce:	1c59      	adds	r1, r3, #1
 80111d0:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80111d2:	b2d2      	uxtb	r2, r2
 80111d4:	3338      	adds	r3, #56	@ 0x38
 80111d6:	443b      	add	r3, r7
 80111d8:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	431a      	orrs	r2, r3
 80111e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111e4:	4313      	orrs	r3, r2
 80111e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111e8:	4313      	orrs	r3, r2
 80111ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80111ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80111ee:	1c5a      	adds	r2, r3, #1
 80111f0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80111f2:	3338      	adds	r3, #56	@ 0x38
 80111f4:	443b      	add	r3, r7
 80111f6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80111fa:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80111fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011200:	1c5a      	adds	r2, r3, #1
 8011202:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011204:	3338      	adds	r3, #56	@ 0x38
 8011206:	443b      	add	r3, r7
 8011208:	2201      	movs	r2, #1
 801120a:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801120e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011210:	1c5a      	adds	r2, r3, #1
 8011212:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8011214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011216:	b2d2      	uxtb	r2, r2
 8011218:	3338      	adds	r3, #56	@ 0x38
 801121a:	443b      	add	r3, r7
 801121c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 8011220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011222:	0a1a      	lsrs	r2, r3, #8
 8011224:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011226:	1c59      	adds	r1, r3, #1
 8011228:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801122a:	b2d2      	uxtb	r2, r2
 801122c:	3338      	adds	r3, #56	@ 0x38
 801122e:	443b      	add	r3, r7
 8011230:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8011234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011236:	0c1a      	lsrs	r2, r3, #16
 8011238:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801123a:	1c59      	adds	r1, r3, #1
 801123c:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801123e:	b2d2      	uxtb	r2, r2
 8011240:	3338      	adds	r3, #56	@ 0x38
 8011242:	443b      	add	r3, r7
 8011244:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8011248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124a:	0e1a      	lsrs	r2, r3, #24
 801124c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801124e:	1c59      	adds	r1, r3, #1
 8011250:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8011252:	b2d2      	uxtb	r2, r2
 8011254:	3338      	adds	r3, #56	@ 0x38
 8011256:	443b      	add	r3, r7
 8011258:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 801125c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801125e:	f107 0314 	add.w	r3, r7, #20
 8011262:	4619      	mov	r1, r3
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f7fe ff9b 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 801126a:	4603      	mov	r3, r0
 801126c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801126e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <phhalHw_Pn5180_TimerStart+0x1da>
 8011274:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011276:	e000      	b.n	801127a <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 8011278:	2300      	movs	r3, #0
}
 801127a:	4618      	mov	r0, r3
 801127c:	3738      	adds	r7, #56	@ 0x38
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
	...

08011284 <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b088      	sub	sp, #32
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	460b      	mov	r3, r1
 801128e:	807b      	strh	r3, [r7, #2]
 8011290:	4613      	mov	r3, r2
 8011292:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 8011294:	887b      	ldrh	r3, [r7, #2]
 8011296:	2b0c      	cmp	r3, #12
 8011298:	f200 81ad 	bhi.w	80115f6 <phhalHw_Pn5180_SetConfig_Int+0x372>
 801129c:	a201      	add	r2, pc, #4	@ (adr r2, 80112a4 <phhalHw_Pn5180_SetConfig_Int+0x20>)
 801129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a2:	bf00      	nop
 80112a4:	080112d9 	.word	0x080112d9
 80112a8:	08011353 	.word	0x08011353
 80112ac:	08011493 	.word	0x08011493
 80112b0:	080115f7 	.word	0x080115f7
 80112b4:	080115f7 	.word	0x080115f7
 80112b8:	080115f7 	.word	0x080115f7
 80112bc:	080115f7 	.word	0x080115f7
 80112c0:	080115f7 	.word	0x080115f7
 80112c4:	080115f7 	.word	0x080115f7
 80112c8:	080115f7 	.word	0x080115f7
 80112cc:	080115f7 	.word	0x080115f7
 80112d0:	080115f7 	.word	0x080115f7
 80112d4:	080115d1 	.word	0x080115d1
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 80112d8:	883b      	ldrh	r3, [r7, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d11e      	bne.n	801131c <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 80112de:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 80112e2:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 80112e4:	697a      	ldr	r2, [r7, #20]
 80112e6:	2118      	movs	r1, #24
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7fe fee3 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80112ee:	4603      	mov	r3, r0
 80112f0:	837b      	strh	r3, [r7, #26]
 80112f2:	8b7b      	ldrh	r3, [r7, #26]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d001      	beq.n	80112fc <phhalHw_Pn5180_SetConfig_Int+0x78>
 80112f8:	8b7b      	ldrh	r3, [r7, #26]
 80112fa:	e187      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 80112fc:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8011300:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 8011302:	697a      	ldr	r2, [r7, #20]
 8011304:	2112      	movs	r1, #18
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7fe fed4 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801130c:	4603      	mov	r3, r0
 801130e:	837b      	strh	r3, [r7, #26]
 8011310:	8b7b      	ldrh	r3, [r7, #26]
 8011312:	2b00      	cmp	r3, #0
 8011314:	f000 8172 	beq.w	80115fc <phhalHw_Pn5180_SetConfig_Int+0x378>
 8011318:	8b7b      	ldrh	r3, [r7, #26]
 801131a:	e177      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 801131c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011320:	2118      	movs	r1, #24
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7fe fe50 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011328:	4603      	mov	r3, r0
 801132a:	837b      	strh	r3, [r7, #26]
 801132c:	8b7b      	ldrh	r3, [r7, #26]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <phhalHw_Pn5180_SetConfig_Int+0xb2>
 8011332:	8b7b      	ldrh	r3, [r7, #26]
 8011334:	e16a      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 8011336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801133a:	2112      	movs	r1, #18
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7fe fe43 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8011342:	4603      	mov	r3, r0
 8011344:	837b      	strh	r3, [r7, #26]
 8011346:	8b7b      	ldrh	r3, [r7, #26]
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 8157 	beq.w	80115fc <phhalHw_Pn5180_SetConfig_Int+0x378>
 801134e:	8b7b      	ldrh	r3, [r7, #26]
 8011350:	e15c      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 8011352:	883b      	ldrh	r3, [r7, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d10f      	bne.n	8011378 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 8011358:	f06f 0301 	mvn.w	r3, #1
 801135c:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 801135e:	697a      	ldr	r2, [r7, #20]
 8011360:	2119      	movs	r1, #25
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f7fe fea6 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8011368:	4603      	mov	r3, r0
 801136a:	837b      	strh	r3, [r7, #26]
 801136c:	8b7b      	ldrh	r3, [r7, #26]
 801136e:	2b00      	cmp	r3, #0
 8011370:	f000 8146 	beq.w	8011600 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 8011374:	8b7b      	ldrh	r3, [r7, #26]
 8011376:	e149      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8011378:	2300      	movs	r3, #0
 801137a:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 801137c:	f06f 0304 	mvn.w	r3, #4
 8011380:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8011382:	8b3b      	ldrh	r3, [r7, #24]
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	833a      	strh	r2, [r7, #24]
 8011388:	3320      	adds	r3, #32
 801138a:	443b      	add	r3, r7
 801138c:	2219      	movs	r2, #25
 801138e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 8011392:	8b3b      	ldrh	r3, [r7, #24]
 8011394:	1c5a      	adds	r2, r3, #1
 8011396:	833a      	strh	r2, [r7, #24]
 8011398:	3320      	adds	r3, #32
 801139a:	443b      	add	r3, r7
 801139c:	2203      	movs	r2, #3
 801139e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80113a2:	8b3b      	ldrh	r3, [r7, #24]
 80113a4:	1c5a      	adds	r2, r3, #1
 80113a6:	833a      	strh	r2, [r7, #24]
 80113a8:	69fa      	ldr	r2, [r7, #28]
 80113aa:	b2d2      	uxtb	r2, r2
 80113ac:	3320      	adds	r3, #32
 80113ae:	443b      	add	r3, r7
 80113b0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	0a1a      	lsrs	r2, r3, #8
 80113b8:	8b3b      	ldrh	r3, [r7, #24]
 80113ba:	1c59      	adds	r1, r3, #1
 80113bc:	8339      	strh	r1, [r7, #24]
 80113be:	b2d2      	uxtb	r2, r2
 80113c0:	3320      	adds	r3, #32
 80113c2:	443b      	add	r3, r7
 80113c4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	0c1a      	lsrs	r2, r3, #16
 80113cc:	8b3b      	ldrh	r3, [r7, #24]
 80113ce:	1c59      	adds	r1, r3, #1
 80113d0:	8339      	strh	r1, [r7, #24]
 80113d2:	b2d2      	uxtb	r2, r2
 80113d4:	3320      	adds	r3, #32
 80113d6:	443b      	add	r3, r7
 80113d8:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	0e1a      	lsrs	r2, r3, #24
 80113e0:	8b3b      	ldrh	r3, [r7, #24]
 80113e2:	1c59      	adds	r1, r3, #1
 80113e4:	8339      	strh	r1, [r7, #24]
 80113e6:	b2d2      	uxtb	r2, r2
 80113e8:	3320      	adds	r3, #32
 80113ea:	443b      	add	r3, r7
 80113ec:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 80113f0:	2301      	movs	r3, #1
 80113f2:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113fa:	2b06      	cmp	r3, #6
 80113fc:	d103      	bne.n	8011406 <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	f043 0304 	orr.w	r3, r3, #4
 8011404:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 8011406:	8b3b      	ldrh	r3, [r7, #24]
 8011408:	1c5a      	adds	r2, r3, #1
 801140a:	833a      	strh	r2, [r7, #24]
 801140c:	3320      	adds	r3, #32
 801140e:	443b      	add	r3, r7
 8011410:	2219      	movs	r2, #25
 8011412:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8011416:	8b3b      	ldrh	r3, [r7, #24]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	833a      	strh	r2, [r7, #24]
 801141c:	3320      	adds	r3, #32
 801141e:	443b      	add	r3, r7
 8011420:	2202      	movs	r2, #2
 8011422:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011426:	8b3b      	ldrh	r3, [r7, #24]
 8011428:	1c5a      	adds	r2, r3, #1
 801142a:	833a      	strh	r2, [r7, #24]
 801142c:	69fa      	ldr	r2, [r7, #28]
 801142e:	b2d2      	uxtb	r2, r2
 8011430:	3320      	adds	r3, #32
 8011432:	443b      	add	r3, r7
 8011434:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	0a1a      	lsrs	r2, r3, #8
 801143c:	8b3b      	ldrh	r3, [r7, #24]
 801143e:	1c59      	adds	r1, r3, #1
 8011440:	8339      	strh	r1, [r7, #24]
 8011442:	b2d2      	uxtb	r2, r2
 8011444:	3320      	adds	r3, #32
 8011446:	443b      	add	r3, r7
 8011448:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	0c1a      	lsrs	r2, r3, #16
 8011450:	8b3b      	ldrh	r3, [r7, #24]
 8011452:	1c59      	adds	r1, r3, #1
 8011454:	8339      	strh	r1, [r7, #24]
 8011456:	b2d2      	uxtb	r2, r2
 8011458:	3320      	adds	r3, #32
 801145a:	443b      	add	r3, r7
 801145c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	0e1a      	lsrs	r2, r3, #24
 8011464:	8b3b      	ldrh	r3, [r7, #24]
 8011466:	1c59      	adds	r1, r3, #1
 8011468:	8339      	strh	r1, [r7, #24]
 801146a:	b2d2      	uxtb	r2, r2
 801146c:	3320      	adds	r3, #32
 801146e:	443b      	add	r3, r7
 8011470:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8011474:	8b3a      	ldrh	r2, [r7, #24]
 8011476:	f107 0308 	add.w	r3, r7, #8
 801147a:	4619      	mov	r1, r3
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7fe fe8f 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8011482:	4603      	mov	r3, r0
 8011484:	837b      	strh	r3, [r7, #26]
 8011486:	8b7b      	ldrh	r3, [r7, #26]
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 80b9 	beq.w	8011600 <phhalHw_Pn5180_SetConfig_Int+0x37c>
 801148e:	8b7b      	ldrh	r3, [r7, #26]
 8011490:	e0bc      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 8011492:	883b      	ldrh	r3, [r7, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10f      	bne.n	80114b8 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8011498:	f06f 0301 	mvn.w	r3, #1
 801149c:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 801149e:	697a      	ldr	r2, [r7, #20]
 80114a0:	2112      	movs	r1, #18
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f7fe fe06 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80114a8:	4603      	mov	r3, r0
 80114aa:	837b      	strh	r3, [r7, #26]
 80114ac:	8b7b      	ldrh	r3, [r7, #26]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f000 80a8 	beq.w	8011604 <phhalHw_Pn5180_SetConfig_Int+0x380>
 80114b4:	8b7b      	ldrh	r3, [r7, #26]
 80114b6:	e0a9      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 80114b8:	2300      	movs	r3, #0
 80114ba:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 80114bc:	f06f 0304 	mvn.w	r3, #4
 80114c0:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 80114c2:	8b3b      	ldrh	r3, [r7, #24]
 80114c4:	1c5a      	adds	r2, r3, #1
 80114c6:	833a      	strh	r2, [r7, #24]
 80114c8:	3320      	adds	r3, #32
 80114ca:	443b      	add	r3, r7
 80114cc:	2212      	movs	r2, #18
 80114ce:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80114d2:	8b3b      	ldrh	r3, [r7, #24]
 80114d4:	1c5a      	adds	r2, r3, #1
 80114d6:	833a      	strh	r2, [r7, #24]
 80114d8:	3320      	adds	r3, #32
 80114da:	443b      	add	r3, r7
 80114dc:	2203      	movs	r2, #3
 80114de:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80114e2:	8b3b      	ldrh	r3, [r7, #24]
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	833a      	strh	r2, [r7, #24]
 80114e8:	69fa      	ldr	r2, [r7, #28]
 80114ea:	b2d2      	uxtb	r2, r2
 80114ec:	3320      	adds	r3, #32
 80114ee:	443b      	add	r3, r7
 80114f0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	0a1a      	lsrs	r2, r3, #8
 80114f8:	8b3b      	ldrh	r3, [r7, #24]
 80114fa:	1c59      	adds	r1, r3, #1
 80114fc:	8339      	strh	r1, [r7, #24]
 80114fe:	b2d2      	uxtb	r2, r2
 8011500:	3320      	adds	r3, #32
 8011502:	443b      	add	r3, r7
 8011504:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	0c1a      	lsrs	r2, r3, #16
 801150c:	8b3b      	ldrh	r3, [r7, #24]
 801150e:	1c59      	adds	r1, r3, #1
 8011510:	8339      	strh	r1, [r7, #24]
 8011512:	b2d2      	uxtb	r2, r2
 8011514:	3320      	adds	r3, #32
 8011516:	443b      	add	r3, r7
 8011518:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	0e1a      	lsrs	r2, r3, #24
 8011520:	8b3b      	ldrh	r3, [r7, #24]
 8011522:	1c59      	adds	r1, r3, #1
 8011524:	8339      	strh	r1, [r7, #24]
 8011526:	b2d2      	uxtb	r2, r2
 8011528:	3320      	adds	r3, #32
 801152a:	443b      	add	r3, r7
 801152c:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8011530:	2301      	movs	r3, #1
 8011532:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801153a:	2b06      	cmp	r3, #6
 801153c:	d103      	bne.n	8011546 <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	f043 0304 	orr.w	r3, r3, #4
 8011544:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8011546:	8b3b      	ldrh	r3, [r7, #24]
 8011548:	1c5a      	adds	r2, r3, #1
 801154a:	833a      	strh	r2, [r7, #24]
 801154c:	3320      	adds	r3, #32
 801154e:	443b      	add	r3, r7
 8011550:	2212      	movs	r2, #18
 8011552:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8011556:	8b3b      	ldrh	r3, [r7, #24]
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	833a      	strh	r2, [r7, #24]
 801155c:	3320      	adds	r3, #32
 801155e:	443b      	add	r3, r7
 8011560:	2202      	movs	r2, #2
 8011562:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8011566:	8b3b      	ldrh	r3, [r7, #24]
 8011568:	1c5a      	adds	r2, r3, #1
 801156a:	833a      	strh	r2, [r7, #24]
 801156c:	69fa      	ldr	r2, [r7, #28]
 801156e:	b2d2      	uxtb	r2, r2
 8011570:	3320      	adds	r3, #32
 8011572:	443b      	add	r3, r7
 8011574:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	0a1a      	lsrs	r2, r3, #8
 801157c:	8b3b      	ldrh	r3, [r7, #24]
 801157e:	1c59      	adds	r1, r3, #1
 8011580:	8339      	strh	r1, [r7, #24]
 8011582:	b2d2      	uxtb	r2, r2
 8011584:	3320      	adds	r3, #32
 8011586:	443b      	add	r3, r7
 8011588:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 801158c:	69fb      	ldr	r3, [r7, #28]
 801158e:	0c1a      	lsrs	r2, r3, #16
 8011590:	8b3b      	ldrh	r3, [r7, #24]
 8011592:	1c59      	adds	r1, r3, #1
 8011594:	8339      	strh	r1, [r7, #24]
 8011596:	b2d2      	uxtb	r2, r2
 8011598:	3320      	adds	r3, #32
 801159a:	443b      	add	r3, r7
 801159c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	0e1a      	lsrs	r2, r3, #24
 80115a4:	8b3b      	ldrh	r3, [r7, #24]
 80115a6:	1c59      	adds	r1, r3, #1
 80115a8:	8339      	strh	r1, [r7, #24]
 80115aa:	b2d2      	uxtb	r2, r2
 80115ac:	3320      	adds	r3, #32
 80115ae:	443b      	add	r3, r7
 80115b0:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80115b4:	8b3a      	ldrh	r2, [r7, #24]
 80115b6:	f107 0308 	add.w	r3, r7, #8
 80115ba:	4619      	mov	r1, r3
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7fe fdef 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80115c2:	4603      	mov	r3, r0
 80115c4:	837b      	strh	r3, [r7, #26]
 80115c6:	8b7b      	ldrh	r3, [r7, #26]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d01b      	beq.n	8011604 <phhalHw_Pn5180_SetConfig_Int+0x380>
 80115cc:	8b7b      	ldrh	r3, [r7, #26]
 80115ce:	e01d      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 80115d0:	883b      	ldrh	r3, [r7, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d102      	bne.n	80115dc <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80115d6:	f240 2323 	movw	r3, #547	@ 0x223
 80115da:	e017      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 80115dc:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 80115e0:	2120      	movs	r1, #32
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f7fe fd66 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80115e8:	4603      	mov	r3, r0
 80115ea:	837b      	strh	r3, [r7, #26]
 80115ec:	8b7b      	ldrh	r3, [r7, #26]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00a      	beq.n	8011608 <phhalHw_Pn5180_SetConfig_Int+0x384>
 80115f2:	8b7b      	ldrh	r3, [r7, #26]
 80115f4:	e00a      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80115f6:	f240 237f 	movw	r3, #639	@ 0x27f
 80115fa:	e007      	b.n	801160c <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 80115fc:	bf00      	nop
 80115fe:	e004      	b.n	801160a <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011600:	bf00      	nop
 8011602:	e002      	b.n	801160a <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011604:	bf00      	nop
 8011606:	e000      	b.n	801160a <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 8011608:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801160a:	2300      	movs	r3, #0
}
 801160c:	4618      	mov	r0, r3
 801160e:	3720      	adds	r7, #32
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011622:	2b04      	cmp	r3, #4
 8011624:	d00f      	beq.n	8011646 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 8011626:	2200      	movs	r2, #0
 8011628:	2143      	movs	r1, #67	@ 0x43
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7fe fc56 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 8011630:	4603      	mov	r3, r0
 8011632:	81fb      	strh	r3, [r7, #14]
 8011634:	89fb      	ldrh	r3, [r7, #14]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d001      	beq.n	801163e <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 801163a:	89fb      	ldrh	r3, [r7, #14]
 801163c:	e013      	b.n	8011666 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	655a      	str	r2, [r3, #84]	@ 0x54
 8011644:	e00e      	b.n	8011664 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 8011646:	4a0a      	ldr	r2, [pc, #40]	@ (8011670 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8011648:	2143      	movs	r1, #67	@ 0x43
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7fe fc46 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 8011650:	4603      	mov	r3, r0
 8011652:	81fb      	strh	r3, [r7, #14]
 8011654:	89fb      	ldrh	r3, [r7, #14]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 801165a:	89fb      	ldrh	r3, [r7, #14]
 801165c:	e003      	b.n	8011666 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4a03      	ldr	r2, [pc, #12]	@ (8011670 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8011662:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8011664:	2300      	movs	r3, #0
}
 8011666:	4618      	mov	r0, r3
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	00ff0019 	.word	0x00ff0019

08011674 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b086      	sub	sp, #24
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	460b      	mov	r3, r1
 801167e:	607a      	str	r2, [r7, #4]
 8011680:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 8011682:	897b      	ldrh	r3, [r7, #10]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d005      	beq.n	8011694 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 8011688:	897b      	ldrh	r3, [r7, #10]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d002      	beq.n	8011694 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801168e:	f240 2321 	movw	r3, #545	@ 0x221
 8011692:	e037      	b.n	8011704 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 8011694:	897b      	ldrh	r3, [r7, #10]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d018      	beq.n	80116cc <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4013      	ands	r3, r2
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d12d      	bne.n	8011702 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	2143      	movs	r1, #67	@ 0x43
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f7fe fc8c 	bl	800ffc8 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80116b0:	4603      	mov	r3, r0
 80116b2:	82fb      	strh	r3, [r7, #22]
 80116b4:	8afb      	ldrh	r3, [r7, #22]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d001      	beq.n	80116be <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 80116ba:	8afb      	ldrh	r3, [r7, #22]
 80116bc:	e022      	b.n	8011704 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	431a      	orrs	r2, r3
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80116ca:	e01a      	b.n	8011702 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4013      	ands	r3, r2
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d014      	beq.n	8011702 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	43db      	mvns	r3, r3
 80116dc:	461a      	mov	r2, r3
 80116de:	2143      	movs	r1, #67	@ 0x43
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f7fe fce7 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80116e6:	4603      	mov	r3, r0
 80116e8:	82fb      	strh	r3, [r7, #22]
 80116ea:	8afb      	ldrh	r3, [r7, #22]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 80116f0:	8afb      	ldrh	r3, [r7, #22]
 80116f2:	e007      	b.n	8011704 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	43db      	mvns	r3, r3
 80116fc:	401a      	ands	r2, r3
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 8011702:	2300      	movs	r3, #0
}
 8011704:	4618      	mov	r0, r3
 8011706:	3718      	adds	r7, #24
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	607b      	str	r3, [r7, #4]
 8011716:	460b      	mov	r3, r1
 8011718:	817b      	strh	r3, [r7, #10]
 801171a:	4613      	mov	r3, r2
 801171c:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 801171e:	897b      	ldrh	r3, [r7, #10]
 8011720:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011728:	f240 2321 	movw	r3, #545	@ 0x221
 801172c:	e028      	b.n	8011780 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011732:	7a7b      	ldrb	r3, [r7, #9]
 8011734:	fa22 f303 	lsr.w	r3, r2, r3
 8011738:	b2da      	uxtb	r2, r3
 801173a:	897b      	ldrh	r3, [r7, #10]
 801173c:	b2db      	uxtb	r3, r3
 801173e:	429a      	cmp	r2, r3
 8011740:	d01d      	beq.n	801177e <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011746:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	43db      	mvns	r3, r3
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	4013      	ands	r3, r2
 8011750:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 8011752:	897a      	ldrh	r2, [r7, #10]
 8011754:	7a7b      	ldrb	r3, [r7, #9]
 8011756:	fa02 f303 	lsl.w	r3, r2, r3
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	4313      	orrs	r3, r2
 801175e:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 8011760:	697a      	ldr	r2, [r7, #20]
 8011762:	2143      	movs	r1, #67	@ 0x43
 8011764:	68f8      	ldr	r0, [r7, #12]
 8011766:	f7fe fbb9 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 801176a:	4603      	mov	r3, r0
 801176c:	827b      	strh	r3, [r7, #18]
 801176e:	8a7b      	ldrh	r3, [r7, #18]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 8011774:	8a7b      	ldrh	r3, [r7, #18]
 8011776:	e003      	b.n	8011780 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 801177e:	2300      	movs	r3, #0
}
 8011780:	4618      	mov	r0, r3
 8011782:	3718      	adds	r7, #24
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b086      	sub	sp, #24
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	4608      	mov	r0, r1
 8011792:	4611      	mov	r1, r2
 8011794:	461a      	mov	r2, r3
 8011796:	4603      	mov	r3, r0
 8011798:	817b      	strh	r3, [r7, #10]
 801179a:	460b      	mov	r3, r1
 801179c:	813b      	strh	r3, [r7, #8]
 801179e:	4613      	mov	r3, r2
 80117a0:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 80117a2:	2300      	movs	r3, #0
 80117a4:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 80117a6:	2300      	movs	r3, #0
 80117a8:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10f      	bne.n	80117d2 <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80117b8:	897a      	ldrh	r2, [r7, #10]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d101      	bne.n	80117c2 <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 80117be:	23ff      	movs	r3, #255	@ 0xff
 80117c0:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 80117c8:	893a      	ldrh	r2, [r7, #8]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d101      	bne.n	80117d2 <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 80117ce:	23ff      	movs	r3, #255	@ 0xff
 80117d0:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117d8:	3b01      	subs	r3, #1
 80117da:	2b09      	cmp	r3, #9
 80117dc:	f200 82a1 	bhi.w	8011d22 <phhalHw_Pn5180_SetCardMode+0x59a>
 80117e0:	a201      	add	r2, pc, #4	@ (adr r2, 80117e8 <phhalHw_Pn5180_SetCardMode+0x60>)
 80117e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e6:	bf00      	nop
 80117e8:	08011811 	.word	0x08011811
 80117ec:	080119d9 	.word	0x080119d9
 80117f0:	08011a79 	.word	0x08011a79
 80117f4:	08011b95 	.word	0x08011b95
 80117f8:	08011d23 	.word	0x08011d23
 80117fc:	08011c2b 	.word	0x08011c2b
 8011800:	08011cad 	.word	0x08011cad
 8011804:	08011cad 	.word	0x08011cad
 8011808:	08011cad 	.word	0x08011cad
 801180c:	08011a79 	.word	0x08011a79
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011814:	2b00      	cmp	r3, #0
 8011816:	f000 808e 	beq.w	8011936 <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011820:	2b00      	cmp	r3, #0
 8011822:	d14e      	bne.n	80118c2 <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 8011824:	897b      	ldrh	r3, [r7, #10]
 8011826:	2b03      	cmp	r3, #3
 8011828:	dc0e      	bgt.n	8011848 <phhalHw_Pn5180_SetCardMode+0xc0>
 801182a:	2b00      	cmp	r3, #0
 801182c:	db1e      	blt.n	801186c <phhalHw_Pn5180_SetCardMode+0xe4>
 801182e:	2b03      	cmp	r3, #3
 8011830:	d81c      	bhi.n	801186c <phhalHw_Pn5180_SetCardMode+0xe4>
 8011832:	a201      	add	r2, pc, #4	@ (adr r2, 8011838 <phhalHw_Pn5180_SetCardMode+0xb0>)
 8011834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011838:	0801184f 	.word	0x0801184f
 801183c:	08011855 	.word	0x08011855
 8011840:	0801185b 	.word	0x0801185b
 8011844:	08011861 	.word	0x08011861
 8011848:	2bff      	cmp	r3, #255	@ 0xff
 801184a:	d00c      	beq.n	8011866 <phhalHw_Pn5180_SetCardMode+0xde>
 801184c:	e00e      	b.n	801186c <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 801184e:	2313      	movs	r3, #19
 8011850:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8011852:	e00e      	b.n	8011872 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 8011854:	2314      	movs	r3, #20
 8011856:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8011858:	e00b      	b.n	8011872 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 801185a:	2315      	movs	r3, #21
 801185c:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 801185e:	e008      	b.n	8011872 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 8011860:	2316      	movs	r3, #22
 8011862:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8011864:	e005      	b.n	8011872 <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011866:	23ff      	movs	r3, #255	@ 0xff
 8011868:	75fb      	strb	r3, [r7, #23]
                        break;
 801186a:	e002      	b.n	8011872 <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801186c:	f240 2321 	movw	r3, #545	@ 0x221
 8011870:	e27c      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011872:	893b      	ldrh	r3, [r7, #8]
 8011874:	2b03      	cmp	r3, #3
 8011876:	dc0f      	bgt.n	8011898 <phhalHw_Pn5180_SetCardMode+0x110>
 8011878:	2b00      	cmp	r3, #0
 801187a:	db1f      	blt.n	80118bc <phhalHw_Pn5180_SetCardMode+0x134>
 801187c:	2b03      	cmp	r3, #3
 801187e:	d81d      	bhi.n	80118bc <phhalHw_Pn5180_SetCardMode+0x134>
 8011880:	a201      	add	r2, pc, #4	@ (adr r2, 8011888 <phhalHw_Pn5180_SetCardMode+0x100>)
 8011882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011886:	bf00      	nop
 8011888:	0801189f 	.word	0x0801189f
 801188c:	080118a5 	.word	0x080118a5
 8011890:	080118ab 	.word	0x080118ab
 8011894:	080118b1 	.word	0x080118b1
 8011898:	2bff      	cmp	r3, #255	@ 0xff
 801189a:	d00c      	beq.n	80118b6 <phhalHw_Pn5180_SetCardMode+0x12e>
 801189c:	e00e      	b.n	80118bc <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 801189e:	2393      	movs	r3, #147	@ 0x93
 80118a0:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 80118a2:	e098      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 80118a4:	2394      	movs	r3, #148	@ 0x94
 80118a6:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 80118a8:	e095      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 80118aa:	2395      	movs	r3, #149	@ 0x95
 80118ac:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 80118ae:	e092      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 80118b0:	2396      	movs	r3, #150	@ 0x96
 80118b2:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 80118b4:	e08f      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80118b6:	23ff      	movs	r3, #255	@ 0xff
 80118b8:	75bb      	strb	r3, [r7, #22]
                        break;
 80118ba:	e08c      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80118bc:	f240 2321 	movw	r3, #545	@ 0x221
 80118c0:	e254      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 80118c2:	897b      	ldrh	r3, [r7, #10]
 80118c4:	2bff      	cmp	r3, #255	@ 0xff
 80118c6:	d013      	beq.n	80118f0 <phhalHw_Pn5180_SetCardMode+0x168>
 80118c8:	2bff      	cmp	r3, #255	@ 0xff
 80118ca:	dc14      	bgt.n	80118f6 <phhalHw_Pn5180_SetCardMode+0x16e>
 80118cc:	2b02      	cmp	r3, #2
 80118ce:	d00c      	beq.n	80118ea <phhalHw_Pn5180_SetCardMode+0x162>
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	dc10      	bgt.n	80118f6 <phhalHw_Pn5180_SetCardMode+0x16e>
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d002      	beq.n	80118de <phhalHw_Pn5180_SetCardMode+0x156>
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d003      	beq.n	80118e4 <phhalHw_Pn5180_SetCardMode+0x15c>
 80118dc:	e00b      	b.n	80118f6 <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 80118de:	2319      	movs	r3, #25
 80118e0:	75fb      	strb	r3, [r7, #23]
                        break;
 80118e2:	e00b      	b.n	80118fc <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 80118e4:	231a      	movs	r3, #26
 80118e6:	75fb      	strb	r3, [r7, #23]
                        break;
 80118e8:	e008      	b.n	80118fc <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 80118ea:	231b      	movs	r3, #27
 80118ec:	75fb      	strb	r3, [r7, #23]
                        break;
 80118ee:	e005      	b.n	80118fc <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80118f0:	23ff      	movs	r3, #255	@ 0xff
 80118f2:	75fb      	strb	r3, [r7, #23]
                        break;
 80118f4:	e002      	b.n	80118fc <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80118f6:	f240 2321 	movw	r3, #545	@ 0x221
 80118fa:	e237      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 80118fc:	893b      	ldrh	r3, [r7, #8]
 80118fe:	2bff      	cmp	r3, #255	@ 0xff
 8011900:	d013      	beq.n	801192a <phhalHw_Pn5180_SetCardMode+0x1a2>
 8011902:	2bff      	cmp	r3, #255	@ 0xff
 8011904:	dc14      	bgt.n	8011930 <phhalHw_Pn5180_SetCardMode+0x1a8>
 8011906:	2b02      	cmp	r3, #2
 8011908:	d00c      	beq.n	8011924 <phhalHw_Pn5180_SetCardMode+0x19c>
 801190a:	2b02      	cmp	r3, #2
 801190c:	dc10      	bgt.n	8011930 <phhalHw_Pn5180_SetCardMode+0x1a8>
 801190e:	2b00      	cmp	r3, #0
 8011910:	d002      	beq.n	8011918 <phhalHw_Pn5180_SetCardMode+0x190>
 8011912:	2b01      	cmp	r3, #1
 8011914:	d003      	beq.n	801191e <phhalHw_Pn5180_SetCardMode+0x196>
 8011916:	e00b      	b.n	8011930 <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 8011918:	2399      	movs	r3, #153	@ 0x99
 801191a:	75bb      	strb	r3, [r7, #22]
                        break;
 801191c:	e05b      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 801191e:	239a      	movs	r3, #154	@ 0x9a
 8011920:	75bb      	strb	r3, [r7, #22]
                        break;
 8011922:	e058      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8011924:	239b      	movs	r3, #155	@ 0x9b
 8011926:	75bb      	strb	r3, [r7, #22]
                        break;
 8011928:	e055      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801192a:	23ff      	movs	r3, #255	@ 0xff
 801192c:	75bb      	strb	r3, [r7, #22]
                        break;
 801192e:	e052      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011930:	f240 2321 	movw	r3, #545	@ 0x221
 8011934:	e21a      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 8011936:	897b      	ldrh	r3, [r7, #10]
 8011938:	2b03      	cmp	r3, #3
 801193a:	dc0f      	bgt.n	801195c <phhalHw_Pn5180_SetCardMode+0x1d4>
 801193c:	2b00      	cmp	r3, #0
 801193e:	db1f      	blt.n	8011980 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8011940:	2b03      	cmp	r3, #3
 8011942:	d81d      	bhi.n	8011980 <phhalHw_Pn5180_SetCardMode+0x1f8>
 8011944:	a201      	add	r2, pc, #4	@ (adr r2, 801194c <phhalHw_Pn5180_SetCardMode+0x1c4>)
 8011946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801194a:	bf00      	nop
 801194c:	08011963 	.word	0x08011963
 8011950:	08011969 	.word	0x08011969
 8011954:	0801196f 	.word	0x0801196f
 8011958:	08011975 	.word	0x08011975
 801195c:	2bff      	cmp	r3, #255	@ 0xff
 801195e:	d00c      	beq.n	801197a <phhalHw_Pn5180_SetCardMode+0x1f2>
 8011960:	e00e      	b.n	8011980 <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 8011962:	2300      	movs	r3, #0
 8011964:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8011966:	e00e      	b.n	8011986 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 8011968:	2301      	movs	r3, #1
 801196a:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 801196c:	e00b      	b.n	8011986 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 801196e:	2302      	movs	r3, #2
 8011970:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8011972:	e008      	b.n	8011986 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 8011974:	2303      	movs	r3, #3
 8011976:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8011978:	e005      	b.n	8011986 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 801197a:	23ff      	movs	r3, #255	@ 0xff
 801197c:	75fb      	strb	r3, [r7, #23]
                    break;
 801197e:	e002      	b.n	8011986 <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011980:	f240 2321 	movw	r3, #545	@ 0x221
 8011984:	e1f2      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 8011986:	893b      	ldrh	r3, [r7, #8]
 8011988:	2b03      	cmp	r3, #3
 801198a:	dc0f      	bgt.n	80119ac <phhalHw_Pn5180_SetCardMode+0x224>
 801198c:	2b00      	cmp	r3, #0
 801198e:	db1f      	blt.n	80119d0 <phhalHw_Pn5180_SetCardMode+0x248>
 8011990:	2b03      	cmp	r3, #3
 8011992:	d81d      	bhi.n	80119d0 <phhalHw_Pn5180_SetCardMode+0x248>
 8011994:	a201      	add	r2, pc, #4	@ (adr r2, 801199c <phhalHw_Pn5180_SetCardMode+0x214>)
 8011996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199a:	bf00      	nop
 801199c:	080119b3 	.word	0x080119b3
 80119a0:	080119b9 	.word	0x080119b9
 80119a4:	080119bf 	.word	0x080119bf
 80119a8:	080119c5 	.word	0x080119c5
 80119ac:	2bff      	cmp	r3, #255	@ 0xff
 80119ae:	d00c      	beq.n	80119ca <phhalHw_Pn5180_SetCardMode+0x242>
 80119b0:	e00e      	b.n	80119d0 <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 80119b2:	2380      	movs	r3, #128	@ 0x80
 80119b4:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 80119b6:	e00e      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 80119b8:	2381      	movs	r3, #129	@ 0x81
 80119ba:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 80119bc:	e00b      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 80119be:	2382      	movs	r3, #130	@ 0x82
 80119c0:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 80119c2:	e008      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 80119c4:	2383      	movs	r3, #131	@ 0x83
 80119c6:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 80119c8:	e005      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 80119ca:	23ff      	movs	r3, #255	@ 0xff
 80119cc:	75bb      	strb	r3, [r7, #22]
                    break;
 80119ce:	e002      	b.n	80119d6 <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80119d0:	f240 2321 	movw	r3, #545	@ 0x221
 80119d4:	e1ca      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 80119d6:	e1a7      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 80119d8:	897b      	ldrh	r3, [r7, #10]
 80119da:	2b03      	cmp	r3, #3
 80119dc:	dc0e      	bgt.n	80119fc <phhalHw_Pn5180_SetCardMode+0x274>
 80119de:	2b00      	cmp	r3, #0
 80119e0:	db1e      	blt.n	8011a20 <phhalHw_Pn5180_SetCardMode+0x298>
 80119e2:	2b03      	cmp	r3, #3
 80119e4:	d81c      	bhi.n	8011a20 <phhalHw_Pn5180_SetCardMode+0x298>
 80119e6:	a201      	add	r2, pc, #4	@ (adr r2, 80119ec <phhalHw_Pn5180_SetCardMode+0x264>)
 80119e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ec:	08011a03 	.word	0x08011a03
 80119f0:	08011a09 	.word	0x08011a09
 80119f4:	08011a0f 	.word	0x08011a0f
 80119f8:	08011a15 	.word	0x08011a15
 80119fc:	2bff      	cmp	r3, #255	@ 0xff
 80119fe:	d00c      	beq.n	8011a1a <phhalHw_Pn5180_SetCardMode+0x292>
 8011a00:	e00e      	b.n	8011a20 <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 8011a02:	2304      	movs	r3, #4
 8011a04:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8011a06:	e00e      	b.n	8011a26 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 8011a08:	2305      	movs	r3, #5
 8011a0a:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8011a0c:	e00b      	b.n	8011a26 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 8011a0e:	2306      	movs	r3, #6
 8011a10:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8011a12:	e008      	b.n	8011a26 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 8011a14:	2307      	movs	r3, #7
 8011a16:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8011a18:	e005      	b.n	8011a26 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a1a:	23ff      	movs	r3, #255	@ 0xff
 8011a1c:	75fb      	strb	r3, [r7, #23]
                break;
 8011a1e:	e002      	b.n	8011a26 <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a20:	f240 2321 	movw	r3, #545	@ 0x221
 8011a24:	e1a2      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011a26:	893b      	ldrh	r3, [r7, #8]
 8011a28:	2b03      	cmp	r3, #3
 8011a2a:	dc0f      	bgt.n	8011a4c <phhalHw_Pn5180_SetCardMode+0x2c4>
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	db1f      	blt.n	8011a70 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8011a30:	2b03      	cmp	r3, #3
 8011a32:	d81d      	bhi.n	8011a70 <phhalHw_Pn5180_SetCardMode+0x2e8>
 8011a34:	a201      	add	r2, pc, #4	@ (adr r2, 8011a3c <phhalHw_Pn5180_SetCardMode+0x2b4>)
 8011a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a3a:	bf00      	nop
 8011a3c:	08011a53 	.word	0x08011a53
 8011a40:	08011a59 	.word	0x08011a59
 8011a44:	08011a5f 	.word	0x08011a5f
 8011a48:	08011a65 	.word	0x08011a65
 8011a4c:	2bff      	cmp	r3, #255	@ 0xff
 8011a4e:	d00c      	beq.n	8011a6a <phhalHw_Pn5180_SetCardMode+0x2e2>
 8011a50:	e00e      	b.n	8011a70 <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8011a52:	2384      	movs	r3, #132	@ 0x84
 8011a54:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8011a56:	e00e      	b.n	8011a76 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8011a58:	2385      	movs	r3, #133	@ 0x85
 8011a5a:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8011a5c:	e00b      	b.n	8011a76 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 8011a5e:	2386      	movs	r3, #134	@ 0x86
 8011a60:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8011a62:	e008      	b.n	8011a76 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8011a64:	2387      	movs	r3, #135	@ 0x87
 8011a66:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8011a68:	e005      	b.n	8011a76 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011a6a:	23ff      	movs	r3, #255	@ 0xff
 8011a6c:	75bb      	strb	r3, [r7, #22]
                break;
 8011a6e:	e002      	b.n	8011a76 <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a70:	f240 2321 	movw	r3, #545	@ 0x221
 8011a74:	e17a      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011a76:	e157      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d05c      	beq.n	8011b3a <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d12b      	bne.n	8011ae2 <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 8011a8a:	897b      	ldrh	r3, [r7, #10]
 8011a8c:	2bff      	cmp	r3, #255	@ 0xff
 8011a8e:	d00c      	beq.n	8011aaa <phhalHw_Pn5180_SetCardMode+0x322>
 8011a90:	2bff      	cmp	r3, #255	@ 0xff
 8011a92:	dc0d      	bgt.n	8011ab0 <phhalHw_Pn5180_SetCardMode+0x328>
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d002      	beq.n	8011a9e <phhalHw_Pn5180_SetCardMode+0x316>
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	d003      	beq.n	8011aa4 <phhalHw_Pn5180_SetCardMode+0x31c>
 8011a9c:	e008      	b.n	8011ab0 <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 8011a9e:	2317      	movs	r3, #23
 8011aa0:	75fb      	strb	r3, [r7, #23]
                        break;
 8011aa2:	e008      	b.n	8011ab6 <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 8011aa4:	2318      	movs	r3, #24
 8011aa6:	75fb      	strb	r3, [r7, #23]
                        break;
 8011aa8:	e005      	b.n	8011ab6 <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011aaa:	23ff      	movs	r3, #255	@ 0xff
 8011aac:	75fb      	strb	r3, [r7, #23]
                        break;
 8011aae:	e002      	b.n	8011ab6 <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ab0:	f240 2321 	movw	r3, #545	@ 0x221
 8011ab4:	e15a      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011ab6:	893b      	ldrh	r3, [r7, #8]
 8011ab8:	2bff      	cmp	r3, #255	@ 0xff
 8011aba:	d00c      	beq.n	8011ad6 <phhalHw_Pn5180_SetCardMode+0x34e>
 8011abc:	2bff      	cmp	r3, #255	@ 0xff
 8011abe:	dc0d      	bgt.n	8011adc <phhalHw_Pn5180_SetCardMode+0x354>
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d002      	beq.n	8011aca <phhalHw_Pn5180_SetCardMode+0x342>
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	d003      	beq.n	8011ad0 <phhalHw_Pn5180_SetCardMode+0x348>
 8011ac8:	e008      	b.n	8011adc <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 8011aca:	2397      	movs	r3, #151	@ 0x97
 8011acc:	75bb      	strb	r3, [r7, #22]
                        break;
 8011ace:	e060      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 8011ad0:	2398      	movs	r3, #152	@ 0x98
 8011ad2:	75bb      	strb	r3, [r7, #22]
                        break;
 8011ad4:	e05d      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011ad6:	23ff      	movs	r3, #255	@ 0xff
 8011ad8:	75bb      	strb	r3, [r7, #22]
                        break;
 8011ada:	e05a      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011adc:	f240 2321 	movw	r3, #545	@ 0x221
 8011ae0:	e144      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8011ae2:	897b      	ldrh	r3, [r7, #10]
 8011ae4:	2bff      	cmp	r3, #255	@ 0xff
 8011ae6:	d00c      	beq.n	8011b02 <phhalHw_Pn5180_SetCardMode+0x37a>
 8011ae8:	2bff      	cmp	r3, #255	@ 0xff
 8011aea:	dc0d      	bgt.n	8011b08 <phhalHw_Pn5180_SetCardMode+0x380>
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d002      	beq.n	8011af6 <phhalHw_Pn5180_SetCardMode+0x36e>
 8011af0:	2b02      	cmp	r3, #2
 8011af2:	d003      	beq.n	8011afc <phhalHw_Pn5180_SetCardMode+0x374>
 8011af4:	e008      	b.n	8011b08 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8011af6:	231a      	movs	r3, #26
 8011af8:	75fb      	strb	r3, [r7, #23]
                        break;
 8011afa:	e008      	b.n	8011b0e <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8011afc:	231b      	movs	r3, #27
 8011afe:	75fb      	strb	r3, [r7, #23]
                        break;
 8011b00:	e005      	b.n	8011b0e <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b02:	23ff      	movs	r3, #255	@ 0xff
 8011b04:	75fb      	strb	r3, [r7, #23]
                        break;
 8011b06:	e002      	b.n	8011b0e <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b08:	f240 2321 	movw	r3, #545	@ 0x221
 8011b0c:	e12e      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8011b0e:	893b      	ldrh	r3, [r7, #8]
 8011b10:	2bff      	cmp	r3, #255	@ 0xff
 8011b12:	d00c      	beq.n	8011b2e <phhalHw_Pn5180_SetCardMode+0x3a6>
 8011b14:	2bff      	cmp	r3, #255	@ 0xff
 8011b16:	dc0d      	bgt.n	8011b34 <phhalHw_Pn5180_SetCardMode+0x3ac>
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d002      	beq.n	8011b22 <phhalHw_Pn5180_SetCardMode+0x39a>
 8011b1c:	2b02      	cmp	r3, #2
 8011b1e:	d003      	beq.n	8011b28 <phhalHw_Pn5180_SetCardMode+0x3a0>
 8011b20:	e008      	b.n	8011b34 <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8011b22:	239a      	movs	r3, #154	@ 0x9a
 8011b24:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b26:	e034      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8011b28:	239b      	movs	r3, #155	@ 0x9b
 8011b2a:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b2c:	e031      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b2e:	23ff      	movs	r3, #255	@ 0xff
 8011b30:	75bb      	strb	r3, [r7, #22]
                        break;
 8011b32:	e02e      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b34:	f240 2321 	movw	r3, #545	@ 0x221
 8011b38:	e118      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 8011b3a:	897b      	ldrh	r3, [r7, #10]
 8011b3c:	2bff      	cmp	r3, #255	@ 0xff
 8011b3e:	d00c      	beq.n	8011b5a <phhalHw_Pn5180_SetCardMode+0x3d2>
 8011b40:	2bff      	cmp	r3, #255	@ 0xff
 8011b42:	dc0d      	bgt.n	8011b60 <phhalHw_Pn5180_SetCardMode+0x3d8>
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d002      	beq.n	8011b4e <phhalHw_Pn5180_SetCardMode+0x3c6>
 8011b48:	2b02      	cmp	r3, #2
 8011b4a:	d003      	beq.n	8011b54 <phhalHw_Pn5180_SetCardMode+0x3cc>
 8011b4c:	e008      	b.n	8011b60 <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 8011b4e:	2308      	movs	r3, #8
 8011b50:	75fb      	strb	r3, [r7, #23]
                    break;
 8011b52:	e008      	b.n	8011b66 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 8011b54:	2309      	movs	r3, #9
 8011b56:	75fb      	strb	r3, [r7, #23]
                    break;
 8011b58:	e005      	b.n	8011b66 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b5a:	23ff      	movs	r3, #255	@ 0xff
 8011b5c:	75fb      	strb	r3, [r7, #23]
                    break;
 8011b5e:	e002      	b.n	8011b66 <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b60:	f240 2321 	movw	r3, #545	@ 0x221
 8011b64:	e102      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 8011b66:	893b      	ldrh	r3, [r7, #8]
 8011b68:	2bff      	cmp	r3, #255	@ 0xff
 8011b6a:	d00c      	beq.n	8011b86 <phhalHw_Pn5180_SetCardMode+0x3fe>
 8011b6c:	2bff      	cmp	r3, #255	@ 0xff
 8011b6e:	dc0d      	bgt.n	8011b8c <phhalHw_Pn5180_SetCardMode+0x404>
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d002      	beq.n	8011b7a <phhalHw_Pn5180_SetCardMode+0x3f2>
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d003      	beq.n	8011b80 <phhalHw_Pn5180_SetCardMode+0x3f8>
 8011b78:	e008      	b.n	8011b8c <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 8011b7a:	2388      	movs	r3, #136	@ 0x88
 8011b7c:	75bb      	strb	r3, [r7, #22]
                    break;
 8011b7e:	e008      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8011b80:	2389      	movs	r3, #137	@ 0x89
 8011b82:	75bb      	strb	r3, [r7, #22]
                    break;
 8011b84:	e005      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011b86:	23ff      	movs	r3, #255	@ 0xff
 8011b88:	75bb      	strb	r3, [r7, #22]
                    break;
 8011b8a:	e002      	b.n	8011b92 <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011b8c:	f240 2321 	movw	r3, #545	@ 0x221
 8011b90:	e0ec      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 8011b92:	e0c9      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 8011b94:	897b      	ldrh	r3, [r7, #10]
 8011b96:	2b0b      	cmp	r3, #11
 8011b98:	d002      	beq.n	8011ba0 <phhalHw_Pn5180_SetCardMode+0x418>
 8011b9a:	2bff      	cmp	r3, #255	@ 0xff
 8011b9c:	d003      	beq.n	8011ba6 <phhalHw_Pn5180_SetCardMode+0x41e>
 8011b9e:	e005      	b.n	8011bac <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8011ba0:	230e      	movs	r3, #14
 8011ba2:	75fb      	strb	r3, [r7, #23]
                break;
 8011ba4:	e005      	b.n	8011bb2 <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011ba6:	23ff      	movs	r3, #255	@ 0xff
 8011ba8:	75fb      	strb	r3, [r7, #23]
                break;
 8011baa:	e002      	b.n	8011bb2 <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011bac:	f240 2321 	movw	r3, #545	@ 0x221
 8011bb0:	e0dc      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011bb2:	893b      	ldrh	r3, [r7, #8]
 8011bb4:	2b0f      	cmp	r3, #15
 8011bb6:	dc25      	bgt.n	8011c04 <phhalHw_Pn5180_SetCardMode+0x47c>
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	dd32      	ble.n	8011c22 <phhalHw_Pn5180_SetCardMode+0x49a>
 8011bbc:	3b01      	subs	r3, #1
 8011bbe:	2b0e      	cmp	r3, #14
 8011bc0:	d82f      	bhi.n	8011c22 <phhalHw_Pn5180_SetCardMode+0x49a>
 8011bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8011bc8 <phhalHw_Pn5180_SetCardMode+0x440>)
 8011bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc8:	08011c17 	.word	0x08011c17
 8011bcc:	08011c23 	.word	0x08011c23
 8011bd0:	08011c23 	.word	0x08011c23
 8011bd4:	08011c23 	.word	0x08011c23
 8011bd8:	08011c23 	.word	0x08011c23
 8011bdc:	08011c23 	.word	0x08011c23
 8011be0:	08011c23 	.word	0x08011c23
 8011be4:	08011c23 	.word	0x08011c23
 8011be8:	08011c23 	.word	0x08011c23
 8011bec:	08011c23 	.word	0x08011c23
 8011bf0:	08011c23 	.word	0x08011c23
 8011bf4:	08011c17 	.word	0x08011c17
 8011bf8:	08011c0b 	.word	0x08011c0b
 8011bfc:	08011c17 	.word	0x08011c17
 8011c00:	08011c11 	.word	0x08011c11
 8011c04:	2bff      	cmp	r3, #255	@ 0xff
 8011c06:	d009      	beq.n	8011c1c <phhalHw_Pn5180_SetCardMode+0x494>
 8011c08:	e00b      	b.n	8011c22 <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 8011c0a:	238d      	movs	r3, #141	@ 0x8d
 8011c0c:	75bb      	strb	r3, [r7, #22]
                break;
 8011c0e:	e00b      	b.n	8011c28 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 8011c10:	238e      	movs	r3, #142	@ 0x8e
 8011c12:	75bb      	strb	r3, [r7, #22]
                break;
 8011c14:	e008      	b.n	8011c28 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8011c16:	f240 2323 	movw	r3, #547	@ 0x223
 8011c1a:	e0a7      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c1c:	23ff      	movs	r3, #255	@ 0xff
 8011c1e:	75bb      	strb	r3, [r7, #22]
                break;
 8011c20:	e002      	b.n	8011c28 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c22:	f240 2321 	movw	r3, #545	@ 0x221
 8011c26:	e0a1      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011c28:	e07e      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 8011c2a:	897b      	ldrh	r3, [r7, #10]
 8011c2c:	2b11      	cmp	r3, #17
 8011c2e:	d002      	beq.n	8011c36 <phhalHw_Pn5180_SetCardMode+0x4ae>
 8011c30:	2bff      	cmp	r3, #255	@ 0xff
 8011c32:	d00c      	beq.n	8011c4e <phhalHw_Pn5180_SetCardMode+0x4c6>
 8011c34:	e00e      	b.n	8011c54 <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 8011c36:	88fb      	ldrh	r3, [r7, #6]
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d005      	beq.n	8011c48 <phhalHw_Pn5180_SetCardMode+0x4c0>
 8011c3c:	88fb      	ldrh	r3, [r7, #6]
 8011c3e:	2b02      	cmp	r3, #2
 8011c40:	d002      	beq.n	8011c48 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c42:	f240 2321 	movw	r3, #545	@ 0x221
 8011c46:	e091      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 8011c48:	2310      	movs	r3, #16
 8011c4a:	75fb      	strb	r3, [r7, #23]
                break;
 8011c4c:	e005      	b.n	8011c5a <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c4e:	23ff      	movs	r3, #255	@ 0xff
 8011c50:	75fb      	strb	r3, [r7, #23]
                break;
 8011c52:	e002      	b.n	8011c5a <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011c54:	f240 2321 	movw	r3, #545	@ 0x221
 8011c58:	e088      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011c5a:	893b      	ldrh	r3, [r7, #8]
 8011c5c:	2b16      	cmp	r3, #22
 8011c5e:	dc0f      	bgt.n	8011c80 <phhalHw_Pn5180_SetCardMode+0x4f8>
 8011c60:	2b13      	cmp	r3, #19
 8011c62:	db1f      	blt.n	8011ca4 <phhalHw_Pn5180_SetCardMode+0x51c>
 8011c64:	3b13      	subs	r3, #19
 8011c66:	2b03      	cmp	r3, #3
 8011c68:	d81c      	bhi.n	8011ca4 <phhalHw_Pn5180_SetCardMode+0x51c>
 8011c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c70 <phhalHw_Pn5180_SetCardMode+0x4e8>)
 8011c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c70:	08011c87 	.word	0x08011c87
 8011c74:	08011c93 	.word	0x08011c93
 8011c78:	08011c8d 	.word	0x08011c8d
 8011c7c:	08011c99 	.word	0x08011c99
 8011c80:	2bff      	cmp	r3, #255	@ 0xff
 8011c82:	d00c      	beq.n	8011c9e <phhalHw_Pn5180_SetCardMode+0x516>
 8011c84:	e00e      	b.n	8011ca4 <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 8011c86:	2390      	movs	r3, #144	@ 0x90
 8011c88:	75bb      	strb	r3, [r7, #22]
                break;
 8011c8a:	e00e      	b.n	8011caa <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 8011c8c:	238f      	movs	r3, #143	@ 0x8f
 8011c8e:	75bb      	strb	r3, [r7, #22]
                break;
 8011c90:	e00b      	b.n	8011caa <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 8011c92:	2392      	movs	r3, #146	@ 0x92
 8011c94:	75bb      	strb	r3, [r7, #22]
                break;
 8011c96:	e008      	b.n	8011caa <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8011c98:	2391      	movs	r3, #145	@ 0x91
 8011c9a:	75bb      	strb	r3, [r7, #22]
                break;
 8011c9c:	e005      	b.n	8011caa <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011c9e:	23ff      	movs	r3, #255	@ 0xff
 8011ca0:	75bb      	strb	r3, [r7, #22]
                break;
 8011ca2:	e002      	b.n	8011caa <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ca4:	f240 2321 	movw	r3, #545	@ 0x221
 8011ca8:	e060      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8011caa:	e03d      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 8011cac:	897b      	ldrh	r3, [r7, #10]
 8011cae:	2bff      	cmp	r3, #255	@ 0xff
 8011cb0:	d013      	beq.n	8011cda <phhalHw_Pn5180_SetCardMode+0x552>
 8011cb2:	2bff      	cmp	r3, #255	@ 0xff
 8011cb4:	dc14      	bgt.n	8011ce0 <phhalHw_Pn5180_SetCardMode+0x558>
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	d00c      	beq.n	8011cd4 <phhalHw_Pn5180_SetCardMode+0x54c>
 8011cba:	2b02      	cmp	r3, #2
 8011cbc:	dc10      	bgt.n	8011ce0 <phhalHw_Pn5180_SetCardMode+0x558>
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d002      	beq.n	8011cc8 <phhalHw_Pn5180_SetCardMode+0x540>
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d003      	beq.n	8011cce <phhalHw_Pn5180_SetCardMode+0x546>
 8011cc6:	e00b      	b.n	8011ce0 <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 8011cc8:	230a      	movs	r3, #10
 8011cca:	75fb      	strb	r3, [r7, #23]
                break;
 8011ccc:	e00b      	b.n	8011ce6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 8011cce:	230b      	movs	r3, #11
 8011cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8011cd2:	e008      	b.n	8011ce6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 8011cd4:	230c      	movs	r3, #12
 8011cd6:	75fb      	strb	r3, [r7, #23]
                break;
 8011cd8:	e005      	b.n	8011ce6 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011cda:	23ff      	movs	r3, #255	@ 0xff
 8011cdc:	75fb      	strb	r3, [r7, #23]
                break;
 8011cde:	e002      	b.n	8011ce6 <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011ce0:	f240 2321 	movw	r3, #545	@ 0x221
 8011ce4:	e042      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8011ce6:	893b      	ldrh	r3, [r7, #8]
 8011ce8:	2bff      	cmp	r3, #255	@ 0xff
 8011cea:	d013      	beq.n	8011d14 <phhalHw_Pn5180_SetCardMode+0x58c>
 8011cec:	2bff      	cmp	r3, #255	@ 0xff
 8011cee:	dc14      	bgt.n	8011d1a <phhalHw_Pn5180_SetCardMode+0x592>
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d00c      	beq.n	8011d0e <phhalHw_Pn5180_SetCardMode+0x586>
 8011cf4:	2b02      	cmp	r3, #2
 8011cf6:	dc10      	bgt.n	8011d1a <phhalHw_Pn5180_SetCardMode+0x592>
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d002      	beq.n	8011d02 <phhalHw_Pn5180_SetCardMode+0x57a>
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d003      	beq.n	8011d08 <phhalHw_Pn5180_SetCardMode+0x580>
 8011d00:	e00b      	b.n	8011d1a <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 8011d02:	238a      	movs	r3, #138	@ 0x8a
 8011d04:	75bb      	strb	r3, [r7, #22]
                break;
 8011d06:	e00b      	b.n	8011d20 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 8011d08:	238b      	movs	r3, #139	@ 0x8b
 8011d0a:	75bb      	strb	r3, [r7, #22]
            break;
 8011d0c:	e008      	b.n	8011d20 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 8011d0e:	238c      	movs	r3, #140	@ 0x8c
 8011d10:	75bb      	strb	r3, [r7, #22]
                break;
 8011d12:	e005      	b.n	8011d20 <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8011d14:	23ff      	movs	r3, #255	@ 0xff
 8011d16:	75bb      	strb	r3, [r7, #22]
                break;
 8011d18:	e002      	b.n	8011d20 <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d1a:	f240 2321 	movw	r3, #545	@ 0x221
 8011d1e:	e025      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 8011d20:	e002      	b.n	8011d28 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d22:	f240 2321 	movw	r3, #545	@ 0x221
 8011d26:	e021      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 8011d28:	7dfb      	ldrb	r3, [r7, #23]
 8011d2a:	2bff      	cmp	r3, #255	@ 0xff
 8011d2c:	d102      	bne.n	8011d34 <phhalHw_Pn5180_SetCardMode+0x5ac>
 8011d2e:	7dbb      	ldrb	r3, [r7, #22]
 8011d30:	2bff      	cmp	r3, #255	@ 0xff
 8011d32:	d00c      	beq.n	8011d4e <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8011d34:	7dba      	ldrb	r2, [r7, #22]
 8011d36:	7dfb      	ldrb	r3, [r7, #23]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f7fe ffc8 	bl	8010cd0 <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 8011d40:	4603      	mov	r3, r0
 8011d42:	82bb      	strh	r3, [r7, #20]
 8011d44:	8abb      	ldrh	r3, [r7, #20]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d001      	beq.n	8011d4e <phhalHw_Pn5180_SetCardMode+0x5c6>
 8011d4a:	8abb      	ldrh	r3, [r7, #20]
 8011d4c:	e00e      	b.n	8011d6c <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011d4e:	897b      	ldrh	r3, [r7, #10]
 8011d50:	2bff      	cmp	r3, #255	@ 0xff
 8011d52:	d003      	beq.n	8011d5c <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	897a      	ldrh	r2, [r7, #10]
 8011d58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011d5c:	893b      	ldrh	r3, [r7, #8]
 8011d5e:	2bff      	cmp	r3, #255	@ 0xff
 8011d60:	d003      	beq.n	8011d6a <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	893a      	ldrh	r2, [r7, #8]
 8011d66:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 8011d6a:	2300      	movs	r3, #0
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3718      	adds	r7, #24
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b088      	sub	sp, #32
 8011d78:	af02      	add	r7, sp, #8
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	807b      	strh	r3, [r7, #2]
 8011d80:	4613      	mov	r3, r2
 8011d82:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 8011d84:	2300      	movs	r3, #0
 8011d86:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8011d88:	787b      	ldrb	r3, [r7, #1]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d005      	beq.n	8011d9a <phhalHw_Pn5180_SetTmo+0x26>
 8011d8e:	787b      	ldrb	r3, [r7, #1]
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d002      	beq.n	8011d9a <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011d94:	f240 2321 	movw	r3, #545	@ 0x221
 8011d98:	e051      	b.n	8011e3e <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 8011d9a:	887b      	ldrh	r3, [r7, #2]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d101      	bne.n	8011da4 <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 8011da0:	2300      	movs	r3, #0
 8011da2:	e04c      	b.n	8011e3e <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 8011da4:	787b      	ldrb	r3, [r7, #1]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d125      	bne.n	8011df6 <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8011db0:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8011db4:	d20d      	bcs.n	8011dd2 <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 8011db6:	f107 030c 	add.w	r3, r7, #12
 8011dba:	461a      	mov	r2, r3
 8011dbc:	2101      	movs	r1, #1
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 f844 	bl	8011e4c <phhalHw_Pn5180_Int_GetDigiDelay>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	81fb      	strh	r3, [r7, #14]
 8011dc8:	89fb      	ldrh	r3, [r7, #14]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d001      	beq.n	8011dd2 <phhalHw_Pn5180_SetTmo+0x5e>
 8011dce:	89fb      	ldrh	r3, [r7, #14]
 8011dd0:	e035      	b.n	8011e3e <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 8011dd6:	f240 534c 	movw	r3, #1356	@ 0x54c
 8011dda:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 8011ddc:	887b      	ldrh	r3, [r7, #2]
 8011dde:	89ba      	ldrh	r2, [r7, #12]
 8011de0:	4413      	add	r3, r2
 8011de2:	461a      	mov	r2, r3
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	fb02 f303 	mul.w	r3, r2, r3
 8011dea:	4a17      	ldr	r2, [pc, #92]	@ (8011e48 <phhalHw_Pn5180_SetTmo+0xd4>)
 8011dec:	fba2 2303 	umull	r2, r3, r2, r3
 8011df0:	095b      	lsrs	r3, r3, #5
 8011df2:	613b      	str	r3, [r7, #16]
 8011df4:	e00f      	b.n	8011e16 <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 8011df6:	233c      	movs	r3, #60	@ 0x3c
 8011df8:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 8011dfa:	887b      	ldrh	r3, [r7, #2]
 8011dfc:	f644 5248 	movw	r2, #19784	@ 0x4d48
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d805      	bhi.n	8011e10 <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 8011e04:	887b      	ldrh	r3, [r7, #2]
 8011e06:	2235      	movs	r2, #53	@ 0x35
 8011e08:	fb02 f303 	mul.w	r3, r2, r3
 8011e0c:	613b      	str	r3, [r7, #16]
 8011e0e:	e002      	b.n	8011e16 <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011e10:	f240 2322 	movw	r3, #546	@ 0x222
 8011e14:	e013      	b.n	8011e3e <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	9301      	str	r3, [sp, #4]
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011e26:	210f      	movs	r1, #15
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f7ff f938 	bl	801109e <phhalHw_Pn5180_TimerStart>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	81fb      	strh	r3, [r7, #14]
 8011e32:	89fb      	ldrh	r3, [r7, #14]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d001      	beq.n	8011e3c <phhalHw_Pn5180_SetTmo+0xc8>
 8011e38:	89fb      	ldrh	r3, [r7, #14]
 8011e3a:	e000      	b.n	8011e3e <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3718      	adds	r7, #24
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	51eb851f 	.word	0x51eb851f

08011e4c <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b087      	sub	sp, #28
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	460b      	mov	r3, r1
 8011e56:	607a      	str	r2, [r7, #4]
 8011e58:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8011e60:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e72:	3b01      	subs	r3, #1
 8011e74:	2b09      	cmp	r3, #9
 8011e76:	f200 8086 	bhi.w	8011f86 <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 8011e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e80 <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 8011e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e80:	08011ea9 	.word	0x08011ea9
 8011e84:	08011ea9 	.word	0x08011ea9
 8011e88:	08011ee7 	.word	0x08011ee7
 8011e8c:	08011eff 	.word	0x08011eff
 8011e90:	08011f15 	.word	0x08011f15
 8011e94:	08011f23 	.word	0x08011f23
 8011e98:	08011f87 	.word	0x08011f87
 8011e9c:	08011f87 	.word	0x08011f87
 8011ea0:	08011f87 	.word	0x08011f87
 8011ea4:	08011ee7 	.word	0x08011ee7
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 8011ea8:	7d7a      	ldrb	r2, [r7, #21]
 8011eaa:	8afb      	ldrh	r3, [r7, #22]
 8011eac:	493b      	ldr	r1, [pc, #236]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011eae:	0092      	lsls	r2, r2, #2
 8011eb0:	4413      	add	r3, r2
 8011eb2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 8011eba:	7afb      	ldrb	r3, [r7, #11]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d005      	beq.n	8011ecc <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	881b      	ldrh	r3, [r3, #0]
 8011ec4:	330f      	adds	r3, #15
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d15a      	bne.n	8011f8c <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	881b      	ldrh	r3, [r3, #0]
 8011eda:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	801a      	strh	r2, [r3, #0]
        }
        break;
 8011ee4:	e052      	b.n	8011f8c <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 8011ee6:	2302      	movs	r3, #2
 8011ee8:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 8011eea:	7d7a      	ldrb	r2, [r7, #21]
 8011eec:	8afb      	ldrh	r3, [r7, #22]
 8011eee:	492b      	ldr	r1, [pc, #172]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011ef0:	0092      	lsls	r2, r2, #2
 8011ef2:	4413      	add	r3, r2
 8011ef4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	801a      	strh	r2, [r3, #0]
        break;
 8011efc:	e047      	b.n	8011f8e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 8011efe:	7d7a      	ldrb	r2, [r7, #21]
 8011f00:	8afb      	ldrh	r3, [r7, #22]
 8011f02:	3b0c      	subs	r3, #12
 8011f04:	4925      	ldr	r1, [pc, #148]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f06:	0092      	lsls	r2, r2, #2
 8011f08:	4413      	add	r3, r2
 8011f0a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	801a      	strh	r2, [r3, #0]
        break;
 8011f12:	e03c      	b.n	8011f8e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8011f14:	7d7b      	ldrb	r3, [r7, #21]
 8011f16:	4a21      	ldr	r2, [pc, #132]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f18:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	801a      	strh	r2, [r3, #0]
        break;
 8011f20:	e035      	b.n	8011f8e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 8011f22:	8afb      	ldrh	r3, [r7, #22]
 8011f24:	3b13      	subs	r3, #19
 8011f26:	2b03      	cmp	r3, #3
 8011f28:	d829      	bhi.n	8011f7e <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 8011f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8011f30 <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 8011f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f30:	08011f41 	.word	0x08011f41
 8011f34:	08011f5f 	.word	0x08011f5f
 8011f38:	08011f4f 	.word	0x08011f4f
 8011f3c:	08011f6f 	.word	0x08011f6f
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8011f40:	7d7b      	ldrb	r3, [r7, #21]
 8011f42:	4a16      	ldr	r2, [pc, #88]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f44:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	801a      	strh	r2, [r3, #0]
                break;
 8011f4c:	e01a      	b.n	8011f84 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 8011f4e:	7d7b      	ldrb	r3, [r7, #21]
 8011f50:	4a12      	ldr	r2, [pc, #72]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	4413      	add	r3, r2
 8011f56:	885a      	ldrh	r2, [r3, #2]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	801a      	strh	r2, [r3, #0]
                break;
 8011f5c:	e012      	b.n	8011f84 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 8011f5e:	7d7b      	ldrb	r3, [r7, #21]
 8011f60:	4a0e      	ldr	r2, [pc, #56]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f62:	00db      	lsls	r3, r3, #3
 8011f64:	4413      	add	r3, r2
 8011f66:	889a      	ldrh	r2, [r3, #4]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	801a      	strh	r2, [r3, #0]
                break;
 8011f6c:	e00a      	b.n	8011f84 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 8011f6e:	7d7b      	ldrb	r3, [r7, #21]
 8011f70:	4a0a      	ldr	r2, [pc, #40]	@ (8011f9c <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	4413      	add	r3, r2
 8011f76:	88da      	ldrh	r2, [r3, #6]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	801a      	strh	r2, [r3, #0]
                break;
 8011f7c:	e002      	b.n	8011f84 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011f7e:	f240 237f 	movw	r3, #639	@ 0x27f
 8011f82:	e005      	b.n	8011f90 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 8011f84:	e003      	b.n	8011f8e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011f86:	f240 237f 	movw	r3, #639	@ 0x27f
 8011f8a:	e001      	b.n	8011f90 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 8011f8c:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	371c      	adds	r7, #28
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr
 8011f9c:	080201c0 	.word	0x080201c0

08011fa0 <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 8011fa0:	b5b0      	push	{r4, r5, r7, lr}
 8011fa2:	b094      	sub	sp, #80	@ 0x50
 8011fa4:	af04      	add	r7, sp, #16
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
 8011fac:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8011fce:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8011fd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	68f8      	ldr	r0, [r7, #12]
 8011fde:	f000 faf1 	bl	80125c4 <phhalHw_Pn5180_WaitIrq>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	867b      	strh	r3, [r7, #50]	@ 0x32
 8011fe6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <phhalHw_Pn5180_Receive_Int+0x50>
 8011fec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011fee:	e233      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d10d      	bne.n	8012016 <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 8011ffa:	f107 0318 	add.w	r3, r7, #24
 8011ffe:	461a      	mov	r2, r3
 8012000:	211d      	movs	r1, #29
 8012002:	68f8      	ldr	r0, [r7, #12]
 8012004:	f7fe f97e 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 8012008:	4603      	mov	r3, r0
 801200a:	867b      	strh	r3, [r7, #50]	@ 0x32
 801200c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801200e:	2b00      	cmp	r3, #0
 8012010:	d001      	beq.n	8012016 <phhalHw_Pn5180_Receive_Int+0x76>
 8012012:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012014:	e220      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8012016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801201c:	2b00      	cmp	r3, #0
 801201e:	d002      	beq.n	8012026 <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 8012020:	237f      	movs	r3, #127	@ 0x7f
 8012022:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012024:	e089      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801202c:	2b01      	cmp	r3, #1
 801202e:	d10f      	bne.n	8012050 <phhalHw_Pn5180_Receive_Int+0xb0>
 8012030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012036:	2b00      	cmp	r3, #0
 8012038:	d00a      	beq.n	8012050 <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801203a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 8012044:	2300      	movs	r3, #0
 8012046:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8012048:	e077      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 801204a:	2301      	movs	r3, #1
 801204c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801204e:	e074      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 8012050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012052:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012056:	2b00      	cmp	r3, #0
 8012058:	d02e      	beq.n	80120b8 <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d009      	beq.n	8012078 <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7fb f8f3 	bl	800d250 <phhalHw_Pn5180_FieldReset>
 801206a:	4603      	mov	r3, r0
 801206c:	867b      	strh	r3, [r7, #50]	@ 0x32
 801206e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <phhalHw_Pn5180_Receive_Int+0xd8>
 8012074:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012076:	e1ef      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 8012078:	2301      	movs	r3, #1
 801207a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012082:	2b01      	cmp	r3, #1
 8012084:	d159      	bne.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801208a:	2b00      	cmp	r3, #0
 801208c:	d155      	bne.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012094:	2b00      	cmp	r3, #0
 8012096:	d007      	beq.n	80120a8 <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 8012098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d14b      	bne.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 80120a2:	237f      	movs	r3, #127	@ 0x7f
 80120a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120a6:	e048      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80120a8:	69bb      	ldr	r3, [r7, #24]
 80120aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d043      	beq.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 80120b2:	2310      	movs	r3, #16
 80120b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120b6:	e040      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d123      	bne.n	801210a <phhalHw_Pn5180_Receive_Int+0x16a>
 80120c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d01e      	beq.n	801210a <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	0b5b      	lsrs	r3, r3, #13
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	f003 0307 	and.w	r3, r3, #7
 80120d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d009      	beq.n	80120f6 <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 80120e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80120e6:	2b04      	cmp	r3, #4
 80120e8:	d002      	beq.n	80120f0 <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 80120ea:	2310      	movs	r3, #16
 80120ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80120ee:	e024      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 80120f0:	2344      	movs	r3, #68	@ 0x44
 80120f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80120f4:	e021      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 80120f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80120fa:	2b04      	cmp	r3, #4
 80120fc:	d102      	bne.n	8012104 <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 80120fe:	2301      	movs	r3, #1
 8012100:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8012102:	e01a      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 8012104:	2310      	movs	r3, #16
 8012106:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8012108:	e017      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 801210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012110:	2b00      	cmp	r3, #0
 8012112:	d012      	beq.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <phhalHw_Pn5180_Receive_Int+0x18c>
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012122:	2b00      	cmp	r3, #0
 8012124:	d002      	beq.n	801212c <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 8012126:	2310      	movs	r3, #16
 8012128:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801212a:	e006      	b.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 801212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	d101      	bne.n	801213a <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8012136:	2302      	movs	r3, #2
 8012138:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 801213a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801213c:	f003 0301 	and.w	r3, r3, #1
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 8174 	beq.w	801242e <phhalHw_Pn5180_Receive_Int+0x48e>
 8012146:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012148:	2b00      	cmp	r3, #0
 801214a:	f040 8170 	bne.w	801242e <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2200      	movs	r2, #0
 8012152:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8012154:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8012158:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801215c:	f107 0320 	add.w	r3, r7, #32
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	460b      	mov	r3, r1
 8012164:	2101      	movs	r1, #1
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f7fe fec5 	bl	8010ef6 <phhalHw_Pn5180_GetRxBuffer>
 801216c:	4603      	mov	r3, r0
 801216e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8012170:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012172:	2b00      	cmp	r3, #0
 8012174:	d001      	beq.n	801217a <phhalHw_Pn5180_Receive_Int+0x1da>
 8012176:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012178:	e16e      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012180:	2b01      	cmp	r3, #1
 8012182:	d103      	bne.n	801218c <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 8012184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 801218c:	f107 031c 	add.w	r3, r7, #28
 8012190:	461a      	mov	r2, r3
 8012192:	2113      	movs	r1, #19
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f7fa fb3f 	bl	800c818 <phhalHw_Pn5180_ReadRegister>
 801219a:	4603      	mov	r3, r0
 801219c:	867b      	strh	r3, [r7, #50]	@ 0x32
 801219e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d001      	beq.n	80121a8 <phhalHw_Pn5180_Receive_Int+0x208>
 80121a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121a6:	e157      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d110      	bne.n	80121d4 <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121ba:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	f003 030f 	and.w	r3, r3, #15
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	015b      	lsls	r3, r3, #5
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	4313      	orrs	r3, r2
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80121d2:	e005      	b.n	80121e0 <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121dc:	b29b      	uxth	r3, r3
 80121de:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 80121e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d00c      	beq.n	8012200 <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80121e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80121e8:	461a      	mov	r2, r3
 80121ea:	6879      	ldr	r1, [r7, #4]
 80121ec:	68f8      	ldr	r0, [r7, #12]
 80121ee:	f7fe fa99 	bl	8010724 <phhalHw_Pn5180_Instr_RetrieveRxData>
 80121f2:	4603      	mov	r3, r0
 80121f4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80121f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d001      	beq.n	8012200 <phhalHw_Pn5180_Receive_Int+0x260>
 80121fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121fe:	e12b      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8012206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 8012208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801220a:	0b5b      	lsrs	r3, r3, #13
 801220c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 801220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012210:	b29a      	uxth	r2, r3
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801221c:	2b00      	cmp	r3, #0
 801221e:	d044      	beq.n	80122aa <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 8012220:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012222:	2b00      	cmp	r3, #0
 8012224:	d107      	bne.n	8012236 <phhalHw_Pn5180_Receive_Int+0x296>
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 801222c:	2b00      	cmp	r3, #0
 801222e:	d102      	bne.n	8012236 <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 8012230:	2301      	movs	r3, #1
 8012232:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012234:	e051      	b.n	80122da <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 8012236:	2303      	movs	r3, #3
 8012238:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8012240:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 8012242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012244:	0cdb      	lsrs	r3, r3, #19
 8012246:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 8012248:	8c3a      	ldrh	r2, [r7, #32]
 801224a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801224c:	4413      	add	r3, r2
 801224e:	b29b      	uxth	r3, r3
 8012250:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 8012252:	8c3b      	ldrh	r3, [r7, #32]
 8012254:	461a      	mov	r2, r3
 8012256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012258:	4293      	cmp	r3, r2
 801225a:	d904      	bls.n	8012266 <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 801225c:	8c3b      	ldrh	r3, [r7, #32]
 801225e:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 8012260:	2304      	movs	r3, #4
 8012262:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012264:	e004      	b.n	8012270 <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 8012266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012268:	b29b      	uxth	r3, r3
 801226a:	08db      	lsrs	r3, r3, #3
 801226c:	b29b      	uxth	r3, r3
 801226e:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 8012270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012272:	2b07      	cmp	r3, #7
 8012274:	d904      	bls.n	8012280 <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 8012276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012278:	f003 0307 	and.w	r3, r3, #7
 801227c:	61fb      	str	r3, [r7, #28]
 801227e:	e001      	b.n	8012284 <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 8012280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012282:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00a      	beq.n	80122a0 <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 801228a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801228c:	8c3b      	ldrh	r3, [r7, #32]
 801228e:	429a      	cmp	r2, r3
 8012290:	d102      	bne.n	8012298 <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 8012292:	2304      	movs	r3, #4
 8012294:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012296:	e003      	b.n	80122a0 <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 8012298:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801229a:	3301      	adds	r3, #1
 801229c:	b29b      	uxth	r3, r3
 801229e:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80122a8:	e017      	b.n	80122da <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 80122b4:	2302      	movs	r3, #2
 80122b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80122b8:	e00f      	b.n	80122da <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d002      	beq.n	80122ca <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 80122c4:	2306      	movs	r3, #6
 80122c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80122c8:	e007      	b.n	80122da <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 80122ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d004      	beq.n	80122da <phhalHw_Pn5180_Receive_Int+0x33a>
 80122d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d2:	2b08      	cmp	r3, #8
 80122d4:	d001      	beq.n	80122da <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 80122d6:	2373      	movs	r3, #115	@ 0x73
 80122d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d117      	bne.n	8012314 <phhalHw_Pn5180_Receive_Int+0x374>
 80122e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d014      	beq.n	8012314 <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2bf0      	cmp	r3, #240	@ 0xf0
 80122f2:	d002      	beq.n	80122fa <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 80122f4:	f240 2301 	movw	r3, #513	@ 0x201
 80122f8:	e0ae      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 80122fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122fc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8012300:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	1c5a      	adds	r2, r3, #1
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 801230c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801230e:	3b01      	subs	r3, #1
 8012310:	b29b      	uxth	r3, r3
 8012312:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	8bda      	ldrh	r2, [r3, #30]
 8012318:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801231a:	4413      	add	r3, r2
 801231c:	b29a      	uxth	r2, r3
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d005      	beq.n	8012334 <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	695a      	ldr	r2, [r3, #20]
 801232c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801232e:	441a      	add	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d003      	beq.n	8012342 <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	8b5a      	ldrh	r2, [r3, #26]
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012348:	2b01      	cmp	r3, #1
 801234a:	d169      	bne.n	8012420 <phhalHw_Pn5180_Receive_Int+0x480>
 801234c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801234e:	2b00      	cmp	r3, #0
 8012350:	d003      	beq.n	801235a <phhalHw_Pn5180_Receive_Int+0x3ba>
 8012352:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b73      	cmp	r3, #115	@ 0x73
 8012358:	d162      	bne.n	8012420 <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d025      	beq.n	80123ac <phhalHw_Pn5180_Receive_Int+0x40c>
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d022      	beq.n	80123ac <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6818      	ldr	r0, [r3, #0]
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 8012372:	b2dd      	uxtb	r5, r3
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	881b      	ldrh	r3, [r3, #0]
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	6812      	ldr	r2, [r2, #0]
 801237c:	f107 0117 	add.w	r1, r7, #23
 8012380:	9103      	str	r1, [sp, #12]
 8012382:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8012386:	9102      	str	r1, [sp, #8]
 8012388:	9201      	str	r2, [sp, #4]
 801238a:	9300      	str	r3, [sp, #0]
 801238c:	462b      	mov	r3, r5
 801238e:	4622      	mov	r2, r4
 8012390:	4601      	mov	r1, r0
 8012392:	2001      	movs	r0, #1
 8012394:	f7f4 f87c 	bl	8006490 <phTools_DecodeParity>
 8012398:	4603      	mov	r3, r0
 801239a:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 801239c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d003      	beq.n	80123ac <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 80123a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 80123aa:	e039      	b.n	8012420 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 80123ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d933      	bls.n	801241a <phhalHw_Pn5180_Receive_Int+0x47a>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d030      	beq.n	801241a <phhalHw_Pn5180_Receive_Int+0x47a>
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d02d      	beq.n	801241a <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80123c4:	3a02      	subs	r2, #2
 80123c6:	4611      	mov	r1, r2
 80123c8:	f107 0214 	add.w	r2, r7, #20
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7f4 f9de 	bl	800678e <phTools_ComputeCrc_B>
 80123d2:	4603      	mov	r3, r0
 80123d4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80123d6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d001      	beq.n	80123e0 <phhalHw_Pn5180_Receive_Int+0x440>
 80123dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80123de:	e03b      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 80123e0:	7d3a      	ldrb	r2, [r7, #20]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6819      	ldr	r1, [r3, #0]
 80123e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80123e8:	3b02      	subs	r3, #2
 80123ea:	440b      	add	r3, r1
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d108      	bne.n	8012404 <phhalHw_Pn5180_Receive_Int+0x464>
 80123f2:	7d7a      	ldrb	r2, [r7, #21]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6819      	ldr	r1, [r3, #0]
 80123f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80123fa:	3b01      	subs	r3, #1
 80123fc:	440b      	add	r3, r1
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	429a      	cmp	r2, r3
 8012402:	d002      	beq.n	801240a <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 8012404:	2302      	movs	r3, #2
 8012406:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8012408:	e00a      	b.n	8012420 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 801240a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801240c:	3b02      	subs	r3, #2
 801240e:	b29a      	uxth	r2, r3
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 8012414:	2300      	movs	r3, #0
 8012416:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8012418:	e002      	b.n	8012420 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 801241a:	2306      	movs	r3, #6
 801241c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 801241e:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8012420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012426:	d907      	bls.n	8012438 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 8012428:	2304      	movs	r3, #4
 801242a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 801242c:	e004      	b.n	8012438 <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 801242e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012430:	2b00      	cmp	r3, #0
 8012432:	d101      	bne.n	8012438 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 8012434:	237f      	movs	r3, #127	@ 0x7f
 8012436:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8012438:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801243a:	2b00      	cmp	r3, #0
 801243c:	d00b      	beq.n	8012456 <phhalHw_Pn5180_Receive_Int+0x4b6>
 801243e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012440:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012444:	2b00      	cmp	r3, #0
 8012446:	d106      	bne.n	8012456 <phhalHw_Pn5180_Receive_Int+0x4b6>
 8012448:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801244a:	b2db      	uxtb	r3, r3
 801244c:	b29b      	uxth	r3, r3
 801244e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012452:	b29b      	uxth	r3, r3
 8012454:	e000      	b.n	8012458 <phhalHw_Pn5180_Receive_Int+0x4b8>
 8012456:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8012458:	4618      	mov	r0, r3
 801245a:	3740      	adds	r7, #64	@ 0x40
 801245c:	46bd      	mov	sp, r7
 801245e:	bdb0      	pop	{r4, r5, r7, pc}

08012460 <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 8012468:	f06f 0207 	mvn.w	r2, #7
 801246c:	2100      	movs	r1, #0
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7fd fe20 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012474:	4603      	mov	r3, r0
 8012476:	81fb      	strh	r3, [r7, #14]
 8012478:	89fb      	ldrh	r3, [r7, #14]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d001      	beq.n	8012482 <phhalHw_Pn5180_Int_IdleCommand+0x22>
 801247e:	89fb      	ldrh	r3, [r7, #14]
 8012480:	e00c      	b.n	801249c <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 8012482:	2204      	movs	r2, #4
 8012484:	2103      	movs	r1, #3
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7fd fd28 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 801248c:	4603      	mov	r3, r0
 801248e:	81fb      	strh	r3, [r7, #14]
 8012490:	89fb      	ldrh	r3, [r7, #14]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d001      	beq.n	801249a <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 8012496:	89fb      	ldrh	r3, [r7, #14]
 8012498:	e000      	b.n	801249c <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b088      	sub	sp, #32
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	460b      	mov	r3, r1
 80124ae:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 80124b0:	2300      	movs	r3, #0
 80124b2:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 80124b4:	f06f 0307 	mvn.w	r3, #7
 80124b8:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 80124ba:	8bfb      	ldrh	r3, [r7, #30]
 80124bc:	1c5a      	adds	r2, r3, #1
 80124be:	83fa      	strh	r2, [r7, #30]
 80124c0:	3320      	adds	r3, #32
 80124c2:	443b      	add	r3, r7
 80124c4:	2200      	movs	r2, #0
 80124c6:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80124ca:	8bfb      	ldrh	r3, [r7, #30]
 80124cc:	1c5a      	adds	r2, r3, #1
 80124ce:	83fa      	strh	r2, [r7, #30]
 80124d0:	3320      	adds	r3, #32
 80124d2:	443b      	add	r3, r7
 80124d4:	2203      	movs	r2, #3
 80124d6:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80124da:	8bfb      	ldrh	r3, [r7, #30]
 80124dc:	1c5a      	adds	r2, r3, #1
 80124de:	83fa      	strh	r2, [r7, #30]
 80124e0:	69ba      	ldr	r2, [r7, #24]
 80124e2:	b2d2      	uxtb	r2, r2
 80124e4:	3320      	adds	r3, #32
 80124e6:	443b      	add	r3, r7
 80124e8:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	0a1a      	lsrs	r2, r3, #8
 80124f0:	8bfb      	ldrh	r3, [r7, #30]
 80124f2:	1c59      	adds	r1, r3, #1
 80124f4:	83f9      	strh	r1, [r7, #30]
 80124f6:	b2d2      	uxtb	r2, r2
 80124f8:	3320      	adds	r3, #32
 80124fa:	443b      	add	r3, r7
 80124fc:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	0c1a      	lsrs	r2, r3, #16
 8012504:	8bfb      	ldrh	r3, [r7, #30]
 8012506:	1c59      	adds	r1, r3, #1
 8012508:	83f9      	strh	r1, [r7, #30]
 801250a:	b2d2      	uxtb	r2, r2
 801250c:	3320      	adds	r3, #32
 801250e:	443b      	add	r3, r7
 8012510:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	0e1a      	lsrs	r2, r3, #24
 8012518:	8bfb      	ldrh	r3, [r7, #30]
 801251a:	1c59      	adds	r1, r3, #1
 801251c:	83f9      	strh	r1, [r7, #30]
 801251e:	b2d2      	uxtb	r2, r2
 8012520:	3320      	adds	r3, #32
 8012522:	443b      	add	r3, r7
 8012524:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 8012528:	78fb      	ldrb	r3, [r7, #3]
 801252a:	f003 0307 	and.w	r3, r3, #7
 801252e:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8012530:	8bfb      	ldrh	r3, [r7, #30]
 8012532:	1c5a      	adds	r2, r3, #1
 8012534:	83fa      	strh	r2, [r7, #30]
 8012536:	3320      	adds	r3, #32
 8012538:	443b      	add	r3, r7
 801253a:	2200      	movs	r2, #0
 801253c:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8012540:	8bfb      	ldrh	r3, [r7, #30]
 8012542:	1c5a      	adds	r2, r3, #1
 8012544:	83fa      	strh	r2, [r7, #30]
 8012546:	3320      	adds	r3, #32
 8012548:	443b      	add	r3, r7
 801254a:	2202      	movs	r2, #2
 801254c:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012550:	8bfb      	ldrh	r3, [r7, #30]
 8012552:	1c5a      	adds	r2, r3, #1
 8012554:	83fa      	strh	r2, [r7, #30]
 8012556:	69ba      	ldr	r2, [r7, #24]
 8012558:	b2d2      	uxtb	r2, r2
 801255a:	3320      	adds	r3, #32
 801255c:	443b      	add	r3, r7
 801255e:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	0a1a      	lsrs	r2, r3, #8
 8012566:	8bfb      	ldrh	r3, [r7, #30]
 8012568:	1c59      	adds	r1, r3, #1
 801256a:	83f9      	strh	r1, [r7, #30]
 801256c:	b2d2      	uxtb	r2, r2
 801256e:	3320      	adds	r3, #32
 8012570:	443b      	add	r3, r7
 8012572:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	0c1a      	lsrs	r2, r3, #16
 801257a:	8bfb      	ldrh	r3, [r7, #30]
 801257c:	1c59      	adds	r1, r3, #1
 801257e:	83f9      	strh	r1, [r7, #30]
 8012580:	b2d2      	uxtb	r2, r2
 8012582:	3320      	adds	r3, #32
 8012584:	443b      	add	r3, r7
 8012586:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	0e1a      	lsrs	r2, r3, #24
 801258e:	8bfb      	ldrh	r3, [r7, #30]
 8012590:	1c59      	adds	r1, r3, #1
 8012592:	83f9      	strh	r1, [r7, #30]
 8012594:	b2d2      	uxtb	r2, r2
 8012596:	3320      	adds	r3, #32
 8012598:	443b      	add	r3, r7
 801259a:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 801259e:	8bfa      	ldrh	r2, [r7, #30]
 80125a0:	f107 0308 	add.w	r3, r7, #8
 80125a4:	4619      	mov	r1, r3
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7fd fdfa 	bl	80101a0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80125ac:	4603      	mov	r3, r0
 80125ae:	82fb      	strh	r3, [r7, #22]
 80125b0:	8afb      	ldrh	r3, [r7, #22]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <phhalHw_Pn5180_Int_LoadCommand+0x116>
 80125b6:	8afb      	ldrh	r3, [r7, #22]
 80125b8:	e000      	b.n	80125bc <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 80125ba:	2300      	movs	r3, #0

}
 80125bc:	4618      	mov	r0, r3
 80125be:	3720      	adds	r7, #32
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b08a      	sub	sp, #40	@ 0x28
 80125c8:	af02      	add	r7, sp, #8
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	607b      	str	r3, [r7, #4]
 80125ce:	460b      	mov	r3, r1
 80125d0:	72fb      	strb	r3, [r7, #11]
 80125d2:	4613      	mov	r3, r2
 80125d4:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    // debug below----
    printf("WaitIrq: bEnableIrq=0x%02X, dwIrqWaitFor=0x%08X\n", bEnableIrq, dwIrqWaitFor);
 80125d6:	7afb      	ldrb	r3, [r7, #11]
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	4619      	mov	r1, r3
 80125dc:	4869      	ldr	r0, [pc, #420]	@ (8012784 <phhalHw_Pn5180_WaitIrq+0x1c0>)
 80125de:	f00a fc13 	bl	801ce08 <iprintf>

    // debug top----

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d102      	bne.n	80125ee <phhalHw_Pn5180_WaitIrq+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80125e8:	f240 237f 	movw	r3, #639	@ 0x27f
 80125ec:	e0c5      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d103      	bne.n	8012600 <phhalHw_Pn5180_WaitIrq+0x3c>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 80125f8:	7afb      	ldrb	r3, [r7, #11]
 80125fa:	f023 0301 	bic.w	r3, r3, #1
 80125fe:	72fb      	strb	r3, [r7, #11]
    }

    /* If requested by the user, enable the corresponding IRQs */
    if ((bEnableIrq & PHHAL_HW_CHECK_IRQ_PIN_MASK) != PH_OFF)
 8012600:	7afb      	ldrb	r3, [r7, #11]
 8012602:	f003 0301 	and.w	r3, r3, #1
 8012606:	2b00      	cmp	r3, #0
 8012608:	d075      	beq.n	80126f6 <phhalHw_Pn5180_WaitIrq+0x132>
    {
    	printf("Using IRQ PIN mode\n"); //debug
 801260a:	485f      	ldr	r0, [pc, #380]	@ (8012788 <phhalHw_Pn5180_WaitIrq+0x1c4>)
 801260c:	f00a fc6c 	bl	801cee8 <puts>
        /*wait for IRQ pin event or Abort event*/

        {
            statusTmp = phOsal_EventPend((volatile phOsal_Event_t * )(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, PHOSAL_MAX_DELAY,
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012616:	f107 0314 	add.w	r3, r7, #20
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	2321      	movs	r3, #33	@ 0x21
 801261e:	f04f 32ff 	mov.w	r2, #4294967295
 8012622:	2101      	movs	r1, #1
 8012624:	f004 fc76 	bl	8016f14 <phOsal_EventPend>
 8012628:	4603      	mov	r3, r0
 801262a:	83fb      	strh	r3, [r7, #30]
                (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), &tReceivedEvents);
        }

        /*Handle abort event*/
        if ((E_PH_OSAL_EVT_ABORT & tReceivedEvents) || (statusTmp != PH_ERR_SUCCESS))
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	f003 0320 	and.w	r3, r3, #32
 8012632:	2b00      	cmp	r3, #0
 8012634:	d102      	bne.n	801263c <phhalHw_Pn5180_WaitIrq+0x78>
 8012636:	8bfb      	ldrh	r3, [r7, #30]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d022      	beq.n	8012682 <phhalHw_Pn5180_WaitIrq+0xbe>
        {

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f7ff ff0f 	bl	8012460 <phhalHw_Pn5180_Int_IdleCommand>
 8012642:	4603      	mov	r3, r0
 8012644:	83fb      	strh	r3, [r7, #30]
 8012646:	8bfb      	ldrh	r3, [r7, #30]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d001      	beq.n	8012650 <phhalHw_Pn5180_WaitIrq+0x8c>
 801264c:	8bfb      	ldrh	r3, [r7, #30]
 801264e:	e094      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>

            /* Disable IRQ sources */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~dwIrqWaitFor));
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	43db      	mvns	r3, r3
 8012654:	461a      	mov	r2, r3
 8012656:	2101      	movs	r1, #1
 8012658:	68f8      	ldr	r0, [r7, #12]
 801265a:	f7fd fd2b 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 801265e:	4603      	mov	r3, r0
 8012660:	83fb      	strh	r3, [r7, #30]
 8012662:	8bfb      	ldrh	r3, [r7, #30]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d001      	beq.n	801266c <phhalHw_Pn5180_WaitIrq+0xa8>
 8012668:	8bfb      	ldrh	r3, [r7, #30]
 801266a:	e086      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>

            (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_ABORT, NULL);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8012672:	2300      	movs	r3, #0
 8012674:	2220      	movs	r2, #32
 8012676:	2100      	movs	r1, #0
 8012678:	f004 fd18 	bl	80170ac <phOsal_EventClear>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 801267c:	f240 2312 	movw	r3, #530	@ 0x212
 8012680:	e07b      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>
        }
        else
        {
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8012682:	f107 0318 	add.w	r3, r7, #24
 8012686:	461a      	mov	r2, r3
 8012688:	2102      	movs	r1, #2
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7fd fe3a 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 8012690:	4603      	mov	r3, r0
 8012692:	83fb      	strh	r3, [r7, #30]
 8012694:	8bfb      	ldrh	r3, [r7, #30]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d001      	beq.n	801269e <phhalHw_Pn5180_WaitIrq+0xda>
 801269a:	8bfb      	ldrh	r3, [r7, #30]
 801269c:	e06d      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>

            /* Store the state of status register */
            *dwIrqReg = dwRegister;
 801269e:	69ba      	ldr	r2, [r7, #24]
 80126a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a2:	601a      	str	r2, [r3, #0]

            if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 80126a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	db0c      	blt.n	80126c6 <phhalHw_Pn5180_WaitIrq+0x102>
            {
                /* Clear all Interrupts for e.g Tx interrupt during receive */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	461a      	mov	r2, r3
 80126b0:	2103      	movs	r1, #3
 80126b2:	68f8      	ldr	r0, [r7, #12]
 80126b4:	f7fd fc12 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 80126b8:	4603      	mov	r3, r0
 80126ba:	83fb      	strh	r3, [r7, #30]
 80126bc:	8bfb      	ldrh	r3, [r7, #30]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d001      	beq.n	80126c6 <phhalHw_Pn5180_WaitIrq+0x102>
 80126c2:	8bfb      	ldrh	r3, [r7, #30]
 80126c4:	e059      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>
            }
            /* Disable IRQ sources */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~dwIrqWaitFor));
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	43db      	mvns	r3, r3
 80126ca:	461a      	mov	r2, r3
 80126cc:	2101      	movs	r1, #1
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7fd fcf0 	bl	80100b4 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80126d4:	4603      	mov	r3, r0
 80126d6:	83fb      	strh	r3, [r7, #30]
 80126d8:	8bfb      	ldrh	r3, [r7, #30]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d001      	beq.n	80126e2 <phhalHw_Pn5180_WaitIrq+0x11e>
 80126de:	8bfb      	ldrh	r3, [r7, #30]
 80126e0:	e04b      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>

            (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80126e8:	2300      	movs	r3, #0
 80126ea:	2201      	movs	r2, #1
 80126ec:	2100      	movs	r1, #0
 80126ee:	f004 fcdd 	bl	80170ac <phOsal_EventClear>

            return PH_ERR_SUCCESS;
 80126f2:	2300      	movs	r3, #0
 80126f4:	e041      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>
        /* Wait until any of the IRQ bits that we are subscribing for occurs */
        do
        {
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d114      	bne.n	801272a <phhalHw_Pn5180_WaitIrq+0x166>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8012706:	2b00      	cmp	r3, #0
 8012708:	d106      	bne.n	8012718 <phhalHw_Pn5180_WaitIrq+0x154>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 801270a:	2200      	movs	r2, #0
 801270c:	2101      	movs	r1, #1
 801270e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012712:	f004 fab7 	bl	8016c84 <phDriver_TimerStart>
 8012716:	e008      	b.n	801272a <phhalHw_Pn5180_WaitIrq+0x166>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 801271e:	2200      	movs	r2, #0
 8012720:	4619      	mov	r1, r3
 8012722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012726:	f004 faad 	bl	8016c84 <phDriver_TimerStart>
                }
            }

            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 801272a:	f107 0318 	add.w	r3, r7, #24
 801272e:	461a      	mov	r2, r3
 8012730:	2102      	movs	r1, #2
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f7fd fde6 	bl	8010304 <phhalHw_Pn5180_Instr_ReadRegister>
 8012738:	4603      	mov	r3, r0
 801273a:	83fb      	strh	r3, [r7, #30]
 801273c:	8bfb      	ldrh	r3, [r7, #30]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d001      	beq.n	8012746 <phhalHw_Pn5180_WaitIrq+0x182>
 8012742:	8bfb      	ldrh	r3, [r7, #30]
 8012744:	e019      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 8012746:	69ba      	ldr	r2, [r7, #24]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4013      	ands	r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	d0d2      	beq.n	80126f6 <phhalHw_Pn5180_WaitIrq+0x132>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8012750:	69ba      	ldr	r2, [r7, #24]
 8012752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012754:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8012756:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801275a:	2b00      	cmp	r3, #0
 801275c:	db0c      	blt.n	8012778 <phhalHw_Pn5180_WaitIrq+0x1b4>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	461a      	mov	r2, r3
 8012762:	2103      	movs	r1, #3
 8012764:	68f8      	ldr	r0, [r7, #12]
 8012766:	f7fd fbb9 	bl	800fedc <phhalHw_Pn5180_Instr_WriteRegister>
 801276a:	4603      	mov	r3, r0
 801276c:	83fb      	strh	r3, [r7, #30]
 801276e:	8bfb      	ldrh	r3, [r7, #30]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <phhalHw_Pn5180_WaitIrq+0x1b4>
 8012774:	8bfb      	ldrh	r3, [r7, #30]
 8012776:	e000      	b.n	801277a <phhalHw_Pn5180_WaitIrq+0x1b6>
        }
    }

    return PH_ERR_SUCCESS;
 8012778:	2300      	movs	r3, #0

}
 801277a:	4618      	mov	r0, r3
 801277c:	3720      	adds	r7, #32
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	0801f760 	.word	0x0801f760
 8012788:	0801f794 	.word	0x0801f794

0801278c <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	460b      	mov	r3, r1
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 801279a:	897b      	ldrh	r3, [r7, #10]
 801279c:	2b20      	cmp	r3, #32
 801279e:	d002      	beq.n	80127a6 <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 80127a0:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 80127a4:	e01d      	b.n	80127e2 <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <phpalFelica_Sw_Init+0x24>
 80127ac:	2321      	movs	r3, #33	@ 0x21
 80127ae:	e018      	b.n	80127e2 <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d101      	bne.n	80127ba <phpalFelica_Sw_Init+0x2e>
 80127b6:	2321      	movs	r3, #33	@ 0x21
 80127b8:	e013      	b.n	80127e2 <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f640 0201 	movw	r2, #2049	@ 0x801
 80127c0:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2200      	movs	r2, #0
 80127cc:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2200      	movs	r2, #0
 80127d2:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2200      	movs	r2, #0
 80127d8:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	2200      	movs	r2, #0
 80127de:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr
	...

080127f0 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08c      	sub	sp, #48	@ 0x30
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	603b      	str	r3, [r7, #0]
 80127fc:	4613      	mov	r3, r2
 80127fe:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 8012800:	2300      	movs	r3, #0
 8012802:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 8012804:	2300      	movs	r3, #0
 8012806:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8012808:	2300      	movs	r3, #0
 801280a:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	3308      	adds	r3, #8
 8012810:	2212      	movs	r2, #18
 8012812:	2100      	movs	r1, #0
 8012814:	4618      	mov	r0, r3
 8012816:	f00a fc57 	bl	801d0c8 <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2200      	movs	r2, #0
 801281e:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2200      	movs	r2, #0
 8012824:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8012826:	79fb      	ldrb	r3, [r7, #7]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00e      	beq.n	801284a <phpalFelica_Sw_ReqC+0x5a>
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	2b01      	cmp	r3, #1
 8012830:	d00b      	beq.n	801284a <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 8012832:	79fb      	ldrb	r3, [r7, #7]
 8012834:	2b03      	cmp	r3, #3
 8012836:	d008      	beq.n	801284a <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8012838:	79fb      	ldrb	r3, [r7, #7]
 801283a:	2b07      	cmp	r3, #7
 801283c:	d005      	beq.n	801284a <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 801283e:	79fb      	ldrb	r3, [r7, #7]
 8012840:	2b0f      	cmp	r3, #15
 8012842:	d002      	beq.n	801284a <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012844:	f640 0321 	movw	r3, #2081	@ 0x821
 8012848:	e0e2      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	f107 0210 	add.w	r2, r7, #16
 8012852:	2121      	movs	r1, #33	@ 0x21
 8012854:	4618      	mov	r0, r3
 8012856:	f7fc f985 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 801285a:	4603      	mov	r3, r0
 801285c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801285e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012860:	2b00      	cmp	r3, #0
 8012862:	d001      	beq.n	8012868 <phpalFelica_Sw_ReqC+0x78>
 8012864:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012866:	e0d3      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 8012868:	8a3b      	ldrh	r3, [r7, #16]
 801286a:	2b03      	cmp	r3, #3
 801286c:	d005      	beq.n	801287a <phpalFelica_Sw_ReqC+0x8a>
 801286e:	8a3b      	ldrh	r3, [r7, #16]
 8012870:	2b0a      	cmp	r3, #10
 8012872:	d002      	beq.n	801287a <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 8012874:	f640 0325 	movw	r3, #2085	@ 0x825
 8012878:	e0ca      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 801287a:	8a3b      	ldrh	r3, [r7, #16]
 801287c:	2b03      	cmp	r3, #3
 801287e:	d107      	bne.n	8012890 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	7f9b      	ldrb	r3, [r3, #30]
 8012884:	461a      	mov	r2, r3
 8012886:	4b64      	ldr	r3, [pc, #400]	@ (8012a18 <phpalFelica_Sw_ReqC+0x228>)
 8012888:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 801288c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801288e:	e006      	b.n	801289e <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	7f9b      	ldrb	r3, [r3, #30]
 8012894:	4a60      	ldr	r2, [pc, #384]	@ (8012a18 <phpalFelica_Sw_ReqC+0x228>)
 8012896:	009b      	lsls	r3, r3, #2
 8012898:	4413      	add	r3, r2
 801289a:	885b      	ldrh	r3, [r3, #2]
 801289c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 801289e:	79fb      	ldrb	r3, [r7, #7]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	461a      	mov	r2, r3
 80128a4:	0092      	lsls	r2, r2, #2
 80128a6:	441a      	add	r2, r3
 80128a8:	4611      	mov	r1, r2
 80128aa:	0109      	lsls	r1, r1, #4
 80128ac:	1a8a      	subs	r2, r1, r2
 80128ae:	0052      	lsls	r2, r2, #1
 80128b0:	4413      	add	r3, r2
 80128b2:	00db      	lsls	r3, r3, #3
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 80128ba:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 80128bc:	2306      	movs	r3, #6
 80128be:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 80128c0:	2300      	movs	r3, #0
 80128c2:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	785b      	ldrb	r3, [r3, #1]
 80128ce:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	7f1b      	ldrb	r3, [r3, #28]
 80128d4:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 80128d6:	79fb      	ldrb	r3, [r7, #7]
 80128d8:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80128e0:	210d      	movs	r1, #13
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fa fcf0 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80128e8:	4603      	mov	r3, r0
 80128ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80128ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <phpalFelica_Sw_ReqC+0x106>
 80128f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80128f4:	e08c      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 80128f6:	79fb      	ldrb	r3, [r7, #7]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00d      	beq.n	8012918 <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	2201      	movs	r2, #1
 8012902:	2153      	movs	r1, #83	@ 0x53
 8012904:	4618      	mov	r0, r3
 8012906:	f7fa fcdf 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801290a:	4603      	mov	r3, r0
 801290c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801290e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <phpalFelica_Sw_ReqC+0x128>
 8012914:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012916:	e07b      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	6858      	ldr	r0, [r3, #4]
 801291c:	f107 0218 	add.w	r2, r7, #24
 8012920:	f107 0312 	add.w	r3, r7, #18
 8012924:	9301      	str	r3, [sp, #4]
 8012926:	f107 0314 	add.w	r3, r7, #20
 801292a:	9300      	str	r3, [sp, #0]
 801292c:	2306      	movs	r3, #6
 801292e:	2100      	movs	r1, #0
 8012930:	f7fa f94a 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8012934:	4603      	mov	r3, r0
 8012936:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8012938:	79fb      	ldrb	r3, [r7, #7]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d00d      	beq.n	801295a <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	2200      	movs	r2, #0
 8012944:	2153      	movs	r1, #83	@ 0x53
 8012946:	4618      	mov	r0, r3
 8012948:	f7fa fcbe 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801294c:	4603      	mov	r3, r0
 801294e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012950:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012952:	2b00      	cmp	r3, #0
 8012954:	d001      	beq.n	801295a <phpalFelica_Sw_ReqC+0x16a>
 8012956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012958:	e05a      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 801295a:	8c3b      	ldrh	r3, [r7, #32]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <phpalFelica_Sw_ReqC+0x174>
 8012960:	8c3b      	ldrh	r3, [r7, #32]
 8012962:	e055      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8012964:	79fb      	ldrb	r3, [r7, #7]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d015      	beq.n	8012996 <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 801296a:	8a7b      	ldrh	r3, [r7, #18]
 801296c:	f003 031f 	and.w	r3, r3, #31
 8012970:	b29b      	uxth	r3, r3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d002      	beq.n	801297c <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012976:	f640 0306 	movw	r3, #2054	@ 0x806
 801297a:	e049      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 801297c:	697a      	ldr	r2, [r7, #20]
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 8012982:	8a7a      	ldrh	r2, [r7, #18]
 8012984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012986:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 8012988:	8a7b      	ldrh	r3, [r7, #18]
 801298a:	095b      	lsrs	r3, r3, #5
 801298c:	b29b      	uxth	r3, r3
 801298e:	b2da      	uxtb	r2, r3
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	775a      	strb	r2, [r3, #29]
 8012994:	e038      	b.n	8012a08 <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8012996:	8a7b      	ldrh	r3, [r7, #18]
 8012998:	2b12      	cmp	r3, #18
 801299a:	d002      	beq.n	80129a2 <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 801299c:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 801299e:	2b14      	cmp	r3, #20
 80129a0:	d10a      	bne.n	80129b8 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	461a      	mov	r2, r3
 80129a8:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d104      	bne.n	80129b8 <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	3301      	adds	r3, #1
 80129b2:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d002      	beq.n	80129be <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80129b8:	f640 0306 	movw	r3, #2054	@ 0x806
 80129bc:	e028      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 80129be:	8a7b      	ldrh	r3, [r7, #18]
 80129c0:	2b14      	cmp	r3, #20
 80129c2:	d106      	bne.n	80129d2 <phpalFelica_Sw_ReqC+0x1e2>
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	7f1b      	ldrb	r3, [r3, #28]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d102      	bne.n	80129d2 <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 80129cc:	f640 0306 	movw	r3, #2054	@ 0x806
 80129d0:	e01e      	b.n	8012a10 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f103 0008 	add.w	r0, r3, #8
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	1c99      	adds	r1, r3, #2
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	3b02      	subs	r3, #2
 80129e2:	461a      	mov	r2, r3
 80129e4:	f00a fbef 	bl	801d1c6 <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2201      	movs	r2, #1
 80129ec:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	1c9a      	adds	r2, r3, #2
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	3b02      	subs	r3, #2
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a00:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2201      	movs	r2, #1
 8012a06:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2201      	movs	r2, #1
 8012a0c:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3728      	adds	r7, #40	@ 0x28
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	080201f8 	.word	0x080201f8

08012a1c <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	b087      	sub	sp, #28
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	607a      	str	r2, [r7, #4]
 8012a26:	603b      	str	r3, [r7, #0]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	7f5b      	ldrb	r3, [r3, #29]
 8012a30:	7afa      	ldrb	r2, [r7, #11]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d802      	bhi.n	8012a3c <phpalFelica_Sw_GetFrameInfo+0x20>
 8012a36:	7afb      	ldrb	r3, [r7, #11]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d102      	bne.n	8012a42 <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012a3c:	f640 0321 	movw	r3, #2081	@ 0x821
 8012a40:	e06f      	b.n	8012b22 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	2200      	movs	r2, #0
 8012a46:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8012a48:	7afb      	ldrb	r3, [r7, #11]
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	015b      	lsls	r3, r3, #5
 8012a50:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8012a52:	7dfb      	ldrb	r3, [r7, #23]
 8012a54:	331c      	adds	r3, #28
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	4413      	add	r3, r2
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b12      	cmp	r3, #18
 8012a5e:	d006      	beq.n	8012a6e <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8012a60:	7dfb      	ldrb	r3, [r7, #23]
 8012a62:	331c      	adds	r3, #28
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	4413      	add	r3, r2
 8012a68:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8012a6a:	2b14      	cmp	r3, #20
 8012a6c:	d106      	bne.n	8012a7c <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 8012a6e:	7dfb      	ldrb	r3, [r7, #23]
 8012a70:	3301      	adds	r3, #1
 8012a72:	687a      	ldr	r2, [r7, #4]
 8012a74:	4413      	add	r3, r2
 8012a76:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d002      	beq.n	8012a82 <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012a7c:	f640 0306 	movw	r3, #2054	@ 0x806
 8012a80:	e04f      	b.n	8012b22 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 8012a82:	7dfb      	ldrb	r3, [r7, #23]
 8012a84:	331c      	adds	r3, #28
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	4413      	add	r3, r2
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	2b14      	cmp	r3, #20
 8012a8e:	d106      	bne.n	8012a9e <phpalFelica_Sw_GetFrameInfo+0x82>
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	7f1b      	ldrb	r3, [r3, #28]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d102      	bne.n	8012a9e <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8012a98:	f640 0306 	movw	r3, #2054	@ 0x806
 8012a9c:	e041      	b.n	8012b22 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 8012a9e:	7dfb      	ldrb	r3, [r7, #23]
 8012aa0:	331d      	adds	r3, #29
 8012aa2:	687a      	ldr	r2, [r7, #4]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	f003 031f 	and.w	r3, r3, #31
 8012aac:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 8012aae:	7dbb      	ldrb	r3, [r7, #22]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d026      	beq.n	8012b02 <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 8012ab4:	7dbb      	ldrb	r3, [r7, #22]
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d01d      	beq.n	8012afa <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 8012abe:	7dbb      	ldrb	r3, [r7, #22]
 8012ac0:	f003 0304 	and.w	r3, r3, #4
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d003      	beq.n	8012ad0 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	2206      	movs	r2, #6
 8012acc:	801a      	strh	r2, [r3, #0]
 8012ace:	e027      	b.n	8012b20 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 8012ad0:	7dbb      	ldrb	r3, [r7, #22]
 8012ad2:	f003 0308 	and.w	r3, r3, #8
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d003      	beq.n	8012ae2 <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	2203      	movs	r2, #3
 8012ade:	801a      	strh	r2, [r3, #0]
 8012ae0:	e01e      	b.n	8012b20 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 8012ae2:	7dbb      	ldrb	r3, [r7, #22]
 8012ae4:	f003 0302 	and.w	r3, r3, #2
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d003      	beq.n	8012af4 <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2202      	movs	r2, #2
 8012af0:	801a      	strh	r2, [r3, #0]
 8012af2:	e015      	b.n	8012b20 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 8012af4:	f640 0306 	movw	r3, #2054	@ 0x806
 8012af8:	e013      	b.n	8012b22 <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	220c      	movs	r2, #12
 8012afe:	801a      	strh	r2, [r3, #0]
 8012b00:	e00e      	b.n	8012b20 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
 8012b04:	3302      	adds	r3, #2
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	441a      	add	r2, r3
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 8012b0e:	7dfb      	ldrb	r3, [r7, #23]
 8012b10:	331c      	adds	r3, #28
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4413      	add	r3, r2
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	3b02      	subs	r3, #2
 8012b1a:	b2da      	uxtb	r2, r3
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b1e:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	371c      	adds	r7, #28
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr

08012b2e <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 8012b2e:	b580      	push	{r7, lr}
 8012b30:	b082      	sub	sp, #8
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	6078      	str	r0, [r7, #4]
 8012b36:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	3308      	adds	r3, #8
 8012b42:	2210      	movs	r2, #16
 8012b44:	6839      	ldr	r1, [r7, #0]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f00a fb3d 	bl	801d1c6 <memcpy>

    return PH_ERR_SUCCESS;
 8012b4c:	2300      	movs	r3, #0

}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3708      	adds	r7, #8
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 8012b56:	b480      	push	{r7}
 8012b58:	b083      	sub	sp, #12
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
 8012b5e:	460b      	mov	r3, r1
 8012b60:	807b      	strh	r3, [r7, #2]
 8012b62:	4613      	mov	r3, r2
 8012b64:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 8012b66:	887b      	ldrh	r3, [r7, #2]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <phpalFelica_Sw_SetConfig+0x1c>
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d00c      	beq.n	8012b8a <phpalFelica_Sw_SetConfig+0x34>
 8012b70:	e01f      	b.n	8012bb2 <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 8012b72:	883b      	ldrh	r3, [r7, #0]
 8012b74:	b2db      	uxtb	r3, r3
 8012b76:	2b02      	cmp	r3, #2
 8012b78:	d902      	bls.n	8012b80 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012b7a:	f640 0321 	movw	r3, #2081	@ 0x821
 8012b7e:	e01c      	b.n	8012bba <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 8012b80:	883b      	ldrh	r3, [r7, #0]
 8012b82:	b2da      	uxtb	r2, r3
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	771a      	strb	r2, [r3, #28]
        break;
 8012b88:	e016      	b.n	8012bb8 <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8012b8a:	883b      	ldrh	r3, [r7, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00b      	beq.n	8012ba8 <phpalFelica_Sw_SetConfig+0x52>
 8012b90:	883b      	ldrh	r3, [r7, #0]
 8012b92:	2b02      	cmp	r3, #2
 8012b94:	d008      	beq.n	8012ba8 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 8012b96:	883b      	ldrh	r3, [r7, #0]
 8012b98:	2b03      	cmp	r3, #3
 8012b9a:	d005      	beq.n	8012ba8 <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8012b9c:	883b      	ldrh	r3, [r7, #0]
 8012b9e:	2b04      	cmp	r3, #4
 8012ba0:	d002      	beq.n	8012ba8 <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8012ba2:	f640 0321 	movw	r3, #2081	@ 0x821
 8012ba6:	e008      	b.n	8012bba <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 8012ba8:	883b      	ldrh	r3, [r7, #0]
 8012baa:	b2da      	uxtb	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	779a      	strb	r2, [r3, #30]
        break;
 8012bb0:	e002      	b.n	8012bb8 <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8012bb2:	f640 0323 	movw	r3, #2083	@ 0x823
 8012bb6:	e000      	b.n	8012bba <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8012bb8:	2300      	movs	r3, #0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	370c      	adds	r7, #12
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 8012bc6:	b480      	push	{r7}
 8012bc8:	b085      	sub	sp, #20
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	60f8      	str	r0, [r7, #12]
 8012bce:	460b      	mov	r3, r1
 8012bd0:	607a      	str	r2, [r7, #4]
 8012bd2:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8012bd4:	897b      	ldrh	r3, [r7, #10]
 8012bd6:	2b03      	cmp	r3, #3
 8012bd8:	d012      	beq.n	8012c00 <phpalFelica_Sw_GetConfig+0x3a>
 8012bda:	2b03      	cmp	r3, #3
 8012bdc:	dc26      	bgt.n	8012c2c <phpalFelica_Sw_GetConfig+0x66>
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d002      	beq.n	8012be8 <phpalFelica_Sw_GetConfig+0x22>
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d006      	beq.n	8012bf4 <phpalFelica_Sw_GetConfig+0x2e>
 8012be6:	e021      	b.n	8012c2c <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	7f1b      	ldrb	r3, [r3, #28]
 8012bec:	461a      	mov	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	801a      	strh	r2, [r3, #0]
        break;
 8012bf2:	e01e      	b.n	8012c32 <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	7f5b      	ldrb	r3, [r3, #29]
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	801a      	strh	r2, [r3, #0]
        break;
 8012bfe:	e018      	b.n	8012c32 <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	7e9b      	ldrb	r3, [r3, #26]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d10d      	bne.n	8012c24 <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	7e1b      	ldrb	r3, [r3, #24]
 8012c0c:	b21b      	sxth	r3, r3
 8012c0e:	021b      	lsls	r3, r3, #8
 8012c10:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	7e5b      	ldrb	r3, [r3, #25]
 8012c16:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	b21b      	sxth	r3, r3
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 8012c22:	e006      	b.n	8012c32 <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	801a      	strh	r2, [r3, #0]
        break;
 8012c2a:	e002      	b.n	8012c32 <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8012c2c:	f640 0323 	movw	r3, #2083	@ 0x823
 8012c30:	e000      	b.n	8012c34 <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8012c32:	2300      	movs	r3, #0
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3714      	adds	r7, #20
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8012c40:	b480      	push	{r7}
 8012c42:	b085      	sub	sp, #20
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	607a      	str	r2, [r7, #4]
 8012c4c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 8012c4e:	897b      	ldrh	r3, [r7, #10]
 8012c50:	2b18      	cmp	r3, #24
 8012c52:	d002      	beq.n	8012c5a <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 8012c54:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8012c58:	e01d      	b.n	8012c96 <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d101      	bne.n	8012c64 <phpalI14443p3a_Sw_Init+0x24>
 8012c60:	2321      	movs	r3, #33	@ 0x21
 8012c62:	e018      	b.n	8012c96 <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d101      	bne.n	8012c6e <phpalI14443p3a_Sw_Init+0x2e>
 8012c6a:	2321      	movs	r3, #33	@ 0x21
 8012c6c:	e013      	b.n	8012c96 <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f240 3201 	movw	r2, #769	@ 0x301
 8012c74:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2200      	movs	r2, #0
 8012c86:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2200      	movs	r2, #0
 8012c92:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 8012c94:	2300      	movs	r3, #0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3714      	adds	r7, #20
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr

08012ca2 <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b084      	sub	sp, #16
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
 8012caa:	460b      	mov	r3, r1
 8012cac:	807b      	strh	r3, [r7, #2]
 8012cae:	4613      	mov	r3, r2
 8012cb0:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 8012cb2:	887b      	ldrh	r3, [r7, #2]
 8012cb4:	2b03      	cmp	r3, #3
 8012cb6:	d010      	beq.n	8012cda <phpalI14443p3a_Sw_SetConfig+0x38>
 8012cb8:	2b03      	cmp	r3, #3
 8012cba:	dc1c      	bgt.n	8012cf6 <phpalI14443p3a_Sw_SetConfig+0x54>
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d002      	beq.n	8012cc6 <phpalI14443p3a_Sw_SetConfig+0x24>
 8012cc0:	2b02      	cmp	r3, #2
 8012cc2:	d005      	beq.n	8012cd0 <phpalI14443p3a_Sw_SetConfig+0x2e>
 8012cc4:	e017      	b.n	8012cf6 <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 8012cc6:	883b      	ldrh	r3, [r7, #0]
 8012cc8:	b2da      	uxtb	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	751a      	strb	r2, [r3, #20]
       break;
 8012cce:	e016      	b.n	8012cfe <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 8012cd0:	883b      	ldrh	r3, [r7, #0]
 8012cd2:	b2da      	uxtb	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	755a      	strb	r2, [r3, #21]
       break;
 8012cd8:	e011      	b.n	8012cfe <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	883a      	ldrh	r2, [r7, #0]
 8012ce0:	210d      	movs	r1, #13
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fa faf0 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	81fb      	strh	r3, [r7, #14]
 8012cec:	89fb      	ldrh	r3, [r7, #14]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d004      	beq.n	8012cfc <phpalI14443p3a_Sw_SetConfig+0x5a>
 8012cf2:	89fb      	ldrh	r3, [r7, #14]
 8012cf4:	e004      	b.n	8012d00 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8012cf6:	f240 3323 	movw	r3, #803	@ 0x323
 8012cfa:	e001      	b.n	8012d00 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 8012cfc:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8012cfe:	2300      	movs	r3, #0

}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3710      	adds	r7, #16
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 8012d12:	683a      	ldr	r2, [r7, #0]
 8012d14:	2126      	movs	r1, #38	@ 0x26
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f000 fc89 	bl	801362e <phpalI14443p3a_Sw_RequestAEx>
 8012d1c:	4603      	mov	r3, r0
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b082      	sub	sp, #8
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8012d30:	683a      	ldr	r2, [r7, #0]
 8012d32:	2152      	movs	r1, #82	@ 0x52
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 fc7a 	bl	801362e <phpalI14443p3a_Sw_RequestAEx>
 8012d3a:	4603      	mov	r3, r0
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b088      	sub	sp, #32
 8012d48:	af02      	add	r7, sp, #8
 8012d4a:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8012d50:	2300      	movs	r3, #0
 8012d52:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8012d5c:	210d      	movs	r1, #13
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fa fab2 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012d64:	4603      	mov	r3, r0
 8012d66:	82fb      	strh	r3, [r7, #22]
 8012d68:	8afb      	ldrh	r3, [r7, #22]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d001      	beq.n	8012d72 <phpalI14443p3a_Sw_HaltA+0x2e>
 8012d6e:	8afb      	ldrh	r3, [r7, #22]
 8012d70:	e03b      	b.n	8012dea <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	2201      	movs	r2, #1
 8012d78:	2101      	movs	r1, #1
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fa faa4 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012d80:	4603      	mov	r3, r0
 8012d82:	82fb      	strh	r3, [r7, #22]
 8012d84:	8afb      	ldrh	r3, [r7, #22]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d001      	beq.n	8012d8e <phpalI14443p3a_Sw_HaltA+0x4a>
 8012d8a:	8afb      	ldrh	r3, [r7, #22]
 8012d8c:	e02d      	b.n	8012dea <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	2201      	movs	r2, #1
 8012d94:	2102      	movs	r1, #2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fa fa96 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	82fb      	strh	r3, [r7, #22]
 8012da0:	8afb      	ldrh	r3, [r7, #22]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <phpalI14443p3a_Sw_HaltA+0x66>
 8012da6:	8afb      	ldrh	r3, [r7, #22]
 8012da8:	e01f      	b.n	8012dea <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 8012daa:	2350      	movs	r3, #80	@ 0x50
 8012dac:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 8012dae:	2300      	movs	r3, #0
 8012db0:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6858      	ldr	r0, [r3, #4]
 8012db6:	f107 0210 	add.w	r2, r7, #16
 8012dba:	f107 030a 	add.w	r3, r7, #10
 8012dbe:	9301      	str	r3, [sp, #4]
 8012dc0:	f107 030c 	add.w	r3, r7, #12
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	2100      	movs	r1, #0
 8012dca:	f7f9 fefd 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 8012dd2:	8abb      	ldrh	r3, [r7, #20]
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d003      	beq.n	8012de2 <phpalI14443p3a_Sw_HaltA+0x9e>
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d104      	bne.n	8012de8 <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 8012dde:	2300      	movs	r3, #0
 8012de0:	e003      	b.n	8012dea <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8012de2:	f240 3306 	movw	r3, #774	@ 0x306
 8012de6:	e000      	b.n	8012dea <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 8012de8:	8abb      	ldrh	r3, [r7, #20]
    }
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3718      	adds	r7, #24
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b08e      	sub	sp, #56	@ 0x38
 8012df6:	af02      	add	r7, sp, #8
 8012df8:	60f8      	str	r0, [r7, #12]
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	460b      	mov	r3, r1
 8012e00:	72fb      	strb	r3, [r7, #11]
 8012e02:	4613      	mov	r3, r2
 8012e04:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 8012e06:	2300      	movs	r3, #0
 8012e08:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 8012e12:	7abb      	ldrb	r3, [r7, #10]
 8012e14:	2b40      	cmp	r3, #64	@ 0x40
 8012e16:	d804      	bhi.n	8012e22 <phpalI14443p3a_Sw_Anticollision+0x30>
 8012e18:	7abb      	ldrb	r3, [r7, #10]
 8012e1a:	f003 0308 	and.w	r3, r3, #8
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d002      	beq.n	8012e28 <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8012e22:	f240 3321 	movw	r3, #801	@ 0x321
 8012e26:	e217      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 8012e28:	7afb      	ldrb	r3, [r7, #11]
 8012e2a:	2b97      	cmp	r3, #151	@ 0x97
 8012e2c:	d00d      	beq.n	8012e4a <phpalI14443p3a_Sw_Anticollision+0x58>
 8012e2e:	2b97      	cmp	r3, #151	@ 0x97
 8012e30:	dc08      	bgt.n	8012e44 <phpalI14443p3a_Sw_Anticollision+0x52>
 8012e32:	2b93      	cmp	r3, #147	@ 0x93
 8012e34:	d002      	beq.n	8012e3c <phpalI14443p3a_Sw_Anticollision+0x4a>
 8012e36:	2b95      	cmp	r3, #149	@ 0x95
 8012e38:	d007      	beq.n	8012e4a <phpalI14443p3a_Sw_Anticollision+0x58>
 8012e3a:	e003      	b.n	8012e44 <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 8012e42:	e002      	b.n	8012e4a <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8012e44:	f240 3321 	movw	r3, #801	@ 0x321
 8012e48:	e206      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 8012e4a:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 8012e52:	7abb      	ldrb	r3, [r7, #10]
 8012e54:	2b40      	cmp	r3, #64	@ 0x40
 8012e56:	d01e      	beq.n	8012e96 <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	2200      	movs	r2, #0
 8012e64:	2101      	movs	r1, #1
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fa fa2e 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012e70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d001      	beq.n	8012e7a <phpalI14443p3a_Sw_Anticollision+0x88>
 8012e76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012e78:	e1ee      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	2200      	movs	r2, #0
 8012e80:	2102      	movs	r1, #2
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fa fa20 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012e8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d020      	beq.n	8012ed4 <phpalI14443p3a_Sw_Anticollision+0xe2>
 8012e92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012e94:	e1e0      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 8012e96:	2301      	movs	r3, #1
 8012e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	2101      	movs	r1, #1
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7fa fa0f 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012eae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d001      	beq.n	8012eb8 <phpalI14443p3a_Sw_Anticollision+0xc6>
 8012eb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012eb6:	e1cf      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	2102      	movs	r1, #2
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7fa fa01 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012eca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <phpalI14443p3a_Sw_Anticollision+0xe2>
 8012ed0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012ed2:	e1c1      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 8012ed4:	7afb      	ldrb	r3, [r7, #11]
 8012ed6:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 8012ed8:	f107 0318 	add.w	r3, r7, #24
 8012edc:	3302      	adds	r3, #2
 8012ede:	2205      	movs	r2, #5
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f00a f8f0 	bl	801d0c8 <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 8012ee8:	7abb      	ldrb	r3, [r7, #10]
 8012eea:	091b      	lsrs	r3, r3, #4
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	461a      	mov	r2, r3
 8012ef0:	7abb      	ldrb	r3, [r7, #10]
 8012ef2:	f003 030f 	and.w	r3, r3, #15
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d001      	beq.n	8012efe <phpalI14443p3a_Sw_Anticollision+0x10c>
 8012efa:	2301      	movs	r3, #1
 8012efc:	e000      	b.n	8012f00 <phpalI14443p3a_Sw_Anticollision+0x10e>
 8012efe:	2300      	movs	r3, #0
 8012f00:	4413      	add	r3, r2
 8012f02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 8012f04:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8012f06:	f107 0318 	add.w	r3, r7, #24
 8012f0a:	3302      	adds	r3, #2
 8012f0c:	6879      	ldr	r1, [r7, #4]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f00a f959 	bl	801d1c6 <memcpy>
    wSndBytes += 2U;
 8012f14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012f16:	3302      	adds	r3, #2
 8012f18:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 8012f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d016      	beq.n	8012f50 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 8012f22:	2350      	movs	r3, #80	@ 0x50
 8012f24:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	781a      	ldrb	r2, [r3, #0]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	4053      	eors	r3, r2
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	3302      	adds	r3, #2
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	4053      	eors	r3, r2
 8012f3c:	b2da      	uxtb	r2, r3
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	3303      	adds	r3, #3
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	4053      	eors	r3, r2
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 8012f4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8012f50:	7abb      	ldrb	r3, [r7, #10]
 8012f52:	3320      	adds	r3, #32
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	6858      	ldr	r0, [r3, #4]
 8012f5c:	7abb      	ldrb	r3, [r7, #10]
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	f003 0307 	and.w	r3, r3, #7
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	461a      	mov	r2, r3
 8012f68:	2105      	movs	r1, #5
 8012f6a:	f7fa f9ad 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012f72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d001      	beq.n	8012f7c <phpalI14443p3a_Sw_Anticollision+0x18a>
 8012f78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012f7a:	e16d      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	6858      	ldr	r0, [r3, #4]
 8012f80:	7abb      	ldrb	r3, [r7, #10]
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	f003 0307 	and.w	r3, r3, #7
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	2103      	movs	r1, #3
 8012f8e:	f7fa f99b 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012f92:	4603      	mov	r3, r0
 8012f94:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012f96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d001      	beq.n	8012fa0 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 8012f9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012f9e:	e15b      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6858      	ldr	r0, [r3, #4]
 8012fa4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8012fa6:	f107 0218 	add.w	r2, r7, #24
 8012faa:	f107 0312 	add.w	r3, r7, #18
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	f107 0314 	add.w	r3, r7, #20
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	2100      	movs	r1, #0
 8012fba:	f7f9 fe05 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	2105      	movs	r1, #5
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fa f97c 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012fd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d001      	beq.n	8012fde <phpalI14443p3a_Sw_Anticollision+0x1ec>
 8012fda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fdc:	e13c      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 8012fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d112      	bne.n	801300c <phpalI14443p3a_Sw_Anticollision+0x21a>
 8012fe6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	2b03      	cmp	r3, #3
 8012fec:	d10e      	bne.n	801300c <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	f107 0210 	add.w	r2, r7, #16
 8012ff6:	2104      	movs	r1, #4
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fb fdb3 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8012ffe:	4603      	mov	r3, r0
 8013000:	853b      	strh	r3, [r7, #40]	@ 0x28
 8013002:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013004:	2b00      	cmp	r3, #0
 8013006:	d00f      	beq.n	8013028 <phpalI14443p3a_Sw_Anticollision+0x236>
 8013008:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801300a:	e125      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 801300c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801300e:	b2db      	uxtb	r3, r3
 8013010:	2b73      	cmp	r3, #115	@ 0x73
 8013012:	d102      	bne.n	801301a <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013014:	f240 3306 	movw	r3, #774	@ 0x306
 8013018:	e11e      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 801301a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801301c:	2b00      	cmp	r3, #0
 801301e:	d001      	beq.n	8013024 <phpalI14443p3a_Sw_Anticollision+0x232>
 8013020:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013022:	e119      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 8013028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801302c:	2b00      	cmp	r3, #0
 801302e:	f040 80ae 	bne.w	801318e <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 8013032:	7abb      	ldrb	r3, [r7, #10]
 8013034:	091b      	lsrs	r3, r3, #4
 8013036:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 801303a:	7abb      	ldrb	r3, [r7, #10]
 801303c:	091b      	lsrs	r3, r3, #4
 801303e:	b2da      	uxtb	r2, r3
 8013040:	8a7b      	ldrh	r3, [r7, #18]
 8013042:	b2db      	uxtb	r3, r3
 8013044:	4413      	add	r3, r2
 8013046:	b2db      	uxtb	r3, r3
 8013048:	00db      	lsls	r3, r3, #3
 801304a:	b2da      	uxtb	r2, r3
 801304c:	8a3b      	ldrh	r3, [r7, #16]
 801304e:	b2db      	uxtb	r3, r3
 8013050:	4413      	add	r3, r2
 8013052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 8013056:	8a3b      	ldrh	r3, [r7, #16]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d004      	beq.n	8013066 <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 801305c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013060:	3b08      	subs	r3, #8
 8013062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 8013066:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801306a:	08db      	lsrs	r3, r3, #3
 801306c:	b2db      	uxtb	r3, r3
 801306e:	011b      	lsls	r3, r3, #4
 8013070:	b2da      	uxtb	r2, r3
 8013072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013076:	f003 0307 	and.w	r3, r3, #7
 801307a:	b2db      	uxtb	r3, r3
 801307c:	4413      	add	r3, r2
 801307e:	b2da      	uxtb	r2, r3
 8013080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013082:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 8013084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	2b50      	cmp	r3, #80	@ 0x50
 801308a:	d902      	bls.n	8013092 <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801308c:	f240 3306 	movw	r3, #774	@ 0x306
 8013090:	e0e2      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 8013092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013094:	b2db      	uxtb	r3, r3
 8013096:	2b00      	cmp	r3, #0
 8013098:	d106      	bne.n	80130a8 <phpalI14443p3a_Sw_Anticollision+0x2b6>
 801309a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	2b50      	cmp	r3, #80	@ 0x50
 80130a0:	d002      	beq.n	80130a8 <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80130a2:	f240 3306 	movw	r3, #774	@ 0x306
 80130a6:	e0d7      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 80130a8:	8a7b      	ldrh	r3, [r7, #18]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d041      	beq.n	8013132 <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 80130ae:	7abb      	ldrb	r3, [r7, #10]
 80130b0:	f003 0307 	and.w	r3, r3, #7
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d026      	beq.n	8013106 <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80130b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80130bc:	3302      	adds	r3, #2
 80130be:	3330      	adds	r3, #48	@ 0x30
 80130c0:	443b      	add	r3, r7
 80130c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80130c6:	7abb      	ldrb	r3, [r7, #10]
 80130c8:	f003 0307 	and.w	r3, r3, #7
 80130cc:	2101      	movs	r1, #1
 80130ce:	fa01 f303 	lsl.w	r3, r1, r3
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	3b01      	subs	r3, #1
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	4013      	ands	r3, r2
 80130da:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	781a      	ldrb	r2, [r3, #0]
 80130e0:	7abb      	ldrb	r3, [r7, #10]
 80130e2:	f003 0307 	and.w	r3, r3, #7
 80130e6:	20ff      	movs	r0, #255	@ 0xff
 80130e8:	fa00 f303 	lsl.w	r3, r0, r3
 80130ec:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80130ee:	4013      	ands	r3, r2
 80130f0:	b2da      	uxtb	r2, r3
 80130f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80130f6:	3302      	adds	r3, #2
 80130f8:	430a      	orrs	r2, r1
 80130fa:	b2d2      	uxtb	r2, r2
 80130fc:	3330      	adds	r3, #48	@ 0x30
 80130fe:	443b      	add	r3, r7
 8013100:	f803 2c18 	strb.w	r2, [r3, #-24]
 8013104:	e008      	b.n	8013118 <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 8013106:	697a      	ldr	r2, [r7, #20]
 8013108:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801310c:	3302      	adds	r3, #2
 801310e:	7812      	ldrb	r2, [r2, #0]
 8013110:	3330      	adds	r3, #48	@ 0x30
 8013112:	443b      	add	r3, r7
 8013114:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 8013118:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801311c:	3303      	adds	r3, #3
 801311e:	f107 0218 	add.w	r2, r7, #24
 8013122:	18d0      	adds	r0, r2, r3
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	3301      	adds	r3, #1
 8013128:	8a7a      	ldrh	r2, [r7, #18]
 801312a:	3a01      	subs	r2, #1
 801312c:	4619      	mov	r1, r3
 801312e:	f00a f84a 	bl	801d1c6 <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 8013132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	2b40      	cmp	r3, #64	@ 0x40
 8013138:	d91d      	bls.n	8013176 <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 801313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	2b4f      	cmp	r3, #79	@ 0x4f
 8013140:	d802      	bhi.n	8013148 <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013142:	f240 3305 	movw	r3, #773	@ 0x305
 8013146:	e087      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 8013148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801314a:	2240      	movs	r2, #64	@ 0x40
 801314c:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 801314e:	8a7b      	ldrh	r3, [r7, #18]
 8013150:	3b01      	subs	r3, #1
 8013152:	b29b      	uxth	r3, r3
 8013154:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 8013156:	7eba      	ldrb	r2, [r7, #26]
 8013158:	7efb      	ldrb	r3, [r7, #27]
 801315a:	4053      	eors	r3, r2
 801315c:	b2da      	uxtb	r2, r3
 801315e:	7f3b      	ldrb	r3, [r7, #28]
 8013160:	4053      	eors	r3, r2
 8013162:	b2da      	uxtb	r2, r3
 8013164:	7f7b      	ldrb	r3, [r7, #29]
 8013166:	4053      	eors	r3, r2
 8013168:	b2da      	uxtb	r2, r3
 801316a:	7fbb      	ldrb	r3, [r7, #30]
 801316c:	429a      	cmp	r2, r3
 801316e:	d002      	beq.n	8013176 <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013170:	f240 3305 	movw	r3, #773	@ 0x305
 8013174:	e070      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 8013176:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801317a:	8a7a      	ldrh	r2, [r7, #18]
 801317c:	441a      	add	r2, r3
 801317e:	f107 0318 	add.w	r3, r7, #24
 8013182:	3302      	adds	r3, #2
 8013184:	4619      	mov	r1, r3
 8013186:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013188:	f00a f81d 	bl	801d1c6 <memcpy>
 801318c:	e054      	b.n	8013238 <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 801318e:	8a7b      	ldrh	r3, [r7, #18]
 8013190:	2b01      	cmp	r3, #1
 8013192:	d002      	beq.n	801319a <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8013194:	f240 3306 	movw	r3, #774	@ 0x306
 8013198:	e05e      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	f003 0304 	and.w	r3, r3, #4
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d01e      	beq.n	80131e4 <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 80131a6:	7afb      	ldrb	r3, [r7, #11]
 80131a8:	2b97      	cmp	r3, #151	@ 0x97
 80131aa:	d102      	bne.n	80131b2 <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131ac:	f240 3306 	movw	r3, #774	@ 0x306
 80131b0:	e052      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	2b88      	cmp	r3, #136	@ 0x88
 80131b8:	d002      	beq.n	80131c0 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131ba:	f240 3306 	movw	r3, #774	@ 0x306
 80131be:	e04b      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	7c9b      	ldrb	r3, [r3, #18]
 80131c4:	3308      	adds	r3, #8
 80131c6:	68fa      	ldr	r2, [r7, #12]
 80131c8:	18d0      	adds	r0, r2, r3
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	3301      	adds	r3, #1
 80131ce:	2203      	movs	r2, #3
 80131d0:	4619      	mov	r1, r3
 80131d2:	f009 fff8 	bl	801d1c6 <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	7c9b      	ldrb	r3, [r3, #18]
 80131da:	3303      	adds	r3, #3
 80131dc:	b2da      	uxtb	r2, r3
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	749a      	strb	r2, [r3, #18]
 80131e2:	e025      	b.n	8013230 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	2b88      	cmp	r3, #136	@ 0x88
 80131ea:	d102      	bne.n	80131f2 <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80131ec:	f240 3306 	movw	r3, #774	@ 0x306
 80131f0:	e032      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	7c9b      	ldrb	r3, [r3, #18]
 80131f6:	3308      	adds	r3, #8
 80131f8:	68fa      	ldr	r2, [r7, #12]
 80131fa:	4413      	add	r3, r2
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	6812      	ldr	r2, [r2, #0]
 8013200:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	7c9b      	ldrb	r3, [r3, #18]
 8013206:	3304      	adds	r3, #4
 8013208:	b2da      	uxtb	r2, r3
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2201      	movs	r2, #1
 8013212:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	220a      	movs	r2, #10
 801321a:	210e      	movs	r1, #14
 801321c:	4618      	mov	r0, r3
 801321e:	f7fa f853 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013222:	4603      	mov	r3, r0
 8013224:	853b      	strh	r3, [r7, #40]	@ 0x28
 8013226:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013228:	2b00      	cmp	r3, #0
 801322a:	d001      	beq.n	8013230 <phpalI14443p3a_Sw_Anticollision+0x43e>
 801322c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801322e:	e013      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	781a      	ldrb	r2, [r3, #0]
 8013234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013236:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 8013238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801323a:	2b00      	cmp	r3, #0
 801323c:	d00b      	beq.n	8013256 <phpalI14443p3a_Sw_Anticollision+0x464>
 801323e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013240:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013244:	2b00      	cmp	r3, #0
 8013246:	d106      	bne.n	8013256 <phpalI14443p3a_Sw_Anticollision+0x464>
 8013248:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801324a:	b2db      	uxtb	r3, r3
 801324c:	b29b      	uxth	r3, r3
 801324e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013252:	b29b      	uxth	r3, r3
 8013254:	e000      	b.n	8013258 <phpalI14443p3a_Sw_Anticollision+0x466>
 8013256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8013258:	4618      	mov	r0, r3
 801325a:	3730      	adds	r7, #48	@ 0x30
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}

08013260 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b088      	sub	sp, #32
 8013264:	af02      	add	r7, sp, #8
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	607a      	str	r2, [r7, #4]
 801326a:	603b      	str	r3, [r7, #0]
 801326c:	460b      	mov	r3, r1
 801326e:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 8013270:	7af9      	ldrb	r1, [r7, #11]
 8013272:	f107 0317 	add.w	r3, r7, #23
 8013276:	9301      	str	r3, [sp, #4]
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	9300      	str	r3, [sp, #0]
 801327c:	2340      	movs	r3, #64	@ 0x40
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	68f8      	ldr	r0, [r7, #12]
 8013282:	f7ff fdb6 	bl	8012df2 <phpalI14443p3a_Sw_Anticollision>
 8013286:	4603      	mov	r3, r0
}
 8013288:	4618      	mov	r0, r3
 801328a:	3718      	adds	r7, #24
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b08a      	sub	sp, #40	@ 0x28
 8013294:	af02      	add	r7, sp, #8
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	603b      	str	r3, [r7, #0]
 801329c:	4613      	mov	r3, r2
 801329e:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80132a0:	2300      	movs	r3, #0
 80132a2:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 80132a4:	2300      	movs	r3, #0
 80132a6:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 80132a8:	2300      	movs	r3, #0
 80132aa:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 80132b0:	79fb      	ldrb	r3, [r7, #7]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00f      	beq.n	80132d6 <phpalI14443p3a_Sw_ActivateCard+0x46>
 80132b6:	79fb      	ldrb	r3, [r7, #7]
 80132b8:	2b04      	cmp	r3, #4
 80132ba:	d00c      	beq.n	80132d6 <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 80132bc:	79fb      	ldrb	r3, [r7, #7]
 80132be:	2b07      	cmp	r3, #7
 80132c0:	d009      	beq.n	80132d6 <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 80132c2:	79fb      	ldrb	r3, [r7, #7]
 80132c4:	2b0a      	cmp	r3, #10
 80132c6:	d006      	beq.n	80132d6 <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d002      	beq.n	80132d6 <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80132d0:	f240 3321 	movw	r3, #801	@ 0x321
 80132d4:	e18c      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 80132da:	f107 0310 	add.w	r3, r7, #16
 80132de:	2204      	movs	r2, #4
 80132e0:	2100      	movs	r1, #0
 80132e2:	4618      	mov	r0, r3
 80132e4:	f009 fef0 	bl	801d0c8 <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 80132ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ee:	2200      	movs	r2, #0
 80132f0:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 80132f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f4:	2200      	movs	r2, #0
 80132f6:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	7d1b      	ldrb	r3, [r3, #20]
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d12a      	bne.n	8013356 <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8013300:	f107 0314 	add.w	r3, r7, #20
 8013304:	4619      	mov	r1, r3
 8013306:	68f8      	ldr	r0, [r7, #12]
 8013308:	f7ff fd0d 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 801330c:	4603      	mov	r3, r0
 801330e:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013310:	e019      	b.n	8013346 <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 8013312:	7e3b      	ldrb	r3, [r7, #24]
 8013314:	3301      	adds	r3, #1
 8013316:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013320:	2100      	movs	r1, #0
 8013322:	4618      	mov	r0, r3
 8013324:	f7f9 ff4c 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8013328:	4603      	mov	r3, r0
 801332a:	83fb      	strh	r3, [r7, #30]
 801332c:	8bfb      	ldrh	r3, [r7, #30]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d001      	beq.n	8013336 <phpalI14443p3a_Sw_ActivateCard+0xa6>
 8013332:	8bfb      	ldrh	r3, [r7, #30]
 8013334:	e15c      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8013336:	f107 0314 	add.w	r3, r7, #20
 801333a:	4619      	mov	r1, r3
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f7ff fcf2 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 8013342:	4603      	mov	r3, r0
 8013344:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013346:	8bfb      	ldrh	r3, [r7, #30]
 8013348:	b2db      	uxtb	r3, r3
 801334a:	2b01      	cmp	r3, #1
 801334c:	d128      	bne.n	80133a0 <phpalI14443p3a_Sw_ActivateCard+0x110>
 801334e:	7e3b      	ldrb	r3, [r7, #24]
 8013350:	2b01      	cmp	r3, #1
 8013352:	d9de      	bls.n	8013312 <phpalI14443p3a_Sw_ActivateCard+0x82>
 8013354:	e024      	b.n	80133a0 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	7d1b      	ldrb	r3, [r3, #20]
 801335a:	2b03      	cmp	r3, #3
 801335c:	d10c      	bne.n	8013378 <phpalI14443p3a_Sw_ActivateCard+0xe8>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	7d5b      	ldrb	r3, [r3, #21]
 8013362:	2b01      	cmp	r3, #1
 8013364:	d108      	bne.n	8013378 <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8013366:	f107 0314 	add.w	r3, r7, #20
 801336a:	4619      	mov	r1, r3
 801336c:	68f8      	ldr	r0, [r7, #12]
 801336e:	f7ff fcda 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 8013372:	4603      	mov	r3, r0
 8013374:	83fb      	strh	r3, [r7, #30]
 8013376:	e013      	b.n	80133a0 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 8013378:	79fb      	ldrb	r3, [r7, #7]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d108      	bne.n	8013390 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 801337e:	f107 0314 	add.w	r3, r7, #20
 8013382:	4619      	mov	r1, r3
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f7ff fcbf 	bl	8012d08 <phpalI14443p3a_Sw_RequestA>
 801338a:	4603      	mov	r3, r0
 801338c:	83fb      	strh	r3, [r7, #30]
 801338e:	e007      	b.n	80133a0 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8013390:	f107 0314 	add.w	r3, r7, #20
 8013394:	4619      	mov	r1, r3
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7ff fcc5 	bl	8012d26 <phpalI14443p3a_Sw_WakeUpA>
 801339c:	4603      	mov	r3, r0
 801339e:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80133a0:	8bfb      	ldrh	r3, [r7, #30]
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	2b03      	cmp	r3, #3
 80133a6:	d10b      	bne.n	80133c0 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	7d1b      	ldrb	r3, [r3, #20]
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d101      	bne.n	80133b4 <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 80133b0:	8bfb      	ldrh	r3, [r7, #30]
 80133b2:	e11d      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 80133b4:	2301      	movs	r3, #1
 80133b6:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 80133b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ba:	2201      	movs	r2, #1
 80133bc:	701a      	strb	r2, [r3, #0]
 80133be:	e004      	b.n	80133ca <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 80133c0:	8bfb      	ldrh	r3, [r7, #30]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <phpalI14443p3a_Sw_ActivateCard+0x13a>
 80133c6:	8bfb      	ldrh	r3, [r7, #30]
 80133c8:	e112      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80133ca:	2300      	movs	r3, #0
 80133cc:	76bb      	strb	r3, [r7, #26]
 80133ce:	e0fb      	b.n	80135c8 <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 80133d0:	7ebb      	ldrb	r3, [r7, #26]
 80133d2:	2b02      	cmp	r3, #2
 80133d4:	d00c      	beq.n	80133f0 <phpalI14443p3a_Sw_ActivateCard+0x160>
 80133d6:	2b02      	cmp	r3, #2
 80133d8:	dc0d      	bgt.n	80133f6 <phpalI14443p3a_Sw_ActivateCard+0x166>
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d002      	beq.n	80133e4 <phpalI14443p3a_Sw_ActivateCard+0x154>
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d003      	beq.n	80133ea <phpalI14443p3a_Sw_ActivateCard+0x15a>
 80133e2:	e008      	b.n	80133f6 <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 80133e4:	2393      	movs	r3, #147	@ 0x93
 80133e6:	76fb      	strb	r3, [r7, #27]
            break;
 80133e8:	e005      	b.n	80133f6 <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 80133ea:	2395      	movs	r3, #149	@ 0x95
 80133ec:	76fb      	strb	r3, [r7, #27]
            break;
 80133ee:	e002      	b.n	80133f6 <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 80133f0:	2397      	movs	r3, #151	@ 0x97
 80133f2:	76fb      	strb	r3, [r7, #27]
            break;
 80133f4:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 80133f6:	79fa      	ldrb	r2, [r7, #7]
 80133f8:	7e7b      	ldrb	r3, [r7, #25]
 80133fa:	3304      	adds	r3, #4
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d107      	bne.n	8013410 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 8013400:	7e7b      	ldrb	r3, [r7, #25]
 8013402:	68ba      	ldr	r2, [r7, #8]
 8013404:	4413      	add	r3, r2
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 801340a:	2340      	movs	r3, #64	@ 0x40
 801340c:	75bb      	strb	r3, [r7, #22]
 801340e:	e097      	b.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8013410:	79fa      	ldrb	r2, [r7, #7]
 8013412:	7e7b      	ldrb	r3, [r7, #25]
 8013414:	3304      	adds	r3, #4
 8013416:	429a      	cmp	r2, r3
 8013418:	d911      	bls.n	801343e <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 801341a:	2388      	movs	r3, #136	@ 0x88
 801341c:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 801341e:	7e7b      	ldrb	r3, [r7, #25]
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	18d1      	adds	r1, r2, r3
 8013424:	f107 0310 	add.w	r3, r7, #16
 8013428:	3301      	adds	r3, #1
 801342a:	2203      	movs	r2, #3
 801342c:	4618      	mov	r0, r3
 801342e:	f009 feca 	bl	801d1c6 <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 8013432:	7e7b      	ldrb	r3, [r7, #25]
 8013434:	3303      	adds	r3, #3
 8013436:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 8013438:	2340      	movs	r3, #64	@ 0x40
 801343a:	75bb      	strb	r3, [r7, #22]
 801343c:	e080      	b.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 801343e:	2300      	movs	r3, #0
 8013440:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 8013442:	e07d      	b.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8013444:	7db8      	ldrb	r0, [r7, #22]
 8013446:	f107 0210 	add.w	r2, r7, #16
 801344a:	7ef9      	ldrb	r1, [r7, #27]
 801344c:	f107 0316 	add.w	r3, r7, #22
 8013450:	9301      	str	r3, [sp, #4]
 8013452:	f107 0310 	add.w	r3, r7, #16
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	4603      	mov	r3, r0
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	f7ff fcc9 	bl	8012df2 <phpalI14443p3a_Sw_Anticollision>
 8013460:	4603      	mov	r3, r0
 8013462:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	7d1b      	ldrb	r3, [r3, #20]
 8013468:	2b01      	cmp	r3, #1
 801346a:	d12b      	bne.n	80134c4 <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 801346c:	2300      	movs	r3, #0
 801346e:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013470:	e021      	b.n	80134b6 <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 8013472:	7e3b      	ldrb	r3, [r7, #24]
 8013474:	3301      	adds	r3, #1
 8013476:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013480:	2100      	movs	r1, #0
 8013482:	4618      	mov	r0, r3
 8013484:	f7f9 fe9c 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8013488:	4603      	mov	r3, r0
 801348a:	83fb      	strh	r3, [r7, #30]
 801348c:	8bfb      	ldrh	r3, [r7, #30]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d001      	beq.n	8013496 <phpalI14443p3a_Sw_ActivateCard+0x206>
 8013492:	8bfb      	ldrh	r3, [r7, #30]
 8013494:	e0ac      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8013496:	7db8      	ldrb	r0, [r7, #22]
 8013498:	f107 0210 	add.w	r2, r7, #16
 801349c:	7ef9      	ldrb	r1, [r7, #27]
 801349e:	f107 0316 	add.w	r3, r7, #22
 80134a2:	9301      	str	r3, [sp, #4]
 80134a4:	f107 0310 	add.w	r3, r7, #16
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4603      	mov	r3, r0
 80134ac:	68f8      	ldr	r0, [r7, #12]
 80134ae:	f7ff fca0 	bl	8012df2 <phpalI14443p3a_Sw_Anticollision>
 80134b2:	4603      	mov	r3, r0
 80134b4:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80134b6:	8bfb      	ldrh	r3, [r7, #30]
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d102      	bne.n	80134c4 <phpalI14443p3a_Sw_ActivateCard+0x234>
 80134be:	7e3b      	ldrb	r3, [r7, #24]
 80134c0:	2b01      	cmp	r3, #1
 80134c2:	d9d6      	bls.n	8013472 <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80134c4:	8bfb      	ldrh	r3, [r7, #30]
 80134c6:	b2db      	uxtb	r3, r3
 80134c8:	2b03      	cmp	r3, #3
 80134ca:	d11b      	bne.n	8013504 <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	7d1b      	ldrb	r3, [r3, #20]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	d101      	bne.n	80134d8 <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 80134d4:	8bfb      	ldrh	r3, [r7, #30]
 80134d6:	e08b      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 80134d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134da:	2201      	movs	r2, #1
 80134dc:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 80134de:	7dbb      	ldrb	r3, [r7, #22]
 80134e0:	f003 0307 	and.w	r3, r3, #7
 80134e4:	2b06      	cmp	r3, #6
 80134e6:	d804      	bhi.n	80134f2 <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 80134e8:	7dbb      	ldrb	r3, [r7, #22]
 80134ea:	3301      	adds	r3, #1
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	75bb      	strb	r3, [r7, #22]
 80134f0:	e00d      	b.n	801350e <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 80134f2:	7dbb      	ldrb	r3, [r7, #22]
 80134f4:	091b      	lsrs	r3, r3, #4
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	3301      	adds	r3, #1
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	011b      	lsls	r3, r3, #4
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	75bb      	strb	r3, [r7, #22]
 8013502:	e004      	b.n	801350e <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 8013504:	8bfb      	ldrh	r3, [r7, #30]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <phpalI14443p3a_Sw_ActivateCard+0x27e>
 801350a:	8bfb      	ldrh	r3, [r7, #30]
 801350c:	e070      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 801350e:	7dfb      	ldrb	r3, [r7, #23]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d115      	bne.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8013514:	7d3b      	ldrb	r3, [r7, #20]
 8013516:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 801351a:	2b00      	cmp	r3, #0
 801351c:	d102      	bne.n	8013524 <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 801351e:	7efb      	ldrb	r3, [r7, #27]
 8013520:	2b93      	cmp	r3, #147	@ 0x93
 8013522:	d007      	beq.n	8013534 <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8013524:	7d3b      	ldrb	r3, [r7, #20]
 8013526:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 801352a:	2b40      	cmp	r3, #64	@ 0x40
 801352c:	d108      	bne.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801352e:	7efb      	ldrb	r3, [r7, #27]
 8013530:	2b95      	cmp	r3, #149	@ 0x95
 8013532:	d105      	bne.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 8013534:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8013536:	2b88      	cmp	r3, #136	@ 0x88
 8013538:	d102      	bne.n	8013540 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801353a:	f240 3306 	movw	r3, #774	@ 0x306
 801353e:	e057      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8013540:	7dbb      	ldrb	r3, [r7, #22]
 8013542:	2b40      	cmp	r3, #64	@ 0x40
 8013544:	f47f af7e 	bne.w	8013444 <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 8013548:	f107 0210 	add.w	r2, r7, #16
 801354c:	7ef9      	ldrb	r1, [r7, #27]
 801354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	f7ff fe85 	bl	8013260 <phpalI14443p3a_Sw_Select>
 8013556:	4603      	mov	r3, r0
 8013558:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	7d1b      	ldrb	r3, [r3, #20]
 801355e:	2b01      	cmp	r3, #1
 8013560:	d124      	bne.n	80135ac <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 8013562:	2300      	movs	r3, #0
 8013564:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8013566:	e01a      	b.n	801359e <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 8013568:	7e3b      	ldrb	r3, [r7, #24]
 801356a:	3301      	adds	r3, #1
 801356c:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013576:	2100      	movs	r1, #0
 8013578:	4618      	mov	r0, r3
 801357a:	f7f9 fe21 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 801357e:	4603      	mov	r3, r0
 8013580:	83fb      	strh	r3, [r7, #30]
 8013582:	8bfb      	ldrh	r3, [r7, #30]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d001      	beq.n	801358c <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 8013588:	8bfb      	ldrh	r3, [r7, #30]
 801358a:	e031      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 801358c:	f107 0210 	add.w	r2, r7, #16
 8013590:	7ef9      	ldrb	r1, [r7, #27]
 8013592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	f7ff fe63 	bl	8013260 <phpalI14443p3a_Sw_Select>
 801359a:	4603      	mov	r3, r0
 801359c:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801359e:	8bbb      	ldrh	r3, [r7, #28]
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	d102      	bne.n	80135ac <phpalI14443p3a_Sw_ActivateCard+0x31c>
 80135a6:	7e3b      	ldrb	r3, [r7, #24]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d9dd      	bls.n	8013568 <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 80135ac:	8bbb      	ldrh	r3, [r7, #28]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d001      	beq.n	80135b6 <phpalI14443p3a_Sw_ActivateCard+0x326>
 80135b2:	8bbb      	ldrh	r3, [r7, #28]
 80135b4:	e01c      	b.n	80135f0 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 80135b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	f003 0304 	and.w	r3, r3, #4
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d007      	beq.n	80135d2 <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80135c2:	7ebb      	ldrb	r3, [r7, #26]
 80135c4:	3301      	adds	r3, #1
 80135c6:	76bb      	strb	r3, [r7, #26]
 80135c8:	7ebb      	ldrb	r3, [r7, #26]
 80135ca:	2b02      	cmp	r3, #2
 80135cc:	f67f af00 	bls.w	80133d0 <phpalI14443p3a_Sw_ActivateCard+0x140>
 80135d0:	e000      	b.n	80135d4 <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 80135d2:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f103 0108 	add.w	r1, r3, #8
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	7c9b      	ldrb	r3, [r3, #18]
 80135de:	461a      	mov	r2, r3
 80135e0:	6838      	ldr	r0, [r7, #0]
 80135e2:	f009 fdf0 	bl	801d1c6 <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	7c9a      	ldrb	r2, [r3, #18]
 80135ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ec:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80135ee:	2300      	movs	r3, #0
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3720      	adds	r7, #32
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af02      	add	r7, sp, #8
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	607a      	str	r2, [r7, #4]
 8013602:	461a      	mov	r2, r3
 8013604:	460b      	mov	r3, r1
 8013606:	817b      	strh	r3, [r7, #10]
 8013608:	4613      	mov	r3, r2
 801360a:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	6858      	ldr	r0, [r3, #4]
 8013610:	893a      	ldrh	r2, [r7, #8]
 8013612:	8979      	ldrh	r1, [r7, #10]
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	69bb      	ldr	r3, [r7, #24]
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	4613      	mov	r3, r2
 801361e:	687a      	ldr	r2, [r7, #4]
 8013620:	f7f9 fad2 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013624:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}

0801362e <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 801362e:	b580      	push	{r7, lr}
 8013630:	b08a      	sub	sp, #40	@ 0x28
 8013632:	af02      	add	r7, sp, #8
 8013634:	60f8      	str	r0, [r7, #12]
 8013636:	460b      	mov	r3, r1
 8013638:	607a      	str	r2, [r7, #4]
 801363a:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801363c:	2300      	movs	r3, #0
 801363e:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013640:	2300      	movs	r3, #0
 8013642:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	2201      	movs	r2, #1
 801364a:	212e      	movs	r1, #46	@ 0x2e
 801364c:	4618      	mov	r0, r3
 801364e:	f7f9 fe3b 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013652:	4603      	mov	r3, r0
 8013654:	83fb      	strh	r3, [r7, #30]
 8013656:	8bfb      	ldrh	r3, [r7, #30]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d001      	beq.n	8013660 <phpalI14443p3a_Sw_RequestAEx+0x32>
 801365c:	8bfb      	ldrh	r3, [r7, #30]
 801365e:	e0cc      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	2109      	movs	r1, #9
 8013668:	4618      	mov	r0, r3
 801366a:	f7f9 fe2d 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801366e:	4603      	mov	r3, r0
 8013670:	83fb      	strh	r3, [r7, #30]
 8013672:	8bfb      	ldrh	r3, [r7, #30]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d001      	beq.n	801367c <phpalI14443p3a_Sw_RequestAEx+0x4e>
 8013678:	8bfb      	ldrh	r3, [r7, #30]
 801367a:	e0be      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	685b      	ldr	r3, [r3, #4]
 8013680:	2200      	movs	r2, #0
 8013682:	210a      	movs	r1, #10
 8013684:	4618      	mov	r0, r3
 8013686:	f7f9 fe1f 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801368a:	4603      	mov	r3, r0
 801368c:	83fb      	strh	r3, [r7, #30]
 801368e:	8bfb      	ldrh	r3, [r7, #30]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d001      	beq.n	8013698 <phpalI14443p3a_Sw_RequestAEx+0x6a>
 8013694:	8bfb      	ldrh	r3, [r7, #30]
 8013696:	e0b0      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	2291      	movs	r2, #145	@ 0x91
 801369e:	210d      	movs	r1, #13
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7f9 fe11 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80136a6:	4603      	mov	r3, r0
 80136a8:	83fb      	strh	r3, [r7, #30]
 80136aa:	8bfb      	ldrh	r3, [r7, #30]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <phpalI14443p3a_Sw_RequestAEx+0x86>
 80136b0:	8bfb      	ldrh	r3, [r7, #30]
 80136b2:	e0a2      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	f107 0210 	add.w	r2, r7, #16
 80136bc:	2106      	movs	r1, #6
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fb fa50 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 80136c4:	4603      	mov	r3, r0
 80136c6:	83fb      	strh	r3, [r7, #30]
 80136c8:	8bfb      	ldrh	r3, [r7, #30]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d001      	beq.n	80136d2 <phpalI14443p3a_Sw_RequestAEx+0xa4>
 80136ce:	8bfb      	ldrh	r3, [r7, #30]
 80136d0:	e093      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	224c      	movs	r2, #76	@ 0x4c
 80136d8:	2106      	movs	r1, #6
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f9 fdf4 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80136e0:	4603      	mov	r3, r0
 80136e2:	83fb      	strh	r3, [r7, #30]
 80136e4:	8bfb      	ldrh	r3, [r7, #30]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <phpalI14443p3a_Sw_RequestAEx+0xc0>
 80136ea:	8bfb      	ldrh	r3, [r7, #30]
 80136ec:	e085      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	2200      	movs	r2, #0
 80136f4:	2101      	movs	r1, #1
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f9 fde6 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80136fc:	4603      	mov	r3, r0
 80136fe:	83fb      	strh	r3, [r7, #30]
 8013700:	8bfb      	ldrh	r3, [r7, #30]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d001      	beq.n	801370a <phpalI14443p3a_Sw_RequestAEx+0xdc>
 8013706:	8bfb      	ldrh	r3, [r7, #30]
 8013708:	e077      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	2200      	movs	r2, #0
 8013710:	2102      	movs	r1, #2
 8013712:	4618      	mov	r0, r3
 8013714:	f7f9 fdd8 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013718:	4603      	mov	r3, r0
 801371a:	83fb      	strh	r3, [r7, #30]
 801371c:	8bfb      	ldrh	r3, [r7, #30]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d001      	beq.n	8013726 <phpalI14443p3a_Sw_RequestAEx+0xf8>
 8013722:	8bfb      	ldrh	r3, [r7, #30]
 8013724:	e069      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	2207      	movs	r2, #7
 801372c:	2103      	movs	r1, #3
 801372e:	4618      	mov	r0, r3
 8013730:	f7f9 fdca 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013734:	4603      	mov	r3, r0
 8013736:	83fb      	strh	r3, [r7, #30]
 8013738:	8bfb      	ldrh	r3, [r7, #30]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d001      	beq.n	8013742 <phpalI14443p3a_Sw_RequestAEx+0x114>
 801373e:	8bfb      	ldrh	r3, [r7, #30]
 8013740:	e05b      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 8013742:	7afb      	ldrb	r3, [r7, #11]
 8013744:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	6858      	ldr	r0, [r3, #4]
 801374a:	f107 0218 	add.w	r2, r7, #24
 801374e:	f107 0312 	add.w	r3, r7, #18
 8013752:	9301      	str	r3, [sp, #4]
 8013754:	f107 0314 	add.w	r3, r7, #20
 8013758:	9300      	str	r3, [sp, #0]
 801375a:	2301      	movs	r3, #1
 801375c:	2100      	movs	r1, #0
 801375e:	f7f9 fa33 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013762:	4603      	mov	r3, r0
 8013764:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	8a3a      	ldrh	r2, [r7, #16]
 801376c:	2106      	movs	r1, #6
 801376e:	4618      	mov	r0, r3
 8013770:	f7f9 fdaa 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013774:	4603      	mov	r3, r0
 8013776:	83bb      	strh	r3, [r7, #28]
 8013778:	8bbb      	ldrh	r3, [r7, #28]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d001      	beq.n	8013782 <phpalI14443p3a_Sw_RequestAEx+0x154>
 801377e:	8bbb      	ldrh	r3, [r7, #28]
 8013780:	e03b      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 8013782:	8bfb      	ldrh	r3, [r7, #30]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d001      	beq.n	801378c <phpalI14443p3a_Sw_RequestAEx+0x15e>
 8013788:	8bfb      	ldrh	r3, [r7, #30]
 801378a:	e036      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 801378c:	8a7b      	ldrh	r3, [r7, #18]
 801378e:	2b02      	cmp	r3, #2
 8013790:	d12f      	bne.n	80137f2 <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	881b      	ldrh	r3, [r3, #0]
 8013796:	b29a      	uxth	r2, r3
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	7d1b      	ldrb	r3, [r3, #20]
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d109      	bne.n	80137b8 <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	3301      	adds	r3, #1
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d022      	beq.n	80137f8 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80137b2:	f240 3306 	movw	r3, #774	@ 0x306
 80137b6:	e020      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	f003 031f 	and.w	r3, r3, #31
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d106      	bne.n	80137d2 <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	3301      	adds	r3, #1
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	f003 030f 	and.w	r3, r3, #15
 80137ce:	2b0c      	cmp	r3, #12
 80137d0:	d10c      	bne.n	80137ec <phpalI14443p3a_Sw_RequestAEx+0x1be>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	3301      	adds	r3, #1
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	f003 030f 	and.w	r3, r3, #15
 80137dc:	2b0c      	cmp	r3, #12
 80137de:	d10b      	bne.n	80137f8 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	f003 031f 	and.w	r3, r3, #31
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d005      	beq.n	80137f8 <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80137ec:	f240 3306 	movw	r3, #774	@ 0x306
 80137f0:	e003      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80137f2:	f240 3306 	movw	r3, #774	@ 0x306
 80137f6:	e000      	b.n	80137fa <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 80137f8:	2300      	movs	r3, #0
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3720      	adds	r7, #32
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b084      	sub	sp, #16
 8013806:	af00      	add	r7, sp, #0
 8013808:	60f8      	str	r0, [r7, #12]
 801380a:	60b9      	str	r1, [r7, #8]
 801380c:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	7cdb      	ldrb	r3, [r3, #19]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d102      	bne.n	801381c <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 8013816:	f240 3325 	movw	r3, #805	@ 0x325
 801381a:	e00d      	b.n	8013838 <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f103 0108 	add.w	r1, r3, #8
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	7c9b      	ldrb	r3, [r3, #18]
 8013826:	461a      	mov	r2, r3
 8013828:	68b8      	ldr	r0, [r7, #8]
 801382a:	f009 fccc 	bl	801d1c6 <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	7c9a      	ldrb	r2, [r3, #18]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8013836:	2300      	movs	r3, #0
}
 8013838:	4618      	mov	r0, r3
 801383a:	3710      	adds	r7, #16
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8013840:	b480      	push	{r7}
 8013842:	b085      	sub	sp, #20
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	460b      	mov	r3, r1
 801384a:	607a      	str	r2, [r7, #4]
 801384c:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 801384e:	897b      	ldrh	r3, [r7, #10]
 8013850:	2b2c      	cmp	r3, #44	@ 0x2c
 8013852:	d002      	beq.n	801385a <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 8013854:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8013858:	e051      	b.n	80138fe <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <phpalI14443p3b_Sw_Init+0x24>
 8013860:	2321      	movs	r3, #33	@ 0x21
 8013862:	e04c      	b.n	80138fe <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d101      	bne.n	801386e <phpalI14443p3b_Sw_Init+0x2e>
 801386a:	2321      	movs	r3, #33	@ 0x21
 801386c:	e047      	b.n	80138fe <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	f240 4201 	movw	r2, #1025	@ 0x401
 8013874:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2200      	movs	r2, #0
 8013880:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	2200      	movs	r2, #0
 8013886:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	2200      	movs	r2, #0
 801388c:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2200      	movs	r2, #0
 8013892:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2200      	movs	r2, #0
 8013898:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2204      	movs	r2, #4
 801389e:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2202      	movs	r2, #2
 80138a4:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2200      	movs	r2, #0
 80138aa:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	2200      	movs	r2, #0
 80138b0:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2200      	movs	r2, #0
 80138b6:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2200      	movs	r2, #0
 80138bc:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80138ca:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2200      	movs	r2, #0
 80138d0:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2200      	movs	r2, #0
 80138d6:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2200      	movs	r2, #0
 80138dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2200      	movs	r2, #0
 80138e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2202      	movs	r2, #2
 80138e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2201      	movs	r2, #1
 80138f8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 80138fc:	2300      	movs	r3, #0
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3714      	adds	r7, #20
 8013902:	46bd      	mov	sp, r7
 8013904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013908:	4770      	bx	lr
	...

0801390c <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	460b      	mov	r3, r1
 8013916:	807b      	strh	r3, [r7, #2]
 8013918:	4613      	mov	r3, r2
 801391a:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 801391c:	887b      	ldrh	r3, [r7, #2]
 801391e:	2b03      	cmp	r3, #3
 8013920:	d82c      	bhi.n	801397c <phpalI14443p3b_Sw_SetConfig+0x70>
 8013922:	a201      	add	r2, pc, #4	@ (adr r2, 8013928 <phpalI14443p3b_Sw_SetConfig+0x1c>)
 8013924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013928:	08013939 	.word	0x08013939
 801392c:	08013943 	.word	0x08013943
 8013930:	0801394f 	.word	0x0801394f
 8013934:	0801395b 	.word	0x0801395b
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8013938:	883b      	ldrh	r3, [r7, #0]
 801393a:	b2da      	uxtb	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	759a      	strb	r2, [r3, #22]
        break;
 8013940:	e01f      	b.n	8013982 <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 8013942:	883b      	ldrh	r3, [r7, #0]
 8013944:	b2da      	uxtb	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 801394c:	e019      	b.n	8013982 <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 801394e:	883b      	ldrh	r3, [r7, #0]
 8013950:	b2da      	uxtb	r2, r3
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8013958:	e013      	b.n	8013982 <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 801395a:	883b      	ldrh	r3, [r7, #0]
 801395c:	b2db      	uxtb	r3, r3
 801395e:	2b00      	cmp	r3, #0
 8013960:	d006      	beq.n	8013970 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 8013962:	883b      	ldrh	r3, [r7, #0]
 8013964:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8013966:	2b01      	cmp	r3, #1
 8013968:	d002      	beq.n	8013970 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801396a:	f240 4321 	movw	r3, #1057	@ 0x421
 801396e:	e009      	b.n	8013984 <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 8013970:	883b      	ldrh	r3, [r7, #0]
 8013972:	b2da      	uxtb	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 801397a:	e002      	b.n	8013982 <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801397c:	f240 4323 	movw	r3, #1059	@ 0x423
 8013980:	e000      	b.n	8013984 <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 8013982:	2300      	movs	r3, #0
}
 8013984:	4618      	mov	r0, r3
 8013986:	370c      	adds	r7, #12
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
 8013996:	60f8      	str	r0, [r7, #12]
 8013998:	460b      	mov	r3, r1
 801399a:	607a      	str	r2, [r7, #4]
 801399c:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 801399e:	897b      	ldrh	r3, [r7, #10]
 80139a0:	2b05      	cmp	r3, #5
 80139a2:	d828      	bhi.n	80139f6 <phpalI14443p3b_Sw_GetConfig+0x66>
 80139a4:	a201      	add	r2, pc, #4	@ (adr r2, 80139ac <phpalI14443p3b_Sw_GetConfig+0x1c>)
 80139a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139aa:	bf00      	nop
 80139ac:	080139c5 	.word	0x080139c5
 80139b0:	080139f7 	.word	0x080139f7
 80139b4:	080139f7 	.word	0x080139f7
 80139b8:	080139d1 	.word	0x080139d1
 80139bc:	080139df 	.word	0x080139df
 80139c0:	080139eb 	.word	0x080139eb
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	7d9b      	ldrb	r3, [r3, #22]
 80139c8:	461a      	mov	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	801a      	strh	r2, [r3, #0]
        break;
 80139ce:	e015      	b.n	80139fc <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80139d6:	461a      	mov	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	801a      	strh	r2, [r3, #0]
        break;
 80139dc:	e00e      	b.n	80139fc <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	7d1b      	ldrb	r3, [r3, #20]
 80139e2:	461a      	mov	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	801a      	strh	r2, [r3, #0]
        break;
 80139e8:	e008      	b.n	80139fc <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	7d5b      	ldrb	r3, [r3, #21]
 80139ee:	461a      	mov	r2, r3
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	801a      	strh	r2, [r3, #0]
        break;
 80139f4:	e002      	b.n	80139fc <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80139f6:	f240 4323 	movw	r3, #1059	@ 0x423
 80139fa:	e000      	b.n	80139fe <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 80139fc:	2300      	movs	r3, #0
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3714      	adds	r7, #20
 8013a02:	46bd      	mov	sp, r7
 8013a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a08:	4770      	bx	lr
 8013a0a:	bf00      	nop

08013a0c <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b086      	sub	sp, #24
 8013a10:	af04      	add	r7, sp, #16
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	4608      	mov	r0, r1
 8013a16:	4611      	mov	r1, r2
 8013a18:	461a      	mov	r2, r3
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	70fb      	strb	r3, [r7, #3]
 8013a1e:	460b      	mov	r3, r1
 8013a20:	70bb      	strb	r3, [r7, #2]
 8013a22:	4613      	mov	r3, r2
 8013a24:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8013a26:	78b9      	ldrb	r1, [r7, #2]
 8013a28:	78fa      	ldrb	r2, [r7, #3]
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	9302      	str	r3, [sp, #8]
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	9301      	str	r3, [sp, #4]
 8013a32:	787b      	ldrb	r3, [r7, #1]
 8013a34:	9300      	str	r3, [sp, #0]
 8013a36:	460b      	mov	r3, r1
 8013a38:	2100      	movs	r1, #0
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f000 fc54 	bl	80142e8 <phpalI14443p3b_Sw_RequestBEx>
 8013a40:	4603      	mov	r3, r0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3708      	adds	r7, #8
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 8013a4a:	b580      	push	{r7, lr}
 8013a4c:	b086      	sub	sp, #24
 8013a4e:	af04      	add	r7, sp, #16
 8013a50:	6078      	str	r0, [r7, #4]
 8013a52:	4608      	mov	r0, r1
 8013a54:	4611      	mov	r1, r2
 8013a56:	461a      	mov	r2, r3
 8013a58:	4603      	mov	r3, r0
 8013a5a:	70fb      	strb	r3, [r7, #3]
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	70bb      	strb	r3, [r7, #2]
 8013a60:	4613      	mov	r3, r2
 8013a62:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8013a64:	78b9      	ldrb	r1, [r7, #2]
 8013a66:	78fa      	ldrb	r2, [r7, #3]
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	9302      	str	r3, [sp, #8]
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	9301      	str	r3, [sp, #4]
 8013a70:	787b      	ldrb	r3, [r7, #1]
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	460b      	mov	r3, r1
 8013a76:	2101      	movs	r1, #1
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 fc35 	bl	80142e8 <phpalI14443p3b_Sw_RequestBEx>
 8013a7e:	4603      	mov	r3, r0
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b08a      	sub	sp, #40	@ 0x28
 8013a8c:	af02      	add	r7, sp, #8
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	607a      	str	r2, [r7, #4]
 8013a92:	603b      	str	r3, [r7, #0]
 8013a94:	460b      	mov	r3, r1
 8013a96:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 8013aa0:	7afb      	ldrb	r3, [r7, #11]
 8013aa2:	2b01      	cmp	r3, #1
 8013aa4:	d902      	bls.n	8013aac <phpalI14443p3b_Sw_SlotMarker+0x24>
 8013aa6:	7afb      	ldrb	r3, [r7, #11]
 8013aa8:	2b10      	cmp	r3, #16
 8013aaa:	d902      	bls.n	8013ab2 <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013aac:	f240 4321 	movw	r3, #1057	@ 0x421
 8013ab0:	e026      	b.n	8013b00 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 8013ab2:	7afb      	ldrb	r3, [r7, #11]
 8013ab4:	3b01      	subs	r3, #1
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	011b      	lsls	r3, r3, #4
 8013aba:	b2db      	uxtb	r3, r3
 8013abc:	f043 0305 	orr.w	r3, r3, #5
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	6858      	ldr	r0, [r3, #4]
 8013ac8:	f107 021c 	add.w	r2, r7, #28
 8013acc:	f107 0316 	add.w	r3, r7, #22
 8013ad0:	9301      	str	r3, [sp, #4]
 8013ad2:	f107 0318 	add.w	r3, r7, #24
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	2301      	movs	r3, #1
 8013ada:	2100      	movs	r1, #0
 8013adc:	f7f9 f874 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	83fb      	strh	r3, [r7, #30]
 8013ae4:	8bfb      	ldrh	r3, [r7, #30]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d001      	beq.n	8013aee <phpalI14443p3b_Sw_SlotMarker+0x66>
 8013aea:	8bfb      	ldrh	r3, [r7, #30]
 8013aec:	e008      	b.n	8013b00 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8013aee:	69b9      	ldr	r1, [r7, #24]
 8013af0:	8afa      	ldrh	r2, [r7, #22]
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f000 fb31 	bl	8014160 <phpalI14443p3b_Sw_CheckATQBEx>
 8013afe:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3720      	adds	r7, #32
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b088      	sub	sp, #32
 8013b0c:	af02      	add	r7, sp, #8
 8013b0e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013b10:	2300      	movs	r3, #0
 8013b12:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013b14:	2300      	movs	r3, #0
 8013b16:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8013b20:	210d      	movs	r1, #13
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7f9 fbd0 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	82fb      	strh	r3, [r7, #22]
 8013b2c:	8afb      	ldrh	r3, [r7, #22]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d001      	beq.n	8013b36 <phpalI14443p3b_Sw_HaltB+0x2e>
 8013b32:	8afb      	ldrh	r3, [r7, #22]
 8013b34:	e029      	b.n	8013b8a <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 8013b36:	2350      	movs	r3, #80	@ 0x50
 8013b38:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3309      	adds	r3, #9
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6858      	ldr	r0, [r3, #4]
 8013b48:	f107 0210 	add.w	r2, r7, #16
 8013b4c:	f107 030a 	add.w	r3, r7, #10
 8013b50:	9301      	str	r3, [sp, #4]
 8013b52:	f107 030c 	add.w	r3, r7, #12
 8013b56:	9300      	str	r3, [sp, #0]
 8013b58:	2305      	movs	r3, #5
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	f7f9 f834 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013b60:	4603      	mov	r3, r0
 8013b62:	82fb      	strh	r3, [r7, #22]
 8013b64:	8afb      	ldrh	r3, [r7, #22]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d001      	beq.n	8013b6e <phpalI14443p3b_Sw_HaltB+0x66>
 8013b6a:	8afb      	ldrh	r3, [r7, #22]
 8013b6c:	e00d      	b.n	8013b8a <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 8013b6e:	897b      	ldrh	r3, [r7, #10]
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d103      	bne.n	8013b7c <phpalI14443p3b_Sw_HaltB+0x74>
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d002      	beq.n	8013b82 <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013b7c:	f240 4306 	movw	r3, #1030	@ 0x406
 8013b80:	e003      	b.n	8013b8a <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2200      	movs	r2, #0
 8013b86:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8013b88:	2300      	movs	r3, #0
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3718      	adds	r7, #24
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	0000      	movs	r0, r0
 8013b94:	0000      	movs	r0, r0
	...

08013b98 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b090      	sub	sp, #64	@ 0x40
 8013b9c:	af02      	add	r7, sp, #8
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	461a      	mov	r2, r3
 8013ba6:	460b      	mov	r3, r1
 8013ba8:	71fb      	strb	r3, [r7, #7]
 8013baa:	4613      	mov	r3, r2
 8013bac:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 8013bc4:	f04f 0300 	mov.w	r3, #0
 8013bc8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 8013bca:	79fb      	ldrb	r3, [r7, #7]
 8013bcc:	2b0c      	cmp	r3, #12
 8013bce:	d005      	beq.n	8013bdc <phpalI14443p3b_Sw_Attrib+0x44>
 8013bd0:	79fb      	ldrb	r3, [r7, #7]
 8013bd2:	2b0d      	cmp	r3, #13
 8013bd4:	d002      	beq.n	8013bdc <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013bd6:	f240 4321 	movw	r3, #1057	@ 0x421
 8013bda:	e295      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 8013bdc:	79bb      	ldrb	r3, [r7, #6]
 8013bde:	2b0c      	cmp	r3, #12
 8013be0:	d807      	bhi.n	8013bf2 <phpalI14443p3b_Sw_Attrib+0x5a>
 8013be2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013be6:	2b03      	cmp	r3, #3
 8013be8:	d803      	bhi.n	8013bf2 <phpalI14443p3b_Sw_Attrib+0x5a>
 8013bea:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8013bee:	2b03      	cmp	r3, #3
 8013bf0:	d902      	bls.n	8013bf8 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013bf2:	f240 4321 	movw	r3, #1057	@ 0x421
 8013bf6:	e287      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8013bf8:	79bb      	ldrb	r3, [r7, #6]
 8013bfa:	2b07      	cmp	r3, #7
 8013bfc:	d807      	bhi.n	8013c0e <phpalI14443p3b_Sw_Attrib+0x76>
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d102      	bne.n	8013c0e <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013c08:	f240 4321 	movw	r3, #1057	@ 0x421
 8013c0c:	e27c      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 8013c0e:	231d      	movs	r3, #29
 8013c10:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	3301      	adds	r3, #1
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	7d9b      	ldrb	r3, [r3, #22]
 8013c20:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 8013c24:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8013c28:	019b      	lsls	r3, r3, #6
 8013c2a:	b25a      	sxtb	r2, r3
 8013c2c:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8013c30:	011b      	lsls	r3, r3, #4
 8013c32:	b25b      	sxtb	r3, r3
 8013c34:	4313      	orrs	r3, r2
 8013c36:	b25a      	sxtb	r2, r3
 8013c38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	b25b      	sxtb	r3, r3
 8013c40:	b2db      	uxtb	r3, r3
 8013c42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d108      	bne.n	8013c62 <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	330a      	adds	r3, #10
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	f003 0301 	and.w	r3, r3, #1
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8013c60:	e007      	b.n	8013c72 <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	330a      	adds	r3, #10
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	f003 0307 	and.w	r3, r3, #7
 8013c6c:	b2db      	uxtb	r3, r3
 8013c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	330b      	adds	r3, #11
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	f003 0301 	and.w	r3, r3, #1
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d006      	beq.n	8013c8e <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 8013c80:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013c84:	2b0e      	cmp	r3, #14
 8013c86:	d905      	bls.n	8013c94 <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8013c88:	f240 4321 	movw	r3, #1057	@ 0x421
 8013c8c:	e23c      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 8013c94:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013c98:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	330b      	adds	r3, #11
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	091b      	lsrs	r3, r3, #4
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	7c5b      	ldrb	r3, [r3, #17]
 8013cae:	2b0f      	cmp	r3, #15
 8013cb0:	d102      	bne.n	8013cb8 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2204      	movs	r2, #4
 8013cb6:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	7c5b      	ldrb	r3, [r3, #17]
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	4093      	lsls	r3, r2
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7ec fc1e 	bl	8000504 <__aeabi_ui2d>
 8013cc8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8013f78 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec fc93 	bl	80005f8 <__aeabi_dmul>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	4619      	mov	r1, r3
 8013cda:	f7ec ff65 	bl	8000ba8 <__aeabi_d2f>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ce8:	2b03      	cmp	r3, #3
 8013cea:	d108      	bne.n	8013cfe <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 8013cec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013cf0:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8013f68 <phpalI14443p3b_Sw_Attrib+0x3d0>
 8013cf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cf8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8013cfc:	e014      	b.n	8013d28 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 8013cfe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d02:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8013f6c <phpalI14443p3b_Sw_Attrib+0x3d4>
 8013d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d0a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d107      	bne.n	8013d28 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 8013d18:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d1c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8013f70 <phpalI14443p3b_Sw_Attrib+0x3d8>
 8013d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d24:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 8013d28:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d30:	ee17 3a90 	vmov	r3, s15
 8013d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 8013d36:	79fb      	ldrb	r3, [r7, #7]
 8013d38:	2b0d      	cmp	r3, #13
 8013d3a:	d10e      	bne.n	8013d5a <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8013d44:	210d      	movs	r1, #13
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7f9 fabe 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013d50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d029      	beq.n	8013daa <phpalI14443p3b_Sw_Attrib+0x212>
 8013d56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013d58:	e1d6      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8013d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013d60:	d314      	bcc.n	8013d8c <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	6858      	ldr	r0, [r3, #4]
 8013d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d68:	4a82      	ldr	r2, [pc, #520]	@ (8013f74 <phpalI14443p3b_Sw_Attrib+0x3dc>)
 8013d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8013d6e:	099b      	lsrs	r3, r3, #6
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	3301      	adds	r3, #1
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	461a      	mov	r2, r3
 8013d78:	210e      	movs	r1, #14
 8013d7a:	f7f9 faa5 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013d82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d010      	beq.n	8013daa <phpalI14443p3b_Sw_Attrib+0x212>
 8013d88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013d8a:	e1bd      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d92:	b292      	uxth	r2, r2
 8013d94:	210d      	movs	r1, #13
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7f9 fa96 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013da0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d001      	beq.n	8013daa <phpalI14443p3b_Sw_Attrib+0x212>
 8013da6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013da8:	e1ae      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	6858      	ldr	r0, [r3, #4]
 8013db2:	f107 021c 	add.w	r2, r7, #28
 8013db6:	f107 0316 	add.w	r3, r7, #22
 8013dba:	9301      	str	r3, [sp, #4]
 8013dbc:	f107 0318 	add.w	r3, r7, #24
 8013dc0:	9300      	str	r3, [sp, #0]
 8013dc2:	2309      	movs	r3, #9
 8013dc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013dc8:	f7f8 fefe 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013dd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d001      	beq.n	8013dda <phpalI14443p3b_Sw_Attrib+0x242>
 8013dd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013dd8:	e196      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	6858      	ldr	r0, [r3, #4]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	699a      	ldr	r2, [r3, #24]
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	8bd9      	ldrh	r1, [r3, #30]
 8013de6:	f107 0316 	add.w	r3, r7, #22
 8013dea:	9301      	str	r3, [sp, #4]
 8013dec:	f107 0318 	add.w	r3, r7, #24
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	460b      	mov	r3, r1
 8013df4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013df8:	f7f8 fee6 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8013e06:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8013e0a:	e04d      	b.n	8013ea8 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e12:	2b01      	cmp	r3, #1
 8013e14:	d118      	bne.n	8013e48 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8013e16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	2b01      	cmp	r3, #1
 8013e1c:	d003      	beq.n	8013e26 <phpalI14443p3b_Sw_Attrib+0x28e>
 8013e1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e20:	b2db      	uxtb	r3, r3
 8013e22:	2b11      	cmp	r3, #17
 8013e24:	d10e      	bne.n	8013e44 <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8013e2e:	2100      	movs	r1, #0
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7f9 f9c5 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8013e36:	4603      	mov	r3, r0
 8013e38:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d003      	beq.n	8013e48 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8013e40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e42:	e161      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 8013e44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e46:	e15f      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	6858      	ldr	r0, [r3, #4]
 8013e50:	f107 021c 	add.w	r2, r7, #28
 8013e54:	f107 0316 	add.w	r3, r7, #22
 8013e58:	9301      	str	r3, [sp, #4]
 8013e5a:	f107 0318 	add.w	r3, r7, #24
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	2309      	movs	r3, #9
 8013e62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013e66:	f7f8 feaf 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013e6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d001      	beq.n	8013e78 <phpalI14443p3b_Sw_Attrib+0x2e0>
 8013e74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013e76:	e147      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	6858      	ldr	r0, [r3, #4]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	699a      	ldr	r2, [r3, #24]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	8bd9      	ldrh	r1, [r3, #30]
 8013e84:	f107 0316 	add.w	r3, r7, #22
 8013e88:	9301      	str	r3, [sp, #4]
 8013e8a:	f107 0318 	add.w	r3, r7, #24
 8013e8e:	9300      	str	r3, [sp, #0]
 8013e90:	460b      	mov	r3, r1
 8013e92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013e96:	f7f8 fe97 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 8013e9e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013ea2:	3b01      	subs	r3, #1
 8013ea4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 8013ea8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d003      	beq.n	8013eb8 <phpalI14443p3b_Sw_Attrib+0x320>
 8013eb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1a9      	bne.n	8013e0c <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 8013eb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <phpalI14443p3b_Sw_Attrib+0x32a>
 8013ebe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ec0:	e122      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 8013ec2:	8afb      	ldrh	r3, [r7, #22]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d102      	bne.n	8013ece <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013ec8:	f240 4306 	movw	r3, #1030	@ 0x406
 8013ecc:	e11c      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	330b      	adds	r3, #11
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	f003 0301 	and.w	r3, r3, #1
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d00a      	beq.n	8013ef2 <phpalI14443p3b_Sw_Attrib+0x35a>
 8013edc:	69bb      	ldr	r3, [r7, #24]
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	f003 020f 	and.w	r2, r3, #15
 8013ee4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d002      	beq.n	8013ef2 <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013eec:	f240 4306 	movw	r3, #1030	@ 0x406
 8013ef0:	e10a      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ef8:	2b03      	cmp	r3, #3
 8013efa:	d00f      	beq.n	8013f1c <phpalI14443p3b_Sw_Attrib+0x384>
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	330b      	adds	r3, #11
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	f003 0301 	and.w	r3, r3, #1
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d108      	bne.n	8013f1c <phpalI14443p3b_Sw_Attrib+0x384>
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	f003 030f 	and.w	r3, r3, #15
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d002      	beq.n	8013f1c <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f16:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f1a:	e0f5      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	091b      	lsrs	r3, r3, #4
 8013f22:	b2da      	uxtb	r2, r3
 8013f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f26:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 8013f28:	8afb      	ldrh	r3, [r7, #22]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d931      	bls.n	8013f92 <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 8013f2e:	8afb      	ldrh	r3, [r7, #22]
 8013f30:	3b01      	subs	r3, #1
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	8bdb      	ldrh	r3, [r3, #30]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d105      	bne.n	8013f4c <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2200      	movs	r2, #0
 8013f44:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8013f46:	f240 4306 	movw	r3, #1030	@ 0x406
 8013f4a:	e0dd      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d913      	bls.n	8013f80 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 8013f5e:	f240 4304 	movw	r3, #1028	@ 0x404
 8013f62:	e0d1      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
 8013f64:	f3af 8000 	nop.w
 8013f68:	427c0000 	.word	0x427c0000
 8013f6c:	4566a000 	.word	0x4566a000
 8013f70:	447a0000 	.word	0x447a0000
 8013f74:	10624dd3 	.word	0x10624dd3
 8013f78:	d12e109d 	.word	0xd12e109d
 8013f7c:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6a18      	ldr	r0, [r3, #32]
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	1c59      	adds	r1, r3, #1
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	f009 f91a 	bl	801d1c6 <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f98:	2b03      	cmp	r3, #3
 8013f9a:	d006      	beq.n	8013faa <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	73da      	strb	r2, [r3, #15]
 8013fa8:	e011      	b.n	8013fce <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	330b      	adds	r3, #11
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	f003 0301 	and.w	r3, r3, #1
 8013fb4:	b2da      	uxtb	r2, r3
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	330b      	adds	r3, #11
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	085b      	lsrs	r3, r3, #1
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	f003 0301 	and.w	r3, r3, #1
 8013fc8:	b2da      	uxtb	r2, r3
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	f003 030f 	and.w	r3, r3, #15
 8013fd6:	b2da      	uxtb	r2, r3
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	330a      	adds	r3, #10
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	091b      	lsrs	r3, r3, #4
 8013fe4:	b2da      	uxtb	r2, r3
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	79ba      	ldrb	r2, [r7, #6]
 8013fee:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8013ff6:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8013ffe:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 8014006:	79fb      	ldrb	r3, [r7, #7]
 8014008:	2b0d      	cmp	r3, #13
 801400a:	d125      	bne.n	8014058 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801400e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014012:	d312      	bcc.n	801403a <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	6858      	ldr	r0, [r3, #4]
 8014018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801401a:	4a3d      	ldr	r2, [pc, #244]	@ (8014110 <phpalI14443p3b_Sw_Attrib+0x578>)
 801401c:	fba2 2303 	umull	r2, r3, r2, r3
 8014020:	099b      	lsrs	r3, r3, #6
 8014022:	b29b      	uxth	r3, r3
 8014024:	461a      	mov	r2, r3
 8014026:	210e      	movs	r1, #14
 8014028:	f7f9 f94e 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801402c:	4603      	mov	r3, r0
 801402e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014030:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014032:	2b00      	cmp	r3, #0
 8014034:	d010      	beq.n	8014058 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8014036:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014038:	e066      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014040:	b292      	uxth	r2, r2
 8014042:	210d      	movs	r1, #13
 8014044:	4618      	mov	r0, r3
 8014046:	f7f9 f93f 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801404a:	4603      	mov	r3, r0
 801404c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801404e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014050:	2b00      	cmp	r3, #0
 8014052:	d001      	beq.n	8014058 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8014054:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014056:	e057      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	f000 f9ef 	bl	801443c <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 801405e:	4603      	mov	r3, r0
 8014060:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014062:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014064:	2b00      	cmp	r3, #0
 8014066:	d001      	beq.n	801406c <phpalI14443p3b_Sw_Attrib+0x4d4>
 8014068:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801406a:	e04d      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	6858      	ldr	r0, [r3, #4]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	8b9b      	ldrh	r3, [r3, #28]
 8014074:	461a      	mov	r2, r3
 8014076:	2107      	movs	r1, #7
 8014078:	f7f9 f926 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801407c:	4603      	mov	r3, r0
 801407e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014080:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014082:	2b00      	cmp	r3, #0
 8014084:	d001      	beq.n	801408a <phpalI14443p3b_Sw_Attrib+0x4f2>
 8014086:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014088:	e03e      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 801408a:	79fb      	ldrb	r3, [r7, #7]
 801408c:	2b0d      	cmp	r3, #13
 801408e:	d13a      	bne.n	8014106 <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	330c      	adds	r3, #12
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	091b      	lsrs	r3, r3, #4
 8014098:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 801409c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80140a0:	2b0f      	cmp	r3, #15
 80140a2:	d102      	bne.n	80140aa <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 80140a4:	2300      	movs	r3, #0
 80140a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 80140aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80140ae:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80140b2:	fa02 f303 	lsl.w	r3, r2, r3
 80140b6:	333f      	adds	r3, #63	@ 0x3f
 80140b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 80140ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140c0:	d312      	bcc.n	80140e8 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6858      	ldr	r0, [r3, #4]
 80140c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c8:	4a11      	ldr	r2, [pc, #68]	@ (8014110 <phpalI14443p3b_Sw_Attrib+0x578>)
 80140ca:	fba2 2303 	umull	r2, r3, r2, r3
 80140ce:	099b      	lsrs	r3, r3, #6
 80140d0:	b29b      	uxth	r3, r3
 80140d2:	461a      	mov	r2, r3
 80140d4:	2101      	movs	r1, #1
 80140d6:	f7f9 f873 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 80140da:	4603      	mov	r3, r0
 80140dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80140de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d010      	beq.n	8014106 <phpalI14443p3b_Sw_Attrib+0x56e>
 80140e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140e6:	e00f      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ee:	b292      	uxth	r2, r2
 80140f0:	2100      	movs	r1, #0
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7f9 f864 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 80140f8:	4603      	mov	r3, r0
 80140fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80140fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d001      	beq.n	8014106 <phpalI14443p3b_Sw_Attrib+0x56e>
 8014102:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014104:	e000      	b.n	8014108 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 8014106:	2300      	movs	r3, #0
}
 8014108:	4618      	mov	r0, r3
 801410a:	3738      	adds	r7, #56	@ 0x38
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	10624dd3 	.word	0x10624dd3

08014114 <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8014114:	b480      	push	{r7}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	607a      	str	r2, [r7, #4]
 8014120:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	7b9a      	ldrb	r2, [r3, #14]
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	7c1a      	ldrb	r2, [r3, #16]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	7bda      	ldrb	r2, [r3, #15]
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	7c5a      	ldrb	r2, [r3, #17]
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	7cda      	ldrb	r2, [r3, #19]
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	7c9a      	ldrb	r2, [r3, #18]
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3714      	adds	r7, #20
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b086      	sub	sp, #24
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	603b      	str	r3, [r7, #0]
 801416c:	4613      	mov	r3, r2
 801416e:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 8014170:	88fb      	ldrh	r3, [r7, #6]
 8014172:	2b0c      	cmp	r3, #12
 8014174:	d005      	beq.n	8014182 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 8014176:	88fb      	ldrh	r3, [r7, #6]
 8014178:	2b0d      	cmp	r3, #13
 801417a:	d002      	beq.n	8014182 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801417c:	f240 4306 	movw	r3, #1030	@ 0x406
 8014180:	e0ae      	b.n	80142e0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	2b50      	cmp	r3, #80	@ 0x50
 8014188:	d002      	beq.n	8014190 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801418a:	f240 4306 	movw	r3, #1030	@ 0x406
 801418e:	e0a7      	b.n	80142e0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 8014190:	88fb      	ldrh	r3, [r7, #6]
 8014192:	461a      	mov	r2, r3
 8014194:	68b9      	ldr	r1, [r7, #8]
 8014196:	6838      	ldr	r0, [r7, #0]
 8014198:	f009 f815 	bl	801d1c6 <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 801419c:	88fb      	ldrh	r3, [r7, #6]
 801419e:	b2da      	uxtb	r2, r3
 80141a0:	6a3b      	ldr	r3, [r7, #32]
 80141a2:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80141aa:	2b02      	cmp	r3, #2
 80141ac:	d013      	beq.n	80141d6 <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	330a      	adds	r3, #10
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80141b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80141ba:	d91f      	bls.n	80141fc <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	330a      	adds	r3, #10
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	f003 030f 	and.w	r3, r3, #15
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	330a      	adds	r3, #10
 80141cc:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80141d0:	b2d2      	uxtb	r2, r2
 80141d2:	701a      	strb	r2, [r3, #0]
 80141d4:	e012      	b.n	80141fc <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	330a      	adds	r3, #10
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80141e0:	2b80      	cmp	r3, #128	@ 0x80
 80141e2:	d90b      	bls.n	80141fc <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	330a      	adds	r3, #10
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	f003 030f 	and.w	r3, r3, #15
 80141ee:	b2da      	uxtb	r2, r3
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	330a      	adds	r3, #10
 80141f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80141f8:	b2d2      	uxtb	r2, r2
 80141fa:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014202:	2b01      	cmp	r3, #1
 8014204:	d109      	bne.n	801421a <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	330a      	adds	r3, #10
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	f003 0308 	and.w	r3, r3, #8
 8014210:	2b00      	cmp	r3, #0
 8014212:	d002      	beq.n	801421a <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8014214:	f240 4306 	movw	r3, #1030	@ 0x406
 8014218:	e062      	b.n	80142e0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014220:	2b03      	cmp	r3, #3
 8014222:	d132      	bne.n	801428a <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	330a      	adds	r3, #10
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	085b      	lsrs	r3, r3, #1
 801422c:	b2db      	uxtb	r3, r3
 801422e:	f003 0303 	and.w	r3, r3, #3
 8014232:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 8014234:	7d7b      	ldrb	r3, [r7, #21]
 8014236:	2b02      	cmp	r3, #2
 8014238:	d00e      	beq.n	8014258 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 801423a:	2b02      	cmp	r3, #2
 801423c:	dc11      	bgt.n	8014262 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 801423e:	2b00      	cmp	r3, #0
 8014240:	d002      	beq.n	8014248 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 8014242:	2b01      	cmp	r3, #1
 8014244:	d004      	beq.n	8014250 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 8014246:	e00c      	b.n	8014262 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2285      	movs	r2, #133	@ 0x85
 801424c:	839a      	strh	r2, [r3, #28]
            break;
 801424e:	e00d      	b.n	801426c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	22f6      	movs	r2, #246	@ 0xf6
 8014254:	839a      	strh	r2, [r3, #28]
            break;
 8014256:	e009      	b.n	801426c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	f240 128d 	movw	r2, #397	@ 0x18d
 801425e:	839a      	strh	r2, [r3, #28]
            break;
 8014260:	e004      	b.n	801426c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8014268:	839a      	strh	r2, [r3, #28]
            break;
 801426a:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	6858      	ldr	r0, [r3, #4]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	8b9b      	ldrh	r3, [r3, #28]
 8014274:	461a      	mov	r2, r3
 8014276:	2107      	movs	r1, #7
 8014278:	f7f9 f826 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801427c:	4603      	mov	r3, r0
 801427e:	82fb      	strh	r3, [r7, #22]
 8014280:	8afb      	ldrh	r3, [r7, #22]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d022      	beq.n	80142cc <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8014286:	8afb      	ldrh	r3, [r7, #22]
 8014288:	e02a      	b.n	80142e0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	330a      	adds	r3, #10
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	085b      	lsrs	r3, r3, #1
 8014292:	b2db      	uxtb	r3, r3
 8014294:	f003 0303 	and.w	r3, r3, #3
 8014298:	b2db      	uxtb	r3, r3
 801429a:	2b03      	cmp	r3, #3
 801429c:	d112      	bne.n	80142c4 <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80142a4:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80142ae:	2107      	movs	r1, #7
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f9 f809 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80142b6:	4603      	mov	r3, r0
 80142b8:	82fb      	strh	r3, [r7, #22]
 80142ba:	8afb      	ldrh	r3, [r7, #22]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d005      	beq.n	80142cc <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 80142c0:	8afb      	ldrh	r3, [r7, #22]
 80142c2:	e00d      	b.n	80142e0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80142ca:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	3309      	adds	r3, #9
 80142d0:	683a      	ldr	r2, [r7, #0]
 80142d2:	3201      	adds	r2, #1
 80142d4:	6812      	ldr	r2, [r2, #0]
 80142d6:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2201      	movs	r2, #1
 80142dc:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 80142de:	2300      	movs	r3, #0
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3718      	adds	r7, #24
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b088      	sub	sp, #32
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	4608      	mov	r0, r1
 80142f2:	4611      	mov	r1, r2
 80142f4:	461a      	mov	r2, r3
 80142f6:	4603      	mov	r3, r0
 80142f8:	70fb      	strb	r3, [r7, #3]
 80142fa:	460b      	mov	r3, r1
 80142fc:	70bb      	strb	r3, [r7, #2]
 80142fe:	4613      	mov	r3, r2
 8014300:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014302:	2300      	movs	r3, #0
 8014304:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014306:	2300      	movs	r3, #0
 8014308:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 801430a:	78bb      	ldrb	r3, [r7, #2]
 801430c:	2b04      	cmp	r3, #4
 801430e:	d902      	bls.n	8014316 <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014310:	f240 4321 	movw	r3, #1057	@ 0x421
 8014314:	e08d      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 8014316:	2305      	movs	r3, #5
 8014318:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 801431a:	787b      	ldrb	r3, [r7, #1]
 801431c:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 801431e:	78bb      	ldrb	r3, [r7, #2]
 8014320:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 8014322:	78fb      	ldrb	r3, [r7, #3]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d004      	beq.n	8014332 <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 8014328:	7cbb      	ldrb	r3, [r7, #18]
 801432a:	f043 0308 	orr.w	r3, r3, #8
 801432e:	b2db      	uxtb	r3, r3
 8014330:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 8014332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d004      	beq.n	8014344 <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 801433a:	7cbb      	ldrb	r3, [r7, #18]
 801433c:	f043 0310 	orr.w	r3, r3, #16
 8014340:	b2db      	uxtb	r3, r3
 8014342:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f897 2020 	ldrb.w	r2, [r7, #32]
 801434a:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2200      	movs	r2, #0
 8014350:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	2109      	movs	r1, #9
 801435a:	4618      	mov	r0, r3
 801435c:	f7f8 ffb4 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014360:	4603      	mov	r3, r0
 8014362:	82fb      	strh	r3, [r7, #22]
 8014364:	8afb      	ldrh	r3, [r7, #22]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d001      	beq.n	801436e <phpalI14443p3b_Sw_RequestBEx+0x86>
 801436a:	8afb      	ldrh	r3, [r7, #22]
 801436c:	e061      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	2200      	movs	r2, #0
 8014374:	210a      	movs	r1, #10
 8014376:	4618      	mov	r0, r3
 8014378:	f7f8 ffa6 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801437c:	4603      	mov	r3, r0
 801437e:	82fb      	strh	r3, [r7, #22]
 8014380:	8afb      	ldrh	r3, [r7, #22]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d001      	beq.n	801438a <phpalI14443p3b_Sw_RequestBEx+0xa2>
 8014386:	8afb      	ldrh	r3, [r7, #22]
 8014388:	e053      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014390:	2b01      	cmp	r3, #1
 8014392:	d10e      	bne.n	80143b2 <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801439c:	210d      	movs	r1, #13
 801439e:	4618      	mov	r0, r3
 80143a0:	f7f8 ff92 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80143a4:	4603      	mov	r3, r0
 80143a6:	82fb      	strh	r3, [r7, #22]
 80143a8:	8afb      	ldrh	r3, [r7, #22]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d023      	beq.n	80143f6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80143ae:	8afb      	ldrh	r3, [r7, #22]
 80143b0:	e03f      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80143b8:	2b03      	cmp	r3, #3
 80143ba:	d10e      	bne.n	80143da <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	f240 2297 	movw	r2, #663	@ 0x297
 80143c4:	210d      	movs	r1, #13
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7f8 ff7e 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80143cc:	4603      	mov	r3, r0
 80143ce:	82fb      	strh	r3, [r7, #22]
 80143d0:	8afb      	ldrh	r3, [r7, #22]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00f      	beq.n	80143f6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80143d6:	8afb      	ldrh	r3, [r7, #22]
 80143d8:	e02b      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	2211      	movs	r2, #17
 80143e0:	210e      	movs	r1, #14
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7f8 ff70 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80143e8:	4603      	mov	r3, r0
 80143ea:	82fb      	strh	r3, [r7, #22]
 80143ec:	8afb      	ldrh	r3, [r7, #22]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d001      	beq.n	80143f6 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80143f2:	8afb      	ldrh	r3, [r7, #22]
 80143f4:	e01d      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6858      	ldr	r0, [r3, #4]
 80143fa:	f107 0210 	add.w	r2, r7, #16
 80143fe:	f107 030a 	add.w	r3, r7, #10
 8014402:	9301      	str	r3, [sp, #4]
 8014404:	f107 030c 	add.w	r3, r7, #12
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	2303      	movs	r3, #3
 801440c:	2100      	movs	r1, #0
 801440e:	f7f8 fbdb 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8014412:	4603      	mov	r3, r0
 8014414:	82fb      	strh	r3, [r7, #22]
 8014416:	8afb      	ldrh	r3, [r7, #22]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d001      	beq.n	8014420 <phpalI14443p3b_Sw_RequestBEx+0x138>
 801441c:	8afb      	ldrh	r3, [r7, #22]
 801441e:	e008      	b.n	8014432 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8014420:	68f9      	ldr	r1, [r7, #12]
 8014422:	897a      	ldrh	r2, [r7, #10]
 8014424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f7ff fe98 	bl	8014160 <phpalI14443p3b_Sw_CheckATQBEx>
 8014430:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8014432:	4618      	mov	r0, r3
 8014434:	3718      	adds	r7, #24
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
	...

0801443c <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b084      	sub	sp, #16
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	7d1b      	ldrb	r3, [r3, #20]
 8014448:	2b03      	cmp	r3, #3
 801444a:	d817      	bhi.n	801447c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 801444c:	a201      	add	r2, pc, #4	@ (adr r2, 8014454 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 801444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014452:	bf00      	nop
 8014454:	08014465 	.word	0x08014465
 8014458:	0801446b 	.word	0x0801446b
 801445c:	08014471 	.word	0x08014471
 8014460:	08014477 	.word	0x08014477
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014464:	2300      	movs	r3, #0
 8014466:	81fb      	strh	r3, [r7, #14]
        break;
 8014468:	e00b      	b.n	8014482 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 801446a:	2301      	movs	r3, #1
 801446c:	81fb      	strh	r3, [r7, #14]
        break;
 801446e:	e008      	b.n	8014482 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8014470:	2302      	movs	r3, #2
 8014472:	81fb      	strh	r3, [r7, #14]
        break;
 8014474:	e005      	b.n	8014482 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8014476:	2303      	movs	r3, #3
 8014478:	81fb      	strh	r3, [r7, #14]
        break;
 801447a:	e002      	b.n	8014482 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801447c:	f240 4321 	movw	r3, #1057	@ 0x421
 8014480:	e03a      	b.n	80144f8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	7d5b      	ldrb	r3, [r3, #21]
 8014486:	2b03      	cmp	r3, #3
 8014488:	d816      	bhi.n	80144b8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 801448a:	a201      	add	r2, pc, #4	@ (adr r2, 8014490 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 801448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014490:	080144a1 	.word	0x080144a1
 8014494:	080144a7 	.word	0x080144a7
 8014498:	080144ad 	.word	0x080144ad
 801449c:	080144b3 	.word	0x080144b3
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 80144a0:	2300      	movs	r3, #0
 80144a2:	81bb      	strh	r3, [r7, #12]
        break;
 80144a4:	e00b      	b.n	80144be <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 80144a6:	2301      	movs	r3, #1
 80144a8:	81bb      	strh	r3, [r7, #12]
        break;
 80144aa:	e008      	b.n	80144be <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 80144ac:	2302      	movs	r3, #2
 80144ae:	81bb      	strh	r3, [r7, #12]
        break;
 80144b0:	e005      	b.n	80144be <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 80144b2:	2303      	movs	r3, #3
 80144b4:	81bb      	strh	r3, [r7, #12]
        break;
 80144b6:	e002      	b.n	80144be <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80144b8:	f240 4321 	movw	r3, #1057	@ 0x421
 80144bc:	e01c      	b.n	80144f8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	89fa      	ldrh	r2, [r7, #14]
 80144c4:	2109      	movs	r1, #9
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7f8 fefe 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80144cc:	4603      	mov	r3, r0
 80144ce:	817b      	strh	r3, [r7, #10]
 80144d0:	897b      	ldrh	r3, [r7, #10]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d001      	beq.n	80144da <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 80144d6:	897b      	ldrh	r3, [r7, #10]
 80144d8:	e00e      	b.n	80144f8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	89ba      	ldrh	r2, [r7, #12]
 80144e0:	210a      	movs	r1, #10
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7f8 fef0 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80144e8:	4603      	mov	r3, r0
 80144ea:	817b      	strh	r3, [r7, #10]
 80144ec:	897b      	ldrh	r3, [r7, #10]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d001      	beq.n	80144f6 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 80144f2:	897b      	ldrh	r3, [r7, #10]
 80144f4:	e000      	b.n	80144f8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 80144f6:	2300      	movs	r3, #0

}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3710      	adds	r7, #16
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	3309      	adds	r3, #9
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	6812      	ldr	r2, [r2, #0]
 8014512:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2201      	movs	r2, #1
 8014518:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	370c      	adds	r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014526:	4770      	bx	lr

08014528 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af00      	add	r7, sp, #0
 801452e:	60f8      	str	r0, [r7, #12]
 8014530:	460b      	mov	r3, r1
 8014532:	607a      	str	r2, [r7, #4]
 8014534:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 8014536:	897b      	ldrh	r3, [r7, #10]
 8014538:	2b14      	cmp	r3, #20
 801453a:	d002      	beq.n	8014542 <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 801453c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8014540:	e017      	b.n	8014572 <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d101      	bne.n	801454c <phpalI14443p4_Sw_Init+0x24>
 8014548:	2321      	movs	r3, #33	@ 0x21
 801454a:	e012      	b.n	8014572 <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d101      	bne.n	8014556 <phpalI14443p4_Sw_Init+0x2e>
 8014552:	2321      	movs	r3, #33	@ 0x21
 8014554:	e00d      	b.n	8014572 <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f240 6201 	movw	r2, #1537	@ 0x601
 801455c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2202      	movs	r2, #2
 8014568:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 801456a:	68f8      	ldr	r0, [r7, #12]
 801456c:	f000 f840 	bl	80145f0 <phpalI14443p4_Sw_ResetProtocol>
 8014570:	4603      	mov	r3, r0
}
 8014572:	4618      	mov	r0, r3
 8014574:	3710      	adds	r7, #16
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}

0801457a <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 801457a:	b480      	push	{r7}
 801457c:	b083      	sub	sp, #12
 801457e:	af00      	add	r7, sp, #0
 8014580:	6078      	str	r0, [r7, #4]
 8014582:	4608      	mov	r0, r1
 8014584:	4611      	mov	r1, r2
 8014586:	461a      	mov	r2, r3
 8014588:	4603      	mov	r3, r0
 801458a:	70fb      	strb	r3, [r7, #3]
 801458c:	460b      	mov	r3, r1
 801458e:	70bb      	strb	r3, [r7, #2]
 8014590:	4613      	mov	r3, r2
 8014592:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2200      	movs	r2, #0
 8014598:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 801459a:	78bb      	ldrb	r3, [r7, #2]
 801459c:	2b0e      	cmp	r3, #14
 801459e:	d808      	bhi.n	80145b2 <phpalI14443p4_Sw_SetProtocol+0x38>
 80145a0:	7d3b      	ldrb	r3, [r7, #20]
 80145a2:	2b0e      	cmp	r3, #14
 80145a4:	d805      	bhi.n	80145b2 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 80145a6:	7e3b      	ldrb	r3, [r7, #24]
 80145a8:	2b0c      	cmp	r3, #12
 80145aa:	d802      	bhi.n	80145b2 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 80145ac:	7f3b      	ldrb	r3, [r7, #28]
 80145ae:	2b0c      	cmp	r3, #12
 80145b0:	d902      	bls.n	80145b8 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80145b2:	f240 6321 	movw	r3, #1569	@ 0x621
 80145b6:	e015      	b.n	80145e4 <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	78fa      	ldrb	r2, [r7, #3]
 80145bc:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	78ba      	ldrb	r2, [r7, #2]
 80145c2:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	787a      	ldrb	r2, [r7, #1]
 80145c8:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	7c3a      	ldrb	r2, [r7, #16]
 80145ce:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	7d3a      	ldrb	r2, [r7, #20]
 80145d4:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	7e3a      	ldrb	r2, [r7, #24]
 80145da:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	7f3a      	ldrb	r2, [r7, #28]
 80145e0:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 80145e2:	2300      	movs	r3, #0
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	370c      	adds	r7, #12
 80145e8:	46bd      	mov	sp, r7
 80145ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ee:	4770      	bx	lr

080145f0 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 80145f0:	b480      	push	{r7}
 80145f2:	b083      	sub	sp, #12
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2201      	movs	r2, #1
 80145fc:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2200      	movs	r2, #0
 8014608:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2200      	movs	r2, #0
 801460e:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2200      	movs	r2, #0
 8014614:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2200      	movs	r2, #0
 801461a:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2204      	movs	r2, #4
 8014620:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2200      	movs	r2, #0
 8014626:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2202      	movs	r2, #2
 801462c:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2202      	movs	r2, #2
 8014632:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 8014634:	2300      	movs	r3, #0
}
 8014636:	4618      	mov	r0, r3
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr
	...

08014644 <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	460b      	mov	r3, r1
 801464e:	807b      	strh	r3, [r7, #2]
 8014650:	4613      	mov	r3, r2
 8014652:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8014654:	887b      	ldrh	r3, [r7, #2]
 8014656:	2b06      	cmp	r3, #6
 8014658:	d876      	bhi.n	8014748 <phpalI14443p4_Sw_SetConfig+0x104>
 801465a:	a201      	add	r2, pc, #4	@ (adr r2, 8014660 <phpalI14443p4_Sw_SetConfig+0x1c>)
 801465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014660:	08014687 	.word	0x08014687
 8014664:	0801469d 	.word	0x0801469d
 8014668:	080146d3 	.word	0x080146d3
 801466c:	080146fb 	.word	0x080146fb
 8014670:	08014711 	.word	0x08014711
 8014674:	0801473f 	.word	0x0801473f
 8014678:	0801467d 	.word	0x0801467d
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 801467c:	883b      	ldrh	r3, [r7, #0]
 801467e:	b2da      	uxtb	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	749a      	strb	r2, [r3, #18]
            break;
 8014684:	e063      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 8014686:	883b      	ldrh	r3, [r7, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d103      	bne.n	8014694 <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2200      	movs	r2, #0
 8014690:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 8014692:	e05c      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2201      	movs	r2, #1
 8014698:	741a      	strb	r2, [r3, #16]
            break;
 801469a:	e058      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 801469c:	883b      	ldrh	r3, [r7, #0]
 801469e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00e      	beq.n	80146c4 <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 80146a6:	883b      	ldrh	r3, [r7, #0]
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	2b0e      	cmp	r3, #14
 80146ac:	d902      	bls.n	80146b4 <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80146ae:	f240 6321 	movw	r3, #1569	@ 0x621
 80146b2:	e04d      	b.n	8014750 <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2201      	movs	r2, #1
 80146b8:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 80146ba:	883b      	ldrh	r3, [r7, #0]
 80146bc:	b2da      	uxtb	r2, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 80146c2:	e044      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2200      	movs	r2, #0
 80146ce:	729a      	strb	r2, [r3, #10]
            break;
 80146d0:	e03d      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 80146d2:	883b      	ldrh	r3, [r7, #0]
 80146d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d007      	beq.n	80146ec <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2201      	movs	r2, #1
 80146e0:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 80146e2:	883b      	ldrh	r3, [r7, #0]
 80146e4:	b2da      	uxtb	r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 80146ea:	e030      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2200      	movs	r2, #0
 80146f0:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2200      	movs	r2, #0
 80146f6:	731a      	strb	r2, [r3, #12]
            break;
 80146f8:	e029      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 80146fa:	883b      	ldrh	r3, [r7, #0]
 80146fc:	2b0e      	cmp	r3, #14
 80146fe:	d902      	bls.n	8014706 <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014700:	f240 6321 	movw	r3, #1569	@ 0x621
 8014704:	e024      	b.n	8014750 <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 8014706:	883b      	ldrh	r3, [r7, #0]
 8014708:	b2da      	uxtb	r2, r3
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	735a      	strb	r2, [r3, #13]
            break;
 801470e:	e01e      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8014710:	883b      	ldrh	r3, [r7, #0]
 8014712:	0a1b      	lsrs	r3, r3, #8
 8014714:	b29b      	uxth	r3, r3
 8014716:	2b0c      	cmp	r3, #12
 8014718:	d803      	bhi.n	8014722 <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 801471a:	883b      	ldrh	r3, [r7, #0]
 801471c:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 801471e:	2b0c      	cmp	r3, #12
 8014720:	d902      	bls.n	8014728 <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014722:	f240 6321 	movw	r3, #1569	@ 0x621
 8014726:	e013      	b.n	8014750 <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 8014728:	883b      	ldrh	r3, [r7, #0]
 801472a:	0a1b      	lsrs	r3, r3, #8
 801472c:	b29b      	uxth	r3, r3
 801472e:	b2da      	uxtb	r2, r3
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 8014734:	883b      	ldrh	r3, [r7, #0]
 8014736:	b2da      	uxtb	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	73da      	strb	r2, [r3, #15]
            break;
 801473c:	e007      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 801473e:	883b      	ldrh	r3, [r7, #0]
 8014740:	b2da      	uxtb	r2, r3
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	745a      	strb	r2, [r3, #17]
            break;
 8014746:	e002      	b.n	801474e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8014748:	f240 6323 	movw	r3, #1571	@ 0x623
 801474c:	e000      	b.n	8014750 <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 801474e:	2300      	movs	r3, #0
}
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 801475c:	b480      	push	{r7}
 801475e:	b085      	sub	sp, #20
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	460b      	mov	r3, r1
 8014766:	607a      	str	r2, [r7, #4]
 8014768:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 801476a:	897b      	ldrh	r3, [r7, #10]
 801476c:	2b14      	cmp	r3, #20
 801476e:	d002      	beq.n	8014776 <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 8014770:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8014774:	e032      	b.n	80147dc <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d101      	bne.n	8014780 <phpalI14443p4a_Sw_Init+0x24>
 801477c:	2321      	movs	r3, #33	@ 0x21
 801477e:	e02d      	b.n	80147dc <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d101      	bne.n	801478a <phpalI14443p4a_Sw_Init+0x2e>
 8014786:	2321      	movs	r3, #33	@ 0x21
 8014788:	e028      	b.n	80147dc <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f240 5201 	movw	r2, #1281	@ 0x501
 8014790:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2200      	movs	r2, #0
 801479c:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2200      	movs	r2, #0
 80147a2:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2200      	movs	r2, #0
 80147a8:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2200      	movs	r2, #0
 80147ae:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2204      	movs	r2, #4
 80147b4:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2202      	movs	r2, #2
 80147ba:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2200      	movs	r2, #0
 80147c0:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2200      	movs	r2, #0
 80147c6:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2200      	movs	r2, #0
 80147cc:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2202      	movs	r2, #2
 80147d2:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2201      	movs	r2, #1
 80147d8:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 80147da:	2300      	movs	r3, #0
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3714      	adds	r7, #20
 80147e0:	46bd      	mov	sp, r7
 80147e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e6:	4770      	bx	lr

080147e8 <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	460b      	mov	r3, r1
 80147f2:	807b      	strh	r3, [r7, #2]
 80147f4:	4613      	mov	r3, r2
 80147f6:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 80147f8:	887b      	ldrh	r3, [r7, #2]
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d002      	beq.n	8014804 <phpalI14443p4a_Sw_SetConfig+0x1c>
 80147fe:	2b02      	cmp	r3, #2
 8014800:	d005      	beq.n	801480e <phpalI14443p4a_Sw_SetConfig+0x26>
 8014802:	e014      	b.n	801482e <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 8014804:	883b      	ldrh	r3, [r7, #0]
 8014806:	b2da      	uxtb	r2, r3
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	745a      	strb	r2, [r3, #17]
      break;
 801480c:	e012      	b.n	8014834 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 801480e:	883b      	ldrh	r3, [r7, #0]
 8014810:	b2db      	uxtb	r3, r3
 8014812:	2b00      	cmp	r3, #0
 8014814:	d006      	beq.n	8014824 <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 8014816:	883b      	ldrh	r3, [r7, #0]
 8014818:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 801481a:	2b01      	cmp	r3, #1
 801481c:	d002      	beq.n	8014824 <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801481e:	f240 5321 	movw	r3, #1313	@ 0x521
 8014822:	e008      	b.n	8014836 <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 8014824:	883b      	ldrh	r3, [r7, #0]
 8014826:	b2da      	uxtb	r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	749a      	strb	r2, [r3, #18]
      break;
 801482c:	e002      	b.n	8014834 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 801482e:	f240 5323 	movw	r3, #1315	@ 0x523
 8014832:	e000      	b.n	8014836 <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 8014834:	2300      	movs	r3, #0
}
 8014836:	4618      	mov	r0, r3
 8014838:	370c      	adds	r7, #12
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr
	...

08014844 <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 8014844:	b480      	push	{r7}
 8014846:	b085      	sub	sp, #20
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	460b      	mov	r3, r1
 801484e:	607a      	str	r2, [r7, #4]
 8014850:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8014852:	897b      	ldrh	r3, [r7, #10]
 8014854:	3b01      	subs	r3, #1
 8014856:	2b03      	cmp	r3, #3
 8014858:	d822      	bhi.n	80148a0 <phpalI14443p4a_Sw_GetConfig+0x5c>
 801485a:	a201      	add	r2, pc, #4	@ (adr r2, 8014860 <phpalI14443p4a_Sw_GetConfig+0x1c>)
 801485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014860:	08014871 	.word	0x08014871
 8014864:	0801487d 	.word	0x0801487d
 8014868:	08014889 	.word	0x08014889
 801486c:	08014895 	.word	0x08014895
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	7c5b      	ldrb	r3, [r3, #17]
 8014874:	461a      	mov	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	801a      	strh	r2, [r3, #0]
        break;
 801487a:	e014      	b.n	80148a6 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	7c9b      	ldrb	r3, [r3, #18]
 8014880:	461a      	mov	r2, r3
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	801a      	strh	r2, [r3, #0]
        break;
 8014886:	e00e      	b.n	80148a6 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	7bdb      	ldrb	r3, [r3, #15]
 801488c:	461a      	mov	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	801a      	strh	r2, [r3, #0]
        break;
 8014892:	e008      	b.n	80148a6 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	7c1b      	ldrb	r3, [r3, #16]
 8014898:	461a      	mov	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	801a      	strh	r2, [r3, #0]
        break;
 801489e:	e002      	b.n	80148a6 <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80148a0:	f240 5323 	movw	r3, #1315	@ 0x523
 80148a4:	e000      	b.n	80148a8 <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 80148a6:	2300      	movs	r3, #0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3714      	adds	r7, #20
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr
 80148b4:	0000      	movs	r0, r0
	...

080148b8 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 80148b8:	b5b0      	push	{r4, r5, r7, lr}
 80148ba:	b08e      	sub	sp, #56	@ 0x38
 80148bc:	af02      	add	r7, sp, #8
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	607b      	str	r3, [r7, #4]
 80148c2:	460b      	mov	r3, r1
 80148c4:	72fb      	strb	r3, [r7, #11]
 80148c6:	4613      	mov	r3, r2
 80148c8:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 80148ca:	2300      	movs	r3, #0
 80148cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80148ce:	2300      	movs	r3, #0
 80148d0:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80148d2:	2300      	movs	r3, #0
 80148d4:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	7c5b      	ldrb	r3, [r3, #17]
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d012      	beq.n	8014904 <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 80148de:	7afb      	ldrb	r3, [r7, #11]
 80148e0:	2b0c      	cmp	r3, #12
 80148e2:	d802      	bhi.n	80148ea <phpalI14443p4a_Sw_Rats+0x32>
 80148e4:	7abb      	ldrb	r3, [r7, #10]
 80148e6:	2b0e      	cmp	r3, #14
 80148e8:	d902      	bls.n	80148f0 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80148ea:	f240 5321 	movw	r3, #1313	@ 0x521
 80148ee:	e2c5      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 80148f0:	7afb      	ldrb	r3, [r7, #11]
 80148f2:	2b07      	cmp	r3, #7
 80148f4:	d80f      	bhi.n	8014916 <phpalI14443p4a_Sw_Rats+0x5e>
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	7c5b      	ldrb	r3, [r3, #17]
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d10b      	bne.n	8014916 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 80148fe:	f240 5321 	movw	r3, #1313	@ 0x521
 8014902:	e2bb      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 8014904:	7afb      	ldrb	r3, [r7, #11]
 8014906:	2b08      	cmp	r3, #8
 8014908:	d802      	bhi.n	8014910 <phpalI14443p4a_Sw_Rats+0x58>
 801490a:	7abb      	ldrb	r3, [r7, #10]
 801490c:	2b0e      	cmp	r3, #14
 801490e:	d902      	bls.n	8014916 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014910:	f240 5321 	movw	r3, #1313	@ 0x521
 8014914:	e2b2      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 801491e:	210d      	movs	r1, #13
 8014920:	4618      	mov	r0, r3
 8014922:	f7f8 fcd1 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014926:	4603      	mov	r3, r0
 8014928:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801492a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801492c:	2b00      	cmp	r3, #0
 801492e:	d001      	beq.n	8014934 <phpalI14443p4a_Sw_Rats+0x7c>
 8014930:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014932:	e2a3      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 8014934:	23e0      	movs	r3, #224	@ 0xe0
 8014936:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8014938:	7afb      	ldrb	r3, [r7, #11]
 801493a:	011b      	lsls	r3, r3, #4
 801493c:	b2da      	uxtb	r2, r3
 801493e:	7abb      	ldrb	r3, [r7, #10]
 8014940:	f003 030f 	and.w	r3, r3, #15
 8014944:	b2db      	uxtb	r3, r3
 8014946:	4313      	orrs	r3, r2
 8014948:	b2db      	uxtb	r3, r3
 801494a:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	6858      	ldr	r0, [r3, #4]
 8014950:	f107 0218 	add.w	r2, r7, #24
 8014954:	f107 0312 	add.w	r3, r7, #18
 8014958:	9301      	str	r3, [sp, #4]
 801495a:	f107 0314 	add.w	r3, r7, #20
 801495e:	9300      	str	r3, [sp, #0]
 8014960:	2302      	movs	r3, #2
 8014962:	2100      	movs	r1, #0
 8014964:	f7f8 f930 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8014968:	4603      	mov	r3, r0
 801496a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	7c9b      	ldrb	r3, [r3, #18]
 8014970:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8014974:	e031      	b.n	80149da <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	7c5b      	ldrb	r3, [r3, #17]
 801497a:	2b01      	cmp	r3, #1
 801497c:	d118      	bne.n	80149b0 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 801497e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014980:	b2db      	uxtb	r3, r3
 8014982:	2b01      	cmp	r3, #1
 8014984:	d003      	beq.n	801498e <phpalI14443p4a_Sw_Rats+0xd6>
 8014986:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014988:	b2db      	uxtb	r3, r3
 801498a:	2b11      	cmp	r3, #17
 801498c:	d10e      	bne.n	80149ac <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014996:	2100      	movs	r1, #0
 8014998:	4618      	mov	r0, r3
 801499a:	f7f8 fc11 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 801499e:	4603      	mov	r3, r0
 80149a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80149a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d003      	beq.n	80149b0 <phpalI14443p4a_Sw_Rats+0xf8>
 80149a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149aa:	e267      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 80149ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149ae:	e265      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	6858      	ldr	r0, [r3, #4]
 80149b4:	f107 0218 	add.w	r2, r7, #24
 80149b8:	f107 0312 	add.w	r3, r7, #18
 80149bc:	9301      	str	r3, [sp, #4]
 80149be:	f107 0314 	add.w	r3, r7, #20
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	2302      	movs	r3, #2
 80149c6:	2100      	movs	r1, #0
 80149c8:	f7f8 f8fe 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 80149cc:	4603      	mov	r3, r0
 80149ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 80149d0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80149d4:	3b01      	subs	r3, #1
 80149d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 80149da:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d003      	beq.n	80149ea <phpalI14443p4a_Sw_Rats+0x132>
 80149e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d1c5      	bne.n	8014976 <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80149ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	f040 81c5 	bne.w	8014d7e <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 80149f4:	8a7b      	ldrh	r3, [r7, #18]
 80149f6:	b2da      	uxtb	r2, r3
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d102      	bne.n	8014a06 <phpalI14443p4a_Sw_Rats+0x14e>
 8014a00:	8a7b      	ldrh	r3, [r7, #18]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d102      	bne.n	8014a0c <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014a06:	f240 5306 	movw	r3, #1286	@ 0x506
 8014a0a:	e237      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	8a7a      	ldrh	r2, [r7, #18]
 8014a10:	4619      	mov	r1, r3
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f008 fbd7 	bl	801d1c6 <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	7c5b      	ldrb	r3, [r3, #17]
 8014a1c:	2b03      	cmp	r3, #3
 8014a1e:	d006      	beq.n	8014a2e <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2200      	movs	r2, #0
 8014a24:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	729a      	strb	r2, [r3, #10]
 8014a2c:	e005      	b.n	8014a3a <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2201      	movs	r2, #1
 8014a32:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	7aba      	ldrb	r2, [r7, #10]
 8014a38:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2200      	movs	r2, #0
 8014a44:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2204      	movs	r2, #4
 8014a4a:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	7afa      	ldrb	r2, [r7, #11]
 8014a50:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2202      	movs	r2, #2
 8014a56:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2200      	movs	r2, #0
 8014a62:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8014a64:	2300      	movs	r3, #0
 8014a66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 8014a70:	8a7b      	ldrh	r3, [r7, #18]
 8014a72:	2b01      	cmp	r3, #1
 8014a74:	f240 80ba 	bls.w	8014bec <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 8014a78:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014a7c:	687a      	ldr	r2, [r7, #4]
 8014a7e:	4413      	add	r3, r2
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	f003 030f 	and.w	r3, r3, #15
 8014a86:	b2da      	uxtb	r2, r3
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	7c5b      	ldrb	r3, [r3, #17]
 8014a90:	2b02      	cmp	r3, #2
 8014a92:	d007      	beq.n	8014aa4 <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	7b5b      	ldrb	r3, [r3, #13]
 8014a98:	2b0c      	cmp	r3, #12
 8014a9a:	d90a      	bls.n	8014ab2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	220c      	movs	r2, #12
 8014aa0:	735a      	strb	r2, [r3, #13]
 8014aa2:	e006      	b.n	8014ab2 <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	7b5b      	ldrb	r3, [r3, #13]
 8014aa8:	2b08      	cmp	r3, #8
 8014aaa:	d902      	bls.n	8014ab2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2208      	movs	r2, #8
 8014ab0:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 8014ab2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	f003 0310 	and.w	r3, r3, #16
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d021      	beq.n	8014b0e <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014aca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	8a7b      	ldrh	r3, [r7, #18]
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d302      	bcc.n	8014adc <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014ad6:	f240 5306 	movw	r3, #1286	@ 0x506
 8014ada:	e1cf      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 8014adc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014ae0:	687a      	ldr	r2, [r7, #4]
 8014ae2:	4413      	add	r3, r2
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	f003 0308 	and.w	r3, r3, #8
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d003      	beq.n	8014af6 <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2200      	movs	r2, #0
 8014af2:	72da      	strb	r2, [r3, #11]
 8014af4:	e006      	b.n	8014b04 <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 8014af6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	4413      	add	r3, r2
 8014afe:	781a      	ldrb	r2, [r3, #0]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 8014b04:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b08:	3301      	adds	r3, #1
 8014b0a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	3301      	adds	r3, #1
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	f003 0320 	and.w	r3, r3, #32
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d02d      	beq.n	8014b78 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014b1c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	8a7b      	ldrh	r3, [r7, #18]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d302      	bcc.n	8014b2e <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014b28:	f240 5306 	movw	r3, #1286	@ 0x506
 8014b2c:	e1a6      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 8014b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	4413      	add	r3, r2
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	f003 030f 	and.w	r3, r3, #15
 8014b3c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8014b40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014b44:	2b0f      	cmp	r3, #15
 8014b46:	d102      	bne.n	8014b4e <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 8014b4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	4413      	add	r3, r2
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	091b      	lsrs	r3, r3, #4
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	7b1b      	ldrb	r3, [r3, #12]
 8014b64:	2b0f      	cmp	r3, #15
 8014b66:	d102      	bne.n	8014b6e <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2204      	movs	r2, #4
 8014b6c:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 8014b6e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b72:	3301      	adds	r3, #1
 8014b74:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d032      	beq.n	8014bec <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8014b86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	8a7b      	ldrh	r3, [r7, #18]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d302      	bcc.n	8014b98 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014b92:	f240 5306 	movw	r3, #1286	@ 0x506
 8014b96:	e171      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	7c5b      	ldrb	r3, [r3, #17]
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d025      	beq.n	8014bec <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	7c5b      	ldrb	r3, [r3, #17]
 8014ba4:	2b03      	cmp	r3, #3
 8014ba6:	d10b      	bne.n	8014bc0 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 8014ba8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	4413      	add	r3, r2
 8014bb0:	781b      	ldrb	r3, [r3, #0]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d002      	beq.n	8014bc0 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 8014bc0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	f003 0302 	and.w	r3, r3, #2
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d106      	bne.n	8014be0 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	729a      	strb	r2, [r3, #10]
 8014bde:	e005      	b.n	8014bec <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2201      	movs	r2, #1
 8014be4:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	7aba      	ldrb	r2, [r7, #10]
 8014bea:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 8014bec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7eb fc84 	bl	8000504 <__aeabi_ui2d>
 8014bfc:	a3a7      	add	r3, pc, #668	@ (adr r3, 8014e9c <phpalI14443p4a_Sw_Rats+0x5e4>)
 8014bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c02:	f7eb fcf9 	bl	80005f8 <__aeabi_dmul>
 8014c06:	4602      	mov	r2, r0
 8014c08:	460b      	mov	r3, r1
 8014c0a:	4610      	mov	r0, r2
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	f7eb ffcb 	bl	8000ba8 <__aeabi_d2f>
 8014c12:	4603      	mov	r3, r0
 8014c14:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	7c5b      	ldrb	r3, [r3, #17]
 8014c1a:	2b03      	cmp	r3, #3
 8014c1c:	d01f      	beq.n	8014c5e <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 8014c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c20:	f7eb fc92 	bl	8000548 <__aeabi_f2d>
 8014c24:	4604      	mov	r4, r0
 8014c26:	460d      	mov	r5, r1
 8014c28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7eb fc66 	bl	8000504 <__aeabi_ui2d>
 8014c38:	a39a      	add	r3, pc, #616	@ (adr r3, 8014ea4 <phpalI14443p4a_Sw_Rats+0x5ec>)
 8014c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3e:	f7eb fcdb 	bl	80005f8 <__aeabi_dmul>
 8014c42:	4602      	mov	r2, r0
 8014c44:	460b      	mov	r3, r1
 8014c46:	4620      	mov	r0, r4
 8014c48:	4629      	mov	r1, r5
 8014c4a:	f7eb fb1f 	bl	800028c <__adddf3>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	460b      	mov	r3, r1
 8014c52:	4610      	mov	r0, r2
 8014c54:	4619      	mov	r1, r3
 8014c56:	f7eb ffa7 	bl	8000ba8 <__aeabi_d2f>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 8014c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c66:	ee17 3a90 	vmov	r3, s15
 8014c6a:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 8014c6c:	6a3b      	ldr	r3, [r7, #32]
 8014c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c72:	d314      	bcc.n	8014c9e <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	6858      	ldr	r0, [r3, #4]
 8014c78:	6a3b      	ldr	r3, [r7, #32]
 8014c7a:	4a83      	ldr	r2, [pc, #524]	@ (8014e88 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8014c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8014c80:	099b      	lsrs	r3, r3, #6
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	3301      	adds	r3, #1
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	461a      	mov	r2, r3
 8014c8a:	2101      	movs	r1, #1
 8014c8c:	f7f8 fa98 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8014c90:	4603      	mov	r3, r0
 8014c92:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014c94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d010      	beq.n	8014cbc <phpalI14443p4a_Sw_Rats+0x404>
 8014c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014c9c:	e0ee      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	6a3a      	ldr	r2, [r7, #32]
 8014ca4:	b292      	uxth	r2, r2
 8014ca6:	2100      	movs	r1, #0
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7f8 fa89 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014cb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d001      	beq.n	8014cbc <phpalI14443p4a_Sw_Rats+0x404>
 8014cb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014cba:	e0df      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 8014cbc:	4b73      	ldr	r3, [pc, #460]	@ (8014e8c <phpalI14443p4a_Sw_Rats+0x5d4>)
 8014cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	7b1b      	ldrb	r3, [r3, #12]
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	4093      	lsls	r3, r2
 8014cca:	ee07 3a90 	vmov	s15, r3
 8014cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cd2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8014cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cda:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	7c5b      	ldrb	r3, [r3, #17]
 8014ce2:	2b03      	cmp	r3, #3
 8014ce4:	d108      	bne.n	8014cf8 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 8014ce6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014cea:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8014e90 <phpalI14443p4a_Sw_Rats+0x5d8>
 8014cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014cf2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8014cf6:	e013      	b.n	8014d20 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 8014cf8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014cfc:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8014e94 <phpalI14443p4a_Sw_Rats+0x5dc>
 8014d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d04:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	7c5b      	ldrb	r3, [r3, #17]
 8014d0c:	2b01      	cmp	r3, #1
 8014d0e:	d107      	bne.n	8014d20 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8014d10:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014d14:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8014e98 <phpalI14443p4a_Sw_Rats+0x5e0>
 8014d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d1c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8014d20:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8014d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d28:	ee17 3a90 	vmov	r3, s15
 8014d2c:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d34:	d314      	bcc.n	8014d60 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	6858      	ldr	r0, [r3, #4]
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	4a52      	ldr	r2, [pc, #328]	@ (8014e88 <phpalI14443p4a_Sw_Rats+0x5d0>)
 8014d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8014d42:	099b      	lsrs	r3, r3, #6
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	3301      	adds	r3, #1
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	210e      	movs	r1, #14
 8014d4e:	f7f8 fabb 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014d52:	4603      	mov	r3, r0
 8014d54:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014d56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d07f      	beq.n	8014e5c <phpalI14443p4a_Sw_Rats+0x5a4>
 8014d5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d5e:	e08d      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	69fa      	ldr	r2, [r7, #28]
 8014d66:	b292      	uxth	r2, r2
 8014d68:	210d      	movs	r1, #13
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7f8 faac 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014d70:	4603      	mov	r3, r0
 8014d72:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d070      	beq.n	8014e5c <phpalI14443p4a_Sw_Rats+0x5a4>
 8014d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d7c:	e07e      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	7c5b      	ldrb	r3, [r3, #17]
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	d101      	bne.n	8014d8a <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 8014d86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d88:	e078      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 8014d8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d00d      	beq.n	8014dae <phpalI14443p4a_Sw_Rats+0x4f6>
 8014d92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	2b02      	cmp	r3, #2
 8014d98:	d009      	beq.n	8014dae <phpalI14443p4a_Sw_Rats+0x4f6>
 8014d9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	2b05      	cmp	r3, #5
 8014da0:	d005      	beq.n	8014dae <phpalI14443p4a_Sw_Rats+0x4f6>
 8014da2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	2b03      	cmp	r3, #3
 8014da8:	d001      	beq.n	8014dae <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 8014daa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014dac:	e066      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8014dae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	2b01      	cmp	r3, #1
 8014db4:	d00e      	beq.n	8014dd4 <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f8 f9fd 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d001      	beq.n	8014dd4 <phpalI14443p4a_Sw_Rats+0x51c>
 8014dd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014dd2:	e053      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 8014dd4:	23c2      	movs	r3, #194	@ 0xc2
 8014dd6:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 8014dd8:	2301      	movs	r3, #1
 8014dda:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	6858      	ldr	r0, [r3, #4]
 8014de0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8014de2:	f107 0218 	add.w	r2, r7, #24
 8014de6:	f107 0312 	add.w	r3, r7, #18
 8014dea:	9301      	str	r3, [sp, #4]
 8014dec:	f107 0314 	add.w	r3, r7, #20
 8014df0:	9300      	str	r3, [sp, #0]
 8014df2:	460b      	mov	r3, r1
 8014df4:	2100      	movs	r1, #0
 8014df6:	f7f7 fee7 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 8014dfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d107      	bne.n	8014e16 <phpalI14443p4a_Sw_Rats+0x55e>
 8014e06:	8a7b      	ldrh	r3, [r7, #18]
 8014e08:	2b01      	cmp	r3, #1
 8014e0a:	d104      	bne.n	8014e16 <phpalI14443p4a_Sw_Rats+0x55e>
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	781a      	ldrb	r2, [r3, #0]
 8014e10:	7e3b      	ldrb	r3, [r7, #24]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d022      	beq.n	8014e5c <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	685b      	ldr	r3, [r3, #4]
 8014e1a:	f240 424c 	movw	r2, #1100	@ 0x44c
 8014e1e:	210d      	movs	r1, #13
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7f8 fa51 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014e26:	4603      	mov	r3, r0
 8014e28:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014e2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d001      	beq.n	8014e34 <phpalI14443p4a_Sw_Rats+0x57c>
 8014e30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e32:	e023      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 8014e34:	2350      	movs	r3, #80	@ 0x50
 8014e36:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	6858      	ldr	r0, [r3, #4]
 8014e40:	f107 0218 	add.w	r2, r7, #24
 8014e44:	f107 0312 	add.w	r3, r7, #18
 8014e48:	9301      	str	r3, [sp, #4]
 8014e4a:	f107 0314 	add.w	r3, r7, #20
 8014e4e:	9300      	str	r3, [sp, #0]
 8014e50:	2302      	movs	r3, #2
 8014e52:	2100      	movs	r1, #0
 8014e54:	f7f7 feb8 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 8014e5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d00b      	beq.n	8014e7a <phpalI14443p4a_Sw_Rats+0x5c2>
 8014e62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d106      	bne.n	8014e7a <phpalI14443p4a_Sw_Rats+0x5c2>
 8014e6c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	e000      	b.n	8014e7c <phpalI14443p4a_Sw_Rats+0x5c4>
 8014e7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3730      	adds	r7, #48	@ 0x30
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bdb0      	pop	{r4, r5, r7, pc}
 8014e84:	f3af 8000 	nop.w
 8014e88:	10624dd3 	.word	0x10624dd3
 8014e8c:	4397084f 	.word	0x4397084f
 8014e90:	42700000 	.word	0x42700000
 8014e94:	45638000 	.word	0x45638000
 8014e98:	447a0000 	.word	0x447a0000
 8014e9c:	d12e109d 	.word	0xd12e109d
 8014ea0:	4072e109 	.word	0x4072e109
 8014ea4:	b9c518eb 	.word	0xb9c518eb
 8014ea8:	403c518e 	.word	0x403c518e

08014eac <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b08a      	sub	sp, #40	@ 0x28
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	70fb      	strb	r3, [r7, #3]
 8014eb8:	4613      	mov	r3, r2
 8014eba:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 8014ec4:	78fb      	ldrb	r3, [r7, #3]
 8014ec6:	2b03      	cmp	r3, #3
 8014ec8:	d816      	bhi.n	8014ef8 <phpalI14443p4a_Sw_Pps+0x4c>
 8014eca:	a201      	add	r2, pc, #4	@ (adr r2, 8014ed0 <phpalI14443p4a_Sw_Pps+0x24>)
 8014ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ed0:	08014ee1 	.word	0x08014ee1
 8014ed4:	08014ee7 	.word	0x08014ee7
 8014ed8:	08014eed 	.word	0x08014eed
 8014edc:	08014ef3 	.word	0x08014ef3
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	83fb      	strh	r3, [r7, #30]
        break;
 8014ee4:	e00b      	b.n	8014efe <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	83fb      	strh	r3, [r7, #30]
        break;
 8014eea:	e008      	b.n	8014efe <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8014eec:	2302      	movs	r3, #2
 8014eee:	83fb      	strh	r3, [r7, #30]
        break;
 8014ef0:	e005      	b.n	8014efe <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8014ef2:	2303      	movs	r3, #3
 8014ef4:	83fb      	strh	r3, [r7, #30]
        break;
 8014ef6:	e002      	b.n	8014efe <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014ef8:	f240 5321 	movw	r3, #1313	@ 0x521
 8014efc:	e080      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 8014efe:	78bb      	ldrb	r3, [r7, #2]
 8014f00:	2b03      	cmp	r3, #3
 8014f02:	d817      	bhi.n	8014f34 <phpalI14443p4a_Sw_Pps+0x88>
 8014f04:	a201      	add	r2, pc, #4	@ (adr r2, 8014f0c <phpalI14443p4a_Sw_Pps+0x60>)
 8014f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f0a:	bf00      	nop
 8014f0c:	08014f1d 	.word	0x08014f1d
 8014f10:	08014f23 	.word	0x08014f23
 8014f14:	08014f29 	.word	0x08014f29
 8014f18:	08014f2f 	.word	0x08014f2f
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	83bb      	strh	r3, [r7, #28]
        break;
 8014f20:	e00b      	b.n	8014f3a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8014f22:	2301      	movs	r3, #1
 8014f24:	83bb      	strh	r3, [r7, #28]
        break;
 8014f26:	e008      	b.n	8014f3a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8014f28:	2302      	movs	r3, #2
 8014f2a:	83bb      	strh	r3, [r7, #28]
        break;
 8014f2c:	e005      	b.n	8014f3a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 8014f2e:	2303      	movs	r3, #3
 8014f30:	83bb      	strh	r3, [r7, #28]
        break;
 8014f32:	e002      	b.n	8014f3a <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8014f34:	f240 5321 	movw	r3, #1313	@ 0x521
 8014f38:	e062      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	7a9b      	ldrb	r3, [r3, #10]
 8014f3e:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 8014f46:	2311      	movs	r3, #17
 8014f48:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 8014f4a:	78bb      	ldrb	r3, [r7, #2]
 8014f4c:	009b      	lsls	r3, r3, #2
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	f003 030c 	and.w	r3, r3, #12
 8014f54:	b2da      	uxtb	r2, r3
 8014f56:	78fb      	ldrb	r3, [r7, #3]
 8014f58:	f003 0303 	and.w	r3, r3, #3
 8014f5c:	b2db      	uxtb	r3, r3
 8014f5e:	4313      	orrs	r3, r2
 8014f60:	b2db      	uxtb	r3, r3
 8014f62:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6858      	ldr	r0, [r3, #4]
 8014f68:	f107 0214 	add.w	r2, r7, #20
 8014f6c:	f107 030e 	add.w	r3, r7, #14
 8014f70:	9301      	str	r3, [sp, #4]
 8014f72:	f107 0310 	add.w	r3, r7, #16
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	2303      	movs	r3, #3
 8014f7a:	2100      	movs	r1, #0
 8014f7c:	f7f7 fe24 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8014f80:	4603      	mov	r3, r0
 8014f82:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8014f84:	8b7b      	ldrh	r3, [r7, #26]
 8014f86:	b2db      	uxtb	r3, r3
 8014f88:	2b73      	cmp	r3, #115	@ 0x73
 8014f8a:	d102      	bne.n	8014f92 <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014f8c:	f240 5306 	movw	r3, #1286	@ 0x506
 8014f90:	e036      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 8014f92:	8b7b      	ldrh	r3, [r7, #26]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d001      	beq.n	8014f9c <phpalI14443p4a_Sw_Pps+0xf0>
 8014f98:	8b7b      	ldrh	r3, [r7, #26]
 8014f9a:	e031      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 8014f9c:	89fb      	ldrh	r3, [r7, #14]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d108      	bne.n	8014fb4 <phpalI14443p4a_Sw_Pps+0x108>
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	781a      	ldrb	r2, [r3, #0]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	7a9b      	ldrb	r3, [r3, #10]
 8014faa:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d002      	beq.n	8014fba <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8014fb4:	f240 5306 	movw	r3, #1286	@ 0x506
 8014fb8:	e022      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	78fa      	ldrb	r2, [r7, #3]
 8014fbe:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	78ba      	ldrb	r2, [r7, #2]
 8014fc4:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	685b      	ldr	r3, [r3, #4]
 8014fca:	8bfa      	ldrh	r2, [r7, #30]
 8014fcc:	2109      	movs	r1, #9
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7f8 f97a 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	833b      	strh	r3, [r7, #24]
 8014fd8:	8b3b      	ldrh	r3, [r7, #24]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d001      	beq.n	8014fe2 <phpalI14443p4a_Sw_Pps+0x136>
 8014fde:	8b3b      	ldrh	r3, [r7, #24]
 8014fe0:	e00e      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	8bba      	ldrh	r2, [r7, #28]
 8014fe8:	210a      	movs	r1, #10
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7f8 f96c 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	833b      	strh	r3, [r7, #24]
 8014ff4:	8b3b      	ldrh	r3, [r7, #24]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d001      	beq.n	8014ffe <phpalI14443p4a_Sw_Pps+0x152>
 8014ffa:	8b3b      	ldrh	r3, [r7, #24]
 8014ffc:	e000      	b.n	8015000 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 8014ffe:	2300      	movs	r3, #0
}
 8015000:	4618      	mov	r0, r3
 8015002:	3720      	adds	r7, #32
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	4608      	mov	r0, r1
 8015012:	4611      	mov	r1, r2
 8015014:	461a      	mov	r2, r3
 8015016:	4603      	mov	r3, r0
 8015018:	70fb      	strb	r3, [r7, #3]
 801501a:	460b      	mov	r3, r1
 801501c:	70bb      	strb	r3, [r7, #2]
 801501e:	4613      	mov	r3, r2
 8015020:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 8015022:	787b      	ldrb	r3, [r7, #1]
 8015024:	2b03      	cmp	r3, #3
 8015026:	d902      	bls.n	801502e <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015028:	f240 5321 	movw	r3, #1313	@ 0x521
 801502c:	e0a0      	b.n	8015170 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 801502e:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8015030:	7e3b      	ldrb	r3, [r7, #24]
 8015032:	2b03      	cmp	r3, #3
 8015034:	d902      	bls.n	801503c <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015036:	f240 5321 	movw	r3, #1313	@ 0x521
 801503a:	e099      	b.n	8015170 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 801503c:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 801503e:	78ba      	ldrb	r2, [r7, #2]
 8015040:	78f9      	ldrb	r1, [r7, #3]
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7ff fc37 	bl	80148b8 <phpalI14443p4a_Sw_Rats>
 801504a:	4603      	mov	r3, r0
 801504c:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801504e:	89fb      	ldrh	r3, [r7, #14]
 8015050:	b2db      	uxtb	r3, r3
 8015052:	2b00      	cmp	r3, #0
 8015054:	d17c      	bne.n	8015150 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8015056:	787b      	ldrb	r3, [r7, #1]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d102      	bne.n	8015062 <phpalI14443p4a_Sw_ActivateCard+0x5a>
 801505c:	7e3b      	ldrb	r3, [r7, #24]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d076      	beq.n	8015150 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8015066:	2b00      	cmp	r3, #0
 8015068:	d072      	beq.n	8015150 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	7adb      	ldrb	r3, [r3, #11]
 801506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015072:	2b00      	cmp	r3, #0
 8015074:	d002      	beq.n	801507c <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 8015076:	2303      	movs	r3, #3
 8015078:	737b      	strb	r3, [r7, #13]
 801507a:	e013      	b.n	80150a4 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	7adb      	ldrb	r3, [r3, #11]
 8015080:	f003 0320 	and.w	r3, r3, #32
 8015084:	2b00      	cmp	r3, #0
 8015086:	d002      	beq.n	801508e <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 8015088:	2302      	movs	r3, #2
 801508a:	737b      	strb	r3, [r7, #13]
 801508c:	e00a      	b.n	80150a4 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	7adb      	ldrb	r3, [r3, #11]
 8015092:	f003 0310 	and.w	r3, r3, #16
 8015096:	2b00      	cmp	r3, #0
 8015098:	d002      	beq.n	80150a0 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 801509a:	2301      	movs	r3, #1
 801509c:	737b      	strb	r3, [r7, #13]
 801509e:	e001      	b.n	80150a4 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 80150a0:	2300      	movs	r3, #0
 80150a2:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	7adb      	ldrb	r3, [r3, #11]
 80150a8:	f003 0304 	and.w	r3, r3, #4
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d002      	beq.n	80150b6 <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 80150b0:	2303      	movs	r3, #3
 80150b2:	733b      	strb	r3, [r7, #12]
 80150b4:	e013      	b.n	80150de <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	7adb      	ldrb	r3, [r3, #11]
 80150ba:	f003 0302 	and.w	r3, r3, #2
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d002      	beq.n	80150c8 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 80150c2:	2302      	movs	r3, #2
 80150c4:	733b      	strb	r3, [r7, #12]
 80150c6:	e00a      	b.n	80150de <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	7adb      	ldrb	r3, [r3, #11]
 80150cc:	f003 0301 	and.w	r3, r3, #1
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d002      	beq.n	80150da <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 80150d4:	2301      	movs	r3, #1
 80150d6:	733b      	strb	r3, [r7, #12]
 80150d8:	e001      	b.n	80150de <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 80150da:	2300      	movs	r3, #0
 80150dc:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 80150de:	7e3a      	ldrb	r2, [r7, #24]
 80150e0:	7b7b      	ldrb	r3, [r7, #13]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d005      	beq.n	80150f2 <phpalI14443p4a_Sw_ActivateCard+0xea>
 80150e6:	7e3a      	ldrb	r2, [r7, #24]
 80150e8:	7b7b      	ldrb	r3, [r7, #13]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d901      	bls.n	80150f2 <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 80150ee:	7b7b      	ldrb	r3, [r7, #13]
 80150f0:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 80150f2:	787a      	ldrb	r2, [r7, #1]
 80150f4:	7b3b      	ldrb	r3, [r7, #12]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d005      	beq.n	8015106 <phpalI14443p4a_Sw_ActivateCard+0xfe>
 80150fa:	787a      	ldrb	r2, [r7, #1]
 80150fc:	7b3b      	ldrb	r3, [r7, #12]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d901      	bls.n	8015106 <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 8015102:	7b3b      	ldrb	r3, [r7, #12]
 8015104:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	7adb      	ldrb	r3, [r3, #11]
 801510a:	b25b      	sxtb	r3, r3
 801510c:	2b00      	cmp	r3, #0
 801510e:	da0c      	bge.n	801512a <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8015110:	7e3a      	ldrb	r2, [r7, #24]
 8015112:	787b      	ldrb	r3, [r7, #1]
 8015114:	429a      	cmp	r2, r3
 8015116:	d008      	beq.n	801512a <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8015118:	7e3a      	ldrb	r2, [r7, #24]
 801511a:	787b      	ldrb	r3, [r7, #1]
 801511c:	429a      	cmp	r2, r3
 801511e:	d202      	bcs.n	8015126 <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8015120:	7e3b      	ldrb	r3, [r7, #24]
 8015122:	707b      	strb	r3, [r7, #1]
 8015124:	e001      	b.n	801512a <phpalI14443p4a_Sw_ActivateCard+0x122>
 8015126:	787b      	ldrb	r3, [r7, #1]
 8015128:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 801512a:	787b      	ldrb	r3, [r7, #1]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d102      	bne.n	8015136 <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8015130:	7e3b      	ldrb	r3, [r7, #24]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d00c      	beq.n	8015150 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 8015136:	7e3a      	ldrb	r2, [r7, #24]
 8015138:	787b      	ldrb	r3, [r7, #1]
 801513a:	4619      	mov	r1, r3
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f7ff feb5 	bl	8014eac <phpalI14443p4a_Sw_Pps>
 8015142:	4603      	mov	r3, r0
 8015144:	81fb      	strh	r3, [r7, #14]
 8015146:	89fb      	ldrh	r3, [r7, #14]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d001      	beq.n	8015150 <phpalI14443p4a_Sw_ActivateCard+0x148>
 801514c:	89fb      	ldrh	r3, [r7, #14]
 801514e:	e00f      	b.n	8015170 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8015150:	89fb      	ldrh	r3, [r7, #14]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d00b      	beq.n	801516e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8015156:	89fb      	ldrh	r3, [r7, #14]
 8015158:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801515c:	2b00      	cmp	r3, #0
 801515e:	d106      	bne.n	801516e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8015160:	89fb      	ldrh	r3, [r7, #14]
 8015162:	b2db      	uxtb	r3, r3
 8015164:	b29b      	uxth	r3, r3
 8015166:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801516a:	b29b      	uxth	r3, r3
 801516c:	e000      	b.n	8015170 <phpalI14443p4a_Sw_ActivateCard+0x168>
 801516e:	89fb      	ldrh	r3, [r7, #14]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8015178:	b480      	push	{r7}
 801517a:	b085      	sub	sp, #20
 801517c:	af00      	add	r7, sp, #0
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	607a      	str	r2, [r7, #4]
 8015184:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	7a1a      	ldrb	r2, [r3, #8]
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	7a9a      	ldrb	r2, [r3, #10]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	7a5a      	ldrb	r2, [r3, #9]
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	7b1a      	ldrb	r2, [r3, #12]
 80151a2:	69bb      	ldr	r3, [r7, #24]
 80151a4:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	7b9a      	ldrb	r2, [r3, #14]
 80151aa:	69fb      	ldr	r3, [r7, #28]
 80151ac:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	7b5a      	ldrb	r2, [r3, #13]
 80151b2:	6a3b      	ldr	r3, [r7, #32]
 80151b4:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80151b6:	2300      	movs	r3, #0
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3714      	adds	r7, #20
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b086      	sub	sp, #24
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	60f8      	str	r0, [r7, #12]
 80151cc:	607a      	str	r2, [r7, #4]
 80151ce:	603b      	str	r3, [r7, #0]
 80151d0:	460b      	mov	r3, r1
 80151d2:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80151d4:	2300      	movs	r3, #0
 80151d6:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 80151d8:	897b      	ldrh	r3, [r7, #10]
 80151da:	2b34      	cmp	r3, #52	@ 0x34
 80151dc:	d002      	beq.n	80151e4 <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 80151de:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80151e2:	e039      	b.n	8015258 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d101      	bne.n	80151ee <phpalI14443p4mC_Sw_Init+0x2a>
 80151ea:	2321      	movs	r3, #33	@ 0x21
 80151ec:	e034      	b.n	8015258 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d101      	bne.n	80151f8 <phpalI14443p4mC_Sw_Init+0x34>
 80151f4:	2321      	movs	r3, #33	@ 0x21
 80151f6:	e02f      	b.n	8015258 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f640 7201 	movw	r2, #3841	@ 0xf01
 80151fe:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	683a      	ldr	r2, [r7, #0]
 801520a:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2201      	movs	r2, #1
 8015210:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2200      	movs	r2, #0
 8015216:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2202      	movs	r2, #2
 801521c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	2200      	movs	r2, #0
 8015224:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	224b      	movs	r2, #75	@ 0x4b
 801522a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 801522e:	68f8      	ldr	r0, [r7, #12]
 8015230:	f000 f818 	bl	8015264 <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2200      	movs	r2, #0
 8015238:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	4a08      	ldr	r2, [pc, #32]	@ (8015260 <phpalI14443p4mC_Sw_Init+0x9c>)
 801523e:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f103 0208 	add.w	r2, r3, #8
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	3308      	adds	r3, #8
 801524a:	4619      	mov	r1, r3
 801524c:	4610      	mov	r0, r2
 801524e:	f001 fe15 	bl	8016e7c <phOsal_EventCreate>
 8015252:	4603      	mov	r3, r0
 8015254:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8015256:	8afb      	ldrh	r3, [r7, #22]
}
 8015258:	4618      	mov	r0, r3
 801525a:	3718      	adds	r7, #24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	08020208 	.word	0x08020208

08015264 <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b084      	sub	sp, #16
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 801526c:	2300      	movs	r3, #0
 801526e:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2200      	movs	r2, #0
 8015274:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2201      	movs	r2, #1
 801527c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2200      	movs	r2, #0
 8015284:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2202      	movs	r2, #2
 801528a:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2200      	movs	r2, #0
 8015290:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2200      	movs	r2, #0
 8015296:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2204      	movs	r2, #4
 80152a2:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2200      	movs	r2, #0
 80152b0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2200      	movs	r2, #0
 80152c8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2201      	movs	r2, #1
 80152d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2200      	movs	r2, #0
 80152e0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2200      	movs	r2, #0
 80152e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	685b      	ldr	r3, [r3, #4]
 80152f0:	2200      	movs	r2, #0
 80152f2:	2130      	movs	r1, #48	@ 0x30
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7f7 ffe7 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80152fa:	4603      	mov	r3, r0
 80152fc:	81fb      	strh	r3, [r7, #14]
 80152fe:	89fb      	ldrh	r3, [r7, #14]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 8015304:	89fb      	ldrh	r3, [r7, #14]
 8015306:	e000      	b.n	801530a <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 8015308:	89fb      	ldrh	r3, [r7, #14]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 8015312:	b480      	push	{r7}
 8015314:	b085      	sub	sp, #20
 8015316:	af00      	add	r7, sp, #0
 8015318:	60f8      	str	r0, [r7, #12]
 801531a:	460b      	mov	r3, r1
 801531c:	607a      	str	r2, [r7, #4]
 801531e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8015320:	897b      	ldrh	r3, [r7, #10]
 8015322:	2b0c      	cmp	r3, #12
 8015324:	d002      	beq.n	801532c <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 8015326:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 801532a:	e017      	b.n	801535c <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d101      	bne.n	8015336 <phpalI18000p3m3_Sw_Init+0x24>
 8015332:	2321      	movs	r3, #33	@ 0x21
 8015334:	e012      	b.n	801535c <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d101      	bne.n	8015340 <phpalI18000p3m3_Sw_Init+0x2e>
 801533c:	2321      	movs	r3, #33	@ 0x21
 801533e:	e00d      	b.n	801535c <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	f640 3201 	movw	r2, #2817	@ 0xb01
 8015346:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2200      	movs	r2, #0
 8015352:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2200      	movs	r2, #0
 8015358:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 801535a:	2300      	movs	r3, #0
}
 801535c:	4618      	mov	r0, r3
 801535e:	3714      	adds	r7, #20
 8015360:	46bd      	mov	sp, r7
 8015362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015366:	4770      	bx	lr

08015368 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 8015368:	b480      	push	{r7}
 801536a:	b085      	sub	sp, #20
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	4608      	mov	r0, r1
 8015372:	4611      	mov	r1, r2
 8015374:	461a      	mov	r2, r3
 8015376:	4603      	mov	r3, r0
 8015378:	70fb      	strb	r3, [r7, #3]
 801537a:	460b      	mov	r3, r1
 801537c:	70bb      	strb	r3, [r7, #2]
 801537e:	4613      	mov	r3, r2
 8015380:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 8015382:	2300      	movs	r3, #0
 8015384:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 8015386:	78fb      	ldrb	r3, [r7, #3]
 8015388:	2b07      	cmp	r3, #7
 801538a:	d80c      	bhi.n	80153a6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 801538c:	78bb      	ldrb	r3, [r7, #2]
 801538e:	2b07      	cmp	r3, #7
 8015390:	d809      	bhi.n	80153a6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8015392:	787b      	ldrb	r3, [r7, #1]
 8015394:	2b03      	cmp	r3, #3
 8015396:	d806      	bhi.n	80153a6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 8015398:	7f3b      	ldrb	r3, [r7, #28]
 801539a:	2b03      	cmp	r3, #3
 801539c:	d803      	bhi.n	80153a6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 801539e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80153a2:	2b01      	cmp	r3, #1
 80153a4:	d902      	bls.n	80153ac <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80153a6:	f640 3321 	movw	r3, #2849	@ 0xb21
 80153aa:	e0f0      	b.n	801558e <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 80153b0:	78fb      	ldrb	r3, [r7, #3]
 80153b2:	005b      	lsls	r3, r3, #1
 80153b4:	b2da      	uxtb	r2, r3
 80153b6:	78bb      	ldrb	r3, [r7, #2]
 80153b8:	089b      	lsrs	r3, r3, #2
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	4313      	orrs	r3, r2
 80153be:	b2da      	uxtb	r2, r3
 80153c0:	7bbb      	ldrb	r3, [r7, #14]
 80153c2:	1c59      	adds	r1, r3, #1
 80153c4:	73b9      	strb	r1, [r7, #14]
 80153c6:	4619      	mov	r1, r3
 80153c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ca:	440b      	add	r3, r1
 80153cc:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 80153d0:	b2d2      	uxtb	r2, r2
 80153d2:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 80153d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80153d8:	019b      	lsls	r3, r3, #6
 80153da:	b25a      	sxtb	r2, r3
 80153dc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80153e0:	011b      	lsls	r3, r3, #4
 80153e2:	b25b      	sxtb	r3, r3
 80153e4:	4313      	orrs	r3, r2
 80153e6:	b25a      	sxtb	r2, r3
 80153e8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	b25b      	sxtb	r3, r3
 80153f0:	4313      	orrs	r3, r2
 80153f2:	b259      	sxtb	r1, r3
 80153f4:	7bbb      	ldrb	r3, [r7, #14]
 80153f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153f8:	4413      	add	r3, r2
 80153fa:	b2ca      	uxtb	r2, r1
 80153fc:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 80153fe:	2300      	movs	r3, #0
 8015400:	73fb      	strb	r3, [r7, #15]
 8015402:	e01f      	b.n	8015444 <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 8015404:	7bbb      	ldrb	r3, [r7, #14]
 8015406:	1c5a      	adds	r2, r3, #1
 8015408:	73ba      	strb	r2, [r7, #14]
 801540a:	4619      	mov	r1, r3
 801540c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801540e:	440a      	add	r2, r1
 8015410:	7811      	ldrb	r1, [r2, #0]
 8015412:	7bfa      	ldrb	r2, [r7, #15]
 8015414:	69b8      	ldr	r0, [r7, #24]
 8015416:	4402      	add	r2, r0
 8015418:	7812      	ldrb	r2, [r2, #0]
 801541a:	0992      	lsrs	r2, r2, #6
 801541c:	b2d2      	uxtb	r2, r2
 801541e:	4618      	mov	r0, r3
 8015420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015422:	4403      	add	r3, r0
 8015424:	430a      	orrs	r2, r1
 8015426:	b2d2      	uxtb	r2, r2
 8015428:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 801542a:	7bfb      	ldrb	r3, [r7, #15]
 801542c:	69ba      	ldr	r2, [r7, #24]
 801542e:	4413      	add	r3, r2
 8015430:	781a      	ldrb	r2, [r3, #0]
 8015432:	7bbb      	ldrb	r3, [r7, #14]
 8015434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015436:	440b      	add	r3, r1
 8015438:	0092      	lsls	r2, r2, #2
 801543a:	b2d2      	uxtb	r2, r2
 801543c:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 801543e:	7bfb      	ldrb	r3, [r7, #15]
 8015440:	3301      	adds	r3, #1
 8015442:	73fb      	strb	r3, [r7, #15]
 8015444:	7bfa      	ldrb	r2, [r7, #15]
 8015446:	7f3b      	ldrb	r3, [r7, #28]
 8015448:	3301      	adds	r3, #1
 801544a:	429a      	cmp	r2, r3
 801544c:	d3da      	bcc.n	8015404 <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 801544e:	7bbb      	ldrb	r3, [r7, #14]
 8015450:	1c5a      	adds	r2, r3, #1
 8015452:	73ba      	strb	r2, [r7, #14]
 8015454:	4619      	mov	r1, r3
 8015456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015458:	440a      	add	r2, r1
 801545a:	7811      	ldrb	r1, [r2, #0]
 801545c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8015460:	0992      	lsrs	r2, r2, #6
 8015462:	b2d2      	uxtb	r2, r2
 8015464:	4618      	mov	r0, r3
 8015466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015468:	4403      	add	r3, r0
 801546a:	430a      	orrs	r2, r1
 801546c:	b2d2      	uxtb	r2, r2
 801546e:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 8015470:	7bbb      	ldrb	r3, [r7, #14]
 8015472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015474:	4413      	add	r3, r2
 8015476:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 801547a:	0092      	lsls	r2, r2, #2
 801547c:	b2d2      	uxtb	r2, r2
 801547e:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 8015480:	7bbb      	ldrb	r3, [r7, #14]
 8015482:	b29b      	uxth	r3, r3
 8015484:	00db      	lsls	r3, r3, #3
 8015486:	b29b      	uxth	r3, r3
 8015488:	3306      	adds	r3, #6
 801548a:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 801548c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015490:	08db      	lsrs	r3, r3, #3
 8015492:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 8015494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015498:	f003 0307 	and.w	r3, r3, #7
 801549c:	2b00      	cmp	r3, #0
 801549e:	d002      	beq.n	80154a6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 80154a0:	7b3b      	ldrb	r3, [r7, #12]
 80154a2:	3301      	adds	r3, #1
 80154a4:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 80154a6:	2300      	movs	r3, #0
 80154a8:	73fb      	strb	r3, [r7, #15]
 80154aa:	e036      	b.n	801551a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
 80154ae:	6a3a      	ldr	r2, [r7, #32]
 80154b0:	4413      	add	r3, r2
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 80154b6:	7bfa      	ldrb	r2, [r7, #15]
 80154b8:	7b3b      	ldrb	r3, [r7, #12]
 80154ba:	3b01      	subs	r3, #1
 80154bc:	429a      	cmp	r2, r3
 80154be:	d112      	bne.n	80154e6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 80154c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80154c4:	f003 0307 	and.w	r3, r3, #7
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d00c      	beq.n	80154e6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 80154cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80154d0:	f003 0307 	and.w	r3, r3, #7
 80154d4:	f1c3 0308 	rsb	r3, r3, #8
 80154d8:	22ff      	movs	r2, #255	@ 0xff
 80154da:	fa02 f303 	lsl.w	r3, r2, r3
 80154de:	b2da      	uxtb	r2, r3
 80154e0:	7b7b      	ldrb	r3, [r7, #13]
 80154e2:	4013      	ands	r3, r2
 80154e4:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 80154e6:	7bbb      	ldrb	r3, [r7, #14]
 80154e8:	1c5a      	adds	r2, r3, #1
 80154ea:	73ba      	strb	r2, [r7, #14]
 80154ec:	4619      	mov	r1, r3
 80154ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154f0:	440a      	add	r2, r1
 80154f2:	7811      	ldrb	r1, [r2, #0]
 80154f4:	7b7a      	ldrb	r2, [r7, #13]
 80154f6:	0992      	lsrs	r2, r2, #6
 80154f8:	b2d2      	uxtb	r2, r2
 80154fa:	4618      	mov	r0, r3
 80154fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154fe:	4403      	add	r3, r0
 8015500:	430a      	orrs	r2, r1
 8015502:	b2d2      	uxtb	r2, r2
 8015504:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 8015506:	7bbb      	ldrb	r3, [r7, #14]
 8015508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801550a:	4413      	add	r3, r2
 801550c:	7b7a      	ldrb	r2, [r7, #13]
 801550e:	0092      	lsls	r2, r2, #2
 8015510:	b2d2      	uxtb	r2, r2
 8015512:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8015514:	7bfb      	ldrb	r3, [r7, #15]
 8015516:	3301      	adds	r3, #1
 8015518:	73fb      	strb	r3, [r7, #15]
 801551a:	7bfa      	ldrb	r2, [r7, #15]
 801551c:	7b3b      	ldrb	r3, [r7, #12]
 801551e:	429a      	cmp	r2, r3
 8015520:	d3c4      	bcc.n	80154ac <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 8015522:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015526:	b29a      	uxth	r2, r3
 8015528:	897b      	ldrh	r3, [r7, #10]
 801552a:	4413      	add	r3, r2
 801552c:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 801552e:	897b      	ldrh	r3, [r7, #10]
 8015530:	08db      	lsrs	r3, r3, #3
 8015532:	b29a      	uxth	r2, r3
 8015534:	7bbb      	ldrb	r3, [r7, #14]
 8015536:	b29b      	uxth	r3, r3
 8015538:	429a      	cmp	r2, r3
 801553a:	d002      	beq.n	8015542 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 801553c:	7bbb      	ldrb	r3, [r7, #14]
 801553e:	3b01      	subs	r3, #1
 8015540:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 8015542:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015546:	2b00      	cmp	r3, #0
 8015548:	d010      	beq.n	801556c <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 801554a:	7bbb      	ldrb	r3, [r7, #14]
 801554c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801554e:	4413      	add	r3, r2
 8015550:	7819      	ldrb	r1, [r3, #0]
 8015552:	897b      	ldrh	r3, [r7, #10]
 8015554:	f003 0307 	and.w	r3, r3, #7
 8015558:	2280      	movs	r2, #128	@ 0x80
 801555a:	fa22 f303 	lsr.w	r3, r2, r3
 801555e:	b2da      	uxtb	r2, r3
 8015560:	7bbb      	ldrb	r3, [r7, #14]
 8015562:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015564:	4403      	add	r3, r0
 8015566:	430a      	orrs	r2, r1
 8015568:	b2d2      	uxtb	r2, r2
 801556a:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 801556c:	7bbb      	ldrb	r3, [r7, #14]
 801556e:	3301      	adds	r3, #1
 8015570:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 8015572:	897b      	ldrh	r3, [r7, #10]
 8015574:	3301      	adds	r3, #1
 8015576:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 8015578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801557a:	7bba      	ldrb	r2, [r7, #14]
 801557c:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 801557e:	897b      	ldrh	r3, [r7, #10]
 8015580:	b2db      	uxtb	r3, r3
 8015582:	f003 0307 	and.w	r3, r3, #7
 8015586:	b2da      	uxtb	r2, r3
 8015588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801558a:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801558c:	2300      	movs	r3, #0
}
 801558e:	4618      	mov	r0, r3
 8015590:	3714      	adds	r7, #20
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr

0801559a <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b084      	sub	sp, #16
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
 80155a2:	4608      	mov	r0, r1
 80155a4:	4611      	mov	r1, r2
 80155a6:	461a      	mov	r2, r3
 80155a8:	4603      	mov	r3, r0
 80155aa:	70fb      	strb	r3, [r7, #3]
 80155ac:	460b      	mov	r3, r1
 80155ae:	70bb      	strb	r3, [r7, #2]
 80155b0:	4613      	mov	r3, r2
 80155b2:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 80155b4:	2300      	movs	r3, #0
 80155b6:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 80155b8:	78fb      	ldrb	r3, [r7, #3]
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d816      	bhi.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155be:	78bb      	ldrb	r3, [r7, #2]
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d913      	bls.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155c4:	78bb      	ldrb	r3, [r7, #2]
 80155c6:	2b03      	cmp	r3, #3
 80155c8:	d810      	bhi.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155ca:	787b      	ldrb	r3, [r7, #1]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d80d      	bhi.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155d0:	7e3b      	ldrb	r3, [r7, #24]
 80155d2:	2b03      	cmp	r3, #3
 80155d4:	d80a      	bhi.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155d6:	7f3b      	ldrb	r3, [r7, #28]
 80155d8:	2b03      	cmp	r3, #3
 80155da:	d807      	bhi.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80155e0:	2b01      	cmp	r3, #1
 80155e2:	d803      	bhi.n	80155ec <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80155e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80155e8:	2b0f      	cmp	r3, #15
 80155ea:	d902      	bls.n	80155f2 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80155ec:	f640 3321 	movw	r3, #2849	@ 0xb21
 80155f0:	e072      	b.n	80156d8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	7f3a      	ldrb	r2, [r7, #28]
 80155f6:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 80155f8:	787b      	ldrb	r3, [r7, #1]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d002      	beq.n	8015604 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 80155fe:	2301      	movs	r3, #1
 8015600:	707b      	strb	r3, [r7, #1]
 8015602:	e001      	b.n	8015608 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 8015604:	2300      	movs	r3, #0
 8015606:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 8015608:	78fb      	ldrb	r3, [r7, #3]
 801560a:	00db      	lsls	r3, r3, #3
 801560c:	b2da      	uxtb	r2, r3
 801560e:	78bb      	ldrb	r3, [r7, #2]
 8015610:	005b      	lsls	r3, r3, #1
 8015612:	b2db      	uxtb	r3, r3
 8015614:	4313      	orrs	r3, r2
 8015616:	b2da      	uxtb	r2, r3
 8015618:	787b      	ldrb	r3, [r7, #1]
 801561a:	4313      	orrs	r3, r2
 801561c:	b2db      	uxtb	r3, r3
 801561e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015622:	b2da      	uxtb	r2, r3
 8015624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015626:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8015628:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801562c:	019b      	lsls	r3, r3, #6
 801562e:	b25a      	sxtb	r2, r3
 8015630:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015634:	011b      	lsls	r3, r3, #4
 8015636:	b25b      	sxtb	r3, r3
 8015638:	4313      	orrs	r3, r2
 801563a:	b25a      	sxtb	r2, r3
 801563c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8015640:	00db      	lsls	r3, r3, #3
 8015642:	b25b      	sxtb	r3, r3
 8015644:	4313      	orrs	r3, r2
 8015646:	b25a      	sxtb	r2, r3
 8015648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801564c:	085b      	lsrs	r3, r3, #1
 801564e:	b2db      	uxtb	r3, r3
 8015650:	b25b      	sxtb	r3, r3
 8015652:	4313      	orrs	r3, r2
 8015654:	b25a      	sxtb	r2, r3
 8015656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015658:	3301      	adds	r3, #1
 801565a:	b2d2      	uxtb	r2, r2
 801565c:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 801565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015660:	3302      	adds	r3, #2
 8015662:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8015666:	01d2      	lsls	r2, r2, #7
 8015668:	b2d2      	uxtb	r2, r2
 801566a:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 801566c:	78fb      	ldrb	r3, [r7, #3]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d108      	bne.n	8015684 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 8015672:	78bb      	ldrb	r3, [r7, #2]
 8015674:	2b02      	cmp	r3, #2
 8015676:	d102      	bne.n	801567e <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 8015678:	2313      	movs	r3, #19
 801567a:	81fb      	strh	r3, [r7, #14]
 801567c:	e00a      	b.n	8015694 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 801567e:	2315      	movs	r3, #21
 8015680:	81fb      	strh	r3, [r7, #14]
 8015682:	e007      	b.n	8015694 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 8015684:	78bb      	ldrb	r3, [r7, #2]
 8015686:	2b02      	cmp	r3, #2
 8015688:	d102      	bne.n	8015690 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 801568a:	2314      	movs	r3, #20
 801568c:	81fb      	strh	r3, [r7, #14]
 801568e:	e001      	b.n	8015694 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 8015690:	2316      	movs	r3, #22
 8015692:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	685b      	ldr	r3, [r3, #4]
 8015698:	89fa      	ldrh	r2, [r7, #14]
 801569a:	210a      	movs	r1, #10
 801569c:	4618      	mov	r0, r3
 801569e:	f7f7 fe13 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80156a2:	4603      	mov	r3, r0
 80156a4:	81bb      	strh	r3, [r7, #12]
 80156a6:	89bb      	ldrh	r3, [r7, #12]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d001      	beq.n	80156b0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 80156ac:	89bb      	ldrh	r3, [r7, #12]
 80156ae:	e013      	b.n	80156d8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6858      	ldr	r0, [r3, #4]
 80156b4:	78fb      	ldrb	r3, [r7, #3]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d101      	bne.n	80156be <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 80156ba:	2301      	movs	r3, #1
 80156bc:	e000      	b.n	80156c0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 80156be:	2302      	movs	r3, #2
 80156c0:	461a      	mov	r2, r3
 80156c2:	210f      	movs	r1, #15
 80156c4:	f7f7 fe00 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80156c8:	4603      	mov	r3, r0
 80156ca:	81bb      	strh	r3, [r7, #12]
 80156cc:	89bb      	ldrh	r3, [r7, #12]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d001      	beq.n	80156d6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 80156d2:	89bb      	ldrh	r3, [r7, #12]
 80156d4:	e000      	b.n	80156d8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 80156d6:	2300      	movs	r3, #0
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3710      	adds	r7, #16
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}

080156e0 <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 80156e0:	b480      	push	{r7}
 80156e2:	b085      	sub	sp, #20
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	607a      	str	r2, [r7, #4]
 80156ea:	603b      	str	r3, [r7, #0]
 80156ec:	460b      	mov	r3, r1
 80156ee:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 80156f0:	897b      	ldrh	r3, [r7, #10]
 80156f2:	2b0c      	cmp	r3, #12
 80156f4:	d002      	beq.n	80156fc <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 80156f6:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 80156fa:	e014      	b.n	8015726 <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d101      	bne.n	8015706 <phpalMifare_Sw_Init+0x26>
 8015702:	2321      	movs	r3, #33	@ 0x21
 8015704:	e00f      	b.n	8015726 <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d101      	bne.n	8015710 <phpalMifare_Sw_Init+0x30>
 801570c:	2321      	movs	r3, #33	@ 0x21
 801570e:	e00a      	b.n	8015726 <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f240 7202 	movw	r2, #1794	@ 0x702
 8015716:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	687a      	ldr	r2, [r7, #4]
 801571c:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	683a      	ldr	r2, [r7, #0]
 8015722:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 8015724:	2300      	movs	r3, #0
}
 8015726:	4618      	mov	r0, r3
 8015728:	3714      	adds	r7, #20
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr

08015732 <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8015732:	b480      	push	{r7}
 8015734:	b085      	sub	sp, #20
 8015736:	af00      	add	r7, sp, #0
 8015738:	60f8      	str	r0, [r7, #12]
 801573a:	460b      	mov	r3, r1
 801573c:	607a      	str	r2, [r7, #4]
 801573e:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d101      	bne.n	801574a <phpalSli15693_Sw_Init+0x18>
 8015746:	2321      	movs	r3, #33	@ 0x21
 8015748:	e02d      	b.n	80157a6 <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d101      	bne.n	8015754 <phpalSli15693_Sw_Init+0x22>
 8015750:	2321      	movs	r3, #33	@ 0x21
 8015752:	e028      	b.n	80157a6 <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 8015754:	897b      	ldrh	r3, [r7, #10]
 8015756:	2b1c      	cmp	r3, #28
 8015758:	d002      	beq.n	8015760 <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 801575a:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 801575e:	e022      	b.n	80157a6 <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	f640 2201 	movw	r2, #2561	@ 0xa01
 8015766:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	2200      	movs	r2, #0
 8015772:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2206      	movs	r2, #6
 8015778:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	2200      	movs	r2, #0
 801577e:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2200      	movs	r2, #0
 8015784:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	2203      	movs	r2, #3
 801578a:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2200      	movs	r2, #0
 8015790:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2202      	movs	r2, #2
 8015796:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	2204      	movs	r2, #4
 801579c:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2200      	movs	r2, #0
 80157a2:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 80157a4:	2300      	movs	r3, #0
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3714      	adds	r7, #20
 80157aa:	46bd      	mov	sp, r7
 80157ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b0:	4770      	bx	lr

080157b2 <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 80157b2:	b580      	push	{r7, lr}
 80157b4:	b08e      	sub	sp, #56	@ 0x38
 80157b6:	af08      	add	r7, sp, #32
 80157b8:	60f8      	str	r0, [r7, #12]
 80157ba:	607b      	str	r3, [r7, #4]
 80157bc:	460b      	mov	r3, r1
 80157be:	72fb      	strb	r3, [r7, #11]
 80157c0:	4613      	mov	r3, r2
 80157c2:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 80157c4:	2300      	movs	r3, #0
 80157c6:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 80157c8:	7ab9      	ldrb	r1, [r7, #10]
 80157ca:	7afa      	ldrb	r2, [r7, #11]
 80157cc:	f107 0314 	add.w	r3, r7, #20
 80157d0:	9307      	str	r3, [sp, #28]
 80157d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d4:	9306      	str	r3, [sp, #24]
 80157d6:	f107 0317 	add.w	r3, r7, #23
 80157da:	9305      	str	r3, [sp, #20]
 80157dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157de:	9304      	str	r3, [sp, #16]
 80157e0:	2300      	movs	r3, #0
 80157e2:	9303      	str	r3, [sp, #12]
 80157e4:	2300      	movs	r3, #0
 80157e6:	9302      	str	r3, [sp, #8]
 80157e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157ec:	9301      	str	r3, [sp, #4]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	9300      	str	r3, [sp, #0]
 80157f2:	460b      	mov	r3, r1
 80157f4:	2101      	movs	r1, #1
 80157f6:	68f8      	ldr	r0, [r7, #12]
 80157f8:	f000 fe64 	bl	80164c4 <phpalSli15693_Sw_InventoryEx>
 80157fc:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3718      	adds	r7, #24
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}

08015806 <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 8015806:	b580      	push	{r7, lr}
 8015808:	b08a      	sub	sp, #40	@ 0x28
 801580a:	af02      	add	r7, sp, #8
 801580c:	60f8      	str	r0, [r7, #12]
 801580e:	607a      	str	r2, [r7, #4]
 8015810:	603b      	str	r3, [r7, #0]
 8015812:	460b      	mov	r3, r1
 8015814:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015816:	2300      	movs	r3, #0
 8015818:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 801581e:	7afb      	ldrb	r3, [r7, #11]
 8015820:	2b03      	cmp	r3, #3
 8015822:	d902      	bls.n	801582a <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015824:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015828:	e1c1      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 801582a:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 8015832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015834:	2200      	movs	r2, #0
 8015836:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8015838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801583a:	2200      	movs	r2, #0
 801583c:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 801583e:	7afb      	ldrb	r3, [r7, #11]
 8015840:	2b03      	cmp	r3, #3
 8015842:	d10e      	bne.n	8015862 <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801584c:	2100      	movs	r1, #0
 801584e:	4618      	mov	r0, r3
 8015850:	f7f7 fcb6 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8015854:	4603      	mov	r3, r0
 8015856:	83bb      	strh	r3, [r7, #28]
 8015858:	8bbb      	ldrh	r3, [r7, #28]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d001      	beq.n	8015862 <phpalSli15693_Sw_SendEof+0x5c>
 801585e:	8bbb      	ldrh	r3, [r7, #28]
 8015860:	e1a5      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	f107 0210 	add.w	r2, r7, #16
 801586a:	210c      	movs	r1, #12
 801586c:	4618      	mov	r0, r3
 801586e:	f7f9 f979 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8015872:	4603      	mov	r3, r0
 8015874:	83bb      	strh	r3, [r7, #28]
 8015876:	8bbb      	ldrh	r3, [r7, #28]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d001      	beq.n	8015880 <phpalSli15693_Sw_SendEof+0x7a>
 801587c:	8bbb      	ldrh	r3, [r7, #28]
 801587e:	e196      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8015880:	7afb      	ldrb	r3, [r7, #11]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d12a      	bne.n	80158dc <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 8015886:	8a3b      	ldrh	r3, [r7, #16]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00d      	beq.n	80158a8 <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	7a9b      	ldrb	r3, [r3, #10]
 8015890:	f003 0302 	and.w	r3, r3, #2
 8015894:	2b00      	cmp	r3, #0
 8015896:	d003      	beq.n	80158a0 <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 8015898:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801589c:	83fb      	strh	r3, [r7, #30]
 801589e:	e010      	b.n	80158c2 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 80158a0:	f240 33a1 	movw	r3, #929	@ 0x3a1
 80158a4:	83fb      	strh	r3, [r7, #30]
 80158a6:	e00c      	b.n	80158c2 <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	7a9b      	ldrb	r3, [r3, #10]
 80158ac:	f003 0302 	and.w	r3, r3, #2
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d003      	beq.n	80158bc <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 80158b4:	f241 039c 	movw	r3, #4252	@ 0x109c
 80158b8:	83fb      	strh	r3, [r7, #30]
 80158ba:	e002      	b.n	80158c2 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 80158bc:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 80158c0:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80158c2:	8bfb      	ldrh	r3, [r7, #30]
 80158c4:	461a      	mov	r2, r3
 80158c6:	2102      	movs	r1, #2
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	f000 faf9 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 80158ce:	4603      	mov	r3, r0
 80158d0:	83bb      	strh	r3, [r7, #28]
 80158d2:	8bbb      	ldrh	r3, [r7, #28]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d04b      	beq.n	8015970 <phpalSli15693_Sw_SendEof+0x16a>
 80158d8:	8bbb      	ldrh	r3, [r7, #28]
 80158da:	e168      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 80158dc:	7afb      	ldrb	r3, [r7, #11]
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d12a      	bne.n	8015938 <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 80158e2:	8a3b      	ldrh	r3, [r7, #16]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d00d      	beq.n	8015904 <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	7a9b      	ldrb	r3, [r3, #10]
 80158ec:	f003 0302 	and.w	r3, r3, #2
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d003      	beq.n	80158fc <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 80158f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80158f8:	83fb      	strh	r3, [r7, #30]
 80158fa:	e010      	b.n	801591e <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 80158fc:	f240 2373 	movw	r3, #627	@ 0x273
 8015900:	83fb      	strh	r3, [r7, #30]
 8015902:	e00c      	b.n	801591e <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	7a9b      	ldrb	r3, [r3, #10]
 8015908:	f003 0302 	and.w	r3, r3, #2
 801590c:	2b00      	cmp	r3, #0
 801590e:	d003      	beq.n	8015918 <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8015910:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8015914:	83fb      	strh	r3, [r7, #30]
 8015916:	e002      	b.n	801591e <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 8015918:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801591c:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801591e:	8bfb      	ldrh	r3, [r7, #30]
 8015920:	461a      	mov	r2, r3
 8015922:	2102      	movs	r1, #2
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f000 facb 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 801592a:	4603      	mov	r3, r0
 801592c:	83bb      	strh	r3, [r7, #28]
 801592e:	8bbb      	ldrh	r3, [r7, #28]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d01d      	beq.n	8015970 <phpalSli15693_Sw_SendEof+0x16a>
 8015934:	8bbb      	ldrh	r3, [r7, #28]
 8015936:	e13a      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	7d9b      	ldrb	r3, [r3, #22]
 801593c:	2b02      	cmp	r3, #2
 801593e:	d10b      	bne.n	8015958 <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015940:	2246      	movs	r2, #70	@ 0x46
 8015942:	2103      	movs	r1, #3
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f000 fabb 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 801594a:	4603      	mov	r3, r0
 801594c:	83bb      	strh	r3, [r7, #28]
 801594e:	8bbb      	ldrh	r3, [r7, #28]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d00d      	beq.n	8015970 <phpalSli15693_Sw_SendEof+0x16a>
 8015954:	8bbb      	ldrh	r3, [r7, #28]
 8015956:	e12a      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015958:	2214      	movs	r2, #20
 801595a:	2103      	movs	r1, #3
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f000 faaf 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 8015962:	4603      	mov	r3, r0
 8015964:	83bb      	strh	r3, [r7, #28]
 8015966:	8bbb      	ldrh	r3, [r7, #28]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d001      	beq.n	8015970 <phpalSli15693_Sw_SendEof+0x16a>
 801596c:	8bbb      	ldrh	r3, [r7, #28]
 801596e:	e11e      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	2200      	movs	r2, #0
 8015976:	2115      	movs	r1, #21
 8015978:	4618      	mov	r0, r3
 801597a:	f7f7 fca5 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801597e:	4603      	mov	r3, r0
 8015980:	83bb      	strh	r3, [r7, #28]
 8015982:	8bbb      	ldrh	r3, [r7, #28]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d001      	beq.n	801598c <phpalSli15693_Sw_SendEof+0x186>
 8015988:	8bbb      	ldrh	r3, [r7, #28]
 801598a:	e110      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	6858      	ldr	r0, [r3, #4]
 8015990:	f107 0312 	add.w	r3, r7, #18
 8015994:	9301      	str	r3, [sp, #4]
 8015996:	f107 0314 	add.w	r3, r7, #20
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	2300      	movs	r3, #0
 801599e:	2200      	movs	r2, #0
 80159a0:	2100      	movs	r1, #0
 80159a2:	f7f7 f911 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 80159a6:	4603      	mov	r3, r0
 80159a8:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	2205      	movs	r2, #5
 80159b0:	2115      	movs	r1, #21
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7f7 fc88 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80159b8:	4603      	mov	r3, r0
 80159ba:	83bb      	strh	r3, [r7, #28]
 80159bc:	8bbb      	ldrh	r3, [r7, #28]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d001      	beq.n	80159c6 <phpalSli15693_Sw_SendEof+0x1c0>
 80159c2:	8bbb      	ldrh	r3, [r7, #28]
 80159c4:	e0f3      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 80159c6:	8b7b      	ldrh	r3, [r7, #26]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d001      	beq.n	80159d0 <phpalSli15693_Sw_SendEof+0x1ca>
 80159cc:	8b7b      	ldrh	r3, [r7, #26]
 80159ce:	e0ee      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 80159d0:	8a7b      	ldrh	r3, [r7, #18]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d102      	bne.n	80159dc <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 80159d6:	f640 2306 	movw	r3, #2566	@ 0xa06
 80159da:	e0e8      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	f003 0301 	and.w	r3, r3, #1
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00e      	beq.n	8015a06 <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 80159e8:	8a7b      	ldrh	r3, [r7, #18]
 80159ea:	2b02      	cmp	r3, #2
 80159ec:	d002      	beq.n	80159f4 <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 80159ee:	f640 2306 	movw	r3, #2566	@ 0xa06
 80159f2:	e0dc      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	3301      	adds	r3, #1
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	461a      	mov	r2, r3
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8015a00:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8015a04:	e0d3      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8015a06:	7afb      	ldrb	r3, [r7, #11]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d13d      	bne.n	8015a88 <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8015a12:	8a7b      	ldrh	r3, [r7, #18]
 8015a14:	3b01      	subs	r3, #1
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 8015a1a:	8a7b      	ldrh	r3, [r7, #18]
 8015a1c:	2b09      	cmp	r3, #9
 8015a1e:	d002      	beq.n	8015a26 <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015a20:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015a24:	e0c3      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	685b      	ldr	r3, [r3, #4]
 8015a2a:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8015a2e:	2100      	movs	r1, #0
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7f7 fbc5 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8015a36:	4603      	mov	r3, r0
 8015a38:	83bb      	strh	r3, [r7, #28]
 8015a3a:	8bbb      	ldrh	r3, [r7, #28]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d001      	beq.n	8015a44 <phpalSli15693_Sw_SendEof+0x23e>
 8015a40:	8bbb      	ldrh	r3, [r7, #28]
 8015a42:	e0b4      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	781a      	ldrb	r2, [r3, #0]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f103 000c 	add.w	r0, r3, #12
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	3301      	adds	r3, #1
 8015a56:	2208      	movs	r2, #8
 8015a58:	4619      	mov	r1, r3
 8015a5a:	f007 fbb4 	bl	801d1c6 <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2240      	movs	r2, #64	@ 0x40
 8015a62:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	3301      	adds	r3, #1
 8015a68:	2208      	movs	r2, #8
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	6838      	ldr	r0, [r7, #0]
 8015a6e:	f007 fbaa 	bl	801d1c6 <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8015a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a74:	2208      	movs	r2, #8
 8015a76:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	7a9b      	ldrb	r3, [r3, #10]
 8015a7c:	f043 0320 	orr.w	r3, r3, #32
 8015a80:	b2da      	uxtb	r2, r3
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	729a      	strb	r2, [r3, #10]
 8015a86:	e091      	b.n	8015bac <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8015a88:	7afb      	ldrb	r3, [r7, #11]
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	f040 8088 	bne.w	8015ba0 <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	3301      	adds	r3, #1
 8015a94:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8015a96:	8a7b      	ldrh	r3, [r7, #18]
 8015a98:	3b01      	subs	r3, #1
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	7a9b      	ldrb	r3, [r3, #10]
 8015aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d05b      	beq.n	8015b62 <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	7d1b      	ldrb	r3, [r3, #20]
 8015aae:	08db      	lsrs	r3, r3, #3
 8015ab0:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8015ab2:	7e7b      	ldrb	r3, [r7, #25]
 8015ab4:	f1c3 0308 	rsb	r3, r3, #8
 8015ab8:	b2da      	uxtb	r2, r3
 8015aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015abc:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 8015abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	8a7b      	ldrh	r3, [r7, #18]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d902      	bls.n	8015ad0 <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015aca:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015ace:	e06e      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8015ad0:	7e7b      	ldrb	r3, [r7, #25]
 8015ad2:	2b07      	cmp	r3, #7
 8015ad4:	d837      	bhi.n	8015b46 <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	7d1b      	ldrb	r3, [r3, #20]
 8015ada:	f003 0307 	and.w	r3, r3, #7
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d01e      	beq.n	8015b22 <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 8015ae4:	7e7b      	ldrb	r3, [r7, #25]
 8015ae6:	2b06      	cmp	r3, #6
 8015ae8:	d80d      	bhi.n	8015b06 <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 8015aea:	7e7b      	ldrb	r3, [r7, #25]
 8015aec:	3301      	adds	r3, #1
 8015aee:	3308      	adds	r3, #8
 8015af0:	68fa      	ldr	r2, [r7, #12]
 8015af2:	4413      	add	r3, r2
 8015af4:	1d18      	adds	r0, r3, #4
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	1c59      	adds	r1, r3, #1
 8015afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	3b01      	subs	r3, #1
 8015b00:	461a      	mov	r2, r3
 8015b02:	f007 fb60 	bl	801d1c6 <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8015b06:	7e7b      	ldrb	r3, [r7, #25]
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	7b19      	ldrb	r1, [r3, #12]
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	781a      	ldrb	r2, [r3, #0]
 8015b12:	7e7b      	ldrb	r3, [r7, #25]
 8015b14:	430a      	orrs	r2, r1
 8015b16:	b2d1      	uxtb	r1, r2
 8015b18:	68fa      	ldr	r2, [r7, #12]
 8015b1a:	4413      	add	r3, r2
 8015b1c:	460a      	mov	r2, r1
 8015b1e:	731a      	strb	r2, [r3, #12]
 8015b20:	e00a      	b.n	8015b38 <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8015b22:	7e7b      	ldrb	r3, [r7, #25]
 8015b24:	3308      	adds	r3, #8
 8015b26:	68fa      	ldr	r2, [r7, #12]
 8015b28:	4413      	add	r3, r2
 8015b2a:	1d18      	adds	r0, r3, #4
 8015b2c:	6979      	ldr	r1, [r7, #20]
 8015b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	461a      	mov	r2, r3
 8015b34:	f007 fb47 	bl	801d1c6 <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 8015b38:	6979      	ldr	r1, [r7, #20]
 8015b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b3c:	781b      	ldrb	r3, [r3, #0]
 8015b3e:	461a      	mov	r2, r3
 8015b40:	6838      	ldr	r0, [r7, #0]
 8015b42:	f007 fb40 	bl	801d1c6 <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	2240      	movs	r2, #64	@ 0x40
 8015b4a:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b50:	7812      	ldrb	r2, [r2, #0]
 8015b52:	4413      	add	r3, r2
 8015b54:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 8015b56:	8a7b      	ldrh	r3, [r7, #18]
 8015b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b5a:	7812      	ldrb	r2, [r2, #0]
 8015b5c:	1a9b      	subs	r3, r3, r2
 8015b5e:	b29b      	uxth	r3, r3
 8015b60:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	8a7a      	ldrh	r2, [r7, #18]
 8015b66:	4619      	mov	r1, r3
 8015b68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b6a:	f007 fb2c 	bl	801d1c6 <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 8015b6e:	8a7a      	ldrh	r2, [r7, #18]
 8015b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b72:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	7a9b      	ldrb	r3, [r3, #10]
 8015b78:	f043 0320 	orr.w	r3, r3, #32
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7f7 fb17 	bl	800d1c0 <phhalHw_Pn5180_Wait>
 8015b92:	4603      	mov	r3, r0
 8015b94:	83bb      	strh	r3, [r7, #28]
 8015b96:	8bbb      	ldrh	r3, [r7, #28]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d007      	beq.n	8015bac <phpalSli15693_Sw_SendEof+0x3a6>
 8015b9c:	8bbb      	ldrh	r3, [r7, #28]
 8015b9e:	e006      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 8015ba0:	8a7b      	ldrh	r3, [r7, #18]
 8015ba2:	2b01      	cmp	r3, #1
 8015ba4:	d002      	beq.n	8015bac <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015ba6:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015baa:	e000      	b.n	8015bae <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3720      	adds	r7, #32
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b088      	sub	sp, #32
 8015bba:	af02      	add	r7, sp, #8
 8015bbc:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	7a9b      	ldrb	r3, [r3, #10]
 8015bca:	f023 0310 	bic.w	r3, r3, #16
 8015bce:	b2da      	uxtb	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	7a9b      	ldrb	r3, [r3, #10]
 8015bd8:	f043 0320 	orr.w	r3, r3, #32
 8015bdc:	b2da      	uxtb	r2, r3
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 8015be2:	2325      	movs	r3, #37	@ 0x25
 8015be4:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8015be6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8015bea:	2102      	movs	r1, #2
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f000 f967 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	82fb      	strh	r3, [r7, #22]
 8015bf6:	8afb      	ldrh	r3, [r7, #22]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d001      	beq.n	8015c00 <phpalSli15693_Sw_Select+0x4a>
 8015bfc:	8afb      	ldrh	r3, [r7, #22]
 8015bfe:	e028      	b.n	8015c52 <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 8015c00:	f107 0214 	add.w	r2, r7, #20
 8015c04:	f107 030e 	add.w	r3, r7, #14
 8015c08:	9301      	str	r3, [sp, #4]
 8015c0a:	f107 0310 	add.w	r3, r7, #16
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	2301      	movs	r3, #1
 8015c12:	2100      	movs	r1, #0
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 f820 	bl	8015c5a <phpalSli15693_Sw_Exchange>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	82fb      	strh	r3, [r7, #22]
 8015c1e:	8afb      	ldrh	r3, [r7, #22]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d001      	beq.n	8015c28 <phpalSli15693_Sw_Select+0x72>
 8015c24:	8afb      	ldrh	r3, [r7, #22]
 8015c26:	e014      	b.n	8015c52 <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 8015c28:	89fb      	ldrh	r3, [r7, #14]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d002      	beq.n	8015c34 <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015c2e:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015c32:	e00e      	b.n	8015c52 <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	7a9b      	ldrb	r3, [r3, #10]
 8015c38:	f023 0320 	bic.w	r3, r3, #32
 8015c3c:	b2da      	uxtb	r2, r3
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	7a9b      	ldrb	r3, [r3, #10]
 8015c46:	f043 0310 	orr.w	r3, r3, #16
 8015c4a:	b2da      	uxtb	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8015c50:	2300      	movs	r3, #0
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	3718      	adds	r7, #24
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}

08015c5a <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 8015c5a:	b580      	push	{r7, lr}
 8015c5c:	b08a      	sub	sp, #40	@ 0x28
 8015c5e:	af02      	add	r7, sp, #8
 8015c60:	60f8      	str	r0, [r7, #12]
 8015c62:	607a      	str	r2, [r7, #4]
 8015c64:	461a      	mov	r2, r3
 8015c66:	460b      	mov	r3, r1
 8015c68:	817b      	strh	r3, [r7, #10]
 8015c6a:	4613      	mov	r3, r2
 8015c6c:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 8015c72:	2300      	movs	r3, #0
 8015c74:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	7a9b      	ldrb	r3, [r3, #10]
 8015c7a:	f003 0304 	and.w	r3, r3, #4
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d10c      	bne.n	8015c9c <phpalSli15693_Sw_Exchange+0x42>
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	7a9b      	ldrb	r3, [r3, #10]
 8015c86:	f003 0320 	and.w	r3, r3, #32
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d006      	beq.n	8015c9c <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	7d1b      	ldrb	r3, [r3, #20]
 8015c92:	2b40      	cmp	r3, #64	@ 0x40
 8015c94:	d002      	beq.n	8015c9c <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 8015c96:	f640 2325 	movw	r3, #2597	@ 0xa25
 8015c9a:	e0f0      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 8015c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d102      	bne.n	8015ca8 <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 8015ca2:	f107 0310 	add.w	r3, r7, #16
 8015ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 8015ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d102      	bne.n	8015cb4 <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 8015cae:	f107 0316 	add.w	r3, r7, #22
 8015cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 8015cb4:	897b      	ldrh	r3, [r7, #10]
 8015cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f040 8086 	bne.w	8015dcc <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 8015cc0:	8bfb      	ldrh	r3, [r7, #30]
 8015cc2:	1c5a      	adds	r2, r3, #1
 8015cc4:	83fa      	strh	r2, [r7, #30]
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	7a9a      	ldrb	r2, [r3, #10]
 8015ccc:	f101 0320 	add.w	r3, r1, #32
 8015cd0:	443b      	add	r3, r7
 8015cd2:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 8015cd6:	8bfb      	ldrh	r3, [r7, #30]
 8015cd8:	1c5a      	adds	r2, r3, #1
 8015cda:	83fa      	strh	r2, [r7, #30]
 8015cdc:	4619      	mov	r1, r3
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	781a      	ldrb	r2, [r3, #0]
 8015ce2:	f101 0320 	add.w	r3, r1, #32
 8015ce6:	443b      	add	r3, r7
 8015ce8:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	2b9f      	cmp	r3, #159	@ 0x9f
 8015cf2:	d90f      	bls.n	8015d14 <phpalSli15693_Sw_Exchange+0xba>
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	781b      	ldrb	r3, [r3, #0]
 8015cf8:	2bdf      	cmp	r3, #223	@ 0xdf
 8015cfa:	d80b      	bhi.n	8015d14 <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 8015cfc:	8bfb      	ldrh	r3, [r7, #30]
 8015cfe:	1c5a      	adds	r2, r3, #1
 8015d00:	83fa      	strh	r2, [r7, #30]
 8015d02:	4619      	mov	r1, r3
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	7e5a      	ldrb	r2, [r3, #25]
 8015d08:	f101 0320 	add.w	r3, r1, #32
 8015d0c:	443b      	add	r3, r7
 8015d0e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8015d12:	e017      	b.n	8015d44 <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	2b3b      	cmp	r3, #59	@ 0x3b
 8015d1a:	d113      	bne.n	8015d44 <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 8015d1c:	893b      	ldrh	r3, [r7, #8]
 8015d1e:	2b01      	cmp	r3, #1
 8015d20:	d910      	bls.n	8015d44 <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 8015d22:	8bfb      	ldrh	r3, [r7, #30]
 8015d24:	1c5a      	adds	r2, r3, #1
 8015d26:	83fa      	strh	r2, [r7, #30]
 8015d28:	4619      	mov	r1, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	785a      	ldrb	r2, [r3, #1]
 8015d2e:	f101 0320 	add.w	r3, r1, #32
 8015d32:	443b      	add	r3, r7
 8015d34:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	607b      	str	r3, [r7, #4]
               --wTxLength;
 8015d3e:	893b      	ldrh	r3, [r7, #8]
 8015d40:	3b01      	subs	r3, #1
 8015d42:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	6858      	ldr	r0, [r3, #4]
 8015d48:	8bf9      	ldrh	r1, [r7, #30]
 8015d4a:	f107 0218 	add.w	r2, r7, #24
 8015d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d50:	9301      	str	r3, [sp, #4]
 8015d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	460b      	mov	r3, r1
 8015d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015d5c:	f7f6 ff34 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8015d60:	4603      	mov	r3, r0
 8015d62:	83bb      	strh	r3, [r7, #28]
 8015d64:	8bbb      	ldrh	r3, [r7, #28]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d001      	beq.n	8015d6e <phpalSli15693_Sw_Exchange+0x114>
 8015d6a:	8bbb      	ldrh	r3, [r7, #28]
 8015d6c:	e087      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	3301      	adds	r3, #1
 8015d72:	607b      	str	r3, [r7, #4]
        --wTxLength;
 8015d74:	893b      	ldrh	r3, [r7, #8]
 8015d76:	3b01      	subs	r3, #1
 8015d78:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	7a9b      	ldrb	r3, [r3, #10]
 8015d7e:	f003 0304 	and.w	r3, r3, #4
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d11e      	bne.n	8015dc4 <phpalSli15693_Sw_Exchange+0x16a>
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	7a9b      	ldrb	r3, [r3, #10]
 8015d8a:	f003 0320 	and.w	r3, r3, #32
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d018      	beq.n	8015dc4 <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	7d5b      	ldrb	r3, [r3, #21]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d114      	bne.n	8015dc4 <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	6858      	ldr	r0, [r3, #4]
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	f103 020c 	add.w	r2, r3, #12
 8015da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da6:	9301      	str	r3, [sp, #4]
 8015da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	2308      	movs	r3, #8
 8015dae:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8015db2:	f7f6 ff09 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8015db6:	4603      	mov	r3, r0
 8015db8:	83bb      	strh	r3, [r7, #28]
 8015dba:	8bbb      	ldrh	r3, [r7, #28]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <phpalSli15693_Sw_Exchange+0x16a>
 8015dc0:	8bbb      	ldrh	r3, [r7, #28]
 8015dc2:	e05c      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8015dc4:	897b      	ldrh	r3, [r7, #10]
 8015dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015dca:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	6858      	ldr	r0, [r3, #4]
 8015dd0:	893a      	ldrh	r2, [r7, #8]
 8015dd2:	8979      	ldrh	r1, [r7, #10]
 8015dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd6:	9301      	str	r3, [sp, #4]
 8015dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dda:	9300      	str	r3, [sp, #0]
 8015ddc:	4613      	mov	r3, r2
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	f7f6 fef2 	bl	800cbc8 <phhalHw_Pn5180_Exchange>
 8015de4:	4603      	mov	r3, r0
 8015de6:	83bb      	strh	r3, [r7, #28]
 8015de8:	8bbb      	ldrh	r3, [r7, #28]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d001      	beq.n	8015df2 <phpalSli15693_Sw_Exchange+0x198>
 8015dee:	8bbb      	ldrh	r3, [r7, #28]
 8015df0:	e045      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 8015df2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	db40      	blt.n	8015e7c <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 8015dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfc:	881b      	ldrh	r3, [r3, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d102      	bne.n	8015e08 <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015e02:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015e06:	e03a      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8015e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	f003 0301 	and.w	r3, r3, #1
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d019      	beq.n	8015e50 <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 8015e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e24:	881b      	ldrh	r3, [r3, #0]
 8015e26:	2b02      	cmp	r3, #2
 8015e28:	d002      	beq.n	8015e30 <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8015e2a:	f640 2306 	movw	r3, #2566	@ 0xa06
 8015e2e:	e026      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 8015e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	3301      	adds	r3, #1
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 8015e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e40:	2200      	movs	r2, #0
 8015e42:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 8015e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e46:	2200      	movs	r2, #0
 8015e48:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8015e4a:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8015e4e:	e016      	b.n	8015e7e <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 8015e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	461a      	mov	r2, r3
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 8015e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	781a      	ldrb	r2, [r3, #0]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 8015e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	1c5a      	adds	r2, r3, #1
 8015e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e6e:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 8015e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e72:	881b      	ldrh	r3, [r3, #0]
 8015e74:	3b01      	subs	r3, #1
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e7a:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8015e7c:	2300      	movs	r3, #0
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3720      	adds	r7, #32
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b084      	sub	sp, #16
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	60f8      	str	r0, [r7, #12]
 8015e8e:	60b9      	str	r1, [r7, #8]
 8015e90:	4613      	mov	r3, r2
 8015e92:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 8015e94:	79fb      	ldrb	r3, [r7, #7]
 8015e96:	2b08      	cmp	r3, #8
 8015e98:	d002      	beq.n	8015ea0 <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015e9a:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015e9e:	e00a      	b.n	8015eb6 <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	330c      	adds	r3, #12
 8015ea4:	2208      	movs	r2, #8
 8015ea6:	68b9      	ldr	r1, [r7, #8]
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f007 f98c 	bl	801d1c6 <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2240      	movs	r2, #64	@ 0x40
 8015eb2:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
	...

08015ec0 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	460b      	mov	r3, r1
 8015eca:	807b      	strh	r3, [r7, #2]
 8015ecc:	4613      	mov	r3, r2
 8015ece:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 8015ed0:	887b      	ldrh	r3, [r7, #2]
 8015ed2:	2b0a      	cmp	r3, #10
 8015ed4:	f200 81b9 	bhi.w	801624a <phpalSli15693_Sw_SetConfig+0x38a>
 8015ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8015ee0 <phpalSli15693_Sw_SetConfig+0x20>)
 8015eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ede:	bf00      	nop
 8015ee0:	08015f0d 	.word	0x08015f0d
 8015ee4:	0801624b 	.word	0x0801624b
 8015ee8:	0801600b 	.word	0x0801600b
 8015eec:	08016077 	.word	0x08016077
 8015ef0:	08016143 	.word	0x08016143
 8015ef4:	080161b7 	.word	0x080161b7
 8015ef8:	080160bd 	.word	0x080160bd
 8015efc:	08016139 	.word	0x08016139
 8015f00:	0801621f 	.word	0x0801621f
 8015f04:	08016237 	.word	0x08016237
 8015f08:	08016241 	.word	0x08016241
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	f107 020c 	add.w	r2, r7, #12
 8015f14:	210f      	movs	r1, #15
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7f8 fe24 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	81fb      	strh	r3, [r7, #14]
 8015f20:	89fb      	ldrh	r3, [r7, #14]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <phpalSli15693_Sw_SetConfig+0x6a>
 8015f26:	89fb      	ldrh	r3, [r7, #14]
 8015f28:	e19c      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 8015f2a:	883b      	ldrh	r3, [r7, #0]
 8015f2c:	f003 0301 	and.w	r3, r3, #1
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d017      	beq.n	8015f64 <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	7d9b      	ldrb	r3, [r3, #22]
 8015f38:	2b02      	cmp	r3, #2
 8015f3a:	d102      	bne.n	8015f42 <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015f3c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015f40:	e190      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 8015f42:	89bb      	ldrh	r3, [r7, #12]
 8015f44:	2b01      	cmp	r3, #1
 8015f46:	d01e      	beq.n	8015f86 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	210f      	movs	r1, #15
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7f7 f9b9 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8015f56:	4603      	mov	r3, r0
 8015f58:	81fb      	strh	r3, [r7, #14]
 8015f5a:	89fb      	ldrh	r3, [r7, #14]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d012      	beq.n	8015f86 <phpalSli15693_Sw_SetConfig+0xc6>
 8015f60:	89fb      	ldrh	r3, [r7, #14]
 8015f62:	e17f      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 8015f64:	89bb      	ldrh	r3, [r7, #12]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00d      	beq.n	8015f86 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	210f      	movs	r1, #15
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7f7 f9a8 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	81fb      	strh	r3, [r7, #14]
 8015f7c:	89fb      	ldrh	r3, [r7, #14]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d001      	beq.n	8015f86 <phpalSli15693_Sw_SetConfig+0xc6>
 8015f82:	89fb      	ldrh	r3, [r7, #14]
 8015f84:	e16e      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	f107 020c 	add.w	r2, r7, #12
 8015f8e:	210a      	movs	r1, #10
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7f8 fde7 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8015f96:	4603      	mov	r3, r0
 8015f98:	81fb      	strh	r3, [r7, #14]
 8015f9a:	89fb      	ldrh	r3, [r7, #14]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d001      	beq.n	8015fa4 <phpalSli15693_Sw_SetConfig+0xe4>
 8015fa0:	89fb      	ldrh	r3, [r7, #14]
 8015fa2:	e15f      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 8015fa4:	883b      	ldrh	r3, [r7, #0]
 8015fa6:	f003 0302 	and.w	r3, r3, #2
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d117      	bne.n	8015fde <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	7d9b      	ldrb	r3, [r3, #22]
 8015fb2:	2b02      	cmp	r3, #2
 8015fb4:	d102      	bne.n	8015fbc <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8015fb6:	f640 2321 	movw	r3, #2593	@ 0xa21
 8015fba:	e153      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 8015fbc:	89bb      	ldrh	r3, [r7, #12]
 8015fbe:	2b0c      	cmp	r3, #12
 8015fc0:	d01e      	beq.n	8016000 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	685b      	ldr	r3, [r3, #4]
 8015fc6:	220c      	movs	r2, #12
 8015fc8:	210a      	movs	r1, #10
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7f7 f97c 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	81fb      	strh	r3, [r7, #14]
 8015fd4:	89fb      	ldrh	r3, [r7, #14]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d012      	beq.n	8016000 <phpalSli15693_Sw_SetConfig+0x140>
 8015fda:	89fb      	ldrh	r3, [r7, #14]
 8015fdc:	e142      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 8015fde:	89bb      	ldrh	r3, [r7, #12]
 8015fe0:	2b0d      	cmp	r3, #13
 8015fe2:	d00d      	beq.n	8016000 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	220d      	movs	r2, #13
 8015fea:	210a      	movs	r1, #10
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7f7 f96b 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	81fb      	strh	r3, [r7, #14]
 8015ff6:	89fb      	ldrh	r3, [r7, #14]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d001      	beq.n	8016000 <phpalSli15693_Sw_SetConfig+0x140>
 8015ffc:	89fb      	ldrh	r3, [r7, #14]
 8015ffe:	e131      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 8016000:	883b      	ldrh	r3, [r7, #0]
 8016002:	b2da      	uxtb	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	729a      	strb	r2, [r3, #10]

        break;
 8016008:	e12b      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 801600a:	883b      	ldrh	r3, [r7, #0]
 801600c:	333c      	adds	r3, #60	@ 0x3c
 801600e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016012:	d302      	bcc.n	801601a <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 8016014:	f640 2322 	movw	r3, #2594	@ 0xa22
 8016018:	e124      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 801601a:	883b      	ldrh	r3, [r7, #0]
 801601c:	333c      	adds	r3, #60	@ 0x3c
 801601e:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	685b      	ldr	r3, [r3, #4]
 8016024:	f107 020c 	add.w	r2, r7, #12
 8016028:	210d      	movs	r1, #13
 801602a:	4618      	mov	r0, r3
 801602c:	f7f8 fd9a 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8016030:	4603      	mov	r3, r0
 8016032:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 8016034:	89fb      	ldrh	r3, [r7, #14]
 8016036:	b2db      	uxtb	r3, r3
 8016038:	2b00      	cmp	r3, #0
 801603a:	d103      	bne.n	8016044 <phpalSli15693_Sw_SetConfig+0x184>
 801603c:	89bb      	ldrh	r3, [r7, #12]
 801603e:	883a      	ldrh	r2, [r7, #0]
 8016040:	429a      	cmp	r2, r3
 8016042:	d103      	bne.n	801604c <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 8016044:	89fb      	ldrh	r3, [r7, #14]
 8016046:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 8016048:	2b22      	cmp	r3, #34	@ 0x22
 801604a:	d10d      	bne.n	8016068 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	883a      	ldrh	r2, [r7, #0]
 8016052:	210d      	movs	r1, #13
 8016054:	4618      	mov	r0, r3
 8016056:	f7f7 f937 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801605a:	4603      	mov	r3, r0
 801605c:	81fb      	strh	r3, [r7, #14]
 801605e:	89fb      	ldrh	r3, [r7, #14]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d007      	beq.n	8016074 <phpalSli15693_Sw_SetConfig+0x1b4>
 8016064:	89fb      	ldrh	r3, [r7, #14]
 8016066:	e0fd      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 8016068:	89fb      	ldrh	r3, [r7, #14]
 801606a:	2b00      	cmp	r3, #0
 801606c:	f000 80f0 	beq.w	8016250 <phpalSli15693_Sw_SetConfig+0x390>
 8016070:	89fb      	ldrh	r3, [r7, #14]
 8016072:	e0f7      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 8016074:	e0ec      	b.n	8016250 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	f107 020c 	add.w	r2, r7, #12
 801607e:	210e      	movs	r1, #14
 8016080:	4618      	mov	r0, r3
 8016082:	f7f8 fd6f 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8016086:	4603      	mov	r3, r0
 8016088:	81fb      	strh	r3, [r7, #14]
 801608a:	89fb      	ldrh	r3, [r7, #14]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d001      	beq.n	8016094 <phpalSli15693_Sw_SetConfig+0x1d4>
 8016090:	89fb      	ldrh	r3, [r7, #14]
 8016092:	e0e7      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 8016094:	89bb      	ldrh	r3, [r7, #12]
 8016096:	883a      	ldrh	r2, [r7, #0]
 8016098:	429a      	cmp	r2, r3
 801609a:	f000 80db 	beq.w	8016254 <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	883a      	ldrh	r2, [r7, #0]
 80160a4:	210e      	movs	r1, #14
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7f7 f90e 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80160ac:	4603      	mov	r3, r0
 80160ae:	81fb      	strh	r3, [r7, #14]
 80160b0:	89fb      	ldrh	r3, [r7, #14]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	f000 80ce 	beq.w	8016254 <phpalSli15693_Sw_SetConfig+0x394>
 80160b8:	89fb      	ldrh	r3, [r7, #14]
 80160ba:	e0d3      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 80160bc:	883b      	ldrh	r3, [r7, #0]
 80160be:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 80160c2:	d006      	beq.n	80160d2 <phpalSli15693_Sw_SetConfig+0x212>
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	7d9b      	ldrb	r3, [r3, #22]
 80160c8:	2b02      	cmp	r3, #2
 80160ca:	d102      	bne.n	80160d2 <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80160cc:	f640 2321 	movw	r3, #2593	@ 0xa21
 80160d0:	e0c8      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	f107 020c 	add.w	r2, r7, #12
 80160da:	210d      	movs	r1, #13
 80160dc:	4618      	mov	r0, r3
 80160de:	f7f8 fd41 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 80160e2:	4603      	mov	r3, r0
 80160e4:	81fb      	strh	r3, [r7, #14]
 80160e6:	89fb      	ldrh	r3, [r7, #14]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d001      	beq.n	80160f0 <phpalSli15693_Sw_SetConfig+0x230>
 80160ec:	89fb      	ldrh	r3, [r7, #14]
 80160ee:	e0b9      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 80160f0:	89bb      	ldrh	r3, [r7, #12]
 80160f2:	883a      	ldrh	r2, [r7, #0]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	f000 80af 	beq.w	8016258 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6858      	ldr	r0, [r3, #4]
 80160fe:	883b      	ldrh	r3, [r7, #0]
 8016100:	3b0a      	subs	r3, #10
 8016102:	b29b      	uxth	r3, r3
 8016104:	461a      	mov	r2, r3
 8016106:	2106      	movs	r1, #6
 8016108:	f7f7 f8de 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801610c:	4603      	mov	r3, r0
 801610e:	81fb      	strh	r3, [r7, #14]
 8016110:	89fb      	ldrh	r3, [r7, #14]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d001      	beq.n	801611a <phpalSli15693_Sw_SetConfig+0x25a>
 8016116:	89fb      	ldrh	r3, [r7, #14]
 8016118:	e0a4      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	883a      	ldrh	r2, [r7, #0]
 8016120:	210d      	movs	r1, #13
 8016122:	4618      	mov	r0, r3
 8016124:	f7f7 f8d0 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8016128:	4603      	mov	r3, r0
 801612a:	81fb      	strh	r3, [r7, #14]
 801612c:	89fb      	ldrh	r3, [r7, #14]
 801612e:	2b00      	cmp	r3, #0
 8016130:	f000 8092 	beq.w	8016258 <phpalSli15693_Sw_SetConfig+0x398>
 8016134:	89fb      	ldrh	r3, [r7, #14]
 8016136:	e095      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 8016138:	883b      	ldrh	r3, [r7, #0]
 801613a:	b2da      	uxtb	r2, r3
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	75da      	strb	r2, [r3, #23]
        break;
 8016140:	e08f      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	7d9b      	ldrb	r3, [r3, #22]
 8016146:	2b02      	cmp	r3, #2
 8016148:	d105      	bne.n	8016156 <phpalSli15693_Sw_SetConfig+0x296>
 801614a:	883b      	ldrh	r3, [r7, #0]
 801614c:	2b1a      	cmp	r3, #26
 801614e:	d002      	beq.n	8016156 <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016150:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016154:	e086      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 8016156:	883b      	ldrh	r3, [r7, #0]
 8016158:	2b1d      	cmp	r3, #29
 801615a:	d902      	bls.n	8016162 <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801615c:	f640 2323 	movw	r3, #2595	@ 0xa23
 8016160:	e080      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 8016162:	883b      	ldrh	r3, [r7, #0]
 8016164:	3b1a      	subs	r3, #26
 8016166:	2b03      	cmp	r3, #3
 8016168:	d816      	bhi.n	8016198 <phpalSli15693_Sw_SetConfig+0x2d8>
 801616a:	a201      	add	r2, pc, #4	@ (adr r2, 8016170 <phpalSli15693_Sw_SetConfig+0x2b0>)
 801616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016170:	08016181 	.word	0x08016181
 8016174:	08016187 	.word	0x08016187
 8016178:	0801618d 	.word	0x0801618d
 801617c:	08016193 	.word	0x08016193
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 8016180:	230b      	movs	r3, #11
 8016182:	803b      	strh	r3, [r7, #0]
            break;
 8016184:	e009      	b.n	801619a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 8016186:	231b      	movs	r3, #27
 8016188:	803b      	strh	r3, [r7, #0]
            break;
 801618a:	e006      	b.n	801619a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801618c:	2300      	movs	r3, #0
 801618e:	803b      	strh	r3, [r7, #0]
            break;
 8016190:	e003      	b.n	801619a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 8016192:	2301      	movs	r3, #1
 8016194:	803b      	strh	r3, [r7, #0]
            break;
 8016196:	e000      	b.n	801619a <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 8016198:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	883a      	ldrh	r2, [r7, #0]
 80161a0:	2109      	movs	r1, #9
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7f7 f890 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80161a8:	4603      	mov	r3, r0
 80161aa:	81fb      	strh	r3, [r7, #14]
 80161ac:	89fb      	ldrh	r3, [r7, #14]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d054      	beq.n	801625c <phpalSli15693_Sw_SetConfig+0x39c>
 80161b2:	89fb      	ldrh	r3, [r7, #14]
 80161b4:	e056      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	7d9b      	ldrb	r3, [r3, #22]
 80161ba:	2b02      	cmp	r3, #2
 80161bc:	d105      	bne.n	80161ca <phpalSli15693_Sw_SetConfig+0x30a>
 80161be:	883b      	ldrh	r3, [r7, #0]
 80161c0:	2b1a      	cmp	r3, #26
 80161c2:	d002      	beq.n	80161ca <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80161c4:	f640 2321 	movw	r3, #2593	@ 0xa21
 80161c8:	e04c      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 80161ca:	883b      	ldrh	r3, [r7, #0]
 80161cc:	3b1a      	subs	r3, #26
 80161ce:	2b03      	cmp	r3, #3
 80161d0:	d816      	bhi.n	8016200 <phpalSli15693_Sw_SetConfig+0x340>
 80161d2:	a201      	add	r2, pc, #4	@ (adr r2, 80161d8 <phpalSli15693_Sw_SetConfig+0x318>)
 80161d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161d8:	080161e9 	.word	0x080161e9
 80161dc:	080161ef 	.word	0x080161ef
 80161e0:	080161f5 	.word	0x080161f5
 80161e4:	080161fb 	.word	0x080161fb
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 80161e8:	230d      	movs	r3, #13
 80161ea:	803b      	strh	r3, [r7, #0]
            break;
 80161ec:	e009      	b.n	8016202 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 80161ee:	230f      	movs	r3, #15
 80161f0:	803b      	strh	r3, [r7, #0]
            break;
 80161f2:	e006      	b.n	8016202 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 80161f4:	2300      	movs	r3, #0
 80161f6:	803b      	strh	r3, [r7, #0]
            break;
 80161f8:	e003      	b.n	8016202 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 80161fa:	2301      	movs	r3, #1
 80161fc:	803b      	strh	r3, [r7, #0]
            break;
 80161fe:	e000      	b.n	8016202 <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 8016200:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	883a      	ldrh	r2, [r7, #0]
 8016208:	210a      	movs	r1, #10
 801620a:	4618      	mov	r0, r3
 801620c:	f7f7 f85c 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 8016210:	4603      	mov	r3, r0
 8016212:	81fb      	strh	r3, [r7, #14]
 8016214:	89fb      	ldrh	r3, [r7, #14]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d022      	beq.n	8016260 <phpalSli15693_Sw_SetConfig+0x3a0>
 801621a:	89fb      	ldrh	r3, [r7, #14]
 801621c:	e022      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	7e1b      	ldrb	r3, [r3, #24]
 8016222:	2b05      	cmp	r3, #5
 8016224:	d902      	bls.n	801622c <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016226:	f640 2321 	movw	r3, #2593	@ 0xa21
 801622a:	e01b      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 801622c:	883b      	ldrh	r3, [r7, #0]
 801622e:	b2da      	uxtb	r2, r3
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	761a      	strb	r2, [r3, #24]
            break;
 8016234:	e015      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 8016236:	883b      	ldrh	r3, [r7, #0]
 8016238:	b2da      	uxtb	r2, r3
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	765a      	strb	r2, [r3, #25]
            break;
 801623e:	e010      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 8016240:	883b      	ldrh	r3, [r7, #0]
 8016242:	b2da      	uxtb	r2, r3
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	759a      	strb	r2, [r3, #22]
            break;
 8016248:	e00b      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801624a:	f640 2323 	movw	r3, #2595	@ 0xa23
 801624e:	e009      	b.n	8016264 <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 8016250:	bf00      	nop
 8016252:	e006      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 8016254:	bf00      	nop
 8016256:	e004      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 8016258:	bf00      	nop
 801625a:	e002      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 801625c:	bf00      	nop
 801625e:	e000      	b.n	8016262 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 8016260:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8016262:	2300      	movs	r3, #0
}
 8016264:	4618      	mov	r0, r3
 8016266:	3710      	adds	r7, #16
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}

0801626c <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b086      	sub	sp, #24
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	460b      	mov	r3, r1
 8016276:	607a      	str	r2, [r7, #4]
 8016278:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 801627a:	897b      	ldrh	r3, [r7, #10]
 801627c:	2b0a      	cmp	r3, #10
 801627e:	f200 8115 	bhi.w	80164ac <phpalSli15693_Sw_GetConfig+0x240>
 8016282:	a201      	add	r2, pc, #4	@ (adr r2, 8016288 <phpalSli15693_Sw_GetConfig+0x1c>)
 8016284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016288:	080162b5 	.word	0x080162b5
 801628c:	080162c1 	.word	0x080162c1
 8016290:	080162cb 	.word	0x080162cb
 8016294:	080162f5 	.word	0x080162f5
 8016298:	08016313 	.word	0x08016313
 801629c:	080163d1 	.word	0x080163d1
 80162a0:	08016461 	.word	0x08016461
 80162a4:	0801647d 	.word	0x0801647d
 80162a8:	08016489 	.word	0x08016489
 80162ac:	08016495 	.word	0x08016495
 80162b0:	080164a1 	.word	0x080164a1
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	7a9b      	ldrb	r3, [r3, #10]
 80162b8:	461a      	mov	r2, r3
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	801a      	strh	r2, [r3, #0]
        break;
 80162be:	e0fb      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	891a      	ldrh	r2, [r3, #8]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	801a      	strh	r2, [r3, #0]
        break;
 80162c8:	e0f6      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	687a      	ldr	r2, [r7, #4]
 80162d0:	210d      	movs	r1, #13
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7f8 fc46 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 80162d8:	4603      	mov	r3, r0
 80162da:	82fb      	strh	r3, [r7, #22]
 80162dc:	8afb      	ldrh	r3, [r7, #22]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d001      	beq.n	80162e6 <phpalSli15693_Sw_GetConfig+0x7a>
 80162e2:	8afb      	ldrh	r3, [r7, #22]
 80162e4:	e0e9      	b.n	80164ba <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	3b3c      	subs	r3, #60	@ 0x3c
 80162ec:	b29a      	uxth	r2, r3
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	801a      	strh	r2, [r3, #0]
        break;
 80162f2:	e0e1      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	687a      	ldr	r2, [r7, #4]
 80162fa:	210e      	movs	r1, #14
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f8 fc31 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8016302:	4603      	mov	r3, r0
 8016304:	82fb      	strh	r3, [r7, #22]
 8016306:	8afb      	ldrh	r3, [r7, #22]
 8016308:	2b00      	cmp	r3, #0
 801630a:	f000 80d2 	beq.w	80164b2 <phpalSli15693_Sw_GetConfig+0x246>
 801630e:	8afb      	ldrh	r3, [r7, #22]
 8016310:	e0d3      	b.n	80164ba <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	2109      	movs	r1, #9
 801631a:	4618      	mov	r0, r3
 801631c:	f7f8 fc22 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8016320:	4603      	mov	r3, r0
 8016322:	82fb      	strh	r3, [r7, #22]
 8016324:	8afb      	ldrh	r3, [r7, #22]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <phpalSli15693_Sw_GetConfig+0xc2>
 801632a:	8afb      	ldrh	r3, [r7, #22]
 801632c:	e0c5      	b.n	80164ba <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	881b      	ldrh	r3, [r3, #0]
 8016332:	2b1b      	cmp	r3, #27
 8016334:	d84a      	bhi.n	80163cc <phpalSli15693_Sw_GetConfig+0x160>
 8016336:	a201      	add	r2, pc, #4	@ (adr r2, 801633c <phpalSli15693_Sw_GetConfig+0xd0>)
 8016338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801633c:	080163bd 	.word	0x080163bd
 8016340:	080163c5 	.word	0x080163c5
 8016344:	080163cd 	.word	0x080163cd
 8016348:	080163cd 	.word	0x080163cd
 801634c:	080163cd 	.word	0x080163cd
 8016350:	080163cd 	.word	0x080163cd
 8016354:	080163cd 	.word	0x080163cd
 8016358:	080163cd 	.word	0x080163cd
 801635c:	080163cd 	.word	0x080163cd
 8016360:	080163cd 	.word	0x080163cd
 8016364:	080163cd 	.word	0x080163cd
 8016368:	080163ad 	.word	0x080163ad
 801636c:	080163cd 	.word	0x080163cd
 8016370:	080163cd 	.word	0x080163cd
 8016374:	080163cd 	.word	0x080163cd
 8016378:	080163cd 	.word	0x080163cd
 801637c:	080163cd 	.word	0x080163cd
 8016380:	080163cd 	.word	0x080163cd
 8016384:	080163cd 	.word	0x080163cd
 8016388:	080163cd 	.word	0x080163cd
 801638c:	080163cd 	.word	0x080163cd
 8016390:	080163cd 	.word	0x080163cd
 8016394:	080163cd 	.word	0x080163cd
 8016398:	080163cd 	.word	0x080163cd
 801639c:	080163cd 	.word	0x080163cd
 80163a0:	080163cd 	.word	0x080163cd
 80163a4:	080163cd 	.word	0x080163cd
 80163a8:	080163b5 	.word	0x080163b5
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	221a      	movs	r2, #26
 80163b0:	801a      	strh	r2, [r3, #0]
            break;
 80163b2:	e00c      	b.n	80163ce <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	221b      	movs	r2, #27
 80163b8:	801a      	strh	r2, [r3, #0]
            break;
 80163ba:	e008      	b.n	80163ce <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	221c      	movs	r2, #28
 80163c0:	801a      	strh	r2, [r3, #0]
            break;
 80163c2:	e004      	b.n	80163ce <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	221d      	movs	r2, #29
 80163c8:	801a      	strh	r2, [r3, #0]
            break;
 80163ca:	e000      	b.n	80163ce <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 80163cc:	bf00      	nop
        }
        break;
 80163ce:	e073      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	210a      	movs	r1, #10
 80163d8:	4618      	mov	r0, r3
 80163da:	f7f8 fbc3 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 80163de:	4603      	mov	r3, r0
 80163e0:	82fb      	strh	r3, [r7, #22]
 80163e2:	8afb      	ldrh	r3, [r7, #22]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <phpalSli15693_Sw_GetConfig+0x180>
 80163e8:	8afb      	ldrh	r3, [r7, #22]
 80163ea:	e066      	b.n	80164ba <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	881b      	ldrh	r3, [r3, #0]
 80163f0:	2b0f      	cmp	r3, #15
 80163f2:	d833      	bhi.n	801645c <phpalSli15693_Sw_GetConfig+0x1f0>
 80163f4:	a201      	add	r2, pc, #4	@ (adr r2, 80163fc <phpalSli15693_Sw_GetConfig+0x190>)
 80163f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163fa:	bf00      	nop
 80163fc:	0801644d 	.word	0x0801644d
 8016400:	08016455 	.word	0x08016455
 8016404:	0801645d 	.word	0x0801645d
 8016408:	0801645d 	.word	0x0801645d
 801640c:	0801645d 	.word	0x0801645d
 8016410:	0801645d 	.word	0x0801645d
 8016414:	0801645d 	.word	0x0801645d
 8016418:	0801645d 	.word	0x0801645d
 801641c:	0801645d 	.word	0x0801645d
 8016420:	0801645d 	.word	0x0801645d
 8016424:	0801645d 	.word	0x0801645d
 8016428:	0801645d 	.word	0x0801645d
 801642c:	0801645d 	.word	0x0801645d
 8016430:	0801643d 	.word	0x0801643d
 8016434:	0801645d 	.word	0x0801645d
 8016438:	08016445 	.word	0x08016445
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	221a      	movs	r2, #26
 8016440:	801a      	strh	r2, [r3, #0]
            break;
 8016442:	e00c      	b.n	801645e <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	221b      	movs	r2, #27
 8016448:	801a      	strh	r2, [r3, #0]
            break;
 801644a:	e008      	b.n	801645e <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	221c      	movs	r2, #28
 8016450:	801a      	strh	r2, [r3, #0]
            break;
 8016452:	e004      	b.n	801645e <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	221d      	movs	r2, #29
 8016458:	801a      	strh	r2, [r3, #0]
            break;
 801645a:	e000      	b.n	801645e <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 801645c:	bf00      	nop
        }
        break;
 801645e:	e02b      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	210d      	movs	r1, #13
 8016468:	4618      	mov	r0, r3
 801646a:	f7f8 fb7b 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 801646e:	4603      	mov	r3, r0
 8016470:	82fb      	strh	r3, [r7, #22]
 8016472:	8afb      	ldrh	r3, [r7, #22]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d01e      	beq.n	80164b6 <phpalSli15693_Sw_GetConfig+0x24a>
 8016478:	8afb      	ldrh	r3, [r7, #22]
 801647a:	e01e      	b.n	80164ba <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	7ddb      	ldrb	r3, [r3, #23]
 8016480:	461a      	mov	r2, r3
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	801a      	strh	r2, [r3, #0]
        break;
 8016486:	e017      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	7e1b      	ldrb	r3, [r3, #24]
 801648c:	461a      	mov	r2, r3
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	801a      	strh	r2, [r3, #0]
        break;
 8016492:	e011      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	7e5b      	ldrb	r3, [r3, #25]
 8016498:	461a      	mov	r2, r3
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	801a      	strh	r2, [r3, #0]
        break;
 801649e:	e00b      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	7d9b      	ldrb	r3, [r3, #22]
 80164a4:	461a      	mov	r2, r3
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	801a      	strh	r2, [r3, #0]
        break;
 80164aa:	e005      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80164ac:	f640 2323 	movw	r3, #2595	@ 0xa23
 80164b0:	e003      	b.n	80164ba <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 80164b2:	bf00      	nop
 80164b4:	e000      	b.n	80164b8 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 80164b6:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80164b8:	2300      	movs	r3, #0
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3718      	adds	r7, #24
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop

080164c4 <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b08e      	sub	sp, #56	@ 0x38
 80164c8:	af0c      	add	r7, sp, #48	@ 0x30
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	4608      	mov	r0, r1
 80164ce:	4611      	mov	r1, r2
 80164d0:	461a      	mov	r2, r3
 80164d2:	4603      	mov	r3, r0
 80164d4:	70fb      	strb	r3, [r7, #3]
 80164d6:	460b      	mov	r3, r1
 80164d8:	70bb      	strb	r3, [r7, #2]
 80164da:	4613      	mov	r3, r2
 80164dc:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 80164de:	7878      	ldrb	r0, [r7, #1]
 80164e0:	78ba      	ldrb	r2, [r7, #2]
 80164e2:	78f9      	ldrb	r1, [r7, #3]
 80164e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80164e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80164ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80164f0:	6a3b      	ldr	r3, [r7, #32]
 80164f2:	9308      	str	r3, [sp, #32]
 80164f4:	2300      	movs	r3, #0
 80164f6:	9307      	str	r3, [sp, #28]
 80164f8:	8bbb      	ldrh	r3, [r7, #28]
 80164fa:	9306      	str	r3, [sp, #24]
 80164fc:	7e3b      	ldrb	r3, [r7, #24]
 80164fe:	9305      	str	r3, [sp, #20]
 8016500:	7d3b      	ldrb	r3, [r7, #20]
 8016502:	9304      	str	r3, [sp, #16]
 8016504:	693b      	ldr	r3, [r7, #16]
 8016506:	9303      	str	r3, [sp, #12]
 8016508:	2300      	movs	r3, #0
 801650a:	9302      	str	r3, [sp, #8]
 801650c:	2300      	movs	r3, #0
 801650e:	9301      	str	r3, [sp, #4]
 8016510:	2300      	movs	r3, #0
 8016512:	9300      	str	r3, [sp, #0]
 8016514:	4603      	mov	r3, r0
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f000 f805 	bl	8016526 <phpalSli15693_Sw_InventoryExt>
 801651c:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 801651e:	4618      	mov	r0, r3
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b090      	sub	sp, #64	@ 0x40
 801652a:	af02      	add	r7, sp, #8
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	4608      	mov	r0, r1
 8016530:	4611      	mov	r1, r2
 8016532:	461a      	mov	r2, r3
 8016534:	4603      	mov	r3, r0
 8016536:	70fb      	strb	r3, [r7, #3]
 8016538:	460b      	mov	r3, r1
 801653a:	70bb      	strb	r3, [r7, #2]
 801653c:	4613      	mov	r3, r2
 801653e:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 8016540:	2300      	movs	r3, #0
 8016542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 8016546:	2300      	movs	r3, #0
 8016548:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801654c:	2300      	movs	r3, #0
 801654e:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8016550:	2300      	movs	r3, #0
 8016552:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 8016554:	2300      	movs	r3, #0
 8016556:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 801655e:	2300      	movs	r3, #0
 8016560:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 8016562:	2300      	movs	r3, #0
 8016564:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 801656a:	2300      	movs	r3, #0
 801656c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 801656e:	2300      	movs	r3, #0
 8016570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 8016574:	2300      	movs	r3, #0
 8016576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2200      	movs	r2, #0
 801657e:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 8016580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00e      	beq.n	80165a4 <phpalSli15693_Sw_InventoryExt+0x7e>
 8016586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00b      	beq.n	80165a4 <phpalSli15693_Sw_InventoryExt+0x7e>
 801658c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016590:	f003 0310 	and.w	r3, r3, #16
 8016594:	2b00      	cmp	r3, #0
 8016596:	d008      	beq.n	80165aa <phpalSli15693_Sw_InventoryExt+0x84>
 8016598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801659a:	2b00      	cmp	r3, #0
 801659c:	d002      	beq.n	80165a4 <phpalSli15693_Sw_InventoryExt+0x7e>
 801659e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d102      	bne.n	80165aa <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80165a4:	f640 2321 	movw	r3, #2593	@ 0xa21
 80165a8:	e334      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 80165aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80165ae:	f003 0304 	and.w	r3, r3, #4
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d005      	beq.n	80165c2 <phpalSli15693_Sw_InventoryExt+0x9c>
 80165b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d102      	bne.n	80165c2 <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80165bc:	f640 2321 	movw	r3, #2593	@ 0xa21
 80165c0:	e328      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 80165c2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80165c6:	f003 0308 	and.w	r3, r3, #8
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d005      	beq.n	80165da <phpalSli15693_Sw_InventoryExt+0xb4>
 80165ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d102      	bne.n	80165da <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80165d4:	f640 2321 	movw	r3, #2593	@ 0xa21
 80165d8:	e31c      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 80165da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80165dc:	2200      	movs	r2, #0
 80165de:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 80165e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80165e2:	2200      	movs	r2, #0
 80165e4:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 80165e6:	78bb      	ldrb	r3, [r7, #2]
 80165e8:	f003 0320 	and.w	r3, r3, #32
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d003      	beq.n	80165f8 <phpalSli15693_Sw_InventoryExt+0xd2>
 80165f0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80165f4:	2b40      	cmp	r3, #64	@ 0x40
 80165f6:	d808      	bhi.n	801660a <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 80165f8:	78bb      	ldrb	r3, [r7, #2]
 80165fa:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d106      	bne.n	8016610 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 8016602:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016606:	2b3c      	cmp	r3, #60	@ 0x3c
 8016608:	d902      	bls.n	8016610 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801660a:	f640 2321 	movw	r3, #2593	@ 0xa21
 801660e:	e301      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016610:	78fb      	ldrb	r3, [r7, #3]
 8016612:	2b01      	cmp	r3, #1
 8016614:	d010      	beq.n	8016638 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 8016616:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801661a:	2b00      	cmp	r3, #0
 801661c:	d102      	bne.n	8016624 <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801661e:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016622:	e2f7      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 8016624:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8016628:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801662c:	4413      	add	r3, r2
 801662e:	2bff      	cmp	r3, #255	@ 0xff
 8016630:	d902      	bls.n	8016638 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8016632:	f640 2321 	movw	r3, #2593	@ 0xa21
 8016636:	e2ed      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 8016638:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801663c:	1c5a      	adds	r2, r3, #1
 801663e:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016642:	3338      	adds	r3, #56	@ 0x38
 8016644:	443b      	add	r3, r7
 8016646:	78fa      	ldrb	r2, [r7, #3]
 8016648:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801664c:	78bb      	ldrb	r3, [r7, #2]
 801664e:	b29b      	uxth	r3, r3
 8016650:	461a      	mov	r2, r3
 8016652:	2100      	movs	r1, #0
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f7ff fc33 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 801665a:	4603      	mov	r3, r0
 801665c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801665e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016660:	2b00      	cmp	r3, #0
 8016662:	d001      	beq.n	8016668 <phpalSli15693_Sw_InventoryExt+0x142>
 8016664:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016666:	e2d5      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 8016668:	78fb      	ldrb	r3, [r7, #3]
 801666a:	2ba1      	cmp	r3, #161	@ 0xa1
 801666c:	d002      	beq.n	8016674 <phpalSli15693_Sw_InventoryExt+0x14e>
 801666e:	78fb      	ldrb	r3, [r7, #3]
 8016670:	2bb1      	cmp	r3, #177	@ 0xb1
 8016672:	d120      	bne.n	80166b6 <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016674:	78bb      	ldrb	r3, [r7, #2]
 8016676:	f003 0302 	and.w	r3, r3, #2
 801667a:	2b00      	cmp	r3, #0
 801667c:	d00d      	beq.n	801669a <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	220f      	movs	r2, #15
 8016684:	210a      	movs	r1, #10
 8016686:	4618      	mov	r0, r3
 8016688:	f7f6 fe1e 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 801668c:	4603      	mov	r3, r0
 801668e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8016690:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00f      	beq.n	80166b6 <phpalSli15693_Sw_InventoryExt+0x190>
 8016696:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016698:	e2bc      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	220e      	movs	r2, #14
 80166a0:	210a      	movs	r1, #10
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7f6 fe10 	bl	800d2c8 <phhalHw_Pn5180_SetConfig>
 80166a8:	4603      	mov	r3, r0
 80166aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80166ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d001      	beq.n	80166b6 <phpalSli15693_Sw_InventoryExt+0x190>
 80166b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80166b4:	e2ae      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 80166b6:	78bb      	ldrb	r3, [r7, #2]
 80166b8:	f003 0310 	and.w	r3, r3, #16
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00e      	beq.n	80166de <phpalSli15693_Sw_InventoryExt+0x1b8>
 80166c0:	78bb      	ldrb	r3, [r7, #2]
 80166c2:	f003 0304 	and.w	r3, r3, #4
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d009      	beq.n	80166de <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 80166ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80166ce:	1c5a      	adds	r2, r3, #1
 80166d0:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80166d4:	3338      	adds	r3, #56	@ 0x38
 80166d6:	443b      	add	r3, r7
 80166d8:	787a      	ldrb	r2, [r7, #1]
 80166da:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 80166de:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d03b      	beq.n	801675e <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 80166e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80166ea:	1c5a      	adds	r2, r3, #1
 80166ec:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80166f0:	4619      	mov	r1, r3
 80166f2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80166f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80166fa:	b2da      	uxtb	r2, r3
 80166fc:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016700:	443b      	add	r3, r7
 8016702:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 8016706:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801670a:	1c5a      	adds	r2, r3, #1
 801670c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016710:	3338      	adds	r3, #56	@ 0x38
 8016712:	443b      	add	r3, r7
 8016714:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8016718:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 801671c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016720:	f003 0304 	and.w	r3, r3, #4
 8016724:	2b00      	cmp	r3, #0
 8016726:	d025      	beq.n	8016774 <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 8016728:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801672c:	1c5a      	adds	r2, r3, #1
 801672e:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016732:	4619      	mov	r1, r3
 8016734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016736:	781a      	ldrb	r2, [r3, #0]
 8016738:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 801673c:	443b      	add	r3, r7
 801673e:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 8016742:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016746:	1c5a      	adds	r2, r3, #1
 8016748:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 801674c:	4619      	mov	r1, r3
 801674e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016750:	785a      	ldrb	r2, [r3, #1]
 8016752:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016756:	443b      	add	r3, r7
 8016758:	f803 2c24 	strb.w	r2, [r3, #-36]
 801675c:	e00a      	b.n	8016774 <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 801675e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016762:	1c5a      	adds	r2, r3, #1
 8016764:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8016768:	3338      	adds	r3, #56	@ 0x38
 801676a:	443b      	add	r3, r7
 801676c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8016770:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 8016774:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016778:	f003 0307 	and.w	r3, r3, #7
 801677c:	b2db      	uxtb	r3, r3
 801677e:	2b00      	cmp	r3, #0
 8016780:	d006      	beq.n	8016790 <phpalSli15693_Sw_InventoryExt+0x26a>
 8016782:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016786:	08db      	lsrs	r3, r3, #3
 8016788:	b2db      	uxtb	r3, r3
 801678a:	3301      	adds	r3, #1
 801678c:	b2db      	uxtb	r3, r3
 801678e:	e003      	b.n	8016798 <phpalSli15693_Sw_InventoryExt+0x272>
 8016790:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016794:	08db      	lsrs	r3, r3, #3
 8016796:	b2db      	uxtb	r3, r3
 8016798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	330c      	adds	r3, #12
 80167a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80167a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80167a6:	4618      	mov	r0, r3
 80167a8:	f006 fd0d 	bl	801d1c6 <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80167b2:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 80167b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80167b8:	f107 0214 	add.w	r2, r7, #20
 80167bc:	4413      	add	r3, r2
 80167be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80167c2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80167c4:	4618      	mov	r0, r3
 80167c6:	f006 fcfe 	bl	801d1c6 <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 80167ca:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80167ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167d2:	4413      	add	r3, r2
 80167d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 80167d8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80167dc:	f003 0307 	and.w	r3, r3, #7
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d019      	beq.n	8016818 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 80167e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80167e8:	3b01      	subs	r3, #1
 80167ea:	3338      	adds	r3, #56	@ 0x38
 80167ec:	443b      	add	r3, r7
 80167ee:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 80167f2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80167f6:	f003 0307 	and.w	r3, r3, #7
 80167fa:	f1c3 0308 	rsb	r3, r3, #8
 80167fe:	22ff      	movs	r2, #255	@ 0xff
 8016800:	fa22 f303 	lsr.w	r3, r2, r3
 8016804:	b2da      	uxtb	r2, r3
 8016806:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801680a:	3b01      	subs	r3, #1
 801680c:	400a      	ands	r2, r1
 801680e:	b2d2      	uxtb	r2, r2
 8016810:	3338      	adds	r3, #56	@ 0x38
 8016812:	443b      	add	r3, r7
 8016814:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	f107 020c 	add.w	r2, r7, #12
 8016820:	210c      	movs	r1, #12
 8016822:	4618      	mov	r0, r3
 8016824:	f7f8 f99e 	bl	800eb64 <phhalHw_Pn5180_GetConfig>
 8016828:	4603      	mov	r3, r0
 801682a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801682c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801682e:	2b00      	cmp	r3, #0
 8016830:	d001      	beq.n	8016836 <phpalSli15693_Sw_InventoryExt+0x310>
 8016832:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016834:	e1ee      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 8016836:	89bb      	ldrh	r3, [r7, #12]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d01f      	beq.n	801687c <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801683c:	78fb      	ldrb	r3, [r7, #3]
 801683e:	2ba1      	cmp	r3, #161	@ 0xa1
 8016840:	d002      	beq.n	8016848 <phpalSli15693_Sw_InventoryExt+0x322>
 8016842:	78fb      	ldrb	r3, [r7, #3]
 8016844:	2bb1      	cmp	r3, #177	@ 0xb1
 8016846:	d10c      	bne.n	8016862 <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016848:	78bb      	ldrb	r3, [r7, #2]
 801684a:	f003 0302 	and.w	r3, r3, #2
 801684e:	2b00      	cmp	r3, #0
 8016850:	d003      	beq.n	801685a <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 8016852:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016856:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016858:	e02f      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 801685a:	f240 2373 	movw	r3, #627	@ 0x273
 801685e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016860:	e02b      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016862:	78bb      	ldrb	r3, [r7, #2]
 8016864:	f003 0302 	and.w	r3, r3, #2
 8016868:	2b00      	cmp	r3, #0
 801686a:	d003      	beq.n	8016874 <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 801686c:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8016870:	867b      	strh	r3, [r7, #50]	@ 0x32
 8016872:	e022      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 8016874:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8016878:	867b      	strh	r3, [r7, #50]	@ 0x32
 801687a:	e01e      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 801687c:	78fb      	ldrb	r3, [r7, #3]
 801687e:	2ba1      	cmp	r3, #161	@ 0xa1
 8016880:	d002      	beq.n	8016888 <phpalSli15693_Sw_InventoryExt+0x362>
 8016882:	78fb      	ldrb	r3, [r7, #3]
 8016884:	2bb1      	cmp	r3, #177	@ 0xb1
 8016886:	d10c      	bne.n	80168a2 <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016888:	78bb      	ldrb	r3, [r7, #2]
 801688a:	f003 0302 	and.w	r3, r3, #2
 801688e:	2b00      	cmp	r3, #0
 8016890:	d003      	beq.n	801689a <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8016892:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8016896:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8016898:	e00f      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801689a:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801689e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168a0:	e00b      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80168a2:	78bb      	ldrb	r3, [r7, #2]
 80168a4:	f003 0302 	and.w	r3, r3, #2
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d003      	beq.n	80168b4 <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 80168ac:	f241 039c 	movw	r3, #4252	@ 0x109c
 80168b0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80168b2:	e002      	b.n	80168ba <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 80168b4:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 80168b8:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80168ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80168bc:	461a      	mov	r2, r3
 80168be:	2102      	movs	r1, #2
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f7ff fafd 	bl	8015ec0 <phpalSli15693_Sw_SetConfig>
 80168c6:	4603      	mov	r3, r0
 80168c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80168ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <phpalSli15693_Sw_InventoryExt+0x3ae>
 80168d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80168d2:	e19f      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 80168d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80168d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	7ddb      	ldrb	r3, [r3, #23]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d016      	beq.n	8016912 <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 80168e4:	78bb      	ldrb	r3, [r7, #2]
 80168e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d001      	beq.n	80168f2 <phpalSli15693_Sw_InventoryExt+0x3cc>
 80168ee:	2328      	movs	r3, #40	@ 0x28
 80168f0:	e000      	b.n	80168f4 <phpalSli15693_Sw_InventoryExt+0x3ce>
 80168f2:	233c      	movs	r3, #60	@ 0x3c
 80168f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 80168f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80168f8:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 80168fa:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80168fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016900:	429a      	cmp	r2, r3
 8016902:	d20c      	bcs.n	801691e <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 8016904:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016908:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 801690a:	2301      	movs	r3, #1
 801690c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016910:	e005      	b.n	801691e <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 8016912:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016916:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 8016918:	2301      	movs	r3, #1
 801691a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	7a9b      	ldrb	r3, [r3, #10]
 8016922:	f003 0304 	and.w	r3, r3, #4
 8016926:	2b00      	cmp	r3, #0
 8016928:	d107      	bne.n	801693a <phpalSli15693_Sw_InventoryExt+0x414>
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	7a9b      	ldrb	r3, [r3, #10]
 801692e:	f003 0320 	and.w	r3, r3, #32
 8016932:	2b00      	cmp	r3, #0
 8016934:	d001      	beq.n	801693a <phpalSli15693_Sw_InventoryExt+0x414>
 8016936:	2301      	movs	r3, #1
 8016938:	e000      	b.n	801693c <phpalSli15693_Sw_InventoryExt+0x416>
 801693a:	2300      	movs	r3, #0
 801693c:	2b00      	cmp	r3, #0
 801693e:	d002      	beq.n	8016946 <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 8016946:	2301      	movs	r3, #1
 8016948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 801694c:	78fb      	ldrb	r3, [r7, #3]
 801694e:	2b01      	cmp	r3, #1
 8016950:	d028      	beq.n	80169a4 <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 8016952:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016954:	3b01      	subs	r3, #1
 8016956:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 8016958:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801695c:	2b00      	cmp	r3, #0
 801695e:	d005      	beq.n	801696c <phpalSli15693_Sw_InventoryExt+0x446>
 8016960:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016964:	f003 0310 	and.w	r3, r3, #16
 8016968:	2b00      	cmp	r3, #0
 801696a:	d11b      	bne.n	80169a4 <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 801696c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801696e:	b2da      	uxtb	r2, r3
 8016970:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016974:	1c59      	adds	r1, r3, #1
 8016976:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 801697a:	4619      	mov	r1, r3
 801697c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016980:	4413      	add	r3, r2
 8016982:	b2da      	uxtb	r2, r3
 8016984:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8016988:	443b      	add	r3, r7
 801698a:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 801698e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8016992:	1c5a      	adds	r2, r3, #1
 8016994:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 8016998:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801699a:	b2d2      	uxtb	r2, r2
 801699c:	3338      	adds	r3, #56	@ 0x38
 801699e:	443b      	add	r3, r7
 80169a0:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 80169a4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80169a8:	b299      	uxth	r1, r3
 80169aa:	f107 0214 	add.w	r2, r7, #20
 80169ae:	f107 030e 	add.w	r3, r7, #14
 80169b2:	9301      	str	r3, [sp, #4]
 80169b4:	f107 0310 	add.w	r3, r7, #16
 80169b8:	9300      	str	r3, [sp, #0]
 80169ba:	460b      	mov	r3, r1
 80169bc:	2100      	movs	r1, #0
 80169be:	6878      	ldr	r0, [r7, #4]
 80169c0:	f7ff f94b 	bl	8015c5a <phpalSli15693_Sw_Exchange>
 80169c4:	4603      	mov	r3, r0
 80169c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80169c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d006      	beq.n	80169de <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	7a9b      	ldrb	r3, [r3, #10]
 80169d4:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 80169d8:	b2da      	uxtb	r2, r3
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 80169de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d001      	beq.n	80169e8 <phpalSli15693_Sw_InventoryExt+0x4c2>
 80169e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80169e6:	e115      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 80169e8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d011      	beq.n	8016a14 <phpalSli15693_Sw_InventoryExt+0x4ee>
 80169f0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80169f4:	f003 0308 	and.w	r3, r3, #8
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d00b      	beq.n	8016a14 <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	881b      	ldrh	r3, [r3, #0]
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016a04:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	3302      	adds	r3, #2
 8016a0a:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 8016a0c:	89fb      	ldrh	r3, [r7, #14]
 8016a0e:	3b02      	subs	r3, #2
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 8016a14:	78fb      	ldrb	r3, [r7, #3]
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	d123      	bne.n	8016a62 <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 8016a1a:	89fb      	ldrh	r3, [r7, #14]
 8016a1c:	2b09      	cmp	r3, #9
 8016a1e:	d002      	beq.n	8016a26 <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016a20:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016a24:	e0f6      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	781a      	ldrb	r2, [r3, #0]
 8016a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016a2c:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 8016a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016a30:	2201      	movs	r2, #1
 8016a32:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f103 000c 	add.w	r0, r3, #12
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	2208      	movs	r2, #8
 8016a40:	4619      	mov	r1, r3
 8016a42:	f006 fbc0 	bl	801d1c6 <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2240      	movs	r2, #64	@ 0x40
 8016a4a:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	330c      	adds	r3, #12
 8016a50:	2208      	movs	r2, #8
 8016a52:	4619      	mov	r1, r3
 8016a54:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016a56:	f006 fbb6 	bl	801d1c6 <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8016a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a5c:	2208      	movs	r2, #8
 8016a5e:	701a      	strb	r2, [r3, #0]
 8016a60:	e099      	b.n	8016b96 <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 8016a62:	78bb      	ldrb	r3, [r7, #2]
 8016a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f000 8083 	beq.w	8016b74 <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8016a6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016a72:	f1c3 0308 	rsb	r3, r3, #8
 8016a76:	b2da      	uxtb	r2, r3
 8016a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a7a:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 8016a7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d018      	beq.n	8016ab6 <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	7d1b      	ldrb	r3, [r3, #20]
 8016a88:	08db      	lsrs	r3, r3, #3
 8016a8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8016a8e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016a92:	f1c3 0308 	rsb	r3, r3, #8
 8016a96:	b2da      	uxtb	r2, r3
 8016a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a9a:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 8016a9c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d008      	beq.n	8016ab6 <phpalSli15693_Sw_InventoryExt+0x590>
 8016aa4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016aa8:	f003 0302 	and.w	r3, r3, #2
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d002      	beq.n	8016ab6 <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8016ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ab2:	2208      	movs	r2, #8
 8016ab4:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 8016ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	461a      	mov	r2, r3
 8016abc:	89fb      	ldrh	r3, [r7, #14]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d902      	bls.n	8016ac8 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016ac2:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016ac6:	e0a5      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8016ac8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016acc:	2b07      	cmp	r3, #7
 8016ace:	d843      	bhi.n	8016b58 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 8016ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d102      	bne.n	8016ade <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8016ad8:	f640 2306 	movw	r3, #2566	@ 0xa06
 8016adc:	e09a      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 8016ade:	6939      	ldr	r1, [r7, #16]
 8016ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ae2:	781b      	ldrb	r3, [r3, #0]
 8016ae4:	461a      	mov	r2, r3
 8016ae6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016ae8:	f006 fb6d 	bl	801d1c6 <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 8016aec:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016af0:	f003 0307 	and.w	r3, r3, #7
 8016af4:	b2db      	uxtb	r3, r3
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d022      	beq.n	8016b40 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 8016afa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016afe:	2b06      	cmp	r3, #6
 8016b00:	d80e      	bhi.n	8016b20 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 8016b02:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b06:	3301      	adds	r3, #1
 8016b08:	3308      	adds	r3, #8
 8016b0a:	687a      	ldr	r2, [r7, #4]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	1d18      	adds	r0, r3, #4
 8016b10:	693b      	ldr	r3, [r7, #16]
 8016b12:	1c59      	adds	r1, r3, #1
 8016b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	3b01      	subs	r3, #1
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	f006 fb53 	bl	801d1c6 <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8016b20:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	4413      	add	r3, r2
 8016b28:	7b19      	ldrb	r1, [r3, #12]
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	781a      	ldrb	r2, [r3, #0]
 8016b2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b32:	430a      	orrs	r2, r1
 8016b34:	b2d1      	uxtb	r1, r2
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	4413      	add	r3, r2
 8016b3a:	460a      	mov	r2, r1
 8016b3c:	731a      	strb	r2, [r3, #12]
 8016b3e:	e00b      	b.n	8016b58 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8016b40:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8016b44:	3308      	adds	r3, #8
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	4413      	add	r3, r2
 8016b4a:	1d18      	adds	r0, r3, #4
 8016b4c:	6939      	ldr	r1, [r7, #16]
 8016b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	461a      	mov	r2, r3
 8016b54:	f006 fb37 	bl	801d1c6 <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2240      	movs	r2, #64	@ 0x40
 8016b5c:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016b62:	7812      	ldrb	r2, [r2, #0]
 8016b64:	4413      	add	r3, r2
 8016b66:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 8016b68:	89fb      	ldrh	r3, [r7, #14]
 8016b6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8016b6c:	7812      	ldrb	r2, [r2, #0]
 8016b6e:	1a9b      	subs	r3, r3, r2
 8016b70:	b29b      	uxth	r3, r3
 8016b72:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 8016b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016b76:	881b      	ldrh	r3, [r3, #0]
 8016b78:	461a      	mov	r2, r3
 8016b7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016b7c:	4413      	add	r3, r2
 8016b7e:	6939      	ldr	r1, [r7, #16]
 8016b80:	89fa      	ldrh	r2, [r7, #14]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f006 fb1f 	bl	801d1c6 <memcpy>
            *pDataLength += wRespLength;
 8016b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016b8a:	881a      	ldrh	r2, [r3, #0]
 8016b8c:	89fb      	ldrh	r3, [r7, #14]
 8016b8e:	4413      	add	r3, r2
 8016b90:	b29a      	uxth	r2, r3
 8016b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016b94:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 8016b96:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016b98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016b9a:	4413      	add	r3, r2
 8016b9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8016b9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016ba0:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 8016ba2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ba6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 8016baa:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016bae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016bb0:	1ad2      	subs	r2, r2, r3
 8016bb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	da04      	bge.n	8016bc2 <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 8016bb8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8016bbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016bbe:	1ad3      	subs	r3, r2, r3
 8016bc0:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 8016bc2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016bca:	8812      	ldrh	r2, [r2, #0]
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d102      	bne.n	8016bd6 <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 8016bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	f43f aeb3 	beq.w	801694c <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	7a9b      	ldrb	r3, [r3, #10]
 8016bea:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8016bee:	b2da      	uxtb	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8016bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d001      	beq.n	8016c04 <phpalSli15693_Sw_InventoryExt+0x6de>
 8016c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c02:	e007      	b.n	8016c14 <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	7a9b      	ldrb	r3, [r3, #10]
 8016c08:	f043 0320 	orr.w	r3, r3, #32
 8016c0c:	b2da      	uxtb	r2, r3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8016c12:	2300      	movs	r3, #0
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	3738      	adds	r7, #56	@ 0x38
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <phDriver_PinConfig>:
 * PORT/GPIO PIN API's
 *******************************************************************************/

/* GPIO FUNC_1:配置GPIO引脚的功能和属性 */
phStatus_t phDriver_PinConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc, phDriver_Pin_Config_t *pPinConfig)
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	607b      	str	r3, [r7, #4]
 8016c26:	460b      	mov	r3, r1
 8016c28:	817b      	strh	r3, [r7, #10]
 8016c2a:	4613      	mov	r3, r2
 8016c2c:	727b      	strb	r3, [r7, #9]
    /* 已经在GPIO_INIT实现 */
    return PH_DRIVER_SUCCESS;
 8016c2e:	2300      	movs	r3, #0
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	3714      	adds	r7, #20
 8016c34:	46bd      	mov	sp, r7
 8016c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3a:	4770      	bx	lr

08016c3c <phDriver_PinRead>:

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	807b      	strh	r3, [r7, #2]
 8016c48:	4613      	mov	r3, r2
 8016c4a:	707b      	strb	r3, [r7, #1]
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8016c4c:	887b      	ldrh	r3, [r7, #2]
 8016c4e:	4619      	mov	r1, r3
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f000 fed9 	bl	8017a08 <HAL_GPIO_ReadPin>
 8016c56:	4603      	mov	r3, r0
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3708      	adds	r7, #8
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	460b      	mov	r3, r1
 8016c6a:	807b      	strh	r3, [r7, #2]
 8016c6c:	4613      	mov	r3, r2
 8016c6e:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 8016c70:	787a      	ldrb	r2, [r7, #1]
 8016c72:	887b      	ldrh	r3, [r7, #2]
 8016c74:	4619      	mov	r1, r3
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f000 fede 	bl	8017a38 <HAL_GPIO_WritePin>
}
 8016c7c:	bf00      	nop
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	60b9      	str	r1, [r7, #8]
 8016c8e:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d11d      	bne.n	8016cd2 <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	d108      	bne.n	8016cae <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016ca2:	fb02 f303 	mul.w	r3, r2, r3
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f000 fb80 	bl	80173ac <HAL_Delay>
 8016cac:	e029      	b.n	8016d02 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016cb4:	d103      	bne.n	8016cbe <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 8016cb6:	68b8      	ldr	r0, [r7, #8]
 8016cb8:	f000 fb78 	bl	80173ac <HAL_Delay>
 8016cbc:	e021      	b.n	8016d02 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	4a12      	ldr	r2, [pc, #72]	@ (8016d0c <phDriver_TimerStart+0x88>)
 8016cc2:	4293      	cmp	r3, r2
 8016cc4:	d11d      	bne.n	8016d02 <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	b29b      	uxth	r3, r3
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7eb faae 	bl	800222c <delay_us>
 8016cd0:	e017      	b.n	8016d02 <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 8016cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8016d10 <phDriver_TimerStart+0x8c>)
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 8016cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8016d14 <phDriver_TimerStart+0x90>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	68ba      	ldr	r2, [r7, #8]
 8016cde:	3a01      	subs	r2, #1
 8016ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8016d14 <phDriver_TimerStart+0x90>)
 8016ce8:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 8016cea:	4b0a      	ldr	r3, [pc, #40]	@ (8016d14 <phDriver_TimerStart+0x90>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 8016cf2:	4b08      	ldr	r3, [pc, #32]	@ (8016d14 <phDriver_TimerStart+0x90>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f06f 0201 	mvn.w	r2, #1
 8016cfa:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 8016cfc:	4805      	ldr	r0, [pc, #20]	@ (8016d14 <phDriver_TimerStart+0x90>)
 8016cfe:	f002 fd4b 	bl	8019798 <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 8016d02:	2300      	movs	r3, #0
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3710      	adds	r7, #16
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}
 8016d0c:	000f4240 	.word	0x000f4240
 8016d10:	20001790 	.word	0x20001790
 8016d14:	200002c0 	.word	0x200002c0

08016d18 <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	af00      	add	r7, sp, #0
	 printf("NFC: Timer stop called (HAL_Delay mode - no action needed)\r\n");
 8016d1c:	4802      	ldr	r0, [pc, #8]	@ (8016d28 <phDriver_TimerStop+0x10>)
 8016d1e:	f006 f8e3 	bl	801cee8 <puts>

    return PH_DRIVER_SUCCESS;
 8016d22:	2300      	movs	r3, #0
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	bd80      	pop	{r7, pc}
 8016d28:	0801f7a8 	.word	0x0801f7a8

08016d2c <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b085      	sub	sp, #20
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	460b      	mov	r3, r1
 8016d36:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d002      	beq.n	8016d44 <phbalReg_Init+0x18>
 8016d3e:	887b      	ldrh	r3, [r7, #2]
 8016d40:	2b04      	cmp	r3, #4
 8016d42:	d002      	beq.n	8016d4a <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 8016d44:	f24f 1380 	movw	r3, #61824	@ 0xf180
 8016d48:	e007      	b.n	8016d5a <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 8016d50:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2201      	movs	r2, #1
 8016d56:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3714      	adds	r7, #20
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr
	...

08016d68 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b08a      	sub	sp, #40	@ 0x28
 8016d6c:	af02      	add	r7, sp, #8
 8016d6e:	60f8      	str	r0, [r7, #12]
 8016d70:	607a      	str	r2, [r7, #4]
 8016d72:	461a      	mov	r2, r3
 8016d74:	460b      	mov	r3, r1
 8016d76:	817b      	strh	r3, [r7, #10]
 8016d78:	4613      	mov	r3, r2
 8016d7a:	813b      	strh	r3, [r7, #8]
	uint8_t * pRxBuf = NULL;                    // 实际接收缓存指针
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	61fb      	str	r3, [r7, #28]
	uint8_t dummyTxByte = 0xFF;
 8016d80:	23ff      	movs	r3, #255	@ 0xff
 8016d82:	74fb      	strb	r3, [r7, #19]

	/* 只发送不接收 */
	if (pRxBuffer == NULL)
 8016d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d102      	bne.n	8016d90 <phbalReg_Exchange+0x28>
	{
		pRxBuf = NULL;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	61fb      	str	r3, [r7, #28]
 8016d8e:	e001      	b.n	8016d94 <phbalReg_Exchange+0x2c>
	}
	else /* 接收 */
	{
		pRxBuf = pRxBuffer;
 8016d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d92:	61fb      	str	r3, [r7, #28]
	}

	printf("SPITX>> ");
 8016d94:	4835      	ldr	r0, [pc, #212]	@ (8016e6c <phbalReg_Exchange+0x104>)
 8016d96:	f006 f837 	bl	801ce08 <iprintf>
	for (int i = 0; i < wTxLength; i++)
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	61bb      	str	r3, [r7, #24]
 8016d9e:	e02f      	b.n	8016e00 <phbalReg_Exchange+0x98>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;	// 发送1字节
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d004      	beq.n	8016db0 <phbalReg_Exchange+0x48>
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	687a      	ldr	r2, [r7, #4]
 8016daa:	4413      	add	r3, r2
 8016dac:	781b      	ldrb	r3, [r3, #0]
 8016dae:	e000      	b.n	8016db2 <phbalReg_Exchange+0x4a>
 8016db0:	7cfb      	ldrb	r3, [r7, #19]
 8016db2:	74bb      	strb	r3, [r7, #18]
		uint8_t rxByte = 0x00;	// 接收1字节
 8016db4:	2300      	movs	r3, #0
 8016db6:	747b      	strb	r3, [r7, #17]

		// 单字节全双工发送+接收
		if (HAL_SPI_TransmitReceive(&hspi3, &txByte, &rxByte, 1, 100) != HAL_OK)
 8016db8:	f107 0211 	add.w	r2, r7, #17
 8016dbc:	f107 0112 	add.w	r1, r7, #18
 8016dc0:	2364      	movs	r3, #100	@ 0x64
 8016dc2:	9300      	str	r3, [sp, #0]
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	482a      	ldr	r0, [pc, #168]	@ (8016e70 <phbalReg_Exchange+0x108>)
 8016dc8:	f002 f897 	bl	8018efa <HAL_SPI_TransmitReceive>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d002      	beq.n	8016dd8 <phbalReg_Exchange+0x70>
		{
			return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 8016dd2:	f24f 1381 	movw	r3, #61825	@ 0xf181
 8016dd6:	e045      	b.n	8016e64 <phbalReg_Exchange+0xfc>
		}

		printf("%02X ", txByte);  // 打印发送内容
 8016dd8:	7cbb      	ldrb	r3, [r7, #18]
 8016dda:	4619      	mov	r1, r3
 8016ddc:	4825      	ldr	r0, [pc, #148]	@ (8016e74 <phbalReg_Exchange+0x10c>)
 8016dde:	f006 f813 	bl	801ce08 <iprintf>

		if (pRxBuf != NULL && i < wRxBufSize)
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d008      	beq.n	8016dfa <phbalReg_Exchange+0x92>
 8016de8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016dea:	69ba      	ldr	r2, [r7, #24]
 8016dec:	429a      	cmp	r2, r3
 8016dee:	da04      	bge.n	8016dfa <phbalReg_Exchange+0x92>
		{
			pRxBuf[i] = rxByte;
 8016df0:	69bb      	ldr	r3, [r7, #24]
 8016df2:	69fa      	ldr	r2, [r7, #28]
 8016df4:	4413      	add	r3, r2
 8016df6:	7c7a      	ldrb	r2, [r7, #17]
 8016df8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < wTxLength; i++)
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	61bb      	str	r3, [r7, #24]
 8016e00:	893b      	ldrh	r3, [r7, #8]
 8016e02:	69ba      	ldr	r2, [r7, #24]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	dbcb      	blt.n	8016da0 <phbalReg_Exchange+0x38>
		}
	}
	printf("\n");
 8016e08:	200a      	movs	r0, #10
 8016e0a:	f006 f80f 	bl	801ce2c <putchar>

	if (pRxBuf != NULL)
 8016e0e:	69fb      	ldr	r3, [r7, #28]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d01b      	beq.n	8016e4c <phbalReg_Exchange+0xe4>
	{
		printf("SPIRX<< ");
 8016e14:	4818      	ldr	r0, [pc, #96]	@ (8016e78 <phbalReg_Exchange+0x110>)
 8016e16:	f005 fff7 	bl	801ce08 <iprintf>
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	617b      	str	r3, [r7, #20]
 8016e1e:	e00a      	b.n	8016e36 <phbalReg_Exchange+0xce>
		{
			printf("%02X ", pRxBuf[i]);
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	69fa      	ldr	r2, [r7, #28]
 8016e24:	4413      	add	r3, r2
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	4619      	mov	r1, r3
 8016e2a:	4812      	ldr	r0, [pc, #72]	@ (8016e74 <phbalReg_Exchange+0x10c>)
 8016e2c:	f005 ffec 	bl	801ce08 <iprintf>
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	3301      	adds	r3, #1
 8016e34:	617b      	str	r3, [r7, #20]
 8016e36:	893b      	ldrh	r3, [r7, #8]
 8016e38:	697a      	ldr	r2, [r7, #20]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	da03      	bge.n	8016e46 <phbalReg_Exchange+0xde>
 8016e3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016e40:	697a      	ldr	r2, [r7, #20]
 8016e42:	429a      	cmp	r2, r3
 8016e44:	dbec      	blt.n	8016e20 <phbalReg_Exchange+0xb8>
		}
		printf("\n");
 8016e46:	200a      	movs	r0, #10
 8016e48:	f005 fff0 	bl	801ce2c <putchar>
	}

	// 返回接收到的数据长度
	if (pRxLength != NULL)
 8016e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d007      	beq.n	8016e62 <phbalReg_Exchange+0xfa>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 8016e52:	69fb      	ldr	r3, [r7, #28]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d001      	beq.n	8016e5c <phbalReg_Exchange+0xf4>
 8016e58:	893a      	ldrh	r2, [r7, #8]
 8016e5a:	e000      	b.n	8016e5e <phbalReg_Exchange+0xf6>
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e60:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 8016e62:	2300      	movs	r3, #0
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3720      	adds	r7, #32
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}
 8016e6c:	0801f7e4 	.word	0x0801f7e4
 8016e70:	2000020c 	.word	0x2000020c
 8016e74:	0801f7f0 	.word	0x0801f7f0
 8016e78:	0801f7f8 	.word	0x0801f7f8

08016e7c <phOsal_EventCreate>:

    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 8016e86:	2300      	movs	r3, #0
 8016e88:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d002      	beq.n	8016e96 <phOsal_EventCreate+0x1a>
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d102      	bne.n	8016e9c <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8016e96:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8016e9a:	e033      	b.n	8016f04 <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 8016e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8016f0c <phOsal_EventCreate+0x90>)
 8016e9e:	6819      	ldr	r1, [r3, #0]
 8016ea0:	f107 030c 	add.w	r3, r7, #12
 8016ea4:	2205      	movs	r2, #5
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f000 f940 	bl	801712c <phOsal_NullOs_GetFreeIndex>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d009      	beq.n	8016ec6 <phOsal_EventCreate+0x4a>
 8016eb2:	4b16      	ldr	r3, [pc, #88]	@ (8016f0c <phOsal_EventCreate+0x90>)
 8016eb4:	6819      	ldr	r1, [r3, #0]
 8016eb6:	f107 030c 	add.w	r3, r7, #12
 8016eba:	2205      	movs	r2, #5
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 f935 	bl	801712c <phOsal_NullOs_GetFreeIndex>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	e01e      	b.n	8016f04 <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	4a11      	ldr	r2, [pc, #68]	@ (8016f10 <phOsal_EventCreate+0x94>)
 8016eca:	2100      	movs	r1, #0
 8016ecc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ed8:	461a      	mov	r2, r3
 8016eda:	4b0c      	ldr	r3, [pc, #48]	@ (8016f0c <phOsal_EventCreate+0x90>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	4313      	orrs	r3, r2
 8016ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8016f0c <phOsal_EventCreate+0x90>)
 8016ee2:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	4a09      	ldr	r2, [pc, #36]	@ (8016f10 <phOsal_EventCreate+0x94>)
 8016eea:	441a      	add	r2, r3
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	009b      	lsls	r3, r3, #2
 8016ef4:	4a06      	ldr	r2, [pc, #24]	@ (8016f10 <phOsal_EventCreate+0x94>)
 8016ef6:	441a      	add	r2, r3
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 8016efc:	68fa      	ldr	r2, [r7, #12]
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 8016f02:	2300      	movs	r3, #0
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3710      	adds	r7, #16
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	200017ac 	.word	0x200017ac
 8016f10:	20001798 	.word	0x20001798

08016f14 <phOsal_EventPend>:

phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b086      	sub	sp, #24
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	60f8      	str	r0, [r7, #12]
 8016f1c:	607a      	str	r2, [r7, #4]
 8016f1e:	603b      	str	r3, [r7, #0]
 8016f20:	460b      	mov	r3, r1
 8016f22:	72fb      	strb	r3, [r7, #11]
    phStatus_t status;

    printf("EventPend START\r\n");
 8016f24:	4842      	ldr	r0, [pc, #264]	@ (8017030 <phOsal_EventPend+0x11c>)
 8016f26:	f005 ffdf 	bl	801cee8 <puts>
    printf("WAIT: 0x%08lX\r\n", FlagsToWait);  // 看等待什么标志
 8016f2a:	6839      	ldr	r1, [r7, #0]
 8016f2c:	4841      	ldr	r0, [pc, #260]	@ (8017034 <phOsal_EventPend+0x120>)
 8016f2e:	f005 ff6b 	bl	801ce08 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d003      	beq.n	8016f40 <phOsal_EventPend+0x2c>
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d102      	bne.n	8016f46 <phOsal_EventPend+0x32>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8016f40:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8016f44:	e06f      	b.n	8017026 <phOsal_EventPend+0x112>
    }

    status = PH_OSAL_IO_TIMEOUT;
 8016f46:	2301      	movs	r3, #1
 8016f48:	82fb      	strh	r3, [r7, #22]

    /* Check whether infinite wait, if not config timer. */
    if (ticksToWait != PHOSAL_MAX_DELAY)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f50:	d002      	beq.n	8016f58 <phOsal_EventPend+0x44>
    {
        phOsal_StartTickTimer(ticksToWait);
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f000 f956 	bl	8017204 <phOsal_StartTickTimer>
    }

    while(1)
    {
        /* Enter Critical Section */
        phOsal_EnterCriticalSection();
 8016f58:	f000 f994 	bl	8017284 <phOsal_EnterCriticalSection>

        if ((((options & E_OS_EVENT_OPT_PEND_SET_ALL) && (((*((uint32_t *)(*eventHandle))) & FlagsToWait) == FlagsToWait))
 8016f5c:	7afb      	ldrb	r3, [r7, #11]
 8016f5e:	f003 0302 	and.w	r3, r3, #2
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d007      	beq.n	8016f76 <phOsal_EventPend+0x62>
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	681a      	ldr	r2, [r3, #0]
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	4013      	ands	r3, r2
 8016f70:	683a      	ldr	r2, [r7, #0]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d010      	beq.n	8016f98 <phOsal_EventPend+0x84>
            || ((!(options & E_OS_EVENT_OPT_PEND_SET_ALL)) && ((*((uint32_t *)(*eventHandle))) & FlagsToWait)))
 8016f76:	7afb      	ldrb	r3, [r7, #11]
 8016f78:	f003 0302 	and.w	r3, r3, #2
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d106      	bne.n	8016f8e <phOsal_EventPend+0x7a>
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	681a      	ldr	r2, [r3, #0]
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	4013      	ands	r3, r2
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d104      	bne.n	8016f98 <phOsal_EventPend+0x84>
            || (gbWaitTimedOut))
 8016f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8017038 <phOsal_EventPend+0x124>)
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d009      	beq.n	8016fac <phOsal_EventPend+0x98>
        {
            /* Exit Critical Section. */
            phOsal_ExitCriticalSection();
 8016f98:	f000 f97c 	bl	8017294 <phOsal_ExitCriticalSection>
            if (gbWaitTimedOut != 0x01)
 8016f9c:	4b26      	ldr	r3, [pc, #152]	@ (8017038 <phOsal_EventPend+0x124>)
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	d007      	beq.n	8016fb6 <phOsal_EventPend+0xa2>
            {
                status = PH_OSAL_SUCCESS;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8016faa:	e004      	b.n	8016fb6 <phOsal_EventPend+0xa2>
        }

        /* Exit Critical Section. */
        phOsal_ExitCriticalSection();
 8016fac:	f000 f972 	bl	8017294 <phOsal_ExitCriticalSection>

        /* Wait for interrupts/events to occur */
        phOsal_Sleep();
 8016fb0:	f000 f978 	bl	80172a4 <phOsal_Sleep>
        phOsal_EnterCriticalSection();
 8016fb4:	e7d0      	b.n	8016f58 <phOsal_EventPend+0x44>
            break;
 8016fb6:	bf00      	nop
    }

    /* Check whether infinite wait, if not config timer. */
    if (ticksToWait != PHOSAL_MAX_DELAY)
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fbe:	d001      	beq.n	8016fc4 <phOsal_EventPend+0xb0>
    {
        phOsal_StopTickTimer();
 8016fc0:	f000 f950 	bl	8017264 <phOsal_StopTickTimer>
    }
    gbWaitTimedOut = 0;
 8016fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8017038 <phOsal_EventPend+0x124>)
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	701a      	strb	r2, [r3, #0]

    phOsal_EnterCriticalSection();
 8016fca:	f000 f95b 	bl	8017284 <phOsal_EnterCriticalSection>
    if (pCurrFlags != NULL)
 8016fce:	6a3b      	ldr	r3, [r7, #32]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d004      	beq.n	8016fde <phOsal_EventPend+0xca>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	6a3b      	ldr	r3, [r7, #32]
 8016fdc:	601a      	str	r2, [r3, #0]
    }

    if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 8016fde:	7afb      	ldrb	r3, [r7, #11]
 8016fe0:	f003 0304 	and.w	r3, r3, #4
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d00a      	beq.n	8016ffe <phOsal_EventPend+0xea>
    {
        (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	4013      	ands	r3, r2
 8016ff2:	43d9      	mvns	r1, r3
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	681a      	ldr	r2, [r3, #0]
 8016ffa:	400a      	ands	r2, r1
 8016ffc:	601a      	str	r2, [r3, #0]
    }
    phOsal_ExitCriticalSection();
 8016ffe:	f000 f949 	bl	8017294 <phOsal_ExitCriticalSection>

    return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 8017002:	8afb      	ldrh	r3, [r7, #22]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d00d      	beq.n	8017024 <phOsal_EventPend+0x110>
 8017008:	8afb      	ldrh	r3, [r7, #22]
 801700a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801700e:	2b00      	cmp	r3, #0
 8017010:	d108      	bne.n	8017024 <phOsal_EventPend+0x110>
 8017012:	8afb      	ldrh	r3, [r7, #22]
 8017014:	b2db      	uxtb	r3, r3
 8017016:	b29b      	uxth	r3, r3
 8017018:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801701c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8017020:	b29b      	uxth	r3, r3
 8017022:	e000      	b.n	8017026 <phOsal_EventPend+0x112>
 8017024:	8afb      	ldrh	r3, [r7, #22]


}
 8017026:	4618      	mov	r0, r3
 8017028:	3718      	adds	r7, #24
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	0801f804 	.word	0x0801f804
 8017034:	0801f818 	.word	0x0801f818
 8017038:	20001794 	.word	0x20001794

0801703c <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b084      	sub	sp, #16
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	607a      	str	r2, [r7, #4]
 8017046:	603b      	str	r3, [r7, #0]
 8017048:	460b      	mov	r3, r1
 801704a:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08lX\r\n", FlagsToPost);  // 添加这行
 801704c:	6879      	ldr	r1, [r7, #4]
 801704e:	4815      	ldr	r0, [pc, #84]	@ (80170a4 <phOsal_EventPost+0x68>)
 8017050:	f005 feda 	bl	801ce08 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d003      	beq.n	8017062 <phOsal_EventPost+0x26>
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d105      	bne.n	801706e <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 8017062:	4811      	ldr	r0, [pc, #68]	@ (80170a8 <phOsal_EventPost+0x6c>)
 8017064:	f005 ff40 	bl	801cee8 <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8017068:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801706c:	e016      	b.n	801709c <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 801706e:	f000 f909 	bl	8017284 <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	6819      	ldr	r1, [r3, #0]
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	430a      	orrs	r2, r1
 8017080:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d004      	beq.n	8017092 <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 8017092:	f000 f8ff 	bl	8017294 <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 8017096:	f000 f90d 	bl	80172b4 <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 801709a:	2300      	movs	r3, #0

}
 801709c:	4618      	mov	r0, r3
 801709e:	3710      	adds	r7, #16
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	0801f828 	.word	0x0801f828
 80170a8:	0801f838 	.word	0x0801f838

080170ac <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b084      	sub	sp, #16
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	607a      	str	r2, [r7, #4]
 80170b6:	603b      	str	r3, [r7, #0]
 80170b8:	460b      	mov	r3, r1
 80170ba:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d003      	beq.n	80170ca <phOsal_EventClear+0x1e>
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d102      	bne.n	80170d0 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 80170ca:	f24f 0327 	movw	r3, #61479	@ 0xf027
 80170ce:	e015      	b.n	80170fc <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 80170d0:	f000 f8d8 	bl	8017284 <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 80170d4:	683b      	ldr	r3, [r7, #0]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d004      	beq.n	80170e4 <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	6819      	ldr	r1, [r3, #0]
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	43da      	mvns	r2, r3
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	400a      	ands	r2, r1
 80170f4:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 80170f6:	f000 f8cd 	bl	8017294 <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 80170fa:	2300      	movs	r3, #0
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	3710      	adds	r7, #16
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}

08017104 <phOsal_ThreadSecureStack>:
{
    return phOsal_NullOs_ReturnUnsupportedCmd();
}

phStatus_t phOsal_ThreadSecureStack(uint32_t stackSizeInNum)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
   return phOsal_NullOs_ReturnUnsupportedCmd();
 801710c:	f000 f805 	bl	801711a <phOsal_NullOs_ReturnUnsupportedCmd>
 8017110:	4603      	mov	r3, r0
}
 8017112:	4618      	mov	r0, r3
 8017114:	3708      	adds	r7, #8
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}

0801711a <phOsal_NullOs_ReturnUnsupportedCmd>:

/* *****************************************************************************************************************
 * Private Functions
 * ***************************************************************************************************************** */
static phStatus_t phOsal_NullOs_ReturnUnsupportedCmd(void)
{
 801711a:	b480      	push	{r7}
 801711c:	af00      	add	r7, sp, #0
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
 801711e:	f24f 0324 	movw	r3, #61476	@ 0xf024
}
 8017122:	4618      	mov	r0, r3
 8017124:	46bd      	mov	sp, r7
 8017126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712a:	4770      	bx	lr

0801712c <phOsal_NullOs_GetFreeIndex>:

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 801712c:	b480      	push	{r7}
 801712e:	b087      	sub	sp, #28
 8017130:	af00      	add	r7, sp, #0
 8017132:	60f8      	str	r0, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	2200      	movs	r2, #0
 801713c:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801713e:	e004      	b.n	801714a <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	1c5a      	adds	r2, r3, #1
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2201      	movs	r2, #1
 8017150:	fa02 f303 	lsl.w	r3, r2, r3
 8017154:	461a      	mov	r2, r3
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	4013      	ands	r3, r2
 801715a:	2b00      	cmp	r3, #0
 801715c:	d004      	beq.n	8017168 <phOsal_NullOs_GetFreeIndex+0x3c>
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	687a      	ldr	r2, [r7, #4]
 8017164:	429a      	cmp	r2, r3
 8017166:	d8eb      	bhi.n	8017140 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	687a      	ldr	r2, [r7, #4]
 801716e:	429a      	cmp	r2, r3
 8017170:	d103      	bne.n	801717a <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 8017172:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8017176:	82fb      	strh	r3, [r7, #22]
 8017178:	e001      	b.n	801717e <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 801717a:	2300      	movs	r3, #0
 801717c:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 801717e:	8afb      	ldrh	r3, [r7, #22]
}
 8017180:	4618      	mov	r0, r3
 8017182:	371c      	adds	r7, #28
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr

0801718c <phOsal_ConfigTick>:

    return PH_OSAL_SUCCESS;
}

static void phOsal_ConfigTick(void)
{
 801718c:	b490      	push	{r4, r7}
 801718e:	af00      	add	r7, sp, #0
    /* Disable systick */
    SysTick->CTRL = 0x0;
 8017190:	4b19      	ldr	r3, [pc, #100]	@ (80171f8 <phOsal_ConfigTick+0x6c>)
 8017192:	2200      	movs	r2, #0
 8017194:	601a      	str	r2, [r3, #0]

    /* Configure SysTick count down value to interrupt at the requested time. */
    if(qwLoadValue > SYSTICK_TIMER_MAX)
 8017196:	4b19      	ldr	r3, [pc, #100]	@ (80171fc <phOsal_ConfigTick+0x70>)
 8017198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801719c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80171a0:	f173 0300 	sbcs.w	r3, r3, #0
 80171a4:	d30e      	bcc.n	80171c4 <phOsal_ConfigTick+0x38>
    {
        qwLoadValue -= SYSTICK_TIMER_MAX;
 80171a6:	4b15      	ldr	r3, [pc, #84]	@ (80171fc <phOsal_ConfigTick+0x70>)
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	4c14      	ldr	r4, [pc, #80]	@ (8017200 <phOsal_ConfigTick+0x74>)
 80171ae:	1910      	adds	r0, r2, r4
 80171b0:	f143 31ff 	adc.w	r1, r3, #4294967295
 80171b4:	4b11      	ldr	r3, [pc, #68]	@ (80171fc <phOsal_ConfigTick+0x70>)
 80171b6:	e9c3 0100 	strd	r0, r1, [r3]
        SysTick->LOAD = SYSTICK_TIMER_MAX;
 80171ba:	4b0f      	ldr	r3, [pc, #60]	@ (80171f8 <phOsal_ConfigTick+0x6c>)
 80171bc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80171c0:	605a      	str	r2, [r3, #4]
 80171c2:	e00e      	b.n	80171e2 <phOsal_ConfigTick+0x56>
    }
    else
    {
        SysTick->LOAD = (uint32_t)(qwLoadValue & SYSTICK_TIMER_MAX);
 80171c4:	4b0d      	ldr	r3, [pc, #52]	@ (80171fc <phOsal_ConfigTick+0x70>)
 80171c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ca:	4613      	mov	r3, r2
 80171cc:	4a0a      	ldr	r2, [pc, #40]	@ (80171f8 <phOsal_ConfigTick+0x6c>)
 80171ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80171d2:	6053      	str	r3, [r2, #4]
        qwLoadValue = 0;
 80171d4:	4909      	ldr	r1, [pc, #36]	@ (80171fc <phOsal_ConfigTick+0x70>)
 80171d6:	f04f 0200 	mov.w	r2, #0
 80171da:	f04f 0300 	mov.w	r3, #0
 80171de:	e9c1 2300 	strd	r2, r3, [r1]
    }

    /*Clear the current count value and also SysTick CTRL.COUNTFLAG. */
    SysTick->VAL = 0;
 80171e2:	4b05      	ldr	r3, [pc, #20]	@ (80171f8 <phOsal_ConfigTick+0x6c>)
 80171e4:	2200      	movs	r2, #0
 80171e6:	609a      	str	r2, [r3, #8]

    SysTick->CTRL = SYSTICK_TIMER_CLK | SYSTICK_TIMER_INT | SYSTICK_TIMER_ENABLE;
 80171e8:	4b03      	ldr	r3, [pc, #12]	@ (80171f8 <phOsal_ConfigTick+0x6c>)
 80171ea:	2207      	movs	r2, #7
 80171ec:	601a      	str	r2, [r3, #0]
}
 80171ee:	bf00      	nop
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bc90      	pop	{r4, r7}
 80171f4:	4770      	bx	lr
 80171f6:	bf00      	nop
 80171f8:	e000e010 	.word	0xe000e010
 80171fc:	200017b0 	.word	0x200017b0
 8017200:	ff000001 	.word	0xff000001

08017204 <phOsal_StartTickTimer>:

phStatus_t phOsal_StartTickTimer(uint32_t dwTimeMilliSecs)
{
 8017204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017208:	b082      	sub	sp, #8
 801720a:	af00      	add	r7, sp, #0
 801720c:	6078      	str	r0, [r7, #4]
    qwLoadValue = ((uint64_t)dwTimeMilliSecs * (uint64_t)dwSysTickTimerFreq)/PH_PLATFORM_TIMER_UNIT_MS;
 801720e:	6879      	ldr	r1, [r7, #4]
 8017210:	2000      	movs	r0, #0
 8017212:	4688      	mov	r8, r1
 8017214:	4681      	mov	r9, r0
 8017216:	4911      	ldr	r1, [pc, #68]	@ (801725c <phOsal_StartTickTimer+0x58>)
 8017218:	6809      	ldr	r1, [r1, #0]
 801721a:	2000      	movs	r0, #0
 801721c:	460a      	mov	r2, r1
 801721e:	4603      	mov	r3, r0
 8017220:	fb02 f009 	mul.w	r0, r2, r9
 8017224:	fb08 f103 	mul.w	r1, r8, r3
 8017228:	4401      	add	r1, r0
 801722a:	fba8 4502 	umull	r4, r5, r8, r2
 801722e:	194b      	adds	r3, r1, r5
 8017230:	461d      	mov	r5, r3
 8017232:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017236:	f04f 0300 	mov.w	r3, #0
 801723a:	4620      	mov	r0, r4
 801723c:	4629      	mov	r1, r5
 801723e:	f7e9 fd03 	bl	8000c48 <__aeabi_uldivmod>
 8017242:	4602      	mov	r2, r0
 8017244:	460b      	mov	r3, r1
 8017246:	4906      	ldr	r1, [pc, #24]	@ (8017260 <phOsal_StartTickTimer+0x5c>)
 8017248:	e9c1 2300 	strd	r2, r3, [r1]

    phOsal_ConfigTick();
 801724c:	f7ff ff9e 	bl	801718c <phOsal_ConfigTick>

    return PH_OSAL_SUCCESS;
 8017250:	2300      	movs	r3, #0
}
 8017252:	4618      	mov	r0, r3
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801725c:	200017b8 	.word	0x200017b8
 8017260:	200017b0 	.word	0x200017b0

08017264 <phOsal_StopTickTimer>:

phStatus_t phOsal_StopTickTimer(void)
{
 8017264:	b480      	push	{r7}
 8017266:	af00      	add	r7, sp, #0
    /* Disable systick and clear the Load value. */
    SysTick->CTRL = 0x0;
 8017268:	4b05      	ldr	r3, [pc, #20]	@ (8017280 <phOsal_StopTickTimer+0x1c>)
 801726a:	2200      	movs	r2, #0
 801726c:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x0;
 801726e:	4b04      	ldr	r3, [pc, #16]	@ (8017280 <phOsal_StopTickTimer+0x1c>)
 8017270:	2200      	movs	r2, #0
 8017272:	605a      	str	r2, [r3, #4]

    return PH_OSAL_SUCCESS;
 8017274:	2300      	movs	r3, #0
}
 8017276:	4618      	mov	r0, r3
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr
 8017280:	e000e010 	.word	0xe000e010

08017284 <phOsal_EnterCriticalSection>:

void phOsal_EnterCriticalSection(void)
{
 8017284:	b480      	push	{r7}
 8017286:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 8017288:	b672      	cpsid	i
}
 801728a:	bf00      	nop
 801728c:	46bd      	mov	sp, r7
 801728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017292:	4770      	bx	lr

08017294 <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 8017294:	b480      	push	{r7}
 8017296:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 8017298:	b662      	cpsie	i
}
 801729a:	bf00      	nop
 801729c:	46bd      	mov	sp, r7
 801729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a2:	4770      	bx	lr

080172a4 <phOsal_Sleep>:

void phOsal_Sleep(void)
{
 80172a4:	b480      	push	{r7}
 80172a6:	af00      	add	r7, sp, #0
    __WFE();
 80172a8:	bf20      	wfe
}
 80172aa:	bf00      	nop
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <phOsal_WakeUp>:

void phOsal_WakeUp(void)
{
 80172b4:	b480      	push	{r7}
 80172b6:	af00      	add	r7, sp, #0
    __SEV();
 80172b8:	bf40      	sev
}
 80172ba:	bf00      	nop
 80172bc:	46bd      	mov	sp, r7
 80172be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c2:	4770      	bx	lr

080172c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b082      	sub	sp, #8
 80172c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80172ca:	2300      	movs	r3, #0
 80172cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80172ce:	2003      	movs	r0, #3
 80172d0:	f000 f960 	bl	8017594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80172d4:	2001      	movs	r0, #1
 80172d6:	f000 f80d 	bl	80172f4 <HAL_InitTick>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d002      	beq.n	80172e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80172e0:	2301      	movs	r3, #1
 80172e2:	71fb      	strb	r3, [r7, #7]
 80172e4:	e001      	b.n	80172ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80172e6:	f7ea fcbf 	bl	8001c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80172ea:	79fb      	ldrb	r3, [r7, #7]
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80172fc:	2300      	movs	r3, #0
 80172fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8017300:	4b17      	ldr	r3, [pc, #92]	@ (8017360 <HAL_InitTick+0x6c>)
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d023      	beq.n	8017350 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8017308:	4b16      	ldr	r3, [pc, #88]	@ (8017364 <HAL_InitTick+0x70>)
 801730a:	681a      	ldr	r2, [r3, #0]
 801730c:	4b14      	ldr	r3, [pc, #80]	@ (8017360 <HAL_InitTick+0x6c>)
 801730e:	781b      	ldrb	r3, [r3, #0]
 8017310:	4619      	mov	r1, r3
 8017312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017316:	fbb3 f3f1 	udiv	r3, r3, r1
 801731a:	fbb2 f3f3 	udiv	r3, r2, r3
 801731e:	4618      	mov	r0, r3
 8017320:	f000 f96d 	bl	80175fe <HAL_SYSTICK_Config>
 8017324:	4603      	mov	r3, r0
 8017326:	2b00      	cmp	r3, #0
 8017328:	d10f      	bne.n	801734a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2b0f      	cmp	r3, #15
 801732e:	d809      	bhi.n	8017344 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017330:	2200      	movs	r2, #0
 8017332:	6879      	ldr	r1, [r7, #4]
 8017334:	f04f 30ff 	mov.w	r0, #4294967295
 8017338:	f000 f937 	bl	80175aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801733c:	4a0a      	ldr	r2, [pc, #40]	@ (8017368 <HAL_InitTick+0x74>)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6013      	str	r3, [r2, #0]
 8017342:	e007      	b.n	8017354 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8017344:	2301      	movs	r3, #1
 8017346:	73fb      	strb	r3, [r7, #15]
 8017348:	e004      	b.n	8017354 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 801734a:	2301      	movs	r3, #1
 801734c:	73fb      	strb	r3, [r7, #15]
 801734e:	e001      	b.n	8017354 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8017350:	2301      	movs	r3, #1
 8017352:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8017354:	7bfb      	ldrb	r3, [r7, #15]
}
 8017356:	4618      	mov	r0, r3
 8017358:	3710      	adds	r7, #16
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
 801735e:	bf00      	nop
 8017360:	2000001c 	.word	0x2000001c
 8017364:	20000004 	.word	0x20000004
 8017368:	20000018 	.word	0x20000018

0801736c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801736c:	b480      	push	{r7}
 801736e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8017370:	4b06      	ldr	r3, [pc, #24]	@ (801738c <HAL_IncTick+0x20>)
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	461a      	mov	r2, r3
 8017376:	4b06      	ldr	r3, [pc, #24]	@ (8017390 <HAL_IncTick+0x24>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	4413      	add	r3, r2
 801737c:	4a04      	ldr	r2, [pc, #16]	@ (8017390 <HAL_IncTick+0x24>)
 801737e:	6013      	str	r3, [r2, #0]
}
 8017380:	bf00      	nop
 8017382:	46bd      	mov	sp, r7
 8017384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop
 801738c:	2000001c 	.word	0x2000001c
 8017390:	200017bc 	.word	0x200017bc

08017394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017394:	b480      	push	{r7}
 8017396:	af00      	add	r7, sp, #0
  return uwTick;
 8017398:	4b03      	ldr	r3, [pc, #12]	@ (80173a8 <HAL_GetTick+0x14>)
 801739a:	681b      	ldr	r3, [r3, #0]
}
 801739c:	4618      	mov	r0, r3
 801739e:	46bd      	mov	sp, r7
 80173a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a4:	4770      	bx	lr
 80173a6:	bf00      	nop
 80173a8:	200017bc 	.word	0x200017bc

080173ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b084      	sub	sp, #16
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80173b4:	f7ff ffee 	bl	8017394 <HAL_GetTick>
 80173b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173c4:	d005      	beq.n	80173d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80173c6:	4b0a      	ldr	r3, [pc, #40]	@ (80173f0 <HAL_Delay+0x44>)
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	461a      	mov	r2, r3
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	4413      	add	r3, r2
 80173d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80173d2:	bf00      	nop
 80173d4:	f7ff ffde 	bl	8017394 <HAL_GetTick>
 80173d8:	4602      	mov	r2, r0
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	68fa      	ldr	r2, [r7, #12]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d8f7      	bhi.n	80173d4 <HAL_Delay+0x28>
  {
  }
}
 80173e4:	bf00      	nop
 80173e6:	bf00      	nop
 80173e8:	3710      	adds	r7, #16
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}
 80173ee:	bf00      	nop
 80173f0:	2000001c 	.word	0x2000001c

080173f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80173f4:	b480      	push	{r7}
 80173f6:	b085      	sub	sp, #20
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f003 0307 	and.w	r3, r3, #7
 8017402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017404:	4b0c      	ldr	r3, [pc, #48]	@ (8017438 <__NVIC_SetPriorityGrouping+0x44>)
 8017406:	68db      	ldr	r3, [r3, #12]
 8017408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801740a:	68ba      	ldr	r2, [r7, #8]
 801740c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8017410:	4013      	ands	r3, r2
 8017412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801741c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8017420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017426:	4a04      	ldr	r2, [pc, #16]	@ (8017438 <__NVIC_SetPriorityGrouping+0x44>)
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	60d3      	str	r3, [r2, #12]
}
 801742c:	bf00      	nop
 801742e:	3714      	adds	r7, #20
 8017430:	46bd      	mov	sp, r7
 8017432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017436:	4770      	bx	lr
 8017438:	e000ed00 	.word	0xe000ed00

0801743c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801743c:	b480      	push	{r7}
 801743e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017440:	4b04      	ldr	r3, [pc, #16]	@ (8017454 <__NVIC_GetPriorityGrouping+0x18>)
 8017442:	68db      	ldr	r3, [r3, #12]
 8017444:	0a1b      	lsrs	r3, r3, #8
 8017446:	f003 0307 	and.w	r3, r3, #7
}
 801744a:	4618      	mov	r0, r3
 801744c:	46bd      	mov	sp, r7
 801744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017452:	4770      	bx	lr
 8017454:	e000ed00 	.word	0xe000ed00

08017458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017458:	b480      	push	{r7}
 801745a:	b083      	sub	sp, #12
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017466:	2b00      	cmp	r3, #0
 8017468:	db0b      	blt.n	8017482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801746a:	79fb      	ldrb	r3, [r7, #7]
 801746c:	f003 021f 	and.w	r2, r3, #31
 8017470:	4907      	ldr	r1, [pc, #28]	@ (8017490 <__NVIC_EnableIRQ+0x38>)
 8017472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017476:	095b      	lsrs	r3, r3, #5
 8017478:	2001      	movs	r0, #1
 801747a:	fa00 f202 	lsl.w	r2, r0, r2
 801747e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8017482:	bf00      	nop
 8017484:	370c      	adds	r7, #12
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop
 8017490:	e000e100 	.word	0xe000e100

08017494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8017494:	b480      	push	{r7}
 8017496:	b083      	sub	sp, #12
 8017498:	af00      	add	r7, sp, #0
 801749a:	4603      	mov	r3, r0
 801749c:	6039      	str	r1, [r7, #0]
 801749e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80174a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	db0a      	blt.n	80174be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	b2da      	uxtb	r2, r3
 80174ac:	490c      	ldr	r1, [pc, #48]	@ (80174e0 <__NVIC_SetPriority+0x4c>)
 80174ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174b2:	0112      	lsls	r2, r2, #4
 80174b4:	b2d2      	uxtb	r2, r2
 80174b6:	440b      	add	r3, r1
 80174b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80174bc:	e00a      	b.n	80174d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	b2da      	uxtb	r2, r3
 80174c2:	4908      	ldr	r1, [pc, #32]	@ (80174e4 <__NVIC_SetPriority+0x50>)
 80174c4:	79fb      	ldrb	r3, [r7, #7]
 80174c6:	f003 030f 	and.w	r3, r3, #15
 80174ca:	3b04      	subs	r3, #4
 80174cc:	0112      	lsls	r2, r2, #4
 80174ce:	b2d2      	uxtb	r2, r2
 80174d0:	440b      	add	r3, r1
 80174d2:	761a      	strb	r2, [r3, #24]
}
 80174d4:	bf00      	nop
 80174d6:	370c      	adds	r7, #12
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr
 80174e0:	e000e100 	.word	0xe000e100
 80174e4:	e000ed00 	.word	0xe000ed00

080174e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b089      	sub	sp, #36	@ 0x24
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	f003 0307 	and.w	r3, r3, #7
 80174fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80174fc:	69fb      	ldr	r3, [r7, #28]
 80174fe:	f1c3 0307 	rsb	r3, r3, #7
 8017502:	2b04      	cmp	r3, #4
 8017504:	bf28      	it	cs
 8017506:	2304      	movcs	r3, #4
 8017508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	3304      	adds	r3, #4
 801750e:	2b06      	cmp	r3, #6
 8017510:	d902      	bls.n	8017518 <NVIC_EncodePriority+0x30>
 8017512:	69fb      	ldr	r3, [r7, #28]
 8017514:	3b03      	subs	r3, #3
 8017516:	e000      	b.n	801751a <NVIC_EncodePriority+0x32>
 8017518:	2300      	movs	r3, #0
 801751a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801751c:	f04f 32ff 	mov.w	r2, #4294967295
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	fa02 f303 	lsl.w	r3, r2, r3
 8017526:	43da      	mvns	r2, r3
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	401a      	ands	r2, r3
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017530:	f04f 31ff 	mov.w	r1, #4294967295
 8017534:	697b      	ldr	r3, [r7, #20]
 8017536:	fa01 f303 	lsl.w	r3, r1, r3
 801753a:	43d9      	mvns	r1, r3
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017540:	4313      	orrs	r3, r2
         );
}
 8017542:	4618      	mov	r0, r3
 8017544:	3724      	adds	r7, #36	@ 0x24
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr
	...

08017550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b082      	sub	sp, #8
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	3b01      	subs	r3, #1
 801755c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017560:	d301      	bcc.n	8017566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017562:	2301      	movs	r3, #1
 8017564:	e00f      	b.n	8017586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017566:	4a0a      	ldr	r2, [pc, #40]	@ (8017590 <SysTick_Config+0x40>)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	3b01      	subs	r3, #1
 801756c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801756e:	210f      	movs	r1, #15
 8017570:	f04f 30ff 	mov.w	r0, #4294967295
 8017574:	f7ff ff8e 	bl	8017494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8017578:	4b05      	ldr	r3, [pc, #20]	@ (8017590 <SysTick_Config+0x40>)
 801757a:	2200      	movs	r2, #0
 801757c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801757e:	4b04      	ldr	r3, [pc, #16]	@ (8017590 <SysTick_Config+0x40>)
 8017580:	2207      	movs	r2, #7
 8017582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017584:	2300      	movs	r3, #0
}
 8017586:	4618      	mov	r0, r3
 8017588:	3708      	adds	r7, #8
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}
 801758e:	bf00      	nop
 8017590:	e000e010 	.word	0xe000e010

08017594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b082      	sub	sp, #8
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f7ff ff29 	bl	80173f4 <__NVIC_SetPriorityGrouping>
}
 80175a2:	bf00      	nop
 80175a4:	3708      	adds	r7, #8
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}

080175aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80175aa:	b580      	push	{r7, lr}
 80175ac:	b086      	sub	sp, #24
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	4603      	mov	r3, r0
 80175b2:	60b9      	str	r1, [r7, #8]
 80175b4:	607a      	str	r2, [r7, #4]
 80175b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80175b8:	2300      	movs	r3, #0
 80175ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80175bc:	f7ff ff3e 	bl	801743c <__NVIC_GetPriorityGrouping>
 80175c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80175c2:	687a      	ldr	r2, [r7, #4]
 80175c4:	68b9      	ldr	r1, [r7, #8]
 80175c6:	6978      	ldr	r0, [r7, #20]
 80175c8:	f7ff ff8e 	bl	80174e8 <NVIC_EncodePriority>
 80175cc:	4602      	mov	r2, r0
 80175ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175d2:	4611      	mov	r1, r2
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7ff ff5d 	bl	8017494 <__NVIC_SetPriority>
}
 80175da:	bf00      	nop
 80175dc:	3718      	adds	r7, #24
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}

080175e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80175e2:	b580      	push	{r7, lr}
 80175e4:	b082      	sub	sp, #8
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	4603      	mov	r3, r0
 80175ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80175ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7ff ff31 	bl	8017458 <__NVIC_EnableIRQ>
}
 80175f6:	bf00      	nop
 80175f8:	3708      	adds	r7, #8
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b082      	sub	sp, #8
 8017602:	af00      	add	r7, sp, #0
 8017604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f7ff ffa2 	bl	8017550 <SysTick_Config>
 801760c:	4603      	mov	r3, r0
}
 801760e:	4618      	mov	r0, r3
 8017610:	3708      	adds	r7, #8
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}

08017616 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8017616:	b480      	push	{r7}
 8017618:	b085      	sub	sp, #20
 801761a:	af00      	add	r7, sp, #0
 801761c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801761e:	2300      	movs	r3, #0
 8017620:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8017628:	b2db      	uxtb	r3, r3
 801762a:	2b02      	cmp	r3, #2
 801762c:	d008      	beq.n	8017640 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2204      	movs	r2, #4
 8017632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2200      	movs	r2, #0
 8017638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801763c:	2301      	movs	r3, #1
 801763e:	e022      	b.n	8017686 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	681a      	ldr	r2, [r3, #0]
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	f022 020e 	bic.w	r2, r2, #14
 801764e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	f022 0201 	bic.w	r2, r2, #1
 801765e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017664:	f003 021c 	and.w	r2, r3, #28
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801766c:	2101      	movs	r1, #1
 801766e:	fa01 f202 	lsl.w	r2, r1, r2
 8017672:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2201      	movs	r2, #1
 8017678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2200      	movs	r2, #0
 8017680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8017684:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8017686:	4618      	mov	r0, r3
 8017688:	3714      	adds	r7, #20
 801768a:	46bd      	mov	sp, r7
 801768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017690:	4770      	bx	lr

08017692 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8017692:	b580      	push	{r7, lr}
 8017694:	b084      	sub	sp, #16
 8017696:	af00      	add	r7, sp, #0
 8017698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801769a:	2300      	movs	r3, #0
 801769c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80176a4:	b2db      	uxtb	r3, r3
 80176a6:	2b02      	cmp	r3, #2
 80176a8:	d005      	beq.n	80176b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	2204      	movs	r2, #4
 80176ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80176b0:	2301      	movs	r3, #1
 80176b2:	73fb      	strb	r3, [r7, #15]
 80176b4:	e029      	b.n	801770a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f022 020e 	bic.w	r2, r2, #14
 80176c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	f022 0201 	bic.w	r2, r2, #1
 80176d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80176da:	f003 021c 	and.w	r2, r3, #28
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176e2:	2101      	movs	r1, #1
 80176e4:	fa01 f202 	lsl.w	r2, r1, r2
 80176e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	2201      	movs	r2, #1
 80176ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2200      	movs	r2, #0
 80176f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d003      	beq.n	801770a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	4798      	blx	r3
    }
  }
  return status;
 801770a:	7bfb      	ldrb	r3, [r7, #15]
}
 801770c:	4618      	mov	r0, r3
 801770e:	3710      	adds	r7, #16
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}

08017714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017714:	b480      	push	{r7}
 8017716:	b087      	sub	sp, #28
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801771e:	2300      	movs	r3, #0
 8017720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8017722:	e154      	b.n	80179ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8017724:	683b      	ldr	r3, [r7, #0]
 8017726:	681a      	ldr	r2, [r3, #0]
 8017728:	2101      	movs	r1, #1
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	fa01 f303 	lsl.w	r3, r1, r3
 8017730:	4013      	ands	r3, r2
 8017732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	2b00      	cmp	r3, #0
 8017738:	f000 8146 	beq.w	80179c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	685b      	ldr	r3, [r3, #4]
 8017740:	f003 0303 	and.w	r3, r3, #3
 8017744:	2b01      	cmp	r3, #1
 8017746:	d005      	beq.n	8017754 <HAL_GPIO_Init+0x40>
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	685b      	ldr	r3, [r3, #4]
 801774c:	f003 0303 	and.w	r3, r3, #3
 8017750:	2b02      	cmp	r3, #2
 8017752:	d130      	bne.n	80177b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	689b      	ldr	r3, [r3, #8]
 8017758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	005b      	lsls	r3, r3, #1
 801775e:	2203      	movs	r2, #3
 8017760:	fa02 f303 	lsl.w	r3, r2, r3
 8017764:	43db      	mvns	r3, r3
 8017766:	693a      	ldr	r2, [r7, #16]
 8017768:	4013      	ands	r3, r2
 801776a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	68da      	ldr	r2, [r3, #12]
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	005b      	lsls	r3, r3, #1
 8017774:	fa02 f303 	lsl.w	r3, r2, r3
 8017778:	693a      	ldr	r2, [r7, #16]
 801777a:	4313      	orrs	r3, r2
 801777c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	693a      	ldr	r2, [r7, #16]
 8017782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	685b      	ldr	r3, [r3, #4]
 8017788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801778a:	2201      	movs	r2, #1
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	fa02 f303 	lsl.w	r3, r2, r3
 8017792:	43db      	mvns	r3, r3
 8017794:	693a      	ldr	r2, [r7, #16]
 8017796:	4013      	ands	r3, r2
 8017798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	091b      	lsrs	r3, r3, #4
 80177a0:	f003 0201 	and.w	r2, r3, #1
 80177a4:	697b      	ldr	r3, [r7, #20]
 80177a6:	fa02 f303 	lsl.w	r3, r2, r3
 80177aa:	693a      	ldr	r2, [r7, #16]
 80177ac:	4313      	orrs	r3, r2
 80177ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	693a      	ldr	r2, [r7, #16]
 80177b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	f003 0303 	and.w	r3, r3, #3
 80177be:	2b03      	cmp	r3, #3
 80177c0:	d017      	beq.n	80177f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	68db      	ldr	r3, [r3, #12]
 80177c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	2203      	movs	r2, #3
 80177ce:	fa02 f303 	lsl.w	r3, r2, r3
 80177d2:	43db      	mvns	r3, r3
 80177d4:	693a      	ldr	r2, [r7, #16]
 80177d6:	4013      	ands	r3, r2
 80177d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	689a      	ldr	r2, [r3, #8]
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	005b      	lsls	r3, r3, #1
 80177e2:	fa02 f303 	lsl.w	r3, r2, r3
 80177e6:	693a      	ldr	r2, [r7, #16]
 80177e8:	4313      	orrs	r3, r2
 80177ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	693a      	ldr	r2, [r7, #16]
 80177f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	f003 0303 	and.w	r3, r3, #3
 80177fa:	2b02      	cmp	r3, #2
 80177fc:	d123      	bne.n	8017846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	08da      	lsrs	r2, r3, #3
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	3208      	adds	r2, #8
 8017806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801780a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	f003 0307 	and.w	r3, r3, #7
 8017812:	009b      	lsls	r3, r3, #2
 8017814:	220f      	movs	r2, #15
 8017816:	fa02 f303 	lsl.w	r3, r2, r3
 801781a:	43db      	mvns	r3, r3
 801781c:	693a      	ldr	r2, [r7, #16]
 801781e:	4013      	ands	r3, r2
 8017820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	691a      	ldr	r2, [r3, #16]
 8017826:	697b      	ldr	r3, [r7, #20]
 8017828:	f003 0307 	and.w	r3, r3, #7
 801782c:	009b      	lsls	r3, r3, #2
 801782e:	fa02 f303 	lsl.w	r3, r2, r3
 8017832:	693a      	ldr	r2, [r7, #16]
 8017834:	4313      	orrs	r3, r2
 8017836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	08da      	lsrs	r2, r3, #3
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	3208      	adds	r2, #8
 8017840:	6939      	ldr	r1, [r7, #16]
 8017842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	005b      	lsls	r3, r3, #1
 8017850:	2203      	movs	r2, #3
 8017852:	fa02 f303 	lsl.w	r3, r2, r3
 8017856:	43db      	mvns	r3, r3
 8017858:	693a      	ldr	r2, [r7, #16]
 801785a:	4013      	ands	r3, r2
 801785c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	685b      	ldr	r3, [r3, #4]
 8017862:	f003 0203 	and.w	r2, r3, #3
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	005b      	lsls	r3, r3, #1
 801786a:	fa02 f303 	lsl.w	r3, r2, r3
 801786e:	693a      	ldr	r2, [r7, #16]
 8017870:	4313      	orrs	r3, r2
 8017872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	693a      	ldr	r2, [r7, #16]
 8017878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	685b      	ldr	r3, [r3, #4]
 801787e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017882:	2b00      	cmp	r3, #0
 8017884:	f000 80a0 	beq.w	80179c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017888:	4b58      	ldr	r3, [pc, #352]	@ (80179ec <HAL_GPIO_Init+0x2d8>)
 801788a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801788c:	4a57      	ldr	r2, [pc, #348]	@ (80179ec <HAL_GPIO_Init+0x2d8>)
 801788e:	f043 0301 	orr.w	r3, r3, #1
 8017892:	6613      	str	r3, [r2, #96]	@ 0x60
 8017894:	4b55      	ldr	r3, [pc, #340]	@ (80179ec <HAL_GPIO_Init+0x2d8>)
 8017896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017898:	f003 0301 	and.w	r3, r3, #1
 801789c:	60bb      	str	r3, [r7, #8]
 801789e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80178a0:	4a53      	ldr	r2, [pc, #332]	@ (80179f0 <HAL_GPIO_Init+0x2dc>)
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	089b      	lsrs	r3, r3, #2
 80178a6:	3302      	adds	r3, #2
 80178a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80178ae:	697b      	ldr	r3, [r7, #20]
 80178b0:	f003 0303 	and.w	r3, r3, #3
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	220f      	movs	r2, #15
 80178b8:	fa02 f303 	lsl.w	r3, r2, r3
 80178bc:	43db      	mvns	r3, r3
 80178be:	693a      	ldr	r2, [r7, #16]
 80178c0:	4013      	ands	r3, r2
 80178c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80178ca:	d019      	beq.n	8017900 <HAL_GPIO_Init+0x1ec>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	4a49      	ldr	r2, [pc, #292]	@ (80179f4 <HAL_GPIO_Init+0x2e0>)
 80178d0:	4293      	cmp	r3, r2
 80178d2:	d013      	beq.n	80178fc <HAL_GPIO_Init+0x1e8>
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	4a48      	ldr	r2, [pc, #288]	@ (80179f8 <HAL_GPIO_Init+0x2e4>)
 80178d8:	4293      	cmp	r3, r2
 80178da:	d00d      	beq.n	80178f8 <HAL_GPIO_Init+0x1e4>
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	4a47      	ldr	r2, [pc, #284]	@ (80179fc <HAL_GPIO_Init+0x2e8>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d007      	beq.n	80178f4 <HAL_GPIO_Init+0x1e0>
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	4a46      	ldr	r2, [pc, #280]	@ (8017a00 <HAL_GPIO_Init+0x2ec>)
 80178e8:	4293      	cmp	r3, r2
 80178ea:	d101      	bne.n	80178f0 <HAL_GPIO_Init+0x1dc>
 80178ec:	2304      	movs	r3, #4
 80178ee:	e008      	b.n	8017902 <HAL_GPIO_Init+0x1ee>
 80178f0:	2307      	movs	r3, #7
 80178f2:	e006      	b.n	8017902 <HAL_GPIO_Init+0x1ee>
 80178f4:	2303      	movs	r3, #3
 80178f6:	e004      	b.n	8017902 <HAL_GPIO_Init+0x1ee>
 80178f8:	2302      	movs	r3, #2
 80178fa:	e002      	b.n	8017902 <HAL_GPIO_Init+0x1ee>
 80178fc:	2301      	movs	r3, #1
 80178fe:	e000      	b.n	8017902 <HAL_GPIO_Init+0x1ee>
 8017900:	2300      	movs	r3, #0
 8017902:	697a      	ldr	r2, [r7, #20]
 8017904:	f002 0203 	and.w	r2, r2, #3
 8017908:	0092      	lsls	r2, r2, #2
 801790a:	4093      	lsls	r3, r2
 801790c:	693a      	ldr	r2, [r7, #16]
 801790e:	4313      	orrs	r3, r2
 8017910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8017912:	4937      	ldr	r1, [pc, #220]	@ (80179f0 <HAL_GPIO_Init+0x2dc>)
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	089b      	lsrs	r3, r3, #2
 8017918:	3302      	adds	r3, #2
 801791a:	693a      	ldr	r2, [r7, #16]
 801791c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8017920:	4b38      	ldr	r3, [pc, #224]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 8017922:	689b      	ldr	r3, [r3, #8]
 8017924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	43db      	mvns	r3, r3
 801792a:	693a      	ldr	r2, [r7, #16]
 801792c:	4013      	ands	r3, r2
 801792e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	685b      	ldr	r3, [r3, #4]
 8017934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017938:	2b00      	cmp	r3, #0
 801793a:	d003      	beq.n	8017944 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801793c:	693a      	ldr	r2, [r7, #16]
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	4313      	orrs	r3, r2
 8017942:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8017944:	4a2f      	ldr	r2, [pc, #188]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 8017946:	693b      	ldr	r3, [r7, #16]
 8017948:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801794a:	4b2e      	ldr	r3, [pc, #184]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 801794c:	68db      	ldr	r3, [r3, #12]
 801794e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	43db      	mvns	r3, r3
 8017954:	693a      	ldr	r2, [r7, #16]
 8017956:	4013      	ands	r3, r2
 8017958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8017962:	2b00      	cmp	r3, #0
 8017964:	d003      	beq.n	801796e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8017966:	693a      	ldr	r2, [r7, #16]
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	4313      	orrs	r3, r2
 801796c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801796e:	4a25      	ldr	r2, [pc, #148]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8017974:	4b23      	ldr	r3, [pc, #140]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	43db      	mvns	r3, r3
 801797e:	693a      	ldr	r2, [r7, #16]
 8017980:	4013      	ands	r3, r2
 8017982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801798c:	2b00      	cmp	r3, #0
 801798e:	d003      	beq.n	8017998 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8017990:	693a      	ldr	r2, [r7, #16]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	4313      	orrs	r3, r2
 8017996:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8017998:	4a1a      	ldr	r2, [pc, #104]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 801799a:	693b      	ldr	r3, [r7, #16]
 801799c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 801799e:	4b19      	ldr	r3, [pc, #100]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	43db      	mvns	r3, r3
 80179a8:	693a      	ldr	r2, [r7, #16]
 80179aa:	4013      	ands	r3, r2
 80179ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d003      	beq.n	80179c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80179ba:	693a      	ldr	r2, [r7, #16]
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	4313      	orrs	r3, r2
 80179c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80179c2:	4a10      	ldr	r2, [pc, #64]	@ (8017a04 <HAL_GPIO_Init+0x2f0>)
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	3301      	adds	r3, #1
 80179cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	681a      	ldr	r2, [r3, #0]
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	fa22 f303 	lsr.w	r3, r2, r3
 80179d8:	2b00      	cmp	r3, #0
 80179da:	f47f aea3 	bne.w	8017724 <HAL_GPIO_Init+0x10>
  }
}
 80179de:	bf00      	nop
 80179e0:	bf00      	nop
 80179e2:	371c      	adds	r7, #28
 80179e4:	46bd      	mov	sp, r7
 80179e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ea:	4770      	bx	lr
 80179ec:	40021000 	.word	0x40021000
 80179f0:	40010000 	.word	0x40010000
 80179f4:	48000400 	.word	0x48000400
 80179f8:	48000800 	.word	0x48000800
 80179fc:	48000c00 	.word	0x48000c00
 8017a00:	48001000 	.word	0x48001000
 8017a04:	40010400 	.word	0x40010400

08017a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	460b      	mov	r3, r1
 8017a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	691a      	ldr	r2, [r3, #16]
 8017a18:	887b      	ldrh	r3, [r7, #2]
 8017a1a:	4013      	ands	r3, r2
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d002      	beq.n	8017a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017a20:	2301      	movs	r3, #1
 8017a22:	73fb      	strb	r3, [r7, #15]
 8017a24:	e001      	b.n	8017a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017a26:	2300      	movs	r3, #0
 8017a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3714      	adds	r7, #20
 8017a30:	46bd      	mov	sp, r7
 8017a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a36:	4770      	bx	lr

08017a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017a38:	b480      	push	{r7}
 8017a3a:	b083      	sub	sp, #12
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	460b      	mov	r3, r1
 8017a42:	807b      	strh	r3, [r7, #2]
 8017a44:	4613      	mov	r3, r2
 8017a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017a48:	787b      	ldrb	r3, [r7, #1]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d003      	beq.n	8017a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8017a4e:	887a      	ldrh	r2, [r7, #2]
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8017a54:	e002      	b.n	8017a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8017a56:	887a      	ldrh	r2, [r7, #2]
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8017a5c:	bf00      	nop
 8017a5e:	370c      	adds	r7, #12
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr

08017a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8017a68:	b480      	push	{r7}
 8017a6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8017a6c:	4b04      	ldr	r3, [pc, #16]	@ (8017a80 <HAL_PWREx_GetVoltageRange+0x18>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	46bd      	mov	sp, r7
 8017a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7c:	4770      	bx	lr
 8017a7e:	bf00      	nop
 8017a80:	40007000 	.word	0x40007000

08017a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8017a84:	b480      	push	{r7}
 8017a86:	b085      	sub	sp, #20
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017a92:	d130      	bne.n	8017af6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8017a94:	4b23      	ldr	r3, [pc, #140]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017aa0:	d038      	beq.n	8017b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8017aa2:	4b20      	ldr	r3, [pc, #128]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8017aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017aac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017ab0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8017ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8017b28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2232      	movs	r2, #50	@ 0x32
 8017ab8:	fb02 f303 	mul.w	r3, r2, r3
 8017abc:	4a1b      	ldr	r2, [pc, #108]	@ (8017b2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8017abe:	fba2 2303 	umull	r2, r3, r2, r3
 8017ac2:	0c9b      	lsrs	r3, r3, #18
 8017ac4:	3301      	adds	r3, #1
 8017ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8017ac8:	e002      	b.n	8017ad0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	3b01      	subs	r3, #1
 8017ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8017ad0:	4b14      	ldr	r3, [pc, #80]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017ad2:	695b      	ldr	r3, [r3, #20]
 8017ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017adc:	d102      	bne.n	8017ae4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d1f2      	bne.n	8017aca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8017ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017ae6:	695b      	ldr	r3, [r3, #20]
 8017ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017af0:	d110      	bne.n	8017b14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8017af2:	2303      	movs	r3, #3
 8017af4:	e00f      	b.n	8017b16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8017af6:	4b0b      	ldr	r3, [pc, #44]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8017afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017b02:	d007      	beq.n	8017b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8017b04:	4b07      	ldr	r3, [pc, #28]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8017b0c:	4a05      	ldr	r2, [pc, #20]	@ (8017b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8017b12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8017b14:	2300      	movs	r3, #0
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3714      	adds	r7, #20
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b20:	4770      	bx	lr
 8017b22:	bf00      	nop
 8017b24:	40007000 	.word	0x40007000
 8017b28:	20000004 	.word	0x20000004
 8017b2c:	431bde83 	.word	0x431bde83

08017b30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b088      	sub	sp, #32
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d102      	bne.n	8017b44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	f000 bc02 	b.w	8018348 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017b44:	4b96      	ldr	r3, [pc, #600]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017b46:	689b      	ldr	r3, [r3, #8]
 8017b48:	f003 030c 	and.w	r3, r3, #12
 8017b4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017b4e:	4b94      	ldr	r3, [pc, #592]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017b50:	68db      	ldr	r3, [r3, #12]
 8017b52:	f003 0303 	and.w	r3, r3, #3
 8017b56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	f003 0310 	and.w	r3, r3, #16
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f000 80e4 	beq.w	8017d2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8017b66:	69bb      	ldr	r3, [r7, #24]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d007      	beq.n	8017b7c <HAL_RCC_OscConfig+0x4c>
 8017b6c:	69bb      	ldr	r3, [r7, #24]
 8017b6e:	2b0c      	cmp	r3, #12
 8017b70:	f040 808b 	bne.w	8017c8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8017b74:	697b      	ldr	r3, [r7, #20]
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	f040 8087 	bne.w	8017c8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017b7c:	4b88      	ldr	r3, [pc, #544]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	f003 0302 	and.w	r3, r3, #2
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d005      	beq.n	8017b94 <HAL_RCC_OscConfig+0x64>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	699b      	ldr	r3, [r3, #24]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d101      	bne.n	8017b94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8017b90:	2301      	movs	r3, #1
 8017b92:	e3d9      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	6a1a      	ldr	r2, [r3, #32]
 8017b98:	4b81      	ldr	r3, [pc, #516]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	f003 0308 	and.w	r3, r3, #8
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d004      	beq.n	8017bae <HAL_RCC_OscConfig+0x7e>
 8017ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bac:	e005      	b.n	8017bba <HAL_RCC_OscConfig+0x8a>
 8017bae:	4b7c      	ldr	r3, [pc, #496]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017bb4:	091b      	lsrs	r3, r3, #4
 8017bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	d223      	bcs.n	8017c06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6a1b      	ldr	r3, [r3, #32]
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f000 fd8c 	bl	80186e0 <RCC_SetFlashLatencyFromMSIRange>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d001      	beq.n	8017bd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8017bce:	2301      	movs	r3, #1
 8017bd0:	e3ba      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017bd2:	4b73      	ldr	r3, [pc, #460]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	4a72      	ldr	r2, [pc, #456]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017bd8:	f043 0308 	orr.w	r3, r3, #8
 8017bdc:	6013      	str	r3, [r2, #0]
 8017bde:	4b70      	ldr	r3, [pc, #448]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	6a1b      	ldr	r3, [r3, #32]
 8017bea:	496d      	ldr	r1, [pc, #436]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017bec:	4313      	orrs	r3, r2
 8017bee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017bf2:	685b      	ldr	r3, [r3, #4]
 8017bf4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	69db      	ldr	r3, [r3, #28]
 8017bfc:	021b      	lsls	r3, r3, #8
 8017bfe:	4968      	ldr	r1, [pc, #416]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c00:	4313      	orrs	r3, r2
 8017c02:	604b      	str	r3, [r1, #4]
 8017c04:	e025      	b.n	8017c52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017c06:	4b66      	ldr	r3, [pc, #408]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	4a65      	ldr	r2, [pc, #404]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c0c:	f043 0308 	orr.w	r3, r3, #8
 8017c10:	6013      	str	r3, [r2, #0]
 8017c12:	4b63      	ldr	r3, [pc, #396]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	6a1b      	ldr	r3, [r3, #32]
 8017c1e:	4960      	ldr	r1, [pc, #384]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c20:	4313      	orrs	r3, r2
 8017c22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017c24:	4b5e      	ldr	r3, [pc, #376]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c26:	685b      	ldr	r3, [r3, #4]
 8017c28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	69db      	ldr	r3, [r3, #28]
 8017c30:	021b      	lsls	r3, r3, #8
 8017c32:	495b      	ldr	r1, [pc, #364]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c34:	4313      	orrs	r3, r2
 8017c36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017c38:	69bb      	ldr	r3, [r7, #24]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d109      	bne.n	8017c52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	6a1b      	ldr	r3, [r3, #32]
 8017c42:	4618      	mov	r0, r3
 8017c44:	f000 fd4c 	bl	80186e0 <RCC_SetFlashLatencyFromMSIRange>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d001      	beq.n	8017c52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8017c4e:	2301      	movs	r3, #1
 8017c50:	e37a      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8017c52:	f000 fc81 	bl	8018558 <HAL_RCC_GetSysClockFreq>
 8017c56:	4602      	mov	r2, r0
 8017c58:	4b51      	ldr	r3, [pc, #324]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c5a:	689b      	ldr	r3, [r3, #8]
 8017c5c:	091b      	lsrs	r3, r3, #4
 8017c5e:	f003 030f 	and.w	r3, r3, #15
 8017c62:	4950      	ldr	r1, [pc, #320]	@ (8017da4 <HAL_RCC_OscConfig+0x274>)
 8017c64:	5ccb      	ldrb	r3, [r1, r3]
 8017c66:	f003 031f 	and.w	r3, r3, #31
 8017c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8017c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8017da8 <HAL_RCC_OscConfig+0x278>)
 8017c70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8017c72:	4b4e      	ldr	r3, [pc, #312]	@ (8017dac <HAL_RCC_OscConfig+0x27c>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7ff fb3c 	bl	80172f4 <HAL_InitTick>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8017c80:	7bfb      	ldrb	r3, [r7, #15]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d052      	beq.n	8017d2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8017c86:	7bfb      	ldrb	r3, [r7, #15]
 8017c88:	e35e      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	699b      	ldr	r3, [r3, #24]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d032      	beq.n	8017cf8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017c92:	4b43      	ldr	r3, [pc, #268]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	4a42      	ldr	r2, [pc, #264]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017c98:	f043 0301 	orr.w	r3, r3, #1
 8017c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017c9e:	f7ff fb79 	bl	8017394 <HAL_GetTick>
 8017ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017ca4:	e008      	b.n	8017cb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017ca6:	f7ff fb75 	bl	8017394 <HAL_GetTick>
 8017caa:	4602      	mov	r2, r0
 8017cac:	693b      	ldr	r3, [r7, #16]
 8017cae:	1ad3      	subs	r3, r2, r3
 8017cb0:	2b02      	cmp	r3, #2
 8017cb2:	d901      	bls.n	8017cb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8017cb4:	2303      	movs	r3, #3
 8017cb6:	e347      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017cb8:	4b39      	ldr	r3, [pc, #228]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	f003 0302 	and.w	r3, r3, #2
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d0f0      	beq.n	8017ca6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017cc4:	4b36      	ldr	r3, [pc, #216]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4a35      	ldr	r2, [pc, #212]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cca:	f043 0308 	orr.w	r3, r3, #8
 8017cce:	6013      	str	r3, [r2, #0]
 8017cd0:	4b33      	ldr	r3, [pc, #204]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6a1b      	ldr	r3, [r3, #32]
 8017cdc:	4930      	ldr	r1, [pc, #192]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cde:	4313      	orrs	r3, r2
 8017ce0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017ce4:	685b      	ldr	r3, [r3, #4]
 8017ce6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	69db      	ldr	r3, [r3, #28]
 8017cee:	021b      	lsls	r3, r3, #8
 8017cf0:	492b      	ldr	r1, [pc, #172]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cf2:	4313      	orrs	r3, r2
 8017cf4:	604b      	str	r3, [r1, #4]
 8017cf6:	e01a      	b.n	8017d2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017cf8:	4b29      	ldr	r3, [pc, #164]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	4a28      	ldr	r2, [pc, #160]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017cfe:	f023 0301 	bic.w	r3, r3, #1
 8017d02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017d04:	f7ff fb46 	bl	8017394 <HAL_GetTick>
 8017d08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017d0a:	e008      	b.n	8017d1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017d0c:	f7ff fb42 	bl	8017394 <HAL_GetTick>
 8017d10:	4602      	mov	r2, r0
 8017d12:	693b      	ldr	r3, [r7, #16]
 8017d14:	1ad3      	subs	r3, r2, r3
 8017d16:	2b02      	cmp	r3, #2
 8017d18:	d901      	bls.n	8017d1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8017d1a:	2303      	movs	r3, #3
 8017d1c:	e314      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017d1e:	4b20      	ldr	r3, [pc, #128]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	f003 0302 	and.w	r3, r3, #2
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d1f0      	bne.n	8017d0c <HAL_RCC_OscConfig+0x1dc>
 8017d2a:	e000      	b.n	8017d2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017d2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f003 0301 	and.w	r3, r3, #1
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d073      	beq.n	8017e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8017d3a:	69bb      	ldr	r3, [r7, #24]
 8017d3c:	2b08      	cmp	r3, #8
 8017d3e:	d005      	beq.n	8017d4c <HAL_RCC_OscConfig+0x21c>
 8017d40:	69bb      	ldr	r3, [r7, #24]
 8017d42:	2b0c      	cmp	r3, #12
 8017d44:	d10e      	bne.n	8017d64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	2b03      	cmp	r3, #3
 8017d4a:	d10b      	bne.n	8017d64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017d4c:	4b14      	ldr	r3, [pc, #80]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d063      	beq.n	8017e20 <HAL_RCC_OscConfig+0x2f0>
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d15f      	bne.n	8017e20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8017d60:	2301      	movs	r3, #1
 8017d62:	e2f1      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	685b      	ldr	r3, [r3, #4]
 8017d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017d6c:	d106      	bne.n	8017d7c <HAL_RCC_OscConfig+0x24c>
 8017d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	4a0b      	ldr	r2, [pc, #44]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017d78:	6013      	str	r3, [r2, #0]
 8017d7a:	e025      	b.n	8017dc8 <HAL_RCC_OscConfig+0x298>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	685b      	ldr	r3, [r3, #4]
 8017d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017d84:	d114      	bne.n	8017db0 <HAL_RCC_OscConfig+0x280>
 8017d86:	4b06      	ldr	r3, [pc, #24]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a05      	ldr	r2, [pc, #20]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8017d90:	6013      	str	r3, [r2, #0]
 8017d92:	4b03      	ldr	r3, [pc, #12]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	4a02      	ldr	r2, [pc, #8]	@ (8017da0 <HAL_RCC_OscConfig+0x270>)
 8017d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017d9c:	6013      	str	r3, [r2, #0]
 8017d9e:	e013      	b.n	8017dc8 <HAL_RCC_OscConfig+0x298>
 8017da0:	40021000 	.word	0x40021000
 8017da4:	0801f844 	.word	0x0801f844
 8017da8:	20000004 	.word	0x20000004
 8017dac:	20000018 	.word	0x20000018
 8017db0:	4ba0      	ldr	r3, [pc, #640]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	4a9f      	ldr	r2, [pc, #636]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017dba:	6013      	str	r3, [r2, #0]
 8017dbc:	4b9d      	ldr	r3, [pc, #628]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	4a9c      	ldr	r2, [pc, #624]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	685b      	ldr	r3, [r3, #4]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d013      	beq.n	8017df8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017dd0:	f7ff fae0 	bl	8017394 <HAL_GetTick>
 8017dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017dd6:	e008      	b.n	8017dea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017dd8:	f7ff fadc 	bl	8017394 <HAL_GetTick>
 8017ddc:	4602      	mov	r2, r0
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	1ad3      	subs	r3, r2, r3
 8017de2:	2b64      	cmp	r3, #100	@ 0x64
 8017de4:	d901      	bls.n	8017dea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8017de6:	2303      	movs	r3, #3
 8017de8:	e2ae      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017dea:	4b92      	ldr	r3, [pc, #584]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d0f0      	beq.n	8017dd8 <HAL_RCC_OscConfig+0x2a8>
 8017df6:	e014      	b.n	8017e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017df8:	f7ff facc 	bl	8017394 <HAL_GetTick>
 8017dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017dfe:	e008      	b.n	8017e12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017e00:	f7ff fac8 	bl	8017394 <HAL_GetTick>
 8017e04:	4602      	mov	r2, r0
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	1ad3      	subs	r3, r2, r3
 8017e0a:	2b64      	cmp	r3, #100	@ 0x64
 8017e0c:	d901      	bls.n	8017e12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8017e0e:	2303      	movs	r3, #3
 8017e10:	e29a      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017e12:	4b88      	ldr	r3, [pc, #544]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d1f0      	bne.n	8017e00 <HAL_RCC_OscConfig+0x2d0>
 8017e1e:	e000      	b.n	8017e22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f003 0302 	and.w	r3, r3, #2
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d060      	beq.n	8017ef0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8017e2e:	69bb      	ldr	r3, [r7, #24]
 8017e30:	2b04      	cmp	r3, #4
 8017e32:	d005      	beq.n	8017e40 <HAL_RCC_OscConfig+0x310>
 8017e34:	69bb      	ldr	r3, [r7, #24]
 8017e36:	2b0c      	cmp	r3, #12
 8017e38:	d119      	bne.n	8017e6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8017e3a:	697b      	ldr	r3, [r7, #20]
 8017e3c:	2b02      	cmp	r3, #2
 8017e3e:	d116      	bne.n	8017e6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017e40:	4b7c      	ldr	r3, [pc, #496]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d005      	beq.n	8017e58 <HAL_RCC_OscConfig+0x328>
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	68db      	ldr	r3, [r3, #12]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d101      	bne.n	8017e58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8017e54:	2301      	movs	r3, #1
 8017e56:	e277      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017e58:	4b76      	ldr	r3, [pc, #472]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e5a:	685b      	ldr	r3, [r3, #4]
 8017e5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	691b      	ldr	r3, [r3, #16]
 8017e64:	061b      	lsls	r3, r3, #24
 8017e66:	4973      	ldr	r1, [pc, #460]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e68:	4313      	orrs	r3, r2
 8017e6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017e6c:	e040      	b.n	8017ef0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	68db      	ldr	r3, [r3, #12]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d023      	beq.n	8017ebe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017e76:	4b6f      	ldr	r3, [pc, #444]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017e82:	f7ff fa87 	bl	8017394 <HAL_GetTick>
 8017e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017e88:	e008      	b.n	8017e9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017e8a:	f7ff fa83 	bl	8017394 <HAL_GetTick>
 8017e8e:	4602      	mov	r2, r0
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	1ad3      	subs	r3, r2, r3
 8017e94:	2b02      	cmp	r3, #2
 8017e96:	d901      	bls.n	8017e9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8017e98:	2303      	movs	r3, #3
 8017e9a:	e255      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017e9c:	4b65      	ldr	r3, [pc, #404]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d0f0      	beq.n	8017e8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017ea8:	4b62      	ldr	r3, [pc, #392]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	691b      	ldr	r3, [r3, #16]
 8017eb4:	061b      	lsls	r3, r3, #24
 8017eb6:	495f      	ldr	r1, [pc, #380]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017eb8:	4313      	orrs	r3, r2
 8017eba:	604b      	str	r3, [r1, #4]
 8017ebc:	e018      	b.n	8017ef0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	4a5c      	ldr	r2, [pc, #368]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017eca:	f7ff fa63 	bl	8017394 <HAL_GetTick>
 8017ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017ed0:	e008      	b.n	8017ee4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017ed2:	f7ff fa5f 	bl	8017394 <HAL_GetTick>
 8017ed6:	4602      	mov	r2, r0
 8017ed8:	693b      	ldr	r3, [r7, #16]
 8017eda:	1ad3      	subs	r3, r2, r3
 8017edc:	2b02      	cmp	r3, #2
 8017ede:	d901      	bls.n	8017ee4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8017ee0:	2303      	movs	r3, #3
 8017ee2:	e231      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017ee4:	4b53      	ldr	r3, [pc, #332]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d1f0      	bne.n	8017ed2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	f003 0308 	and.w	r3, r3, #8
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d03c      	beq.n	8017f76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	695b      	ldr	r3, [r3, #20]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d01c      	beq.n	8017f3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017f04:	4b4b      	ldr	r3, [pc, #300]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f0c:	f043 0301 	orr.w	r3, r3, #1
 8017f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017f14:	f7ff fa3e 	bl	8017394 <HAL_GetTick>
 8017f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017f1a:	e008      	b.n	8017f2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017f1c:	f7ff fa3a 	bl	8017394 <HAL_GetTick>
 8017f20:	4602      	mov	r2, r0
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	1ad3      	subs	r3, r2, r3
 8017f26:	2b02      	cmp	r3, #2
 8017f28:	d901      	bls.n	8017f2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8017f2a:	2303      	movs	r3, #3
 8017f2c:	e20c      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017f2e:	4b41      	ldr	r3, [pc, #260]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f34:	f003 0302 	and.w	r3, r3, #2
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d0ef      	beq.n	8017f1c <HAL_RCC_OscConfig+0x3ec>
 8017f3c:	e01b      	b.n	8017f76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f44:	4a3b      	ldr	r2, [pc, #236]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f46:	f023 0301 	bic.w	r3, r3, #1
 8017f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017f4e:	f7ff fa21 	bl	8017394 <HAL_GetTick>
 8017f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017f54:	e008      	b.n	8017f68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017f56:	f7ff fa1d 	bl	8017394 <HAL_GetTick>
 8017f5a:	4602      	mov	r2, r0
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	1ad3      	subs	r3, r2, r3
 8017f60:	2b02      	cmp	r3, #2
 8017f62:	d901      	bls.n	8017f68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8017f64:	2303      	movs	r3, #3
 8017f66:	e1ef      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017f68:	4b32      	ldr	r3, [pc, #200]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017f6e:	f003 0302 	and.w	r3, r3, #2
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d1ef      	bne.n	8017f56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	f003 0304 	and.w	r3, r3, #4
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	f000 80a6 	beq.w	80180d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017f84:	2300      	movs	r3, #0
 8017f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8017f88:	4b2a      	ldr	r3, [pc, #168]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d10d      	bne.n	8017fb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017f94:	4b27      	ldr	r3, [pc, #156]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017f98:	4a26      	ldr	r2, [pc, #152]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8017fa0:	4b24      	ldr	r3, [pc, #144]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017fa8:	60bb      	str	r3, [r7, #8]
 8017faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017fac:	2301      	movs	r3, #1
 8017fae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017fb0:	4b21      	ldr	r3, [pc, #132]	@ (8018038 <HAL_RCC_OscConfig+0x508>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d118      	bne.n	8017fee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8018038 <HAL_RCC_OscConfig+0x508>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8018038 <HAL_RCC_OscConfig+0x508>)
 8017fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017fc8:	f7ff f9e4 	bl	8017394 <HAL_GetTick>
 8017fcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017fce:	e008      	b.n	8017fe2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017fd0:	f7ff f9e0 	bl	8017394 <HAL_GetTick>
 8017fd4:	4602      	mov	r2, r0
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	1ad3      	subs	r3, r2, r3
 8017fda:	2b02      	cmp	r3, #2
 8017fdc:	d901      	bls.n	8017fe2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8017fde:	2303      	movs	r3, #3
 8017fe0:	e1b2      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017fe2:	4b15      	ldr	r3, [pc, #84]	@ (8018038 <HAL_RCC_OscConfig+0x508>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d0f0      	beq.n	8017fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	689b      	ldr	r3, [r3, #8]
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	d108      	bne.n	8018008 <HAL_RCC_OscConfig+0x4d8>
 8017ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8017ffe:	f043 0301 	orr.w	r3, r3, #1
 8018002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018006:	e029      	b.n	801805c <HAL_RCC_OscConfig+0x52c>
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	689b      	ldr	r3, [r3, #8]
 801800c:	2b05      	cmp	r3, #5
 801800e:	d115      	bne.n	801803c <HAL_RCC_OscConfig+0x50c>
 8018010:	4b08      	ldr	r3, [pc, #32]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8018012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018016:	4a07      	ldr	r2, [pc, #28]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8018018:	f043 0304 	orr.w	r3, r3, #4
 801801c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018020:	4b04      	ldr	r3, [pc, #16]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8018022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018026:	4a03      	ldr	r2, [pc, #12]	@ (8018034 <HAL_RCC_OscConfig+0x504>)
 8018028:	f043 0301 	orr.w	r3, r3, #1
 801802c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8018030:	e014      	b.n	801805c <HAL_RCC_OscConfig+0x52c>
 8018032:	bf00      	nop
 8018034:	40021000 	.word	0x40021000
 8018038:	40007000 	.word	0x40007000
 801803c:	4b9a      	ldr	r3, [pc, #616]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 801803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018042:	4a99      	ldr	r2, [pc, #612]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018044:	f023 0301 	bic.w	r3, r3, #1
 8018048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801804c:	4b96      	ldr	r3, [pc, #600]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 801804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018052:	4a95      	ldr	r2, [pc, #596]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018054:	f023 0304 	bic.w	r3, r3, #4
 8018058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	689b      	ldr	r3, [r3, #8]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d016      	beq.n	8018092 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018064:	f7ff f996 	bl	8017394 <HAL_GetTick>
 8018068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801806a:	e00a      	b.n	8018082 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801806c:	f7ff f992 	bl	8017394 <HAL_GetTick>
 8018070:	4602      	mov	r2, r0
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	1ad3      	subs	r3, r2, r3
 8018076:	f241 3288 	movw	r2, #5000	@ 0x1388
 801807a:	4293      	cmp	r3, r2
 801807c:	d901      	bls.n	8018082 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801807e:	2303      	movs	r3, #3
 8018080:	e162      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018082:	4b89      	ldr	r3, [pc, #548]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018088:	f003 0302 	and.w	r3, r3, #2
 801808c:	2b00      	cmp	r3, #0
 801808e:	d0ed      	beq.n	801806c <HAL_RCC_OscConfig+0x53c>
 8018090:	e015      	b.n	80180be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018092:	f7ff f97f 	bl	8017394 <HAL_GetTick>
 8018096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8018098:	e00a      	b.n	80180b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801809a:	f7ff f97b 	bl	8017394 <HAL_GetTick>
 801809e:	4602      	mov	r2, r0
 80180a0:	693b      	ldr	r3, [r7, #16]
 80180a2:	1ad3      	subs	r3, r2, r3
 80180a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80180a8:	4293      	cmp	r3, r2
 80180aa:	d901      	bls.n	80180b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80180ac:	2303      	movs	r3, #3
 80180ae:	e14b      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80180b0:	4b7d      	ldr	r3, [pc, #500]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80180b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180b6:	f003 0302 	and.w	r3, r3, #2
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d1ed      	bne.n	801809a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80180be:	7ffb      	ldrb	r3, [r7, #31]
 80180c0:	2b01      	cmp	r3, #1
 80180c2:	d105      	bne.n	80180d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80180c4:	4b78      	ldr	r3, [pc, #480]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80180c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80180c8:	4a77      	ldr	r2, [pc, #476]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80180ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80180ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	f003 0320 	and.w	r3, r3, #32
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d03c      	beq.n	8018156 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d01c      	beq.n	801811e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80180e4:	4b70      	ldr	r3, [pc, #448]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80180e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80180ea:	4a6f      	ldr	r2, [pc, #444]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80180ec:	f043 0301 	orr.w	r3, r3, #1
 80180f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80180f4:	f7ff f94e 	bl	8017394 <HAL_GetTick>
 80180f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80180fa:	e008      	b.n	801810e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80180fc:	f7ff f94a 	bl	8017394 <HAL_GetTick>
 8018100:	4602      	mov	r2, r0
 8018102:	693b      	ldr	r3, [r7, #16]
 8018104:	1ad3      	subs	r3, r2, r3
 8018106:	2b02      	cmp	r3, #2
 8018108:	d901      	bls.n	801810e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 801810a:	2303      	movs	r3, #3
 801810c:	e11c      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801810e:	4b66      	ldr	r3, [pc, #408]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018110:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018114:	f003 0302 	and.w	r3, r3, #2
 8018118:	2b00      	cmp	r3, #0
 801811a:	d0ef      	beq.n	80180fc <HAL_RCC_OscConfig+0x5cc>
 801811c:	e01b      	b.n	8018156 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801811e:	4b62      	ldr	r3, [pc, #392]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018124:	4a60      	ldr	r2, [pc, #384]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018126:	f023 0301 	bic.w	r3, r3, #1
 801812a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801812e:	f7ff f931 	bl	8017394 <HAL_GetTick>
 8018132:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018134:	e008      	b.n	8018148 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018136:	f7ff f92d 	bl	8017394 <HAL_GetTick>
 801813a:	4602      	mov	r2, r0
 801813c:	693b      	ldr	r3, [r7, #16]
 801813e:	1ad3      	subs	r3, r2, r3
 8018140:	2b02      	cmp	r3, #2
 8018142:	d901      	bls.n	8018148 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8018144:	2303      	movs	r3, #3
 8018146:	e0ff      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018148:	4b57      	ldr	r3, [pc, #348]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 801814a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801814e:	f003 0302 	and.w	r3, r3, #2
 8018152:	2b00      	cmp	r3, #0
 8018154:	d1ef      	bne.n	8018136 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801815a:	2b00      	cmp	r3, #0
 801815c:	f000 80f3 	beq.w	8018346 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018164:	2b02      	cmp	r3, #2
 8018166:	f040 80c9 	bne.w	80182fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801816a:	4b4f      	ldr	r3, [pc, #316]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 801816c:	68db      	ldr	r3, [r3, #12]
 801816e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	f003 0203 	and.w	r2, r3, #3
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801817a:	429a      	cmp	r2, r3
 801817c:	d12c      	bne.n	80181d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018188:	3b01      	subs	r3, #1
 801818a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801818c:	429a      	cmp	r2, r3
 801818e:	d123      	bne.n	80181d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801819a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801819c:	429a      	cmp	r2, r3
 801819e:	d11b      	bne.n	80181d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80181a0:	697b      	ldr	r3, [r7, #20]
 80181a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80181aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80181ac:	429a      	cmp	r2, r3
 80181ae:	d113      	bne.n	80181d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80181ba:	085b      	lsrs	r3, r3, #1
 80181bc:	3b01      	subs	r3, #1
 80181be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d109      	bne.n	80181d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80181ce:	085b      	lsrs	r3, r3, #1
 80181d0:	3b01      	subs	r3, #1
 80181d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d06b      	beq.n	80182b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	2b0c      	cmp	r3, #12
 80181dc:	d062      	beq.n	80182a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80181de:	4b32      	ldr	r3, [pc, #200]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d001      	beq.n	80181ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80181ea:	2301      	movs	r3, #1
 80181ec:	e0ac      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80181ee:	4b2e      	ldr	r3, [pc, #184]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	4a2d      	ldr	r2, [pc, #180]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 80181f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80181f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80181fa:	f7ff f8cb 	bl	8017394 <HAL_GetTick>
 80181fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018200:	e008      	b.n	8018214 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018202:	f7ff f8c7 	bl	8017394 <HAL_GetTick>
 8018206:	4602      	mov	r2, r0
 8018208:	693b      	ldr	r3, [r7, #16]
 801820a:	1ad3      	subs	r3, r2, r3
 801820c:	2b02      	cmp	r3, #2
 801820e:	d901      	bls.n	8018214 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8018210:	2303      	movs	r3, #3
 8018212:	e099      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018214:	4b24      	ldr	r3, [pc, #144]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1f0      	bne.n	8018202 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018220:	4b21      	ldr	r3, [pc, #132]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018222:	68da      	ldr	r2, [r3, #12]
 8018224:	4b21      	ldr	r3, [pc, #132]	@ (80182ac <HAL_RCC_OscConfig+0x77c>)
 8018226:	4013      	ands	r3, r2
 8018228:	687a      	ldr	r2, [r7, #4]
 801822a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 801822c:	687a      	ldr	r2, [r7, #4]
 801822e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8018230:	3a01      	subs	r2, #1
 8018232:	0112      	lsls	r2, r2, #4
 8018234:	4311      	orrs	r1, r2
 8018236:	687a      	ldr	r2, [r7, #4]
 8018238:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801823a:	0212      	lsls	r2, r2, #8
 801823c:	4311      	orrs	r1, r2
 801823e:	687a      	ldr	r2, [r7, #4]
 8018240:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8018242:	0852      	lsrs	r2, r2, #1
 8018244:	3a01      	subs	r2, #1
 8018246:	0552      	lsls	r2, r2, #21
 8018248:	4311      	orrs	r1, r2
 801824a:	687a      	ldr	r2, [r7, #4]
 801824c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801824e:	0852      	lsrs	r2, r2, #1
 8018250:	3a01      	subs	r2, #1
 8018252:	0652      	lsls	r2, r2, #25
 8018254:	4311      	orrs	r1, r2
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801825a:	06d2      	lsls	r2, r2, #27
 801825c:	430a      	orrs	r2, r1
 801825e:	4912      	ldr	r1, [pc, #72]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018260:	4313      	orrs	r3, r2
 8018262:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8018264:	4b10      	ldr	r3, [pc, #64]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4a0f      	ldr	r2, [pc, #60]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 801826a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801826e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018270:	4b0d      	ldr	r3, [pc, #52]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018272:	68db      	ldr	r3, [r3, #12]
 8018274:	4a0c      	ldr	r2, [pc, #48]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801827a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801827c:	f7ff f88a 	bl	8017394 <HAL_GetTick>
 8018280:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018282:	e008      	b.n	8018296 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018284:	f7ff f886 	bl	8017394 <HAL_GetTick>
 8018288:	4602      	mov	r2, r0
 801828a:	693b      	ldr	r3, [r7, #16]
 801828c:	1ad3      	subs	r3, r2, r3
 801828e:	2b02      	cmp	r3, #2
 8018290:	d901      	bls.n	8018296 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8018292:	2303      	movs	r3, #3
 8018294:	e058      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018296:	4b04      	ldr	r3, [pc, #16]	@ (80182a8 <HAL_RCC_OscConfig+0x778>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d0f0      	beq.n	8018284 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80182a2:	e050      	b.n	8018346 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80182a4:	2301      	movs	r3, #1
 80182a6:	e04f      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
 80182a8:	40021000 	.word	0x40021000
 80182ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80182b0:	4b27      	ldr	r3, [pc, #156]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d144      	bne.n	8018346 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80182bc:	4b24      	ldr	r3, [pc, #144]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	4a23      	ldr	r2, [pc, #140]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 80182c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80182c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80182c8:	4b21      	ldr	r3, [pc, #132]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 80182ca:	68db      	ldr	r3, [r3, #12]
 80182cc:	4a20      	ldr	r2, [pc, #128]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 80182ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80182d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80182d4:	f7ff f85e 	bl	8017394 <HAL_GetTick>
 80182d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80182da:	e008      	b.n	80182ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80182dc:	f7ff f85a 	bl	8017394 <HAL_GetTick>
 80182e0:	4602      	mov	r2, r0
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	1ad3      	subs	r3, r2, r3
 80182e6:	2b02      	cmp	r3, #2
 80182e8:	d901      	bls.n	80182ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80182ea:	2303      	movs	r3, #3
 80182ec:	e02c      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80182ee:	4b18      	ldr	r3, [pc, #96]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d0f0      	beq.n	80182dc <HAL_RCC_OscConfig+0x7ac>
 80182fa:	e024      	b.n	8018346 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80182fc:	69bb      	ldr	r3, [r7, #24]
 80182fe:	2b0c      	cmp	r3, #12
 8018300:	d01f      	beq.n	8018342 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018302:	4b13      	ldr	r3, [pc, #76]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	4a12      	ldr	r2, [pc, #72]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 8018308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801830c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801830e:	f7ff f841 	bl	8017394 <HAL_GetTick>
 8018312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018314:	e008      	b.n	8018328 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018316:	f7ff f83d 	bl	8017394 <HAL_GetTick>
 801831a:	4602      	mov	r2, r0
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	1ad3      	subs	r3, r2, r3
 8018320:	2b02      	cmp	r3, #2
 8018322:	d901      	bls.n	8018328 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8018324:	2303      	movs	r3, #3
 8018326:	e00f      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018328:	4b09      	ldr	r3, [pc, #36]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018330:	2b00      	cmp	r3, #0
 8018332:	d1f0      	bne.n	8018316 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8018334:	4b06      	ldr	r3, [pc, #24]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 8018336:	68da      	ldr	r2, [r3, #12]
 8018338:	4905      	ldr	r1, [pc, #20]	@ (8018350 <HAL_RCC_OscConfig+0x820>)
 801833a:	4b06      	ldr	r3, [pc, #24]	@ (8018354 <HAL_RCC_OscConfig+0x824>)
 801833c:	4013      	ands	r3, r2
 801833e:	60cb      	str	r3, [r1, #12]
 8018340:	e001      	b.n	8018346 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8018342:	2301      	movs	r3, #1
 8018344:	e000      	b.n	8018348 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8018346:	2300      	movs	r3, #0
}
 8018348:	4618      	mov	r0, r3
 801834a:	3720      	adds	r7, #32
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}
 8018350:	40021000 	.word	0x40021000
 8018354:	feeefffc 	.word	0xfeeefffc

08018358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b084      	sub	sp, #16
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
 8018360:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d101      	bne.n	801836c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018368:	2301      	movs	r3, #1
 801836a:	e0e7      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801836c:	4b75      	ldr	r3, [pc, #468]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	f003 0307 	and.w	r3, r3, #7
 8018374:	683a      	ldr	r2, [r7, #0]
 8018376:	429a      	cmp	r2, r3
 8018378:	d910      	bls.n	801839c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801837a:	4b72      	ldr	r3, [pc, #456]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	f023 0207 	bic.w	r2, r3, #7
 8018382:	4970      	ldr	r1, [pc, #448]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	4313      	orrs	r3, r2
 8018388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801838a:	4b6e      	ldr	r3, [pc, #440]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	f003 0307 	and.w	r3, r3, #7
 8018392:	683a      	ldr	r2, [r7, #0]
 8018394:	429a      	cmp	r2, r3
 8018396:	d001      	beq.n	801839c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8018398:	2301      	movs	r3, #1
 801839a:	e0cf      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	f003 0302 	and.w	r3, r3, #2
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d010      	beq.n	80183ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	689a      	ldr	r2, [r3, #8]
 80183ac:	4b66      	ldr	r3, [pc, #408]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80183ae:	689b      	ldr	r3, [r3, #8]
 80183b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d908      	bls.n	80183ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80183b8:	4b63      	ldr	r3, [pc, #396]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80183ba:	689b      	ldr	r3, [r3, #8]
 80183bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	689b      	ldr	r3, [r3, #8]
 80183c4:	4960      	ldr	r1, [pc, #384]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80183c6:	4313      	orrs	r3, r2
 80183c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	f003 0301 	and.w	r3, r3, #1
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d04c      	beq.n	8018470 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	2b03      	cmp	r3, #3
 80183dc:	d107      	bne.n	80183ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80183de:	4b5a      	ldr	r3, [pc, #360]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d121      	bne.n	801842e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80183ea:	2301      	movs	r3, #1
 80183ec:	e0a6      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d107      	bne.n	8018406 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80183f6:	4b54      	ldr	r3, [pc, #336]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d115      	bne.n	801842e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8018402:	2301      	movs	r3, #1
 8018404:	e09a      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d107      	bne.n	801841e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801840e:	4b4e      	ldr	r3, [pc, #312]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	f003 0302 	and.w	r3, r3, #2
 8018416:	2b00      	cmp	r3, #0
 8018418:	d109      	bne.n	801842e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801841a:	2301      	movs	r3, #1
 801841c:	e08e      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801841e:	4b4a      	ldr	r3, [pc, #296]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018426:	2b00      	cmp	r3, #0
 8018428:	d101      	bne.n	801842e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801842a:	2301      	movs	r3, #1
 801842c:	e086      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801842e:	4b46      	ldr	r3, [pc, #280]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018430:	689b      	ldr	r3, [r3, #8]
 8018432:	f023 0203 	bic.w	r2, r3, #3
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	685b      	ldr	r3, [r3, #4]
 801843a:	4943      	ldr	r1, [pc, #268]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 801843c:	4313      	orrs	r3, r2
 801843e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018440:	f7fe ffa8 	bl	8017394 <HAL_GetTick>
 8018444:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018446:	e00a      	b.n	801845e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018448:	f7fe ffa4 	bl	8017394 <HAL_GetTick>
 801844c:	4602      	mov	r2, r0
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	1ad3      	subs	r3, r2, r3
 8018452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018456:	4293      	cmp	r3, r2
 8018458:	d901      	bls.n	801845e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801845a:	2303      	movs	r3, #3
 801845c:	e06e      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801845e:	4b3a      	ldr	r3, [pc, #232]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018460:	689b      	ldr	r3, [r3, #8]
 8018462:	f003 020c 	and.w	r2, r3, #12
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	685b      	ldr	r3, [r3, #4]
 801846a:	009b      	lsls	r3, r3, #2
 801846c:	429a      	cmp	r2, r3
 801846e:	d1eb      	bne.n	8018448 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	f003 0302 	and.w	r3, r3, #2
 8018478:	2b00      	cmp	r3, #0
 801847a:	d010      	beq.n	801849e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	689a      	ldr	r2, [r3, #8]
 8018480:	4b31      	ldr	r3, [pc, #196]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018482:	689b      	ldr	r3, [r3, #8]
 8018484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018488:	429a      	cmp	r2, r3
 801848a:	d208      	bcs.n	801849e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801848c:	4b2e      	ldr	r3, [pc, #184]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 801848e:	689b      	ldr	r3, [r3, #8]
 8018490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	689b      	ldr	r3, [r3, #8]
 8018498:	492b      	ldr	r1, [pc, #172]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 801849a:	4313      	orrs	r3, r2
 801849c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801849e:	4b29      	ldr	r3, [pc, #164]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	f003 0307 	and.w	r3, r3, #7
 80184a6:	683a      	ldr	r2, [r7, #0]
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d210      	bcs.n	80184ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80184ac:	4b25      	ldr	r3, [pc, #148]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	f023 0207 	bic.w	r2, r3, #7
 80184b4:	4923      	ldr	r1, [pc, #140]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	4313      	orrs	r3, r2
 80184ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80184bc:	4b21      	ldr	r3, [pc, #132]	@ (8018544 <HAL_RCC_ClockConfig+0x1ec>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	f003 0307 	and.w	r3, r3, #7
 80184c4:	683a      	ldr	r2, [r7, #0]
 80184c6:	429a      	cmp	r2, r3
 80184c8:	d001      	beq.n	80184ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80184ca:	2301      	movs	r3, #1
 80184cc:	e036      	b.n	801853c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	f003 0304 	and.w	r3, r3, #4
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d008      	beq.n	80184ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80184da:	4b1b      	ldr	r3, [pc, #108]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80184dc:	689b      	ldr	r3, [r3, #8]
 80184de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	68db      	ldr	r3, [r3, #12]
 80184e6:	4918      	ldr	r1, [pc, #96]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80184e8:	4313      	orrs	r3, r2
 80184ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	f003 0308 	and.w	r3, r3, #8
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d009      	beq.n	801850c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80184f8:	4b13      	ldr	r3, [pc, #76]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 80184fa:	689b      	ldr	r3, [r3, #8]
 80184fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	691b      	ldr	r3, [r3, #16]
 8018504:	00db      	lsls	r3, r3, #3
 8018506:	4910      	ldr	r1, [pc, #64]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018508:	4313      	orrs	r3, r2
 801850a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801850c:	f000 f824 	bl	8018558 <HAL_RCC_GetSysClockFreq>
 8018510:	4602      	mov	r2, r0
 8018512:	4b0d      	ldr	r3, [pc, #52]	@ (8018548 <HAL_RCC_ClockConfig+0x1f0>)
 8018514:	689b      	ldr	r3, [r3, #8]
 8018516:	091b      	lsrs	r3, r3, #4
 8018518:	f003 030f 	and.w	r3, r3, #15
 801851c:	490b      	ldr	r1, [pc, #44]	@ (801854c <HAL_RCC_ClockConfig+0x1f4>)
 801851e:	5ccb      	ldrb	r3, [r1, r3]
 8018520:	f003 031f 	and.w	r3, r3, #31
 8018524:	fa22 f303 	lsr.w	r3, r2, r3
 8018528:	4a09      	ldr	r2, [pc, #36]	@ (8018550 <HAL_RCC_ClockConfig+0x1f8>)
 801852a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801852c:	4b09      	ldr	r3, [pc, #36]	@ (8018554 <HAL_RCC_ClockConfig+0x1fc>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	4618      	mov	r0, r3
 8018532:	f7fe fedf 	bl	80172f4 <HAL_InitTick>
 8018536:	4603      	mov	r3, r0
 8018538:	72fb      	strb	r3, [r7, #11]

  return status;
 801853a:	7afb      	ldrb	r3, [r7, #11]
}
 801853c:	4618      	mov	r0, r3
 801853e:	3710      	adds	r7, #16
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}
 8018544:	40022000 	.word	0x40022000
 8018548:	40021000 	.word	0x40021000
 801854c:	0801f844 	.word	0x0801f844
 8018550:	20000004 	.word	0x20000004
 8018554:	20000018 	.word	0x20000018

08018558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018558:	b480      	push	{r7}
 801855a:	b089      	sub	sp, #36	@ 0x24
 801855c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801855e:	2300      	movs	r3, #0
 8018560:	61fb      	str	r3, [r7, #28]
 8018562:	2300      	movs	r3, #0
 8018564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018566:	4b3e      	ldr	r3, [pc, #248]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 8018568:	689b      	ldr	r3, [r3, #8]
 801856a:	f003 030c 	and.w	r3, r3, #12
 801856e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8018570:	4b3b      	ldr	r3, [pc, #236]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 8018572:	68db      	ldr	r3, [r3, #12]
 8018574:	f003 0303 	and.w	r3, r3, #3
 8018578:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801857a:	693b      	ldr	r3, [r7, #16]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d005      	beq.n	801858c <HAL_RCC_GetSysClockFreq+0x34>
 8018580:	693b      	ldr	r3, [r7, #16]
 8018582:	2b0c      	cmp	r3, #12
 8018584:	d121      	bne.n	80185ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	2b01      	cmp	r3, #1
 801858a:	d11e      	bne.n	80185ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801858c:	4b34      	ldr	r3, [pc, #208]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	f003 0308 	and.w	r3, r3, #8
 8018594:	2b00      	cmp	r3, #0
 8018596:	d107      	bne.n	80185a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8018598:	4b31      	ldr	r3, [pc, #196]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 801859a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801859e:	0a1b      	lsrs	r3, r3, #8
 80185a0:	f003 030f 	and.w	r3, r3, #15
 80185a4:	61fb      	str	r3, [r7, #28]
 80185a6:	e005      	b.n	80185b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80185a8:	4b2d      	ldr	r3, [pc, #180]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	091b      	lsrs	r3, r3, #4
 80185ae:	f003 030f 	and.w	r3, r3, #15
 80185b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80185b4:	4a2b      	ldr	r2, [pc, #172]	@ (8018664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80185bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80185be:	693b      	ldr	r3, [r7, #16]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d10d      	bne.n	80185e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80185c4:	69fb      	ldr	r3, [r7, #28]
 80185c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80185c8:	e00a      	b.n	80185e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	2b04      	cmp	r3, #4
 80185ce:	d102      	bne.n	80185d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80185d0:	4b25      	ldr	r3, [pc, #148]	@ (8018668 <HAL_RCC_GetSysClockFreq+0x110>)
 80185d2:	61bb      	str	r3, [r7, #24]
 80185d4:	e004      	b.n	80185e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	2b08      	cmp	r3, #8
 80185da:	d101      	bne.n	80185e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80185dc:	4b23      	ldr	r3, [pc, #140]	@ (801866c <HAL_RCC_GetSysClockFreq+0x114>)
 80185de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80185e0:	693b      	ldr	r3, [r7, #16]
 80185e2:	2b0c      	cmp	r3, #12
 80185e4:	d134      	bne.n	8018650 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80185e6:	4b1e      	ldr	r3, [pc, #120]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 80185e8:	68db      	ldr	r3, [r3, #12]
 80185ea:	f003 0303 	and.w	r3, r3, #3
 80185ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	2b02      	cmp	r3, #2
 80185f4:	d003      	beq.n	80185fe <HAL_RCC_GetSysClockFreq+0xa6>
 80185f6:	68bb      	ldr	r3, [r7, #8]
 80185f8:	2b03      	cmp	r3, #3
 80185fa:	d003      	beq.n	8018604 <HAL_RCC_GetSysClockFreq+0xac>
 80185fc:	e005      	b.n	801860a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80185fe:	4b1a      	ldr	r3, [pc, #104]	@ (8018668 <HAL_RCC_GetSysClockFreq+0x110>)
 8018600:	617b      	str	r3, [r7, #20]
      break;
 8018602:	e005      	b.n	8018610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8018604:	4b19      	ldr	r3, [pc, #100]	@ (801866c <HAL_RCC_GetSysClockFreq+0x114>)
 8018606:	617b      	str	r3, [r7, #20]
      break;
 8018608:	e002      	b.n	8018610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801860a:	69fb      	ldr	r3, [r7, #28]
 801860c:	617b      	str	r3, [r7, #20]
      break;
 801860e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8018610:	4b13      	ldr	r3, [pc, #76]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 8018612:	68db      	ldr	r3, [r3, #12]
 8018614:	091b      	lsrs	r3, r3, #4
 8018616:	f003 0307 	and.w	r3, r3, #7
 801861a:	3301      	adds	r3, #1
 801861c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801861e:	4b10      	ldr	r3, [pc, #64]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 8018620:	68db      	ldr	r3, [r3, #12]
 8018622:	0a1b      	lsrs	r3, r3, #8
 8018624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018628:	697a      	ldr	r2, [r7, #20]
 801862a:	fb03 f202 	mul.w	r2, r3, r2
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	fbb2 f3f3 	udiv	r3, r2, r3
 8018634:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8018636:	4b0a      	ldr	r3, [pc, #40]	@ (8018660 <HAL_RCC_GetSysClockFreq+0x108>)
 8018638:	68db      	ldr	r3, [r3, #12]
 801863a:	0e5b      	lsrs	r3, r3, #25
 801863c:	f003 0303 	and.w	r3, r3, #3
 8018640:	3301      	adds	r3, #1
 8018642:	005b      	lsls	r3, r3, #1
 8018644:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8018646:	697a      	ldr	r2, [r7, #20]
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	fbb2 f3f3 	udiv	r3, r2, r3
 801864e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8018650:	69bb      	ldr	r3, [r7, #24]
}
 8018652:	4618      	mov	r0, r3
 8018654:	3724      	adds	r7, #36	@ 0x24
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr
 801865e:	bf00      	nop
 8018660:	40021000 	.word	0x40021000
 8018664:	0801f85c 	.word	0x0801f85c
 8018668:	00f42400 	.word	0x00f42400
 801866c:	007a1200 	.word	0x007a1200

08018670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018670:	b480      	push	{r7}
 8018672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8018674:	4b03      	ldr	r3, [pc, #12]	@ (8018684 <HAL_RCC_GetHCLKFreq+0x14>)
 8018676:	681b      	ldr	r3, [r3, #0]
}
 8018678:	4618      	mov	r0, r3
 801867a:	46bd      	mov	sp, r7
 801867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	20000004 	.word	0x20000004

08018688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801868c:	f7ff fff0 	bl	8018670 <HAL_RCC_GetHCLKFreq>
 8018690:	4602      	mov	r2, r0
 8018692:	4b06      	ldr	r3, [pc, #24]	@ (80186ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8018694:	689b      	ldr	r3, [r3, #8]
 8018696:	0a1b      	lsrs	r3, r3, #8
 8018698:	f003 0307 	and.w	r3, r3, #7
 801869c:	4904      	ldr	r1, [pc, #16]	@ (80186b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801869e:	5ccb      	ldrb	r3, [r1, r3]
 80186a0:	f003 031f 	and.w	r3, r3, #31
 80186a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	40021000 	.word	0x40021000
 80186b0:	0801f854 	.word	0x0801f854

080186b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80186b8:	f7ff ffda 	bl	8018670 <HAL_RCC_GetHCLKFreq>
 80186bc:	4602      	mov	r2, r0
 80186be:	4b06      	ldr	r3, [pc, #24]	@ (80186d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80186c0:	689b      	ldr	r3, [r3, #8]
 80186c2:	0adb      	lsrs	r3, r3, #11
 80186c4:	f003 0307 	and.w	r3, r3, #7
 80186c8:	4904      	ldr	r1, [pc, #16]	@ (80186dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80186ca:	5ccb      	ldrb	r3, [r1, r3]
 80186cc:	f003 031f 	and.w	r3, r3, #31
 80186d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	bd80      	pop	{r7, pc}
 80186d8:	40021000 	.word	0x40021000
 80186dc:	0801f854 	.word	0x0801f854

080186e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b086      	sub	sp, #24
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80186e8:	2300      	movs	r3, #0
 80186ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80186ec:	4b2a      	ldr	r3, [pc, #168]	@ (8018798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80186ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80186f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d003      	beq.n	8018700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80186f8:	f7ff f9b6 	bl	8017a68 <HAL_PWREx_GetVoltageRange>
 80186fc:	6178      	str	r0, [r7, #20]
 80186fe:	e014      	b.n	801872a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8018700:	4b25      	ldr	r3, [pc, #148]	@ (8018798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018704:	4a24      	ldr	r2, [pc, #144]	@ (8018798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801870a:	6593      	str	r3, [r2, #88]	@ 0x58
 801870c:	4b22      	ldr	r3, [pc, #136]	@ (8018798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801870e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018714:	60fb      	str	r3, [r7, #12]
 8018716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8018718:	f7ff f9a6 	bl	8017a68 <HAL_PWREx_GetVoltageRange>
 801871c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801871e:	4b1e      	ldr	r3, [pc, #120]	@ (8018798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018722:	4a1d      	ldr	r2, [pc, #116]	@ (8018798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8018724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018728:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018730:	d10b      	bne.n	801874a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2b80      	cmp	r3, #128	@ 0x80
 8018736:	d919      	bls.n	801876c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2ba0      	cmp	r3, #160	@ 0xa0
 801873c:	d902      	bls.n	8018744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801873e:	2302      	movs	r3, #2
 8018740:	613b      	str	r3, [r7, #16]
 8018742:	e013      	b.n	801876c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8018744:	2301      	movs	r3, #1
 8018746:	613b      	str	r3, [r7, #16]
 8018748:	e010      	b.n	801876c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2b80      	cmp	r3, #128	@ 0x80
 801874e:	d902      	bls.n	8018756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8018750:	2303      	movs	r3, #3
 8018752:	613b      	str	r3, [r7, #16]
 8018754:	e00a      	b.n	801876c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	2b80      	cmp	r3, #128	@ 0x80
 801875a:	d102      	bne.n	8018762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801875c:	2302      	movs	r3, #2
 801875e:	613b      	str	r3, [r7, #16]
 8018760:	e004      	b.n	801876c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2b70      	cmp	r3, #112	@ 0x70
 8018766:	d101      	bne.n	801876c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8018768:	2301      	movs	r3, #1
 801876a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801876c:	4b0b      	ldr	r3, [pc, #44]	@ (801879c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	f023 0207 	bic.w	r2, r3, #7
 8018774:	4909      	ldr	r1, [pc, #36]	@ (801879c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8018776:	693b      	ldr	r3, [r7, #16]
 8018778:	4313      	orrs	r3, r2
 801877a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801877c:	4b07      	ldr	r3, [pc, #28]	@ (801879c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	f003 0307 	and.w	r3, r3, #7
 8018784:	693a      	ldr	r2, [r7, #16]
 8018786:	429a      	cmp	r2, r3
 8018788:	d001      	beq.n	801878e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801878a:	2301      	movs	r3, #1
 801878c:	e000      	b.n	8018790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801878e:	2300      	movs	r3, #0
}
 8018790:	4618      	mov	r0, r3
 8018792:	3718      	adds	r7, #24
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}
 8018798:	40021000 	.word	0x40021000
 801879c:	40022000 	.word	0x40022000

080187a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b086      	sub	sp, #24
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80187a8:	2300      	movs	r3, #0
 80187aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80187ac:	2300      	movs	r3, #0
 80187ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d031      	beq.n	8018820 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80187c4:	d01a      	beq.n	80187fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80187c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80187ca:	d814      	bhi.n	80187f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d009      	beq.n	80187e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80187d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80187d4:	d10f      	bne.n	80187f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80187d6:	4b5d      	ldr	r3, [pc, #372]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80187d8:	68db      	ldr	r3, [r3, #12]
 80187da:	4a5c      	ldr	r2, [pc, #368]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80187dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80187e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80187e2:	e00c      	b.n	80187fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	3304      	adds	r3, #4
 80187e8:	2100      	movs	r1, #0
 80187ea:	4618      	mov	r0, r3
 80187ec:	f000 f9f0 	bl	8018bd0 <RCCEx_PLLSAI1_Config>
 80187f0:	4603      	mov	r3, r0
 80187f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80187f4:	e003      	b.n	80187fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80187f6:	2301      	movs	r3, #1
 80187f8:	74fb      	strb	r3, [r7, #19]
      break;
 80187fa:	e000      	b.n	80187fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80187fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80187fe:	7cfb      	ldrb	r3, [r7, #19]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d10b      	bne.n	801881c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8018804:	4b51      	ldr	r3, [pc, #324]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801880a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018812:	494e      	ldr	r1, [pc, #312]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018814:	4313      	orrs	r3, r2
 8018816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801881a:	e001      	b.n	8018820 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801881c:	7cfb      	ldrb	r3, [r7, #19]
 801881e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018828:	2b00      	cmp	r3, #0
 801882a:	f000 809e 	beq.w	801896a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 801882e:	2300      	movs	r3, #0
 8018830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8018832:	4b46      	ldr	r3, [pc, #280]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801883a:	2b00      	cmp	r3, #0
 801883c:	d101      	bne.n	8018842 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801883e:	2301      	movs	r3, #1
 8018840:	e000      	b.n	8018844 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8018842:	2300      	movs	r3, #0
 8018844:	2b00      	cmp	r3, #0
 8018846:	d00d      	beq.n	8018864 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018848:	4b40      	ldr	r3, [pc, #256]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801884a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801884c:	4a3f      	ldr	r2, [pc, #252]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801884e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018852:	6593      	str	r3, [r2, #88]	@ 0x58
 8018854:	4b3d      	ldr	r3, [pc, #244]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8018856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801885c:	60bb      	str	r3, [r7, #8]
 801885e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018860:	2301      	movs	r3, #1
 8018862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8018864:	4b3a      	ldr	r3, [pc, #232]	@ (8018950 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4a39      	ldr	r2, [pc, #228]	@ (8018950 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801886a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801886e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8018870:	f7fe fd90 	bl	8017394 <HAL_GetTick>
 8018874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8018876:	e009      	b.n	801888c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018878:	f7fe fd8c 	bl	8017394 <HAL_GetTick>
 801887c:	4602      	mov	r2, r0
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	1ad3      	subs	r3, r2, r3
 8018882:	2b02      	cmp	r3, #2
 8018884:	d902      	bls.n	801888c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8018886:	2303      	movs	r3, #3
 8018888:	74fb      	strb	r3, [r7, #19]
        break;
 801888a:	e005      	b.n	8018898 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801888c:	4b30      	ldr	r3, [pc, #192]	@ (8018950 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018894:	2b00      	cmp	r3, #0
 8018896:	d0ef      	beq.n	8018878 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8018898:	7cfb      	ldrb	r3, [r7, #19]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d15a      	bne.n	8018954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801889e:	4b2b      	ldr	r3, [pc, #172]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80188a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80188aa:	697b      	ldr	r3, [r7, #20]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d01e      	beq.n	80188ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80188b4:	697a      	ldr	r2, [r7, #20]
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d019      	beq.n	80188ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80188ba:	4b24      	ldr	r3, [pc, #144]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80188c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80188c6:	4b21      	ldr	r3, [pc, #132]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188cc:	4a1f      	ldr	r2, [pc, #124]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80188d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80188d6:	4b1d      	ldr	r3, [pc, #116]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80188dc:	4a1b      	ldr	r2, [pc, #108]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80188e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80188e6:	4a19      	ldr	r2, [pc, #100]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80188e8:	697b      	ldr	r3, [r7, #20]
 80188ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	f003 0301 	and.w	r3, r3, #1
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d016      	beq.n	8018926 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80188f8:	f7fe fd4c 	bl	8017394 <HAL_GetTick>
 80188fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80188fe:	e00b      	b.n	8018918 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018900:	f7fe fd48 	bl	8017394 <HAL_GetTick>
 8018904:	4602      	mov	r2, r0
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	1ad3      	subs	r3, r2, r3
 801890a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801890e:	4293      	cmp	r3, r2
 8018910:	d902      	bls.n	8018918 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8018912:	2303      	movs	r3, #3
 8018914:	74fb      	strb	r3, [r7, #19]
            break;
 8018916:	e006      	b.n	8018926 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018918:	4b0c      	ldr	r3, [pc, #48]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801891e:	f003 0302 	and.w	r3, r3, #2
 8018922:	2b00      	cmp	r3, #0
 8018924:	d0ec      	beq.n	8018900 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8018926:	7cfb      	ldrb	r3, [r7, #19]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d10b      	bne.n	8018944 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801892c:	4b07      	ldr	r3, [pc, #28]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801892e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018932:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801893a:	4904      	ldr	r1, [pc, #16]	@ (801894c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801893c:	4313      	orrs	r3, r2
 801893e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8018942:	e009      	b.n	8018958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8018944:	7cfb      	ldrb	r3, [r7, #19]
 8018946:	74bb      	strb	r3, [r7, #18]
 8018948:	e006      	b.n	8018958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 801894a:	bf00      	nop
 801894c:	40021000 	.word	0x40021000
 8018950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018954:	7cfb      	ldrb	r3, [r7, #19]
 8018956:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018958:	7c7b      	ldrb	r3, [r7, #17]
 801895a:	2b01      	cmp	r3, #1
 801895c:	d105      	bne.n	801896a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801895e:	4b9b      	ldr	r3, [pc, #620]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018962:	4a9a      	ldr	r2, [pc, #616]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8018968:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f003 0301 	and.w	r3, r3, #1
 8018972:	2b00      	cmp	r3, #0
 8018974:	d00a      	beq.n	801898c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018976:	4b95      	ldr	r3, [pc, #596]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801897c:	f023 0203 	bic.w	r2, r3, #3
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6a1b      	ldr	r3, [r3, #32]
 8018984:	4991      	ldr	r1, [pc, #580]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018986:	4313      	orrs	r3, r2
 8018988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f003 0302 	and.w	r3, r3, #2
 8018994:	2b00      	cmp	r3, #0
 8018996:	d00a      	beq.n	80189ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018998:	4b8c      	ldr	r3, [pc, #560]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801899e:	f023 020c 	bic.w	r2, r3, #12
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189a6:	4989      	ldr	r1, [pc, #548]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189a8:	4313      	orrs	r3, r2
 80189aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	f003 0304 	and.w	r3, r3, #4
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d00a      	beq.n	80189d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80189ba:	4b84      	ldr	r3, [pc, #528]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80189c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189c8:	4980      	ldr	r1, [pc, #512]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189ca:	4313      	orrs	r3, r2
 80189cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	f003 0320 	and.w	r3, r3, #32
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d00a      	beq.n	80189f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80189dc:	4b7b      	ldr	r3, [pc, #492]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80189e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189ea:	4978      	ldr	r1, [pc, #480]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80189ec:	4313      	orrs	r3, r2
 80189ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d00a      	beq.n	8018a14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80189fe:	4b73      	ldr	r3, [pc, #460]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018a0c:	496f      	ldr	r1, [pc, #444]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a0e:	4313      	orrs	r3, r2
 8018a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d00a      	beq.n	8018a36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018a20:	4b6a      	ldr	r3, [pc, #424]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018a2e:	4967      	ldr	r1, [pc, #412]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a30:	4313      	orrs	r3, r2
 8018a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d00a      	beq.n	8018a58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018a42:	4b62      	ldr	r3, [pc, #392]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a50:	495e      	ldr	r1, [pc, #376]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a52:	4313      	orrs	r3, r2
 8018a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d00a      	beq.n	8018a7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8018a64:	4b59      	ldr	r3, [pc, #356]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a72:	4956      	ldr	r1, [pc, #344]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a74:	4313      	orrs	r3, r2
 8018a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d00a      	beq.n	8018a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018a86:	4b51      	ldr	r3, [pc, #324]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018a8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018a94:	494d      	ldr	r1, [pc, #308]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018a96:	4313      	orrs	r3, r2
 8018a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d028      	beq.n	8018afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8018aa8:	4b48      	ldr	r3, [pc, #288]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018ab6:	4945      	ldr	r1, [pc, #276]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018ac6:	d106      	bne.n	8018ad6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018ac8:	4b40      	ldr	r3, [pc, #256]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018aca:	68db      	ldr	r3, [r3, #12]
 8018acc:	4a3f      	ldr	r2, [pc, #252]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018ad2:	60d3      	str	r3, [r2, #12]
 8018ad4:	e011      	b.n	8018afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018ada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018ade:	d10c      	bne.n	8018afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	3304      	adds	r3, #4
 8018ae4:	2101      	movs	r1, #1
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f000 f872 	bl	8018bd0 <RCCEx_PLLSAI1_Config>
 8018aec:	4603      	mov	r3, r0
 8018aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018af0:	7cfb      	ldrb	r3, [r7, #19]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d001      	beq.n	8018afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8018af6:	7cfb      	ldrb	r3, [r7, #19]
 8018af8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d028      	beq.n	8018b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018b06:	4b31      	ldr	r3, [pc, #196]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018b0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b14:	492d      	ldr	r1, [pc, #180]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b16:	4313      	orrs	r3, r2
 8018b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018b24:	d106      	bne.n	8018b34 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018b26:	4b29      	ldr	r3, [pc, #164]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b28:	68db      	ldr	r3, [r3, #12]
 8018b2a:	4a28      	ldr	r2, [pc, #160]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018b30:	60d3      	str	r3, [r2, #12]
 8018b32:	e011      	b.n	8018b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018b3c:	d10c      	bne.n	8018b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	3304      	adds	r3, #4
 8018b42:	2101      	movs	r1, #1
 8018b44:	4618      	mov	r0, r3
 8018b46:	f000 f843 	bl	8018bd0 <RCCEx_PLLSAI1_Config>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018b4e:	7cfb      	ldrb	r3, [r7, #19]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8018b54:	7cfb      	ldrb	r3, [r7, #19]
 8018b56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d01c      	beq.n	8018b9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018b64:	4b19      	ldr	r3, [pc, #100]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018b6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b72:	4916      	ldr	r1, [pc, #88]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018b74:	4313      	orrs	r3, r2
 8018b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018b82:	d10c      	bne.n	8018b9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	3304      	adds	r3, #4
 8018b88:	2102      	movs	r1, #2
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f000 f820 	bl	8018bd0 <RCCEx_PLLSAI1_Config>
 8018b90:	4603      	mov	r3, r0
 8018b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018b94:	7cfb      	ldrb	r3, [r7, #19]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d001      	beq.n	8018b9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8018b9a:	7cfb      	ldrb	r3, [r7, #19]
 8018b9c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d00a      	beq.n	8018bc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8018baa:	4b08      	ldr	r3, [pc, #32]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018bb0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bb8:	4904      	ldr	r1, [pc, #16]	@ (8018bcc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8018bba:	4313      	orrs	r3, r2
 8018bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8018bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	3718      	adds	r7, #24
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	40021000 	.word	0x40021000

08018bd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b084      	sub	sp, #16
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
 8018bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018bda:	2300      	movs	r3, #0
 8018bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8018bde:	4b74      	ldr	r3, [pc, #464]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018be0:	68db      	ldr	r3, [r3, #12]
 8018be2:	f003 0303 	and.w	r3, r3, #3
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d018      	beq.n	8018c1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8018bea:	4b71      	ldr	r3, [pc, #452]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018bec:	68db      	ldr	r3, [r3, #12]
 8018bee:	f003 0203 	and.w	r2, r3, #3
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	429a      	cmp	r2, r3
 8018bf8:	d10d      	bne.n	8018c16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d009      	beq.n	8018c16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8018c02:	4b6b      	ldr	r3, [pc, #428]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c04:	68db      	ldr	r3, [r3, #12]
 8018c06:	091b      	lsrs	r3, r3, #4
 8018c08:	f003 0307 	and.w	r3, r3, #7
 8018c0c:	1c5a      	adds	r2, r3, #1
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	685b      	ldr	r3, [r3, #4]
       ||
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d047      	beq.n	8018ca6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8018c16:	2301      	movs	r3, #1
 8018c18:	73fb      	strb	r3, [r7, #15]
 8018c1a:	e044      	b.n	8018ca6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	2b03      	cmp	r3, #3
 8018c22:	d018      	beq.n	8018c56 <RCCEx_PLLSAI1_Config+0x86>
 8018c24:	2b03      	cmp	r3, #3
 8018c26:	d825      	bhi.n	8018c74 <RCCEx_PLLSAI1_Config+0xa4>
 8018c28:	2b01      	cmp	r3, #1
 8018c2a:	d002      	beq.n	8018c32 <RCCEx_PLLSAI1_Config+0x62>
 8018c2c:	2b02      	cmp	r3, #2
 8018c2e:	d009      	beq.n	8018c44 <RCCEx_PLLSAI1_Config+0x74>
 8018c30:	e020      	b.n	8018c74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8018c32:	4b5f      	ldr	r3, [pc, #380]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f003 0302 	and.w	r3, r3, #2
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d11d      	bne.n	8018c7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8018c3e:	2301      	movs	r3, #1
 8018c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018c42:	e01a      	b.n	8018c7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018c44:	4b5a      	ldr	r3, [pc, #360]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d116      	bne.n	8018c7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8018c50:	2301      	movs	r3, #1
 8018c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018c54:	e013      	b.n	8018c7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8018c56:	4b56      	ldr	r3, [pc, #344]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10f      	bne.n	8018c82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8018c62:	4b53      	ldr	r3, [pc, #332]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d109      	bne.n	8018c82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8018c6e:	2301      	movs	r3, #1
 8018c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8018c72:	e006      	b.n	8018c82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8018c74:	2301      	movs	r3, #1
 8018c76:	73fb      	strb	r3, [r7, #15]
      break;
 8018c78:	e004      	b.n	8018c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8018c7a:	bf00      	nop
 8018c7c:	e002      	b.n	8018c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8018c7e:	bf00      	nop
 8018c80:	e000      	b.n	8018c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8018c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8018c84:	7bfb      	ldrb	r3, [r7, #15]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d10d      	bne.n	8018ca6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8018c8a:	4b49      	ldr	r3, [pc, #292]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018c8c:	68db      	ldr	r3, [r3, #12]
 8018c8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6819      	ldr	r1, [r3, #0]
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	685b      	ldr	r3, [r3, #4]
 8018c9a:	3b01      	subs	r3, #1
 8018c9c:	011b      	lsls	r3, r3, #4
 8018c9e:	430b      	orrs	r3, r1
 8018ca0:	4943      	ldr	r1, [pc, #268]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8018ca6:	7bfb      	ldrb	r3, [r7, #15]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d17c      	bne.n	8018da6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8018cac:	4b40      	ldr	r3, [pc, #256]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018cb8:	f7fe fb6c 	bl	8017394 <HAL_GetTick>
 8018cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018cbe:	e009      	b.n	8018cd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018cc0:	f7fe fb68 	bl	8017394 <HAL_GetTick>
 8018cc4:	4602      	mov	r2, r0
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	1ad3      	subs	r3, r2, r3
 8018cca:	2b02      	cmp	r3, #2
 8018ccc:	d902      	bls.n	8018cd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8018cce:	2303      	movs	r3, #3
 8018cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8018cd2:	e005      	b.n	8018ce0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018cd4:	4b36      	ldr	r3, [pc, #216]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d1ef      	bne.n	8018cc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8018ce0:	7bfb      	ldrb	r3, [r7, #15]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d15f      	bne.n	8018da6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d110      	bne.n	8018d0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018cec:	4b30      	ldr	r3, [pc, #192]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018cee:	691b      	ldr	r3, [r3, #16]
 8018cf0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8018cf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018cf8:	687a      	ldr	r2, [r7, #4]
 8018cfa:	6892      	ldr	r2, [r2, #8]
 8018cfc:	0211      	lsls	r1, r2, #8
 8018cfe:	687a      	ldr	r2, [r7, #4]
 8018d00:	68d2      	ldr	r2, [r2, #12]
 8018d02:	06d2      	lsls	r2, r2, #27
 8018d04:	430a      	orrs	r2, r1
 8018d06:	492a      	ldr	r1, [pc, #168]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d08:	4313      	orrs	r3, r2
 8018d0a:	610b      	str	r3, [r1, #16]
 8018d0c:	e027      	b.n	8018d5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	d112      	bne.n	8018d3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d14:	4b26      	ldr	r3, [pc, #152]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d16:	691b      	ldr	r3, [r3, #16]
 8018d18:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8018d1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018d20:	687a      	ldr	r2, [r7, #4]
 8018d22:	6892      	ldr	r2, [r2, #8]
 8018d24:	0211      	lsls	r1, r2, #8
 8018d26:	687a      	ldr	r2, [r7, #4]
 8018d28:	6912      	ldr	r2, [r2, #16]
 8018d2a:	0852      	lsrs	r2, r2, #1
 8018d2c:	3a01      	subs	r2, #1
 8018d2e:	0552      	lsls	r2, r2, #21
 8018d30:	430a      	orrs	r2, r1
 8018d32:	491f      	ldr	r1, [pc, #124]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d34:	4313      	orrs	r3, r2
 8018d36:	610b      	str	r3, [r1, #16]
 8018d38:	e011      	b.n	8018d5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d3c:	691b      	ldr	r3, [r3, #16]
 8018d3e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8018d42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018d46:	687a      	ldr	r2, [r7, #4]
 8018d48:	6892      	ldr	r2, [r2, #8]
 8018d4a:	0211      	lsls	r1, r2, #8
 8018d4c:	687a      	ldr	r2, [r7, #4]
 8018d4e:	6952      	ldr	r2, [r2, #20]
 8018d50:	0852      	lsrs	r2, r2, #1
 8018d52:	3a01      	subs	r2, #1
 8018d54:	0652      	lsls	r2, r2, #25
 8018d56:	430a      	orrs	r2, r1
 8018d58:	4915      	ldr	r1, [pc, #84]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d5a:	4313      	orrs	r3, r2
 8018d5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8018d5e:	4b14      	ldr	r3, [pc, #80]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	4a13      	ldr	r2, [pc, #76]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018d6a:	f7fe fb13 	bl	8017394 <HAL_GetTick>
 8018d6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018d70:	e009      	b.n	8018d86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018d72:	f7fe fb0f 	bl	8017394 <HAL_GetTick>
 8018d76:	4602      	mov	r2, r0
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	1ad3      	subs	r3, r2, r3
 8018d7c:	2b02      	cmp	r3, #2
 8018d7e:	d902      	bls.n	8018d86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8018d80:	2303      	movs	r3, #3
 8018d82:	73fb      	strb	r3, [r7, #15]
          break;
 8018d84:	e005      	b.n	8018d92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018d86:	4b0a      	ldr	r3, [pc, #40]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d0ef      	beq.n	8018d72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8018d92:	7bfb      	ldrb	r3, [r7, #15]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d106      	bne.n	8018da6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8018d98:	4b05      	ldr	r3, [pc, #20]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018d9a:	691a      	ldr	r2, [r3, #16]
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	699b      	ldr	r3, [r3, #24]
 8018da0:	4903      	ldr	r1, [pc, #12]	@ (8018db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8018da2:	4313      	orrs	r3, r2
 8018da4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8018da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3710      	adds	r7, #16
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}
 8018db0:	40021000 	.word	0x40021000

08018db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b084      	sub	sp, #16
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d101      	bne.n	8018dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	e095      	b.n	8018ef2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d108      	bne.n	8018de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	685b      	ldr	r3, [r3, #4]
 8018dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018dd6:	d009      	beq.n	8018dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	61da      	str	r2, [r3, #28]
 8018dde:	e005      	b.n	8018dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2200      	movs	r2, #0
 8018de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	2200      	movs	r2, #0
 8018dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2200      	movs	r2, #0
 8018df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d106      	bne.n	8018e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	2200      	movs	r2, #0
 8018e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f7e8 feea 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2202      	movs	r2, #2
 8018e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	681a      	ldr	r2, [r3, #0]
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	68db      	ldr	r3, [r3, #12]
 8018e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018e2c:	d902      	bls.n	8018e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8018e2e:	2300      	movs	r3, #0
 8018e30:	60fb      	str	r3, [r7, #12]
 8018e32:	e002      	b.n	8018e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8018e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8018e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	68db      	ldr	r3, [r3, #12]
 8018e3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8018e42:	d007      	beq.n	8018e54 <HAL_SPI_Init+0xa0>
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018e4c:	d002      	beq.n	8018e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2200      	movs	r2, #0
 8018e52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	685b      	ldr	r3, [r3, #4]
 8018e58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	689b      	ldr	r3, [r3, #8]
 8018e60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8018e64:	431a      	orrs	r2, r3
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	691b      	ldr	r3, [r3, #16]
 8018e6a:	f003 0302 	and.w	r3, r3, #2
 8018e6e:	431a      	orrs	r2, r3
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	695b      	ldr	r3, [r3, #20]
 8018e74:	f003 0301 	and.w	r3, r3, #1
 8018e78:	431a      	orrs	r2, r3
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	699b      	ldr	r3, [r3, #24]
 8018e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018e82:	431a      	orrs	r2, r3
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	69db      	ldr	r3, [r3, #28]
 8018e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018e8c:	431a      	orrs	r2, r3
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	6a1b      	ldr	r3, [r3, #32]
 8018e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018e96:	ea42 0103 	orr.w	r1, r2, r3
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	430a      	orrs	r2, r1
 8018ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	699b      	ldr	r3, [r3, #24]
 8018eae:	0c1b      	lsrs	r3, r3, #16
 8018eb0:	f003 0204 	and.w	r2, r3, #4
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018eb8:	f003 0310 	and.w	r3, r3, #16
 8018ebc:	431a      	orrs	r2, r3
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ec2:	f003 0308 	and.w	r3, r3, #8
 8018ec6:	431a      	orrs	r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8018ed0:	ea42 0103 	orr.w	r1, r2, r3
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	430a      	orrs	r2, r1
 8018ee0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	2201      	movs	r2, #1
 8018eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8018ef0:	2300      	movs	r3, #0
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3710      	adds	r7, #16
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}

08018efa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8018efa:	b580      	push	{r7, lr}
 8018efc:	b08a      	sub	sp, #40	@ 0x28
 8018efe:	af00      	add	r7, sp, #0
 8018f00:	60f8      	str	r0, [r7, #12]
 8018f02:	60b9      	str	r1, [r7, #8]
 8018f04:	607a      	str	r2, [r7, #4]
 8018f06:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8018f08:	2301      	movs	r3, #1
 8018f0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018f0c:	f7fe fa42 	bl	8017394 <HAL_GetTick>
 8018f10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8018f18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8018f20:	887b      	ldrh	r3, [r7, #2]
 8018f22:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8018f24:	887b      	ldrh	r3, [r7, #2]
 8018f26:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018f28:	7ffb      	ldrb	r3, [r7, #31]
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d00c      	beq.n	8018f48 <HAL_SPI_TransmitReceive+0x4e>
 8018f2e:	69bb      	ldr	r3, [r7, #24]
 8018f30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018f34:	d106      	bne.n	8018f44 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	689b      	ldr	r3, [r3, #8]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d102      	bne.n	8018f44 <HAL_SPI_TransmitReceive+0x4a>
 8018f3e:	7ffb      	ldrb	r3, [r7, #31]
 8018f40:	2b04      	cmp	r3, #4
 8018f42:	d001      	beq.n	8018f48 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8018f44:	2302      	movs	r3, #2
 8018f46:	e1f3      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018f48:	68bb      	ldr	r3, [r7, #8]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d005      	beq.n	8018f5a <HAL_SPI_TransmitReceive+0x60>
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d002      	beq.n	8018f5a <HAL_SPI_TransmitReceive+0x60>
 8018f54:	887b      	ldrh	r3, [r7, #2]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d101      	bne.n	8018f5e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	e1e8      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018f64:	2b01      	cmp	r3, #1
 8018f66:	d101      	bne.n	8018f6c <HAL_SPI_TransmitReceive+0x72>
 8018f68:	2302      	movs	r3, #2
 8018f6a:	e1e1      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	2201      	movs	r2, #1
 8018f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8018f7a:	b2db      	uxtb	r3, r3
 8018f7c:	2b04      	cmp	r3, #4
 8018f7e:	d003      	beq.n	8018f88 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	2205      	movs	r2, #5
 8018f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	687a      	ldr	r2, [r7, #4]
 8018f92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	887a      	ldrh	r2, [r7, #2]
 8018f98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	887a      	ldrh	r2, [r7, #2]
 8018fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	68ba      	ldr	r2, [r7, #8]
 8018fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	887a      	ldrh	r2, [r7, #2]
 8018fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	887a      	ldrh	r2, [r7, #2]
 8018fb4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	2200      	movs	r2, #0
 8018fba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	68db      	ldr	r3, [r3, #12]
 8018fc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018fca:	d802      	bhi.n	8018fd2 <HAL_SPI_TransmitReceive+0xd8>
 8018fcc:	8abb      	ldrh	r3, [r7, #20]
 8018fce:	2b01      	cmp	r3, #1
 8018fd0:	d908      	bls.n	8018fe4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	685a      	ldr	r2, [r3, #4]
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8018fe0:	605a      	str	r2, [r3, #4]
 8018fe2:	e007      	b.n	8018ff4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	685a      	ldr	r2, [r3, #4]
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8018ff2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ffe:	2b40      	cmp	r3, #64	@ 0x40
 8019000:	d007      	beq.n	8019012 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	68db      	ldr	r3, [r3, #12]
 8019016:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801901a:	f240 8083 	bls.w	8019124 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	685b      	ldr	r3, [r3, #4]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d002      	beq.n	801902c <HAL_SPI_TransmitReceive+0x132>
 8019026:	8afb      	ldrh	r3, [r7, #22]
 8019028:	2b01      	cmp	r3, #1
 801902a:	d16f      	bne.n	801910c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019030:	881a      	ldrh	r2, [r3, #0]
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801903c:	1c9a      	adds	r2, r3, #2
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019046:	b29b      	uxth	r3, r3
 8019048:	3b01      	subs	r3, #1
 801904a:	b29a      	uxth	r2, r3
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019050:	e05c      	b.n	801910c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	689b      	ldr	r3, [r3, #8]
 8019058:	f003 0302 	and.w	r3, r3, #2
 801905c:	2b02      	cmp	r3, #2
 801905e:	d11b      	bne.n	8019098 <HAL_SPI_TransmitReceive+0x19e>
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019064:	b29b      	uxth	r3, r3
 8019066:	2b00      	cmp	r3, #0
 8019068:	d016      	beq.n	8019098 <HAL_SPI_TransmitReceive+0x19e>
 801906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801906c:	2b01      	cmp	r3, #1
 801906e:	d113      	bne.n	8019098 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019074:	881a      	ldrh	r2, [r3, #0]
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019080:	1c9a      	adds	r2, r3, #2
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801908a:	b29b      	uxth	r3, r3
 801908c:	3b01      	subs	r3, #1
 801908e:	b29a      	uxth	r2, r3
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019094:	2300      	movs	r3, #0
 8019096:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	689b      	ldr	r3, [r3, #8]
 801909e:	f003 0301 	and.w	r3, r3, #1
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	d11c      	bne.n	80190e0 <HAL_SPI_TransmitReceive+0x1e6>
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d016      	beq.n	80190e0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	68da      	ldr	r2, [r3, #12]
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190bc:	b292      	uxth	r2, r2
 80190be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190c4:	1c9a      	adds	r2, r3, #2
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80190d0:	b29b      	uxth	r3, r3
 80190d2:	3b01      	subs	r3, #1
 80190d4:	b29a      	uxth	r2, r3
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80190dc:	2301      	movs	r3, #1
 80190de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80190e0:	f7fe f958 	bl	8017394 <HAL_GetTick>
 80190e4:	4602      	mov	r2, r0
 80190e6:	6a3b      	ldr	r3, [r7, #32]
 80190e8:	1ad3      	subs	r3, r2, r3
 80190ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d80d      	bhi.n	801910c <HAL_SPI_TransmitReceive+0x212>
 80190f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190f6:	d009      	beq.n	801910c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	2201      	movs	r2, #1
 80190fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	2200      	movs	r2, #0
 8019104:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8019108:	2303      	movs	r3, #3
 801910a:	e111      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019110:	b29b      	uxth	r3, r3
 8019112:	2b00      	cmp	r3, #0
 8019114:	d19d      	bne.n	8019052 <HAL_SPI_TransmitReceive+0x158>
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801911c:	b29b      	uxth	r3, r3
 801911e:	2b00      	cmp	r3, #0
 8019120:	d197      	bne.n	8019052 <HAL_SPI_TransmitReceive+0x158>
 8019122:	e0e5      	b.n	80192f0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d003      	beq.n	8019134 <HAL_SPI_TransmitReceive+0x23a>
 801912c:	8afb      	ldrh	r3, [r7, #22]
 801912e:	2b01      	cmp	r3, #1
 8019130:	f040 80d1 	bne.w	80192d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019138:	b29b      	uxth	r3, r3
 801913a:	2b01      	cmp	r3, #1
 801913c:	d912      	bls.n	8019164 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019142:	881a      	ldrh	r2, [r3, #0]
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801914e:	1c9a      	adds	r2, r3, #2
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019158:	b29b      	uxth	r3, r3
 801915a:	3b02      	subs	r3, #2
 801915c:	b29a      	uxth	r2, r3
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8019162:	e0b8      	b.n	80192d6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	330c      	adds	r3, #12
 801916e:	7812      	ldrb	r2, [r2, #0]
 8019170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019176:	1c5a      	adds	r2, r3, #1
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8019180:	b29b      	uxth	r3, r3
 8019182:	3b01      	subs	r3, #1
 8019184:	b29a      	uxth	r2, r3
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801918a:	e0a4      	b.n	80192d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	689b      	ldr	r3, [r3, #8]
 8019192:	f003 0302 	and.w	r3, r3, #2
 8019196:	2b02      	cmp	r3, #2
 8019198:	d134      	bne.n	8019204 <HAL_SPI_TransmitReceive+0x30a>
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801919e:	b29b      	uxth	r3, r3
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d02f      	beq.n	8019204 <HAL_SPI_TransmitReceive+0x30a>
 80191a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191a6:	2b01      	cmp	r3, #1
 80191a8:	d12c      	bne.n	8019204 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	2b01      	cmp	r3, #1
 80191b2:	d912      	bls.n	80191da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191b8:	881a      	ldrh	r2, [r3, #0]
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191c4:	1c9a      	adds	r2, r3, #2
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	3b02      	subs	r3, #2
 80191d2:	b29a      	uxth	r2, r3
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80191d8:	e012      	b.n	8019200 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	330c      	adds	r3, #12
 80191e4:	7812      	ldrb	r2, [r2, #0]
 80191e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191ec:	1c5a      	adds	r2, r3, #1
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	3b01      	subs	r3, #1
 80191fa:	b29a      	uxth	r2, r3
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019200:	2300      	movs	r3, #0
 8019202:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	689b      	ldr	r3, [r3, #8]
 801920a:	f003 0301 	and.w	r3, r3, #1
 801920e:	2b01      	cmp	r3, #1
 8019210:	d148      	bne.n	80192a4 <HAL_SPI_TransmitReceive+0x3aa>
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019218:	b29b      	uxth	r3, r3
 801921a:	2b00      	cmp	r3, #0
 801921c:	d042      	beq.n	80192a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019224:	b29b      	uxth	r3, r3
 8019226:	2b01      	cmp	r3, #1
 8019228:	d923      	bls.n	8019272 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	68da      	ldr	r2, [r3, #12]
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019234:	b292      	uxth	r2, r2
 8019236:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801923c:	1c9a      	adds	r2, r3, #2
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019248:	b29b      	uxth	r3, r3
 801924a:	3b02      	subs	r3, #2
 801924c:	b29a      	uxth	r2, r3
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801925a:	b29b      	uxth	r3, r3
 801925c:	2b01      	cmp	r3, #1
 801925e:	d81f      	bhi.n	80192a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	685a      	ldr	r2, [r3, #4]
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801926e:	605a      	str	r2, [r3, #4]
 8019270:	e016      	b.n	80192a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f103 020c 	add.w	r2, r3, #12
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801927e:	7812      	ldrb	r2, [r2, #0]
 8019280:	b2d2      	uxtb	r2, r2
 8019282:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019288:	1c5a      	adds	r2, r3, #1
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8019294:	b29b      	uxth	r3, r3
 8019296:	3b01      	subs	r3, #1
 8019298:	b29a      	uxth	r2, r3
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80192a0:	2301      	movs	r3, #1
 80192a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80192a4:	f7fe f876 	bl	8017394 <HAL_GetTick>
 80192a8:	4602      	mov	r2, r0
 80192aa:	6a3b      	ldr	r3, [r7, #32]
 80192ac:	1ad3      	subs	r3, r2, r3
 80192ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d803      	bhi.n	80192bc <HAL_SPI_TransmitReceive+0x3c2>
 80192b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192ba:	d102      	bne.n	80192c2 <HAL_SPI_TransmitReceive+0x3c8>
 80192bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d109      	bne.n	80192d6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2201      	movs	r2, #1
 80192c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	2200      	movs	r2, #0
 80192ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80192d2:	2303      	movs	r3, #3
 80192d4:	e02c      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80192da:	b29b      	uxth	r3, r3
 80192dc:	2b00      	cmp	r3, #0
 80192de:	f47f af55 	bne.w	801918c <HAL_SPI_TransmitReceive+0x292>
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80192e8:	b29b      	uxth	r3, r3
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	f47f af4e 	bne.w	801918c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80192f0:	6a3a      	ldr	r2, [r7, #32]
 80192f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80192f4:	68f8      	ldr	r0, [r7, #12]
 80192f6:	f000 f93d 	bl	8019574 <SPI_EndRxTxTransaction>
 80192fa:	4603      	mov	r3, r0
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d008      	beq.n	8019312 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	2220      	movs	r2, #32
 8019304:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	2200      	movs	r2, #0
 801930a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 801930e:	2301      	movs	r3, #1
 8019310:	e00e      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	2201      	movs	r2, #1
 8019316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	2200      	movs	r2, #0
 801931e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019326:	2b00      	cmp	r3, #0
 8019328:	d001      	beq.n	801932e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 801932a:	2301      	movs	r3, #1
 801932c:	e000      	b.n	8019330 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 801932e:	2300      	movs	r3, #0
  }
}
 8019330:	4618      	mov	r0, r3
 8019332:	3728      	adds	r7, #40	@ 0x28
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}

08019338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b088      	sub	sp, #32
 801933c:	af00      	add	r7, sp, #0
 801933e:	60f8      	str	r0, [r7, #12]
 8019340:	60b9      	str	r1, [r7, #8]
 8019342:	603b      	str	r3, [r7, #0]
 8019344:	4613      	mov	r3, r2
 8019346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8019348:	f7fe f824 	bl	8017394 <HAL_GetTick>
 801934c:	4602      	mov	r2, r0
 801934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019350:	1a9b      	subs	r3, r3, r2
 8019352:	683a      	ldr	r2, [r7, #0]
 8019354:	4413      	add	r3, r2
 8019356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8019358:	f7fe f81c 	bl	8017394 <HAL_GetTick>
 801935c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801935e:	4b39      	ldr	r3, [pc, #228]	@ (8019444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	015b      	lsls	r3, r3, #5
 8019364:	0d1b      	lsrs	r3, r3, #20
 8019366:	69fa      	ldr	r2, [r7, #28]
 8019368:	fb02 f303 	mul.w	r3, r2, r3
 801936c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801936e:	e054      	b.n	801941a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019376:	d050      	beq.n	801941a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8019378:	f7fe f80c 	bl	8017394 <HAL_GetTick>
 801937c:	4602      	mov	r2, r0
 801937e:	69bb      	ldr	r3, [r7, #24]
 8019380:	1ad3      	subs	r3, r2, r3
 8019382:	69fa      	ldr	r2, [r7, #28]
 8019384:	429a      	cmp	r2, r3
 8019386:	d902      	bls.n	801938e <SPI_WaitFlagStateUntilTimeout+0x56>
 8019388:	69fb      	ldr	r3, [r7, #28]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d13d      	bne.n	801940a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	685a      	ldr	r2, [r3, #4]
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801939c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	685b      	ldr	r3, [r3, #4]
 80193a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80193a6:	d111      	bne.n	80193cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	689b      	ldr	r3, [r3, #8]
 80193ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193b0:	d004      	beq.n	80193bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	689b      	ldr	r3, [r3, #8]
 80193b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80193ba:	d107      	bne.n	80193cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	681a      	ldr	r2, [r3, #0]
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80193ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80193d4:	d10f      	bne.n	80193f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80193e4:	601a      	str	r2, [r3, #0]
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	681a      	ldr	r2, [r3, #0]
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80193f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	2201      	movs	r2, #1
 80193fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	2200      	movs	r2, #0
 8019402:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8019406:	2303      	movs	r3, #3
 8019408:	e017      	b.n	801943a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d101      	bne.n	8019414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8019410:	2300      	movs	r3, #0
 8019412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8019414:	697b      	ldr	r3, [r7, #20]
 8019416:	3b01      	subs	r3, #1
 8019418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	689a      	ldr	r2, [r3, #8]
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	4013      	ands	r3, r2
 8019424:	68ba      	ldr	r2, [r7, #8]
 8019426:	429a      	cmp	r2, r3
 8019428:	bf0c      	ite	eq
 801942a:	2301      	moveq	r3, #1
 801942c:	2300      	movne	r3, #0
 801942e:	b2db      	uxtb	r3, r3
 8019430:	461a      	mov	r2, r3
 8019432:	79fb      	ldrb	r3, [r7, #7]
 8019434:	429a      	cmp	r2, r3
 8019436:	d19b      	bne.n	8019370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8019438:	2300      	movs	r3, #0
}
 801943a:	4618      	mov	r0, r3
 801943c:	3720      	adds	r7, #32
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
 8019442:	bf00      	nop
 8019444:	20000004 	.word	0x20000004

08019448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b08a      	sub	sp, #40	@ 0x28
 801944c:	af00      	add	r7, sp, #0
 801944e:	60f8      	str	r0, [r7, #12]
 8019450:	60b9      	str	r1, [r7, #8]
 8019452:	607a      	str	r2, [r7, #4]
 8019454:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8019456:	2300      	movs	r3, #0
 8019458:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801945a:	f7fd ff9b 	bl	8017394 <HAL_GetTick>
 801945e:	4602      	mov	r2, r0
 8019460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019462:	1a9b      	subs	r3, r3, r2
 8019464:	683a      	ldr	r2, [r7, #0]
 8019466:	4413      	add	r3, r2
 8019468:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801946a:	f7fd ff93 	bl	8017394 <HAL_GetTick>
 801946e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	330c      	adds	r3, #12
 8019476:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8019478:	4b3d      	ldr	r3, [pc, #244]	@ (8019570 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801947a:	681a      	ldr	r2, [r3, #0]
 801947c:	4613      	mov	r3, r2
 801947e:	009b      	lsls	r3, r3, #2
 8019480:	4413      	add	r3, r2
 8019482:	00da      	lsls	r2, r3, #3
 8019484:	1ad3      	subs	r3, r2, r3
 8019486:	0d1b      	lsrs	r3, r3, #20
 8019488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801948a:	fb02 f303 	mul.w	r3, r2, r3
 801948e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8019490:	e060      	b.n	8019554 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8019492:	68bb      	ldr	r3, [r7, #8]
 8019494:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8019498:	d107      	bne.n	80194aa <SPI_WaitFifoStateUntilTimeout+0x62>
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d104      	bne.n	80194aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80194a0:	69fb      	ldr	r3, [r7, #28]
 80194a2:	781b      	ldrb	r3, [r3, #0]
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80194a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194b0:	d050      	beq.n	8019554 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80194b2:	f7fd ff6f 	bl	8017394 <HAL_GetTick>
 80194b6:	4602      	mov	r2, r0
 80194b8:	6a3b      	ldr	r3, [r7, #32]
 80194ba:	1ad3      	subs	r3, r2, r3
 80194bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194be:	429a      	cmp	r2, r3
 80194c0:	d902      	bls.n	80194c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80194c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d13d      	bne.n	8019544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	685a      	ldr	r2, [r3, #4]
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80194d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	685b      	ldr	r3, [r3, #4]
 80194dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80194e0:	d111      	bne.n	8019506 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	689b      	ldr	r3, [r3, #8]
 80194e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80194ea:	d004      	beq.n	80194f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	689b      	ldr	r3, [r3, #8]
 80194f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80194f4:	d107      	bne.n	8019506 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	681a      	ldr	r2, [r3, #0]
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8019504:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801950a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801950e:	d10f      	bne.n	8019530 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801951e:	601a      	str	r2, [r3, #0]
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	681a      	ldr	r2, [r3, #0]
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801952e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	2201      	movs	r2, #1
 8019534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	2200      	movs	r2, #0
 801953c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8019540:	2303      	movs	r3, #3
 8019542:	e010      	b.n	8019566 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8019544:	69bb      	ldr	r3, [r7, #24]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d101      	bne.n	801954e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801954a:	2300      	movs	r3, #0
 801954c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801954e:	69bb      	ldr	r3, [r7, #24]
 8019550:	3b01      	subs	r3, #1
 8019552:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	689a      	ldr	r2, [r3, #8]
 801955a:	68bb      	ldr	r3, [r7, #8]
 801955c:	4013      	ands	r3, r2
 801955e:	687a      	ldr	r2, [r7, #4]
 8019560:	429a      	cmp	r2, r3
 8019562:	d196      	bne.n	8019492 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8019564:	2300      	movs	r3, #0
}
 8019566:	4618      	mov	r0, r3
 8019568:	3728      	adds	r7, #40	@ 0x28
 801956a:	46bd      	mov	sp, r7
 801956c:	bd80      	pop	{r7, pc}
 801956e:	bf00      	nop
 8019570:	20000004 	.word	0x20000004

08019574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b086      	sub	sp, #24
 8019578:	af02      	add	r7, sp, #8
 801957a:	60f8      	str	r0, [r7, #12]
 801957c:	60b9      	str	r1, [r7, #8]
 801957e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	9300      	str	r3, [sp, #0]
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	2200      	movs	r2, #0
 8019588:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f7ff ff5b 	bl	8019448 <SPI_WaitFifoStateUntilTimeout>
 8019592:	4603      	mov	r3, r0
 8019594:	2b00      	cmp	r3, #0
 8019596:	d007      	beq.n	80195a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801959c:	f043 0220 	orr.w	r2, r3, #32
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80195a4:	2303      	movs	r3, #3
 80195a6:	e027      	b.n	80195f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	9300      	str	r3, [sp, #0]
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	2200      	movs	r2, #0
 80195b0:	2180      	movs	r1, #128	@ 0x80
 80195b2:	68f8      	ldr	r0, [r7, #12]
 80195b4:	f7ff fec0 	bl	8019338 <SPI_WaitFlagStateUntilTimeout>
 80195b8:	4603      	mov	r3, r0
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d007      	beq.n	80195ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80195c2:	f043 0220 	orr.w	r2, r3, #32
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80195ca:	2303      	movs	r3, #3
 80195cc:	e014      	b.n	80195f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	9300      	str	r3, [sp, #0]
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	2200      	movs	r2, #0
 80195d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80195da:	68f8      	ldr	r0, [r7, #12]
 80195dc:	f7ff ff34 	bl	8019448 <SPI_WaitFifoStateUntilTimeout>
 80195e0:	4603      	mov	r3, r0
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d007      	beq.n	80195f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80195ea:	f043 0220 	orr.w	r2, r3, #32
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80195f2:	2303      	movs	r3, #3
 80195f4:	e000      	b.n	80195f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80195f6:	2300      	movs	r3, #0
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3710      	adds	r7, #16
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}

08019600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b082      	sub	sp, #8
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d101      	bne.n	8019612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801960e:	2301      	movs	r3, #1
 8019610:	e049      	b.n	80196a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019618:	b2db      	uxtb	r3, r3
 801961a:	2b00      	cmp	r3, #0
 801961c:	d106      	bne.n	801962c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	2200      	movs	r2, #0
 8019622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f7e8 fd90 	bl	800214c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	2202      	movs	r2, #2
 8019630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	681a      	ldr	r2, [r3, #0]
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	3304      	adds	r3, #4
 801963c:	4619      	mov	r1, r3
 801963e:	4610      	mov	r0, r2
 8019640:	f000 fdd4 	bl	801a1ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	2201      	movs	r2, #1
 8019648:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	2201      	movs	r2, #1
 8019650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	2201      	movs	r2, #1
 8019658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	2201      	movs	r2, #1
 8019660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2201      	movs	r2, #1
 8019668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2201      	movs	r2, #1
 8019670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	2201      	movs	r2, #1
 8019678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2201      	movs	r2, #1
 8019680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2201      	movs	r2, #1
 8019688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2201      	movs	r2, #1
 8019690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	2201      	movs	r2, #1
 8019698:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2201      	movs	r2, #1
 80196a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80196a4:	2300      	movs	r3, #0
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3708      	adds	r7, #8
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
	...

080196b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80196b0:	b480      	push	{r7}
 80196b2:	b085      	sub	sp, #20
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	2b01      	cmp	r3, #1
 80196c2:	d001      	beq.n	80196c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80196c4:	2301      	movs	r3, #1
 80196c6:	e033      	b.n	8019730 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2202      	movs	r2, #2
 80196cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	4a19      	ldr	r2, [pc, #100]	@ (801973c <HAL_TIM_Base_Start+0x8c>)
 80196d6:	4293      	cmp	r3, r2
 80196d8:	d009      	beq.n	80196ee <HAL_TIM_Base_Start+0x3e>
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80196e2:	d004      	beq.n	80196ee <HAL_TIM_Base_Start+0x3e>
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4a15      	ldr	r2, [pc, #84]	@ (8019740 <HAL_TIM_Base_Start+0x90>)
 80196ea:	4293      	cmp	r3, r2
 80196ec:	d115      	bne.n	801971a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	689a      	ldr	r2, [r3, #8]
 80196f4:	4b13      	ldr	r3, [pc, #76]	@ (8019744 <HAL_TIM_Base_Start+0x94>)
 80196f6:	4013      	ands	r3, r2
 80196f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	2b06      	cmp	r3, #6
 80196fe:	d015      	beq.n	801972c <HAL_TIM_Base_Start+0x7c>
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019706:	d011      	beq.n	801972c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	681a      	ldr	r2, [r3, #0]
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	f042 0201 	orr.w	r2, r2, #1
 8019716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019718:	e008      	b.n	801972c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	681a      	ldr	r2, [r3, #0]
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	f042 0201 	orr.w	r2, r2, #1
 8019728:	601a      	str	r2, [r3, #0]
 801972a:	e000      	b.n	801972e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801972c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801972e:	2300      	movs	r3, #0
}
 8019730:	4618      	mov	r0, r3
 8019732:	3714      	adds	r7, #20
 8019734:	46bd      	mov	sp, r7
 8019736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973a:	4770      	bx	lr
 801973c:	40012c00 	.word	0x40012c00
 8019740:	40014000 	.word	0x40014000
 8019744:	00010007 	.word	0x00010007

08019748 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8019748:	b480      	push	{r7}
 801974a:	b083      	sub	sp, #12
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	6a1a      	ldr	r2, [r3, #32]
 8019756:	f241 1311 	movw	r3, #4369	@ 0x1111
 801975a:	4013      	ands	r3, r2
 801975c:	2b00      	cmp	r3, #0
 801975e:	d10f      	bne.n	8019780 <HAL_TIM_Base_Stop+0x38>
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	6a1a      	ldr	r2, [r3, #32]
 8019766:	f240 4344 	movw	r3, #1092	@ 0x444
 801976a:	4013      	ands	r3, r2
 801976c:	2b00      	cmp	r3, #0
 801976e:	d107      	bne.n	8019780 <HAL_TIM_Base_Stop+0x38>
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	681a      	ldr	r2, [r3, #0]
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	f022 0201 	bic.w	r2, r2, #1
 801977e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2201      	movs	r2, #1
 8019784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8019788:	2300      	movs	r3, #0
}
 801978a:	4618      	mov	r0, r3
 801978c:	370c      	adds	r7, #12
 801978e:	46bd      	mov	sp, r7
 8019790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019794:	4770      	bx	lr
	...

08019798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019798:	b480      	push	{r7}
 801979a:	b085      	sub	sp, #20
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80197a6:	b2db      	uxtb	r3, r3
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	d001      	beq.n	80197b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80197ac:	2301      	movs	r3, #1
 80197ae:	e03b      	b.n	8019828 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2202      	movs	r2, #2
 80197b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	68da      	ldr	r2, [r3, #12]
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	f042 0201 	orr.w	r2, r2, #1
 80197c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	4a19      	ldr	r2, [pc, #100]	@ (8019834 <HAL_TIM_Base_Start_IT+0x9c>)
 80197ce:	4293      	cmp	r3, r2
 80197d0:	d009      	beq.n	80197e6 <HAL_TIM_Base_Start_IT+0x4e>
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80197da:	d004      	beq.n	80197e6 <HAL_TIM_Base_Start_IT+0x4e>
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	4a15      	ldr	r2, [pc, #84]	@ (8019838 <HAL_TIM_Base_Start_IT+0xa0>)
 80197e2:	4293      	cmp	r3, r2
 80197e4:	d115      	bne.n	8019812 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	689a      	ldr	r2, [r3, #8]
 80197ec:	4b13      	ldr	r3, [pc, #76]	@ (801983c <HAL_TIM_Base_Start_IT+0xa4>)
 80197ee:	4013      	ands	r3, r2
 80197f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	2b06      	cmp	r3, #6
 80197f6:	d015      	beq.n	8019824 <HAL_TIM_Base_Start_IT+0x8c>
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80197fe:	d011      	beq.n	8019824 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	681a      	ldr	r2, [r3, #0]
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	f042 0201 	orr.w	r2, r2, #1
 801980e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019810:	e008      	b.n	8019824 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	681a      	ldr	r2, [r3, #0]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	f042 0201 	orr.w	r2, r2, #1
 8019820:	601a      	str	r2, [r3, #0]
 8019822:	e000      	b.n	8019826 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019826:	2300      	movs	r3, #0
}
 8019828:	4618      	mov	r0, r3
 801982a:	3714      	adds	r7, #20
 801982c:	46bd      	mov	sp, r7
 801982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019832:	4770      	bx	lr
 8019834:	40012c00 	.word	0x40012c00
 8019838:	40014000 	.word	0x40014000
 801983c:	00010007 	.word	0x00010007

08019840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b082      	sub	sp, #8
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d101      	bne.n	8019852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801984e:	2301      	movs	r3, #1
 8019850:	e049      	b.n	80198e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019858:	b2db      	uxtb	r3, r3
 801985a:	2b00      	cmp	r3, #0
 801985c:	d106      	bne.n	801986c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2200      	movs	r2, #0
 8019862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019866:	6878      	ldr	r0, [r7, #4]
 8019868:	f7e8 fc50 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	2202      	movs	r2, #2
 8019870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681a      	ldr	r2, [r3, #0]
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	3304      	adds	r3, #4
 801987c:	4619      	mov	r1, r3
 801987e:	4610      	mov	r0, r2
 8019880:	f000 fcb4 	bl	801a1ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	2201      	movs	r2, #1
 8019888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	2201      	movs	r2, #1
 8019890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2201      	movs	r2, #1
 8019898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	2201      	movs	r2, #1
 80198a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	2201      	movs	r2, #1
 80198a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2201      	movs	r2, #1
 80198b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2201      	movs	r2, #1
 80198b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2201      	movs	r2, #1
 80198c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2201      	movs	r2, #1
 80198c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2201      	movs	r2, #1
 80198d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2201      	movs	r2, #1
 80198d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	2201      	movs	r2, #1
 80198e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80198e4:	2300      	movs	r3, #0
}
 80198e6:	4618      	mov	r0, r3
 80198e8:	3708      	adds	r7, #8
 80198ea:	46bd      	mov	sp, r7
 80198ec:	bd80      	pop	{r7, pc}
	...

080198f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b084      	sub	sp, #16
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d109      	bne.n	8019914 <HAL_TIM_PWM_Start+0x24>
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8019906:	b2db      	uxtb	r3, r3
 8019908:	2b01      	cmp	r3, #1
 801990a:	bf14      	ite	ne
 801990c:	2301      	movne	r3, #1
 801990e:	2300      	moveq	r3, #0
 8019910:	b2db      	uxtb	r3, r3
 8019912:	e03c      	b.n	801998e <HAL_TIM_PWM_Start+0x9e>
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	2b04      	cmp	r3, #4
 8019918:	d109      	bne.n	801992e <HAL_TIM_PWM_Start+0x3e>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8019920:	b2db      	uxtb	r3, r3
 8019922:	2b01      	cmp	r3, #1
 8019924:	bf14      	ite	ne
 8019926:	2301      	movne	r3, #1
 8019928:	2300      	moveq	r3, #0
 801992a:	b2db      	uxtb	r3, r3
 801992c:	e02f      	b.n	801998e <HAL_TIM_PWM_Start+0x9e>
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	2b08      	cmp	r3, #8
 8019932:	d109      	bne.n	8019948 <HAL_TIM_PWM_Start+0x58>
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801993a:	b2db      	uxtb	r3, r3
 801993c:	2b01      	cmp	r3, #1
 801993e:	bf14      	ite	ne
 8019940:	2301      	movne	r3, #1
 8019942:	2300      	moveq	r3, #0
 8019944:	b2db      	uxtb	r3, r3
 8019946:	e022      	b.n	801998e <HAL_TIM_PWM_Start+0x9e>
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	2b0c      	cmp	r3, #12
 801994c:	d109      	bne.n	8019962 <HAL_TIM_PWM_Start+0x72>
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019954:	b2db      	uxtb	r3, r3
 8019956:	2b01      	cmp	r3, #1
 8019958:	bf14      	ite	ne
 801995a:	2301      	movne	r3, #1
 801995c:	2300      	moveq	r3, #0
 801995e:	b2db      	uxtb	r3, r3
 8019960:	e015      	b.n	801998e <HAL_TIM_PWM_Start+0x9e>
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	2b10      	cmp	r3, #16
 8019966:	d109      	bne.n	801997c <HAL_TIM_PWM_Start+0x8c>
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801996e:	b2db      	uxtb	r3, r3
 8019970:	2b01      	cmp	r3, #1
 8019972:	bf14      	ite	ne
 8019974:	2301      	movne	r3, #1
 8019976:	2300      	moveq	r3, #0
 8019978:	b2db      	uxtb	r3, r3
 801997a:	e008      	b.n	801998e <HAL_TIM_PWM_Start+0x9e>
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019982:	b2db      	uxtb	r3, r3
 8019984:	2b01      	cmp	r3, #1
 8019986:	bf14      	ite	ne
 8019988:	2301      	movne	r3, #1
 801998a:	2300      	moveq	r3, #0
 801998c:	b2db      	uxtb	r3, r3
 801998e:	2b00      	cmp	r3, #0
 8019990:	d001      	beq.n	8019996 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8019992:	2301      	movs	r3, #1
 8019994:	e07e      	b.n	8019a94 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d104      	bne.n	80199a6 <HAL_TIM_PWM_Start+0xb6>
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	2202      	movs	r2, #2
 80199a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80199a4:	e023      	b.n	80199ee <HAL_TIM_PWM_Start+0xfe>
 80199a6:	683b      	ldr	r3, [r7, #0]
 80199a8:	2b04      	cmp	r3, #4
 80199aa:	d104      	bne.n	80199b6 <HAL_TIM_PWM_Start+0xc6>
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2202      	movs	r2, #2
 80199b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80199b4:	e01b      	b.n	80199ee <HAL_TIM_PWM_Start+0xfe>
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	2b08      	cmp	r3, #8
 80199ba:	d104      	bne.n	80199c6 <HAL_TIM_PWM_Start+0xd6>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2202      	movs	r2, #2
 80199c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80199c4:	e013      	b.n	80199ee <HAL_TIM_PWM_Start+0xfe>
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	2b0c      	cmp	r3, #12
 80199ca:	d104      	bne.n	80199d6 <HAL_TIM_PWM_Start+0xe6>
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	2202      	movs	r2, #2
 80199d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80199d4:	e00b      	b.n	80199ee <HAL_TIM_PWM_Start+0xfe>
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	2b10      	cmp	r3, #16
 80199da:	d104      	bne.n	80199e6 <HAL_TIM_PWM_Start+0xf6>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	2202      	movs	r2, #2
 80199e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80199e4:	e003      	b.n	80199ee <HAL_TIM_PWM_Start+0xfe>
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	2202      	movs	r2, #2
 80199ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	2201      	movs	r2, #1
 80199f4:	6839      	ldr	r1, [r7, #0]
 80199f6:	4618      	mov	r0, r3
 80199f8:	f000 ff80 	bl	801a8fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	4a26      	ldr	r2, [pc, #152]	@ (8019a9c <HAL_TIM_PWM_Start+0x1ac>)
 8019a02:	4293      	cmp	r3, r2
 8019a04:	d009      	beq.n	8019a1a <HAL_TIM_PWM_Start+0x12a>
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	4a25      	ldr	r2, [pc, #148]	@ (8019aa0 <HAL_TIM_PWM_Start+0x1b0>)
 8019a0c:	4293      	cmp	r3, r2
 8019a0e:	d004      	beq.n	8019a1a <HAL_TIM_PWM_Start+0x12a>
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	4a23      	ldr	r2, [pc, #140]	@ (8019aa4 <HAL_TIM_PWM_Start+0x1b4>)
 8019a16:	4293      	cmp	r3, r2
 8019a18:	d101      	bne.n	8019a1e <HAL_TIM_PWM_Start+0x12e>
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	e000      	b.n	8019a20 <HAL_TIM_PWM_Start+0x130>
 8019a1e:	2300      	movs	r3, #0
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d007      	beq.n	8019a34 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8019a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	4a18      	ldr	r2, [pc, #96]	@ (8019a9c <HAL_TIM_PWM_Start+0x1ac>)
 8019a3a:	4293      	cmp	r3, r2
 8019a3c:	d009      	beq.n	8019a52 <HAL_TIM_PWM_Start+0x162>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019a46:	d004      	beq.n	8019a52 <HAL_TIM_PWM_Start+0x162>
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	4a14      	ldr	r2, [pc, #80]	@ (8019aa0 <HAL_TIM_PWM_Start+0x1b0>)
 8019a4e:	4293      	cmp	r3, r2
 8019a50:	d115      	bne.n	8019a7e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	689a      	ldr	r2, [r3, #8]
 8019a58:	4b13      	ldr	r3, [pc, #76]	@ (8019aa8 <HAL_TIM_PWM_Start+0x1b8>)
 8019a5a:	4013      	ands	r3, r2
 8019a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	2b06      	cmp	r3, #6
 8019a62:	d015      	beq.n	8019a90 <HAL_TIM_PWM_Start+0x1a0>
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a6a:	d011      	beq.n	8019a90 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	681a      	ldr	r2, [r3, #0]
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	f042 0201 	orr.w	r2, r2, #1
 8019a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019a7c:	e008      	b.n	8019a90 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	681a      	ldr	r2, [r3, #0]
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	f042 0201 	orr.w	r2, r2, #1
 8019a8c:	601a      	str	r2, [r3, #0]
 8019a8e:	e000      	b.n	8019a92 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019a90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019a92:	2300      	movs	r3, #0
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	3710      	adds	r7, #16
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	40012c00 	.word	0x40012c00
 8019aa0:	40014000 	.word	0x40014000
 8019aa4:	40014400 	.word	0x40014400
 8019aa8:	00010007 	.word	0x00010007

08019aac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b082      	sub	sp, #8
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
 8019ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	2200      	movs	r2, #0
 8019abc:	6839      	ldr	r1, [r7, #0]
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f000 ff1c 	bl	801a8fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	4a39      	ldr	r2, [pc, #228]	@ (8019bb0 <HAL_TIM_PWM_Stop+0x104>)
 8019aca:	4293      	cmp	r3, r2
 8019acc:	d009      	beq.n	8019ae2 <HAL_TIM_PWM_Stop+0x36>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	4a38      	ldr	r2, [pc, #224]	@ (8019bb4 <HAL_TIM_PWM_Stop+0x108>)
 8019ad4:	4293      	cmp	r3, r2
 8019ad6:	d004      	beq.n	8019ae2 <HAL_TIM_PWM_Stop+0x36>
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	4a36      	ldr	r2, [pc, #216]	@ (8019bb8 <HAL_TIM_PWM_Stop+0x10c>)
 8019ade:	4293      	cmp	r3, r2
 8019ae0:	d101      	bne.n	8019ae6 <HAL_TIM_PWM_Stop+0x3a>
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	e000      	b.n	8019ae8 <HAL_TIM_PWM_Stop+0x3c>
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d017      	beq.n	8019b1c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	6a1a      	ldr	r2, [r3, #32]
 8019af2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019af6:	4013      	ands	r3, r2
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d10f      	bne.n	8019b1c <HAL_TIM_PWM_Stop+0x70>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	6a1a      	ldr	r2, [r3, #32]
 8019b02:	f240 4344 	movw	r3, #1092	@ 0x444
 8019b06:	4013      	ands	r3, r2
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d107      	bne.n	8019b1c <HAL_TIM_PWM_Stop+0x70>
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8019b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	6a1a      	ldr	r2, [r3, #32]
 8019b22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8019b26:	4013      	ands	r3, r2
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d10f      	bne.n	8019b4c <HAL_TIM_PWM_Stop+0xa0>
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	6a1a      	ldr	r2, [r3, #32]
 8019b32:	f240 4344 	movw	r3, #1092	@ 0x444
 8019b36:	4013      	ands	r3, r2
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d107      	bne.n	8019b4c <HAL_TIM_PWM_Stop+0xa0>
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	681a      	ldr	r2, [r3, #0]
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	f022 0201 	bic.w	r2, r2, #1
 8019b4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d104      	bne.n	8019b5c <HAL_TIM_PWM_Stop+0xb0>
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	2201      	movs	r2, #1
 8019b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8019b5a:	e023      	b.n	8019ba4 <HAL_TIM_PWM_Stop+0xf8>
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	2b04      	cmp	r3, #4
 8019b60:	d104      	bne.n	8019b6c <HAL_TIM_PWM_Stop+0xc0>
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	2201      	movs	r2, #1
 8019b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8019b6a:	e01b      	b.n	8019ba4 <HAL_TIM_PWM_Stop+0xf8>
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	2b08      	cmp	r3, #8
 8019b70:	d104      	bne.n	8019b7c <HAL_TIM_PWM_Stop+0xd0>
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	2201      	movs	r2, #1
 8019b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019b7a:	e013      	b.n	8019ba4 <HAL_TIM_PWM_Stop+0xf8>
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	2b0c      	cmp	r3, #12
 8019b80:	d104      	bne.n	8019b8c <HAL_TIM_PWM_Stop+0xe0>
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	2201      	movs	r2, #1
 8019b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019b8a:	e00b      	b.n	8019ba4 <HAL_TIM_PWM_Stop+0xf8>
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	2b10      	cmp	r3, #16
 8019b90:	d104      	bne.n	8019b9c <HAL_TIM_PWM_Stop+0xf0>
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2201      	movs	r2, #1
 8019b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8019b9a:	e003      	b.n	8019ba4 <HAL_TIM_PWM_Stop+0xf8>
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2201      	movs	r2, #1
 8019ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8019ba4:	2300      	movs	r3, #0
}
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	3708      	adds	r7, #8
 8019baa:	46bd      	mov	sp, r7
 8019bac:	bd80      	pop	{r7, pc}
 8019bae:	bf00      	nop
 8019bb0:	40012c00 	.word	0x40012c00
 8019bb4:	40014000 	.word	0x40014000
 8019bb8:	40014400 	.word	0x40014400

08019bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b084      	sub	sp, #16
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	68db      	ldr	r3, [r3, #12]
 8019bca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	691b      	ldr	r3, [r3, #16]
 8019bd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8019bd4:	68bb      	ldr	r3, [r7, #8]
 8019bd6:	f003 0302 	and.w	r3, r3, #2
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d020      	beq.n	8019c20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	f003 0302 	and.w	r3, r3, #2
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d01b      	beq.n	8019c20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f06f 0202 	mvn.w	r2, #2
 8019bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	2201      	movs	r2, #1
 8019bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	699b      	ldr	r3, [r3, #24]
 8019bfe:	f003 0303 	and.w	r3, r3, #3
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d003      	beq.n	8019c0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019c06:	6878      	ldr	r0, [r7, #4]
 8019c08:	f000 fad1 	bl	801a1ae <HAL_TIM_IC_CaptureCallback>
 8019c0c:	e005      	b.n	8019c1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f000 fac3 	bl	801a19a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019c14:	6878      	ldr	r0, [r7, #4]
 8019c16:	f000 fad4 	bl	801a1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	f003 0304 	and.w	r3, r3, #4
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d020      	beq.n	8019c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	f003 0304 	and.w	r3, r3, #4
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d01b      	beq.n	8019c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	f06f 0204 	mvn.w	r2, #4
 8019c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	2202      	movs	r2, #2
 8019c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	699b      	ldr	r3, [r3, #24]
 8019c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d003      	beq.n	8019c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019c52:	6878      	ldr	r0, [r7, #4]
 8019c54:	f000 faab 	bl	801a1ae <HAL_TIM_IC_CaptureCallback>
 8019c58:	e005      	b.n	8019c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019c5a:	6878      	ldr	r0, [r7, #4]
 8019c5c:	f000 fa9d 	bl	801a19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019c60:	6878      	ldr	r0, [r7, #4]
 8019c62:	f000 faae 	bl	801a1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	2200      	movs	r2, #0
 8019c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	f003 0308 	and.w	r3, r3, #8
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d020      	beq.n	8019cb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	f003 0308 	and.w	r3, r3, #8
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d01b      	beq.n	8019cb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	f06f 0208 	mvn.w	r2, #8
 8019c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2204      	movs	r2, #4
 8019c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	69db      	ldr	r3, [r3, #28]
 8019c96:	f003 0303 	and.w	r3, r3, #3
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d003      	beq.n	8019ca6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019c9e:	6878      	ldr	r0, [r7, #4]
 8019ca0:	f000 fa85 	bl	801a1ae <HAL_TIM_IC_CaptureCallback>
 8019ca4:	e005      	b.n	8019cb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019ca6:	6878      	ldr	r0, [r7, #4]
 8019ca8:	f000 fa77 	bl	801a19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019cac:	6878      	ldr	r0, [r7, #4]
 8019cae:	f000 fa88 	bl	801a1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	f003 0310 	and.w	r3, r3, #16
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d020      	beq.n	8019d04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	f003 0310 	and.w	r3, r3, #16
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d01b      	beq.n	8019d04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	f06f 0210 	mvn.w	r2, #16
 8019cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	2208      	movs	r2, #8
 8019cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	69db      	ldr	r3, [r3, #28]
 8019ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d003      	beq.n	8019cf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019cea:	6878      	ldr	r0, [r7, #4]
 8019cec:	f000 fa5f 	bl	801a1ae <HAL_TIM_IC_CaptureCallback>
 8019cf0:	e005      	b.n	8019cfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019cf2:	6878      	ldr	r0, [r7, #4]
 8019cf4:	f000 fa51 	bl	801a19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019cf8:	6878      	ldr	r0, [r7, #4]
 8019cfa:	f000 fa62 	bl	801a1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	2200      	movs	r2, #0
 8019d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8019d04:	68bb      	ldr	r3, [r7, #8]
 8019d06:	f003 0301 	and.w	r3, r3, #1
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d00c      	beq.n	8019d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	f003 0301 	and.w	r3, r3, #1
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d007      	beq.n	8019d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	f06f 0201 	mvn.w	r2, #1
 8019d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f000 fa2f 	bl	801a186 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8019d28:	68bb      	ldr	r3, [r7, #8]
 8019d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d104      	bne.n	8019d3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d00c      	beq.n	8019d56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d007      	beq.n	8019d56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8019d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f000 fee1 	bl	801ab18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d00c      	beq.n	8019d7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d007      	beq.n	8019d7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8019d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8019d74:	6878      	ldr	r0, [r7, #4]
 8019d76:	f000 fed9 	bl	801ab2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8019d7a:	68bb      	ldr	r3, [r7, #8]
 8019d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d00c      	beq.n	8019d9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d007      	beq.n	8019d9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8019d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019d98:	6878      	ldr	r0, [r7, #4]
 8019d9a:	f000 fa1c 	bl	801a1d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8019d9e:	68bb      	ldr	r3, [r7, #8]
 8019da0:	f003 0320 	and.w	r3, r3, #32
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d00c      	beq.n	8019dc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f003 0320 	and.w	r3, r3, #32
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d007      	beq.n	8019dc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	f06f 0220 	mvn.w	r2, #32
 8019dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	f000 fea1 	bl	801ab04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019dc2:	bf00      	nop
 8019dc4:	3710      	adds	r7, #16
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bd80      	pop	{r7, pc}
	...

08019dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b086      	sub	sp, #24
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	60f8      	str	r0, [r7, #12]
 8019dd4:	60b9      	str	r1, [r7, #8]
 8019dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019dd8:	2300      	movs	r3, #0
 8019dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019de2:	2b01      	cmp	r3, #1
 8019de4:	d101      	bne.n	8019dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8019de6:	2302      	movs	r3, #2
 8019de8:	e0ff      	b.n	8019fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	2201      	movs	r2, #1
 8019dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	2b14      	cmp	r3, #20
 8019df6:	f200 80f0 	bhi.w	8019fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8019dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8019e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8019dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e00:	08019e55 	.word	0x08019e55
 8019e04:	08019fdb 	.word	0x08019fdb
 8019e08:	08019fdb 	.word	0x08019fdb
 8019e0c:	08019fdb 	.word	0x08019fdb
 8019e10:	08019e95 	.word	0x08019e95
 8019e14:	08019fdb 	.word	0x08019fdb
 8019e18:	08019fdb 	.word	0x08019fdb
 8019e1c:	08019fdb 	.word	0x08019fdb
 8019e20:	08019ed7 	.word	0x08019ed7
 8019e24:	08019fdb 	.word	0x08019fdb
 8019e28:	08019fdb 	.word	0x08019fdb
 8019e2c:	08019fdb 	.word	0x08019fdb
 8019e30:	08019f17 	.word	0x08019f17
 8019e34:	08019fdb 	.word	0x08019fdb
 8019e38:	08019fdb 	.word	0x08019fdb
 8019e3c:	08019fdb 	.word	0x08019fdb
 8019e40:	08019f59 	.word	0x08019f59
 8019e44:	08019fdb 	.word	0x08019fdb
 8019e48:	08019fdb 	.word	0x08019fdb
 8019e4c:	08019fdb 	.word	0x08019fdb
 8019e50:	08019f99 	.word	0x08019f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	68b9      	ldr	r1, [r7, #8]
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f000 fa36 	bl	801a2cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	699a      	ldr	r2, [r3, #24]
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	f042 0208 	orr.w	r2, r2, #8
 8019e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	699a      	ldr	r2, [r3, #24]
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f022 0204 	bic.w	r2, r2, #4
 8019e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	6999      	ldr	r1, [r3, #24]
 8019e86:	68bb      	ldr	r3, [r7, #8]
 8019e88:	691a      	ldr	r2, [r3, #16]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	430a      	orrs	r2, r1
 8019e90:	619a      	str	r2, [r3, #24]
      break;
 8019e92:	e0a5      	b.n	8019fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	68b9      	ldr	r1, [r7, #8]
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f000 fa92 	bl	801a3c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	699a      	ldr	r2, [r3, #24]
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	699a      	ldr	r2, [r3, #24]
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	6999      	ldr	r1, [r3, #24]
 8019ec6:	68bb      	ldr	r3, [r7, #8]
 8019ec8:	691b      	ldr	r3, [r3, #16]
 8019eca:	021a      	lsls	r2, r3, #8
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	430a      	orrs	r2, r1
 8019ed2:	619a      	str	r2, [r3, #24]
      break;
 8019ed4:	e084      	b.n	8019fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	68b9      	ldr	r1, [r7, #8]
 8019edc:	4618      	mov	r0, r3
 8019ede:	f000 faeb 	bl	801a4b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	69da      	ldr	r2, [r3, #28]
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	f042 0208 	orr.w	r2, r2, #8
 8019ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	69da      	ldr	r2, [r3, #28]
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	f022 0204 	bic.w	r2, r2, #4
 8019f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	69d9      	ldr	r1, [r3, #28]
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	691a      	ldr	r2, [r3, #16]
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	430a      	orrs	r2, r1
 8019f12:	61da      	str	r2, [r3, #28]
      break;
 8019f14:	e064      	b.n	8019fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	68b9      	ldr	r1, [r7, #8]
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f000 fb43 	bl	801a5a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	69da      	ldr	r2, [r3, #28]
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	69da      	ldr	r2, [r3, #28]
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	69d9      	ldr	r1, [r3, #28]
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	691b      	ldr	r3, [r3, #16]
 8019f4c:	021a      	lsls	r2, r3, #8
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	430a      	orrs	r2, r1
 8019f54:	61da      	str	r2, [r3, #28]
      break;
 8019f56:	e043      	b.n	8019fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	68b9      	ldr	r1, [r7, #8]
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f000 fb80 	bl	801a664 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	f042 0208 	orr.w	r2, r2, #8
 8019f72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f022 0204 	bic.w	r2, r2, #4
 8019f82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	691a      	ldr	r2, [r3, #16]
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	430a      	orrs	r2, r1
 8019f94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8019f96:	e023      	b.n	8019fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	68b9      	ldr	r1, [r7, #8]
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f000 fbb8 	bl	801a714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019fb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8019fca:	68bb      	ldr	r3, [r7, #8]
 8019fcc:	691b      	ldr	r3, [r3, #16]
 8019fce:	021a      	lsls	r2, r3, #8
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	430a      	orrs	r2, r1
 8019fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8019fd8:	e002      	b.n	8019fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8019fda:	2301      	movs	r3, #1
 8019fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8019fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8019fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019fea:	4618      	mov	r0, r3
 8019fec:	3718      	adds	r7, #24
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	bf00      	nop

08019ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b084      	sub	sp, #16
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
 8019ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019ffe:	2300      	movs	r3, #0
 801a000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a008:	2b01      	cmp	r3, #1
 801a00a:	d101      	bne.n	801a010 <HAL_TIM_ConfigClockSource+0x1c>
 801a00c:	2302      	movs	r3, #2
 801a00e:	e0b6      	b.n	801a17e <HAL_TIM_ConfigClockSource+0x18a>
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2201      	movs	r2, #1
 801a014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2202      	movs	r2, #2
 801a01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	689b      	ldr	r3, [r3, #8]
 801a026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a02e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801a032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801a03a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	68ba      	ldr	r2, [r7, #8]
 801a042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a04c:	d03e      	beq.n	801a0cc <HAL_TIM_ConfigClockSource+0xd8>
 801a04e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a052:	f200 8087 	bhi.w	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a05a:	f000 8086 	beq.w	801a16a <HAL_TIM_ConfigClockSource+0x176>
 801a05e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a062:	d87f      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a064:	2b70      	cmp	r3, #112	@ 0x70
 801a066:	d01a      	beq.n	801a09e <HAL_TIM_ConfigClockSource+0xaa>
 801a068:	2b70      	cmp	r3, #112	@ 0x70
 801a06a:	d87b      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a06c:	2b60      	cmp	r3, #96	@ 0x60
 801a06e:	d050      	beq.n	801a112 <HAL_TIM_ConfigClockSource+0x11e>
 801a070:	2b60      	cmp	r3, #96	@ 0x60
 801a072:	d877      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a074:	2b50      	cmp	r3, #80	@ 0x50
 801a076:	d03c      	beq.n	801a0f2 <HAL_TIM_ConfigClockSource+0xfe>
 801a078:	2b50      	cmp	r3, #80	@ 0x50
 801a07a:	d873      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a07c:	2b40      	cmp	r3, #64	@ 0x40
 801a07e:	d058      	beq.n	801a132 <HAL_TIM_ConfigClockSource+0x13e>
 801a080:	2b40      	cmp	r3, #64	@ 0x40
 801a082:	d86f      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a084:	2b30      	cmp	r3, #48	@ 0x30
 801a086:	d064      	beq.n	801a152 <HAL_TIM_ConfigClockSource+0x15e>
 801a088:	2b30      	cmp	r3, #48	@ 0x30
 801a08a:	d86b      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a08c:	2b20      	cmp	r3, #32
 801a08e:	d060      	beq.n	801a152 <HAL_TIM_ConfigClockSource+0x15e>
 801a090:	2b20      	cmp	r3, #32
 801a092:	d867      	bhi.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
 801a094:	2b00      	cmp	r3, #0
 801a096:	d05c      	beq.n	801a152 <HAL_TIM_ConfigClockSource+0x15e>
 801a098:	2b10      	cmp	r3, #16
 801a09a:	d05a      	beq.n	801a152 <HAL_TIM_ConfigClockSource+0x15e>
 801a09c:	e062      	b.n	801a164 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a0a2:	683b      	ldr	r3, [r7, #0]
 801a0a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a0ae:	f000 fc05 	bl	801a8bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	689b      	ldr	r3, [r3, #8]
 801a0b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a0ba:	68bb      	ldr	r3, [r7, #8]
 801a0bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801a0c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	68ba      	ldr	r2, [r7, #8]
 801a0c8:	609a      	str	r2, [r3, #8]
      break;
 801a0ca:	e04f      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a0d4:	683b      	ldr	r3, [r7, #0]
 801a0d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a0dc:	f000 fbee 	bl	801a8bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	689a      	ldr	r2, [r3, #8]
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a0ee:	609a      	str	r2, [r3, #8]
      break;
 801a0f0:	e03c      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a0fa:	683b      	ldr	r3, [r7, #0]
 801a0fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a0fe:	461a      	mov	r2, r3
 801a100:	f000 fb62 	bl	801a7c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2150      	movs	r1, #80	@ 0x50
 801a10a:	4618      	mov	r0, r3
 801a10c:	f000 fbbb 	bl	801a886 <TIM_ITRx_SetConfig>
      break;
 801a110:	e02c      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a116:	683b      	ldr	r3, [r7, #0]
 801a118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a11a:	683b      	ldr	r3, [r7, #0]
 801a11c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a11e:	461a      	mov	r2, r3
 801a120:	f000 fb81 	bl	801a826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2160      	movs	r1, #96	@ 0x60
 801a12a:	4618      	mov	r0, r3
 801a12c:	f000 fbab 	bl	801a886 <TIM_ITRx_SetConfig>
      break;
 801a130:	e01c      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a136:	683b      	ldr	r3, [r7, #0]
 801a138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a13e:	461a      	mov	r2, r3
 801a140:	f000 fb42 	bl	801a7c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	2140      	movs	r1, #64	@ 0x40
 801a14a:	4618      	mov	r0, r3
 801a14c:	f000 fb9b 	bl	801a886 <TIM_ITRx_SetConfig>
      break;
 801a150:	e00c      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681a      	ldr	r2, [r3, #0]
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	4619      	mov	r1, r3
 801a15c:	4610      	mov	r0, r2
 801a15e:	f000 fb92 	bl	801a886 <TIM_ITRx_SetConfig>
      break;
 801a162:	e003      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801a164:	2301      	movs	r3, #1
 801a166:	73fb      	strb	r3, [r7, #15]
      break;
 801a168:	e000      	b.n	801a16c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801a16a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2201      	movs	r2, #1
 801a170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	2200      	movs	r2, #0
 801a178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a17e:	4618      	mov	r0, r3
 801a180:	3710      	adds	r7, #16
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}

0801a186 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a186:	b480      	push	{r7}
 801a188:	b083      	sub	sp, #12
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801a18e:	bf00      	nop
 801a190:	370c      	adds	r7, #12
 801a192:	46bd      	mov	sp, r7
 801a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a198:	4770      	bx	lr

0801a19a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a19a:	b480      	push	{r7}
 801a19c:	b083      	sub	sp, #12
 801a19e:	af00      	add	r7, sp, #0
 801a1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a1a2:	bf00      	nop
 801a1a4:	370c      	adds	r7, #12
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ac:	4770      	bx	lr

0801a1ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a1ae:	b480      	push	{r7}
 801a1b0:	b083      	sub	sp, #12
 801a1b2:	af00      	add	r7, sp, #0
 801a1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a1b6:	bf00      	nop
 801a1b8:	370c      	adds	r7, #12
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c0:	4770      	bx	lr

0801a1c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a1c2:	b480      	push	{r7}
 801a1c4:	b083      	sub	sp, #12
 801a1c6:	af00      	add	r7, sp, #0
 801a1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a1ca:	bf00      	nop
 801a1cc:	370c      	adds	r7, #12
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d4:	4770      	bx	lr

0801a1d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a1d6:	b480      	push	{r7}
 801a1d8:	b083      	sub	sp, #12
 801a1da:	af00      	add	r7, sp, #0
 801a1dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a1de:	bf00      	nop
 801a1e0:	370c      	adds	r7, #12
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e8:	4770      	bx	lr
	...

0801a1ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	b085      	sub	sp, #20
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	4a30      	ldr	r2, [pc, #192]	@ (801a2c0 <TIM_Base_SetConfig+0xd4>)
 801a200:	4293      	cmp	r3, r2
 801a202:	d003      	beq.n	801a20c <TIM_Base_SetConfig+0x20>
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a20a:	d108      	bne.n	801a21e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	685b      	ldr	r3, [r3, #4]
 801a218:	68fa      	ldr	r2, [r7, #12]
 801a21a:	4313      	orrs	r3, r2
 801a21c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	4a27      	ldr	r2, [pc, #156]	@ (801a2c0 <TIM_Base_SetConfig+0xd4>)
 801a222:	4293      	cmp	r3, r2
 801a224:	d00b      	beq.n	801a23e <TIM_Base_SetConfig+0x52>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a22c:	d007      	beq.n	801a23e <TIM_Base_SetConfig+0x52>
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	4a24      	ldr	r2, [pc, #144]	@ (801a2c4 <TIM_Base_SetConfig+0xd8>)
 801a232:	4293      	cmp	r3, r2
 801a234:	d003      	beq.n	801a23e <TIM_Base_SetConfig+0x52>
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	4a23      	ldr	r2, [pc, #140]	@ (801a2c8 <TIM_Base_SetConfig+0xdc>)
 801a23a:	4293      	cmp	r3, r2
 801a23c:	d108      	bne.n	801a250 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a246:	683b      	ldr	r3, [r7, #0]
 801a248:	68db      	ldr	r3, [r3, #12]
 801a24a:	68fa      	ldr	r2, [r7, #12]
 801a24c:	4313      	orrs	r3, r2
 801a24e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801a256:	683b      	ldr	r3, [r7, #0]
 801a258:	695b      	ldr	r3, [r3, #20]
 801a25a:	4313      	orrs	r3, r2
 801a25c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	68fa      	ldr	r2, [r7, #12]
 801a262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a264:	683b      	ldr	r3, [r7, #0]
 801a266:	689a      	ldr	r2, [r3, #8]
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a26c:	683b      	ldr	r3, [r7, #0]
 801a26e:	681a      	ldr	r2, [r3, #0]
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	4a12      	ldr	r2, [pc, #72]	@ (801a2c0 <TIM_Base_SetConfig+0xd4>)
 801a278:	4293      	cmp	r3, r2
 801a27a:	d007      	beq.n	801a28c <TIM_Base_SetConfig+0xa0>
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	4a11      	ldr	r2, [pc, #68]	@ (801a2c4 <TIM_Base_SetConfig+0xd8>)
 801a280:	4293      	cmp	r3, r2
 801a282:	d003      	beq.n	801a28c <TIM_Base_SetConfig+0xa0>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	4a10      	ldr	r2, [pc, #64]	@ (801a2c8 <TIM_Base_SetConfig+0xdc>)
 801a288:	4293      	cmp	r3, r2
 801a28a:	d103      	bne.n	801a294 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	691a      	ldr	r2, [r3, #16]
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	2201      	movs	r2, #1
 801a298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	691b      	ldr	r3, [r3, #16]
 801a29e:	f003 0301 	and.w	r3, r3, #1
 801a2a2:	2b01      	cmp	r3, #1
 801a2a4:	d105      	bne.n	801a2b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	691b      	ldr	r3, [r3, #16]
 801a2aa:	f023 0201 	bic.w	r2, r3, #1
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	611a      	str	r2, [r3, #16]
  }
}
 801a2b2:	bf00      	nop
 801a2b4:	3714      	adds	r7, #20
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2bc:	4770      	bx	lr
 801a2be:	bf00      	nop
 801a2c0:	40012c00 	.word	0x40012c00
 801a2c4:	40014000 	.word	0x40014000
 801a2c8:	40014400 	.word	0x40014400

0801a2cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a2cc:	b480      	push	{r7}
 801a2ce:	b087      	sub	sp, #28
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	6a1b      	ldr	r3, [r3, #32]
 801a2da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	6a1b      	ldr	r3, [r3, #32]
 801a2e0:	f023 0201 	bic.w	r2, r3, #1
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	685b      	ldr	r3, [r3, #4]
 801a2ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	699b      	ldr	r3, [r3, #24]
 801a2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a2fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	f023 0303 	bic.w	r3, r3, #3
 801a306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	68fa      	ldr	r2, [r7, #12]
 801a30e:	4313      	orrs	r3, r2
 801a310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a312:	697b      	ldr	r3, [r7, #20]
 801a314:	f023 0302 	bic.w	r3, r3, #2
 801a318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	689b      	ldr	r3, [r3, #8]
 801a31e:	697a      	ldr	r2, [r7, #20]
 801a320:	4313      	orrs	r3, r2
 801a322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	4a24      	ldr	r2, [pc, #144]	@ (801a3b8 <TIM_OC1_SetConfig+0xec>)
 801a328:	4293      	cmp	r3, r2
 801a32a:	d007      	beq.n	801a33c <TIM_OC1_SetConfig+0x70>
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	4a23      	ldr	r2, [pc, #140]	@ (801a3bc <TIM_OC1_SetConfig+0xf0>)
 801a330:	4293      	cmp	r3, r2
 801a332:	d003      	beq.n	801a33c <TIM_OC1_SetConfig+0x70>
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	4a22      	ldr	r2, [pc, #136]	@ (801a3c0 <TIM_OC1_SetConfig+0xf4>)
 801a338:	4293      	cmp	r3, r2
 801a33a:	d10c      	bne.n	801a356 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a33c:	697b      	ldr	r3, [r7, #20]
 801a33e:	f023 0308 	bic.w	r3, r3, #8
 801a342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a344:	683b      	ldr	r3, [r7, #0]
 801a346:	68db      	ldr	r3, [r3, #12]
 801a348:	697a      	ldr	r2, [r7, #20]
 801a34a:	4313      	orrs	r3, r2
 801a34c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a34e:	697b      	ldr	r3, [r7, #20]
 801a350:	f023 0304 	bic.w	r3, r3, #4
 801a354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	4a17      	ldr	r2, [pc, #92]	@ (801a3b8 <TIM_OC1_SetConfig+0xec>)
 801a35a:	4293      	cmp	r3, r2
 801a35c:	d007      	beq.n	801a36e <TIM_OC1_SetConfig+0xa2>
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	4a16      	ldr	r2, [pc, #88]	@ (801a3bc <TIM_OC1_SetConfig+0xf0>)
 801a362:	4293      	cmp	r3, r2
 801a364:	d003      	beq.n	801a36e <TIM_OC1_SetConfig+0xa2>
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	4a15      	ldr	r2, [pc, #84]	@ (801a3c0 <TIM_OC1_SetConfig+0xf4>)
 801a36a:	4293      	cmp	r3, r2
 801a36c:	d111      	bne.n	801a392 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a36e:	693b      	ldr	r3, [r7, #16]
 801a370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a376:	693b      	ldr	r3, [r7, #16]
 801a378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a37c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	695b      	ldr	r3, [r3, #20]
 801a382:	693a      	ldr	r2, [r7, #16]
 801a384:	4313      	orrs	r3, r2
 801a386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a388:	683b      	ldr	r3, [r7, #0]
 801a38a:	699b      	ldr	r3, [r3, #24]
 801a38c:	693a      	ldr	r2, [r7, #16]
 801a38e:	4313      	orrs	r3, r2
 801a390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	693a      	ldr	r2, [r7, #16]
 801a396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	68fa      	ldr	r2, [r7, #12]
 801a39c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	685a      	ldr	r2, [r3, #4]
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	697a      	ldr	r2, [r7, #20]
 801a3aa:	621a      	str	r2, [r3, #32]
}
 801a3ac:	bf00      	nop
 801a3ae:	371c      	adds	r7, #28
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b6:	4770      	bx	lr
 801a3b8:	40012c00 	.word	0x40012c00
 801a3bc:	40014000 	.word	0x40014000
 801a3c0:	40014400 	.word	0x40014400

0801a3c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a3c4:	b480      	push	{r7}
 801a3c6:	b087      	sub	sp, #28
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
 801a3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	6a1b      	ldr	r3, [r3, #32]
 801a3d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	6a1b      	ldr	r3, [r3, #32]
 801a3d8:	f023 0210 	bic.w	r2, r3, #16
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	685b      	ldr	r3, [r3, #4]
 801a3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	699b      	ldr	r3, [r3, #24]
 801a3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a3f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	021b      	lsls	r3, r3, #8
 801a406:	68fa      	ldr	r2, [r7, #12]
 801a408:	4313      	orrs	r3, r2
 801a40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a40c:	697b      	ldr	r3, [r7, #20]
 801a40e:	f023 0320 	bic.w	r3, r3, #32
 801a412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a414:	683b      	ldr	r3, [r7, #0]
 801a416:	689b      	ldr	r3, [r3, #8]
 801a418:	011b      	lsls	r3, r3, #4
 801a41a:	697a      	ldr	r2, [r7, #20]
 801a41c:	4313      	orrs	r3, r2
 801a41e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	4a22      	ldr	r2, [pc, #136]	@ (801a4ac <TIM_OC2_SetConfig+0xe8>)
 801a424:	4293      	cmp	r3, r2
 801a426:	d10d      	bne.n	801a444 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a428:	697b      	ldr	r3, [r7, #20]
 801a42a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a42e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	68db      	ldr	r3, [r3, #12]
 801a434:	011b      	lsls	r3, r3, #4
 801a436:	697a      	ldr	r2, [r7, #20]
 801a438:	4313      	orrs	r3, r2
 801a43a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a43c:	697b      	ldr	r3, [r7, #20]
 801a43e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	4a19      	ldr	r2, [pc, #100]	@ (801a4ac <TIM_OC2_SetConfig+0xe8>)
 801a448:	4293      	cmp	r3, r2
 801a44a:	d007      	beq.n	801a45c <TIM_OC2_SetConfig+0x98>
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	4a18      	ldr	r2, [pc, #96]	@ (801a4b0 <TIM_OC2_SetConfig+0xec>)
 801a450:	4293      	cmp	r3, r2
 801a452:	d003      	beq.n	801a45c <TIM_OC2_SetConfig+0x98>
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	4a17      	ldr	r2, [pc, #92]	@ (801a4b4 <TIM_OC2_SetConfig+0xf0>)
 801a458:	4293      	cmp	r3, r2
 801a45a:	d113      	bne.n	801a484 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801a45c:	693b      	ldr	r3, [r7, #16]
 801a45e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801a464:	693b      	ldr	r3, [r7, #16]
 801a466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a46a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	695b      	ldr	r3, [r3, #20]
 801a470:	009b      	lsls	r3, r3, #2
 801a472:	693a      	ldr	r2, [r7, #16]
 801a474:	4313      	orrs	r3, r2
 801a476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	699b      	ldr	r3, [r3, #24]
 801a47c:	009b      	lsls	r3, r3, #2
 801a47e:	693a      	ldr	r2, [r7, #16]
 801a480:	4313      	orrs	r3, r2
 801a482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	693a      	ldr	r2, [r7, #16]
 801a488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	68fa      	ldr	r2, [r7, #12]
 801a48e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a490:	683b      	ldr	r3, [r7, #0]
 801a492:	685a      	ldr	r2, [r3, #4]
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	697a      	ldr	r2, [r7, #20]
 801a49c:	621a      	str	r2, [r3, #32]
}
 801a49e:	bf00      	nop
 801a4a0:	371c      	adds	r7, #28
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a8:	4770      	bx	lr
 801a4aa:	bf00      	nop
 801a4ac:	40012c00 	.word	0x40012c00
 801a4b0:	40014000 	.word	0x40014000
 801a4b4:	40014400 	.word	0x40014400

0801a4b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	b087      	sub	sp, #28
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	6a1b      	ldr	r3, [r3, #32]
 801a4c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6a1b      	ldr	r3, [r3, #32]
 801a4cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	685b      	ldr	r3, [r3, #4]
 801a4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	69db      	ldr	r3, [r3, #28]
 801a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a4e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	f023 0303 	bic.w	r3, r3, #3
 801a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	68fa      	ldr	r2, [r7, #12]
 801a4fa:	4313      	orrs	r3, r2
 801a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a4fe:	697b      	ldr	r3, [r7, #20]
 801a500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	689b      	ldr	r3, [r3, #8]
 801a50a:	021b      	lsls	r3, r3, #8
 801a50c:	697a      	ldr	r2, [r7, #20]
 801a50e:	4313      	orrs	r3, r2
 801a510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	4a21      	ldr	r2, [pc, #132]	@ (801a59c <TIM_OC3_SetConfig+0xe4>)
 801a516:	4293      	cmp	r3, r2
 801a518:	d10d      	bne.n	801a536 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801a51a:	697b      	ldr	r3, [r7, #20]
 801a51c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	68db      	ldr	r3, [r3, #12]
 801a526:	021b      	lsls	r3, r3, #8
 801a528:	697a      	ldr	r2, [r7, #20]
 801a52a:	4313      	orrs	r3, r2
 801a52c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801a52e:	697b      	ldr	r3, [r7, #20]
 801a530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	4a18      	ldr	r2, [pc, #96]	@ (801a59c <TIM_OC3_SetConfig+0xe4>)
 801a53a:	4293      	cmp	r3, r2
 801a53c:	d007      	beq.n	801a54e <TIM_OC3_SetConfig+0x96>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	4a17      	ldr	r2, [pc, #92]	@ (801a5a0 <TIM_OC3_SetConfig+0xe8>)
 801a542:	4293      	cmp	r3, r2
 801a544:	d003      	beq.n	801a54e <TIM_OC3_SetConfig+0x96>
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	4a16      	ldr	r2, [pc, #88]	@ (801a5a4 <TIM_OC3_SetConfig+0xec>)
 801a54a:	4293      	cmp	r3, r2
 801a54c:	d113      	bne.n	801a576 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801a54e:	693b      	ldr	r3, [r7, #16]
 801a550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801a556:	693b      	ldr	r3, [r7, #16]
 801a558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801a55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	695b      	ldr	r3, [r3, #20]
 801a562:	011b      	lsls	r3, r3, #4
 801a564:	693a      	ldr	r2, [r7, #16]
 801a566:	4313      	orrs	r3, r2
 801a568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801a56a:	683b      	ldr	r3, [r7, #0]
 801a56c:	699b      	ldr	r3, [r3, #24]
 801a56e:	011b      	lsls	r3, r3, #4
 801a570:	693a      	ldr	r2, [r7, #16]
 801a572:	4313      	orrs	r3, r2
 801a574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	693a      	ldr	r2, [r7, #16]
 801a57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	68fa      	ldr	r2, [r7, #12]
 801a580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	685a      	ldr	r2, [r3, #4]
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	697a      	ldr	r2, [r7, #20]
 801a58e:	621a      	str	r2, [r3, #32]
}
 801a590:	bf00      	nop
 801a592:	371c      	adds	r7, #28
 801a594:	46bd      	mov	sp, r7
 801a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59a:	4770      	bx	lr
 801a59c:	40012c00 	.word	0x40012c00
 801a5a0:	40014000 	.word	0x40014000
 801a5a4:	40014400 	.word	0x40014400

0801a5a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a5a8:	b480      	push	{r7}
 801a5aa:	b087      	sub	sp, #28
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	6a1b      	ldr	r3, [r3, #32]
 801a5b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	6a1b      	ldr	r3, [r3, #32]
 801a5bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	685b      	ldr	r3, [r3, #4]
 801a5c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	69db      	ldr	r3, [r3, #28]
 801a5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a5d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a5e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	021b      	lsls	r3, r3, #8
 801a5ea:	68fa      	ldr	r2, [r7, #12]
 801a5ec:	4313      	orrs	r3, r2
 801a5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a5f0:	693b      	ldr	r3, [r7, #16]
 801a5f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801a5f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	689b      	ldr	r3, [r3, #8]
 801a5fc:	031b      	lsls	r3, r3, #12
 801a5fe:	693a      	ldr	r2, [r7, #16]
 801a600:	4313      	orrs	r3, r2
 801a602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	4a14      	ldr	r2, [pc, #80]	@ (801a658 <TIM_OC4_SetConfig+0xb0>)
 801a608:	4293      	cmp	r3, r2
 801a60a:	d007      	beq.n	801a61c <TIM_OC4_SetConfig+0x74>
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	4a13      	ldr	r2, [pc, #76]	@ (801a65c <TIM_OC4_SetConfig+0xb4>)
 801a610:	4293      	cmp	r3, r2
 801a612:	d003      	beq.n	801a61c <TIM_OC4_SetConfig+0x74>
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	4a12      	ldr	r2, [pc, #72]	@ (801a660 <TIM_OC4_SetConfig+0xb8>)
 801a618:	4293      	cmp	r3, r2
 801a61a:	d109      	bne.n	801a630 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801a61c:	697b      	ldr	r3, [r7, #20]
 801a61e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801a622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	695b      	ldr	r3, [r3, #20]
 801a628:	019b      	lsls	r3, r3, #6
 801a62a:	697a      	ldr	r2, [r7, #20]
 801a62c:	4313      	orrs	r3, r2
 801a62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	697a      	ldr	r2, [r7, #20]
 801a634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	68fa      	ldr	r2, [r7, #12]
 801a63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a63c:	683b      	ldr	r3, [r7, #0]
 801a63e:	685a      	ldr	r2, [r3, #4]
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	693a      	ldr	r2, [r7, #16]
 801a648:	621a      	str	r2, [r3, #32]
}
 801a64a:	bf00      	nop
 801a64c:	371c      	adds	r7, #28
 801a64e:	46bd      	mov	sp, r7
 801a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a654:	4770      	bx	lr
 801a656:	bf00      	nop
 801a658:	40012c00 	.word	0x40012c00
 801a65c:	40014000 	.word	0x40014000
 801a660:	40014400 	.word	0x40014400

0801a664 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801a664:	b480      	push	{r7}
 801a666:	b087      	sub	sp, #28
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
 801a66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6a1b      	ldr	r3, [r3, #32]
 801a672:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	6a1b      	ldr	r3, [r3, #32]
 801a678:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	685b      	ldr	r3, [r3, #4]
 801a684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	68fa      	ldr	r2, [r7, #12]
 801a69e:	4313      	orrs	r3, r2
 801a6a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801a6a2:	693b      	ldr	r3, [r7, #16]
 801a6a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801a6a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	689b      	ldr	r3, [r3, #8]
 801a6ae:	041b      	lsls	r3, r3, #16
 801a6b0:	693a      	ldr	r2, [r7, #16]
 801a6b2:	4313      	orrs	r3, r2
 801a6b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	4a13      	ldr	r2, [pc, #76]	@ (801a708 <TIM_OC5_SetConfig+0xa4>)
 801a6ba:	4293      	cmp	r3, r2
 801a6bc:	d007      	beq.n	801a6ce <TIM_OC5_SetConfig+0x6a>
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	4a12      	ldr	r2, [pc, #72]	@ (801a70c <TIM_OC5_SetConfig+0xa8>)
 801a6c2:	4293      	cmp	r3, r2
 801a6c4:	d003      	beq.n	801a6ce <TIM_OC5_SetConfig+0x6a>
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	4a11      	ldr	r2, [pc, #68]	@ (801a710 <TIM_OC5_SetConfig+0xac>)
 801a6ca:	4293      	cmp	r3, r2
 801a6cc:	d109      	bne.n	801a6e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801a6ce:	697b      	ldr	r3, [r7, #20]
 801a6d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a6d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801a6d6:	683b      	ldr	r3, [r7, #0]
 801a6d8:	695b      	ldr	r3, [r3, #20]
 801a6da:	021b      	lsls	r3, r3, #8
 801a6dc:	697a      	ldr	r2, [r7, #20]
 801a6de:	4313      	orrs	r3, r2
 801a6e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	697a      	ldr	r2, [r7, #20]
 801a6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	68fa      	ldr	r2, [r7, #12]
 801a6ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	685a      	ldr	r2, [r3, #4]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	693a      	ldr	r2, [r7, #16]
 801a6fa:	621a      	str	r2, [r3, #32]
}
 801a6fc:	bf00      	nop
 801a6fe:	371c      	adds	r7, #28
 801a700:	46bd      	mov	sp, r7
 801a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a706:	4770      	bx	lr
 801a708:	40012c00 	.word	0x40012c00
 801a70c:	40014000 	.word	0x40014000
 801a710:	40014400 	.word	0x40014400

0801a714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801a714:	b480      	push	{r7}
 801a716:	b087      	sub	sp, #28
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
 801a71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6a1b      	ldr	r3, [r3, #32]
 801a722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6a1b      	ldr	r3, [r3, #32]
 801a728:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801a746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	021b      	lsls	r3, r3, #8
 801a74e:	68fa      	ldr	r2, [r7, #12]
 801a750:	4313      	orrs	r3, r2
 801a752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801a754:	693b      	ldr	r3, [r7, #16]
 801a756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801a75a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	689b      	ldr	r3, [r3, #8]
 801a760:	051b      	lsls	r3, r3, #20
 801a762:	693a      	ldr	r2, [r7, #16]
 801a764:	4313      	orrs	r3, r2
 801a766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	4a14      	ldr	r2, [pc, #80]	@ (801a7bc <TIM_OC6_SetConfig+0xa8>)
 801a76c:	4293      	cmp	r3, r2
 801a76e:	d007      	beq.n	801a780 <TIM_OC6_SetConfig+0x6c>
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	4a13      	ldr	r2, [pc, #76]	@ (801a7c0 <TIM_OC6_SetConfig+0xac>)
 801a774:	4293      	cmp	r3, r2
 801a776:	d003      	beq.n	801a780 <TIM_OC6_SetConfig+0x6c>
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	4a12      	ldr	r2, [pc, #72]	@ (801a7c4 <TIM_OC6_SetConfig+0xb0>)
 801a77c:	4293      	cmp	r3, r2
 801a77e:	d109      	bne.n	801a794 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801a786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	695b      	ldr	r3, [r3, #20]
 801a78c:	029b      	lsls	r3, r3, #10
 801a78e:	697a      	ldr	r2, [r7, #20]
 801a790:	4313      	orrs	r3, r2
 801a792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	697a      	ldr	r2, [r7, #20]
 801a798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	68fa      	ldr	r2, [r7, #12]
 801a79e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	685a      	ldr	r2, [r3, #4]
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	693a      	ldr	r2, [r7, #16]
 801a7ac:	621a      	str	r2, [r3, #32]
}
 801a7ae:	bf00      	nop
 801a7b0:	371c      	adds	r7, #28
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b8:	4770      	bx	lr
 801a7ba:	bf00      	nop
 801a7bc:	40012c00 	.word	0x40012c00
 801a7c0:	40014000 	.word	0x40014000
 801a7c4:	40014400 	.word	0x40014400

0801a7c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a7c8:	b480      	push	{r7}
 801a7ca:	b087      	sub	sp, #28
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	60f8      	str	r0, [r7, #12]
 801a7d0:	60b9      	str	r1, [r7, #8]
 801a7d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	6a1b      	ldr	r3, [r3, #32]
 801a7d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	6a1b      	ldr	r3, [r3, #32]
 801a7de:	f023 0201 	bic.w	r2, r3, #1
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	699b      	ldr	r3, [r3, #24]
 801a7ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a7ec:	693b      	ldr	r3, [r7, #16]
 801a7ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801a7f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	011b      	lsls	r3, r3, #4
 801a7f8:	693a      	ldr	r2, [r7, #16]
 801a7fa:	4313      	orrs	r3, r2
 801a7fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a7fe:	697b      	ldr	r3, [r7, #20]
 801a800:	f023 030a 	bic.w	r3, r3, #10
 801a804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801a806:	697a      	ldr	r2, [r7, #20]
 801a808:	68bb      	ldr	r3, [r7, #8]
 801a80a:	4313      	orrs	r3, r2
 801a80c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	693a      	ldr	r2, [r7, #16]
 801a812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	697a      	ldr	r2, [r7, #20]
 801a818:	621a      	str	r2, [r3, #32]
}
 801a81a:	bf00      	nop
 801a81c:	371c      	adds	r7, #28
 801a81e:	46bd      	mov	sp, r7
 801a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a824:	4770      	bx	lr

0801a826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a826:	b480      	push	{r7}
 801a828:	b087      	sub	sp, #28
 801a82a:	af00      	add	r7, sp, #0
 801a82c:	60f8      	str	r0, [r7, #12]
 801a82e:	60b9      	str	r1, [r7, #8]
 801a830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	6a1b      	ldr	r3, [r3, #32]
 801a836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	6a1b      	ldr	r3, [r3, #32]
 801a83c:	f023 0210 	bic.w	r2, r3, #16
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	699b      	ldr	r3, [r3, #24]
 801a848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801a84a:	693b      	ldr	r3, [r7, #16]
 801a84c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801a850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	031b      	lsls	r3, r3, #12
 801a856:	693a      	ldr	r2, [r7, #16]
 801a858:	4313      	orrs	r3, r2
 801a85a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801a862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801a864:	68bb      	ldr	r3, [r7, #8]
 801a866:	011b      	lsls	r3, r3, #4
 801a868:	697a      	ldr	r2, [r7, #20]
 801a86a:	4313      	orrs	r3, r2
 801a86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	693a      	ldr	r2, [r7, #16]
 801a872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	697a      	ldr	r2, [r7, #20]
 801a878:	621a      	str	r2, [r3, #32]
}
 801a87a:	bf00      	nop
 801a87c:	371c      	adds	r7, #28
 801a87e:	46bd      	mov	sp, r7
 801a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a884:	4770      	bx	lr

0801a886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801a886:	b480      	push	{r7}
 801a888:	b085      	sub	sp, #20
 801a88a:	af00      	add	r7, sp, #0
 801a88c:	6078      	str	r0, [r7, #4]
 801a88e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	689b      	ldr	r3, [r3, #8]
 801a894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a89c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801a89e:	683a      	ldr	r2, [r7, #0]
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	4313      	orrs	r3, r2
 801a8a4:	f043 0307 	orr.w	r3, r3, #7
 801a8a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	68fa      	ldr	r2, [r7, #12]
 801a8ae:	609a      	str	r2, [r3, #8]
}
 801a8b0:	bf00      	nop
 801a8b2:	3714      	adds	r7, #20
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ba:	4770      	bx	lr

0801a8bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a8bc:	b480      	push	{r7}
 801a8be:	b087      	sub	sp, #28
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	60f8      	str	r0, [r7, #12]
 801a8c4:	60b9      	str	r1, [r7, #8]
 801a8c6:	607a      	str	r2, [r7, #4]
 801a8c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	689b      	ldr	r3, [r3, #8]
 801a8ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a8d0:	697b      	ldr	r3, [r7, #20]
 801a8d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801a8d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	021a      	lsls	r2, r3, #8
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	431a      	orrs	r2, r3
 801a8e0:	68bb      	ldr	r3, [r7, #8]
 801a8e2:	4313      	orrs	r3, r2
 801a8e4:	697a      	ldr	r2, [r7, #20]
 801a8e6:	4313      	orrs	r3, r2
 801a8e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	697a      	ldr	r2, [r7, #20]
 801a8ee:	609a      	str	r2, [r3, #8]
}
 801a8f0:	bf00      	nop
 801a8f2:	371c      	adds	r7, #28
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8fa:	4770      	bx	lr

0801a8fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a8fc:	b480      	push	{r7}
 801a8fe:	b087      	sub	sp, #28
 801a900:	af00      	add	r7, sp, #0
 801a902:	60f8      	str	r0, [r7, #12]
 801a904:	60b9      	str	r1, [r7, #8]
 801a906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	f003 031f 	and.w	r3, r3, #31
 801a90e:	2201      	movs	r2, #1
 801a910:	fa02 f303 	lsl.w	r3, r2, r3
 801a914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	6a1a      	ldr	r2, [r3, #32]
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	43db      	mvns	r3, r3
 801a91e:	401a      	ands	r2, r3
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	6a1a      	ldr	r2, [r3, #32]
 801a928:	68bb      	ldr	r3, [r7, #8]
 801a92a:	f003 031f 	and.w	r3, r3, #31
 801a92e:	6879      	ldr	r1, [r7, #4]
 801a930:	fa01 f303 	lsl.w	r3, r1, r3
 801a934:	431a      	orrs	r2, r3
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	621a      	str	r2, [r3, #32]
}
 801a93a:	bf00      	nop
 801a93c:	371c      	adds	r7, #28
 801a93e:	46bd      	mov	sp, r7
 801a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a944:	4770      	bx	lr
	...

0801a948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a948:	b480      	push	{r7}
 801a94a:	b085      	sub	sp, #20
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
 801a950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a958:	2b01      	cmp	r3, #1
 801a95a:	d101      	bne.n	801a960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a95c:	2302      	movs	r3, #2
 801a95e:	e04f      	b.n	801aa00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	2201      	movs	r2, #1
 801a964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2202      	movs	r2, #2
 801a96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	685b      	ldr	r3, [r3, #4]
 801a976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	689b      	ldr	r3, [r3, #8]
 801a97e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	4a21      	ldr	r2, [pc, #132]	@ (801aa0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801a986:	4293      	cmp	r3, r2
 801a988:	d108      	bne.n	801a99c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801a990:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	685b      	ldr	r3, [r3, #4]
 801a996:	68fa      	ldr	r2, [r7, #12]
 801a998:	4313      	orrs	r3, r2
 801a99a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a9a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a9a4:	683b      	ldr	r3, [r7, #0]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	68fa      	ldr	r2, [r7, #12]
 801a9aa:	4313      	orrs	r3, r2
 801a9ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	68fa      	ldr	r2, [r7, #12]
 801a9b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	4a14      	ldr	r2, [pc, #80]	@ (801aa0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	d009      	beq.n	801a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a9c8:	d004      	beq.n	801a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	4a10      	ldr	r2, [pc, #64]	@ (801aa10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801a9d0:	4293      	cmp	r3, r2
 801a9d2:	d10c      	bne.n	801a9ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a9da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	689b      	ldr	r3, [r3, #8]
 801a9e0:	68ba      	ldr	r2, [r7, #8]
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	68ba      	ldr	r2, [r7, #8]
 801a9ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	2201      	movs	r2, #1
 801a9f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801a9fe:	2300      	movs	r3, #0
}
 801aa00:	4618      	mov	r0, r3
 801aa02:	3714      	adds	r7, #20
 801aa04:	46bd      	mov	sp, r7
 801aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa0a:	4770      	bx	lr
 801aa0c:	40012c00 	.word	0x40012c00
 801aa10:	40014000 	.word	0x40014000

0801aa14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801aa14:	b480      	push	{r7}
 801aa16:	b085      	sub	sp, #20
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	6078      	str	r0, [r7, #4]
 801aa1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801aa1e:	2300      	movs	r3, #0
 801aa20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	d101      	bne.n	801aa30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801aa2c:	2302      	movs	r3, #2
 801aa2e:	e060      	b.n	801aaf2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	2201      	movs	r2, #1
 801aa34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	68db      	ldr	r3, [r3, #12]
 801aa42:	4313      	orrs	r3, r2
 801aa44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	689b      	ldr	r3, [r3, #8]
 801aa50:	4313      	orrs	r3, r2
 801aa52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801aa5a:	683b      	ldr	r3, [r7, #0]
 801aa5c:	685b      	ldr	r3, [r3, #4]
 801aa5e:	4313      	orrs	r3, r2
 801aa60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	4313      	orrs	r3, r2
 801aa6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801aa76:	683b      	ldr	r3, [r7, #0]
 801aa78:	691b      	ldr	r3, [r3, #16]
 801aa7a:	4313      	orrs	r3, r2
 801aa7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	695b      	ldr	r3, [r3, #20]
 801aa88:	4313      	orrs	r3, r2
 801aa8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa96:	4313      	orrs	r3, r2
 801aa98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	699b      	ldr	r3, [r3, #24]
 801aaa4:	041b      	lsls	r3, r3, #16
 801aaa6:	4313      	orrs	r3, r2
 801aaa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	4a14      	ldr	r2, [pc, #80]	@ (801ab00 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801aab0:	4293      	cmp	r3, r2
 801aab2:	d115      	bne.n	801aae0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801aaba:	683b      	ldr	r3, [r7, #0]
 801aabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aabe:	051b      	lsls	r3, r3, #20
 801aac0:	4313      	orrs	r3, r2
 801aac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801aaca:	683b      	ldr	r3, [r7, #0]
 801aacc:	69db      	ldr	r3, [r3, #28]
 801aace:	4313      	orrs	r3, r2
 801aad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	6a1b      	ldr	r3, [r3, #32]
 801aadc:	4313      	orrs	r3, r2
 801aade:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	68fa      	ldr	r2, [r7, #12]
 801aae6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	2200      	movs	r2, #0
 801aaec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801aaf0:	2300      	movs	r3, #0
}
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	3714      	adds	r7, #20
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafc:	4770      	bx	lr
 801aafe:	bf00      	nop
 801ab00:	40012c00 	.word	0x40012c00

0801ab04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801ab04:	b480      	push	{r7}
 801ab06:	b083      	sub	sp, #12
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801ab0c:	bf00      	nop
 801ab0e:	370c      	adds	r7, #12
 801ab10:	46bd      	mov	sp, r7
 801ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab16:	4770      	bx	lr

0801ab18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801ab18:	b480      	push	{r7}
 801ab1a:	b083      	sub	sp, #12
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801ab20:	bf00      	nop
 801ab22:	370c      	adds	r7, #12
 801ab24:	46bd      	mov	sp, r7
 801ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2a:	4770      	bx	lr

0801ab2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801ab2c:	b480      	push	{r7}
 801ab2e:	b083      	sub	sp, #12
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801ab34:	bf00      	nop
 801ab36:	370c      	adds	r7, #12
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3e:	4770      	bx	lr

0801ab40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d101      	bne.n	801ab52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ab4e:	2301      	movs	r3, #1
 801ab50:	e040      	b.n	801abd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d106      	bne.n	801ab68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801ab62:	6878      	ldr	r0, [r7, #4]
 801ab64:	f7e7 fbf0 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	2224      	movs	r2, #36	@ 0x24
 801ab6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	681a      	ldr	r2, [r3, #0]
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	f022 0201 	bic.w	r2, r2, #1
 801ab7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d002      	beq.n	801ab8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f000 fe7e 	bl	801b888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f000 fc21 	bl	801b3d4 <UART_SetConfig>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d101      	bne.n	801ab9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801ab98:	2301      	movs	r3, #1
 801ab9a:	e01b      	b.n	801abd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	685a      	ldr	r2, [r3, #4]
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801abaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	689a      	ldr	r2, [r3, #8]
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801abba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	f042 0201 	orr.w	r2, r2, #1
 801abca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801abcc:	6878      	ldr	r0, [r7, #4]
 801abce:	f000 fefd 	bl	801b9cc <UART_CheckIdleState>
 801abd2:	4603      	mov	r3, r0
}
 801abd4:	4618      	mov	r0, r3
 801abd6:	3708      	adds	r7, #8
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}

0801abdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b08a      	sub	sp, #40	@ 0x28
 801abe0:	af02      	add	r7, sp, #8
 801abe2:	60f8      	str	r0, [r7, #12]
 801abe4:	60b9      	str	r1, [r7, #8]
 801abe6:	603b      	str	r3, [r7, #0]
 801abe8:	4613      	mov	r3, r2
 801abea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801abf0:	2b20      	cmp	r3, #32
 801abf2:	d177      	bne.n	801ace4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d002      	beq.n	801ac00 <HAL_UART_Transmit+0x24>
 801abfa:	88fb      	ldrh	r3, [r7, #6]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d101      	bne.n	801ac04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801ac00:	2301      	movs	r3, #1
 801ac02:	e070      	b.n	801ace6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	2200      	movs	r2, #0
 801ac08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	2221      	movs	r2, #33	@ 0x21
 801ac10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ac12:	f7fc fbbf 	bl	8017394 <HAL_GetTick>
 801ac16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	88fa      	ldrh	r2, [r7, #6]
 801ac1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	88fa      	ldrh	r2, [r7, #6]
 801ac24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	689b      	ldr	r3, [r3, #8]
 801ac2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ac30:	d108      	bne.n	801ac44 <HAL_UART_Transmit+0x68>
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	691b      	ldr	r3, [r3, #16]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d104      	bne.n	801ac44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ac3e:	68bb      	ldr	r3, [r7, #8]
 801ac40:	61bb      	str	r3, [r7, #24]
 801ac42:	e003      	b.n	801ac4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801ac44:	68bb      	ldr	r3, [r7, #8]
 801ac46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ac4c:	e02f      	b.n	801acae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ac4e:	683b      	ldr	r3, [r7, #0]
 801ac50:	9300      	str	r3, [sp, #0]
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	2200      	movs	r2, #0
 801ac56:	2180      	movs	r1, #128	@ 0x80
 801ac58:	68f8      	ldr	r0, [r7, #12]
 801ac5a:	f000 ff5f 	bl	801bb1c <UART_WaitOnFlagUntilTimeout>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d004      	beq.n	801ac6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	2220      	movs	r2, #32
 801ac68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801ac6a:	2303      	movs	r3, #3
 801ac6c:	e03b      	b.n	801ace6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801ac6e:	69fb      	ldr	r3, [r7, #28]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d10b      	bne.n	801ac8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ac74:	69bb      	ldr	r3, [r7, #24]
 801ac76:	881a      	ldrh	r2, [r3, #0]
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ac80:	b292      	uxth	r2, r2
 801ac82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801ac84:	69bb      	ldr	r3, [r7, #24]
 801ac86:	3302      	adds	r3, #2
 801ac88:	61bb      	str	r3, [r7, #24]
 801ac8a:	e007      	b.n	801ac9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801ac8c:	69fb      	ldr	r3, [r7, #28]
 801ac8e:	781a      	ldrb	r2, [r3, #0]
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801ac96:	69fb      	ldr	r3, [r7, #28]
 801ac98:	3301      	adds	r3, #1
 801ac9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801aca2:	b29b      	uxth	r3, r3
 801aca4:	3b01      	subs	r3, #1
 801aca6:	b29a      	uxth	r2, r3
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801acb4:	b29b      	uxth	r3, r3
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1c9      	bne.n	801ac4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801acba:	683b      	ldr	r3, [r7, #0]
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	697b      	ldr	r3, [r7, #20]
 801acc0:	2200      	movs	r2, #0
 801acc2:	2140      	movs	r1, #64	@ 0x40
 801acc4:	68f8      	ldr	r0, [r7, #12]
 801acc6:	f000 ff29 	bl	801bb1c <UART_WaitOnFlagUntilTimeout>
 801acca:	4603      	mov	r3, r0
 801accc:	2b00      	cmp	r3, #0
 801acce:	d004      	beq.n	801acda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	2220      	movs	r2, #32
 801acd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801acd6:	2303      	movs	r3, #3
 801acd8:	e005      	b.n	801ace6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	2220      	movs	r2, #32
 801acde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801ace0:	2300      	movs	r3, #0
 801ace2:	e000      	b.n	801ace6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801ace4:	2302      	movs	r3, #2
  }
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	3720      	adds	r7, #32
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}
	...

0801acf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b08a      	sub	sp, #40	@ 0x28
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	60f8      	str	r0, [r7, #12]
 801acf8:	60b9      	str	r1, [r7, #8]
 801acfa:	4613      	mov	r3, r2
 801acfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ad04:	2b20      	cmp	r3, #32
 801ad06:	d137      	bne.n	801ad78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801ad08:	68bb      	ldr	r3, [r7, #8]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d002      	beq.n	801ad14 <HAL_UART_Receive_IT+0x24>
 801ad0e:	88fb      	ldrh	r3, [r7, #6]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d101      	bne.n	801ad18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801ad14:	2301      	movs	r3, #1
 801ad16:	e030      	b.n	801ad7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	4a18      	ldr	r2, [pc, #96]	@ (801ad84 <HAL_UART_Receive_IT+0x94>)
 801ad24:	4293      	cmp	r3, r2
 801ad26:	d01f      	beq.n	801ad68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	685b      	ldr	r3, [r3, #4]
 801ad2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d018      	beq.n	801ad68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad3c:	697b      	ldr	r3, [r7, #20]
 801ad3e:	e853 3f00 	ldrex	r3, [r3]
 801ad42:	613b      	str	r3, [r7, #16]
   return(result);
 801ad44:	693b      	ldr	r3, [r7, #16]
 801ad46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801ad4a:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	461a      	mov	r2, r3
 801ad52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad54:	623b      	str	r3, [r7, #32]
 801ad56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad58:	69f9      	ldr	r1, [r7, #28]
 801ad5a:	6a3a      	ldr	r2, [r7, #32]
 801ad5c:	e841 2300 	strex	r3, r2, [r1]
 801ad60:	61bb      	str	r3, [r7, #24]
   return(result);
 801ad62:	69bb      	ldr	r3, [r7, #24]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d1e6      	bne.n	801ad36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801ad68:	88fb      	ldrh	r3, [r7, #6]
 801ad6a:	461a      	mov	r2, r3
 801ad6c:	68b9      	ldr	r1, [r7, #8]
 801ad6e:	68f8      	ldr	r0, [r7, #12]
 801ad70:	f000 ff42 	bl	801bbf8 <UART_Start_Receive_IT>
 801ad74:	4603      	mov	r3, r0
 801ad76:	e000      	b.n	801ad7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ad78:	2302      	movs	r3, #2
  }
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3728      	adds	r7, #40	@ 0x28
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	40008000 	.word	0x40008000

0801ad88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b0ba      	sub	sp, #232	@ 0xe8
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	69db      	ldr	r3, [r3, #28]
 801ad96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	689b      	ldr	r3, [r3, #8]
 801adaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801adae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801adb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 801adb6:	4013      	ands	r3, r2
 801adb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801adbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d115      	bne.n	801adf0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801adc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801adc8:	f003 0320 	and.w	r3, r3, #32
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d00f      	beq.n	801adf0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801add0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801add4:	f003 0320 	and.w	r3, r3, #32
 801add8:	2b00      	cmp	r3, #0
 801adda:	d009      	beq.n	801adf0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	f000 82ca 	beq.w	801b37a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801adea:	6878      	ldr	r0, [r7, #4]
 801adec:	4798      	blx	r3
      }
      return;
 801adee:	e2c4      	b.n	801b37a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801adf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	f000 8117 	beq.w	801b028 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801adfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801adfe:	f003 0301 	and.w	r3, r3, #1
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d106      	bne.n	801ae14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ae06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ae0a:	4b85      	ldr	r3, [pc, #532]	@ (801b020 <HAL_UART_IRQHandler+0x298>)
 801ae0c:	4013      	ands	r3, r2
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	f000 810a 	beq.w	801b028 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ae14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae18:	f003 0301 	and.w	r3, r3, #1
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d011      	beq.n	801ae44 <HAL_UART_IRQHandler+0xbc>
 801ae20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ae24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d00b      	beq.n	801ae44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	2201      	movs	r2, #1
 801ae32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ae3a:	f043 0201 	orr.w	r2, r3, #1
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ae44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae48:	f003 0302 	and.w	r3, r3, #2
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d011      	beq.n	801ae74 <HAL_UART_IRQHandler+0xec>
 801ae50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ae54:	f003 0301 	and.w	r3, r3, #1
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d00b      	beq.n	801ae74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	2202      	movs	r2, #2
 801ae62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ae6a:	f043 0204 	orr.w	r2, r3, #4
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ae74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae78:	f003 0304 	and.w	r3, r3, #4
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d011      	beq.n	801aea4 <HAL_UART_IRQHandler+0x11c>
 801ae80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ae84:	f003 0301 	and.w	r3, r3, #1
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d00b      	beq.n	801aea4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	2204      	movs	r2, #4
 801ae92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ae9a:	f043 0202 	orr.w	r2, r3, #2
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801aea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801aea8:	f003 0308 	and.w	r3, r3, #8
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d017      	beq.n	801aee0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801aeb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801aeb4:	f003 0320 	and.w	r3, r3, #32
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d105      	bne.n	801aec8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801aebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801aec0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d00b      	beq.n	801aee0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	2208      	movs	r2, #8
 801aece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801aed6:	f043 0208 	orr.w	r2, r3, #8
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801aee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801aee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d012      	beq.n	801af12 <HAL_UART_IRQHandler+0x18a>
 801aeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801aef0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d00c      	beq.n	801af12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801af00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af08:	f043 0220 	orr.w	r2, r3, #32
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af18:	2b00      	cmp	r3, #0
 801af1a:	f000 8230 	beq.w	801b37e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801af1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801af22:	f003 0320 	and.w	r3, r3, #32
 801af26:	2b00      	cmp	r3, #0
 801af28:	d00d      	beq.n	801af46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801af2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801af2e:	f003 0320 	and.w	r3, r3, #32
 801af32:	2b00      	cmp	r3, #0
 801af34:	d007      	beq.n	801af46 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d003      	beq.n	801af46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af42:	6878      	ldr	r0, [r7, #4]
 801af44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801af4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	689b      	ldr	r3, [r3, #8]
 801af56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801af5a:	2b40      	cmp	r3, #64	@ 0x40
 801af5c:	d005      	beq.n	801af6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801af5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801af62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801af66:	2b00      	cmp	r3, #0
 801af68:	d04f      	beq.n	801b00a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801af6a:	6878      	ldr	r0, [r7, #4]
 801af6c:	f000 ff0a 	bl	801bd84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	689b      	ldr	r3, [r3, #8]
 801af76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801af7a:	2b40      	cmp	r3, #64	@ 0x40
 801af7c:	d141      	bne.n	801b002 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	3308      	adds	r3, #8
 801af84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801af88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801af8c:	e853 3f00 	ldrex	r3, [r3]
 801af90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801af94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801af98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801af9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	3308      	adds	r3, #8
 801afa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801afaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801afae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801afb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801afb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801afba:	e841 2300 	strex	r3, r2, [r1]
 801afbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801afc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d1d9      	bne.n	801af7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d013      	beq.n	801affa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801afd6:	4a13      	ldr	r2, [pc, #76]	@ (801b024 <HAL_UART_IRQHandler+0x29c>)
 801afd8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801afde:	4618      	mov	r0, r3
 801afe0:	f7fc fb57 	bl	8017692 <HAL_DMA_Abort_IT>
 801afe4:	4603      	mov	r3, r0
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d017      	beq.n	801b01a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801afee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aff0:	687a      	ldr	r2, [r7, #4]
 801aff2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801aff4:	4610      	mov	r0, r2
 801aff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801aff8:	e00f      	b.n	801b01a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801affa:	6878      	ldr	r0, [r7, #4]
 801affc:	f000 f9d4 	bl	801b3a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b000:	e00b      	b.n	801b01a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b002:	6878      	ldr	r0, [r7, #4]
 801b004:	f000 f9d0 	bl	801b3a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b008:	e007      	b.n	801b01a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b00a:	6878      	ldr	r0, [r7, #4]
 801b00c:	f000 f9cc 	bl	801b3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	2200      	movs	r2, #0
 801b014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801b018:	e1b1      	b.n	801b37e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b01a:	bf00      	nop
    return;
 801b01c:	e1af      	b.n	801b37e <HAL_UART_IRQHandler+0x5f6>
 801b01e:	bf00      	nop
 801b020:	04000120 	.word	0x04000120
 801b024:	0801be4d 	.word	0x0801be4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b02c:	2b01      	cmp	r3, #1
 801b02e:	f040 816a 	bne.w	801b306 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b036:	f003 0310 	and.w	r3, r3, #16
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	f000 8163 	beq.w	801b306 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b044:	f003 0310 	and.w	r3, r3, #16
 801b048:	2b00      	cmp	r3, #0
 801b04a:	f000 815c 	beq.w	801b306 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	2210      	movs	r2, #16
 801b054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	689b      	ldr	r3, [r3, #8]
 801b05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b060:	2b40      	cmp	r3, #64	@ 0x40
 801b062:	f040 80d4 	bne.w	801b20e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b072:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801b076:	2b00      	cmp	r3, #0
 801b078:	f000 80ad 	beq.w	801b1d6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b086:	429a      	cmp	r2, r3
 801b088:	f080 80a5 	bcs.w	801b1d6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b092:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	f003 0320 	and.w	r3, r3, #32
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	f040 8086 	bne.w	801b1b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b0b4:	e853 3f00 	ldrex	r3, [r3]
 801b0b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801b0bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801b0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b0c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	461a      	mov	r2, r3
 801b0ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b0d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b0d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b0da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801b0de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b0e2:	e841 2300 	strex	r3, r2, [r1]
 801b0e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801b0ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d1da      	bne.n	801b0a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	3308      	adds	r3, #8
 801b0f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b0fc:	e853 3f00 	ldrex	r3, [r3]
 801b100:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801b102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b104:	f023 0301 	bic.w	r3, r3, #1
 801b108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	3308      	adds	r3, #8
 801b112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b116:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801b11a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b11c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801b11e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b122:	e841 2300 	strex	r3, r2, [r1]
 801b126:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801b128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d1e1      	bne.n	801b0f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	3308      	adds	r3, #8
 801b134:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b138:	e853 3f00 	ldrex	r3, [r3]
 801b13c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801b13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	3308      	adds	r3, #8
 801b14e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b152:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b154:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b156:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b158:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b15a:	e841 2300 	strex	r3, r2, [r1]
 801b15e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801b160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b162:	2b00      	cmp	r3, #0
 801b164:	d1e3      	bne.n	801b12e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	2220      	movs	r2, #32
 801b16a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	2200      	movs	r2, #0
 801b172:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b17a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b17c:	e853 3f00 	ldrex	r3, [r3]
 801b180:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801b182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b184:	f023 0310 	bic.w	r3, r3, #16
 801b188:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	461a      	mov	r2, r3
 801b192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b196:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b198:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b19a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b19c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b19e:	e841 2300 	strex	r3, r2, [r1]
 801b1a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801b1a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d1e4      	bne.n	801b174 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7fc fa31 	bl	8017616 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	2202      	movs	r2, #2
 801b1b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b1c6:	b29b      	uxth	r3, r3
 801b1c8:	1ad3      	subs	r3, r2, r3
 801b1ca:	b29b      	uxth	r3, r3
 801b1cc:	4619      	mov	r1, r3
 801b1ce:	6878      	ldr	r0, [r7, #4]
 801b1d0:	f000 f8f4 	bl	801b3bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801b1d4:	e0d5      	b.n	801b382 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b1dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801b1e0:	429a      	cmp	r2, r3
 801b1e2:	f040 80ce 	bne.w	801b382 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	f003 0320 	and.w	r3, r3, #32
 801b1f2:	2b20      	cmp	r3, #32
 801b1f4:	f040 80c5 	bne.w	801b382 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2202      	movs	r2, #2
 801b1fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801b204:	4619      	mov	r1, r3
 801b206:	6878      	ldr	r0, [r7, #4]
 801b208:	f000 f8d8 	bl	801b3bc <HAL_UARTEx_RxEventCallback>
      return;
 801b20c:	e0b9      	b.n	801b382 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	1ad3      	subs	r3, r2, r3
 801b21e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801b228:	b29b      	uxth	r3, r3
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	f000 80ab 	beq.w	801b386 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801b230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801b234:	2b00      	cmp	r3, #0
 801b236:	f000 80a6 	beq.w	801b386 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b242:	e853 3f00 	ldrex	r3, [r3]
 801b246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801b248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b24a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801b24e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	461a      	mov	r2, r3
 801b258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b25c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b25e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801b262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b264:	e841 2300 	strex	r3, r2, [r1]
 801b268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d1e4      	bne.n	801b23a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	3308      	adds	r3, #8
 801b276:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b27a:	e853 3f00 	ldrex	r3, [r3]
 801b27e:	623b      	str	r3, [r7, #32]
   return(result);
 801b280:	6a3b      	ldr	r3, [r7, #32]
 801b282:	f023 0301 	bic.w	r3, r3, #1
 801b286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	3308      	adds	r3, #8
 801b290:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b294:	633a      	str	r2, [r7, #48]	@ 0x30
 801b296:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b298:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b29a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b29c:	e841 2300 	strex	r3, r2, [r1]
 801b2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d1e3      	bne.n	801b270 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	2220      	movs	r2, #32
 801b2ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	2200      	movs	r2, #0
 801b2ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2c2:	693b      	ldr	r3, [r7, #16]
 801b2c4:	e853 3f00 	ldrex	r3, [r3]
 801b2c8:	60fb      	str	r3, [r7, #12]
   return(result);
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	f023 0310 	bic.w	r3, r3, #16
 801b2d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	461a      	mov	r2, r3
 801b2da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b2de:	61fb      	str	r3, [r7, #28]
 801b2e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2e2:	69b9      	ldr	r1, [r7, #24]
 801b2e4:	69fa      	ldr	r2, [r7, #28]
 801b2e6:	e841 2300 	strex	r3, r2, [r1]
 801b2ea:	617b      	str	r3, [r7, #20]
   return(result);
 801b2ec:	697b      	ldr	r3, [r7, #20]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d1e4      	bne.n	801b2bc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	2202      	movs	r2, #2
 801b2f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801b2f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801b2fc:	4619      	mov	r1, r3
 801b2fe:	6878      	ldr	r0, [r7, #4]
 801b300:	f000 f85c 	bl	801b3bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b304:	e03f      	b.n	801b386 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b30a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d00e      	beq.n	801b330 <HAL_UART_IRQHandler+0x5a8>
 801b312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d008      	beq.n	801b330 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801b326:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801b328:	6878      	ldr	r0, [r7, #4]
 801b32a:	f000 ff8b 	bl	801c244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b32e:	e02d      	b.n	801b38c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d00e      	beq.n	801b35a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b344:	2b00      	cmp	r3, #0
 801b346:	d008      	beq.n	801b35a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d01c      	beq.n	801b38a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b354:	6878      	ldr	r0, [r7, #4]
 801b356:	4798      	blx	r3
    }
    return;
 801b358:	e017      	b.n	801b38a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b35e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b362:	2b00      	cmp	r3, #0
 801b364:	d012      	beq.n	801b38c <HAL_UART_IRQHandler+0x604>
 801b366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b36a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d00c      	beq.n	801b38c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801b372:	6878      	ldr	r0, [r7, #4]
 801b374:	f000 fd80 	bl	801be78 <UART_EndTransmit_IT>
    return;
 801b378:	e008      	b.n	801b38c <HAL_UART_IRQHandler+0x604>
      return;
 801b37a:	bf00      	nop
 801b37c:	e006      	b.n	801b38c <HAL_UART_IRQHandler+0x604>
    return;
 801b37e:	bf00      	nop
 801b380:	e004      	b.n	801b38c <HAL_UART_IRQHandler+0x604>
      return;
 801b382:	bf00      	nop
 801b384:	e002      	b.n	801b38c <HAL_UART_IRQHandler+0x604>
      return;
 801b386:	bf00      	nop
 801b388:	e000      	b.n	801b38c <HAL_UART_IRQHandler+0x604>
    return;
 801b38a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801b38c:	37e8      	adds	r7, #232	@ 0xe8
 801b38e:	46bd      	mov	sp, r7
 801b390:	bd80      	pop	{r7, pc}
 801b392:	bf00      	nop

0801b394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b394:	b480      	push	{r7}
 801b396:	b083      	sub	sp, #12
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b39c:	bf00      	nop
 801b39e:	370c      	adds	r7, #12
 801b3a0:	46bd      	mov	sp, r7
 801b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a6:	4770      	bx	lr

0801b3a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b3a8:	b480      	push	{r7}
 801b3aa:	b083      	sub	sp, #12
 801b3ac:	af00      	add	r7, sp, #0
 801b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b3b0:	bf00      	nop
 801b3b2:	370c      	adds	r7, #12
 801b3b4:	46bd      	mov	sp, r7
 801b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ba:	4770      	bx	lr

0801b3bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b3bc:	b480      	push	{r7}
 801b3be:	b083      	sub	sp, #12
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
 801b3c4:	460b      	mov	r3, r1
 801b3c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b3c8:	bf00      	nop
 801b3ca:	370c      	adds	r7, #12
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d2:	4770      	bx	lr

0801b3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b3d8:	b08a      	sub	sp, #40	@ 0x28
 801b3da:	af00      	add	r7, sp, #0
 801b3dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b3de:	2300      	movs	r3, #0
 801b3e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	689a      	ldr	r2, [r3, #8]
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	691b      	ldr	r3, [r3, #16]
 801b3ec:	431a      	orrs	r2, r3
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	695b      	ldr	r3, [r3, #20]
 801b3f2:	431a      	orrs	r2, r3
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	69db      	ldr	r3, [r3, #28]
 801b3f8:	4313      	orrs	r3, r2
 801b3fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	681a      	ldr	r2, [r3, #0]
 801b402:	4b9e      	ldr	r3, [pc, #632]	@ (801b67c <UART_SetConfig+0x2a8>)
 801b404:	4013      	ands	r3, r2
 801b406:	68fa      	ldr	r2, [r7, #12]
 801b408:	6812      	ldr	r2, [r2, #0]
 801b40a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b40c:	430b      	orrs	r3, r1
 801b40e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	685b      	ldr	r3, [r3, #4]
 801b416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	68da      	ldr	r2, [r3, #12]
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	430a      	orrs	r2, r1
 801b424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	699b      	ldr	r3, [r3, #24]
 801b42a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	4a93      	ldr	r2, [pc, #588]	@ (801b680 <UART_SetConfig+0x2ac>)
 801b432:	4293      	cmp	r3, r2
 801b434:	d004      	beq.n	801b440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	6a1b      	ldr	r3, [r3, #32]
 801b43a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b43c:	4313      	orrs	r3, r2
 801b43e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	689b      	ldr	r3, [r3, #8]
 801b446:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b450:	430a      	orrs	r2, r1
 801b452:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4a8a      	ldr	r2, [pc, #552]	@ (801b684 <UART_SetConfig+0x2b0>)
 801b45a:	4293      	cmp	r3, r2
 801b45c:	d126      	bne.n	801b4ac <UART_SetConfig+0xd8>
 801b45e:	4b8a      	ldr	r3, [pc, #552]	@ (801b688 <UART_SetConfig+0x2b4>)
 801b460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b464:	f003 0303 	and.w	r3, r3, #3
 801b468:	2b03      	cmp	r3, #3
 801b46a:	d81b      	bhi.n	801b4a4 <UART_SetConfig+0xd0>
 801b46c:	a201      	add	r2, pc, #4	@ (adr r2, 801b474 <UART_SetConfig+0xa0>)
 801b46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b472:	bf00      	nop
 801b474:	0801b485 	.word	0x0801b485
 801b478:	0801b495 	.word	0x0801b495
 801b47c:	0801b48d 	.word	0x0801b48d
 801b480:	0801b49d 	.word	0x0801b49d
 801b484:	2301      	movs	r3, #1
 801b486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b48a:	e0ab      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b48c:	2302      	movs	r3, #2
 801b48e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b492:	e0a7      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b494:	2304      	movs	r3, #4
 801b496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b49a:	e0a3      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b49c:	2308      	movs	r3, #8
 801b49e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4a2:	e09f      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b4a4:	2310      	movs	r3, #16
 801b4a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b4aa:	e09b      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	4a76      	ldr	r2, [pc, #472]	@ (801b68c <UART_SetConfig+0x2b8>)
 801b4b2:	4293      	cmp	r3, r2
 801b4b4:	d138      	bne.n	801b528 <UART_SetConfig+0x154>
 801b4b6:	4b74      	ldr	r3, [pc, #464]	@ (801b688 <UART_SetConfig+0x2b4>)
 801b4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b4bc:	f003 030c 	and.w	r3, r3, #12
 801b4c0:	2b0c      	cmp	r3, #12
 801b4c2:	d82d      	bhi.n	801b520 <UART_SetConfig+0x14c>
 801b4c4:	a201      	add	r2, pc, #4	@ (adr r2, 801b4cc <UART_SetConfig+0xf8>)
 801b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4ca:	bf00      	nop
 801b4cc:	0801b501 	.word	0x0801b501
 801b4d0:	0801b521 	.word	0x0801b521
 801b4d4:	0801b521 	.word	0x0801b521
 801b4d8:	0801b521 	.word	0x0801b521
 801b4dc:	0801b511 	.word	0x0801b511
 801b4e0:	0801b521 	.word	0x0801b521
 801b4e4:	0801b521 	.word	0x0801b521
 801b4e8:	0801b521 	.word	0x0801b521
 801b4ec:	0801b509 	.word	0x0801b509
 801b4f0:	0801b521 	.word	0x0801b521
 801b4f4:	0801b521 	.word	0x0801b521
 801b4f8:	0801b521 	.word	0x0801b521
 801b4fc:	0801b519 	.word	0x0801b519
 801b500:	2300      	movs	r3, #0
 801b502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b506:	e06d      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b508:	2302      	movs	r3, #2
 801b50a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b50e:	e069      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b510:	2304      	movs	r3, #4
 801b512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b516:	e065      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b518:	2308      	movs	r3, #8
 801b51a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b51e:	e061      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b520:	2310      	movs	r3, #16
 801b522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b526:	e05d      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	4a58      	ldr	r2, [pc, #352]	@ (801b690 <UART_SetConfig+0x2bc>)
 801b52e:	4293      	cmp	r3, r2
 801b530:	d125      	bne.n	801b57e <UART_SetConfig+0x1aa>
 801b532:	4b55      	ldr	r3, [pc, #340]	@ (801b688 <UART_SetConfig+0x2b4>)
 801b534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b538:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801b53c:	2b30      	cmp	r3, #48	@ 0x30
 801b53e:	d016      	beq.n	801b56e <UART_SetConfig+0x19a>
 801b540:	2b30      	cmp	r3, #48	@ 0x30
 801b542:	d818      	bhi.n	801b576 <UART_SetConfig+0x1a2>
 801b544:	2b20      	cmp	r3, #32
 801b546:	d00a      	beq.n	801b55e <UART_SetConfig+0x18a>
 801b548:	2b20      	cmp	r3, #32
 801b54a:	d814      	bhi.n	801b576 <UART_SetConfig+0x1a2>
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d002      	beq.n	801b556 <UART_SetConfig+0x182>
 801b550:	2b10      	cmp	r3, #16
 801b552:	d008      	beq.n	801b566 <UART_SetConfig+0x192>
 801b554:	e00f      	b.n	801b576 <UART_SetConfig+0x1a2>
 801b556:	2300      	movs	r3, #0
 801b558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b55c:	e042      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b55e:	2302      	movs	r3, #2
 801b560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b564:	e03e      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b566:	2304      	movs	r3, #4
 801b568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b56c:	e03a      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b56e:	2308      	movs	r3, #8
 801b570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b574:	e036      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b576:	2310      	movs	r3, #16
 801b578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b57c:	e032      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	4a3f      	ldr	r2, [pc, #252]	@ (801b680 <UART_SetConfig+0x2ac>)
 801b584:	4293      	cmp	r3, r2
 801b586:	d12a      	bne.n	801b5de <UART_SetConfig+0x20a>
 801b588:	4b3f      	ldr	r3, [pc, #252]	@ (801b688 <UART_SetConfig+0x2b4>)
 801b58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b58e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801b592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801b596:	d01a      	beq.n	801b5ce <UART_SetConfig+0x1fa>
 801b598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801b59c:	d81b      	bhi.n	801b5d6 <UART_SetConfig+0x202>
 801b59e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b5a2:	d00c      	beq.n	801b5be <UART_SetConfig+0x1ea>
 801b5a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b5a8:	d815      	bhi.n	801b5d6 <UART_SetConfig+0x202>
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d003      	beq.n	801b5b6 <UART_SetConfig+0x1e2>
 801b5ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b5b2:	d008      	beq.n	801b5c6 <UART_SetConfig+0x1f2>
 801b5b4:	e00f      	b.n	801b5d6 <UART_SetConfig+0x202>
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5bc:	e012      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b5be:	2302      	movs	r3, #2
 801b5c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5c4:	e00e      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b5c6:	2304      	movs	r3, #4
 801b5c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5cc:	e00a      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b5ce:	2308      	movs	r3, #8
 801b5d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5d4:	e006      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b5d6:	2310      	movs	r3, #16
 801b5d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b5dc:	e002      	b.n	801b5e4 <UART_SetConfig+0x210>
 801b5de:	2310      	movs	r3, #16
 801b5e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	4a25      	ldr	r2, [pc, #148]	@ (801b680 <UART_SetConfig+0x2ac>)
 801b5ea:	4293      	cmp	r3, r2
 801b5ec:	f040 808a 	bne.w	801b704 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801b5f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b5f4:	2b08      	cmp	r3, #8
 801b5f6:	d824      	bhi.n	801b642 <UART_SetConfig+0x26e>
 801b5f8:	a201      	add	r2, pc, #4	@ (adr r2, 801b600 <UART_SetConfig+0x22c>)
 801b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b5fe:	bf00      	nop
 801b600:	0801b625 	.word	0x0801b625
 801b604:	0801b643 	.word	0x0801b643
 801b608:	0801b62d 	.word	0x0801b62d
 801b60c:	0801b643 	.word	0x0801b643
 801b610:	0801b633 	.word	0x0801b633
 801b614:	0801b643 	.word	0x0801b643
 801b618:	0801b643 	.word	0x0801b643
 801b61c:	0801b643 	.word	0x0801b643
 801b620:	0801b63b 	.word	0x0801b63b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b624:	f7fd f830 	bl	8018688 <HAL_RCC_GetPCLK1Freq>
 801b628:	61f8      	str	r0, [r7, #28]
        break;
 801b62a:	e010      	b.n	801b64e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b62c:	4b19      	ldr	r3, [pc, #100]	@ (801b694 <UART_SetConfig+0x2c0>)
 801b62e:	61fb      	str	r3, [r7, #28]
        break;
 801b630:	e00d      	b.n	801b64e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b632:	f7fc ff91 	bl	8018558 <HAL_RCC_GetSysClockFreq>
 801b636:	61f8      	str	r0, [r7, #28]
        break;
 801b638:	e009      	b.n	801b64e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b63a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b63e:	61fb      	str	r3, [r7, #28]
        break;
 801b640:	e005      	b.n	801b64e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 801b642:	2300      	movs	r3, #0
 801b644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801b646:	2301      	movs	r3, #1
 801b648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801b64c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801b64e:	69fb      	ldr	r3, [r7, #28]
 801b650:	2b00      	cmp	r3, #0
 801b652:	f000 8109 	beq.w	801b868 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	685a      	ldr	r2, [r3, #4]
 801b65a:	4613      	mov	r3, r2
 801b65c:	005b      	lsls	r3, r3, #1
 801b65e:	4413      	add	r3, r2
 801b660:	69fa      	ldr	r2, [r7, #28]
 801b662:	429a      	cmp	r2, r3
 801b664:	d305      	bcc.n	801b672 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	685b      	ldr	r3, [r3, #4]
 801b66a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b66c:	69fa      	ldr	r2, [r7, #28]
 801b66e:	429a      	cmp	r2, r3
 801b670:	d912      	bls.n	801b698 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 801b672:	2301      	movs	r3, #1
 801b674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b678:	e0f6      	b.n	801b868 <UART_SetConfig+0x494>
 801b67a:	bf00      	nop
 801b67c:	efff69f3 	.word	0xefff69f3
 801b680:	40008000 	.word	0x40008000
 801b684:	40013800 	.word	0x40013800
 801b688:	40021000 	.word	0x40021000
 801b68c:	40004400 	.word	0x40004400
 801b690:	40004800 	.word	0x40004800
 801b694:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801b698:	69fb      	ldr	r3, [r7, #28]
 801b69a:	2200      	movs	r2, #0
 801b69c:	461c      	mov	r4, r3
 801b69e:	4615      	mov	r5, r2
 801b6a0:	f04f 0200 	mov.w	r2, #0
 801b6a4:	f04f 0300 	mov.w	r3, #0
 801b6a8:	022b      	lsls	r3, r5, #8
 801b6aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801b6ae:	0222      	lsls	r2, r4, #8
 801b6b0:	68f9      	ldr	r1, [r7, #12]
 801b6b2:	6849      	ldr	r1, [r1, #4]
 801b6b4:	0849      	lsrs	r1, r1, #1
 801b6b6:	2000      	movs	r0, #0
 801b6b8:	4688      	mov	r8, r1
 801b6ba:	4681      	mov	r9, r0
 801b6bc:	eb12 0a08 	adds.w	sl, r2, r8
 801b6c0:	eb43 0b09 	adc.w	fp, r3, r9
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	685b      	ldr	r3, [r3, #4]
 801b6c8:	2200      	movs	r2, #0
 801b6ca:	603b      	str	r3, [r7, #0]
 801b6cc:	607a      	str	r2, [r7, #4]
 801b6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b6d2:	4650      	mov	r0, sl
 801b6d4:	4659      	mov	r1, fp
 801b6d6:	f7e5 fab7 	bl	8000c48 <__aeabi_uldivmod>
 801b6da:	4602      	mov	r2, r0
 801b6dc:	460b      	mov	r3, r1
 801b6de:	4613      	mov	r3, r2
 801b6e0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b6e2:	69bb      	ldr	r3, [r7, #24]
 801b6e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b6e8:	d308      	bcc.n	801b6fc <UART_SetConfig+0x328>
 801b6ea:	69bb      	ldr	r3, [r7, #24]
 801b6ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b6f0:	d204      	bcs.n	801b6fc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	69ba      	ldr	r2, [r7, #24]
 801b6f8:	60da      	str	r2, [r3, #12]
 801b6fa:	e0b5      	b.n	801b868 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 801b6fc:	2301      	movs	r3, #1
 801b6fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b702:	e0b1      	b.n	801b868 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	69db      	ldr	r3, [r3, #28]
 801b708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b70c:	d15d      	bne.n	801b7ca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 801b70e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b712:	2b08      	cmp	r3, #8
 801b714:	d827      	bhi.n	801b766 <UART_SetConfig+0x392>
 801b716:	a201      	add	r2, pc, #4	@ (adr r2, 801b71c <UART_SetConfig+0x348>)
 801b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b71c:	0801b741 	.word	0x0801b741
 801b720:	0801b749 	.word	0x0801b749
 801b724:	0801b751 	.word	0x0801b751
 801b728:	0801b767 	.word	0x0801b767
 801b72c:	0801b757 	.word	0x0801b757
 801b730:	0801b767 	.word	0x0801b767
 801b734:	0801b767 	.word	0x0801b767
 801b738:	0801b767 	.word	0x0801b767
 801b73c:	0801b75f 	.word	0x0801b75f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b740:	f7fc ffa2 	bl	8018688 <HAL_RCC_GetPCLK1Freq>
 801b744:	61f8      	str	r0, [r7, #28]
        break;
 801b746:	e014      	b.n	801b772 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b748:	f7fc ffb4 	bl	80186b4 <HAL_RCC_GetPCLK2Freq>
 801b74c:	61f8      	str	r0, [r7, #28]
        break;
 801b74e:	e010      	b.n	801b772 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b750:	4b4c      	ldr	r3, [pc, #304]	@ (801b884 <UART_SetConfig+0x4b0>)
 801b752:	61fb      	str	r3, [r7, #28]
        break;
 801b754:	e00d      	b.n	801b772 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b756:	f7fc feff 	bl	8018558 <HAL_RCC_GetSysClockFreq>
 801b75a:	61f8      	str	r0, [r7, #28]
        break;
 801b75c:	e009      	b.n	801b772 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b75e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b762:	61fb      	str	r3, [r7, #28]
        break;
 801b764:	e005      	b.n	801b772 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801b766:	2300      	movs	r3, #0
 801b768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801b76a:	2301      	movs	r3, #1
 801b76c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801b770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b772:	69fb      	ldr	r3, [r7, #28]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d077      	beq.n	801b868 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801b778:	69fb      	ldr	r3, [r7, #28]
 801b77a:	005a      	lsls	r2, r3, #1
 801b77c:	68fb      	ldr	r3, [r7, #12]
 801b77e:	685b      	ldr	r3, [r3, #4]
 801b780:	085b      	lsrs	r3, r3, #1
 801b782:	441a      	add	r2, r3
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	685b      	ldr	r3, [r3, #4]
 801b788:	fbb2 f3f3 	udiv	r3, r2, r3
 801b78c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b78e:	69bb      	ldr	r3, [r7, #24]
 801b790:	2b0f      	cmp	r3, #15
 801b792:	d916      	bls.n	801b7c2 <UART_SetConfig+0x3ee>
 801b794:	69bb      	ldr	r3, [r7, #24]
 801b796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b79a:	d212      	bcs.n	801b7c2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b79c:	69bb      	ldr	r3, [r7, #24]
 801b79e:	b29b      	uxth	r3, r3
 801b7a0:	f023 030f 	bic.w	r3, r3, #15
 801b7a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b7a6:	69bb      	ldr	r3, [r7, #24]
 801b7a8:	085b      	lsrs	r3, r3, #1
 801b7aa:	b29b      	uxth	r3, r3
 801b7ac:	f003 0307 	and.w	r3, r3, #7
 801b7b0:	b29a      	uxth	r2, r3
 801b7b2:	8afb      	ldrh	r3, [r7, #22]
 801b7b4:	4313      	orrs	r3, r2
 801b7b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	8afa      	ldrh	r2, [r7, #22]
 801b7be:	60da      	str	r2, [r3, #12]
 801b7c0:	e052      	b.n	801b868 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801b7c2:	2301      	movs	r3, #1
 801b7c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b7c8:	e04e      	b.n	801b868 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 801b7ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b7ce:	2b08      	cmp	r3, #8
 801b7d0:	d827      	bhi.n	801b822 <UART_SetConfig+0x44e>
 801b7d2:	a201      	add	r2, pc, #4	@ (adr r2, 801b7d8 <UART_SetConfig+0x404>)
 801b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7d8:	0801b7fd 	.word	0x0801b7fd
 801b7dc:	0801b805 	.word	0x0801b805
 801b7e0:	0801b80d 	.word	0x0801b80d
 801b7e4:	0801b823 	.word	0x0801b823
 801b7e8:	0801b813 	.word	0x0801b813
 801b7ec:	0801b823 	.word	0x0801b823
 801b7f0:	0801b823 	.word	0x0801b823
 801b7f4:	0801b823 	.word	0x0801b823
 801b7f8:	0801b81b 	.word	0x0801b81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b7fc:	f7fc ff44 	bl	8018688 <HAL_RCC_GetPCLK1Freq>
 801b800:	61f8      	str	r0, [r7, #28]
        break;
 801b802:	e014      	b.n	801b82e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b804:	f7fc ff56 	bl	80186b4 <HAL_RCC_GetPCLK2Freq>
 801b808:	61f8      	str	r0, [r7, #28]
        break;
 801b80a:	e010      	b.n	801b82e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b80c:	4b1d      	ldr	r3, [pc, #116]	@ (801b884 <UART_SetConfig+0x4b0>)
 801b80e:	61fb      	str	r3, [r7, #28]
        break;
 801b810:	e00d      	b.n	801b82e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b812:	f7fc fea1 	bl	8018558 <HAL_RCC_GetSysClockFreq>
 801b816:	61f8      	str	r0, [r7, #28]
        break;
 801b818:	e009      	b.n	801b82e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b81a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b81e:	61fb      	str	r3, [r7, #28]
        break;
 801b820:	e005      	b.n	801b82e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 801b822:	2300      	movs	r3, #0
 801b824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801b826:	2301      	movs	r3, #1
 801b828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801b82c:	bf00      	nop
    }

    if (pclk != 0U)
 801b82e:	69fb      	ldr	r3, [r7, #28]
 801b830:	2b00      	cmp	r3, #0
 801b832:	d019      	beq.n	801b868 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	685b      	ldr	r3, [r3, #4]
 801b838:	085a      	lsrs	r2, r3, #1
 801b83a:	69fb      	ldr	r3, [r7, #28]
 801b83c:	441a      	add	r2, r3
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	685b      	ldr	r3, [r3, #4]
 801b842:	fbb2 f3f3 	udiv	r3, r2, r3
 801b846:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b848:	69bb      	ldr	r3, [r7, #24]
 801b84a:	2b0f      	cmp	r3, #15
 801b84c:	d909      	bls.n	801b862 <UART_SetConfig+0x48e>
 801b84e:	69bb      	ldr	r3, [r7, #24]
 801b850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b854:	d205      	bcs.n	801b862 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	b29a      	uxth	r2, r3
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	60da      	str	r2, [r3, #12]
 801b860:	e002      	b.n	801b868 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801b862:	2301      	movs	r3, #1
 801b864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	2200      	movs	r2, #0
 801b86c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	2200      	movs	r2, #0
 801b872:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801b874:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801b878:	4618      	mov	r0, r3
 801b87a:	3728      	adds	r7, #40	@ 0x28
 801b87c:	46bd      	mov	sp, r7
 801b87e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b882:	bf00      	nop
 801b884:	00f42400 	.word	0x00f42400

0801b888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b888:	b480      	push	{r7}
 801b88a:	b083      	sub	sp, #12
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b894:	f003 0308 	and.w	r3, r3, #8
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d00a      	beq.n	801b8b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	685b      	ldr	r3, [r3, #4]
 801b8a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	430a      	orrs	r2, r1
 801b8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8b6:	f003 0301 	and.w	r3, r3, #1
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d00a      	beq.n	801b8d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	685b      	ldr	r3, [r3, #4]
 801b8c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	430a      	orrs	r2, r1
 801b8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8d8:	f003 0302 	and.w	r3, r3, #2
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d00a      	beq.n	801b8f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	685b      	ldr	r3, [r3, #4]
 801b8e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	430a      	orrs	r2, r1
 801b8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8fa:	f003 0304 	and.w	r3, r3, #4
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d00a      	beq.n	801b918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	685b      	ldr	r3, [r3, #4]
 801b908:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	430a      	orrs	r2, r1
 801b916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b91c:	f003 0310 	and.w	r3, r3, #16
 801b920:	2b00      	cmp	r3, #0
 801b922:	d00a      	beq.n	801b93a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	689b      	ldr	r3, [r3, #8]
 801b92a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	430a      	orrs	r2, r1
 801b938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b93e:	f003 0320 	and.w	r3, r3, #32
 801b942:	2b00      	cmp	r3, #0
 801b944:	d00a      	beq.n	801b95c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	689b      	ldr	r3, [r3, #8]
 801b94c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	430a      	orrs	r2, r1
 801b95a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b964:	2b00      	cmp	r3, #0
 801b966:	d01a      	beq.n	801b99e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	685b      	ldr	r3, [r3, #4]
 801b96e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	430a      	orrs	r2, r1
 801b97c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b986:	d10a      	bne.n	801b99e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	685b      	ldr	r3, [r3, #4]
 801b98e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	430a      	orrs	r2, r1
 801b99c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d00a      	beq.n	801b9c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	685b      	ldr	r3, [r3, #4]
 801b9b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	430a      	orrs	r2, r1
 801b9be:	605a      	str	r2, [r3, #4]
  }
}
 801b9c0:	bf00      	nop
 801b9c2:	370c      	adds	r7, #12
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ca:	4770      	bx	lr

0801b9cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b098      	sub	sp, #96	@ 0x60
 801b9d0:	af02      	add	r7, sp, #8
 801b9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801b9dc:	f7fb fcda 	bl	8017394 <HAL_GetTick>
 801b9e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	f003 0308 	and.w	r3, r3, #8
 801b9ec:	2b08      	cmp	r3, #8
 801b9ee:	d12e      	bne.n	801ba4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b9f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801b9f4:	9300      	str	r3, [sp, #0]
 801b9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801b9fe:	6878      	ldr	r0, [r7, #4]
 801ba00:	f000 f88c 	bl	801bb1c <UART_WaitOnFlagUntilTimeout>
 801ba04:	4603      	mov	r3, r0
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d021      	beq.n	801ba4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba12:	e853 3f00 	ldrex	r3, [r3]
 801ba16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ba18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ba1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ba1e:	653b      	str	r3, [r7, #80]	@ 0x50
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	461a      	mov	r2, r3
 801ba26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ba28:	647b      	str	r3, [r7, #68]	@ 0x44
 801ba2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801ba2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ba30:	e841 2300 	strex	r3, r2, [r1]
 801ba34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801ba36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d1e6      	bne.n	801ba0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	2220      	movs	r2, #32
 801ba40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	2200      	movs	r2, #0
 801ba46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ba4a:	2303      	movs	r3, #3
 801ba4c:	e062      	b.n	801bb14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	f003 0304 	and.w	r3, r3, #4
 801ba58:	2b04      	cmp	r3, #4
 801ba5a:	d149      	bne.n	801baf0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ba5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801ba60:	9300      	str	r3, [sp, #0]
 801ba62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba64:	2200      	movs	r2, #0
 801ba66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801ba6a:	6878      	ldr	r0, [r7, #4]
 801ba6c:	f000 f856 	bl	801bb1c <UART_WaitOnFlagUntilTimeout>
 801ba70:	4603      	mov	r3, r0
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d03c      	beq.n	801baf0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba7e:	e853 3f00 	ldrex	r3, [r3]
 801ba82:	623b      	str	r3, [r7, #32]
   return(result);
 801ba84:	6a3b      	ldr	r3, [r7, #32]
 801ba86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801ba8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	461a      	mov	r2, r3
 801ba92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba94:	633b      	str	r3, [r7, #48]	@ 0x30
 801ba96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ba9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ba9c:	e841 2300 	strex	r3, r2, [r1]
 801baa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801baa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d1e6      	bne.n	801ba76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	3308      	adds	r3, #8
 801baae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bab0:	693b      	ldr	r3, [r7, #16]
 801bab2:	e853 3f00 	ldrex	r3, [r3]
 801bab6:	60fb      	str	r3, [r7, #12]
   return(result);
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	f023 0301 	bic.w	r3, r3, #1
 801babe:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	3308      	adds	r3, #8
 801bac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bac8:	61fa      	str	r2, [r7, #28]
 801baca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bacc:	69b9      	ldr	r1, [r7, #24]
 801bace:	69fa      	ldr	r2, [r7, #28]
 801bad0:	e841 2300 	strex	r3, r2, [r1]
 801bad4:	617b      	str	r3, [r7, #20]
   return(result);
 801bad6:	697b      	ldr	r3, [r7, #20]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d1e5      	bne.n	801baa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	2220      	movs	r2, #32
 801bae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	2200      	movs	r2, #0
 801bae8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801baec:	2303      	movs	r3, #3
 801baee:	e011      	b.n	801bb14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	2220      	movs	r2, #32
 801baf4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	2220      	movs	r2, #32
 801bafa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	2200      	movs	r2, #0
 801bb02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	2200      	movs	r2, #0
 801bb08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801bb12:	2300      	movs	r3, #0
}
 801bb14:	4618      	mov	r0, r3
 801bb16:	3758      	adds	r7, #88	@ 0x58
 801bb18:	46bd      	mov	sp, r7
 801bb1a:	bd80      	pop	{r7, pc}

0801bb1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b084      	sub	sp, #16
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	60f8      	str	r0, [r7, #12]
 801bb24:	60b9      	str	r1, [r7, #8]
 801bb26:	603b      	str	r3, [r7, #0]
 801bb28:	4613      	mov	r3, r2
 801bb2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bb2c:	e04f      	b.n	801bbce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bb2e:	69bb      	ldr	r3, [r7, #24]
 801bb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb34:	d04b      	beq.n	801bbce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bb36:	f7fb fc2d 	bl	8017394 <HAL_GetTick>
 801bb3a:	4602      	mov	r2, r0
 801bb3c:	683b      	ldr	r3, [r7, #0]
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	69ba      	ldr	r2, [r7, #24]
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d302      	bcc.n	801bb4c <UART_WaitOnFlagUntilTimeout+0x30>
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d101      	bne.n	801bb50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801bb4c:	2303      	movs	r3, #3
 801bb4e:	e04e      	b.n	801bbee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	f003 0304 	and.w	r3, r3, #4
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d037      	beq.n	801bbce <UART_WaitOnFlagUntilTimeout+0xb2>
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	2b80      	cmp	r3, #128	@ 0x80
 801bb62:	d034      	beq.n	801bbce <UART_WaitOnFlagUntilTimeout+0xb2>
 801bb64:	68bb      	ldr	r3, [r7, #8]
 801bb66:	2b40      	cmp	r3, #64	@ 0x40
 801bb68:	d031      	beq.n	801bbce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	69db      	ldr	r3, [r3, #28]
 801bb70:	f003 0308 	and.w	r3, r3, #8
 801bb74:	2b08      	cmp	r3, #8
 801bb76:	d110      	bne.n	801bb9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	2208      	movs	r2, #8
 801bb7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bb80:	68f8      	ldr	r0, [r7, #12]
 801bb82:	f000 f8ff 	bl	801bd84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	2208      	movs	r2, #8
 801bb8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	2200      	movs	r2, #0
 801bb92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801bb96:	2301      	movs	r3, #1
 801bb98:	e029      	b.n	801bbee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	69db      	ldr	r3, [r3, #28]
 801bba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801bba8:	d111      	bne.n	801bbce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bbb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bbb4:	68f8      	ldr	r0, [r7, #12]
 801bbb6:	f000 f8e5 	bl	801bd84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	2220      	movs	r2, #32
 801bbbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801bbca:	2303      	movs	r3, #3
 801bbcc:	e00f      	b.n	801bbee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	69da      	ldr	r2, [r3, #28]
 801bbd4:	68bb      	ldr	r3, [r7, #8]
 801bbd6:	4013      	ands	r3, r2
 801bbd8:	68ba      	ldr	r2, [r7, #8]
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	bf0c      	ite	eq
 801bbde:	2301      	moveq	r3, #1
 801bbe0:	2300      	movne	r3, #0
 801bbe2:	b2db      	uxtb	r3, r3
 801bbe4:	461a      	mov	r2, r3
 801bbe6:	79fb      	ldrb	r3, [r7, #7]
 801bbe8:	429a      	cmp	r2, r3
 801bbea:	d0a0      	beq.n	801bb2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801bbec:	2300      	movs	r3, #0
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	3710      	adds	r7, #16
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	bd80      	pop	{r7, pc}
	...

0801bbf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bbf8:	b480      	push	{r7}
 801bbfa:	b097      	sub	sp, #92	@ 0x5c
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	4613      	mov	r3, r2
 801bc04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	68ba      	ldr	r2, [r7, #8]
 801bc0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	88fa      	ldrh	r2, [r7, #6]
 801bc10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	88fa      	ldrh	r2, [r7, #6]
 801bc18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	2200      	movs	r2, #0
 801bc20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	689b      	ldr	r3, [r3, #8]
 801bc26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bc2a:	d10e      	bne.n	801bc4a <UART_Start_Receive_IT+0x52>
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	691b      	ldr	r3, [r3, #16]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d105      	bne.n	801bc40 <UART_Start_Receive_IT+0x48>
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801bc3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc3e:	e02d      	b.n	801bc9c <UART_Start_Receive_IT+0xa4>
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	22ff      	movs	r2, #255	@ 0xff
 801bc44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc48:	e028      	b.n	801bc9c <UART_Start_Receive_IT+0xa4>
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	689b      	ldr	r3, [r3, #8]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d10d      	bne.n	801bc6e <UART_Start_Receive_IT+0x76>
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	691b      	ldr	r3, [r3, #16]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d104      	bne.n	801bc64 <UART_Start_Receive_IT+0x6c>
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	22ff      	movs	r2, #255	@ 0xff
 801bc5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc62:	e01b      	b.n	801bc9c <UART_Start_Receive_IT+0xa4>
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	227f      	movs	r2, #127	@ 0x7f
 801bc68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc6c:	e016      	b.n	801bc9c <UART_Start_Receive_IT+0xa4>
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	689b      	ldr	r3, [r3, #8]
 801bc72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bc76:	d10d      	bne.n	801bc94 <UART_Start_Receive_IT+0x9c>
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	691b      	ldr	r3, [r3, #16]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d104      	bne.n	801bc8a <UART_Start_Receive_IT+0x92>
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	227f      	movs	r2, #127	@ 0x7f
 801bc84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc88:	e008      	b.n	801bc9c <UART_Start_Receive_IT+0xa4>
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	223f      	movs	r2, #63	@ 0x3f
 801bc8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801bc92:	e003      	b.n	801bc9c <UART_Start_Receive_IT+0xa4>
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	2200      	movs	r2, #0
 801bc98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	2222      	movs	r2, #34	@ 0x22
 801bca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	3308      	adds	r3, #8
 801bcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bcb6:	e853 3f00 	ldrex	r3, [r3]
 801bcba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801bcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcbe:	f043 0301 	orr.w	r3, r3, #1
 801bcc2:	657b      	str	r3, [r7, #84]	@ 0x54
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	3308      	adds	r3, #8
 801bcca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bccc:	64ba      	str	r2, [r7, #72]	@ 0x48
 801bcce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bcd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801bcd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bcd4:	e841 2300 	strex	r3, r2, [r1]
 801bcd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801bcda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d1e5      	bne.n	801bcac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	689b      	ldr	r3, [r3, #8]
 801bce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bce8:	d107      	bne.n	801bcfa <UART_Start_Receive_IT+0x102>
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	691b      	ldr	r3, [r3, #16]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d103      	bne.n	801bcfa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	4a21      	ldr	r2, [pc, #132]	@ (801bd7c <UART_Start_Receive_IT+0x184>)
 801bcf6:	669a      	str	r2, [r3, #104]	@ 0x68
 801bcf8:	e002      	b.n	801bd00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	4a20      	ldr	r2, [pc, #128]	@ (801bd80 <UART_Start_Receive_IT+0x188>)
 801bcfe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	691b      	ldr	r3, [r3, #16]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d019      	beq.n	801bd3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd10:	e853 3f00 	ldrex	r3, [r3]
 801bd14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd18:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801bd1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	461a      	mov	r2, r3
 801bd24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bd26:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd28:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bd2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bd2e:	e841 2300 	strex	r3, r2, [r1]
 801bd32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801bd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d1e6      	bne.n	801bd08 <UART_Start_Receive_IT+0x110>
 801bd3a:	e018      	b.n	801bd6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	e853 3f00 	ldrex	r3, [r3]
 801bd48:	613b      	str	r3, [r7, #16]
   return(result);
 801bd4a:	693b      	ldr	r3, [r7, #16]
 801bd4c:	f043 0320 	orr.w	r3, r3, #32
 801bd50:	653b      	str	r3, [r7, #80]	@ 0x50
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	461a      	mov	r2, r3
 801bd58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bd5a:	623b      	str	r3, [r7, #32]
 801bd5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd5e:	69f9      	ldr	r1, [r7, #28]
 801bd60:	6a3a      	ldr	r2, [r7, #32]
 801bd62:	e841 2300 	strex	r3, r2, [r1]
 801bd66:	61bb      	str	r3, [r7, #24]
   return(result);
 801bd68:	69bb      	ldr	r3, [r7, #24]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d1e6      	bne.n	801bd3c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801bd6e:	2300      	movs	r3, #0
}
 801bd70:	4618      	mov	r0, r3
 801bd72:	375c      	adds	r7, #92	@ 0x5c
 801bd74:	46bd      	mov	sp, r7
 801bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd7a:	4770      	bx	lr
 801bd7c:	0801c089 	.word	0x0801c089
 801bd80:	0801becd 	.word	0x0801becd

0801bd84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801bd84:	b480      	push	{r7}
 801bd86:	b095      	sub	sp, #84	@ 0x54
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bd94:	e853 3f00 	ldrex	r3, [r3]
 801bd98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801bd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bda0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	461a      	mov	r2, r3
 801bda8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bdaa:	643b      	str	r3, [r7, #64]	@ 0x40
 801bdac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801bdb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bdb2:	e841 2300 	strex	r3, r2, [r1]
 801bdb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801bdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d1e6      	bne.n	801bd8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	3308      	adds	r3, #8
 801bdc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdc6:	6a3b      	ldr	r3, [r7, #32]
 801bdc8:	e853 3f00 	ldrex	r3, [r3]
 801bdcc:	61fb      	str	r3, [r7, #28]
   return(result);
 801bdce:	69fb      	ldr	r3, [r7, #28]
 801bdd0:	f023 0301 	bic.w	r3, r3, #1
 801bdd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	3308      	adds	r3, #8
 801bddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bdde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bde0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bde2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bde4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bde6:	e841 2300 	strex	r3, r2, [r1]
 801bdea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d1e5      	bne.n	801bdbe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bdf6:	2b01      	cmp	r3, #1
 801bdf8:	d118      	bne.n	801be2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	e853 3f00 	ldrex	r3, [r3]
 801be06:	60bb      	str	r3, [r7, #8]
   return(result);
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	f023 0310 	bic.w	r3, r3, #16
 801be0e:	647b      	str	r3, [r7, #68]	@ 0x44
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	461a      	mov	r2, r3
 801be16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801be18:	61bb      	str	r3, [r7, #24]
 801be1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be1c:	6979      	ldr	r1, [r7, #20]
 801be1e:	69ba      	ldr	r2, [r7, #24]
 801be20:	e841 2300 	strex	r3, r2, [r1]
 801be24:	613b      	str	r3, [r7, #16]
   return(result);
 801be26:	693b      	ldr	r3, [r7, #16]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d1e6      	bne.n	801bdfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2220      	movs	r2, #32
 801be30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	2200      	movs	r2, #0
 801be38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	2200      	movs	r2, #0
 801be3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801be40:	bf00      	nop
 801be42:	3754      	adds	r7, #84	@ 0x54
 801be44:	46bd      	mov	sp, r7
 801be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be4a:	4770      	bx	lr

0801be4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b084      	sub	sp, #16
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	2200      	movs	r2, #0
 801be5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	2200      	movs	r2, #0
 801be66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801be6a:	68f8      	ldr	r0, [r7, #12]
 801be6c:	f7ff fa9c 	bl	801b3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801be70:	bf00      	nop
 801be72:	3710      	adds	r7, #16
 801be74:	46bd      	mov	sp, r7
 801be76:	bd80      	pop	{r7, pc}

0801be78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b088      	sub	sp, #32
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	e853 3f00 	ldrex	r3, [r3]
 801be8c:	60bb      	str	r3, [r7, #8]
   return(result);
 801be8e:	68bb      	ldr	r3, [r7, #8]
 801be90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801be94:	61fb      	str	r3, [r7, #28]
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	461a      	mov	r2, r3
 801be9c:	69fb      	ldr	r3, [r7, #28]
 801be9e:	61bb      	str	r3, [r7, #24]
 801bea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bea2:	6979      	ldr	r1, [r7, #20]
 801bea4:	69ba      	ldr	r2, [r7, #24]
 801bea6:	e841 2300 	strex	r3, r2, [r1]
 801beaa:	613b      	str	r3, [r7, #16]
   return(result);
 801beac:	693b      	ldr	r3, [r7, #16]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d1e6      	bne.n	801be80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	2220      	movs	r2, #32
 801beb6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	2200      	movs	r2, #0
 801bebc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801bebe:	6878      	ldr	r0, [r7, #4]
 801bec0:	f7ff fa68 	bl	801b394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bec4:	bf00      	nop
 801bec6:	3720      	adds	r7, #32
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd80      	pop	{r7, pc}

0801becc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b09c      	sub	sp, #112	@ 0x70
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801beda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801bee4:	2b22      	cmp	r3, #34	@ 0x22
 801bee6:	f040 80be 	bne.w	801c066 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bef0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801bef4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801bef8:	b2d9      	uxtb	r1, r3
 801befa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801befe:	b2da      	uxtb	r2, r3
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bf04:	400a      	ands	r2, r1
 801bf06:	b2d2      	uxtb	r2, r2
 801bf08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bf0e:	1c5a      	adds	r2, r3, #1
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801bf1a:	b29b      	uxth	r3, r3
 801bf1c:	3b01      	subs	r3, #1
 801bf1e:	b29a      	uxth	r2, r3
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801bf2c:	b29b      	uxth	r3, r3
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	f040 80a3 	bne.w	801c07a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bf3c:	e853 3f00 	ldrex	r3, [r3]
 801bf40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801bf42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bf44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801bf48:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	461a      	mov	r2, r3
 801bf50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bf52:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bf54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801bf58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801bf5a:	e841 2300 	strex	r3, r2, [r1]
 801bf5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801bf60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d1e6      	bne.n	801bf34 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	3308      	adds	r3, #8
 801bf6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf70:	e853 3f00 	ldrex	r3, [r3]
 801bf74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801bf76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf78:	f023 0301 	bic.w	r3, r3, #1
 801bf7c:	667b      	str	r3, [r7, #100]	@ 0x64
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	3308      	adds	r3, #8
 801bf84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801bf86:	647a      	str	r2, [r7, #68]	@ 0x44
 801bf88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801bf8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bf8e:	e841 2300 	strex	r3, r2, [r1]
 801bf92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801bf94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d1e5      	bne.n	801bf66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	2220      	movs	r2, #32
 801bf9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	2200      	movs	r2, #0
 801bfa6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	2200      	movs	r2, #0
 801bfac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	4a34      	ldr	r2, [pc, #208]	@ (801c084 <UART_RxISR_8BIT+0x1b8>)
 801bfb4:	4293      	cmp	r3, r2
 801bfb6:	d01f      	beq.n	801bff8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	685b      	ldr	r3, [r3, #4]
 801bfbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d018      	beq.n	801bff8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfce:	e853 3f00 	ldrex	r3, [r3]
 801bfd2:	623b      	str	r3, [r7, #32]
   return(result);
 801bfd4:	6a3b      	ldr	r3, [r7, #32]
 801bfd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801bfda:	663b      	str	r3, [r7, #96]	@ 0x60
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	461a      	mov	r2, r3
 801bfe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bfe4:	633b      	str	r3, [r7, #48]	@ 0x30
 801bfe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bfea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bfec:	e841 2300 	strex	r3, r2, [r1]
 801bff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d1e6      	bne.n	801bfc6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bffc:	2b01      	cmp	r3, #1
 801bffe:	d12e      	bne.n	801c05e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	2200      	movs	r2, #0
 801c004:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c00c:	693b      	ldr	r3, [r7, #16]
 801c00e:	e853 3f00 	ldrex	r3, [r3]
 801c012:	60fb      	str	r3, [r7, #12]
   return(result);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	f023 0310 	bic.w	r3, r3, #16
 801c01a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	461a      	mov	r2, r3
 801c022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c024:	61fb      	str	r3, [r7, #28]
 801c026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c028:	69b9      	ldr	r1, [r7, #24]
 801c02a:	69fa      	ldr	r2, [r7, #28]
 801c02c:	e841 2300 	strex	r3, r2, [r1]
 801c030:	617b      	str	r3, [r7, #20]
   return(result);
 801c032:	697b      	ldr	r3, [r7, #20]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d1e6      	bne.n	801c006 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	69db      	ldr	r3, [r3, #28]
 801c03e:	f003 0310 	and.w	r3, r3, #16
 801c042:	2b10      	cmp	r3, #16
 801c044:	d103      	bne.n	801c04e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	2210      	movs	r2, #16
 801c04c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801c054:	4619      	mov	r1, r3
 801c056:	6878      	ldr	r0, [r7, #4]
 801c058:	f7ff f9b0 	bl	801b3bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c05c:	e00d      	b.n	801c07a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801c05e:	6878      	ldr	r0, [r7, #4]
 801c060:	f7e6 f9e4 	bl	800242c <HAL_UART_RxCpltCallback>
}
 801c064:	e009      	b.n	801c07a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	8b1b      	ldrh	r3, [r3, #24]
 801c06c:	b29a      	uxth	r2, r3
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	f042 0208 	orr.w	r2, r2, #8
 801c076:	b292      	uxth	r2, r2
 801c078:	831a      	strh	r2, [r3, #24]
}
 801c07a:	bf00      	nop
 801c07c:	3770      	adds	r7, #112	@ 0x70
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}
 801c082:	bf00      	nop
 801c084:	40008000 	.word	0x40008000

0801c088 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c088:	b580      	push	{r7, lr}
 801c08a:	b09c      	sub	sp, #112	@ 0x70
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801c096:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c0a0:	2b22      	cmp	r3, #34	@ 0x22
 801c0a2:	f040 80be 	bne.w	801c222 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c0ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c0b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801c0b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801c0ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801c0be:	4013      	ands	r3, r2
 801c0c0:	b29a      	uxth	r2, r3
 801c0c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c0c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c0ca:	1c9a      	adds	r2, r3, #2
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c0d6:	b29b      	uxth	r3, r3
 801c0d8:	3b01      	subs	r3, #1
 801c0da:	b29a      	uxth	r2, r3
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801c0e8:	b29b      	uxth	r3, r3
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	f040 80a3 	bne.w	801c236 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c0f8:	e853 3f00 	ldrex	r3, [r3]
 801c0fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801c0fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801c104:	667b      	str	r3, [r7, #100]	@ 0x64
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	461a      	mov	r2, r3
 801c10c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c10e:	657b      	str	r3, [r7, #84]	@ 0x54
 801c110:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c112:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c116:	e841 2300 	strex	r3, r2, [r1]
 801c11a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801c11c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d1e6      	bne.n	801c0f0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	3308      	adds	r3, #8
 801c128:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c12c:	e853 3f00 	ldrex	r3, [r3]
 801c130:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c134:	f023 0301 	bic.w	r3, r3, #1
 801c138:	663b      	str	r3, [r7, #96]	@ 0x60
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	3308      	adds	r3, #8
 801c140:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801c142:	643a      	str	r2, [r7, #64]	@ 0x40
 801c144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c146:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c14a:	e841 2300 	strex	r3, r2, [r1]
 801c14e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801c150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c152:	2b00      	cmp	r3, #0
 801c154:	d1e5      	bne.n	801c122 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	2220      	movs	r2, #32
 801c15a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	2200      	movs	r2, #0
 801c162:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	2200      	movs	r2, #0
 801c168:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	4a34      	ldr	r2, [pc, #208]	@ (801c240 <UART_RxISR_16BIT+0x1b8>)
 801c170:	4293      	cmp	r3, r2
 801c172:	d01f      	beq.n	801c1b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	685b      	ldr	r3, [r3, #4]
 801c17a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d018      	beq.n	801c1b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c188:	6a3b      	ldr	r3, [r7, #32]
 801c18a:	e853 3f00 	ldrex	r3, [r3]
 801c18e:	61fb      	str	r3, [r7, #28]
   return(result);
 801c190:	69fb      	ldr	r3, [r7, #28]
 801c192:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	461a      	mov	r2, r3
 801c19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1a8:	e841 2300 	strex	r3, r2, [r1]
 801c1ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d1e6      	bne.n	801c182 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c1b8:	2b01      	cmp	r3, #1
 801c1ba:	d12e      	bne.n	801c21a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	2200      	movs	r2, #0
 801c1c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	e853 3f00 	ldrex	r3, [r3]
 801c1ce:	60bb      	str	r3, [r7, #8]
   return(result);
 801c1d0:	68bb      	ldr	r3, [r7, #8]
 801c1d2:	f023 0310 	bic.w	r3, r3, #16
 801c1d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	461a      	mov	r2, r3
 801c1de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c1e0:	61bb      	str	r3, [r7, #24]
 801c1e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1e4:	6979      	ldr	r1, [r7, #20]
 801c1e6:	69ba      	ldr	r2, [r7, #24]
 801c1e8:	e841 2300 	strex	r3, r2, [r1]
 801c1ec:	613b      	str	r3, [r7, #16]
   return(result);
 801c1ee:	693b      	ldr	r3, [r7, #16]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d1e6      	bne.n	801c1c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	69db      	ldr	r3, [r3, #28]
 801c1fa:	f003 0310 	and.w	r3, r3, #16
 801c1fe:	2b10      	cmp	r3, #16
 801c200:	d103      	bne.n	801c20a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	2210      	movs	r2, #16
 801c208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801c210:	4619      	mov	r1, r3
 801c212:	6878      	ldr	r0, [r7, #4]
 801c214:	f7ff f8d2 	bl	801b3bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c218:	e00d      	b.n	801c236 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801c21a:	6878      	ldr	r0, [r7, #4]
 801c21c:	f7e6 f906 	bl	800242c <HAL_UART_RxCpltCallback>
}
 801c220:	e009      	b.n	801c236 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	8b1b      	ldrh	r3, [r3, #24]
 801c228:	b29a      	uxth	r2, r3
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	f042 0208 	orr.w	r2, r2, #8
 801c232:	b292      	uxth	r2, r2
 801c234:	831a      	strh	r2, [r3, #24]
}
 801c236:	bf00      	nop
 801c238:	3770      	adds	r7, #112	@ 0x70
 801c23a:	46bd      	mov	sp, r7
 801c23c:	bd80      	pop	{r7, pc}
 801c23e:	bf00      	nop
 801c240:	40008000 	.word	0x40008000

0801c244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c244:	b480      	push	{r7}
 801c246:	b083      	sub	sp, #12
 801c248:	af00      	add	r7, sp, #0
 801c24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c24c:	bf00      	nop
 801c24e:	370c      	adds	r7, #12
 801c250:	46bd      	mov	sp, r7
 801c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c256:	4770      	bx	lr

0801c258 <__cvt>:
 801c258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c25c:	ec57 6b10 	vmov	r6, r7, d0
 801c260:	2f00      	cmp	r7, #0
 801c262:	460c      	mov	r4, r1
 801c264:	4619      	mov	r1, r3
 801c266:	463b      	mov	r3, r7
 801c268:	bfbb      	ittet	lt
 801c26a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c26e:	461f      	movlt	r7, r3
 801c270:	2300      	movge	r3, #0
 801c272:	232d      	movlt	r3, #45	@ 0x2d
 801c274:	700b      	strb	r3, [r1, #0]
 801c276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c278:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c27c:	4691      	mov	r9, r2
 801c27e:	f023 0820 	bic.w	r8, r3, #32
 801c282:	bfbc      	itt	lt
 801c284:	4632      	movlt	r2, r6
 801c286:	4616      	movlt	r6, r2
 801c288:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c28c:	d005      	beq.n	801c29a <__cvt+0x42>
 801c28e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c292:	d100      	bne.n	801c296 <__cvt+0x3e>
 801c294:	3401      	adds	r4, #1
 801c296:	2102      	movs	r1, #2
 801c298:	e000      	b.n	801c29c <__cvt+0x44>
 801c29a:	2103      	movs	r1, #3
 801c29c:	ab03      	add	r3, sp, #12
 801c29e:	9301      	str	r3, [sp, #4]
 801c2a0:	ab02      	add	r3, sp, #8
 801c2a2:	9300      	str	r3, [sp, #0]
 801c2a4:	ec47 6b10 	vmov	d0, r6, r7
 801c2a8:	4653      	mov	r3, sl
 801c2aa:	4622      	mov	r2, r4
 801c2ac:	f001 f824 	bl	801d2f8 <_dtoa_r>
 801c2b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c2b4:	4605      	mov	r5, r0
 801c2b6:	d119      	bne.n	801c2ec <__cvt+0x94>
 801c2b8:	f019 0f01 	tst.w	r9, #1
 801c2bc:	d00e      	beq.n	801c2dc <__cvt+0x84>
 801c2be:	eb00 0904 	add.w	r9, r0, r4
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	2300      	movs	r3, #0
 801c2c6:	4630      	mov	r0, r6
 801c2c8:	4639      	mov	r1, r7
 801c2ca:	f7e4 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 801c2ce:	b108      	cbz	r0, 801c2d4 <__cvt+0x7c>
 801c2d0:	f8cd 900c 	str.w	r9, [sp, #12]
 801c2d4:	2230      	movs	r2, #48	@ 0x30
 801c2d6:	9b03      	ldr	r3, [sp, #12]
 801c2d8:	454b      	cmp	r3, r9
 801c2da:	d31e      	bcc.n	801c31a <__cvt+0xc2>
 801c2dc:	9b03      	ldr	r3, [sp, #12]
 801c2de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c2e0:	1b5b      	subs	r3, r3, r5
 801c2e2:	4628      	mov	r0, r5
 801c2e4:	6013      	str	r3, [r2, #0]
 801c2e6:	b004      	add	sp, #16
 801c2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c2f0:	eb00 0904 	add.w	r9, r0, r4
 801c2f4:	d1e5      	bne.n	801c2c2 <__cvt+0x6a>
 801c2f6:	7803      	ldrb	r3, [r0, #0]
 801c2f8:	2b30      	cmp	r3, #48	@ 0x30
 801c2fa:	d10a      	bne.n	801c312 <__cvt+0xba>
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	2300      	movs	r3, #0
 801c300:	4630      	mov	r0, r6
 801c302:	4639      	mov	r1, r7
 801c304:	f7e4 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 801c308:	b918      	cbnz	r0, 801c312 <__cvt+0xba>
 801c30a:	f1c4 0401 	rsb	r4, r4, #1
 801c30e:	f8ca 4000 	str.w	r4, [sl]
 801c312:	f8da 3000 	ldr.w	r3, [sl]
 801c316:	4499      	add	r9, r3
 801c318:	e7d3      	b.n	801c2c2 <__cvt+0x6a>
 801c31a:	1c59      	adds	r1, r3, #1
 801c31c:	9103      	str	r1, [sp, #12]
 801c31e:	701a      	strb	r2, [r3, #0]
 801c320:	e7d9      	b.n	801c2d6 <__cvt+0x7e>

0801c322 <__exponent>:
 801c322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c324:	2900      	cmp	r1, #0
 801c326:	bfba      	itte	lt
 801c328:	4249      	neglt	r1, r1
 801c32a:	232d      	movlt	r3, #45	@ 0x2d
 801c32c:	232b      	movge	r3, #43	@ 0x2b
 801c32e:	2909      	cmp	r1, #9
 801c330:	7002      	strb	r2, [r0, #0]
 801c332:	7043      	strb	r3, [r0, #1]
 801c334:	dd29      	ble.n	801c38a <__exponent+0x68>
 801c336:	f10d 0307 	add.w	r3, sp, #7
 801c33a:	461d      	mov	r5, r3
 801c33c:	270a      	movs	r7, #10
 801c33e:	461a      	mov	r2, r3
 801c340:	fbb1 f6f7 	udiv	r6, r1, r7
 801c344:	fb07 1416 	mls	r4, r7, r6, r1
 801c348:	3430      	adds	r4, #48	@ 0x30
 801c34a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c34e:	460c      	mov	r4, r1
 801c350:	2c63      	cmp	r4, #99	@ 0x63
 801c352:	f103 33ff 	add.w	r3, r3, #4294967295
 801c356:	4631      	mov	r1, r6
 801c358:	dcf1      	bgt.n	801c33e <__exponent+0x1c>
 801c35a:	3130      	adds	r1, #48	@ 0x30
 801c35c:	1e94      	subs	r4, r2, #2
 801c35e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c362:	1c41      	adds	r1, r0, #1
 801c364:	4623      	mov	r3, r4
 801c366:	42ab      	cmp	r3, r5
 801c368:	d30a      	bcc.n	801c380 <__exponent+0x5e>
 801c36a:	f10d 0309 	add.w	r3, sp, #9
 801c36e:	1a9b      	subs	r3, r3, r2
 801c370:	42ac      	cmp	r4, r5
 801c372:	bf88      	it	hi
 801c374:	2300      	movhi	r3, #0
 801c376:	3302      	adds	r3, #2
 801c378:	4403      	add	r3, r0
 801c37a:	1a18      	subs	r0, r3, r0
 801c37c:	b003      	add	sp, #12
 801c37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c380:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c384:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c388:	e7ed      	b.n	801c366 <__exponent+0x44>
 801c38a:	2330      	movs	r3, #48	@ 0x30
 801c38c:	3130      	adds	r1, #48	@ 0x30
 801c38e:	7083      	strb	r3, [r0, #2]
 801c390:	70c1      	strb	r1, [r0, #3]
 801c392:	1d03      	adds	r3, r0, #4
 801c394:	e7f1      	b.n	801c37a <__exponent+0x58>
	...

0801c398 <_printf_float>:
 801c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39c:	b08d      	sub	sp, #52	@ 0x34
 801c39e:	460c      	mov	r4, r1
 801c3a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c3a4:	4616      	mov	r6, r2
 801c3a6:	461f      	mov	r7, r3
 801c3a8:	4605      	mov	r5, r0
 801c3aa:	f000 fe95 	bl	801d0d8 <_localeconv_r>
 801c3ae:	6803      	ldr	r3, [r0, #0]
 801c3b0:	9304      	str	r3, [sp, #16]
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f7e3 ff5c 	bl	8000270 <strlen>
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	930a      	str	r3, [sp, #40]	@ 0x28
 801c3bc:	f8d8 3000 	ldr.w	r3, [r8]
 801c3c0:	9005      	str	r0, [sp, #20]
 801c3c2:	3307      	adds	r3, #7
 801c3c4:	f023 0307 	bic.w	r3, r3, #7
 801c3c8:	f103 0208 	add.w	r2, r3, #8
 801c3cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c3d0:	f8d4 b000 	ldr.w	fp, [r4]
 801c3d4:	f8c8 2000 	str.w	r2, [r8]
 801c3d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c3dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c3e0:	9307      	str	r3, [sp, #28]
 801c3e2:	f8cd 8018 	str.w	r8, [sp, #24]
 801c3e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c3ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c3ee:	4b9c      	ldr	r3, [pc, #624]	@ (801c660 <_printf_float+0x2c8>)
 801c3f0:	f04f 32ff 	mov.w	r2, #4294967295
 801c3f4:	f7e4 fb9a 	bl	8000b2c <__aeabi_dcmpun>
 801c3f8:	bb70      	cbnz	r0, 801c458 <_printf_float+0xc0>
 801c3fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c3fe:	4b98      	ldr	r3, [pc, #608]	@ (801c660 <_printf_float+0x2c8>)
 801c400:	f04f 32ff 	mov.w	r2, #4294967295
 801c404:	f7e4 fb74 	bl	8000af0 <__aeabi_dcmple>
 801c408:	bb30      	cbnz	r0, 801c458 <_printf_float+0xc0>
 801c40a:	2200      	movs	r2, #0
 801c40c:	2300      	movs	r3, #0
 801c40e:	4640      	mov	r0, r8
 801c410:	4649      	mov	r1, r9
 801c412:	f7e4 fb63 	bl	8000adc <__aeabi_dcmplt>
 801c416:	b110      	cbz	r0, 801c41e <_printf_float+0x86>
 801c418:	232d      	movs	r3, #45	@ 0x2d
 801c41a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c41e:	4a91      	ldr	r2, [pc, #580]	@ (801c664 <_printf_float+0x2cc>)
 801c420:	4b91      	ldr	r3, [pc, #580]	@ (801c668 <_printf_float+0x2d0>)
 801c422:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c426:	bf8c      	ite	hi
 801c428:	4690      	movhi	r8, r2
 801c42a:	4698      	movls	r8, r3
 801c42c:	2303      	movs	r3, #3
 801c42e:	6123      	str	r3, [r4, #16]
 801c430:	f02b 0304 	bic.w	r3, fp, #4
 801c434:	6023      	str	r3, [r4, #0]
 801c436:	f04f 0900 	mov.w	r9, #0
 801c43a:	9700      	str	r7, [sp, #0]
 801c43c:	4633      	mov	r3, r6
 801c43e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c440:	4621      	mov	r1, r4
 801c442:	4628      	mov	r0, r5
 801c444:	f000 f9d2 	bl	801c7ec <_printf_common>
 801c448:	3001      	adds	r0, #1
 801c44a:	f040 808d 	bne.w	801c568 <_printf_float+0x1d0>
 801c44e:	f04f 30ff 	mov.w	r0, #4294967295
 801c452:	b00d      	add	sp, #52	@ 0x34
 801c454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c458:	4642      	mov	r2, r8
 801c45a:	464b      	mov	r3, r9
 801c45c:	4640      	mov	r0, r8
 801c45e:	4649      	mov	r1, r9
 801c460:	f7e4 fb64 	bl	8000b2c <__aeabi_dcmpun>
 801c464:	b140      	cbz	r0, 801c478 <_printf_float+0xe0>
 801c466:	464b      	mov	r3, r9
 801c468:	2b00      	cmp	r3, #0
 801c46a:	bfbc      	itt	lt
 801c46c:	232d      	movlt	r3, #45	@ 0x2d
 801c46e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c472:	4a7e      	ldr	r2, [pc, #504]	@ (801c66c <_printf_float+0x2d4>)
 801c474:	4b7e      	ldr	r3, [pc, #504]	@ (801c670 <_printf_float+0x2d8>)
 801c476:	e7d4      	b.n	801c422 <_printf_float+0x8a>
 801c478:	6863      	ldr	r3, [r4, #4]
 801c47a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c47e:	9206      	str	r2, [sp, #24]
 801c480:	1c5a      	adds	r2, r3, #1
 801c482:	d13b      	bne.n	801c4fc <_printf_float+0x164>
 801c484:	2306      	movs	r3, #6
 801c486:	6063      	str	r3, [r4, #4]
 801c488:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c48c:	2300      	movs	r3, #0
 801c48e:	6022      	str	r2, [r4, #0]
 801c490:	9303      	str	r3, [sp, #12]
 801c492:	ab0a      	add	r3, sp, #40	@ 0x28
 801c494:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c498:	ab09      	add	r3, sp, #36	@ 0x24
 801c49a:	9300      	str	r3, [sp, #0]
 801c49c:	6861      	ldr	r1, [r4, #4]
 801c49e:	ec49 8b10 	vmov	d0, r8, r9
 801c4a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c4a6:	4628      	mov	r0, r5
 801c4a8:	f7ff fed6 	bl	801c258 <__cvt>
 801c4ac:	9b06      	ldr	r3, [sp, #24]
 801c4ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c4b0:	2b47      	cmp	r3, #71	@ 0x47
 801c4b2:	4680      	mov	r8, r0
 801c4b4:	d129      	bne.n	801c50a <_printf_float+0x172>
 801c4b6:	1cc8      	adds	r0, r1, #3
 801c4b8:	db02      	blt.n	801c4c0 <_printf_float+0x128>
 801c4ba:	6863      	ldr	r3, [r4, #4]
 801c4bc:	4299      	cmp	r1, r3
 801c4be:	dd41      	ble.n	801c544 <_printf_float+0x1ac>
 801c4c0:	f1aa 0a02 	sub.w	sl, sl, #2
 801c4c4:	fa5f fa8a 	uxtb.w	sl, sl
 801c4c8:	3901      	subs	r1, #1
 801c4ca:	4652      	mov	r2, sl
 801c4cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c4d0:	9109      	str	r1, [sp, #36]	@ 0x24
 801c4d2:	f7ff ff26 	bl	801c322 <__exponent>
 801c4d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c4d8:	1813      	adds	r3, r2, r0
 801c4da:	2a01      	cmp	r2, #1
 801c4dc:	4681      	mov	r9, r0
 801c4de:	6123      	str	r3, [r4, #16]
 801c4e0:	dc02      	bgt.n	801c4e8 <_printf_float+0x150>
 801c4e2:	6822      	ldr	r2, [r4, #0]
 801c4e4:	07d2      	lsls	r2, r2, #31
 801c4e6:	d501      	bpl.n	801c4ec <_printf_float+0x154>
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	6123      	str	r3, [r4, #16]
 801c4ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d0a2      	beq.n	801c43a <_printf_float+0xa2>
 801c4f4:	232d      	movs	r3, #45	@ 0x2d
 801c4f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c4fa:	e79e      	b.n	801c43a <_printf_float+0xa2>
 801c4fc:	9a06      	ldr	r2, [sp, #24]
 801c4fe:	2a47      	cmp	r2, #71	@ 0x47
 801c500:	d1c2      	bne.n	801c488 <_printf_float+0xf0>
 801c502:	2b00      	cmp	r3, #0
 801c504:	d1c0      	bne.n	801c488 <_printf_float+0xf0>
 801c506:	2301      	movs	r3, #1
 801c508:	e7bd      	b.n	801c486 <_printf_float+0xee>
 801c50a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c50e:	d9db      	bls.n	801c4c8 <_printf_float+0x130>
 801c510:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c514:	d118      	bne.n	801c548 <_printf_float+0x1b0>
 801c516:	2900      	cmp	r1, #0
 801c518:	6863      	ldr	r3, [r4, #4]
 801c51a:	dd0b      	ble.n	801c534 <_printf_float+0x19c>
 801c51c:	6121      	str	r1, [r4, #16]
 801c51e:	b913      	cbnz	r3, 801c526 <_printf_float+0x18e>
 801c520:	6822      	ldr	r2, [r4, #0]
 801c522:	07d0      	lsls	r0, r2, #31
 801c524:	d502      	bpl.n	801c52c <_printf_float+0x194>
 801c526:	3301      	adds	r3, #1
 801c528:	440b      	add	r3, r1
 801c52a:	6123      	str	r3, [r4, #16]
 801c52c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c52e:	f04f 0900 	mov.w	r9, #0
 801c532:	e7db      	b.n	801c4ec <_printf_float+0x154>
 801c534:	b913      	cbnz	r3, 801c53c <_printf_float+0x1a4>
 801c536:	6822      	ldr	r2, [r4, #0]
 801c538:	07d2      	lsls	r2, r2, #31
 801c53a:	d501      	bpl.n	801c540 <_printf_float+0x1a8>
 801c53c:	3302      	adds	r3, #2
 801c53e:	e7f4      	b.n	801c52a <_printf_float+0x192>
 801c540:	2301      	movs	r3, #1
 801c542:	e7f2      	b.n	801c52a <_printf_float+0x192>
 801c544:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c54a:	4299      	cmp	r1, r3
 801c54c:	db05      	blt.n	801c55a <_printf_float+0x1c2>
 801c54e:	6823      	ldr	r3, [r4, #0]
 801c550:	6121      	str	r1, [r4, #16]
 801c552:	07d8      	lsls	r0, r3, #31
 801c554:	d5ea      	bpl.n	801c52c <_printf_float+0x194>
 801c556:	1c4b      	adds	r3, r1, #1
 801c558:	e7e7      	b.n	801c52a <_printf_float+0x192>
 801c55a:	2900      	cmp	r1, #0
 801c55c:	bfd4      	ite	le
 801c55e:	f1c1 0202 	rsble	r2, r1, #2
 801c562:	2201      	movgt	r2, #1
 801c564:	4413      	add	r3, r2
 801c566:	e7e0      	b.n	801c52a <_printf_float+0x192>
 801c568:	6823      	ldr	r3, [r4, #0]
 801c56a:	055a      	lsls	r2, r3, #21
 801c56c:	d407      	bmi.n	801c57e <_printf_float+0x1e6>
 801c56e:	6923      	ldr	r3, [r4, #16]
 801c570:	4642      	mov	r2, r8
 801c572:	4631      	mov	r1, r6
 801c574:	4628      	mov	r0, r5
 801c576:	47b8      	blx	r7
 801c578:	3001      	adds	r0, #1
 801c57a:	d12b      	bne.n	801c5d4 <_printf_float+0x23c>
 801c57c:	e767      	b.n	801c44e <_printf_float+0xb6>
 801c57e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c582:	f240 80dd 	bls.w	801c740 <_printf_float+0x3a8>
 801c586:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c58a:	2200      	movs	r2, #0
 801c58c:	2300      	movs	r3, #0
 801c58e:	f7e4 fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 801c592:	2800      	cmp	r0, #0
 801c594:	d033      	beq.n	801c5fe <_printf_float+0x266>
 801c596:	4a37      	ldr	r2, [pc, #220]	@ (801c674 <_printf_float+0x2dc>)
 801c598:	2301      	movs	r3, #1
 801c59a:	4631      	mov	r1, r6
 801c59c:	4628      	mov	r0, r5
 801c59e:	47b8      	blx	r7
 801c5a0:	3001      	adds	r0, #1
 801c5a2:	f43f af54 	beq.w	801c44e <_printf_float+0xb6>
 801c5a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c5aa:	4543      	cmp	r3, r8
 801c5ac:	db02      	blt.n	801c5b4 <_printf_float+0x21c>
 801c5ae:	6823      	ldr	r3, [r4, #0]
 801c5b0:	07d8      	lsls	r0, r3, #31
 801c5b2:	d50f      	bpl.n	801c5d4 <_printf_float+0x23c>
 801c5b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c5b8:	4631      	mov	r1, r6
 801c5ba:	4628      	mov	r0, r5
 801c5bc:	47b8      	blx	r7
 801c5be:	3001      	adds	r0, #1
 801c5c0:	f43f af45 	beq.w	801c44e <_printf_float+0xb6>
 801c5c4:	f04f 0900 	mov.w	r9, #0
 801c5c8:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5cc:	f104 0a1a 	add.w	sl, r4, #26
 801c5d0:	45c8      	cmp	r8, r9
 801c5d2:	dc09      	bgt.n	801c5e8 <_printf_float+0x250>
 801c5d4:	6823      	ldr	r3, [r4, #0]
 801c5d6:	079b      	lsls	r3, r3, #30
 801c5d8:	f100 8103 	bmi.w	801c7e2 <_printf_float+0x44a>
 801c5dc:	68e0      	ldr	r0, [r4, #12]
 801c5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5e0:	4298      	cmp	r0, r3
 801c5e2:	bfb8      	it	lt
 801c5e4:	4618      	movlt	r0, r3
 801c5e6:	e734      	b.n	801c452 <_printf_float+0xba>
 801c5e8:	2301      	movs	r3, #1
 801c5ea:	4652      	mov	r2, sl
 801c5ec:	4631      	mov	r1, r6
 801c5ee:	4628      	mov	r0, r5
 801c5f0:	47b8      	blx	r7
 801c5f2:	3001      	adds	r0, #1
 801c5f4:	f43f af2b 	beq.w	801c44e <_printf_float+0xb6>
 801c5f8:	f109 0901 	add.w	r9, r9, #1
 801c5fc:	e7e8      	b.n	801c5d0 <_printf_float+0x238>
 801c5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c600:	2b00      	cmp	r3, #0
 801c602:	dc39      	bgt.n	801c678 <_printf_float+0x2e0>
 801c604:	4a1b      	ldr	r2, [pc, #108]	@ (801c674 <_printf_float+0x2dc>)
 801c606:	2301      	movs	r3, #1
 801c608:	4631      	mov	r1, r6
 801c60a:	4628      	mov	r0, r5
 801c60c:	47b8      	blx	r7
 801c60e:	3001      	adds	r0, #1
 801c610:	f43f af1d 	beq.w	801c44e <_printf_float+0xb6>
 801c614:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c618:	ea59 0303 	orrs.w	r3, r9, r3
 801c61c:	d102      	bne.n	801c624 <_printf_float+0x28c>
 801c61e:	6823      	ldr	r3, [r4, #0]
 801c620:	07d9      	lsls	r1, r3, #31
 801c622:	d5d7      	bpl.n	801c5d4 <_printf_float+0x23c>
 801c624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c628:	4631      	mov	r1, r6
 801c62a:	4628      	mov	r0, r5
 801c62c:	47b8      	blx	r7
 801c62e:	3001      	adds	r0, #1
 801c630:	f43f af0d 	beq.w	801c44e <_printf_float+0xb6>
 801c634:	f04f 0a00 	mov.w	sl, #0
 801c638:	f104 0b1a 	add.w	fp, r4, #26
 801c63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c63e:	425b      	negs	r3, r3
 801c640:	4553      	cmp	r3, sl
 801c642:	dc01      	bgt.n	801c648 <_printf_float+0x2b0>
 801c644:	464b      	mov	r3, r9
 801c646:	e793      	b.n	801c570 <_printf_float+0x1d8>
 801c648:	2301      	movs	r3, #1
 801c64a:	465a      	mov	r2, fp
 801c64c:	4631      	mov	r1, r6
 801c64e:	4628      	mov	r0, r5
 801c650:	47b8      	blx	r7
 801c652:	3001      	adds	r0, #1
 801c654:	f43f aefb 	beq.w	801c44e <_printf_float+0xb6>
 801c658:	f10a 0a01 	add.w	sl, sl, #1
 801c65c:	e7ee      	b.n	801c63c <_printf_float+0x2a4>
 801c65e:	bf00      	nop
 801c660:	7fefffff 	.word	0x7fefffff
 801c664:	08020214 	.word	0x08020214
 801c668:	08020210 	.word	0x08020210
 801c66c:	0802021c 	.word	0x0802021c
 801c670:	08020218 	.word	0x08020218
 801c674:	08020220 	.word	0x08020220
 801c678:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c67a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c67e:	4553      	cmp	r3, sl
 801c680:	bfa8      	it	ge
 801c682:	4653      	movge	r3, sl
 801c684:	2b00      	cmp	r3, #0
 801c686:	4699      	mov	r9, r3
 801c688:	dc36      	bgt.n	801c6f8 <_printf_float+0x360>
 801c68a:	f04f 0b00 	mov.w	fp, #0
 801c68e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c692:	f104 021a 	add.w	r2, r4, #26
 801c696:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c698:	9306      	str	r3, [sp, #24]
 801c69a:	eba3 0309 	sub.w	r3, r3, r9
 801c69e:	455b      	cmp	r3, fp
 801c6a0:	dc31      	bgt.n	801c706 <_printf_float+0x36e>
 801c6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6a4:	459a      	cmp	sl, r3
 801c6a6:	dc3a      	bgt.n	801c71e <_printf_float+0x386>
 801c6a8:	6823      	ldr	r3, [r4, #0]
 801c6aa:	07da      	lsls	r2, r3, #31
 801c6ac:	d437      	bmi.n	801c71e <_printf_float+0x386>
 801c6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6b0:	ebaa 0903 	sub.w	r9, sl, r3
 801c6b4:	9b06      	ldr	r3, [sp, #24]
 801c6b6:	ebaa 0303 	sub.w	r3, sl, r3
 801c6ba:	4599      	cmp	r9, r3
 801c6bc:	bfa8      	it	ge
 801c6be:	4699      	movge	r9, r3
 801c6c0:	f1b9 0f00 	cmp.w	r9, #0
 801c6c4:	dc33      	bgt.n	801c72e <_printf_float+0x396>
 801c6c6:	f04f 0800 	mov.w	r8, #0
 801c6ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c6ce:	f104 0b1a 	add.w	fp, r4, #26
 801c6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6d4:	ebaa 0303 	sub.w	r3, sl, r3
 801c6d8:	eba3 0309 	sub.w	r3, r3, r9
 801c6dc:	4543      	cmp	r3, r8
 801c6de:	f77f af79 	ble.w	801c5d4 <_printf_float+0x23c>
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	465a      	mov	r2, fp
 801c6e6:	4631      	mov	r1, r6
 801c6e8:	4628      	mov	r0, r5
 801c6ea:	47b8      	blx	r7
 801c6ec:	3001      	adds	r0, #1
 801c6ee:	f43f aeae 	beq.w	801c44e <_printf_float+0xb6>
 801c6f2:	f108 0801 	add.w	r8, r8, #1
 801c6f6:	e7ec      	b.n	801c6d2 <_printf_float+0x33a>
 801c6f8:	4642      	mov	r2, r8
 801c6fa:	4631      	mov	r1, r6
 801c6fc:	4628      	mov	r0, r5
 801c6fe:	47b8      	blx	r7
 801c700:	3001      	adds	r0, #1
 801c702:	d1c2      	bne.n	801c68a <_printf_float+0x2f2>
 801c704:	e6a3      	b.n	801c44e <_printf_float+0xb6>
 801c706:	2301      	movs	r3, #1
 801c708:	4631      	mov	r1, r6
 801c70a:	4628      	mov	r0, r5
 801c70c:	9206      	str	r2, [sp, #24]
 801c70e:	47b8      	blx	r7
 801c710:	3001      	adds	r0, #1
 801c712:	f43f ae9c 	beq.w	801c44e <_printf_float+0xb6>
 801c716:	9a06      	ldr	r2, [sp, #24]
 801c718:	f10b 0b01 	add.w	fp, fp, #1
 801c71c:	e7bb      	b.n	801c696 <_printf_float+0x2fe>
 801c71e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c722:	4631      	mov	r1, r6
 801c724:	4628      	mov	r0, r5
 801c726:	47b8      	blx	r7
 801c728:	3001      	adds	r0, #1
 801c72a:	d1c0      	bne.n	801c6ae <_printf_float+0x316>
 801c72c:	e68f      	b.n	801c44e <_printf_float+0xb6>
 801c72e:	9a06      	ldr	r2, [sp, #24]
 801c730:	464b      	mov	r3, r9
 801c732:	4442      	add	r2, r8
 801c734:	4631      	mov	r1, r6
 801c736:	4628      	mov	r0, r5
 801c738:	47b8      	blx	r7
 801c73a:	3001      	adds	r0, #1
 801c73c:	d1c3      	bne.n	801c6c6 <_printf_float+0x32e>
 801c73e:	e686      	b.n	801c44e <_printf_float+0xb6>
 801c740:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c744:	f1ba 0f01 	cmp.w	sl, #1
 801c748:	dc01      	bgt.n	801c74e <_printf_float+0x3b6>
 801c74a:	07db      	lsls	r3, r3, #31
 801c74c:	d536      	bpl.n	801c7bc <_printf_float+0x424>
 801c74e:	2301      	movs	r3, #1
 801c750:	4642      	mov	r2, r8
 801c752:	4631      	mov	r1, r6
 801c754:	4628      	mov	r0, r5
 801c756:	47b8      	blx	r7
 801c758:	3001      	adds	r0, #1
 801c75a:	f43f ae78 	beq.w	801c44e <_printf_float+0xb6>
 801c75e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c762:	4631      	mov	r1, r6
 801c764:	4628      	mov	r0, r5
 801c766:	47b8      	blx	r7
 801c768:	3001      	adds	r0, #1
 801c76a:	f43f ae70 	beq.w	801c44e <_printf_float+0xb6>
 801c76e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c772:	2200      	movs	r2, #0
 801c774:	2300      	movs	r3, #0
 801c776:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c77a:	f7e4 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 801c77e:	b9c0      	cbnz	r0, 801c7b2 <_printf_float+0x41a>
 801c780:	4653      	mov	r3, sl
 801c782:	f108 0201 	add.w	r2, r8, #1
 801c786:	4631      	mov	r1, r6
 801c788:	4628      	mov	r0, r5
 801c78a:	47b8      	blx	r7
 801c78c:	3001      	adds	r0, #1
 801c78e:	d10c      	bne.n	801c7aa <_printf_float+0x412>
 801c790:	e65d      	b.n	801c44e <_printf_float+0xb6>
 801c792:	2301      	movs	r3, #1
 801c794:	465a      	mov	r2, fp
 801c796:	4631      	mov	r1, r6
 801c798:	4628      	mov	r0, r5
 801c79a:	47b8      	blx	r7
 801c79c:	3001      	adds	r0, #1
 801c79e:	f43f ae56 	beq.w	801c44e <_printf_float+0xb6>
 801c7a2:	f108 0801 	add.w	r8, r8, #1
 801c7a6:	45d0      	cmp	r8, sl
 801c7a8:	dbf3      	blt.n	801c792 <_printf_float+0x3fa>
 801c7aa:	464b      	mov	r3, r9
 801c7ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c7b0:	e6df      	b.n	801c572 <_printf_float+0x1da>
 801c7b2:	f04f 0800 	mov.w	r8, #0
 801c7b6:	f104 0b1a 	add.w	fp, r4, #26
 801c7ba:	e7f4      	b.n	801c7a6 <_printf_float+0x40e>
 801c7bc:	2301      	movs	r3, #1
 801c7be:	4642      	mov	r2, r8
 801c7c0:	e7e1      	b.n	801c786 <_printf_float+0x3ee>
 801c7c2:	2301      	movs	r3, #1
 801c7c4:	464a      	mov	r2, r9
 801c7c6:	4631      	mov	r1, r6
 801c7c8:	4628      	mov	r0, r5
 801c7ca:	47b8      	blx	r7
 801c7cc:	3001      	adds	r0, #1
 801c7ce:	f43f ae3e 	beq.w	801c44e <_printf_float+0xb6>
 801c7d2:	f108 0801 	add.w	r8, r8, #1
 801c7d6:	68e3      	ldr	r3, [r4, #12]
 801c7d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c7da:	1a5b      	subs	r3, r3, r1
 801c7dc:	4543      	cmp	r3, r8
 801c7de:	dcf0      	bgt.n	801c7c2 <_printf_float+0x42a>
 801c7e0:	e6fc      	b.n	801c5dc <_printf_float+0x244>
 801c7e2:	f04f 0800 	mov.w	r8, #0
 801c7e6:	f104 0919 	add.w	r9, r4, #25
 801c7ea:	e7f4      	b.n	801c7d6 <_printf_float+0x43e>

0801c7ec <_printf_common>:
 801c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7f0:	4616      	mov	r6, r2
 801c7f2:	4698      	mov	r8, r3
 801c7f4:	688a      	ldr	r2, [r1, #8]
 801c7f6:	690b      	ldr	r3, [r1, #16]
 801c7f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c7fc:	4293      	cmp	r3, r2
 801c7fe:	bfb8      	it	lt
 801c800:	4613      	movlt	r3, r2
 801c802:	6033      	str	r3, [r6, #0]
 801c804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c808:	4607      	mov	r7, r0
 801c80a:	460c      	mov	r4, r1
 801c80c:	b10a      	cbz	r2, 801c812 <_printf_common+0x26>
 801c80e:	3301      	adds	r3, #1
 801c810:	6033      	str	r3, [r6, #0]
 801c812:	6823      	ldr	r3, [r4, #0]
 801c814:	0699      	lsls	r1, r3, #26
 801c816:	bf42      	ittt	mi
 801c818:	6833      	ldrmi	r3, [r6, #0]
 801c81a:	3302      	addmi	r3, #2
 801c81c:	6033      	strmi	r3, [r6, #0]
 801c81e:	6825      	ldr	r5, [r4, #0]
 801c820:	f015 0506 	ands.w	r5, r5, #6
 801c824:	d106      	bne.n	801c834 <_printf_common+0x48>
 801c826:	f104 0a19 	add.w	sl, r4, #25
 801c82a:	68e3      	ldr	r3, [r4, #12]
 801c82c:	6832      	ldr	r2, [r6, #0]
 801c82e:	1a9b      	subs	r3, r3, r2
 801c830:	42ab      	cmp	r3, r5
 801c832:	dc26      	bgt.n	801c882 <_printf_common+0x96>
 801c834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c838:	6822      	ldr	r2, [r4, #0]
 801c83a:	3b00      	subs	r3, #0
 801c83c:	bf18      	it	ne
 801c83e:	2301      	movne	r3, #1
 801c840:	0692      	lsls	r2, r2, #26
 801c842:	d42b      	bmi.n	801c89c <_printf_common+0xb0>
 801c844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c848:	4641      	mov	r1, r8
 801c84a:	4638      	mov	r0, r7
 801c84c:	47c8      	blx	r9
 801c84e:	3001      	adds	r0, #1
 801c850:	d01e      	beq.n	801c890 <_printf_common+0xa4>
 801c852:	6823      	ldr	r3, [r4, #0]
 801c854:	6922      	ldr	r2, [r4, #16]
 801c856:	f003 0306 	and.w	r3, r3, #6
 801c85a:	2b04      	cmp	r3, #4
 801c85c:	bf02      	ittt	eq
 801c85e:	68e5      	ldreq	r5, [r4, #12]
 801c860:	6833      	ldreq	r3, [r6, #0]
 801c862:	1aed      	subeq	r5, r5, r3
 801c864:	68a3      	ldr	r3, [r4, #8]
 801c866:	bf0c      	ite	eq
 801c868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c86c:	2500      	movne	r5, #0
 801c86e:	4293      	cmp	r3, r2
 801c870:	bfc4      	itt	gt
 801c872:	1a9b      	subgt	r3, r3, r2
 801c874:	18ed      	addgt	r5, r5, r3
 801c876:	2600      	movs	r6, #0
 801c878:	341a      	adds	r4, #26
 801c87a:	42b5      	cmp	r5, r6
 801c87c:	d11a      	bne.n	801c8b4 <_printf_common+0xc8>
 801c87e:	2000      	movs	r0, #0
 801c880:	e008      	b.n	801c894 <_printf_common+0xa8>
 801c882:	2301      	movs	r3, #1
 801c884:	4652      	mov	r2, sl
 801c886:	4641      	mov	r1, r8
 801c888:	4638      	mov	r0, r7
 801c88a:	47c8      	blx	r9
 801c88c:	3001      	adds	r0, #1
 801c88e:	d103      	bne.n	801c898 <_printf_common+0xac>
 801c890:	f04f 30ff 	mov.w	r0, #4294967295
 801c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c898:	3501      	adds	r5, #1
 801c89a:	e7c6      	b.n	801c82a <_printf_common+0x3e>
 801c89c:	18e1      	adds	r1, r4, r3
 801c89e:	1c5a      	adds	r2, r3, #1
 801c8a0:	2030      	movs	r0, #48	@ 0x30
 801c8a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c8a6:	4422      	add	r2, r4
 801c8a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c8ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c8b0:	3302      	adds	r3, #2
 801c8b2:	e7c7      	b.n	801c844 <_printf_common+0x58>
 801c8b4:	2301      	movs	r3, #1
 801c8b6:	4622      	mov	r2, r4
 801c8b8:	4641      	mov	r1, r8
 801c8ba:	4638      	mov	r0, r7
 801c8bc:	47c8      	blx	r9
 801c8be:	3001      	adds	r0, #1
 801c8c0:	d0e6      	beq.n	801c890 <_printf_common+0xa4>
 801c8c2:	3601      	adds	r6, #1
 801c8c4:	e7d9      	b.n	801c87a <_printf_common+0x8e>
	...

0801c8c8 <_printf_i>:
 801c8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8cc:	7e0f      	ldrb	r7, [r1, #24]
 801c8ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c8d0:	2f78      	cmp	r7, #120	@ 0x78
 801c8d2:	4691      	mov	r9, r2
 801c8d4:	4680      	mov	r8, r0
 801c8d6:	460c      	mov	r4, r1
 801c8d8:	469a      	mov	sl, r3
 801c8da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c8de:	d807      	bhi.n	801c8f0 <_printf_i+0x28>
 801c8e0:	2f62      	cmp	r7, #98	@ 0x62
 801c8e2:	d80a      	bhi.n	801c8fa <_printf_i+0x32>
 801c8e4:	2f00      	cmp	r7, #0
 801c8e6:	f000 80d1 	beq.w	801ca8c <_printf_i+0x1c4>
 801c8ea:	2f58      	cmp	r7, #88	@ 0x58
 801c8ec:	f000 80b8 	beq.w	801ca60 <_printf_i+0x198>
 801c8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c8f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c8f8:	e03a      	b.n	801c970 <_printf_i+0xa8>
 801c8fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c8fe:	2b15      	cmp	r3, #21
 801c900:	d8f6      	bhi.n	801c8f0 <_printf_i+0x28>
 801c902:	a101      	add	r1, pc, #4	@ (adr r1, 801c908 <_printf_i+0x40>)
 801c904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c908:	0801c961 	.word	0x0801c961
 801c90c:	0801c975 	.word	0x0801c975
 801c910:	0801c8f1 	.word	0x0801c8f1
 801c914:	0801c8f1 	.word	0x0801c8f1
 801c918:	0801c8f1 	.word	0x0801c8f1
 801c91c:	0801c8f1 	.word	0x0801c8f1
 801c920:	0801c975 	.word	0x0801c975
 801c924:	0801c8f1 	.word	0x0801c8f1
 801c928:	0801c8f1 	.word	0x0801c8f1
 801c92c:	0801c8f1 	.word	0x0801c8f1
 801c930:	0801c8f1 	.word	0x0801c8f1
 801c934:	0801ca73 	.word	0x0801ca73
 801c938:	0801c99f 	.word	0x0801c99f
 801c93c:	0801ca2d 	.word	0x0801ca2d
 801c940:	0801c8f1 	.word	0x0801c8f1
 801c944:	0801c8f1 	.word	0x0801c8f1
 801c948:	0801ca95 	.word	0x0801ca95
 801c94c:	0801c8f1 	.word	0x0801c8f1
 801c950:	0801c99f 	.word	0x0801c99f
 801c954:	0801c8f1 	.word	0x0801c8f1
 801c958:	0801c8f1 	.word	0x0801c8f1
 801c95c:	0801ca35 	.word	0x0801ca35
 801c960:	6833      	ldr	r3, [r6, #0]
 801c962:	1d1a      	adds	r2, r3, #4
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	6032      	str	r2, [r6, #0]
 801c968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c96c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c970:	2301      	movs	r3, #1
 801c972:	e09c      	b.n	801caae <_printf_i+0x1e6>
 801c974:	6833      	ldr	r3, [r6, #0]
 801c976:	6820      	ldr	r0, [r4, #0]
 801c978:	1d19      	adds	r1, r3, #4
 801c97a:	6031      	str	r1, [r6, #0]
 801c97c:	0606      	lsls	r6, r0, #24
 801c97e:	d501      	bpl.n	801c984 <_printf_i+0xbc>
 801c980:	681d      	ldr	r5, [r3, #0]
 801c982:	e003      	b.n	801c98c <_printf_i+0xc4>
 801c984:	0645      	lsls	r5, r0, #25
 801c986:	d5fb      	bpl.n	801c980 <_printf_i+0xb8>
 801c988:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c98c:	2d00      	cmp	r5, #0
 801c98e:	da03      	bge.n	801c998 <_printf_i+0xd0>
 801c990:	232d      	movs	r3, #45	@ 0x2d
 801c992:	426d      	negs	r5, r5
 801c994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c998:	4858      	ldr	r0, [pc, #352]	@ (801cafc <_printf_i+0x234>)
 801c99a:	230a      	movs	r3, #10
 801c99c:	e011      	b.n	801c9c2 <_printf_i+0xfa>
 801c99e:	6821      	ldr	r1, [r4, #0]
 801c9a0:	6833      	ldr	r3, [r6, #0]
 801c9a2:	0608      	lsls	r0, r1, #24
 801c9a4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c9a8:	d402      	bmi.n	801c9b0 <_printf_i+0xe8>
 801c9aa:	0649      	lsls	r1, r1, #25
 801c9ac:	bf48      	it	mi
 801c9ae:	b2ad      	uxthmi	r5, r5
 801c9b0:	2f6f      	cmp	r7, #111	@ 0x6f
 801c9b2:	4852      	ldr	r0, [pc, #328]	@ (801cafc <_printf_i+0x234>)
 801c9b4:	6033      	str	r3, [r6, #0]
 801c9b6:	bf14      	ite	ne
 801c9b8:	230a      	movne	r3, #10
 801c9ba:	2308      	moveq	r3, #8
 801c9bc:	2100      	movs	r1, #0
 801c9be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c9c2:	6866      	ldr	r6, [r4, #4]
 801c9c4:	60a6      	str	r6, [r4, #8]
 801c9c6:	2e00      	cmp	r6, #0
 801c9c8:	db05      	blt.n	801c9d6 <_printf_i+0x10e>
 801c9ca:	6821      	ldr	r1, [r4, #0]
 801c9cc:	432e      	orrs	r6, r5
 801c9ce:	f021 0104 	bic.w	r1, r1, #4
 801c9d2:	6021      	str	r1, [r4, #0]
 801c9d4:	d04b      	beq.n	801ca6e <_printf_i+0x1a6>
 801c9d6:	4616      	mov	r6, r2
 801c9d8:	fbb5 f1f3 	udiv	r1, r5, r3
 801c9dc:	fb03 5711 	mls	r7, r3, r1, r5
 801c9e0:	5dc7      	ldrb	r7, [r0, r7]
 801c9e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c9e6:	462f      	mov	r7, r5
 801c9e8:	42bb      	cmp	r3, r7
 801c9ea:	460d      	mov	r5, r1
 801c9ec:	d9f4      	bls.n	801c9d8 <_printf_i+0x110>
 801c9ee:	2b08      	cmp	r3, #8
 801c9f0:	d10b      	bne.n	801ca0a <_printf_i+0x142>
 801c9f2:	6823      	ldr	r3, [r4, #0]
 801c9f4:	07df      	lsls	r7, r3, #31
 801c9f6:	d508      	bpl.n	801ca0a <_printf_i+0x142>
 801c9f8:	6923      	ldr	r3, [r4, #16]
 801c9fa:	6861      	ldr	r1, [r4, #4]
 801c9fc:	4299      	cmp	r1, r3
 801c9fe:	bfde      	ittt	le
 801ca00:	2330      	movle	r3, #48	@ 0x30
 801ca02:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ca06:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ca0a:	1b92      	subs	r2, r2, r6
 801ca0c:	6122      	str	r2, [r4, #16]
 801ca0e:	f8cd a000 	str.w	sl, [sp]
 801ca12:	464b      	mov	r3, r9
 801ca14:	aa03      	add	r2, sp, #12
 801ca16:	4621      	mov	r1, r4
 801ca18:	4640      	mov	r0, r8
 801ca1a:	f7ff fee7 	bl	801c7ec <_printf_common>
 801ca1e:	3001      	adds	r0, #1
 801ca20:	d14a      	bne.n	801cab8 <_printf_i+0x1f0>
 801ca22:	f04f 30ff 	mov.w	r0, #4294967295
 801ca26:	b004      	add	sp, #16
 801ca28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca2c:	6823      	ldr	r3, [r4, #0]
 801ca2e:	f043 0320 	orr.w	r3, r3, #32
 801ca32:	6023      	str	r3, [r4, #0]
 801ca34:	4832      	ldr	r0, [pc, #200]	@ (801cb00 <_printf_i+0x238>)
 801ca36:	2778      	movs	r7, #120	@ 0x78
 801ca38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ca3c:	6823      	ldr	r3, [r4, #0]
 801ca3e:	6831      	ldr	r1, [r6, #0]
 801ca40:	061f      	lsls	r7, r3, #24
 801ca42:	f851 5b04 	ldr.w	r5, [r1], #4
 801ca46:	d402      	bmi.n	801ca4e <_printf_i+0x186>
 801ca48:	065f      	lsls	r7, r3, #25
 801ca4a:	bf48      	it	mi
 801ca4c:	b2ad      	uxthmi	r5, r5
 801ca4e:	6031      	str	r1, [r6, #0]
 801ca50:	07d9      	lsls	r1, r3, #31
 801ca52:	bf44      	itt	mi
 801ca54:	f043 0320 	orrmi.w	r3, r3, #32
 801ca58:	6023      	strmi	r3, [r4, #0]
 801ca5a:	b11d      	cbz	r5, 801ca64 <_printf_i+0x19c>
 801ca5c:	2310      	movs	r3, #16
 801ca5e:	e7ad      	b.n	801c9bc <_printf_i+0xf4>
 801ca60:	4826      	ldr	r0, [pc, #152]	@ (801cafc <_printf_i+0x234>)
 801ca62:	e7e9      	b.n	801ca38 <_printf_i+0x170>
 801ca64:	6823      	ldr	r3, [r4, #0]
 801ca66:	f023 0320 	bic.w	r3, r3, #32
 801ca6a:	6023      	str	r3, [r4, #0]
 801ca6c:	e7f6      	b.n	801ca5c <_printf_i+0x194>
 801ca6e:	4616      	mov	r6, r2
 801ca70:	e7bd      	b.n	801c9ee <_printf_i+0x126>
 801ca72:	6833      	ldr	r3, [r6, #0]
 801ca74:	6825      	ldr	r5, [r4, #0]
 801ca76:	6961      	ldr	r1, [r4, #20]
 801ca78:	1d18      	adds	r0, r3, #4
 801ca7a:	6030      	str	r0, [r6, #0]
 801ca7c:	062e      	lsls	r6, r5, #24
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	d501      	bpl.n	801ca86 <_printf_i+0x1be>
 801ca82:	6019      	str	r1, [r3, #0]
 801ca84:	e002      	b.n	801ca8c <_printf_i+0x1c4>
 801ca86:	0668      	lsls	r0, r5, #25
 801ca88:	d5fb      	bpl.n	801ca82 <_printf_i+0x1ba>
 801ca8a:	8019      	strh	r1, [r3, #0]
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	6123      	str	r3, [r4, #16]
 801ca90:	4616      	mov	r6, r2
 801ca92:	e7bc      	b.n	801ca0e <_printf_i+0x146>
 801ca94:	6833      	ldr	r3, [r6, #0]
 801ca96:	1d1a      	adds	r2, r3, #4
 801ca98:	6032      	str	r2, [r6, #0]
 801ca9a:	681e      	ldr	r6, [r3, #0]
 801ca9c:	6862      	ldr	r2, [r4, #4]
 801ca9e:	2100      	movs	r1, #0
 801caa0:	4630      	mov	r0, r6
 801caa2:	f7e3 fb95 	bl	80001d0 <memchr>
 801caa6:	b108      	cbz	r0, 801caac <_printf_i+0x1e4>
 801caa8:	1b80      	subs	r0, r0, r6
 801caaa:	6060      	str	r0, [r4, #4]
 801caac:	6863      	ldr	r3, [r4, #4]
 801caae:	6123      	str	r3, [r4, #16]
 801cab0:	2300      	movs	r3, #0
 801cab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cab6:	e7aa      	b.n	801ca0e <_printf_i+0x146>
 801cab8:	6923      	ldr	r3, [r4, #16]
 801caba:	4632      	mov	r2, r6
 801cabc:	4649      	mov	r1, r9
 801cabe:	4640      	mov	r0, r8
 801cac0:	47d0      	blx	sl
 801cac2:	3001      	adds	r0, #1
 801cac4:	d0ad      	beq.n	801ca22 <_printf_i+0x15a>
 801cac6:	6823      	ldr	r3, [r4, #0]
 801cac8:	079b      	lsls	r3, r3, #30
 801caca:	d413      	bmi.n	801caf4 <_printf_i+0x22c>
 801cacc:	68e0      	ldr	r0, [r4, #12]
 801cace:	9b03      	ldr	r3, [sp, #12]
 801cad0:	4298      	cmp	r0, r3
 801cad2:	bfb8      	it	lt
 801cad4:	4618      	movlt	r0, r3
 801cad6:	e7a6      	b.n	801ca26 <_printf_i+0x15e>
 801cad8:	2301      	movs	r3, #1
 801cada:	4632      	mov	r2, r6
 801cadc:	4649      	mov	r1, r9
 801cade:	4640      	mov	r0, r8
 801cae0:	47d0      	blx	sl
 801cae2:	3001      	adds	r0, #1
 801cae4:	d09d      	beq.n	801ca22 <_printf_i+0x15a>
 801cae6:	3501      	adds	r5, #1
 801cae8:	68e3      	ldr	r3, [r4, #12]
 801caea:	9903      	ldr	r1, [sp, #12]
 801caec:	1a5b      	subs	r3, r3, r1
 801caee:	42ab      	cmp	r3, r5
 801caf0:	dcf2      	bgt.n	801cad8 <_printf_i+0x210>
 801caf2:	e7eb      	b.n	801cacc <_printf_i+0x204>
 801caf4:	2500      	movs	r5, #0
 801caf6:	f104 0619 	add.w	r6, r4, #25
 801cafa:	e7f5      	b.n	801cae8 <_printf_i+0x220>
 801cafc:	08020222 	.word	0x08020222
 801cb00:	08020233 	.word	0x08020233

0801cb04 <__sflush_r>:
 801cb04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb0c:	0716      	lsls	r6, r2, #28
 801cb0e:	4605      	mov	r5, r0
 801cb10:	460c      	mov	r4, r1
 801cb12:	d454      	bmi.n	801cbbe <__sflush_r+0xba>
 801cb14:	684b      	ldr	r3, [r1, #4]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	dc02      	bgt.n	801cb20 <__sflush_r+0x1c>
 801cb1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	dd48      	ble.n	801cbb2 <__sflush_r+0xae>
 801cb20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cb22:	2e00      	cmp	r6, #0
 801cb24:	d045      	beq.n	801cbb2 <__sflush_r+0xae>
 801cb26:	2300      	movs	r3, #0
 801cb28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cb2c:	682f      	ldr	r7, [r5, #0]
 801cb2e:	6a21      	ldr	r1, [r4, #32]
 801cb30:	602b      	str	r3, [r5, #0]
 801cb32:	d030      	beq.n	801cb96 <__sflush_r+0x92>
 801cb34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cb36:	89a3      	ldrh	r3, [r4, #12]
 801cb38:	0759      	lsls	r1, r3, #29
 801cb3a:	d505      	bpl.n	801cb48 <__sflush_r+0x44>
 801cb3c:	6863      	ldr	r3, [r4, #4]
 801cb3e:	1ad2      	subs	r2, r2, r3
 801cb40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cb42:	b10b      	cbz	r3, 801cb48 <__sflush_r+0x44>
 801cb44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cb46:	1ad2      	subs	r2, r2, r3
 801cb48:	2300      	movs	r3, #0
 801cb4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cb4c:	6a21      	ldr	r1, [r4, #32]
 801cb4e:	4628      	mov	r0, r5
 801cb50:	47b0      	blx	r6
 801cb52:	1c43      	adds	r3, r0, #1
 801cb54:	89a3      	ldrh	r3, [r4, #12]
 801cb56:	d106      	bne.n	801cb66 <__sflush_r+0x62>
 801cb58:	6829      	ldr	r1, [r5, #0]
 801cb5a:	291d      	cmp	r1, #29
 801cb5c:	d82b      	bhi.n	801cbb6 <__sflush_r+0xb2>
 801cb5e:	4a2a      	ldr	r2, [pc, #168]	@ (801cc08 <__sflush_r+0x104>)
 801cb60:	40ca      	lsrs	r2, r1
 801cb62:	07d6      	lsls	r6, r2, #31
 801cb64:	d527      	bpl.n	801cbb6 <__sflush_r+0xb2>
 801cb66:	2200      	movs	r2, #0
 801cb68:	6062      	str	r2, [r4, #4]
 801cb6a:	04d9      	lsls	r1, r3, #19
 801cb6c:	6922      	ldr	r2, [r4, #16]
 801cb6e:	6022      	str	r2, [r4, #0]
 801cb70:	d504      	bpl.n	801cb7c <__sflush_r+0x78>
 801cb72:	1c42      	adds	r2, r0, #1
 801cb74:	d101      	bne.n	801cb7a <__sflush_r+0x76>
 801cb76:	682b      	ldr	r3, [r5, #0]
 801cb78:	b903      	cbnz	r3, 801cb7c <__sflush_r+0x78>
 801cb7a:	6560      	str	r0, [r4, #84]	@ 0x54
 801cb7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cb7e:	602f      	str	r7, [r5, #0]
 801cb80:	b1b9      	cbz	r1, 801cbb2 <__sflush_r+0xae>
 801cb82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cb86:	4299      	cmp	r1, r3
 801cb88:	d002      	beq.n	801cb90 <__sflush_r+0x8c>
 801cb8a:	4628      	mov	r0, r5
 801cb8c:	f001 f984 	bl	801de98 <_free_r>
 801cb90:	2300      	movs	r3, #0
 801cb92:	6363      	str	r3, [r4, #52]	@ 0x34
 801cb94:	e00d      	b.n	801cbb2 <__sflush_r+0xae>
 801cb96:	2301      	movs	r3, #1
 801cb98:	4628      	mov	r0, r5
 801cb9a:	47b0      	blx	r6
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	1c50      	adds	r0, r2, #1
 801cba0:	d1c9      	bne.n	801cb36 <__sflush_r+0x32>
 801cba2:	682b      	ldr	r3, [r5, #0]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d0c6      	beq.n	801cb36 <__sflush_r+0x32>
 801cba8:	2b1d      	cmp	r3, #29
 801cbaa:	d001      	beq.n	801cbb0 <__sflush_r+0xac>
 801cbac:	2b16      	cmp	r3, #22
 801cbae:	d11e      	bne.n	801cbee <__sflush_r+0xea>
 801cbb0:	602f      	str	r7, [r5, #0]
 801cbb2:	2000      	movs	r0, #0
 801cbb4:	e022      	b.n	801cbfc <__sflush_r+0xf8>
 801cbb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbba:	b21b      	sxth	r3, r3
 801cbbc:	e01b      	b.n	801cbf6 <__sflush_r+0xf2>
 801cbbe:	690f      	ldr	r7, [r1, #16]
 801cbc0:	2f00      	cmp	r7, #0
 801cbc2:	d0f6      	beq.n	801cbb2 <__sflush_r+0xae>
 801cbc4:	0793      	lsls	r3, r2, #30
 801cbc6:	680e      	ldr	r6, [r1, #0]
 801cbc8:	bf08      	it	eq
 801cbca:	694b      	ldreq	r3, [r1, #20]
 801cbcc:	600f      	str	r7, [r1, #0]
 801cbce:	bf18      	it	ne
 801cbd0:	2300      	movne	r3, #0
 801cbd2:	eba6 0807 	sub.w	r8, r6, r7
 801cbd6:	608b      	str	r3, [r1, #8]
 801cbd8:	f1b8 0f00 	cmp.w	r8, #0
 801cbdc:	dde9      	ble.n	801cbb2 <__sflush_r+0xae>
 801cbde:	6a21      	ldr	r1, [r4, #32]
 801cbe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cbe2:	4643      	mov	r3, r8
 801cbe4:	463a      	mov	r2, r7
 801cbe6:	4628      	mov	r0, r5
 801cbe8:	47b0      	blx	r6
 801cbea:	2800      	cmp	r0, #0
 801cbec:	dc08      	bgt.n	801cc00 <__sflush_r+0xfc>
 801cbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbf6:	81a3      	strh	r3, [r4, #12]
 801cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 801cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc00:	4407      	add	r7, r0
 801cc02:	eba8 0800 	sub.w	r8, r8, r0
 801cc06:	e7e7      	b.n	801cbd8 <__sflush_r+0xd4>
 801cc08:	20400001 	.word	0x20400001

0801cc0c <_fflush_r>:
 801cc0c:	b538      	push	{r3, r4, r5, lr}
 801cc0e:	690b      	ldr	r3, [r1, #16]
 801cc10:	4605      	mov	r5, r0
 801cc12:	460c      	mov	r4, r1
 801cc14:	b913      	cbnz	r3, 801cc1c <_fflush_r+0x10>
 801cc16:	2500      	movs	r5, #0
 801cc18:	4628      	mov	r0, r5
 801cc1a:	bd38      	pop	{r3, r4, r5, pc}
 801cc1c:	b118      	cbz	r0, 801cc26 <_fflush_r+0x1a>
 801cc1e:	6a03      	ldr	r3, [r0, #32]
 801cc20:	b90b      	cbnz	r3, 801cc26 <_fflush_r+0x1a>
 801cc22:	f000 f8bb 	bl	801cd9c <__sinit>
 801cc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d0f3      	beq.n	801cc16 <_fflush_r+0xa>
 801cc2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cc30:	07d0      	lsls	r0, r2, #31
 801cc32:	d404      	bmi.n	801cc3e <_fflush_r+0x32>
 801cc34:	0599      	lsls	r1, r3, #22
 801cc36:	d402      	bmi.n	801cc3e <_fflush_r+0x32>
 801cc38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc3a:	f000 fac2 	bl	801d1c2 <__retarget_lock_acquire_recursive>
 801cc3e:	4628      	mov	r0, r5
 801cc40:	4621      	mov	r1, r4
 801cc42:	f7ff ff5f 	bl	801cb04 <__sflush_r>
 801cc46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cc48:	07da      	lsls	r2, r3, #31
 801cc4a:	4605      	mov	r5, r0
 801cc4c:	d4e4      	bmi.n	801cc18 <_fflush_r+0xc>
 801cc4e:	89a3      	ldrh	r3, [r4, #12]
 801cc50:	059b      	lsls	r3, r3, #22
 801cc52:	d4e1      	bmi.n	801cc18 <_fflush_r+0xc>
 801cc54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc56:	f000 fab5 	bl	801d1c4 <__retarget_lock_release_recursive>
 801cc5a:	e7dd      	b.n	801cc18 <_fflush_r+0xc>

0801cc5c <fflush>:
 801cc5c:	4601      	mov	r1, r0
 801cc5e:	b920      	cbnz	r0, 801cc6a <fflush+0xe>
 801cc60:	4a04      	ldr	r2, [pc, #16]	@ (801cc74 <fflush+0x18>)
 801cc62:	4905      	ldr	r1, [pc, #20]	@ (801cc78 <fflush+0x1c>)
 801cc64:	4805      	ldr	r0, [pc, #20]	@ (801cc7c <fflush+0x20>)
 801cc66:	f000 b8b1 	b.w	801cdcc <_fwalk_sglue>
 801cc6a:	4b05      	ldr	r3, [pc, #20]	@ (801cc80 <fflush+0x24>)
 801cc6c:	6818      	ldr	r0, [r3, #0]
 801cc6e:	f7ff bfcd 	b.w	801cc0c <_fflush_r>
 801cc72:	bf00      	nop
 801cc74:	20000020 	.word	0x20000020
 801cc78:	0801cc0d 	.word	0x0801cc0d
 801cc7c:	20000030 	.word	0x20000030
 801cc80:	2000002c 	.word	0x2000002c

0801cc84 <std>:
 801cc84:	2300      	movs	r3, #0
 801cc86:	b510      	push	{r4, lr}
 801cc88:	4604      	mov	r4, r0
 801cc8a:	e9c0 3300 	strd	r3, r3, [r0]
 801cc8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cc92:	6083      	str	r3, [r0, #8]
 801cc94:	8181      	strh	r1, [r0, #12]
 801cc96:	6643      	str	r3, [r0, #100]	@ 0x64
 801cc98:	81c2      	strh	r2, [r0, #14]
 801cc9a:	6183      	str	r3, [r0, #24]
 801cc9c:	4619      	mov	r1, r3
 801cc9e:	2208      	movs	r2, #8
 801cca0:	305c      	adds	r0, #92	@ 0x5c
 801cca2:	f000 fa11 	bl	801d0c8 <memset>
 801cca6:	4b0d      	ldr	r3, [pc, #52]	@ (801ccdc <std+0x58>)
 801cca8:	6263      	str	r3, [r4, #36]	@ 0x24
 801ccaa:	4b0d      	ldr	r3, [pc, #52]	@ (801cce0 <std+0x5c>)
 801ccac:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ccae:	4b0d      	ldr	r3, [pc, #52]	@ (801cce4 <std+0x60>)
 801ccb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ccb2:	4b0d      	ldr	r3, [pc, #52]	@ (801cce8 <std+0x64>)
 801ccb4:	6323      	str	r3, [r4, #48]	@ 0x30
 801ccb6:	4b0d      	ldr	r3, [pc, #52]	@ (801ccec <std+0x68>)
 801ccb8:	6224      	str	r4, [r4, #32]
 801ccba:	429c      	cmp	r4, r3
 801ccbc:	d006      	beq.n	801cccc <std+0x48>
 801ccbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ccc2:	4294      	cmp	r4, r2
 801ccc4:	d002      	beq.n	801cccc <std+0x48>
 801ccc6:	33d0      	adds	r3, #208	@ 0xd0
 801ccc8:	429c      	cmp	r4, r3
 801ccca:	d105      	bne.n	801ccd8 <std+0x54>
 801cccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ccd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccd4:	f000 ba74 	b.w	801d1c0 <__retarget_lock_init_recursive>
 801ccd8:	bd10      	pop	{r4, pc}
 801ccda:	bf00      	nop
 801ccdc:	0801cef9 	.word	0x0801cef9
 801cce0:	0801cf1b 	.word	0x0801cf1b
 801cce4:	0801cf53 	.word	0x0801cf53
 801cce8:	0801cf77 	.word	0x0801cf77
 801ccec:	200017c0 	.word	0x200017c0

0801ccf0 <stdio_exit_handler>:
 801ccf0:	4a02      	ldr	r2, [pc, #8]	@ (801ccfc <stdio_exit_handler+0xc>)
 801ccf2:	4903      	ldr	r1, [pc, #12]	@ (801cd00 <stdio_exit_handler+0x10>)
 801ccf4:	4803      	ldr	r0, [pc, #12]	@ (801cd04 <stdio_exit_handler+0x14>)
 801ccf6:	f000 b869 	b.w	801cdcc <_fwalk_sglue>
 801ccfa:	bf00      	nop
 801ccfc:	20000020 	.word	0x20000020
 801cd00:	0801cc0d 	.word	0x0801cc0d
 801cd04:	20000030 	.word	0x20000030

0801cd08 <cleanup_stdio>:
 801cd08:	6841      	ldr	r1, [r0, #4]
 801cd0a:	4b0c      	ldr	r3, [pc, #48]	@ (801cd3c <cleanup_stdio+0x34>)
 801cd0c:	4299      	cmp	r1, r3
 801cd0e:	b510      	push	{r4, lr}
 801cd10:	4604      	mov	r4, r0
 801cd12:	d001      	beq.n	801cd18 <cleanup_stdio+0x10>
 801cd14:	f7ff ff7a 	bl	801cc0c <_fflush_r>
 801cd18:	68a1      	ldr	r1, [r4, #8]
 801cd1a:	4b09      	ldr	r3, [pc, #36]	@ (801cd40 <cleanup_stdio+0x38>)
 801cd1c:	4299      	cmp	r1, r3
 801cd1e:	d002      	beq.n	801cd26 <cleanup_stdio+0x1e>
 801cd20:	4620      	mov	r0, r4
 801cd22:	f7ff ff73 	bl	801cc0c <_fflush_r>
 801cd26:	68e1      	ldr	r1, [r4, #12]
 801cd28:	4b06      	ldr	r3, [pc, #24]	@ (801cd44 <cleanup_stdio+0x3c>)
 801cd2a:	4299      	cmp	r1, r3
 801cd2c:	d004      	beq.n	801cd38 <cleanup_stdio+0x30>
 801cd2e:	4620      	mov	r0, r4
 801cd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd34:	f7ff bf6a 	b.w	801cc0c <_fflush_r>
 801cd38:	bd10      	pop	{r4, pc}
 801cd3a:	bf00      	nop
 801cd3c:	200017c0 	.word	0x200017c0
 801cd40:	20001828 	.word	0x20001828
 801cd44:	20001890 	.word	0x20001890

0801cd48 <global_stdio_init.part.0>:
 801cd48:	b510      	push	{r4, lr}
 801cd4a:	4b0b      	ldr	r3, [pc, #44]	@ (801cd78 <global_stdio_init.part.0+0x30>)
 801cd4c:	4c0b      	ldr	r4, [pc, #44]	@ (801cd7c <global_stdio_init.part.0+0x34>)
 801cd4e:	4a0c      	ldr	r2, [pc, #48]	@ (801cd80 <global_stdio_init.part.0+0x38>)
 801cd50:	601a      	str	r2, [r3, #0]
 801cd52:	4620      	mov	r0, r4
 801cd54:	2200      	movs	r2, #0
 801cd56:	2104      	movs	r1, #4
 801cd58:	f7ff ff94 	bl	801cc84 <std>
 801cd5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cd60:	2201      	movs	r2, #1
 801cd62:	2109      	movs	r1, #9
 801cd64:	f7ff ff8e 	bl	801cc84 <std>
 801cd68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cd6c:	2202      	movs	r2, #2
 801cd6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd72:	2112      	movs	r1, #18
 801cd74:	f7ff bf86 	b.w	801cc84 <std>
 801cd78:	200018f8 	.word	0x200018f8
 801cd7c:	200017c0 	.word	0x200017c0
 801cd80:	0801ccf1 	.word	0x0801ccf1

0801cd84 <__sfp_lock_acquire>:
 801cd84:	4801      	ldr	r0, [pc, #4]	@ (801cd8c <__sfp_lock_acquire+0x8>)
 801cd86:	f000 ba1c 	b.w	801d1c2 <__retarget_lock_acquire_recursive>
 801cd8a:	bf00      	nop
 801cd8c:	20001901 	.word	0x20001901

0801cd90 <__sfp_lock_release>:
 801cd90:	4801      	ldr	r0, [pc, #4]	@ (801cd98 <__sfp_lock_release+0x8>)
 801cd92:	f000 ba17 	b.w	801d1c4 <__retarget_lock_release_recursive>
 801cd96:	bf00      	nop
 801cd98:	20001901 	.word	0x20001901

0801cd9c <__sinit>:
 801cd9c:	b510      	push	{r4, lr}
 801cd9e:	4604      	mov	r4, r0
 801cda0:	f7ff fff0 	bl	801cd84 <__sfp_lock_acquire>
 801cda4:	6a23      	ldr	r3, [r4, #32]
 801cda6:	b11b      	cbz	r3, 801cdb0 <__sinit+0x14>
 801cda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdac:	f7ff bff0 	b.w	801cd90 <__sfp_lock_release>
 801cdb0:	4b04      	ldr	r3, [pc, #16]	@ (801cdc4 <__sinit+0x28>)
 801cdb2:	6223      	str	r3, [r4, #32]
 801cdb4:	4b04      	ldr	r3, [pc, #16]	@ (801cdc8 <__sinit+0x2c>)
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d1f5      	bne.n	801cda8 <__sinit+0xc>
 801cdbc:	f7ff ffc4 	bl	801cd48 <global_stdio_init.part.0>
 801cdc0:	e7f2      	b.n	801cda8 <__sinit+0xc>
 801cdc2:	bf00      	nop
 801cdc4:	0801cd09 	.word	0x0801cd09
 801cdc8:	200018f8 	.word	0x200018f8

0801cdcc <_fwalk_sglue>:
 801cdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdd0:	4607      	mov	r7, r0
 801cdd2:	4688      	mov	r8, r1
 801cdd4:	4614      	mov	r4, r2
 801cdd6:	2600      	movs	r6, #0
 801cdd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cddc:	f1b9 0901 	subs.w	r9, r9, #1
 801cde0:	d505      	bpl.n	801cdee <_fwalk_sglue+0x22>
 801cde2:	6824      	ldr	r4, [r4, #0]
 801cde4:	2c00      	cmp	r4, #0
 801cde6:	d1f7      	bne.n	801cdd8 <_fwalk_sglue+0xc>
 801cde8:	4630      	mov	r0, r6
 801cdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdee:	89ab      	ldrh	r3, [r5, #12]
 801cdf0:	2b01      	cmp	r3, #1
 801cdf2:	d907      	bls.n	801ce04 <_fwalk_sglue+0x38>
 801cdf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cdf8:	3301      	adds	r3, #1
 801cdfa:	d003      	beq.n	801ce04 <_fwalk_sglue+0x38>
 801cdfc:	4629      	mov	r1, r5
 801cdfe:	4638      	mov	r0, r7
 801ce00:	47c0      	blx	r8
 801ce02:	4306      	orrs	r6, r0
 801ce04:	3568      	adds	r5, #104	@ 0x68
 801ce06:	e7e9      	b.n	801cddc <_fwalk_sglue+0x10>

0801ce08 <iprintf>:
 801ce08:	b40f      	push	{r0, r1, r2, r3}
 801ce0a:	b507      	push	{r0, r1, r2, lr}
 801ce0c:	4906      	ldr	r1, [pc, #24]	@ (801ce28 <iprintf+0x20>)
 801ce0e:	ab04      	add	r3, sp, #16
 801ce10:	6808      	ldr	r0, [r1, #0]
 801ce12:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce16:	6881      	ldr	r1, [r0, #8]
 801ce18:	9301      	str	r3, [sp, #4]
 801ce1a:	f001 fce1 	bl	801e7e0 <_vfiprintf_r>
 801ce1e:	b003      	add	sp, #12
 801ce20:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce24:	b004      	add	sp, #16
 801ce26:	4770      	bx	lr
 801ce28:	2000002c 	.word	0x2000002c

0801ce2c <putchar>:
 801ce2c:	4b02      	ldr	r3, [pc, #8]	@ (801ce38 <putchar+0xc>)
 801ce2e:	4601      	mov	r1, r0
 801ce30:	6818      	ldr	r0, [r3, #0]
 801ce32:	6882      	ldr	r2, [r0, #8]
 801ce34:	f001 be4e 	b.w	801ead4 <_putc_r>
 801ce38:	2000002c 	.word	0x2000002c

0801ce3c <_puts_r>:
 801ce3c:	6a03      	ldr	r3, [r0, #32]
 801ce3e:	b570      	push	{r4, r5, r6, lr}
 801ce40:	6884      	ldr	r4, [r0, #8]
 801ce42:	4605      	mov	r5, r0
 801ce44:	460e      	mov	r6, r1
 801ce46:	b90b      	cbnz	r3, 801ce4c <_puts_r+0x10>
 801ce48:	f7ff ffa8 	bl	801cd9c <__sinit>
 801ce4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce4e:	07db      	lsls	r3, r3, #31
 801ce50:	d405      	bmi.n	801ce5e <_puts_r+0x22>
 801ce52:	89a3      	ldrh	r3, [r4, #12]
 801ce54:	0598      	lsls	r0, r3, #22
 801ce56:	d402      	bmi.n	801ce5e <_puts_r+0x22>
 801ce58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce5a:	f000 f9b2 	bl	801d1c2 <__retarget_lock_acquire_recursive>
 801ce5e:	89a3      	ldrh	r3, [r4, #12]
 801ce60:	0719      	lsls	r1, r3, #28
 801ce62:	d502      	bpl.n	801ce6a <_puts_r+0x2e>
 801ce64:	6923      	ldr	r3, [r4, #16]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d135      	bne.n	801ced6 <_puts_r+0x9a>
 801ce6a:	4621      	mov	r1, r4
 801ce6c:	4628      	mov	r0, r5
 801ce6e:	f000 f8c5 	bl	801cffc <__swsetup_r>
 801ce72:	b380      	cbz	r0, 801ced6 <_puts_r+0x9a>
 801ce74:	f04f 35ff 	mov.w	r5, #4294967295
 801ce78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce7a:	07da      	lsls	r2, r3, #31
 801ce7c:	d405      	bmi.n	801ce8a <_puts_r+0x4e>
 801ce7e:	89a3      	ldrh	r3, [r4, #12]
 801ce80:	059b      	lsls	r3, r3, #22
 801ce82:	d402      	bmi.n	801ce8a <_puts_r+0x4e>
 801ce84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce86:	f000 f99d 	bl	801d1c4 <__retarget_lock_release_recursive>
 801ce8a:	4628      	mov	r0, r5
 801ce8c:	bd70      	pop	{r4, r5, r6, pc}
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	da04      	bge.n	801ce9c <_puts_r+0x60>
 801ce92:	69a2      	ldr	r2, [r4, #24]
 801ce94:	429a      	cmp	r2, r3
 801ce96:	dc17      	bgt.n	801cec8 <_puts_r+0x8c>
 801ce98:	290a      	cmp	r1, #10
 801ce9a:	d015      	beq.n	801cec8 <_puts_r+0x8c>
 801ce9c:	6823      	ldr	r3, [r4, #0]
 801ce9e:	1c5a      	adds	r2, r3, #1
 801cea0:	6022      	str	r2, [r4, #0]
 801cea2:	7019      	strb	r1, [r3, #0]
 801cea4:	68a3      	ldr	r3, [r4, #8]
 801cea6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ceaa:	3b01      	subs	r3, #1
 801ceac:	60a3      	str	r3, [r4, #8]
 801ceae:	2900      	cmp	r1, #0
 801ceb0:	d1ed      	bne.n	801ce8e <_puts_r+0x52>
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	da11      	bge.n	801ceda <_puts_r+0x9e>
 801ceb6:	4622      	mov	r2, r4
 801ceb8:	210a      	movs	r1, #10
 801ceba:	4628      	mov	r0, r5
 801cebc:	f000 f85f 	bl	801cf7e <__swbuf_r>
 801cec0:	3001      	adds	r0, #1
 801cec2:	d0d7      	beq.n	801ce74 <_puts_r+0x38>
 801cec4:	250a      	movs	r5, #10
 801cec6:	e7d7      	b.n	801ce78 <_puts_r+0x3c>
 801cec8:	4622      	mov	r2, r4
 801ceca:	4628      	mov	r0, r5
 801cecc:	f000 f857 	bl	801cf7e <__swbuf_r>
 801ced0:	3001      	adds	r0, #1
 801ced2:	d1e7      	bne.n	801cea4 <_puts_r+0x68>
 801ced4:	e7ce      	b.n	801ce74 <_puts_r+0x38>
 801ced6:	3e01      	subs	r6, #1
 801ced8:	e7e4      	b.n	801cea4 <_puts_r+0x68>
 801ceda:	6823      	ldr	r3, [r4, #0]
 801cedc:	1c5a      	adds	r2, r3, #1
 801cede:	6022      	str	r2, [r4, #0]
 801cee0:	220a      	movs	r2, #10
 801cee2:	701a      	strb	r2, [r3, #0]
 801cee4:	e7ee      	b.n	801cec4 <_puts_r+0x88>
	...

0801cee8 <puts>:
 801cee8:	4b02      	ldr	r3, [pc, #8]	@ (801cef4 <puts+0xc>)
 801ceea:	4601      	mov	r1, r0
 801ceec:	6818      	ldr	r0, [r3, #0]
 801ceee:	f7ff bfa5 	b.w	801ce3c <_puts_r>
 801cef2:	bf00      	nop
 801cef4:	2000002c 	.word	0x2000002c

0801cef8 <__sread>:
 801cef8:	b510      	push	{r4, lr}
 801cefa:	460c      	mov	r4, r1
 801cefc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf00:	f000 f910 	bl	801d124 <_read_r>
 801cf04:	2800      	cmp	r0, #0
 801cf06:	bfab      	itete	ge
 801cf08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cf0a:	89a3      	ldrhlt	r3, [r4, #12]
 801cf0c:	181b      	addge	r3, r3, r0
 801cf0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cf12:	bfac      	ite	ge
 801cf14:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cf16:	81a3      	strhlt	r3, [r4, #12]
 801cf18:	bd10      	pop	{r4, pc}

0801cf1a <__swrite>:
 801cf1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf1e:	461f      	mov	r7, r3
 801cf20:	898b      	ldrh	r3, [r1, #12]
 801cf22:	05db      	lsls	r3, r3, #23
 801cf24:	4605      	mov	r5, r0
 801cf26:	460c      	mov	r4, r1
 801cf28:	4616      	mov	r6, r2
 801cf2a:	d505      	bpl.n	801cf38 <__swrite+0x1e>
 801cf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf30:	2302      	movs	r3, #2
 801cf32:	2200      	movs	r2, #0
 801cf34:	f000 f8e4 	bl	801d100 <_lseek_r>
 801cf38:	89a3      	ldrh	r3, [r4, #12]
 801cf3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cf42:	81a3      	strh	r3, [r4, #12]
 801cf44:	4632      	mov	r2, r6
 801cf46:	463b      	mov	r3, r7
 801cf48:	4628      	mov	r0, r5
 801cf4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf4e:	f000 b8fb 	b.w	801d148 <_write_r>

0801cf52 <__sseek>:
 801cf52:	b510      	push	{r4, lr}
 801cf54:	460c      	mov	r4, r1
 801cf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf5a:	f000 f8d1 	bl	801d100 <_lseek_r>
 801cf5e:	1c43      	adds	r3, r0, #1
 801cf60:	89a3      	ldrh	r3, [r4, #12]
 801cf62:	bf15      	itete	ne
 801cf64:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cf66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cf6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cf6e:	81a3      	strheq	r3, [r4, #12]
 801cf70:	bf18      	it	ne
 801cf72:	81a3      	strhne	r3, [r4, #12]
 801cf74:	bd10      	pop	{r4, pc}

0801cf76 <__sclose>:
 801cf76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf7a:	f000 b8b1 	b.w	801d0e0 <_close_r>

0801cf7e <__swbuf_r>:
 801cf7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf80:	460e      	mov	r6, r1
 801cf82:	4614      	mov	r4, r2
 801cf84:	4605      	mov	r5, r0
 801cf86:	b118      	cbz	r0, 801cf90 <__swbuf_r+0x12>
 801cf88:	6a03      	ldr	r3, [r0, #32]
 801cf8a:	b90b      	cbnz	r3, 801cf90 <__swbuf_r+0x12>
 801cf8c:	f7ff ff06 	bl	801cd9c <__sinit>
 801cf90:	69a3      	ldr	r3, [r4, #24]
 801cf92:	60a3      	str	r3, [r4, #8]
 801cf94:	89a3      	ldrh	r3, [r4, #12]
 801cf96:	071a      	lsls	r2, r3, #28
 801cf98:	d501      	bpl.n	801cf9e <__swbuf_r+0x20>
 801cf9a:	6923      	ldr	r3, [r4, #16]
 801cf9c:	b943      	cbnz	r3, 801cfb0 <__swbuf_r+0x32>
 801cf9e:	4621      	mov	r1, r4
 801cfa0:	4628      	mov	r0, r5
 801cfa2:	f000 f82b 	bl	801cffc <__swsetup_r>
 801cfa6:	b118      	cbz	r0, 801cfb0 <__swbuf_r+0x32>
 801cfa8:	f04f 37ff 	mov.w	r7, #4294967295
 801cfac:	4638      	mov	r0, r7
 801cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfb0:	6823      	ldr	r3, [r4, #0]
 801cfb2:	6922      	ldr	r2, [r4, #16]
 801cfb4:	1a98      	subs	r0, r3, r2
 801cfb6:	6963      	ldr	r3, [r4, #20]
 801cfb8:	b2f6      	uxtb	r6, r6
 801cfba:	4283      	cmp	r3, r0
 801cfbc:	4637      	mov	r7, r6
 801cfbe:	dc05      	bgt.n	801cfcc <__swbuf_r+0x4e>
 801cfc0:	4621      	mov	r1, r4
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	f7ff fe22 	bl	801cc0c <_fflush_r>
 801cfc8:	2800      	cmp	r0, #0
 801cfca:	d1ed      	bne.n	801cfa8 <__swbuf_r+0x2a>
 801cfcc:	68a3      	ldr	r3, [r4, #8]
 801cfce:	3b01      	subs	r3, #1
 801cfd0:	60a3      	str	r3, [r4, #8]
 801cfd2:	6823      	ldr	r3, [r4, #0]
 801cfd4:	1c5a      	adds	r2, r3, #1
 801cfd6:	6022      	str	r2, [r4, #0]
 801cfd8:	701e      	strb	r6, [r3, #0]
 801cfda:	6962      	ldr	r2, [r4, #20]
 801cfdc:	1c43      	adds	r3, r0, #1
 801cfde:	429a      	cmp	r2, r3
 801cfe0:	d004      	beq.n	801cfec <__swbuf_r+0x6e>
 801cfe2:	89a3      	ldrh	r3, [r4, #12]
 801cfe4:	07db      	lsls	r3, r3, #31
 801cfe6:	d5e1      	bpl.n	801cfac <__swbuf_r+0x2e>
 801cfe8:	2e0a      	cmp	r6, #10
 801cfea:	d1df      	bne.n	801cfac <__swbuf_r+0x2e>
 801cfec:	4621      	mov	r1, r4
 801cfee:	4628      	mov	r0, r5
 801cff0:	f7ff fe0c 	bl	801cc0c <_fflush_r>
 801cff4:	2800      	cmp	r0, #0
 801cff6:	d0d9      	beq.n	801cfac <__swbuf_r+0x2e>
 801cff8:	e7d6      	b.n	801cfa8 <__swbuf_r+0x2a>
	...

0801cffc <__swsetup_r>:
 801cffc:	b538      	push	{r3, r4, r5, lr}
 801cffe:	4b29      	ldr	r3, [pc, #164]	@ (801d0a4 <__swsetup_r+0xa8>)
 801d000:	4605      	mov	r5, r0
 801d002:	6818      	ldr	r0, [r3, #0]
 801d004:	460c      	mov	r4, r1
 801d006:	b118      	cbz	r0, 801d010 <__swsetup_r+0x14>
 801d008:	6a03      	ldr	r3, [r0, #32]
 801d00a:	b90b      	cbnz	r3, 801d010 <__swsetup_r+0x14>
 801d00c:	f7ff fec6 	bl	801cd9c <__sinit>
 801d010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d014:	0719      	lsls	r1, r3, #28
 801d016:	d422      	bmi.n	801d05e <__swsetup_r+0x62>
 801d018:	06da      	lsls	r2, r3, #27
 801d01a:	d407      	bmi.n	801d02c <__swsetup_r+0x30>
 801d01c:	2209      	movs	r2, #9
 801d01e:	602a      	str	r2, [r5, #0]
 801d020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d024:	81a3      	strh	r3, [r4, #12]
 801d026:	f04f 30ff 	mov.w	r0, #4294967295
 801d02a:	e033      	b.n	801d094 <__swsetup_r+0x98>
 801d02c:	0758      	lsls	r0, r3, #29
 801d02e:	d512      	bpl.n	801d056 <__swsetup_r+0x5a>
 801d030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d032:	b141      	cbz	r1, 801d046 <__swsetup_r+0x4a>
 801d034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d038:	4299      	cmp	r1, r3
 801d03a:	d002      	beq.n	801d042 <__swsetup_r+0x46>
 801d03c:	4628      	mov	r0, r5
 801d03e:	f000 ff2b 	bl	801de98 <_free_r>
 801d042:	2300      	movs	r3, #0
 801d044:	6363      	str	r3, [r4, #52]	@ 0x34
 801d046:	89a3      	ldrh	r3, [r4, #12]
 801d048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d04c:	81a3      	strh	r3, [r4, #12]
 801d04e:	2300      	movs	r3, #0
 801d050:	6063      	str	r3, [r4, #4]
 801d052:	6923      	ldr	r3, [r4, #16]
 801d054:	6023      	str	r3, [r4, #0]
 801d056:	89a3      	ldrh	r3, [r4, #12]
 801d058:	f043 0308 	orr.w	r3, r3, #8
 801d05c:	81a3      	strh	r3, [r4, #12]
 801d05e:	6923      	ldr	r3, [r4, #16]
 801d060:	b94b      	cbnz	r3, 801d076 <__swsetup_r+0x7a>
 801d062:	89a3      	ldrh	r3, [r4, #12]
 801d064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d06c:	d003      	beq.n	801d076 <__swsetup_r+0x7a>
 801d06e:	4621      	mov	r1, r4
 801d070:	4628      	mov	r0, r5
 801d072:	f001 fcf3 	bl	801ea5c <__smakebuf_r>
 801d076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d07a:	f013 0201 	ands.w	r2, r3, #1
 801d07e:	d00a      	beq.n	801d096 <__swsetup_r+0x9a>
 801d080:	2200      	movs	r2, #0
 801d082:	60a2      	str	r2, [r4, #8]
 801d084:	6962      	ldr	r2, [r4, #20]
 801d086:	4252      	negs	r2, r2
 801d088:	61a2      	str	r2, [r4, #24]
 801d08a:	6922      	ldr	r2, [r4, #16]
 801d08c:	b942      	cbnz	r2, 801d0a0 <__swsetup_r+0xa4>
 801d08e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d092:	d1c5      	bne.n	801d020 <__swsetup_r+0x24>
 801d094:	bd38      	pop	{r3, r4, r5, pc}
 801d096:	0799      	lsls	r1, r3, #30
 801d098:	bf58      	it	pl
 801d09a:	6962      	ldrpl	r2, [r4, #20]
 801d09c:	60a2      	str	r2, [r4, #8]
 801d09e:	e7f4      	b.n	801d08a <__swsetup_r+0x8e>
 801d0a0:	2000      	movs	r0, #0
 801d0a2:	e7f7      	b.n	801d094 <__swsetup_r+0x98>
 801d0a4:	2000002c 	.word	0x2000002c

0801d0a8 <memcmp>:
 801d0a8:	b510      	push	{r4, lr}
 801d0aa:	3901      	subs	r1, #1
 801d0ac:	4402      	add	r2, r0
 801d0ae:	4290      	cmp	r0, r2
 801d0b0:	d101      	bne.n	801d0b6 <memcmp+0xe>
 801d0b2:	2000      	movs	r0, #0
 801d0b4:	e005      	b.n	801d0c2 <memcmp+0x1a>
 801d0b6:	7803      	ldrb	r3, [r0, #0]
 801d0b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d0bc:	42a3      	cmp	r3, r4
 801d0be:	d001      	beq.n	801d0c4 <memcmp+0x1c>
 801d0c0:	1b18      	subs	r0, r3, r4
 801d0c2:	bd10      	pop	{r4, pc}
 801d0c4:	3001      	adds	r0, #1
 801d0c6:	e7f2      	b.n	801d0ae <memcmp+0x6>

0801d0c8 <memset>:
 801d0c8:	4402      	add	r2, r0
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	4293      	cmp	r3, r2
 801d0ce:	d100      	bne.n	801d0d2 <memset+0xa>
 801d0d0:	4770      	bx	lr
 801d0d2:	f803 1b01 	strb.w	r1, [r3], #1
 801d0d6:	e7f9      	b.n	801d0cc <memset+0x4>

0801d0d8 <_localeconv_r>:
 801d0d8:	4800      	ldr	r0, [pc, #0]	@ (801d0dc <_localeconv_r+0x4>)
 801d0da:	4770      	bx	lr
 801d0dc:	2000016c 	.word	0x2000016c

0801d0e0 <_close_r>:
 801d0e0:	b538      	push	{r3, r4, r5, lr}
 801d0e2:	4d06      	ldr	r5, [pc, #24]	@ (801d0fc <_close_r+0x1c>)
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	4604      	mov	r4, r0
 801d0e8:	4608      	mov	r0, r1
 801d0ea:	602b      	str	r3, [r5, #0]
 801d0ec:	f7e4 fe80 	bl	8001df0 <_close>
 801d0f0:	1c43      	adds	r3, r0, #1
 801d0f2:	d102      	bne.n	801d0fa <_close_r+0x1a>
 801d0f4:	682b      	ldr	r3, [r5, #0]
 801d0f6:	b103      	cbz	r3, 801d0fa <_close_r+0x1a>
 801d0f8:	6023      	str	r3, [r4, #0]
 801d0fa:	bd38      	pop	{r3, r4, r5, pc}
 801d0fc:	200018fc 	.word	0x200018fc

0801d100 <_lseek_r>:
 801d100:	b538      	push	{r3, r4, r5, lr}
 801d102:	4d07      	ldr	r5, [pc, #28]	@ (801d120 <_lseek_r+0x20>)
 801d104:	4604      	mov	r4, r0
 801d106:	4608      	mov	r0, r1
 801d108:	4611      	mov	r1, r2
 801d10a:	2200      	movs	r2, #0
 801d10c:	602a      	str	r2, [r5, #0]
 801d10e:	461a      	mov	r2, r3
 801d110:	f7e4 fe95 	bl	8001e3e <_lseek>
 801d114:	1c43      	adds	r3, r0, #1
 801d116:	d102      	bne.n	801d11e <_lseek_r+0x1e>
 801d118:	682b      	ldr	r3, [r5, #0]
 801d11a:	b103      	cbz	r3, 801d11e <_lseek_r+0x1e>
 801d11c:	6023      	str	r3, [r4, #0]
 801d11e:	bd38      	pop	{r3, r4, r5, pc}
 801d120:	200018fc 	.word	0x200018fc

0801d124 <_read_r>:
 801d124:	b538      	push	{r3, r4, r5, lr}
 801d126:	4d07      	ldr	r5, [pc, #28]	@ (801d144 <_read_r+0x20>)
 801d128:	4604      	mov	r4, r0
 801d12a:	4608      	mov	r0, r1
 801d12c:	4611      	mov	r1, r2
 801d12e:	2200      	movs	r2, #0
 801d130:	602a      	str	r2, [r5, #0]
 801d132:	461a      	mov	r2, r3
 801d134:	f7e4 fe23 	bl	8001d7e <_read>
 801d138:	1c43      	adds	r3, r0, #1
 801d13a:	d102      	bne.n	801d142 <_read_r+0x1e>
 801d13c:	682b      	ldr	r3, [r5, #0]
 801d13e:	b103      	cbz	r3, 801d142 <_read_r+0x1e>
 801d140:	6023      	str	r3, [r4, #0]
 801d142:	bd38      	pop	{r3, r4, r5, pc}
 801d144:	200018fc 	.word	0x200018fc

0801d148 <_write_r>:
 801d148:	b538      	push	{r3, r4, r5, lr}
 801d14a:	4d07      	ldr	r5, [pc, #28]	@ (801d168 <_write_r+0x20>)
 801d14c:	4604      	mov	r4, r0
 801d14e:	4608      	mov	r0, r1
 801d150:	4611      	mov	r1, r2
 801d152:	2200      	movs	r2, #0
 801d154:	602a      	str	r2, [r5, #0]
 801d156:	461a      	mov	r2, r3
 801d158:	f7e4 fe2e 	bl	8001db8 <_write>
 801d15c:	1c43      	adds	r3, r0, #1
 801d15e:	d102      	bne.n	801d166 <_write_r+0x1e>
 801d160:	682b      	ldr	r3, [r5, #0]
 801d162:	b103      	cbz	r3, 801d166 <_write_r+0x1e>
 801d164:	6023      	str	r3, [r4, #0]
 801d166:	bd38      	pop	{r3, r4, r5, pc}
 801d168:	200018fc 	.word	0x200018fc

0801d16c <__errno>:
 801d16c:	4b01      	ldr	r3, [pc, #4]	@ (801d174 <__errno+0x8>)
 801d16e:	6818      	ldr	r0, [r3, #0]
 801d170:	4770      	bx	lr
 801d172:	bf00      	nop
 801d174:	2000002c 	.word	0x2000002c

0801d178 <__libc_init_array>:
 801d178:	b570      	push	{r4, r5, r6, lr}
 801d17a:	4d0d      	ldr	r5, [pc, #52]	@ (801d1b0 <__libc_init_array+0x38>)
 801d17c:	4c0d      	ldr	r4, [pc, #52]	@ (801d1b4 <__libc_init_array+0x3c>)
 801d17e:	1b64      	subs	r4, r4, r5
 801d180:	10a4      	asrs	r4, r4, #2
 801d182:	2600      	movs	r6, #0
 801d184:	42a6      	cmp	r6, r4
 801d186:	d109      	bne.n	801d19c <__libc_init_array+0x24>
 801d188:	4d0b      	ldr	r5, [pc, #44]	@ (801d1b8 <__libc_init_array+0x40>)
 801d18a:	4c0c      	ldr	r4, [pc, #48]	@ (801d1bc <__libc_init_array+0x44>)
 801d18c:	f001 fdb8 	bl	801ed00 <_init>
 801d190:	1b64      	subs	r4, r4, r5
 801d192:	10a4      	asrs	r4, r4, #2
 801d194:	2600      	movs	r6, #0
 801d196:	42a6      	cmp	r6, r4
 801d198:	d105      	bne.n	801d1a6 <__libc_init_array+0x2e>
 801d19a:	bd70      	pop	{r4, r5, r6, pc}
 801d19c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1a0:	4798      	blx	r3
 801d1a2:	3601      	adds	r6, #1
 801d1a4:	e7ee      	b.n	801d184 <__libc_init_array+0xc>
 801d1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1aa:	4798      	blx	r3
 801d1ac:	3601      	adds	r6, #1
 801d1ae:	e7f2      	b.n	801d196 <__libc_init_array+0x1e>
 801d1b0:	0802058c 	.word	0x0802058c
 801d1b4:	0802058c 	.word	0x0802058c
 801d1b8:	0802058c 	.word	0x0802058c
 801d1bc:	08020590 	.word	0x08020590

0801d1c0 <__retarget_lock_init_recursive>:
 801d1c0:	4770      	bx	lr

0801d1c2 <__retarget_lock_acquire_recursive>:
 801d1c2:	4770      	bx	lr

0801d1c4 <__retarget_lock_release_recursive>:
 801d1c4:	4770      	bx	lr

0801d1c6 <memcpy>:
 801d1c6:	440a      	add	r2, r1
 801d1c8:	4291      	cmp	r1, r2
 801d1ca:	f100 33ff 	add.w	r3, r0, #4294967295
 801d1ce:	d100      	bne.n	801d1d2 <memcpy+0xc>
 801d1d0:	4770      	bx	lr
 801d1d2:	b510      	push	{r4, lr}
 801d1d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d1d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d1dc:	4291      	cmp	r1, r2
 801d1de:	d1f9      	bne.n	801d1d4 <memcpy+0xe>
 801d1e0:	bd10      	pop	{r4, pc}

0801d1e2 <quorem>:
 801d1e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1e6:	6903      	ldr	r3, [r0, #16]
 801d1e8:	690c      	ldr	r4, [r1, #16]
 801d1ea:	42a3      	cmp	r3, r4
 801d1ec:	4607      	mov	r7, r0
 801d1ee:	db7e      	blt.n	801d2ee <quorem+0x10c>
 801d1f0:	3c01      	subs	r4, #1
 801d1f2:	f101 0814 	add.w	r8, r1, #20
 801d1f6:	00a3      	lsls	r3, r4, #2
 801d1f8:	f100 0514 	add.w	r5, r0, #20
 801d1fc:	9300      	str	r3, [sp, #0]
 801d1fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d202:	9301      	str	r3, [sp, #4]
 801d204:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d20c:	3301      	adds	r3, #1
 801d20e:	429a      	cmp	r2, r3
 801d210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d214:	fbb2 f6f3 	udiv	r6, r2, r3
 801d218:	d32e      	bcc.n	801d278 <quorem+0x96>
 801d21a:	f04f 0a00 	mov.w	sl, #0
 801d21e:	46c4      	mov	ip, r8
 801d220:	46ae      	mov	lr, r5
 801d222:	46d3      	mov	fp, sl
 801d224:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d228:	b298      	uxth	r0, r3
 801d22a:	fb06 a000 	mla	r0, r6, r0, sl
 801d22e:	0c02      	lsrs	r2, r0, #16
 801d230:	0c1b      	lsrs	r3, r3, #16
 801d232:	fb06 2303 	mla	r3, r6, r3, r2
 801d236:	f8de 2000 	ldr.w	r2, [lr]
 801d23a:	b280      	uxth	r0, r0
 801d23c:	b292      	uxth	r2, r2
 801d23e:	1a12      	subs	r2, r2, r0
 801d240:	445a      	add	r2, fp
 801d242:	f8de 0000 	ldr.w	r0, [lr]
 801d246:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d24a:	b29b      	uxth	r3, r3
 801d24c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d250:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d254:	b292      	uxth	r2, r2
 801d256:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d25a:	45e1      	cmp	r9, ip
 801d25c:	f84e 2b04 	str.w	r2, [lr], #4
 801d260:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d264:	d2de      	bcs.n	801d224 <quorem+0x42>
 801d266:	9b00      	ldr	r3, [sp, #0]
 801d268:	58eb      	ldr	r3, [r5, r3]
 801d26a:	b92b      	cbnz	r3, 801d278 <quorem+0x96>
 801d26c:	9b01      	ldr	r3, [sp, #4]
 801d26e:	3b04      	subs	r3, #4
 801d270:	429d      	cmp	r5, r3
 801d272:	461a      	mov	r2, r3
 801d274:	d32f      	bcc.n	801d2d6 <quorem+0xf4>
 801d276:	613c      	str	r4, [r7, #16]
 801d278:	4638      	mov	r0, r7
 801d27a:	f001 f97f 	bl	801e57c <__mcmp>
 801d27e:	2800      	cmp	r0, #0
 801d280:	db25      	blt.n	801d2ce <quorem+0xec>
 801d282:	4629      	mov	r1, r5
 801d284:	2000      	movs	r0, #0
 801d286:	f858 2b04 	ldr.w	r2, [r8], #4
 801d28a:	f8d1 c000 	ldr.w	ip, [r1]
 801d28e:	fa1f fe82 	uxth.w	lr, r2
 801d292:	fa1f f38c 	uxth.w	r3, ip
 801d296:	eba3 030e 	sub.w	r3, r3, lr
 801d29a:	4403      	add	r3, r0
 801d29c:	0c12      	lsrs	r2, r2, #16
 801d29e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d2a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d2a6:	b29b      	uxth	r3, r3
 801d2a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d2ac:	45c1      	cmp	r9, r8
 801d2ae:	f841 3b04 	str.w	r3, [r1], #4
 801d2b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d2b6:	d2e6      	bcs.n	801d286 <quorem+0xa4>
 801d2b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d2bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d2c0:	b922      	cbnz	r2, 801d2cc <quorem+0xea>
 801d2c2:	3b04      	subs	r3, #4
 801d2c4:	429d      	cmp	r5, r3
 801d2c6:	461a      	mov	r2, r3
 801d2c8:	d30b      	bcc.n	801d2e2 <quorem+0x100>
 801d2ca:	613c      	str	r4, [r7, #16]
 801d2cc:	3601      	adds	r6, #1
 801d2ce:	4630      	mov	r0, r6
 801d2d0:	b003      	add	sp, #12
 801d2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d6:	6812      	ldr	r2, [r2, #0]
 801d2d8:	3b04      	subs	r3, #4
 801d2da:	2a00      	cmp	r2, #0
 801d2dc:	d1cb      	bne.n	801d276 <quorem+0x94>
 801d2de:	3c01      	subs	r4, #1
 801d2e0:	e7c6      	b.n	801d270 <quorem+0x8e>
 801d2e2:	6812      	ldr	r2, [r2, #0]
 801d2e4:	3b04      	subs	r3, #4
 801d2e6:	2a00      	cmp	r2, #0
 801d2e8:	d1ef      	bne.n	801d2ca <quorem+0xe8>
 801d2ea:	3c01      	subs	r4, #1
 801d2ec:	e7ea      	b.n	801d2c4 <quorem+0xe2>
 801d2ee:	2000      	movs	r0, #0
 801d2f0:	e7ee      	b.n	801d2d0 <quorem+0xee>
 801d2f2:	0000      	movs	r0, r0
 801d2f4:	0000      	movs	r0, r0
	...

0801d2f8 <_dtoa_r>:
 801d2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2fc:	69c7      	ldr	r7, [r0, #28]
 801d2fe:	b097      	sub	sp, #92	@ 0x5c
 801d300:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d304:	ec55 4b10 	vmov	r4, r5, d0
 801d308:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d30a:	9107      	str	r1, [sp, #28]
 801d30c:	4681      	mov	r9, r0
 801d30e:	920c      	str	r2, [sp, #48]	@ 0x30
 801d310:	9311      	str	r3, [sp, #68]	@ 0x44
 801d312:	b97f      	cbnz	r7, 801d334 <_dtoa_r+0x3c>
 801d314:	2010      	movs	r0, #16
 801d316:	f000 fe09 	bl	801df2c <malloc>
 801d31a:	4602      	mov	r2, r0
 801d31c:	f8c9 001c 	str.w	r0, [r9, #28]
 801d320:	b920      	cbnz	r0, 801d32c <_dtoa_r+0x34>
 801d322:	4ba9      	ldr	r3, [pc, #676]	@ (801d5c8 <_dtoa_r+0x2d0>)
 801d324:	21ef      	movs	r1, #239	@ 0xef
 801d326:	48a9      	ldr	r0, [pc, #676]	@ (801d5cc <_dtoa_r+0x2d4>)
 801d328:	f001 fc3a 	bl	801eba0 <__assert_func>
 801d32c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d330:	6007      	str	r7, [r0, #0]
 801d332:	60c7      	str	r7, [r0, #12]
 801d334:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d338:	6819      	ldr	r1, [r3, #0]
 801d33a:	b159      	cbz	r1, 801d354 <_dtoa_r+0x5c>
 801d33c:	685a      	ldr	r2, [r3, #4]
 801d33e:	604a      	str	r2, [r1, #4]
 801d340:	2301      	movs	r3, #1
 801d342:	4093      	lsls	r3, r2
 801d344:	608b      	str	r3, [r1, #8]
 801d346:	4648      	mov	r0, r9
 801d348:	f000 fee6 	bl	801e118 <_Bfree>
 801d34c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d350:	2200      	movs	r2, #0
 801d352:	601a      	str	r2, [r3, #0]
 801d354:	1e2b      	subs	r3, r5, #0
 801d356:	bfb9      	ittee	lt
 801d358:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d35c:	9305      	strlt	r3, [sp, #20]
 801d35e:	2300      	movge	r3, #0
 801d360:	6033      	strge	r3, [r6, #0]
 801d362:	9f05      	ldr	r7, [sp, #20]
 801d364:	4b9a      	ldr	r3, [pc, #616]	@ (801d5d0 <_dtoa_r+0x2d8>)
 801d366:	bfbc      	itt	lt
 801d368:	2201      	movlt	r2, #1
 801d36a:	6032      	strlt	r2, [r6, #0]
 801d36c:	43bb      	bics	r3, r7
 801d36e:	d112      	bne.n	801d396 <_dtoa_r+0x9e>
 801d370:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d372:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d376:	6013      	str	r3, [r2, #0]
 801d378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d37c:	4323      	orrs	r3, r4
 801d37e:	f000 855a 	beq.w	801de36 <_dtoa_r+0xb3e>
 801d382:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d384:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801d5e4 <_dtoa_r+0x2ec>
 801d388:	2b00      	cmp	r3, #0
 801d38a:	f000 855c 	beq.w	801de46 <_dtoa_r+0xb4e>
 801d38e:	f10a 0303 	add.w	r3, sl, #3
 801d392:	f000 bd56 	b.w	801de42 <_dtoa_r+0xb4a>
 801d396:	ed9d 7b04 	vldr	d7, [sp, #16]
 801d39a:	2200      	movs	r2, #0
 801d39c:	ec51 0b17 	vmov	r0, r1, d7
 801d3a0:	2300      	movs	r3, #0
 801d3a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801d3a6:	f7e3 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 801d3aa:	4680      	mov	r8, r0
 801d3ac:	b158      	cbz	r0, 801d3c6 <_dtoa_r+0xce>
 801d3ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d3b0:	2301      	movs	r3, #1
 801d3b2:	6013      	str	r3, [r2, #0]
 801d3b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d3b6:	b113      	cbz	r3, 801d3be <_dtoa_r+0xc6>
 801d3b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d3ba:	4b86      	ldr	r3, [pc, #536]	@ (801d5d4 <_dtoa_r+0x2dc>)
 801d3bc:	6013      	str	r3, [r2, #0]
 801d3be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801d5e8 <_dtoa_r+0x2f0>
 801d3c2:	f000 bd40 	b.w	801de46 <_dtoa_r+0xb4e>
 801d3c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801d3ca:	aa14      	add	r2, sp, #80	@ 0x50
 801d3cc:	a915      	add	r1, sp, #84	@ 0x54
 801d3ce:	4648      	mov	r0, r9
 801d3d0:	f001 f984 	bl	801e6dc <__d2b>
 801d3d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d3d8:	9002      	str	r0, [sp, #8]
 801d3da:	2e00      	cmp	r6, #0
 801d3dc:	d078      	beq.n	801d4d0 <_dtoa_r+0x1d8>
 801d3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d3e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801d3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d3e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d3ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d3f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d3f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d3f8:	4619      	mov	r1, r3
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	4b76      	ldr	r3, [pc, #472]	@ (801d5d8 <_dtoa_r+0x2e0>)
 801d3fe:	f7e2 ff43 	bl	8000288 <__aeabi_dsub>
 801d402:	a36b      	add	r3, pc, #428	@ (adr r3, 801d5b0 <_dtoa_r+0x2b8>)
 801d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d408:	f7e3 f8f6 	bl	80005f8 <__aeabi_dmul>
 801d40c:	a36a      	add	r3, pc, #424	@ (adr r3, 801d5b8 <_dtoa_r+0x2c0>)
 801d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d412:	f7e2 ff3b 	bl	800028c <__adddf3>
 801d416:	4604      	mov	r4, r0
 801d418:	4630      	mov	r0, r6
 801d41a:	460d      	mov	r5, r1
 801d41c:	f7e3 f882 	bl	8000524 <__aeabi_i2d>
 801d420:	a367      	add	r3, pc, #412	@ (adr r3, 801d5c0 <_dtoa_r+0x2c8>)
 801d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d426:	f7e3 f8e7 	bl	80005f8 <__aeabi_dmul>
 801d42a:	4602      	mov	r2, r0
 801d42c:	460b      	mov	r3, r1
 801d42e:	4620      	mov	r0, r4
 801d430:	4629      	mov	r1, r5
 801d432:	f7e2 ff2b 	bl	800028c <__adddf3>
 801d436:	4604      	mov	r4, r0
 801d438:	460d      	mov	r5, r1
 801d43a:	f7e3 fb8d 	bl	8000b58 <__aeabi_d2iz>
 801d43e:	2200      	movs	r2, #0
 801d440:	4607      	mov	r7, r0
 801d442:	2300      	movs	r3, #0
 801d444:	4620      	mov	r0, r4
 801d446:	4629      	mov	r1, r5
 801d448:	f7e3 fb48 	bl	8000adc <__aeabi_dcmplt>
 801d44c:	b140      	cbz	r0, 801d460 <_dtoa_r+0x168>
 801d44e:	4638      	mov	r0, r7
 801d450:	f7e3 f868 	bl	8000524 <__aeabi_i2d>
 801d454:	4622      	mov	r2, r4
 801d456:	462b      	mov	r3, r5
 801d458:	f7e3 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 801d45c:	b900      	cbnz	r0, 801d460 <_dtoa_r+0x168>
 801d45e:	3f01      	subs	r7, #1
 801d460:	2f16      	cmp	r7, #22
 801d462:	d852      	bhi.n	801d50a <_dtoa_r+0x212>
 801d464:	4b5d      	ldr	r3, [pc, #372]	@ (801d5dc <_dtoa_r+0x2e4>)
 801d466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d46e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d472:	f7e3 fb33 	bl	8000adc <__aeabi_dcmplt>
 801d476:	2800      	cmp	r0, #0
 801d478:	d049      	beq.n	801d50e <_dtoa_r+0x216>
 801d47a:	3f01      	subs	r7, #1
 801d47c:	2300      	movs	r3, #0
 801d47e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d480:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d482:	1b9b      	subs	r3, r3, r6
 801d484:	1e5a      	subs	r2, r3, #1
 801d486:	bf45      	ittet	mi
 801d488:	f1c3 0301 	rsbmi	r3, r3, #1
 801d48c:	9300      	strmi	r3, [sp, #0]
 801d48e:	2300      	movpl	r3, #0
 801d490:	2300      	movmi	r3, #0
 801d492:	9206      	str	r2, [sp, #24]
 801d494:	bf54      	ite	pl
 801d496:	9300      	strpl	r3, [sp, #0]
 801d498:	9306      	strmi	r3, [sp, #24]
 801d49a:	2f00      	cmp	r7, #0
 801d49c:	db39      	blt.n	801d512 <_dtoa_r+0x21a>
 801d49e:	9b06      	ldr	r3, [sp, #24]
 801d4a0:	970d      	str	r7, [sp, #52]	@ 0x34
 801d4a2:	443b      	add	r3, r7
 801d4a4:	9306      	str	r3, [sp, #24]
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	9308      	str	r3, [sp, #32]
 801d4aa:	9b07      	ldr	r3, [sp, #28]
 801d4ac:	2b09      	cmp	r3, #9
 801d4ae:	d863      	bhi.n	801d578 <_dtoa_r+0x280>
 801d4b0:	2b05      	cmp	r3, #5
 801d4b2:	bfc4      	itt	gt
 801d4b4:	3b04      	subgt	r3, #4
 801d4b6:	9307      	strgt	r3, [sp, #28]
 801d4b8:	9b07      	ldr	r3, [sp, #28]
 801d4ba:	f1a3 0302 	sub.w	r3, r3, #2
 801d4be:	bfcc      	ite	gt
 801d4c0:	2400      	movgt	r4, #0
 801d4c2:	2401      	movle	r4, #1
 801d4c4:	2b03      	cmp	r3, #3
 801d4c6:	d863      	bhi.n	801d590 <_dtoa_r+0x298>
 801d4c8:	e8df f003 	tbb	[pc, r3]
 801d4cc:	2b375452 	.word	0x2b375452
 801d4d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801d4d4:	441e      	add	r6, r3
 801d4d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d4da:	2b20      	cmp	r3, #32
 801d4dc:	bfc1      	itttt	gt
 801d4de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d4e2:	409f      	lslgt	r7, r3
 801d4e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d4e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d4ec:	bfd6      	itet	le
 801d4ee:	f1c3 0320 	rsble	r3, r3, #32
 801d4f2:	ea47 0003 	orrgt.w	r0, r7, r3
 801d4f6:	fa04 f003 	lslle.w	r0, r4, r3
 801d4fa:	f7e3 f803 	bl	8000504 <__aeabi_ui2d>
 801d4fe:	2201      	movs	r2, #1
 801d500:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d504:	3e01      	subs	r6, #1
 801d506:	9212      	str	r2, [sp, #72]	@ 0x48
 801d508:	e776      	b.n	801d3f8 <_dtoa_r+0x100>
 801d50a:	2301      	movs	r3, #1
 801d50c:	e7b7      	b.n	801d47e <_dtoa_r+0x186>
 801d50e:	9010      	str	r0, [sp, #64]	@ 0x40
 801d510:	e7b6      	b.n	801d480 <_dtoa_r+0x188>
 801d512:	9b00      	ldr	r3, [sp, #0]
 801d514:	1bdb      	subs	r3, r3, r7
 801d516:	9300      	str	r3, [sp, #0]
 801d518:	427b      	negs	r3, r7
 801d51a:	9308      	str	r3, [sp, #32]
 801d51c:	2300      	movs	r3, #0
 801d51e:	930d      	str	r3, [sp, #52]	@ 0x34
 801d520:	e7c3      	b.n	801d4aa <_dtoa_r+0x1b2>
 801d522:	2301      	movs	r3, #1
 801d524:	9309      	str	r3, [sp, #36]	@ 0x24
 801d526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d528:	eb07 0b03 	add.w	fp, r7, r3
 801d52c:	f10b 0301 	add.w	r3, fp, #1
 801d530:	2b01      	cmp	r3, #1
 801d532:	9303      	str	r3, [sp, #12]
 801d534:	bfb8      	it	lt
 801d536:	2301      	movlt	r3, #1
 801d538:	e006      	b.n	801d548 <_dtoa_r+0x250>
 801d53a:	2301      	movs	r3, #1
 801d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d53e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d540:	2b00      	cmp	r3, #0
 801d542:	dd28      	ble.n	801d596 <_dtoa_r+0x29e>
 801d544:	469b      	mov	fp, r3
 801d546:	9303      	str	r3, [sp, #12]
 801d548:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801d54c:	2100      	movs	r1, #0
 801d54e:	2204      	movs	r2, #4
 801d550:	f102 0514 	add.w	r5, r2, #20
 801d554:	429d      	cmp	r5, r3
 801d556:	d926      	bls.n	801d5a6 <_dtoa_r+0x2ae>
 801d558:	6041      	str	r1, [r0, #4]
 801d55a:	4648      	mov	r0, r9
 801d55c:	f000 fd9c 	bl	801e098 <_Balloc>
 801d560:	4682      	mov	sl, r0
 801d562:	2800      	cmp	r0, #0
 801d564:	d142      	bne.n	801d5ec <_dtoa_r+0x2f4>
 801d566:	4b1e      	ldr	r3, [pc, #120]	@ (801d5e0 <_dtoa_r+0x2e8>)
 801d568:	4602      	mov	r2, r0
 801d56a:	f240 11af 	movw	r1, #431	@ 0x1af
 801d56e:	e6da      	b.n	801d326 <_dtoa_r+0x2e>
 801d570:	2300      	movs	r3, #0
 801d572:	e7e3      	b.n	801d53c <_dtoa_r+0x244>
 801d574:	2300      	movs	r3, #0
 801d576:	e7d5      	b.n	801d524 <_dtoa_r+0x22c>
 801d578:	2401      	movs	r4, #1
 801d57a:	2300      	movs	r3, #0
 801d57c:	9307      	str	r3, [sp, #28]
 801d57e:	9409      	str	r4, [sp, #36]	@ 0x24
 801d580:	f04f 3bff 	mov.w	fp, #4294967295
 801d584:	2200      	movs	r2, #0
 801d586:	f8cd b00c 	str.w	fp, [sp, #12]
 801d58a:	2312      	movs	r3, #18
 801d58c:	920c      	str	r2, [sp, #48]	@ 0x30
 801d58e:	e7db      	b.n	801d548 <_dtoa_r+0x250>
 801d590:	2301      	movs	r3, #1
 801d592:	9309      	str	r3, [sp, #36]	@ 0x24
 801d594:	e7f4      	b.n	801d580 <_dtoa_r+0x288>
 801d596:	f04f 0b01 	mov.w	fp, #1
 801d59a:	f8cd b00c 	str.w	fp, [sp, #12]
 801d59e:	465b      	mov	r3, fp
 801d5a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801d5a4:	e7d0      	b.n	801d548 <_dtoa_r+0x250>
 801d5a6:	3101      	adds	r1, #1
 801d5a8:	0052      	lsls	r2, r2, #1
 801d5aa:	e7d1      	b.n	801d550 <_dtoa_r+0x258>
 801d5ac:	f3af 8000 	nop.w
 801d5b0:	636f4361 	.word	0x636f4361
 801d5b4:	3fd287a7 	.word	0x3fd287a7
 801d5b8:	8b60c8b3 	.word	0x8b60c8b3
 801d5bc:	3fc68a28 	.word	0x3fc68a28
 801d5c0:	509f79fb 	.word	0x509f79fb
 801d5c4:	3fd34413 	.word	0x3fd34413
 801d5c8:	08020251 	.word	0x08020251
 801d5cc:	08020268 	.word	0x08020268
 801d5d0:	7ff00000 	.word	0x7ff00000
 801d5d4:	08020221 	.word	0x08020221
 801d5d8:	3ff80000 	.word	0x3ff80000
 801d5dc:	080203b8 	.word	0x080203b8
 801d5e0:	080202c0 	.word	0x080202c0
 801d5e4:	0802024d 	.word	0x0802024d
 801d5e8:	08020220 	.word	0x08020220
 801d5ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d5f0:	6018      	str	r0, [r3, #0]
 801d5f2:	9b03      	ldr	r3, [sp, #12]
 801d5f4:	2b0e      	cmp	r3, #14
 801d5f6:	f200 80a1 	bhi.w	801d73c <_dtoa_r+0x444>
 801d5fa:	2c00      	cmp	r4, #0
 801d5fc:	f000 809e 	beq.w	801d73c <_dtoa_r+0x444>
 801d600:	2f00      	cmp	r7, #0
 801d602:	dd33      	ble.n	801d66c <_dtoa_r+0x374>
 801d604:	4b9c      	ldr	r3, [pc, #624]	@ (801d878 <_dtoa_r+0x580>)
 801d606:	f007 020f 	and.w	r2, r7, #15
 801d60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d60e:	ed93 7b00 	vldr	d7, [r3]
 801d612:	05f8      	lsls	r0, r7, #23
 801d614:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801d618:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d61c:	d516      	bpl.n	801d64c <_dtoa_r+0x354>
 801d61e:	4b97      	ldr	r3, [pc, #604]	@ (801d87c <_dtoa_r+0x584>)
 801d620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d628:	f7e3 f910 	bl	800084c <__aeabi_ddiv>
 801d62c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d630:	f004 040f 	and.w	r4, r4, #15
 801d634:	2603      	movs	r6, #3
 801d636:	4d91      	ldr	r5, [pc, #580]	@ (801d87c <_dtoa_r+0x584>)
 801d638:	b954      	cbnz	r4, 801d650 <_dtoa_r+0x358>
 801d63a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d63e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d642:	f7e3 f903 	bl	800084c <__aeabi_ddiv>
 801d646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d64a:	e028      	b.n	801d69e <_dtoa_r+0x3a6>
 801d64c:	2602      	movs	r6, #2
 801d64e:	e7f2      	b.n	801d636 <_dtoa_r+0x33e>
 801d650:	07e1      	lsls	r1, r4, #31
 801d652:	d508      	bpl.n	801d666 <_dtoa_r+0x36e>
 801d654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d658:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d65c:	f7e2 ffcc 	bl	80005f8 <__aeabi_dmul>
 801d660:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d664:	3601      	adds	r6, #1
 801d666:	1064      	asrs	r4, r4, #1
 801d668:	3508      	adds	r5, #8
 801d66a:	e7e5      	b.n	801d638 <_dtoa_r+0x340>
 801d66c:	f000 80af 	beq.w	801d7ce <_dtoa_r+0x4d6>
 801d670:	427c      	negs	r4, r7
 801d672:	4b81      	ldr	r3, [pc, #516]	@ (801d878 <_dtoa_r+0x580>)
 801d674:	4d81      	ldr	r5, [pc, #516]	@ (801d87c <_dtoa_r+0x584>)
 801d676:	f004 020f 	and.w	r2, r4, #15
 801d67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d686:	f7e2 ffb7 	bl	80005f8 <__aeabi_dmul>
 801d68a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d68e:	1124      	asrs	r4, r4, #4
 801d690:	2300      	movs	r3, #0
 801d692:	2602      	movs	r6, #2
 801d694:	2c00      	cmp	r4, #0
 801d696:	f040 808f 	bne.w	801d7b8 <_dtoa_r+0x4c0>
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d1d3      	bne.n	801d646 <_dtoa_r+0x34e>
 801d69e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d6a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	f000 8094 	beq.w	801d7d2 <_dtoa_r+0x4da>
 801d6aa:	4b75      	ldr	r3, [pc, #468]	@ (801d880 <_dtoa_r+0x588>)
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	4620      	mov	r0, r4
 801d6b0:	4629      	mov	r1, r5
 801d6b2:	f7e3 fa13 	bl	8000adc <__aeabi_dcmplt>
 801d6b6:	2800      	cmp	r0, #0
 801d6b8:	f000 808b 	beq.w	801d7d2 <_dtoa_r+0x4da>
 801d6bc:	9b03      	ldr	r3, [sp, #12]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	f000 8087 	beq.w	801d7d2 <_dtoa_r+0x4da>
 801d6c4:	f1bb 0f00 	cmp.w	fp, #0
 801d6c8:	dd34      	ble.n	801d734 <_dtoa_r+0x43c>
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	4b6d      	ldr	r3, [pc, #436]	@ (801d884 <_dtoa_r+0x58c>)
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	4629      	mov	r1, r5
 801d6d2:	f7e2 ff91 	bl	80005f8 <__aeabi_dmul>
 801d6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d6da:	f107 38ff 	add.w	r8, r7, #4294967295
 801d6de:	3601      	adds	r6, #1
 801d6e0:	465c      	mov	r4, fp
 801d6e2:	4630      	mov	r0, r6
 801d6e4:	f7e2 ff1e 	bl	8000524 <__aeabi_i2d>
 801d6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d6ec:	f7e2 ff84 	bl	80005f8 <__aeabi_dmul>
 801d6f0:	4b65      	ldr	r3, [pc, #404]	@ (801d888 <_dtoa_r+0x590>)
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	f7e2 fdca 	bl	800028c <__adddf3>
 801d6f8:	4605      	mov	r5, r0
 801d6fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d6fe:	2c00      	cmp	r4, #0
 801d700:	d16a      	bne.n	801d7d8 <_dtoa_r+0x4e0>
 801d702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d706:	4b61      	ldr	r3, [pc, #388]	@ (801d88c <_dtoa_r+0x594>)
 801d708:	2200      	movs	r2, #0
 801d70a:	f7e2 fdbd 	bl	8000288 <__aeabi_dsub>
 801d70e:	4602      	mov	r2, r0
 801d710:	460b      	mov	r3, r1
 801d712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d716:	462a      	mov	r2, r5
 801d718:	4633      	mov	r3, r6
 801d71a:	f7e3 f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 801d71e:	2800      	cmp	r0, #0
 801d720:	f040 8298 	bne.w	801dc54 <_dtoa_r+0x95c>
 801d724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d728:	462a      	mov	r2, r5
 801d72a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d72e:	f7e3 f9d5 	bl	8000adc <__aeabi_dcmplt>
 801d732:	bb38      	cbnz	r0, 801d784 <_dtoa_r+0x48c>
 801d734:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801d738:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801d73c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d73e:	2b00      	cmp	r3, #0
 801d740:	f2c0 8157 	blt.w	801d9f2 <_dtoa_r+0x6fa>
 801d744:	2f0e      	cmp	r7, #14
 801d746:	f300 8154 	bgt.w	801d9f2 <_dtoa_r+0x6fa>
 801d74a:	4b4b      	ldr	r3, [pc, #300]	@ (801d878 <_dtoa_r+0x580>)
 801d74c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d750:	ed93 7b00 	vldr	d7, [r3]
 801d754:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d756:	2b00      	cmp	r3, #0
 801d758:	ed8d 7b00 	vstr	d7, [sp]
 801d75c:	f280 80e5 	bge.w	801d92a <_dtoa_r+0x632>
 801d760:	9b03      	ldr	r3, [sp, #12]
 801d762:	2b00      	cmp	r3, #0
 801d764:	f300 80e1 	bgt.w	801d92a <_dtoa_r+0x632>
 801d768:	d10c      	bne.n	801d784 <_dtoa_r+0x48c>
 801d76a:	4b48      	ldr	r3, [pc, #288]	@ (801d88c <_dtoa_r+0x594>)
 801d76c:	2200      	movs	r2, #0
 801d76e:	ec51 0b17 	vmov	r0, r1, d7
 801d772:	f7e2 ff41 	bl	80005f8 <__aeabi_dmul>
 801d776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d77a:	f7e3 f9c3 	bl	8000b04 <__aeabi_dcmpge>
 801d77e:	2800      	cmp	r0, #0
 801d780:	f000 8266 	beq.w	801dc50 <_dtoa_r+0x958>
 801d784:	2400      	movs	r4, #0
 801d786:	4625      	mov	r5, r4
 801d788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d78a:	4656      	mov	r6, sl
 801d78c:	ea6f 0803 	mvn.w	r8, r3
 801d790:	2700      	movs	r7, #0
 801d792:	4621      	mov	r1, r4
 801d794:	4648      	mov	r0, r9
 801d796:	f000 fcbf 	bl	801e118 <_Bfree>
 801d79a:	2d00      	cmp	r5, #0
 801d79c:	f000 80bd 	beq.w	801d91a <_dtoa_r+0x622>
 801d7a0:	b12f      	cbz	r7, 801d7ae <_dtoa_r+0x4b6>
 801d7a2:	42af      	cmp	r7, r5
 801d7a4:	d003      	beq.n	801d7ae <_dtoa_r+0x4b6>
 801d7a6:	4639      	mov	r1, r7
 801d7a8:	4648      	mov	r0, r9
 801d7aa:	f000 fcb5 	bl	801e118 <_Bfree>
 801d7ae:	4629      	mov	r1, r5
 801d7b0:	4648      	mov	r0, r9
 801d7b2:	f000 fcb1 	bl	801e118 <_Bfree>
 801d7b6:	e0b0      	b.n	801d91a <_dtoa_r+0x622>
 801d7b8:	07e2      	lsls	r2, r4, #31
 801d7ba:	d505      	bpl.n	801d7c8 <_dtoa_r+0x4d0>
 801d7bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d7c0:	f7e2 ff1a 	bl	80005f8 <__aeabi_dmul>
 801d7c4:	3601      	adds	r6, #1
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	1064      	asrs	r4, r4, #1
 801d7ca:	3508      	adds	r5, #8
 801d7cc:	e762      	b.n	801d694 <_dtoa_r+0x39c>
 801d7ce:	2602      	movs	r6, #2
 801d7d0:	e765      	b.n	801d69e <_dtoa_r+0x3a6>
 801d7d2:	9c03      	ldr	r4, [sp, #12]
 801d7d4:	46b8      	mov	r8, r7
 801d7d6:	e784      	b.n	801d6e2 <_dtoa_r+0x3ea>
 801d7d8:	4b27      	ldr	r3, [pc, #156]	@ (801d878 <_dtoa_r+0x580>)
 801d7da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d7dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d7e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d7e4:	4454      	add	r4, sl
 801d7e6:	2900      	cmp	r1, #0
 801d7e8:	d054      	beq.n	801d894 <_dtoa_r+0x59c>
 801d7ea:	4929      	ldr	r1, [pc, #164]	@ (801d890 <_dtoa_r+0x598>)
 801d7ec:	2000      	movs	r0, #0
 801d7ee:	f7e3 f82d 	bl	800084c <__aeabi_ddiv>
 801d7f2:	4633      	mov	r3, r6
 801d7f4:	462a      	mov	r2, r5
 801d7f6:	f7e2 fd47 	bl	8000288 <__aeabi_dsub>
 801d7fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d7fe:	4656      	mov	r6, sl
 801d800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d804:	f7e3 f9a8 	bl	8000b58 <__aeabi_d2iz>
 801d808:	4605      	mov	r5, r0
 801d80a:	f7e2 fe8b 	bl	8000524 <__aeabi_i2d>
 801d80e:	4602      	mov	r2, r0
 801d810:	460b      	mov	r3, r1
 801d812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d816:	f7e2 fd37 	bl	8000288 <__aeabi_dsub>
 801d81a:	3530      	adds	r5, #48	@ 0x30
 801d81c:	4602      	mov	r2, r0
 801d81e:	460b      	mov	r3, r1
 801d820:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d824:	f806 5b01 	strb.w	r5, [r6], #1
 801d828:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d82c:	f7e3 f956 	bl	8000adc <__aeabi_dcmplt>
 801d830:	2800      	cmp	r0, #0
 801d832:	d172      	bne.n	801d91a <_dtoa_r+0x622>
 801d834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d838:	4911      	ldr	r1, [pc, #68]	@ (801d880 <_dtoa_r+0x588>)
 801d83a:	2000      	movs	r0, #0
 801d83c:	f7e2 fd24 	bl	8000288 <__aeabi_dsub>
 801d840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d844:	f7e3 f94a 	bl	8000adc <__aeabi_dcmplt>
 801d848:	2800      	cmp	r0, #0
 801d84a:	f040 80b4 	bne.w	801d9b6 <_dtoa_r+0x6be>
 801d84e:	42a6      	cmp	r6, r4
 801d850:	f43f af70 	beq.w	801d734 <_dtoa_r+0x43c>
 801d854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d858:	4b0a      	ldr	r3, [pc, #40]	@ (801d884 <_dtoa_r+0x58c>)
 801d85a:	2200      	movs	r2, #0
 801d85c:	f7e2 fecc 	bl	80005f8 <__aeabi_dmul>
 801d860:	4b08      	ldr	r3, [pc, #32]	@ (801d884 <_dtoa_r+0x58c>)
 801d862:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d866:	2200      	movs	r2, #0
 801d868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d86c:	f7e2 fec4 	bl	80005f8 <__aeabi_dmul>
 801d870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d874:	e7c4      	b.n	801d800 <_dtoa_r+0x508>
 801d876:	bf00      	nop
 801d878:	080203b8 	.word	0x080203b8
 801d87c:	08020390 	.word	0x08020390
 801d880:	3ff00000 	.word	0x3ff00000
 801d884:	40240000 	.word	0x40240000
 801d888:	401c0000 	.word	0x401c0000
 801d88c:	40140000 	.word	0x40140000
 801d890:	3fe00000 	.word	0x3fe00000
 801d894:	4631      	mov	r1, r6
 801d896:	4628      	mov	r0, r5
 801d898:	f7e2 feae 	bl	80005f8 <__aeabi_dmul>
 801d89c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d8a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d8a2:	4656      	mov	r6, sl
 801d8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d8a8:	f7e3 f956 	bl	8000b58 <__aeabi_d2iz>
 801d8ac:	4605      	mov	r5, r0
 801d8ae:	f7e2 fe39 	bl	8000524 <__aeabi_i2d>
 801d8b2:	4602      	mov	r2, r0
 801d8b4:	460b      	mov	r3, r1
 801d8b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d8ba:	f7e2 fce5 	bl	8000288 <__aeabi_dsub>
 801d8be:	3530      	adds	r5, #48	@ 0x30
 801d8c0:	f806 5b01 	strb.w	r5, [r6], #1
 801d8c4:	4602      	mov	r2, r0
 801d8c6:	460b      	mov	r3, r1
 801d8c8:	42a6      	cmp	r6, r4
 801d8ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d8ce:	f04f 0200 	mov.w	r2, #0
 801d8d2:	d124      	bne.n	801d91e <_dtoa_r+0x626>
 801d8d4:	4baf      	ldr	r3, [pc, #700]	@ (801db94 <_dtoa_r+0x89c>)
 801d8d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d8da:	f7e2 fcd7 	bl	800028c <__adddf3>
 801d8de:	4602      	mov	r2, r0
 801d8e0:	460b      	mov	r3, r1
 801d8e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d8e6:	f7e3 f917 	bl	8000b18 <__aeabi_dcmpgt>
 801d8ea:	2800      	cmp	r0, #0
 801d8ec:	d163      	bne.n	801d9b6 <_dtoa_r+0x6be>
 801d8ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d8f2:	49a8      	ldr	r1, [pc, #672]	@ (801db94 <_dtoa_r+0x89c>)
 801d8f4:	2000      	movs	r0, #0
 801d8f6:	f7e2 fcc7 	bl	8000288 <__aeabi_dsub>
 801d8fa:	4602      	mov	r2, r0
 801d8fc:	460b      	mov	r3, r1
 801d8fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d902:	f7e3 f8eb 	bl	8000adc <__aeabi_dcmplt>
 801d906:	2800      	cmp	r0, #0
 801d908:	f43f af14 	beq.w	801d734 <_dtoa_r+0x43c>
 801d90c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d90e:	1e73      	subs	r3, r6, #1
 801d910:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d912:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d916:	2b30      	cmp	r3, #48	@ 0x30
 801d918:	d0f8      	beq.n	801d90c <_dtoa_r+0x614>
 801d91a:	4647      	mov	r7, r8
 801d91c:	e03b      	b.n	801d996 <_dtoa_r+0x69e>
 801d91e:	4b9e      	ldr	r3, [pc, #632]	@ (801db98 <_dtoa_r+0x8a0>)
 801d920:	f7e2 fe6a 	bl	80005f8 <__aeabi_dmul>
 801d924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d928:	e7bc      	b.n	801d8a4 <_dtoa_r+0x5ac>
 801d92a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801d92e:	4656      	mov	r6, sl
 801d930:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d934:	4620      	mov	r0, r4
 801d936:	4629      	mov	r1, r5
 801d938:	f7e2 ff88 	bl	800084c <__aeabi_ddiv>
 801d93c:	f7e3 f90c 	bl	8000b58 <__aeabi_d2iz>
 801d940:	4680      	mov	r8, r0
 801d942:	f7e2 fdef 	bl	8000524 <__aeabi_i2d>
 801d946:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d94a:	f7e2 fe55 	bl	80005f8 <__aeabi_dmul>
 801d94e:	4602      	mov	r2, r0
 801d950:	460b      	mov	r3, r1
 801d952:	4620      	mov	r0, r4
 801d954:	4629      	mov	r1, r5
 801d956:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d95a:	f7e2 fc95 	bl	8000288 <__aeabi_dsub>
 801d95e:	f806 4b01 	strb.w	r4, [r6], #1
 801d962:	9d03      	ldr	r5, [sp, #12]
 801d964:	eba6 040a 	sub.w	r4, r6, sl
 801d968:	42a5      	cmp	r5, r4
 801d96a:	4602      	mov	r2, r0
 801d96c:	460b      	mov	r3, r1
 801d96e:	d133      	bne.n	801d9d8 <_dtoa_r+0x6e0>
 801d970:	f7e2 fc8c 	bl	800028c <__adddf3>
 801d974:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d978:	4604      	mov	r4, r0
 801d97a:	460d      	mov	r5, r1
 801d97c:	f7e3 f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 801d980:	b9c0      	cbnz	r0, 801d9b4 <_dtoa_r+0x6bc>
 801d982:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d986:	4620      	mov	r0, r4
 801d988:	4629      	mov	r1, r5
 801d98a:	f7e3 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 801d98e:	b110      	cbz	r0, 801d996 <_dtoa_r+0x69e>
 801d990:	f018 0f01 	tst.w	r8, #1
 801d994:	d10e      	bne.n	801d9b4 <_dtoa_r+0x6bc>
 801d996:	9902      	ldr	r1, [sp, #8]
 801d998:	4648      	mov	r0, r9
 801d99a:	f000 fbbd 	bl	801e118 <_Bfree>
 801d99e:	2300      	movs	r3, #0
 801d9a0:	7033      	strb	r3, [r6, #0]
 801d9a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d9a4:	3701      	adds	r7, #1
 801d9a6:	601f      	str	r7, [r3, #0]
 801d9a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	f000 824b 	beq.w	801de46 <_dtoa_r+0xb4e>
 801d9b0:	601e      	str	r6, [r3, #0]
 801d9b2:	e248      	b.n	801de46 <_dtoa_r+0xb4e>
 801d9b4:	46b8      	mov	r8, r7
 801d9b6:	4633      	mov	r3, r6
 801d9b8:	461e      	mov	r6, r3
 801d9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d9be:	2a39      	cmp	r2, #57	@ 0x39
 801d9c0:	d106      	bne.n	801d9d0 <_dtoa_r+0x6d8>
 801d9c2:	459a      	cmp	sl, r3
 801d9c4:	d1f8      	bne.n	801d9b8 <_dtoa_r+0x6c0>
 801d9c6:	2230      	movs	r2, #48	@ 0x30
 801d9c8:	f108 0801 	add.w	r8, r8, #1
 801d9cc:	f88a 2000 	strb.w	r2, [sl]
 801d9d0:	781a      	ldrb	r2, [r3, #0]
 801d9d2:	3201      	adds	r2, #1
 801d9d4:	701a      	strb	r2, [r3, #0]
 801d9d6:	e7a0      	b.n	801d91a <_dtoa_r+0x622>
 801d9d8:	4b6f      	ldr	r3, [pc, #444]	@ (801db98 <_dtoa_r+0x8a0>)
 801d9da:	2200      	movs	r2, #0
 801d9dc:	f7e2 fe0c 	bl	80005f8 <__aeabi_dmul>
 801d9e0:	2200      	movs	r2, #0
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	4604      	mov	r4, r0
 801d9e6:	460d      	mov	r5, r1
 801d9e8:	f7e3 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 801d9ec:	2800      	cmp	r0, #0
 801d9ee:	d09f      	beq.n	801d930 <_dtoa_r+0x638>
 801d9f0:	e7d1      	b.n	801d996 <_dtoa_r+0x69e>
 801d9f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d9f4:	2a00      	cmp	r2, #0
 801d9f6:	f000 80ea 	beq.w	801dbce <_dtoa_r+0x8d6>
 801d9fa:	9a07      	ldr	r2, [sp, #28]
 801d9fc:	2a01      	cmp	r2, #1
 801d9fe:	f300 80cd 	bgt.w	801db9c <_dtoa_r+0x8a4>
 801da02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801da04:	2a00      	cmp	r2, #0
 801da06:	f000 80c1 	beq.w	801db8c <_dtoa_r+0x894>
 801da0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801da0e:	9c08      	ldr	r4, [sp, #32]
 801da10:	9e00      	ldr	r6, [sp, #0]
 801da12:	9a00      	ldr	r2, [sp, #0]
 801da14:	441a      	add	r2, r3
 801da16:	9200      	str	r2, [sp, #0]
 801da18:	9a06      	ldr	r2, [sp, #24]
 801da1a:	2101      	movs	r1, #1
 801da1c:	441a      	add	r2, r3
 801da1e:	4648      	mov	r0, r9
 801da20:	9206      	str	r2, [sp, #24]
 801da22:	f000 fc2d 	bl	801e280 <__i2b>
 801da26:	4605      	mov	r5, r0
 801da28:	b166      	cbz	r6, 801da44 <_dtoa_r+0x74c>
 801da2a:	9b06      	ldr	r3, [sp, #24]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	dd09      	ble.n	801da44 <_dtoa_r+0x74c>
 801da30:	42b3      	cmp	r3, r6
 801da32:	9a00      	ldr	r2, [sp, #0]
 801da34:	bfa8      	it	ge
 801da36:	4633      	movge	r3, r6
 801da38:	1ad2      	subs	r2, r2, r3
 801da3a:	9200      	str	r2, [sp, #0]
 801da3c:	9a06      	ldr	r2, [sp, #24]
 801da3e:	1af6      	subs	r6, r6, r3
 801da40:	1ad3      	subs	r3, r2, r3
 801da42:	9306      	str	r3, [sp, #24]
 801da44:	9b08      	ldr	r3, [sp, #32]
 801da46:	b30b      	cbz	r3, 801da8c <_dtoa_r+0x794>
 801da48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	f000 80c6 	beq.w	801dbdc <_dtoa_r+0x8e4>
 801da50:	2c00      	cmp	r4, #0
 801da52:	f000 80c0 	beq.w	801dbd6 <_dtoa_r+0x8de>
 801da56:	4629      	mov	r1, r5
 801da58:	4622      	mov	r2, r4
 801da5a:	4648      	mov	r0, r9
 801da5c:	f000 fcc8 	bl	801e3f0 <__pow5mult>
 801da60:	9a02      	ldr	r2, [sp, #8]
 801da62:	4601      	mov	r1, r0
 801da64:	4605      	mov	r5, r0
 801da66:	4648      	mov	r0, r9
 801da68:	f000 fc20 	bl	801e2ac <__multiply>
 801da6c:	9902      	ldr	r1, [sp, #8]
 801da6e:	4680      	mov	r8, r0
 801da70:	4648      	mov	r0, r9
 801da72:	f000 fb51 	bl	801e118 <_Bfree>
 801da76:	9b08      	ldr	r3, [sp, #32]
 801da78:	1b1b      	subs	r3, r3, r4
 801da7a:	9308      	str	r3, [sp, #32]
 801da7c:	f000 80b1 	beq.w	801dbe2 <_dtoa_r+0x8ea>
 801da80:	9a08      	ldr	r2, [sp, #32]
 801da82:	4641      	mov	r1, r8
 801da84:	4648      	mov	r0, r9
 801da86:	f000 fcb3 	bl	801e3f0 <__pow5mult>
 801da8a:	9002      	str	r0, [sp, #8]
 801da8c:	2101      	movs	r1, #1
 801da8e:	4648      	mov	r0, r9
 801da90:	f000 fbf6 	bl	801e280 <__i2b>
 801da94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da96:	4604      	mov	r4, r0
 801da98:	2b00      	cmp	r3, #0
 801da9a:	f000 81d8 	beq.w	801de4e <_dtoa_r+0xb56>
 801da9e:	461a      	mov	r2, r3
 801daa0:	4601      	mov	r1, r0
 801daa2:	4648      	mov	r0, r9
 801daa4:	f000 fca4 	bl	801e3f0 <__pow5mult>
 801daa8:	9b07      	ldr	r3, [sp, #28]
 801daaa:	2b01      	cmp	r3, #1
 801daac:	4604      	mov	r4, r0
 801daae:	f300 809f 	bgt.w	801dbf0 <_dtoa_r+0x8f8>
 801dab2:	9b04      	ldr	r3, [sp, #16]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	f040 8097 	bne.w	801dbe8 <_dtoa_r+0x8f0>
 801daba:	9b05      	ldr	r3, [sp, #20]
 801dabc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	f040 8093 	bne.w	801dbec <_dtoa_r+0x8f4>
 801dac6:	9b05      	ldr	r3, [sp, #20]
 801dac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801dacc:	0d1b      	lsrs	r3, r3, #20
 801dace:	051b      	lsls	r3, r3, #20
 801dad0:	b133      	cbz	r3, 801dae0 <_dtoa_r+0x7e8>
 801dad2:	9b00      	ldr	r3, [sp, #0]
 801dad4:	3301      	adds	r3, #1
 801dad6:	9300      	str	r3, [sp, #0]
 801dad8:	9b06      	ldr	r3, [sp, #24]
 801dada:	3301      	adds	r3, #1
 801dadc:	9306      	str	r3, [sp, #24]
 801dade:	2301      	movs	r3, #1
 801dae0:	9308      	str	r3, [sp, #32]
 801dae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	f000 81b8 	beq.w	801de5a <_dtoa_r+0xb62>
 801daea:	6923      	ldr	r3, [r4, #16]
 801daec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801daf0:	6918      	ldr	r0, [r3, #16]
 801daf2:	f000 fb79 	bl	801e1e8 <__hi0bits>
 801daf6:	f1c0 0020 	rsb	r0, r0, #32
 801dafa:	9b06      	ldr	r3, [sp, #24]
 801dafc:	4418      	add	r0, r3
 801dafe:	f010 001f 	ands.w	r0, r0, #31
 801db02:	f000 8082 	beq.w	801dc0a <_dtoa_r+0x912>
 801db06:	f1c0 0320 	rsb	r3, r0, #32
 801db0a:	2b04      	cmp	r3, #4
 801db0c:	dd73      	ble.n	801dbf6 <_dtoa_r+0x8fe>
 801db0e:	9b00      	ldr	r3, [sp, #0]
 801db10:	f1c0 001c 	rsb	r0, r0, #28
 801db14:	4403      	add	r3, r0
 801db16:	9300      	str	r3, [sp, #0]
 801db18:	9b06      	ldr	r3, [sp, #24]
 801db1a:	4403      	add	r3, r0
 801db1c:	4406      	add	r6, r0
 801db1e:	9306      	str	r3, [sp, #24]
 801db20:	9b00      	ldr	r3, [sp, #0]
 801db22:	2b00      	cmp	r3, #0
 801db24:	dd05      	ble.n	801db32 <_dtoa_r+0x83a>
 801db26:	9902      	ldr	r1, [sp, #8]
 801db28:	461a      	mov	r2, r3
 801db2a:	4648      	mov	r0, r9
 801db2c:	f000 fcba 	bl	801e4a4 <__lshift>
 801db30:	9002      	str	r0, [sp, #8]
 801db32:	9b06      	ldr	r3, [sp, #24]
 801db34:	2b00      	cmp	r3, #0
 801db36:	dd05      	ble.n	801db44 <_dtoa_r+0x84c>
 801db38:	4621      	mov	r1, r4
 801db3a:	461a      	mov	r2, r3
 801db3c:	4648      	mov	r0, r9
 801db3e:	f000 fcb1 	bl	801e4a4 <__lshift>
 801db42:	4604      	mov	r4, r0
 801db44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801db46:	2b00      	cmp	r3, #0
 801db48:	d061      	beq.n	801dc0e <_dtoa_r+0x916>
 801db4a:	9802      	ldr	r0, [sp, #8]
 801db4c:	4621      	mov	r1, r4
 801db4e:	f000 fd15 	bl	801e57c <__mcmp>
 801db52:	2800      	cmp	r0, #0
 801db54:	da5b      	bge.n	801dc0e <_dtoa_r+0x916>
 801db56:	2300      	movs	r3, #0
 801db58:	9902      	ldr	r1, [sp, #8]
 801db5a:	220a      	movs	r2, #10
 801db5c:	4648      	mov	r0, r9
 801db5e:	f000 fafd 	bl	801e15c <__multadd>
 801db62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db64:	9002      	str	r0, [sp, #8]
 801db66:	f107 38ff 	add.w	r8, r7, #4294967295
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	f000 8177 	beq.w	801de5e <_dtoa_r+0xb66>
 801db70:	4629      	mov	r1, r5
 801db72:	2300      	movs	r3, #0
 801db74:	220a      	movs	r2, #10
 801db76:	4648      	mov	r0, r9
 801db78:	f000 faf0 	bl	801e15c <__multadd>
 801db7c:	f1bb 0f00 	cmp.w	fp, #0
 801db80:	4605      	mov	r5, r0
 801db82:	dc6f      	bgt.n	801dc64 <_dtoa_r+0x96c>
 801db84:	9b07      	ldr	r3, [sp, #28]
 801db86:	2b02      	cmp	r3, #2
 801db88:	dc49      	bgt.n	801dc1e <_dtoa_r+0x926>
 801db8a:	e06b      	b.n	801dc64 <_dtoa_r+0x96c>
 801db8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801db8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801db92:	e73c      	b.n	801da0e <_dtoa_r+0x716>
 801db94:	3fe00000 	.word	0x3fe00000
 801db98:	40240000 	.word	0x40240000
 801db9c:	9b03      	ldr	r3, [sp, #12]
 801db9e:	1e5c      	subs	r4, r3, #1
 801dba0:	9b08      	ldr	r3, [sp, #32]
 801dba2:	42a3      	cmp	r3, r4
 801dba4:	db09      	blt.n	801dbba <_dtoa_r+0x8c2>
 801dba6:	1b1c      	subs	r4, r3, r4
 801dba8:	9b03      	ldr	r3, [sp, #12]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	f6bf af30 	bge.w	801da10 <_dtoa_r+0x718>
 801dbb0:	9b00      	ldr	r3, [sp, #0]
 801dbb2:	9a03      	ldr	r2, [sp, #12]
 801dbb4:	1a9e      	subs	r6, r3, r2
 801dbb6:	2300      	movs	r3, #0
 801dbb8:	e72b      	b.n	801da12 <_dtoa_r+0x71a>
 801dbba:	9b08      	ldr	r3, [sp, #32]
 801dbbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dbbe:	9408      	str	r4, [sp, #32]
 801dbc0:	1ae3      	subs	r3, r4, r3
 801dbc2:	441a      	add	r2, r3
 801dbc4:	9e00      	ldr	r6, [sp, #0]
 801dbc6:	9b03      	ldr	r3, [sp, #12]
 801dbc8:	920d      	str	r2, [sp, #52]	@ 0x34
 801dbca:	2400      	movs	r4, #0
 801dbcc:	e721      	b.n	801da12 <_dtoa_r+0x71a>
 801dbce:	9c08      	ldr	r4, [sp, #32]
 801dbd0:	9e00      	ldr	r6, [sp, #0]
 801dbd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801dbd4:	e728      	b.n	801da28 <_dtoa_r+0x730>
 801dbd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801dbda:	e751      	b.n	801da80 <_dtoa_r+0x788>
 801dbdc:	9a08      	ldr	r2, [sp, #32]
 801dbde:	9902      	ldr	r1, [sp, #8]
 801dbe0:	e750      	b.n	801da84 <_dtoa_r+0x78c>
 801dbe2:	f8cd 8008 	str.w	r8, [sp, #8]
 801dbe6:	e751      	b.n	801da8c <_dtoa_r+0x794>
 801dbe8:	2300      	movs	r3, #0
 801dbea:	e779      	b.n	801dae0 <_dtoa_r+0x7e8>
 801dbec:	9b04      	ldr	r3, [sp, #16]
 801dbee:	e777      	b.n	801dae0 <_dtoa_r+0x7e8>
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	9308      	str	r3, [sp, #32]
 801dbf4:	e779      	b.n	801daea <_dtoa_r+0x7f2>
 801dbf6:	d093      	beq.n	801db20 <_dtoa_r+0x828>
 801dbf8:	9a00      	ldr	r2, [sp, #0]
 801dbfa:	331c      	adds	r3, #28
 801dbfc:	441a      	add	r2, r3
 801dbfe:	9200      	str	r2, [sp, #0]
 801dc00:	9a06      	ldr	r2, [sp, #24]
 801dc02:	441a      	add	r2, r3
 801dc04:	441e      	add	r6, r3
 801dc06:	9206      	str	r2, [sp, #24]
 801dc08:	e78a      	b.n	801db20 <_dtoa_r+0x828>
 801dc0a:	4603      	mov	r3, r0
 801dc0c:	e7f4      	b.n	801dbf8 <_dtoa_r+0x900>
 801dc0e:	9b03      	ldr	r3, [sp, #12]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	46b8      	mov	r8, r7
 801dc14:	dc20      	bgt.n	801dc58 <_dtoa_r+0x960>
 801dc16:	469b      	mov	fp, r3
 801dc18:	9b07      	ldr	r3, [sp, #28]
 801dc1a:	2b02      	cmp	r3, #2
 801dc1c:	dd1e      	ble.n	801dc5c <_dtoa_r+0x964>
 801dc1e:	f1bb 0f00 	cmp.w	fp, #0
 801dc22:	f47f adb1 	bne.w	801d788 <_dtoa_r+0x490>
 801dc26:	4621      	mov	r1, r4
 801dc28:	465b      	mov	r3, fp
 801dc2a:	2205      	movs	r2, #5
 801dc2c:	4648      	mov	r0, r9
 801dc2e:	f000 fa95 	bl	801e15c <__multadd>
 801dc32:	4601      	mov	r1, r0
 801dc34:	4604      	mov	r4, r0
 801dc36:	9802      	ldr	r0, [sp, #8]
 801dc38:	f000 fca0 	bl	801e57c <__mcmp>
 801dc3c:	2800      	cmp	r0, #0
 801dc3e:	f77f ada3 	ble.w	801d788 <_dtoa_r+0x490>
 801dc42:	4656      	mov	r6, sl
 801dc44:	2331      	movs	r3, #49	@ 0x31
 801dc46:	f806 3b01 	strb.w	r3, [r6], #1
 801dc4a:	f108 0801 	add.w	r8, r8, #1
 801dc4e:	e59f      	b.n	801d790 <_dtoa_r+0x498>
 801dc50:	9c03      	ldr	r4, [sp, #12]
 801dc52:	46b8      	mov	r8, r7
 801dc54:	4625      	mov	r5, r4
 801dc56:	e7f4      	b.n	801dc42 <_dtoa_r+0x94a>
 801dc58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	f000 8101 	beq.w	801de66 <_dtoa_r+0xb6e>
 801dc64:	2e00      	cmp	r6, #0
 801dc66:	dd05      	ble.n	801dc74 <_dtoa_r+0x97c>
 801dc68:	4629      	mov	r1, r5
 801dc6a:	4632      	mov	r2, r6
 801dc6c:	4648      	mov	r0, r9
 801dc6e:	f000 fc19 	bl	801e4a4 <__lshift>
 801dc72:	4605      	mov	r5, r0
 801dc74:	9b08      	ldr	r3, [sp, #32]
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d05c      	beq.n	801dd34 <_dtoa_r+0xa3c>
 801dc7a:	6869      	ldr	r1, [r5, #4]
 801dc7c:	4648      	mov	r0, r9
 801dc7e:	f000 fa0b 	bl	801e098 <_Balloc>
 801dc82:	4606      	mov	r6, r0
 801dc84:	b928      	cbnz	r0, 801dc92 <_dtoa_r+0x99a>
 801dc86:	4b82      	ldr	r3, [pc, #520]	@ (801de90 <_dtoa_r+0xb98>)
 801dc88:	4602      	mov	r2, r0
 801dc8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801dc8e:	f7ff bb4a 	b.w	801d326 <_dtoa_r+0x2e>
 801dc92:	692a      	ldr	r2, [r5, #16]
 801dc94:	3202      	adds	r2, #2
 801dc96:	0092      	lsls	r2, r2, #2
 801dc98:	f105 010c 	add.w	r1, r5, #12
 801dc9c:	300c      	adds	r0, #12
 801dc9e:	f7ff fa92 	bl	801d1c6 <memcpy>
 801dca2:	2201      	movs	r2, #1
 801dca4:	4631      	mov	r1, r6
 801dca6:	4648      	mov	r0, r9
 801dca8:	f000 fbfc 	bl	801e4a4 <__lshift>
 801dcac:	f10a 0301 	add.w	r3, sl, #1
 801dcb0:	9300      	str	r3, [sp, #0]
 801dcb2:	eb0a 030b 	add.w	r3, sl, fp
 801dcb6:	9308      	str	r3, [sp, #32]
 801dcb8:	9b04      	ldr	r3, [sp, #16]
 801dcba:	f003 0301 	and.w	r3, r3, #1
 801dcbe:	462f      	mov	r7, r5
 801dcc0:	9306      	str	r3, [sp, #24]
 801dcc2:	4605      	mov	r5, r0
 801dcc4:	9b00      	ldr	r3, [sp, #0]
 801dcc6:	9802      	ldr	r0, [sp, #8]
 801dcc8:	4621      	mov	r1, r4
 801dcca:	f103 3bff 	add.w	fp, r3, #4294967295
 801dcce:	f7ff fa88 	bl	801d1e2 <quorem>
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	3330      	adds	r3, #48	@ 0x30
 801dcd6:	9003      	str	r0, [sp, #12]
 801dcd8:	4639      	mov	r1, r7
 801dcda:	9802      	ldr	r0, [sp, #8]
 801dcdc:	9309      	str	r3, [sp, #36]	@ 0x24
 801dcde:	f000 fc4d 	bl	801e57c <__mcmp>
 801dce2:	462a      	mov	r2, r5
 801dce4:	9004      	str	r0, [sp, #16]
 801dce6:	4621      	mov	r1, r4
 801dce8:	4648      	mov	r0, r9
 801dcea:	f000 fc63 	bl	801e5b4 <__mdiff>
 801dcee:	68c2      	ldr	r2, [r0, #12]
 801dcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcf2:	4606      	mov	r6, r0
 801dcf4:	bb02      	cbnz	r2, 801dd38 <_dtoa_r+0xa40>
 801dcf6:	4601      	mov	r1, r0
 801dcf8:	9802      	ldr	r0, [sp, #8]
 801dcfa:	f000 fc3f 	bl	801e57c <__mcmp>
 801dcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd00:	4602      	mov	r2, r0
 801dd02:	4631      	mov	r1, r6
 801dd04:	4648      	mov	r0, r9
 801dd06:	920c      	str	r2, [sp, #48]	@ 0x30
 801dd08:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd0a:	f000 fa05 	bl	801e118 <_Bfree>
 801dd0e:	9b07      	ldr	r3, [sp, #28]
 801dd10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd12:	9e00      	ldr	r6, [sp, #0]
 801dd14:	ea42 0103 	orr.w	r1, r2, r3
 801dd18:	9b06      	ldr	r3, [sp, #24]
 801dd1a:	4319      	orrs	r1, r3
 801dd1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd1e:	d10d      	bne.n	801dd3c <_dtoa_r+0xa44>
 801dd20:	2b39      	cmp	r3, #57	@ 0x39
 801dd22:	d027      	beq.n	801dd74 <_dtoa_r+0xa7c>
 801dd24:	9a04      	ldr	r2, [sp, #16]
 801dd26:	2a00      	cmp	r2, #0
 801dd28:	dd01      	ble.n	801dd2e <_dtoa_r+0xa36>
 801dd2a:	9b03      	ldr	r3, [sp, #12]
 801dd2c:	3331      	adds	r3, #49	@ 0x31
 801dd2e:	f88b 3000 	strb.w	r3, [fp]
 801dd32:	e52e      	b.n	801d792 <_dtoa_r+0x49a>
 801dd34:	4628      	mov	r0, r5
 801dd36:	e7b9      	b.n	801dcac <_dtoa_r+0x9b4>
 801dd38:	2201      	movs	r2, #1
 801dd3a:	e7e2      	b.n	801dd02 <_dtoa_r+0xa0a>
 801dd3c:	9904      	ldr	r1, [sp, #16]
 801dd3e:	2900      	cmp	r1, #0
 801dd40:	db04      	blt.n	801dd4c <_dtoa_r+0xa54>
 801dd42:	9807      	ldr	r0, [sp, #28]
 801dd44:	4301      	orrs	r1, r0
 801dd46:	9806      	ldr	r0, [sp, #24]
 801dd48:	4301      	orrs	r1, r0
 801dd4a:	d120      	bne.n	801dd8e <_dtoa_r+0xa96>
 801dd4c:	2a00      	cmp	r2, #0
 801dd4e:	ddee      	ble.n	801dd2e <_dtoa_r+0xa36>
 801dd50:	9902      	ldr	r1, [sp, #8]
 801dd52:	9300      	str	r3, [sp, #0]
 801dd54:	2201      	movs	r2, #1
 801dd56:	4648      	mov	r0, r9
 801dd58:	f000 fba4 	bl	801e4a4 <__lshift>
 801dd5c:	4621      	mov	r1, r4
 801dd5e:	9002      	str	r0, [sp, #8]
 801dd60:	f000 fc0c 	bl	801e57c <__mcmp>
 801dd64:	2800      	cmp	r0, #0
 801dd66:	9b00      	ldr	r3, [sp, #0]
 801dd68:	dc02      	bgt.n	801dd70 <_dtoa_r+0xa78>
 801dd6a:	d1e0      	bne.n	801dd2e <_dtoa_r+0xa36>
 801dd6c:	07da      	lsls	r2, r3, #31
 801dd6e:	d5de      	bpl.n	801dd2e <_dtoa_r+0xa36>
 801dd70:	2b39      	cmp	r3, #57	@ 0x39
 801dd72:	d1da      	bne.n	801dd2a <_dtoa_r+0xa32>
 801dd74:	2339      	movs	r3, #57	@ 0x39
 801dd76:	f88b 3000 	strb.w	r3, [fp]
 801dd7a:	4633      	mov	r3, r6
 801dd7c:	461e      	mov	r6, r3
 801dd7e:	3b01      	subs	r3, #1
 801dd80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801dd84:	2a39      	cmp	r2, #57	@ 0x39
 801dd86:	d04e      	beq.n	801de26 <_dtoa_r+0xb2e>
 801dd88:	3201      	adds	r2, #1
 801dd8a:	701a      	strb	r2, [r3, #0]
 801dd8c:	e501      	b.n	801d792 <_dtoa_r+0x49a>
 801dd8e:	2a00      	cmp	r2, #0
 801dd90:	dd03      	ble.n	801dd9a <_dtoa_r+0xaa2>
 801dd92:	2b39      	cmp	r3, #57	@ 0x39
 801dd94:	d0ee      	beq.n	801dd74 <_dtoa_r+0xa7c>
 801dd96:	3301      	adds	r3, #1
 801dd98:	e7c9      	b.n	801dd2e <_dtoa_r+0xa36>
 801dd9a:	9a00      	ldr	r2, [sp, #0]
 801dd9c:	9908      	ldr	r1, [sp, #32]
 801dd9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dda2:	428a      	cmp	r2, r1
 801dda4:	d028      	beq.n	801ddf8 <_dtoa_r+0xb00>
 801dda6:	9902      	ldr	r1, [sp, #8]
 801dda8:	2300      	movs	r3, #0
 801ddaa:	220a      	movs	r2, #10
 801ddac:	4648      	mov	r0, r9
 801ddae:	f000 f9d5 	bl	801e15c <__multadd>
 801ddb2:	42af      	cmp	r7, r5
 801ddb4:	9002      	str	r0, [sp, #8]
 801ddb6:	f04f 0300 	mov.w	r3, #0
 801ddba:	f04f 020a 	mov.w	r2, #10
 801ddbe:	4639      	mov	r1, r7
 801ddc0:	4648      	mov	r0, r9
 801ddc2:	d107      	bne.n	801ddd4 <_dtoa_r+0xadc>
 801ddc4:	f000 f9ca 	bl	801e15c <__multadd>
 801ddc8:	4607      	mov	r7, r0
 801ddca:	4605      	mov	r5, r0
 801ddcc:	9b00      	ldr	r3, [sp, #0]
 801ddce:	3301      	adds	r3, #1
 801ddd0:	9300      	str	r3, [sp, #0]
 801ddd2:	e777      	b.n	801dcc4 <_dtoa_r+0x9cc>
 801ddd4:	f000 f9c2 	bl	801e15c <__multadd>
 801ddd8:	4629      	mov	r1, r5
 801ddda:	4607      	mov	r7, r0
 801dddc:	2300      	movs	r3, #0
 801ddde:	220a      	movs	r2, #10
 801dde0:	4648      	mov	r0, r9
 801dde2:	f000 f9bb 	bl	801e15c <__multadd>
 801dde6:	4605      	mov	r5, r0
 801dde8:	e7f0      	b.n	801ddcc <_dtoa_r+0xad4>
 801ddea:	f1bb 0f00 	cmp.w	fp, #0
 801ddee:	bfcc      	ite	gt
 801ddf0:	465e      	movgt	r6, fp
 801ddf2:	2601      	movle	r6, #1
 801ddf4:	4456      	add	r6, sl
 801ddf6:	2700      	movs	r7, #0
 801ddf8:	9902      	ldr	r1, [sp, #8]
 801ddfa:	9300      	str	r3, [sp, #0]
 801ddfc:	2201      	movs	r2, #1
 801ddfe:	4648      	mov	r0, r9
 801de00:	f000 fb50 	bl	801e4a4 <__lshift>
 801de04:	4621      	mov	r1, r4
 801de06:	9002      	str	r0, [sp, #8]
 801de08:	f000 fbb8 	bl	801e57c <__mcmp>
 801de0c:	2800      	cmp	r0, #0
 801de0e:	dcb4      	bgt.n	801dd7a <_dtoa_r+0xa82>
 801de10:	d102      	bne.n	801de18 <_dtoa_r+0xb20>
 801de12:	9b00      	ldr	r3, [sp, #0]
 801de14:	07db      	lsls	r3, r3, #31
 801de16:	d4b0      	bmi.n	801dd7a <_dtoa_r+0xa82>
 801de18:	4633      	mov	r3, r6
 801de1a:	461e      	mov	r6, r3
 801de1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de20:	2a30      	cmp	r2, #48	@ 0x30
 801de22:	d0fa      	beq.n	801de1a <_dtoa_r+0xb22>
 801de24:	e4b5      	b.n	801d792 <_dtoa_r+0x49a>
 801de26:	459a      	cmp	sl, r3
 801de28:	d1a8      	bne.n	801dd7c <_dtoa_r+0xa84>
 801de2a:	2331      	movs	r3, #49	@ 0x31
 801de2c:	f108 0801 	add.w	r8, r8, #1
 801de30:	f88a 3000 	strb.w	r3, [sl]
 801de34:	e4ad      	b.n	801d792 <_dtoa_r+0x49a>
 801de36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801de38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801de94 <_dtoa_r+0xb9c>
 801de3c:	b11b      	cbz	r3, 801de46 <_dtoa_r+0xb4e>
 801de3e:	f10a 0308 	add.w	r3, sl, #8
 801de42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801de44:	6013      	str	r3, [r2, #0]
 801de46:	4650      	mov	r0, sl
 801de48:	b017      	add	sp, #92	@ 0x5c
 801de4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de4e:	9b07      	ldr	r3, [sp, #28]
 801de50:	2b01      	cmp	r3, #1
 801de52:	f77f ae2e 	ble.w	801dab2 <_dtoa_r+0x7ba>
 801de56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de58:	9308      	str	r3, [sp, #32]
 801de5a:	2001      	movs	r0, #1
 801de5c:	e64d      	b.n	801dafa <_dtoa_r+0x802>
 801de5e:	f1bb 0f00 	cmp.w	fp, #0
 801de62:	f77f aed9 	ble.w	801dc18 <_dtoa_r+0x920>
 801de66:	4656      	mov	r6, sl
 801de68:	9802      	ldr	r0, [sp, #8]
 801de6a:	4621      	mov	r1, r4
 801de6c:	f7ff f9b9 	bl	801d1e2 <quorem>
 801de70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801de74:	f806 3b01 	strb.w	r3, [r6], #1
 801de78:	eba6 020a 	sub.w	r2, r6, sl
 801de7c:	4593      	cmp	fp, r2
 801de7e:	ddb4      	ble.n	801ddea <_dtoa_r+0xaf2>
 801de80:	9902      	ldr	r1, [sp, #8]
 801de82:	2300      	movs	r3, #0
 801de84:	220a      	movs	r2, #10
 801de86:	4648      	mov	r0, r9
 801de88:	f000 f968 	bl	801e15c <__multadd>
 801de8c:	9002      	str	r0, [sp, #8]
 801de8e:	e7eb      	b.n	801de68 <_dtoa_r+0xb70>
 801de90:	080202c0 	.word	0x080202c0
 801de94:	08020244 	.word	0x08020244

0801de98 <_free_r>:
 801de98:	b538      	push	{r3, r4, r5, lr}
 801de9a:	4605      	mov	r5, r0
 801de9c:	2900      	cmp	r1, #0
 801de9e:	d041      	beq.n	801df24 <_free_r+0x8c>
 801dea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dea4:	1f0c      	subs	r4, r1, #4
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	bfb8      	it	lt
 801deaa:	18e4      	addlt	r4, r4, r3
 801deac:	f000 f8e8 	bl	801e080 <__malloc_lock>
 801deb0:	4a1d      	ldr	r2, [pc, #116]	@ (801df28 <_free_r+0x90>)
 801deb2:	6813      	ldr	r3, [r2, #0]
 801deb4:	b933      	cbnz	r3, 801dec4 <_free_r+0x2c>
 801deb6:	6063      	str	r3, [r4, #4]
 801deb8:	6014      	str	r4, [r2, #0]
 801deba:	4628      	mov	r0, r5
 801debc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dec0:	f000 b8e4 	b.w	801e08c <__malloc_unlock>
 801dec4:	42a3      	cmp	r3, r4
 801dec6:	d908      	bls.n	801deda <_free_r+0x42>
 801dec8:	6820      	ldr	r0, [r4, #0]
 801deca:	1821      	adds	r1, r4, r0
 801decc:	428b      	cmp	r3, r1
 801dece:	bf01      	itttt	eq
 801ded0:	6819      	ldreq	r1, [r3, #0]
 801ded2:	685b      	ldreq	r3, [r3, #4]
 801ded4:	1809      	addeq	r1, r1, r0
 801ded6:	6021      	streq	r1, [r4, #0]
 801ded8:	e7ed      	b.n	801deb6 <_free_r+0x1e>
 801deda:	461a      	mov	r2, r3
 801dedc:	685b      	ldr	r3, [r3, #4]
 801dede:	b10b      	cbz	r3, 801dee4 <_free_r+0x4c>
 801dee0:	42a3      	cmp	r3, r4
 801dee2:	d9fa      	bls.n	801deda <_free_r+0x42>
 801dee4:	6811      	ldr	r1, [r2, #0]
 801dee6:	1850      	adds	r0, r2, r1
 801dee8:	42a0      	cmp	r0, r4
 801deea:	d10b      	bne.n	801df04 <_free_r+0x6c>
 801deec:	6820      	ldr	r0, [r4, #0]
 801deee:	4401      	add	r1, r0
 801def0:	1850      	adds	r0, r2, r1
 801def2:	4283      	cmp	r3, r0
 801def4:	6011      	str	r1, [r2, #0]
 801def6:	d1e0      	bne.n	801deba <_free_r+0x22>
 801def8:	6818      	ldr	r0, [r3, #0]
 801defa:	685b      	ldr	r3, [r3, #4]
 801defc:	6053      	str	r3, [r2, #4]
 801defe:	4408      	add	r0, r1
 801df00:	6010      	str	r0, [r2, #0]
 801df02:	e7da      	b.n	801deba <_free_r+0x22>
 801df04:	d902      	bls.n	801df0c <_free_r+0x74>
 801df06:	230c      	movs	r3, #12
 801df08:	602b      	str	r3, [r5, #0]
 801df0a:	e7d6      	b.n	801deba <_free_r+0x22>
 801df0c:	6820      	ldr	r0, [r4, #0]
 801df0e:	1821      	adds	r1, r4, r0
 801df10:	428b      	cmp	r3, r1
 801df12:	bf04      	itt	eq
 801df14:	6819      	ldreq	r1, [r3, #0]
 801df16:	685b      	ldreq	r3, [r3, #4]
 801df18:	6063      	str	r3, [r4, #4]
 801df1a:	bf04      	itt	eq
 801df1c:	1809      	addeq	r1, r1, r0
 801df1e:	6021      	streq	r1, [r4, #0]
 801df20:	6054      	str	r4, [r2, #4]
 801df22:	e7ca      	b.n	801deba <_free_r+0x22>
 801df24:	bd38      	pop	{r3, r4, r5, pc}
 801df26:	bf00      	nop
 801df28:	20001908 	.word	0x20001908

0801df2c <malloc>:
 801df2c:	4b02      	ldr	r3, [pc, #8]	@ (801df38 <malloc+0xc>)
 801df2e:	4601      	mov	r1, r0
 801df30:	6818      	ldr	r0, [r3, #0]
 801df32:	f000 b825 	b.w	801df80 <_malloc_r>
 801df36:	bf00      	nop
 801df38:	2000002c 	.word	0x2000002c

0801df3c <sbrk_aligned>:
 801df3c:	b570      	push	{r4, r5, r6, lr}
 801df3e:	4e0f      	ldr	r6, [pc, #60]	@ (801df7c <sbrk_aligned+0x40>)
 801df40:	460c      	mov	r4, r1
 801df42:	6831      	ldr	r1, [r6, #0]
 801df44:	4605      	mov	r5, r0
 801df46:	b911      	cbnz	r1, 801df4e <sbrk_aligned+0x12>
 801df48:	f000 fe1a 	bl	801eb80 <_sbrk_r>
 801df4c:	6030      	str	r0, [r6, #0]
 801df4e:	4621      	mov	r1, r4
 801df50:	4628      	mov	r0, r5
 801df52:	f000 fe15 	bl	801eb80 <_sbrk_r>
 801df56:	1c43      	adds	r3, r0, #1
 801df58:	d103      	bne.n	801df62 <sbrk_aligned+0x26>
 801df5a:	f04f 34ff 	mov.w	r4, #4294967295
 801df5e:	4620      	mov	r0, r4
 801df60:	bd70      	pop	{r4, r5, r6, pc}
 801df62:	1cc4      	adds	r4, r0, #3
 801df64:	f024 0403 	bic.w	r4, r4, #3
 801df68:	42a0      	cmp	r0, r4
 801df6a:	d0f8      	beq.n	801df5e <sbrk_aligned+0x22>
 801df6c:	1a21      	subs	r1, r4, r0
 801df6e:	4628      	mov	r0, r5
 801df70:	f000 fe06 	bl	801eb80 <_sbrk_r>
 801df74:	3001      	adds	r0, #1
 801df76:	d1f2      	bne.n	801df5e <sbrk_aligned+0x22>
 801df78:	e7ef      	b.n	801df5a <sbrk_aligned+0x1e>
 801df7a:	bf00      	nop
 801df7c:	20001904 	.word	0x20001904

0801df80 <_malloc_r>:
 801df80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df84:	1ccd      	adds	r5, r1, #3
 801df86:	f025 0503 	bic.w	r5, r5, #3
 801df8a:	3508      	adds	r5, #8
 801df8c:	2d0c      	cmp	r5, #12
 801df8e:	bf38      	it	cc
 801df90:	250c      	movcc	r5, #12
 801df92:	2d00      	cmp	r5, #0
 801df94:	4606      	mov	r6, r0
 801df96:	db01      	blt.n	801df9c <_malloc_r+0x1c>
 801df98:	42a9      	cmp	r1, r5
 801df9a:	d904      	bls.n	801dfa6 <_malloc_r+0x26>
 801df9c:	230c      	movs	r3, #12
 801df9e:	6033      	str	r3, [r6, #0]
 801dfa0:	2000      	movs	r0, #0
 801dfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e07c <_malloc_r+0xfc>
 801dfaa:	f000 f869 	bl	801e080 <__malloc_lock>
 801dfae:	f8d8 3000 	ldr.w	r3, [r8]
 801dfb2:	461c      	mov	r4, r3
 801dfb4:	bb44      	cbnz	r4, 801e008 <_malloc_r+0x88>
 801dfb6:	4629      	mov	r1, r5
 801dfb8:	4630      	mov	r0, r6
 801dfba:	f7ff ffbf 	bl	801df3c <sbrk_aligned>
 801dfbe:	1c43      	adds	r3, r0, #1
 801dfc0:	4604      	mov	r4, r0
 801dfc2:	d158      	bne.n	801e076 <_malloc_r+0xf6>
 801dfc4:	f8d8 4000 	ldr.w	r4, [r8]
 801dfc8:	4627      	mov	r7, r4
 801dfca:	2f00      	cmp	r7, #0
 801dfcc:	d143      	bne.n	801e056 <_malloc_r+0xd6>
 801dfce:	2c00      	cmp	r4, #0
 801dfd0:	d04b      	beq.n	801e06a <_malloc_r+0xea>
 801dfd2:	6823      	ldr	r3, [r4, #0]
 801dfd4:	4639      	mov	r1, r7
 801dfd6:	4630      	mov	r0, r6
 801dfd8:	eb04 0903 	add.w	r9, r4, r3
 801dfdc:	f000 fdd0 	bl	801eb80 <_sbrk_r>
 801dfe0:	4581      	cmp	r9, r0
 801dfe2:	d142      	bne.n	801e06a <_malloc_r+0xea>
 801dfe4:	6821      	ldr	r1, [r4, #0]
 801dfe6:	1a6d      	subs	r5, r5, r1
 801dfe8:	4629      	mov	r1, r5
 801dfea:	4630      	mov	r0, r6
 801dfec:	f7ff ffa6 	bl	801df3c <sbrk_aligned>
 801dff0:	3001      	adds	r0, #1
 801dff2:	d03a      	beq.n	801e06a <_malloc_r+0xea>
 801dff4:	6823      	ldr	r3, [r4, #0]
 801dff6:	442b      	add	r3, r5
 801dff8:	6023      	str	r3, [r4, #0]
 801dffa:	f8d8 3000 	ldr.w	r3, [r8]
 801dffe:	685a      	ldr	r2, [r3, #4]
 801e000:	bb62      	cbnz	r2, 801e05c <_malloc_r+0xdc>
 801e002:	f8c8 7000 	str.w	r7, [r8]
 801e006:	e00f      	b.n	801e028 <_malloc_r+0xa8>
 801e008:	6822      	ldr	r2, [r4, #0]
 801e00a:	1b52      	subs	r2, r2, r5
 801e00c:	d420      	bmi.n	801e050 <_malloc_r+0xd0>
 801e00e:	2a0b      	cmp	r2, #11
 801e010:	d917      	bls.n	801e042 <_malloc_r+0xc2>
 801e012:	1961      	adds	r1, r4, r5
 801e014:	42a3      	cmp	r3, r4
 801e016:	6025      	str	r5, [r4, #0]
 801e018:	bf18      	it	ne
 801e01a:	6059      	strne	r1, [r3, #4]
 801e01c:	6863      	ldr	r3, [r4, #4]
 801e01e:	bf08      	it	eq
 801e020:	f8c8 1000 	streq.w	r1, [r8]
 801e024:	5162      	str	r2, [r4, r5]
 801e026:	604b      	str	r3, [r1, #4]
 801e028:	4630      	mov	r0, r6
 801e02a:	f000 f82f 	bl	801e08c <__malloc_unlock>
 801e02e:	f104 000b 	add.w	r0, r4, #11
 801e032:	1d23      	adds	r3, r4, #4
 801e034:	f020 0007 	bic.w	r0, r0, #7
 801e038:	1ac2      	subs	r2, r0, r3
 801e03a:	bf1c      	itt	ne
 801e03c:	1a1b      	subne	r3, r3, r0
 801e03e:	50a3      	strne	r3, [r4, r2]
 801e040:	e7af      	b.n	801dfa2 <_malloc_r+0x22>
 801e042:	6862      	ldr	r2, [r4, #4]
 801e044:	42a3      	cmp	r3, r4
 801e046:	bf0c      	ite	eq
 801e048:	f8c8 2000 	streq.w	r2, [r8]
 801e04c:	605a      	strne	r2, [r3, #4]
 801e04e:	e7eb      	b.n	801e028 <_malloc_r+0xa8>
 801e050:	4623      	mov	r3, r4
 801e052:	6864      	ldr	r4, [r4, #4]
 801e054:	e7ae      	b.n	801dfb4 <_malloc_r+0x34>
 801e056:	463c      	mov	r4, r7
 801e058:	687f      	ldr	r7, [r7, #4]
 801e05a:	e7b6      	b.n	801dfca <_malloc_r+0x4a>
 801e05c:	461a      	mov	r2, r3
 801e05e:	685b      	ldr	r3, [r3, #4]
 801e060:	42a3      	cmp	r3, r4
 801e062:	d1fb      	bne.n	801e05c <_malloc_r+0xdc>
 801e064:	2300      	movs	r3, #0
 801e066:	6053      	str	r3, [r2, #4]
 801e068:	e7de      	b.n	801e028 <_malloc_r+0xa8>
 801e06a:	230c      	movs	r3, #12
 801e06c:	6033      	str	r3, [r6, #0]
 801e06e:	4630      	mov	r0, r6
 801e070:	f000 f80c 	bl	801e08c <__malloc_unlock>
 801e074:	e794      	b.n	801dfa0 <_malloc_r+0x20>
 801e076:	6005      	str	r5, [r0, #0]
 801e078:	e7d6      	b.n	801e028 <_malloc_r+0xa8>
 801e07a:	bf00      	nop
 801e07c:	20001908 	.word	0x20001908

0801e080 <__malloc_lock>:
 801e080:	4801      	ldr	r0, [pc, #4]	@ (801e088 <__malloc_lock+0x8>)
 801e082:	f7ff b89e 	b.w	801d1c2 <__retarget_lock_acquire_recursive>
 801e086:	bf00      	nop
 801e088:	20001900 	.word	0x20001900

0801e08c <__malloc_unlock>:
 801e08c:	4801      	ldr	r0, [pc, #4]	@ (801e094 <__malloc_unlock+0x8>)
 801e08e:	f7ff b899 	b.w	801d1c4 <__retarget_lock_release_recursive>
 801e092:	bf00      	nop
 801e094:	20001900 	.word	0x20001900

0801e098 <_Balloc>:
 801e098:	b570      	push	{r4, r5, r6, lr}
 801e09a:	69c6      	ldr	r6, [r0, #28]
 801e09c:	4604      	mov	r4, r0
 801e09e:	460d      	mov	r5, r1
 801e0a0:	b976      	cbnz	r6, 801e0c0 <_Balloc+0x28>
 801e0a2:	2010      	movs	r0, #16
 801e0a4:	f7ff ff42 	bl	801df2c <malloc>
 801e0a8:	4602      	mov	r2, r0
 801e0aa:	61e0      	str	r0, [r4, #28]
 801e0ac:	b920      	cbnz	r0, 801e0b8 <_Balloc+0x20>
 801e0ae:	4b18      	ldr	r3, [pc, #96]	@ (801e110 <_Balloc+0x78>)
 801e0b0:	4818      	ldr	r0, [pc, #96]	@ (801e114 <_Balloc+0x7c>)
 801e0b2:	216b      	movs	r1, #107	@ 0x6b
 801e0b4:	f000 fd74 	bl	801eba0 <__assert_func>
 801e0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e0bc:	6006      	str	r6, [r0, #0]
 801e0be:	60c6      	str	r6, [r0, #12]
 801e0c0:	69e6      	ldr	r6, [r4, #28]
 801e0c2:	68f3      	ldr	r3, [r6, #12]
 801e0c4:	b183      	cbz	r3, 801e0e8 <_Balloc+0x50>
 801e0c6:	69e3      	ldr	r3, [r4, #28]
 801e0c8:	68db      	ldr	r3, [r3, #12]
 801e0ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e0ce:	b9b8      	cbnz	r0, 801e100 <_Balloc+0x68>
 801e0d0:	2101      	movs	r1, #1
 801e0d2:	fa01 f605 	lsl.w	r6, r1, r5
 801e0d6:	1d72      	adds	r2, r6, #5
 801e0d8:	0092      	lsls	r2, r2, #2
 801e0da:	4620      	mov	r0, r4
 801e0dc:	f000 fd7e 	bl	801ebdc <_calloc_r>
 801e0e0:	b160      	cbz	r0, 801e0fc <_Balloc+0x64>
 801e0e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e0e6:	e00e      	b.n	801e106 <_Balloc+0x6e>
 801e0e8:	2221      	movs	r2, #33	@ 0x21
 801e0ea:	2104      	movs	r1, #4
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f000 fd75 	bl	801ebdc <_calloc_r>
 801e0f2:	69e3      	ldr	r3, [r4, #28]
 801e0f4:	60f0      	str	r0, [r6, #12]
 801e0f6:	68db      	ldr	r3, [r3, #12]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d1e4      	bne.n	801e0c6 <_Balloc+0x2e>
 801e0fc:	2000      	movs	r0, #0
 801e0fe:	bd70      	pop	{r4, r5, r6, pc}
 801e100:	6802      	ldr	r2, [r0, #0]
 801e102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e106:	2300      	movs	r3, #0
 801e108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e10c:	e7f7      	b.n	801e0fe <_Balloc+0x66>
 801e10e:	bf00      	nop
 801e110:	08020251 	.word	0x08020251
 801e114:	080202d1 	.word	0x080202d1

0801e118 <_Bfree>:
 801e118:	b570      	push	{r4, r5, r6, lr}
 801e11a:	69c6      	ldr	r6, [r0, #28]
 801e11c:	4605      	mov	r5, r0
 801e11e:	460c      	mov	r4, r1
 801e120:	b976      	cbnz	r6, 801e140 <_Bfree+0x28>
 801e122:	2010      	movs	r0, #16
 801e124:	f7ff ff02 	bl	801df2c <malloc>
 801e128:	4602      	mov	r2, r0
 801e12a:	61e8      	str	r0, [r5, #28]
 801e12c:	b920      	cbnz	r0, 801e138 <_Bfree+0x20>
 801e12e:	4b09      	ldr	r3, [pc, #36]	@ (801e154 <_Bfree+0x3c>)
 801e130:	4809      	ldr	r0, [pc, #36]	@ (801e158 <_Bfree+0x40>)
 801e132:	218f      	movs	r1, #143	@ 0x8f
 801e134:	f000 fd34 	bl	801eba0 <__assert_func>
 801e138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e13c:	6006      	str	r6, [r0, #0]
 801e13e:	60c6      	str	r6, [r0, #12]
 801e140:	b13c      	cbz	r4, 801e152 <_Bfree+0x3a>
 801e142:	69eb      	ldr	r3, [r5, #28]
 801e144:	6862      	ldr	r2, [r4, #4]
 801e146:	68db      	ldr	r3, [r3, #12]
 801e148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e14c:	6021      	str	r1, [r4, #0]
 801e14e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e152:	bd70      	pop	{r4, r5, r6, pc}
 801e154:	08020251 	.word	0x08020251
 801e158:	080202d1 	.word	0x080202d1

0801e15c <__multadd>:
 801e15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e160:	690d      	ldr	r5, [r1, #16]
 801e162:	4607      	mov	r7, r0
 801e164:	460c      	mov	r4, r1
 801e166:	461e      	mov	r6, r3
 801e168:	f101 0c14 	add.w	ip, r1, #20
 801e16c:	2000      	movs	r0, #0
 801e16e:	f8dc 3000 	ldr.w	r3, [ip]
 801e172:	b299      	uxth	r1, r3
 801e174:	fb02 6101 	mla	r1, r2, r1, r6
 801e178:	0c1e      	lsrs	r6, r3, #16
 801e17a:	0c0b      	lsrs	r3, r1, #16
 801e17c:	fb02 3306 	mla	r3, r2, r6, r3
 801e180:	b289      	uxth	r1, r1
 801e182:	3001      	adds	r0, #1
 801e184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e188:	4285      	cmp	r5, r0
 801e18a:	f84c 1b04 	str.w	r1, [ip], #4
 801e18e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e192:	dcec      	bgt.n	801e16e <__multadd+0x12>
 801e194:	b30e      	cbz	r6, 801e1da <__multadd+0x7e>
 801e196:	68a3      	ldr	r3, [r4, #8]
 801e198:	42ab      	cmp	r3, r5
 801e19a:	dc19      	bgt.n	801e1d0 <__multadd+0x74>
 801e19c:	6861      	ldr	r1, [r4, #4]
 801e19e:	4638      	mov	r0, r7
 801e1a0:	3101      	adds	r1, #1
 801e1a2:	f7ff ff79 	bl	801e098 <_Balloc>
 801e1a6:	4680      	mov	r8, r0
 801e1a8:	b928      	cbnz	r0, 801e1b6 <__multadd+0x5a>
 801e1aa:	4602      	mov	r2, r0
 801e1ac:	4b0c      	ldr	r3, [pc, #48]	@ (801e1e0 <__multadd+0x84>)
 801e1ae:	480d      	ldr	r0, [pc, #52]	@ (801e1e4 <__multadd+0x88>)
 801e1b0:	21ba      	movs	r1, #186	@ 0xba
 801e1b2:	f000 fcf5 	bl	801eba0 <__assert_func>
 801e1b6:	6922      	ldr	r2, [r4, #16]
 801e1b8:	3202      	adds	r2, #2
 801e1ba:	f104 010c 	add.w	r1, r4, #12
 801e1be:	0092      	lsls	r2, r2, #2
 801e1c0:	300c      	adds	r0, #12
 801e1c2:	f7ff f800 	bl	801d1c6 <memcpy>
 801e1c6:	4621      	mov	r1, r4
 801e1c8:	4638      	mov	r0, r7
 801e1ca:	f7ff ffa5 	bl	801e118 <_Bfree>
 801e1ce:	4644      	mov	r4, r8
 801e1d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e1d4:	3501      	adds	r5, #1
 801e1d6:	615e      	str	r6, [r3, #20]
 801e1d8:	6125      	str	r5, [r4, #16]
 801e1da:	4620      	mov	r0, r4
 801e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1e0:	080202c0 	.word	0x080202c0
 801e1e4:	080202d1 	.word	0x080202d1

0801e1e8 <__hi0bits>:
 801e1e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	bf36      	itet	cc
 801e1f0:	0403      	lslcc	r3, r0, #16
 801e1f2:	2000      	movcs	r0, #0
 801e1f4:	2010      	movcc	r0, #16
 801e1f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e1fa:	bf3c      	itt	cc
 801e1fc:	021b      	lslcc	r3, r3, #8
 801e1fe:	3008      	addcc	r0, #8
 801e200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e204:	bf3c      	itt	cc
 801e206:	011b      	lslcc	r3, r3, #4
 801e208:	3004      	addcc	r0, #4
 801e20a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e20e:	bf3c      	itt	cc
 801e210:	009b      	lslcc	r3, r3, #2
 801e212:	3002      	addcc	r0, #2
 801e214:	2b00      	cmp	r3, #0
 801e216:	db05      	blt.n	801e224 <__hi0bits+0x3c>
 801e218:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e21c:	f100 0001 	add.w	r0, r0, #1
 801e220:	bf08      	it	eq
 801e222:	2020      	moveq	r0, #32
 801e224:	4770      	bx	lr

0801e226 <__lo0bits>:
 801e226:	6803      	ldr	r3, [r0, #0]
 801e228:	4602      	mov	r2, r0
 801e22a:	f013 0007 	ands.w	r0, r3, #7
 801e22e:	d00b      	beq.n	801e248 <__lo0bits+0x22>
 801e230:	07d9      	lsls	r1, r3, #31
 801e232:	d421      	bmi.n	801e278 <__lo0bits+0x52>
 801e234:	0798      	lsls	r0, r3, #30
 801e236:	bf49      	itett	mi
 801e238:	085b      	lsrmi	r3, r3, #1
 801e23a:	089b      	lsrpl	r3, r3, #2
 801e23c:	2001      	movmi	r0, #1
 801e23e:	6013      	strmi	r3, [r2, #0]
 801e240:	bf5c      	itt	pl
 801e242:	6013      	strpl	r3, [r2, #0]
 801e244:	2002      	movpl	r0, #2
 801e246:	4770      	bx	lr
 801e248:	b299      	uxth	r1, r3
 801e24a:	b909      	cbnz	r1, 801e250 <__lo0bits+0x2a>
 801e24c:	0c1b      	lsrs	r3, r3, #16
 801e24e:	2010      	movs	r0, #16
 801e250:	b2d9      	uxtb	r1, r3
 801e252:	b909      	cbnz	r1, 801e258 <__lo0bits+0x32>
 801e254:	3008      	adds	r0, #8
 801e256:	0a1b      	lsrs	r3, r3, #8
 801e258:	0719      	lsls	r1, r3, #28
 801e25a:	bf04      	itt	eq
 801e25c:	091b      	lsreq	r3, r3, #4
 801e25e:	3004      	addeq	r0, #4
 801e260:	0799      	lsls	r1, r3, #30
 801e262:	bf04      	itt	eq
 801e264:	089b      	lsreq	r3, r3, #2
 801e266:	3002      	addeq	r0, #2
 801e268:	07d9      	lsls	r1, r3, #31
 801e26a:	d403      	bmi.n	801e274 <__lo0bits+0x4e>
 801e26c:	085b      	lsrs	r3, r3, #1
 801e26e:	f100 0001 	add.w	r0, r0, #1
 801e272:	d003      	beq.n	801e27c <__lo0bits+0x56>
 801e274:	6013      	str	r3, [r2, #0]
 801e276:	4770      	bx	lr
 801e278:	2000      	movs	r0, #0
 801e27a:	4770      	bx	lr
 801e27c:	2020      	movs	r0, #32
 801e27e:	4770      	bx	lr

0801e280 <__i2b>:
 801e280:	b510      	push	{r4, lr}
 801e282:	460c      	mov	r4, r1
 801e284:	2101      	movs	r1, #1
 801e286:	f7ff ff07 	bl	801e098 <_Balloc>
 801e28a:	4602      	mov	r2, r0
 801e28c:	b928      	cbnz	r0, 801e29a <__i2b+0x1a>
 801e28e:	4b05      	ldr	r3, [pc, #20]	@ (801e2a4 <__i2b+0x24>)
 801e290:	4805      	ldr	r0, [pc, #20]	@ (801e2a8 <__i2b+0x28>)
 801e292:	f240 1145 	movw	r1, #325	@ 0x145
 801e296:	f000 fc83 	bl	801eba0 <__assert_func>
 801e29a:	2301      	movs	r3, #1
 801e29c:	6144      	str	r4, [r0, #20]
 801e29e:	6103      	str	r3, [r0, #16]
 801e2a0:	bd10      	pop	{r4, pc}
 801e2a2:	bf00      	nop
 801e2a4:	080202c0 	.word	0x080202c0
 801e2a8:	080202d1 	.word	0x080202d1

0801e2ac <__multiply>:
 801e2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b0:	4617      	mov	r7, r2
 801e2b2:	690a      	ldr	r2, [r1, #16]
 801e2b4:	693b      	ldr	r3, [r7, #16]
 801e2b6:	429a      	cmp	r2, r3
 801e2b8:	bfa8      	it	ge
 801e2ba:	463b      	movge	r3, r7
 801e2bc:	4689      	mov	r9, r1
 801e2be:	bfa4      	itt	ge
 801e2c0:	460f      	movge	r7, r1
 801e2c2:	4699      	movge	r9, r3
 801e2c4:	693d      	ldr	r5, [r7, #16]
 801e2c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e2ca:	68bb      	ldr	r3, [r7, #8]
 801e2cc:	6879      	ldr	r1, [r7, #4]
 801e2ce:	eb05 060a 	add.w	r6, r5, sl
 801e2d2:	42b3      	cmp	r3, r6
 801e2d4:	b085      	sub	sp, #20
 801e2d6:	bfb8      	it	lt
 801e2d8:	3101      	addlt	r1, #1
 801e2da:	f7ff fedd 	bl	801e098 <_Balloc>
 801e2de:	b930      	cbnz	r0, 801e2ee <__multiply+0x42>
 801e2e0:	4602      	mov	r2, r0
 801e2e2:	4b41      	ldr	r3, [pc, #260]	@ (801e3e8 <__multiply+0x13c>)
 801e2e4:	4841      	ldr	r0, [pc, #260]	@ (801e3ec <__multiply+0x140>)
 801e2e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e2ea:	f000 fc59 	bl	801eba0 <__assert_func>
 801e2ee:	f100 0414 	add.w	r4, r0, #20
 801e2f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801e2f6:	4623      	mov	r3, r4
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	4573      	cmp	r3, lr
 801e2fc:	d320      	bcc.n	801e340 <__multiply+0x94>
 801e2fe:	f107 0814 	add.w	r8, r7, #20
 801e302:	f109 0114 	add.w	r1, r9, #20
 801e306:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801e30a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801e30e:	9302      	str	r3, [sp, #8]
 801e310:	1beb      	subs	r3, r5, r7
 801e312:	3b15      	subs	r3, #21
 801e314:	f023 0303 	bic.w	r3, r3, #3
 801e318:	3304      	adds	r3, #4
 801e31a:	3715      	adds	r7, #21
 801e31c:	42bd      	cmp	r5, r7
 801e31e:	bf38      	it	cc
 801e320:	2304      	movcc	r3, #4
 801e322:	9301      	str	r3, [sp, #4]
 801e324:	9b02      	ldr	r3, [sp, #8]
 801e326:	9103      	str	r1, [sp, #12]
 801e328:	428b      	cmp	r3, r1
 801e32a:	d80c      	bhi.n	801e346 <__multiply+0x9a>
 801e32c:	2e00      	cmp	r6, #0
 801e32e:	dd03      	ble.n	801e338 <__multiply+0x8c>
 801e330:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e334:	2b00      	cmp	r3, #0
 801e336:	d055      	beq.n	801e3e4 <__multiply+0x138>
 801e338:	6106      	str	r6, [r0, #16]
 801e33a:	b005      	add	sp, #20
 801e33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e340:	f843 2b04 	str.w	r2, [r3], #4
 801e344:	e7d9      	b.n	801e2fa <__multiply+0x4e>
 801e346:	f8b1 a000 	ldrh.w	sl, [r1]
 801e34a:	f1ba 0f00 	cmp.w	sl, #0
 801e34e:	d01f      	beq.n	801e390 <__multiply+0xe4>
 801e350:	46c4      	mov	ip, r8
 801e352:	46a1      	mov	r9, r4
 801e354:	2700      	movs	r7, #0
 801e356:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e35a:	f8d9 3000 	ldr.w	r3, [r9]
 801e35e:	fa1f fb82 	uxth.w	fp, r2
 801e362:	b29b      	uxth	r3, r3
 801e364:	fb0a 330b 	mla	r3, sl, fp, r3
 801e368:	443b      	add	r3, r7
 801e36a:	f8d9 7000 	ldr.w	r7, [r9]
 801e36e:	0c12      	lsrs	r2, r2, #16
 801e370:	0c3f      	lsrs	r7, r7, #16
 801e372:	fb0a 7202 	mla	r2, sl, r2, r7
 801e376:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801e37a:	b29b      	uxth	r3, r3
 801e37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e380:	4565      	cmp	r5, ip
 801e382:	f849 3b04 	str.w	r3, [r9], #4
 801e386:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801e38a:	d8e4      	bhi.n	801e356 <__multiply+0xaa>
 801e38c:	9b01      	ldr	r3, [sp, #4]
 801e38e:	50e7      	str	r7, [r4, r3]
 801e390:	9b03      	ldr	r3, [sp, #12]
 801e392:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e396:	3104      	adds	r1, #4
 801e398:	f1b9 0f00 	cmp.w	r9, #0
 801e39c:	d020      	beq.n	801e3e0 <__multiply+0x134>
 801e39e:	6823      	ldr	r3, [r4, #0]
 801e3a0:	4647      	mov	r7, r8
 801e3a2:	46a4      	mov	ip, r4
 801e3a4:	f04f 0a00 	mov.w	sl, #0
 801e3a8:	f8b7 b000 	ldrh.w	fp, [r7]
 801e3ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801e3b0:	fb09 220b 	mla	r2, r9, fp, r2
 801e3b4:	4452      	add	r2, sl
 801e3b6:	b29b      	uxth	r3, r3
 801e3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e3bc:	f84c 3b04 	str.w	r3, [ip], #4
 801e3c0:	f857 3b04 	ldr.w	r3, [r7], #4
 801e3c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e3c8:	f8bc 3000 	ldrh.w	r3, [ip]
 801e3cc:	fb09 330a 	mla	r3, r9, sl, r3
 801e3d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801e3d4:	42bd      	cmp	r5, r7
 801e3d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e3da:	d8e5      	bhi.n	801e3a8 <__multiply+0xfc>
 801e3dc:	9a01      	ldr	r2, [sp, #4]
 801e3de:	50a3      	str	r3, [r4, r2]
 801e3e0:	3404      	adds	r4, #4
 801e3e2:	e79f      	b.n	801e324 <__multiply+0x78>
 801e3e4:	3e01      	subs	r6, #1
 801e3e6:	e7a1      	b.n	801e32c <__multiply+0x80>
 801e3e8:	080202c0 	.word	0x080202c0
 801e3ec:	080202d1 	.word	0x080202d1

0801e3f0 <__pow5mult>:
 801e3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3f4:	4615      	mov	r5, r2
 801e3f6:	f012 0203 	ands.w	r2, r2, #3
 801e3fa:	4607      	mov	r7, r0
 801e3fc:	460e      	mov	r6, r1
 801e3fe:	d007      	beq.n	801e410 <__pow5mult+0x20>
 801e400:	4c25      	ldr	r4, [pc, #148]	@ (801e498 <__pow5mult+0xa8>)
 801e402:	3a01      	subs	r2, #1
 801e404:	2300      	movs	r3, #0
 801e406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e40a:	f7ff fea7 	bl	801e15c <__multadd>
 801e40e:	4606      	mov	r6, r0
 801e410:	10ad      	asrs	r5, r5, #2
 801e412:	d03d      	beq.n	801e490 <__pow5mult+0xa0>
 801e414:	69fc      	ldr	r4, [r7, #28]
 801e416:	b97c      	cbnz	r4, 801e438 <__pow5mult+0x48>
 801e418:	2010      	movs	r0, #16
 801e41a:	f7ff fd87 	bl	801df2c <malloc>
 801e41e:	4602      	mov	r2, r0
 801e420:	61f8      	str	r0, [r7, #28]
 801e422:	b928      	cbnz	r0, 801e430 <__pow5mult+0x40>
 801e424:	4b1d      	ldr	r3, [pc, #116]	@ (801e49c <__pow5mult+0xac>)
 801e426:	481e      	ldr	r0, [pc, #120]	@ (801e4a0 <__pow5mult+0xb0>)
 801e428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e42c:	f000 fbb8 	bl	801eba0 <__assert_func>
 801e430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e434:	6004      	str	r4, [r0, #0]
 801e436:	60c4      	str	r4, [r0, #12]
 801e438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e440:	b94c      	cbnz	r4, 801e456 <__pow5mult+0x66>
 801e442:	f240 2171 	movw	r1, #625	@ 0x271
 801e446:	4638      	mov	r0, r7
 801e448:	f7ff ff1a 	bl	801e280 <__i2b>
 801e44c:	2300      	movs	r3, #0
 801e44e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e452:	4604      	mov	r4, r0
 801e454:	6003      	str	r3, [r0, #0]
 801e456:	f04f 0900 	mov.w	r9, #0
 801e45a:	07eb      	lsls	r3, r5, #31
 801e45c:	d50a      	bpl.n	801e474 <__pow5mult+0x84>
 801e45e:	4631      	mov	r1, r6
 801e460:	4622      	mov	r2, r4
 801e462:	4638      	mov	r0, r7
 801e464:	f7ff ff22 	bl	801e2ac <__multiply>
 801e468:	4631      	mov	r1, r6
 801e46a:	4680      	mov	r8, r0
 801e46c:	4638      	mov	r0, r7
 801e46e:	f7ff fe53 	bl	801e118 <_Bfree>
 801e472:	4646      	mov	r6, r8
 801e474:	106d      	asrs	r5, r5, #1
 801e476:	d00b      	beq.n	801e490 <__pow5mult+0xa0>
 801e478:	6820      	ldr	r0, [r4, #0]
 801e47a:	b938      	cbnz	r0, 801e48c <__pow5mult+0x9c>
 801e47c:	4622      	mov	r2, r4
 801e47e:	4621      	mov	r1, r4
 801e480:	4638      	mov	r0, r7
 801e482:	f7ff ff13 	bl	801e2ac <__multiply>
 801e486:	6020      	str	r0, [r4, #0]
 801e488:	f8c0 9000 	str.w	r9, [r0]
 801e48c:	4604      	mov	r4, r0
 801e48e:	e7e4      	b.n	801e45a <__pow5mult+0x6a>
 801e490:	4630      	mov	r0, r6
 801e492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e496:	bf00      	nop
 801e498:	08020384 	.word	0x08020384
 801e49c:	08020251 	.word	0x08020251
 801e4a0:	080202d1 	.word	0x080202d1

0801e4a4 <__lshift>:
 801e4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4a8:	460c      	mov	r4, r1
 801e4aa:	6849      	ldr	r1, [r1, #4]
 801e4ac:	6923      	ldr	r3, [r4, #16]
 801e4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e4b2:	68a3      	ldr	r3, [r4, #8]
 801e4b4:	4607      	mov	r7, r0
 801e4b6:	4691      	mov	r9, r2
 801e4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e4bc:	f108 0601 	add.w	r6, r8, #1
 801e4c0:	42b3      	cmp	r3, r6
 801e4c2:	db0b      	blt.n	801e4dc <__lshift+0x38>
 801e4c4:	4638      	mov	r0, r7
 801e4c6:	f7ff fde7 	bl	801e098 <_Balloc>
 801e4ca:	4605      	mov	r5, r0
 801e4cc:	b948      	cbnz	r0, 801e4e2 <__lshift+0x3e>
 801e4ce:	4602      	mov	r2, r0
 801e4d0:	4b28      	ldr	r3, [pc, #160]	@ (801e574 <__lshift+0xd0>)
 801e4d2:	4829      	ldr	r0, [pc, #164]	@ (801e578 <__lshift+0xd4>)
 801e4d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e4d8:	f000 fb62 	bl	801eba0 <__assert_func>
 801e4dc:	3101      	adds	r1, #1
 801e4de:	005b      	lsls	r3, r3, #1
 801e4e0:	e7ee      	b.n	801e4c0 <__lshift+0x1c>
 801e4e2:	2300      	movs	r3, #0
 801e4e4:	f100 0114 	add.w	r1, r0, #20
 801e4e8:	f100 0210 	add.w	r2, r0, #16
 801e4ec:	4618      	mov	r0, r3
 801e4ee:	4553      	cmp	r3, sl
 801e4f0:	db33      	blt.n	801e55a <__lshift+0xb6>
 801e4f2:	6920      	ldr	r0, [r4, #16]
 801e4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e4f8:	f104 0314 	add.w	r3, r4, #20
 801e4fc:	f019 091f 	ands.w	r9, r9, #31
 801e500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e508:	d02b      	beq.n	801e562 <__lshift+0xbe>
 801e50a:	f1c9 0e20 	rsb	lr, r9, #32
 801e50e:	468a      	mov	sl, r1
 801e510:	2200      	movs	r2, #0
 801e512:	6818      	ldr	r0, [r3, #0]
 801e514:	fa00 f009 	lsl.w	r0, r0, r9
 801e518:	4310      	orrs	r0, r2
 801e51a:	f84a 0b04 	str.w	r0, [sl], #4
 801e51e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e522:	459c      	cmp	ip, r3
 801e524:	fa22 f20e 	lsr.w	r2, r2, lr
 801e528:	d8f3      	bhi.n	801e512 <__lshift+0x6e>
 801e52a:	ebac 0304 	sub.w	r3, ip, r4
 801e52e:	3b15      	subs	r3, #21
 801e530:	f023 0303 	bic.w	r3, r3, #3
 801e534:	3304      	adds	r3, #4
 801e536:	f104 0015 	add.w	r0, r4, #21
 801e53a:	4560      	cmp	r0, ip
 801e53c:	bf88      	it	hi
 801e53e:	2304      	movhi	r3, #4
 801e540:	50ca      	str	r2, [r1, r3]
 801e542:	b10a      	cbz	r2, 801e548 <__lshift+0xa4>
 801e544:	f108 0602 	add.w	r6, r8, #2
 801e548:	3e01      	subs	r6, #1
 801e54a:	4638      	mov	r0, r7
 801e54c:	612e      	str	r6, [r5, #16]
 801e54e:	4621      	mov	r1, r4
 801e550:	f7ff fde2 	bl	801e118 <_Bfree>
 801e554:	4628      	mov	r0, r5
 801e556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e55a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e55e:	3301      	adds	r3, #1
 801e560:	e7c5      	b.n	801e4ee <__lshift+0x4a>
 801e562:	3904      	subs	r1, #4
 801e564:	f853 2b04 	ldr.w	r2, [r3], #4
 801e568:	f841 2f04 	str.w	r2, [r1, #4]!
 801e56c:	459c      	cmp	ip, r3
 801e56e:	d8f9      	bhi.n	801e564 <__lshift+0xc0>
 801e570:	e7ea      	b.n	801e548 <__lshift+0xa4>
 801e572:	bf00      	nop
 801e574:	080202c0 	.word	0x080202c0
 801e578:	080202d1 	.word	0x080202d1

0801e57c <__mcmp>:
 801e57c:	690a      	ldr	r2, [r1, #16]
 801e57e:	4603      	mov	r3, r0
 801e580:	6900      	ldr	r0, [r0, #16]
 801e582:	1a80      	subs	r0, r0, r2
 801e584:	b530      	push	{r4, r5, lr}
 801e586:	d10e      	bne.n	801e5a6 <__mcmp+0x2a>
 801e588:	3314      	adds	r3, #20
 801e58a:	3114      	adds	r1, #20
 801e58c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e59c:	4295      	cmp	r5, r2
 801e59e:	d003      	beq.n	801e5a8 <__mcmp+0x2c>
 801e5a0:	d205      	bcs.n	801e5ae <__mcmp+0x32>
 801e5a2:	f04f 30ff 	mov.w	r0, #4294967295
 801e5a6:	bd30      	pop	{r4, r5, pc}
 801e5a8:	42a3      	cmp	r3, r4
 801e5aa:	d3f3      	bcc.n	801e594 <__mcmp+0x18>
 801e5ac:	e7fb      	b.n	801e5a6 <__mcmp+0x2a>
 801e5ae:	2001      	movs	r0, #1
 801e5b0:	e7f9      	b.n	801e5a6 <__mcmp+0x2a>
	...

0801e5b4 <__mdiff>:
 801e5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b8:	4689      	mov	r9, r1
 801e5ba:	4606      	mov	r6, r0
 801e5bc:	4611      	mov	r1, r2
 801e5be:	4648      	mov	r0, r9
 801e5c0:	4614      	mov	r4, r2
 801e5c2:	f7ff ffdb 	bl	801e57c <__mcmp>
 801e5c6:	1e05      	subs	r5, r0, #0
 801e5c8:	d112      	bne.n	801e5f0 <__mdiff+0x3c>
 801e5ca:	4629      	mov	r1, r5
 801e5cc:	4630      	mov	r0, r6
 801e5ce:	f7ff fd63 	bl	801e098 <_Balloc>
 801e5d2:	4602      	mov	r2, r0
 801e5d4:	b928      	cbnz	r0, 801e5e2 <__mdiff+0x2e>
 801e5d6:	4b3f      	ldr	r3, [pc, #252]	@ (801e6d4 <__mdiff+0x120>)
 801e5d8:	f240 2137 	movw	r1, #567	@ 0x237
 801e5dc:	483e      	ldr	r0, [pc, #248]	@ (801e6d8 <__mdiff+0x124>)
 801e5de:	f000 fadf 	bl	801eba0 <__assert_func>
 801e5e2:	2301      	movs	r3, #1
 801e5e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e5e8:	4610      	mov	r0, r2
 801e5ea:	b003      	add	sp, #12
 801e5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5f0:	bfbc      	itt	lt
 801e5f2:	464b      	movlt	r3, r9
 801e5f4:	46a1      	movlt	r9, r4
 801e5f6:	4630      	mov	r0, r6
 801e5f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e5fc:	bfba      	itte	lt
 801e5fe:	461c      	movlt	r4, r3
 801e600:	2501      	movlt	r5, #1
 801e602:	2500      	movge	r5, #0
 801e604:	f7ff fd48 	bl	801e098 <_Balloc>
 801e608:	4602      	mov	r2, r0
 801e60a:	b918      	cbnz	r0, 801e614 <__mdiff+0x60>
 801e60c:	4b31      	ldr	r3, [pc, #196]	@ (801e6d4 <__mdiff+0x120>)
 801e60e:	f240 2145 	movw	r1, #581	@ 0x245
 801e612:	e7e3      	b.n	801e5dc <__mdiff+0x28>
 801e614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e618:	6926      	ldr	r6, [r4, #16]
 801e61a:	60c5      	str	r5, [r0, #12]
 801e61c:	f109 0310 	add.w	r3, r9, #16
 801e620:	f109 0514 	add.w	r5, r9, #20
 801e624:	f104 0e14 	add.w	lr, r4, #20
 801e628:	f100 0b14 	add.w	fp, r0, #20
 801e62c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e634:	9301      	str	r3, [sp, #4]
 801e636:	46d9      	mov	r9, fp
 801e638:	f04f 0c00 	mov.w	ip, #0
 801e63c:	9b01      	ldr	r3, [sp, #4]
 801e63e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e642:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e646:	9301      	str	r3, [sp, #4]
 801e648:	fa1f f38a 	uxth.w	r3, sl
 801e64c:	4619      	mov	r1, r3
 801e64e:	b283      	uxth	r3, r0
 801e650:	1acb      	subs	r3, r1, r3
 801e652:	0c00      	lsrs	r0, r0, #16
 801e654:	4463      	add	r3, ip
 801e656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e65a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e65e:	b29b      	uxth	r3, r3
 801e660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e664:	4576      	cmp	r6, lr
 801e666:	f849 3b04 	str.w	r3, [r9], #4
 801e66a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e66e:	d8e5      	bhi.n	801e63c <__mdiff+0x88>
 801e670:	1b33      	subs	r3, r6, r4
 801e672:	3b15      	subs	r3, #21
 801e674:	f023 0303 	bic.w	r3, r3, #3
 801e678:	3415      	adds	r4, #21
 801e67a:	3304      	adds	r3, #4
 801e67c:	42a6      	cmp	r6, r4
 801e67e:	bf38      	it	cc
 801e680:	2304      	movcc	r3, #4
 801e682:	441d      	add	r5, r3
 801e684:	445b      	add	r3, fp
 801e686:	461e      	mov	r6, r3
 801e688:	462c      	mov	r4, r5
 801e68a:	4544      	cmp	r4, r8
 801e68c:	d30e      	bcc.n	801e6ac <__mdiff+0xf8>
 801e68e:	f108 0103 	add.w	r1, r8, #3
 801e692:	1b49      	subs	r1, r1, r5
 801e694:	f021 0103 	bic.w	r1, r1, #3
 801e698:	3d03      	subs	r5, #3
 801e69a:	45a8      	cmp	r8, r5
 801e69c:	bf38      	it	cc
 801e69e:	2100      	movcc	r1, #0
 801e6a0:	440b      	add	r3, r1
 801e6a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e6a6:	b191      	cbz	r1, 801e6ce <__mdiff+0x11a>
 801e6a8:	6117      	str	r7, [r2, #16]
 801e6aa:	e79d      	b.n	801e5e8 <__mdiff+0x34>
 801e6ac:	f854 1b04 	ldr.w	r1, [r4], #4
 801e6b0:	46e6      	mov	lr, ip
 801e6b2:	0c08      	lsrs	r0, r1, #16
 801e6b4:	fa1c fc81 	uxtah	ip, ip, r1
 801e6b8:	4471      	add	r1, lr
 801e6ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e6be:	b289      	uxth	r1, r1
 801e6c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e6c4:	f846 1b04 	str.w	r1, [r6], #4
 801e6c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e6cc:	e7dd      	b.n	801e68a <__mdiff+0xd6>
 801e6ce:	3f01      	subs	r7, #1
 801e6d0:	e7e7      	b.n	801e6a2 <__mdiff+0xee>
 801e6d2:	bf00      	nop
 801e6d4:	080202c0 	.word	0x080202c0
 801e6d8:	080202d1 	.word	0x080202d1

0801e6dc <__d2b>:
 801e6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e6e0:	460f      	mov	r7, r1
 801e6e2:	2101      	movs	r1, #1
 801e6e4:	ec59 8b10 	vmov	r8, r9, d0
 801e6e8:	4616      	mov	r6, r2
 801e6ea:	f7ff fcd5 	bl	801e098 <_Balloc>
 801e6ee:	4604      	mov	r4, r0
 801e6f0:	b930      	cbnz	r0, 801e700 <__d2b+0x24>
 801e6f2:	4602      	mov	r2, r0
 801e6f4:	4b23      	ldr	r3, [pc, #140]	@ (801e784 <__d2b+0xa8>)
 801e6f6:	4824      	ldr	r0, [pc, #144]	@ (801e788 <__d2b+0xac>)
 801e6f8:	f240 310f 	movw	r1, #783	@ 0x30f
 801e6fc:	f000 fa50 	bl	801eba0 <__assert_func>
 801e700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e708:	b10d      	cbz	r5, 801e70e <__d2b+0x32>
 801e70a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e70e:	9301      	str	r3, [sp, #4]
 801e710:	f1b8 0300 	subs.w	r3, r8, #0
 801e714:	d023      	beq.n	801e75e <__d2b+0x82>
 801e716:	4668      	mov	r0, sp
 801e718:	9300      	str	r3, [sp, #0]
 801e71a:	f7ff fd84 	bl	801e226 <__lo0bits>
 801e71e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e722:	b1d0      	cbz	r0, 801e75a <__d2b+0x7e>
 801e724:	f1c0 0320 	rsb	r3, r0, #32
 801e728:	fa02 f303 	lsl.w	r3, r2, r3
 801e72c:	430b      	orrs	r3, r1
 801e72e:	40c2      	lsrs	r2, r0
 801e730:	6163      	str	r3, [r4, #20]
 801e732:	9201      	str	r2, [sp, #4]
 801e734:	9b01      	ldr	r3, [sp, #4]
 801e736:	61a3      	str	r3, [r4, #24]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	bf0c      	ite	eq
 801e73c:	2201      	moveq	r2, #1
 801e73e:	2202      	movne	r2, #2
 801e740:	6122      	str	r2, [r4, #16]
 801e742:	b1a5      	cbz	r5, 801e76e <__d2b+0x92>
 801e744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e748:	4405      	add	r5, r0
 801e74a:	603d      	str	r5, [r7, #0]
 801e74c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e750:	6030      	str	r0, [r6, #0]
 801e752:	4620      	mov	r0, r4
 801e754:	b003      	add	sp, #12
 801e756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e75a:	6161      	str	r1, [r4, #20]
 801e75c:	e7ea      	b.n	801e734 <__d2b+0x58>
 801e75e:	a801      	add	r0, sp, #4
 801e760:	f7ff fd61 	bl	801e226 <__lo0bits>
 801e764:	9b01      	ldr	r3, [sp, #4]
 801e766:	6163      	str	r3, [r4, #20]
 801e768:	3020      	adds	r0, #32
 801e76a:	2201      	movs	r2, #1
 801e76c:	e7e8      	b.n	801e740 <__d2b+0x64>
 801e76e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e776:	6038      	str	r0, [r7, #0]
 801e778:	6918      	ldr	r0, [r3, #16]
 801e77a:	f7ff fd35 	bl	801e1e8 <__hi0bits>
 801e77e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e782:	e7e5      	b.n	801e750 <__d2b+0x74>
 801e784:	080202c0 	.word	0x080202c0
 801e788:	080202d1 	.word	0x080202d1

0801e78c <__sfputc_r>:
 801e78c:	6893      	ldr	r3, [r2, #8]
 801e78e:	3b01      	subs	r3, #1
 801e790:	2b00      	cmp	r3, #0
 801e792:	b410      	push	{r4}
 801e794:	6093      	str	r3, [r2, #8]
 801e796:	da08      	bge.n	801e7aa <__sfputc_r+0x1e>
 801e798:	6994      	ldr	r4, [r2, #24]
 801e79a:	42a3      	cmp	r3, r4
 801e79c:	db01      	blt.n	801e7a2 <__sfputc_r+0x16>
 801e79e:	290a      	cmp	r1, #10
 801e7a0:	d103      	bne.n	801e7aa <__sfputc_r+0x1e>
 801e7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7a6:	f7fe bbea 	b.w	801cf7e <__swbuf_r>
 801e7aa:	6813      	ldr	r3, [r2, #0]
 801e7ac:	1c58      	adds	r0, r3, #1
 801e7ae:	6010      	str	r0, [r2, #0]
 801e7b0:	7019      	strb	r1, [r3, #0]
 801e7b2:	4608      	mov	r0, r1
 801e7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7b8:	4770      	bx	lr

0801e7ba <__sfputs_r>:
 801e7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7bc:	4606      	mov	r6, r0
 801e7be:	460f      	mov	r7, r1
 801e7c0:	4614      	mov	r4, r2
 801e7c2:	18d5      	adds	r5, r2, r3
 801e7c4:	42ac      	cmp	r4, r5
 801e7c6:	d101      	bne.n	801e7cc <__sfputs_r+0x12>
 801e7c8:	2000      	movs	r0, #0
 801e7ca:	e007      	b.n	801e7dc <__sfputs_r+0x22>
 801e7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7d0:	463a      	mov	r2, r7
 801e7d2:	4630      	mov	r0, r6
 801e7d4:	f7ff ffda 	bl	801e78c <__sfputc_r>
 801e7d8:	1c43      	adds	r3, r0, #1
 801e7da:	d1f3      	bne.n	801e7c4 <__sfputs_r+0xa>
 801e7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e7e0 <_vfiprintf_r>:
 801e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e4:	460d      	mov	r5, r1
 801e7e6:	b09d      	sub	sp, #116	@ 0x74
 801e7e8:	4614      	mov	r4, r2
 801e7ea:	4698      	mov	r8, r3
 801e7ec:	4606      	mov	r6, r0
 801e7ee:	b118      	cbz	r0, 801e7f8 <_vfiprintf_r+0x18>
 801e7f0:	6a03      	ldr	r3, [r0, #32]
 801e7f2:	b90b      	cbnz	r3, 801e7f8 <_vfiprintf_r+0x18>
 801e7f4:	f7fe fad2 	bl	801cd9c <__sinit>
 801e7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e7fa:	07d9      	lsls	r1, r3, #31
 801e7fc:	d405      	bmi.n	801e80a <_vfiprintf_r+0x2a>
 801e7fe:	89ab      	ldrh	r3, [r5, #12]
 801e800:	059a      	lsls	r2, r3, #22
 801e802:	d402      	bmi.n	801e80a <_vfiprintf_r+0x2a>
 801e804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e806:	f7fe fcdc 	bl	801d1c2 <__retarget_lock_acquire_recursive>
 801e80a:	89ab      	ldrh	r3, [r5, #12]
 801e80c:	071b      	lsls	r3, r3, #28
 801e80e:	d501      	bpl.n	801e814 <_vfiprintf_r+0x34>
 801e810:	692b      	ldr	r3, [r5, #16]
 801e812:	b99b      	cbnz	r3, 801e83c <_vfiprintf_r+0x5c>
 801e814:	4629      	mov	r1, r5
 801e816:	4630      	mov	r0, r6
 801e818:	f7fe fbf0 	bl	801cffc <__swsetup_r>
 801e81c:	b170      	cbz	r0, 801e83c <_vfiprintf_r+0x5c>
 801e81e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e820:	07dc      	lsls	r4, r3, #31
 801e822:	d504      	bpl.n	801e82e <_vfiprintf_r+0x4e>
 801e824:	f04f 30ff 	mov.w	r0, #4294967295
 801e828:	b01d      	add	sp, #116	@ 0x74
 801e82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e82e:	89ab      	ldrh	r3, [r5, #12]
 801e830:	0598      	lsls	r0, r3, #22
 801e832:	d4f7      	bmi.n	801e824 <_vfiprintf_r+0x44>
 801e834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e836:	f7fe fcc5 	bl	801d1c4 <__retarget_lock_release_recursive>
 801e83a:	e7f3      	b.n	801e824 <_vfiprintf_r+0x44>
 801e83c:	2300      	movs	r3, #0
 801e83e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e840:	2320      	movs	r3, #32
 801e842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e846:	f8cd 800c 	str.w	r8, [sp, #12]
 801e84a:	2330      	movs	r3, #48	@ 0x30
 801e84c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e9fc <_vfiprintf_r+0x21c>
 801e850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e854:	f04f 0901 	mov.w	r9, #1
 801e858:	4623      	mov	r3, r4
 801e85a:	469a      	mov	sl, r3
 801e85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e860:	b10a      	cbz	r2, 801e866 <_vfiprintf_r+0x86>
 801e862:	2a25      	cmp	r2, #37	@ 0x25
 801e864:	d1f9      	bne.n	801e85a <_vfiprintf_r+0x7a>
 801e866:	ebba 0b04 	subs.w	fp, sl, r4
 801e86a:	d00b      	beq.n	801e884 <_vfiprintf_r+0xa4>
 801e86c:	465b      	mov	r3, fp
 801e86e:	4622      	mov	r2, r4
 801e870:	4629      	mov	r1, r5
 801e872:	4630      	mov	r0, r6
 801e874:	f7ff ffa1 	bl	801e7ba <__sfputs_r>
 801e878:	3001      	adds	r0, #1
 801e87a:	f000 80a7 	beq.w	801e9cc <_vfiprintf_r+0x1ec>
 801e87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e880:	445a      	add	r2, fp
 801e882:	9209      	str	r2, [sp, #36]	@ 0x24
 801e884:	f89a 3000 	ldrb.w	r3, [sl]
 801e888:	2b00      	cmp	r3, #0
 801e88a:	f000 809f 	beq.w	801e9cc <_vfiprintf_r+0x1ec>
 801e88e:	2300      	movs	r3, #0
 801e890:	f04f 32ff 	mov.w	r2, #4294967295
 801e894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e898:	f10a 0a01 	add.w	sl, sl, #1
 801e89c:	9304      	str	r3, [sp, #16]
 801e89e:	9307      	str	r3, [sp, #28]
 801e8a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e8a4:	931a      	str	r3, [sp, #104]	@ 0x68
 801e8a6:	4654      	mov	r4, sl
 801e8a8:	2205      	movs	r2, #5
 801e8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8ae:	4853      	ldr	r0, [pc, #332]	@ (801e9fc <_vfiprintf_r+0x21c>)
 801e8b0:	f7e1 fc8e 	bl	80001d0 <memchr>
 801e8b4:	9a04      	ldr	r2, [sp, #16]
 801e8b6:	b9d8      	cbnz	r0, 801e8f0 <_vfiprintf_r+0x110>
 801e8b8:	06d1      	lsls	r1, r2, #27
 801e8ba:	bf44      	itt	mi
 801e8bc:	2320      	movmi	r3, #32
 801e8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8c2:	0713      	lsls	r3, r2, #28
 801e8c4:	bf44      	itt	mi
 801e8c6:	232b      	movmi	r3, #43	@ 0x2b
 801e8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8cc:	f89a 3000 	ldrb.w	r3, [sl]
 801e8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 801e8d2:	d015      	beq.n	801e900 <_vfiprintf_r+0x120>
 801e8d4:	9a07      	ldr	r2, [sp, #28]
 801e8d6:	4654      	mov	r4, sl
 801e8d8:	2000      	movs	r0, #0
 801e8da:	f04f 0c0a 	mov.w	ip, #10
 801e8de:	4621      	mov	r1, r4
 801e8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e8e4:	3b30      	subs	r3, #48	@ 0x30
 801e8e6:	2b09      	cmp	r3, #9
 801e8e8:	d94b      	bls.n	801e982 <_vfiprintf_r+0x1a2>
 801e8ea:	b1b0      	cbz	r0, 801e91a <_vfiprintf_r+0x13a>
 801e8ec:	9207      	str	r2, [sp, #28]
 801e8ee:	e014      	b.n	801e91a <_vfiprintf_r+0x13a>
 801e8f0:	eba0 0308 	sub.w	r3, r0, r8
 801e8f4:	fa09 f303 	lsl.w	r3, r9, r3
 801e8f8:	4313      	orrs	r3, r2
 801e8fa:	9304      	str	r3, [sp, #16]
 801e8fc:	46a2      	mov	sl, r4
 801e8fe:	e7d2      	b.n	801e8a6 <_vfiprintf_r+0xc6>
 801e900:	9b03      	ldr	r3, [sp, #12]
 801e902:	1d19      	adds	r1, r3, #4
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	9103      	str	r1, [sp, #12]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	bfbb      	ittet	lt
 801e90c:	425b      	neglt	r3, r3
 801e90e:	f042 0202 	orrlt.w	r2, r2, #2
 801e912:	9307      	strge	r3, [sp, #28]
 801e914:	9307      	strlt	r3, [sp, #28]
 801e916:	bfb8      	it	lt
 801e918:	9204      	strlt	r2, [sp, #16]
 801e91a:	7823      	ldrb	r3, [r4, #0]
 801e91c:	2b2e      	cmp	r3, #46	@ 0x2e
 801e91e:	d10a      	bne.n	801e936 <_vfiprintf_r+0x156>
 801e920:	7863      	ldrb	r3, [r4, #1]
 801e922:	2b2a      	cmp	r3, #42	@ 0x2a
 801e924:	d132      	bne.n	801e98c <_vfiprintf_r+0x1ac>
 801e926:	9b03      	ldr	r3, [sp, #12]
 801e928:	1d1a      	adds	r2, r3, #4
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	9203      	str	r2, [sp, #12]
 801e92e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e932:	3402      	adds	r4, #2
 801e934:	9305      	str	r3, [sp, #20]
 801e936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ea0c <_vfiprintf_r+0x22c>
 801e93a:	7821      	ldrb	r1, [r4, #0]
 801e93c:	2203      	movs	r2, #3
 801e93e:	4650      	mov	r0, sl
 801e940:	f7e1 fc46 	bl	80001d0 <memchr>
 801e944:	b138      	cbz	r0, 801e956 <_vfiprintf_r+0x176>
 801e946:	9b04      	ldr	r3, [sp, #16]
 801e948:	eba0 000a 	sub.w	r0, r0, sl
 801e94c:	2240      	movs	r2, #64	@ 0x40
 801e94e:	4082      	lsls	r2, r0
 801e950:	4313      	orrs	r3, r2
 801e952:	3401      	adds	r4, #1
 801e954:	9304      	str	r3, [sp, #16]
 801e956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e95a:	4829      	ldr	r0, [pc, #164]	@ (801ea00 <_vfiprintf_r+0x220>)
 801e95c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e960:	2206      	movs	r2, #6
 801e962:	f7e1 fc35 	bl	80001d0 <memchr>
 801e966:	2800      	cmp	r0, #0
 801e968:	d03f      	beq.n	801e9ea <_vfiprintf_r+0x20a>
 801e96a:	4b26      	ldr	r3, [pc, #152]	@ (801ea04 <_vfiprintf_r+0x224>)
 801e96c:	bb1b      	cbnz	r3, 801e9b6 <_vfiprintf_r+0x1d6>
 801e96e:	9b03      	ldr	r3, [sp, #12]
 801e970:	3307      	adds	r3, #7
 801e972:	f023 0307 	bic.w	r3, r3, #7
 801e976:	3308      	adds	r3, #8
 801e978:	9303      	str	r3, [sp, #12]
 801e97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e97c:	443b      	add	r3, r7
 801e97e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e980:	e76a      	b.n	801e858 <_vfiprintf_r+0x78>
 801e982:	fb0c 3202 	mla	r2, ip, r2, r3
 801e986:	460c      	mov	r4, r1
 801e988:	2001      	movs	r0, #1
 801e98a:	e7a8      	b.n	801e8de <_vfiprintf_r+0xfe>
 801e98c:	2300      	movs	r3, #0
 801e98e:	3401      	adds	r4, #1
 801e990:	9305      	str	r3, [sp, #20]
 801e992:	4619      	mov	r1, r3
 801e994:	f04f 0c0a 	mov.w	ip, #10
 801e998:	4620      	mov	r0, r4
 801e99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e99e:	3a30      	subs	r2, #48	@ 0x30
 801e9a0:	2a09      	cmp	r2, #9
 801e9a2:	d903      	bls.n	801e9ac <_vfiprintf_r+0x1cc>
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d0c6      	beq.n	801e936 <_vfiprintf_r+0x156>
 801e9a8:	9105      	str	r1, [sp, #20]
 801e9aa:	e7c4      	b.n	801e936 <_vfiprintf_r+0x156>
 801e9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9b0:	4604      	mov	r4, r0
 801e9b2:	2301      	movs	r3, #1
 801e9b4:	e7f0      	b.n	801e998 <_vfiprintf_r+0x1b8>
 801e9b6:	ab03      	add	r3, sp, #12
 801e9b8:	9300      	str	r3, [sp, #0]
 801e9ba:	462a      	mov	r2, r5
 801e9bc:	4b12      	ldr	r3, [pc, #72]	@ (801ea08 <_vfiprintf_r+0x228>)
 801e9be:	a904      	add	r1, sp, #16
 801e9c0:	4630      	mov	r0, r6
 801e9c2:	f7fd fce9 	bl	801c398 <_printf_float>
 801e9c6:	4607      	mov	r7, r0
 801e9c8:	1c78      	adds	r0, r7, #1
 801e9ca:	d1d6      	bne.n	801e97a <_vfiprintf_r+0x19a>
 801e9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e9ce:	07d9      	lsls	r1, r3, #31
 801e9d0:	d405      	bmi.n	801e9de <_vfiprintf_r+0x1fe>
 801e9d2:	89ab      	ldrh	r3, [r5, #12]
 801e9d4:	059a      	lsls	r2, r3, #22
 801e9d6:	d402      	bmi.n	801e9de <_vfiprintf_r+0x1fe>
 801e9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e9da:	f7fe fbf3 	bl	801d1c4 <__retarget_lock_release_recursive>
 801e9de:	89ab      	ldrh	r3, [r5, #12]
 801e9e0:	065b      	lsls	r3, r3, #25
 801e9e2:	f53f af1f 	bmi.w	801e824 <_vfiprintf_r+0x44>
 801e9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e9e8:	e71e      	b.n	801e828 <_vfiprintf_r+0x48>
 801e9ea:	ab03      	add	r3, sp, #12
 801e9ec:	9300      	str	r3, [sp, #0]
 801e9ee:	462a      	mov	r2, r5
 801e9f0:	4b05      	ldr	r3, [pc, #20]	@ (801ea08 <_vfiprintf_r+0x228>)
 801e9f2:	a904      	add	r1, sp, #16
 801e9f4:	4630      	mov	r0, r6
 801e9f6:	f7fd ff67 	bl	801c8c8 <_printf_i>
 801e9fa:	e7e4      	b.n	801e9c6 <_vfiprintf_r+0x1e6>
 801e9fc:	0802032a 	.word	0x0802032a
 801ea00:	08020334 	.word	0x08020334
 801ea04:	0801c399 	.word	0x0801c399
 801ea08:	0801e7bb 	.word	0x0801e7bb
 801ea0c:	08020330 	.word	0x08020330

0801ea10 <__swhatbuf_r>:
 801ea10:	b570      	push	{r4, r5, r6, lr}
 801ea12:	460c      	mov	r4, r1
 801ea14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea18:	2900      	cmp	r1, #0
 801ea1a:	b096      	sub	sp, #88	@ 0x58
 801ea1c:	4615      	mov	r5, r2
 801ea1e:	461e      	mov	r6, r3
 801ea20:	da0d      	bge.n	801ea3e <__swhatbuf_r+0x2e>
 801ea22:	89a3      	ldrh	r3, [r4, #12]
 801ea24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ea28:	f04f 0100 	mov.w	r1, #0
 801ea2c:	bf14      	ite	ne
 801ea2e:	2340      	movne	r3, #64	@ 0x40
 801ea30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ea34:	2000      	movs	r0, #0
 801ea36:	6031      	str	r1, [r6, #0]
 801ea38:	602b      	str	r3, [r5, #0]
 801ea3a:	b016      	add	sp, #88	@ 0x58
 801ea3c:	bd70      	pop	{r4, r5, r6, pc}
 801ea3e:	466a      	mov	r2, sp
 801ea40:	f000 f87c 	bl	801eb3c <_fstat_r>
 801ea44:	2800      	cmp	r0, #0
 801ea46:	dbec      	blt.n	801ea22 <__swhatbuf_r+0x12>
 801ea48:	9901      	ldr	r1, [sp, #4]
 801ea4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ea4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ea52:	4259      	negs	r1, r3
 801ea54:	4159      	adcs	r1, r3
 801ea56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ea5a:	e7eb      	b.n	801ea34 <__swhatbuf_r+0x24>

0801ea5c <__smakebuf_r>:
 801ea5c:	898b      	ldrh	r3, [r1, #12]
 801ea5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea60:	079d      	lsls	r5, r3, #30
 801ea62:	4606      	mov	r6, r0
 801ea64:	460c      	mov	r4, r1
 801ea66:	d507      	bpl.n	801ea78 <__smakebuf_r+0x1c>
 801ea68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ea6c:	6023      	str	r3, [r4, #0]
 801ea6e:	6123      	str	r3, [r4, #16]
 801ea70:	2301      	movs	r3, #1
 801ea72:	6163      	str	r3, [r4, #20]
 801ea74:	b003      	add	sp, #12
 801ea76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea78:	ab01      	add	r3, sp, #4
 801ea7a:	466a      	mov	r2, sp
 801ea7c:	f7ff ffc8 	bl	801ea10 <__swhatbuf_r>
 801ea80:	9f00      	ldr	r7, [sp, #0]
 801ea82:	4605      	mov	r5, r0
 801ea84:	4639      	mov	r1, r7
 801ea86:	4630      	mov	r0, r6
 801ea88:	f7ff fa7a 	bl	801df80 <_malloc_r>
 801ea8c:	b948      	cbnz	r0, 801eaa2 <__smakebuf_r+0x46>
 801ea8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea92:	059a      	lsls	r2, r3, #22
 801ea94:	d4ee      	bmi.n	801ea74 <__smakebuf_r+0x18>
 801ea96:	f023 0303 	bic.w	r3, r3, #3
 801ea9a:	f043 0302 	orr.w	r3, r3, #2
 801ea9e:	81a3      	strh	r3, [r4, #12]
 801eaa0:	e7e2      	b.n	801ea68 <__smakebuf_r+0xc>
 801eaa2:	89a3      	ldrh	r3, [r4, #12]
 801eaa4:	6020      	str	r0, [r4, #0]
 801eaa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eaaa:	81a3      	strh	r3, [r4, #12]
 801eaac:	9b01      	ldr	r3, [sp, #4]
 801eaae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eab2:	b15b      	cbz	r3, 801eacc <__smakebuf_r+0x70>
 801eab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eab8:	4630      	mov	r0, r6
 801eaba:	f000 f851 	bl	801eb60 <_isatty_r>
 801eabe:	b128      	cbz	r0, 801eacc <__smakebuf_r+0x70>
 801eac0:	89a3      	ldrh	r3, [r4, #12]
 801eac2:	f023 0303 	bic.w	r3, r3, #3
 801eac6:	f043 0301 	orr.w	r3, r3, #1
 801eaca:	81a3      	strh	r3, [r4, #12]
 801eacc:	89a3      	ldrh	r3, [r4, #12]
 801eace:	431d      	orrs	r5, r3
 801ead0:	81a5      	strh	r5, [r4, #12]
 801ead2:	e7cf      	b.n	801ea74 <__smakebuf_r+0x18>

0801ead4 <_putc_r>:
 801ead4:	b570      	push	{r4, r5, r6, lr}
 801ead6:	460d      	mov	r5, r1
 801ead8:	4614      	mov	r4, r2
 801eada:	4606      	mov	r6, r0
 801eadc:	b118      	cbz	r0, 801eae6 <_putc_r+0x12>
 801eade:	6a03      	ldr	r3, [r0, #32]
 801eae0:	b90b      	cbnz	r3, 801eae6 <_putc_r+0x12>
 801eae2:	f7fe f95b 	bl	801cd9c <__sinit>
 801eae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eae8:	07d8      	lsls	r0, r3, #31
 801eaea:	d405      	bmi.n	801eaf8 <_putc_r+0x24>
 801eaec:	89a3      	ldrh	r3, [r4, #12]
 801eaee:	0599      	lsls	r1, r3, #22
 801eaf0:	d402      	bmi.n	801eaf8 <_putc_r+0x24>
 801eaf2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eaf4:	f7fe fb65 	bl	801d1c2 <__retarget_lock_acquire_recursive>
 801eaf8:	68a3      	ldr	r3, [r4, #8]
 801eafa:	3b01      	subs	r3, #1
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	60a3      	str	r3, [r4, #8]
 801eb00:	da05      	bge.n	801eb0e <_putc_r+0x3a>
 801eb02:	69a2      	ldr	r2, [r4, #24]
 801eb04:	4293      	cmp	r3, r2
 801eb06:	db12      	blt.n	801eb2e <_putc_r+0x5a>
 801eb08:	b2eb      	uxtb	r3, r5
 801eb0a:	2b0a      	cmp	r3, #10
 801eb0c:	d00f      	beq.n	801eb2e <_putc_r+0x5a>
 801eb0e:	6823      	ldr	r3, [r4, #0]
 801eb10:	1c5a      	adds	r2, r3, #1
 801eb12:	6022      	str	r2, [r4, #0]
 801eb14:	701d      	strb	r5, [r3, #0]
 801eb16:	b2ed      	uxtb	r5, r5
 801eb18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eb1a:	07da      	lsls	r2, r3, #31
 801eb1c:	d405      	bmi.n	801eb2a <_putc_r+0x56>
 801eb1e:	89a3      	ldrh	r3, [r4, #12]
 801eb20:	059b      	lsls	r3, r3, #22
 801eb22:	d402      	bmi.n	801eb2a <_putc_r+0x56>
 801eb24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eb26:	f7fe fb4d 	bl	801d1c4 <__retarget_lock_release_recursive>
 801eb2a:	4628      	mov	r0, r5
 801eb2c:	bd70      	pop	{r4, r5, r6, pc}
 801eb2e:	4629      	mov	r1, r5
 801eb30:	4622      	mov	r2, r4
 801eb32:	4630      	mov	r0, r6
 801eb34:	f7fe fa23 	bl	801cf7e <__swbuf_r>
 801eb38:	4605      	mov	r5, r0
 801eb3a:	e7ed      	b.n	801eb18 <_putc_r+0x44>

0801eb3c <_fstat_r>:
 801eb3c:	b538      	push	{r3, r4, r5, lr}
 801eb3e:	4d07      	ldr	r5, [pc, #28]	@ (801eb5c <_fstat_r+0x20>)
 801eb40:	2300      	movs	r3, #0
 801eb42:	4604      	mov	r4, r0
 801eb44:	4608      	mov	r0, r1
 801eb46:	4611      	mov	r1, r2
 801eb48:	602b      	str	r3, [r5, #0]
 801eb4a:	f7e3 f95d 	bl	8001e08 <_fstat>
 801eb4e:	1c43      	adds	r3, r0, #1
 801eb50:	d102      	bne.n	801eb58 <_fstat_r+0x1c>
 801eb52:	682b      	ldr	r3, [r5, #0]
 801eb54:	b103      	cbz	r3, 801eb58 <_fstat_r+0x1c>
 801eb56:	6023      	str	r3, [r4, #0]
 801eb58:	bd38      	pop	{r3, r4, r5, pc}
 801eb5a:	bf00      	nop
 801eb5c:	200018fc 	.word	0x200018fc

0801eb60 <_isatty_r>:
 801eb60:	b538      	push	{r3, r4, r5, lr}
 801eb62:	4d06      	ldr	r5, [pc, #24]	@ (801eb7c <_isatty_r+0x1c>)
 801eb64:	2300      	movs	r3, #0
 801eb66:	4604      	mov	r4, r0
 801eb68:	4608      	mov	r0, r1
 801eb6a:	602b      	str	r3, [r5, #0]
 801eb6c:	f7e3 f95c 	bl	8001e28 <_isatty>
 801eb70:	1c43      	adds	r3, r0, #1
 801eb72:	d102      	bne.n	801eb7a <_isatty_r+0x1a>
 801eb74:	682b      	ldr	r3, [r5, #0]
 801eb76:	b103      	cbz	r3, 801eb7a <_isatty_r+0x1a>
 801eb78:	6023      	str	r3, [r4, #0]
 801eb7a:	bd38      	pop	{r3, r4, r5, pc}
 801eb7c:	200018fc 	.word	0x200018fc

0801eb80 <_sbrk_r>:
 801eb80:	b538      	push	{r3, r4, r5, lr}
 801eb82:	4d06      	ldr	r5, [pc, #24]	@ (801eb9c <_sbrk_r+0x1c>)
 801eb84:	2300      	movs	r3, #0
 801eb86:	4604      	mov	r4, r0
 801eb88:	4608      	mov	r0, r1
 801eb8a:	602b      	str	r3, [r5, #0]
 801eb8c:	f7e3 f964 	bl	8001e58 <_sbrk>
 801eb90:	1c43      	adds	r3, r0, #1
 801eb92:	d102      	bne.n	801eb9a <_sbrk_r+0x1a>
 801eb94:	682b      	ldr	r3, [r5, #0]
 801eb96:	b103      	cbz	r3, 801eb9a <_sbrk_r+0x1a>
 801eb98:	6023      	str	r3, [r4, #0]
 801eb9a:	bd38      	pop	{r3, r4, r5, pc}
 801eb9c:	200018fc 	.word	0x200018fc

0801eba0 <__assert_func>:
 801eba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801eba2:	4614      	mov	r4, r2
 801eba4:	461a      	mov	r2, r3
 801eba6:	4b09      	ldr	r3, [pc, #36]	@ (801ebcc <__assert_func+0x2c>)
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	4605      	mov	r5, r0
 801ebac:	68d8      	ldr	r0, [r3, #12]
 801ebae:	b14c      	cbz	r4, 801ebc4 <__assert_func+0x24>
 801ebb0:	4b07      	ldr	r3, [pc, #28]	@ (801ebd0 <__assert_func+0x30>)
 801ebb2:	9100      	str	r1, [sp, #0]
 801ebb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ebb8:	4906      	ldr	r1, [pc, #24]	@ (801ebd4 <__assert_func+0x34>)
 801ebba:	462b      	mov	r3, r5
 801ebbc:	f000 f842 	bl	801ec44 <fiprintf>
 801ebc0:	f000 f852 	bl	801ec68 <abort>
 801ebc4:	4b04      	ldr	r3, [pc, #16]	@ (801ebd8 <__assert_func+0x38>)
 801ebc6:	461c      	mov	r4, r3
 801ebc8:	e7f3      	b.n	801ebb2 <__assert_func+0x12>
 801ebca:	bf00      	nop
 801ebcc:	2000002c 	.word	0x2000002c
 801ebd0:	08020345 	.word	0x08020345
 801ebd4:	08020352 	.word	0x08020352
 801ebd8:	08020380 	.word	0x08020380

0801ebdc <_calloc_r>:
 801ebdc:	b570      	push	{r4, r5, r6, lr}
 801ebde:	fba1 5402 	umull	r5, r4, r1, r2
 801ebe2:	b934      	cbnz	r4, 801ebf2 <_calloc_r+0x16>
 801ebe4:	4629      	mov	r1, r5
 801ebe6:	f7ff f9cb 	bl	801df80 <_malloc_r>
 801ebea:	4606      	mov	r6, r0
 801ebec:	b928      	cbnz	r0, 801ebfa <_calloc_r+0x1e>
 801ebee:	4630      	mov	r0, r6
 801ebf0:	bd70      	pop	{r4, r5, r6, pc}
 801ebf2:	220c      	movs	r2, #12
 801ebf4:	6002      	str	r2, [r0, #0]
 801ebf6:	2600      	movs	r6, #0
 801ebf8:	e7f9      	b.n	801ebee <_calloc_r+0x12>
 801ebfa:	462a      	mov	r2, r5
 801ebfc:	4621      	mov	r1, r4
 801ebfe:	f7fe fa63 	bl	801d0c8 <memset>
 801ec02:	e7f4      	b.n	801ebee <_calloc_r+0x12>

0801ec04 <__ascii_mbtowc>:
 801ec04:	b082      	sub	sp, #8
 801ec06:	b901      	cbnz	r1, 801ec0a <__ascii_mbtowc+0x6>
 801ec08:	a901      	add	r1, sp, #4
 801ec0a:	b142      	cbz	r2, 801ec1e <__ascii_mbtowc+0x1a>
 801ec0c:	b14b      	cbz	r3, 801ec22 <__ascii_mbtowc+0x1e>
 801ec0e:	7813      	ldrb	r3, [r2, #0]
 801ec10:	600b      	str	r3, [r1, #0]
 801ec12:	7812      	ldrb	r2, [r2, #0]
 801ec14:	1e10      	subs	r0, r2, #0
 801ec16:	bf18      	it	ne
 801ec18:	2001      	movne	r0, #1
 801ec1a:	b002      	add	sp, #8
 801ec1c:	4770      	bx	lr
 801ec1e:	4610      	mov	r0, r2
 801ec20:	e7fb      	b.n	801ec1a <__ascii_mbtowc+0x16>
 801ec22:	f06f 0001 	mvn.w	r0, #1
 801ec26:	e7f8      	b.n	801ec1a <__ascii_mbtowc+0x16>

0801ec28 <__ascii_wctomb>:
 801ec28:	4603      	mov	r3, r0
 801ec2a:	4608      	mov	r0, r1
 801ec2c:	b141      	cbz	r1, 801ec40 <__ascii_wctomb+0x18>
 801ec2e:	2aff      	cmp	r2, #255	@ 0xff
 801ec30:	d904      	bls.n	801ec3c <__ascii_wctomb+0x14>
 801ec32:	228a      	movs	r2, #138	@ 0x8a
 801ec34:	601a      	str	r2, [r3, #0]
 801ec36:	f04f 30ff 	mov.w	r0, #4294967295
 801ec3a:	4770      	bx	lr
 801ec3c:	700a      	strb	r2, [r1, #0]
 801ec3e:	2001      	movs	r0, #1
 801ec40:	4770      	bx	lr
	...

0801ec44 <fiprintf>:
 801ec44:	b40e      	push	{r1, r2, r3}
 801ec46:	b503      	push	{r0, r1, lr}
 801ec48:	4601      	mov	r1, r0
 801ec4a:	ab03      	add	r3, sp, #12
 801ec4c:	4805      	ldr	r0, [pc, #20]	@ (801ec64 <fiprintf+0x20>)
 801ec4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec52:	6800      	ldr	r0, [r0, #0]
 801ec54:	9301      	str	r3, [sp, #4]
 801ec56:	f7ff fdc3 	bl	801e7e0 <_vfiprintf_r>
 801ec5a:	b002      	add	sp, #8
 801ec5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec60:	b003      	add	sp, #12
 801ec62:	4770      	bx	lr
 801ec64:	2000002c 	.word	0x2000002c

0801ec68 <abort>:
 801ec68:	b508      	push	{r3, lr}
 801ec6a:	2006      	movs	r0, #6
 801ec6c:	f000 f82c 	bl	801ecc8 <raise>
 801ec70:	2001      	movs	r0, #1
 801ec72:	f7e3 f879 	bl	8001d68 <_exit>

0801ec76 <_raise_r>:
 801ec76:	291f      	cmp	r1, #31
 801ec78:	b538      	push	{r3, r4, r5, lr}
 801ec7a:	4605      	mov	r5, r0
 801ec7c:	460c      	mov	r4, r1
 801ec7e:	d904      	bls.n	801ec8a <_raise_r+0x14>
 801ec80:	2316      	movs	r3, #22
 801ec82:	6003      	str	r3, [r0, #0]
 801ec84:	f04f 30ff 	mov.w	r0, #4294967295
 801ec88:	bd38      	pop	{r3, r4, r5, pc}
 801ec8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ec8c:	b112      	cbz	r2, 801ec94 <_raise_r+0x1e>
 801ec8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ec92:	b94b      	cbnz	r3, 801eca8 <_raise_r+0x32>
 801ec94:	4628      	mov	r0, r5
 801ec96:	f000 f831 	bl	801ecfc <_getpid_r>
 801ec9a:	4622      	mov	r2, r4
 801ec9c:	4601      	mov	r1, r0
 801ec9e:	4628      	mov	r0, r5
 801eca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eca4:	f000 b818 	b.w	801ecd8 <_kill_r>
 801eca8:	2b01      	cmp	r3, #1
 801ecaa:	d00a      	beq.n	801ecc2 <_raise_r+0x4c>
 801ecac:	1c59      	adds	r1, r3, #1
 801ecae:	d103      	bne.n	801ecb8 <_raise_r+0x42>
 801ecb0:	2316      	movs	r3, #22
 801ecb2:	6003      	str	r3, [r0, #0]
 801ecb4:	2001      	movs	r0, #1
 801ecb6:	e7e7      	b.n	801ec88 <_raise_r+0x12>
 801ecb8:	2100      	movs	r1, #0
 801ecba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ecbe:	4620      	mov	r0, r4
 801ecc0:	4798      	blx	r3
 801ecc2:	2000      	movs	r0, #0
 801ecc4:	e7e0      	b.n	801ec88 <_raise_r+0x12>
	...

0801ecc8 <raise>:
 801ecc8:	4b02      	ldr	r3, [pc, #8]	@ (801ecd4 <raise+0xc>)
 801ecca:	4601      	mov	r1, r0
 801eccc:	6818      	ldr	r0, [r3, #0]
 801ecce:	f7ff bfd2 	b.w	801ec76 <_raise_r>
 801ecd2:	bf00      	nop
 801ecd4:	2000002c 	.word	0x2000002c

0801ecd8 <_kill_r>:
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	4d07      	ldr	r5, [pc, #28]	@ (801ecf8 <_kill_r+0x20>)
 801ecdc:	2300      	movs	r3, #0
 801ecde:	4604      	mov	r4, r0
 801ece0:	4608      	mov	r0, r1
 801ece2:	4611      	mov	r1, r2
 801ece4:	602b      	str	r3, [r5, #0]
 801ece6:	f7e3 f82f 	bl	8001d48 <_kill>
 801ecea:	1c43      	adds	r3, r0, #1
 801ecec:	d102      	bne.n	801ecf4 <_kill_r+0x1c>
 801ecee:	682b      	ldr	r3, [r5, #0]
 801ecf0:	b103      	cbz	r3, 801ecf4 <_kill_r+0x1c>
 801ecf2:	6023      	str	r3, [r4, #0]
 801ecf4:	bd38      	pop	{r3, r4, r5, pc}
 801ecf6:	bf00      	nop
 801ecf8:	200018fc 	.word	0x200018fc

0801ecfc <_getpid_r>:
 801ecfc:	f7e3 b81c 	b.w	8001d38 <_getpid>

0801ed00 <_init>:
 801ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed02:	bf00      	nop
 801ed04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed06:	bc08      	pop	{r3}
 801ed08:	469e      	mov	lr, r3
 801ed0a:	4770      	bx	lr

0801ed0c <_fini>:
 801ed0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed0e:	bf00      	nop
 801ed10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed12:	bc08      	pop	{r3}
 801ed14:	469e      	mov	lr, r3
 801ed16:	4770      	bx	lr
