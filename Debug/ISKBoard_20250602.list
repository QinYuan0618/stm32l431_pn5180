
ISKBoard_20250602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000209e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001934  08020b78  08020b78  00021b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080224ac  080224ac  0002422c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080224ac  080224ac  000234ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080224b4  080224b4  0002422c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080224b4  080224b4  000234b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080224b8  080224b8  000234b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  080224bc  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b8  2000022c  080226e8  0002422c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019e4  080226e8  000249e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002422c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b1ac  00000000  00000000  0002425c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a20  00000000  00000000  0006f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f98  00000000  00000000  00078e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024a8  00000000  00000000  0007bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035d12  00000000  00000000  0007e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005ba0f  00000000  00000000  000b3f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c8d7  00000000  00000000  0010f989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022c260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d3a0  00000000  00000000  0022c2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00239644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020b60 	.word	0x08020b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	08020b60 	.word	0x08020b60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800107c <MX_GPIO_Init+0x108>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800107c <MX_GPIO_Init+0x108>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b39      	ldr	r3, [pc, #228]	@ (800107c <MX_GPIO_Init+0x108>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b36      	ldr	r3, [pc, #216]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a35      	ldr	r2, [pc, #212]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b33      	ldr	r3, [pc, #204]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a29      	ldr	r2, [pc, #164]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <MX_GPIO_Init+0x108>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_NSS_GPIO_Port, PN5180_NSS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f018 fc50 	bl	8019898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN5180_RST_GPIO_Port, PN5180_RST_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4820      	ldr	r0, [pc, #128]	@ (8001080 <MX_GPIO_Init+0x10c>)
 8000ffe:	f018 fc4b 	bl	8019898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PN5180_BUSY_Pin */
  GPIO_InitStruct.Pin = PN5180_BUSY_Pin;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_BUSY_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f018 faac 	bl	8019574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_NSS_Pin */
  GPIO_InitStruct.Pin = PN5180_NSS_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_NSS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f018 fa9c 	bl	8019574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_IRQ_Pin */
  GPIO_InitStruct.Pin = PN5180_IRQ_Pin;
 800103c:	2310      	movs	r3, #16
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001040:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PN5180_IRQ_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <MX_GPIO_Init+0x10c>)
 8001052:	f018 fa8f 	bl	8019574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN5180_RST_Pin */
  GPIO_InitStruct.Pin = PN5180_RST_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN5180_RST_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_GPIO_Init+0x10c>)
 800106e:	f018 fa81 	bl	8019574 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f018 f84c 	bl	8019124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f81a 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f7ff ff70 	bl	8000f74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001094:	f000 fc28 	bl	80018e8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001098:	f000 fb08 	bl	80016ac <MX_TIM6_Init>
  MX_TIM1_Init();
 800109c:	f000 fa2a 	bl	80014f4 <MX_TIM1_Init>
  MX_SPI3_Init();
 80010a0:	f000 f866 	bl	8001170 <MX_SPI3_Init>
  MX_TIM2_Init();
 80010a4:	f000 fab4 	bl	8001610 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Iskboard NFC Program v1.0\r\n");
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <main+0x3c>)
 80010aa:	f01d fe4d 	bl	801ed48 <puts>

  beep_start(1, 300); 	/* 蜂鸣器响1声 */
 80010ae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fbe8 	bl	8001888 <beep_start>

  /* 调用NFC Disvery功能*/
  nfc_discovery_main();
 80010b8:	f000 fd16 	bl	8001ae8 <nfc_discovery_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <main+0x38>
 80010c0:	08020b78 	.word	0x08020b78

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b096      	sub	sp, #88	@ 0x58
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2244      	movs	r2, #68	@ 0x44
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f01d ff28 	bl	801ef28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ea:	f018 fbfb 	bl	80198e4 <HAL_PWREx_ControlVoltageScaling>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f4:	f000 f835 	bl	8001162 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	2303      	movs	r3, #3
 8001108:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800110e:	2314      	movs	r3, #20
 8001110:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001112:	2307      	movs	r3, #7
 8001114:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4618      	mov	r0, r3
 8001124:	f018 fc34 	bl	8019990 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800112e:	f000 f818 	bl	8001162 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f019 f834 	bl	801a1b8 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001156:	f000 f804 	bl	8001162 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3758      	adds	r7, #88	@ 0x58
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001166:	b672      	cpsid	i
}
 8001168:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <Error_Handler+0x8>
	...

08001170 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_SPI3_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <MX_SPI3_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_SPI3_Init+0x74>)
 800117c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_SPI3_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_SPI3_Init+0x74>)
 800118a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800118e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_SPI3_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_SPI3_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_SPI3_Init+0x74>)
 800119e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011a6:	2218      	movs	r2, #24
 80011a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011be:	2207      	movs	r2, #7
 80011c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_SPI3_Init+0x74>)
 80011d0:	f019 fd20 	bl	801ac14 <HAL_SPI_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011da:	f7ff ffc2 	bl	8001162 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000248 	.word	0x20000248
 80011e8:	40003c00 	.word	0x40003c00

080011ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_SPI_MspInit+0x7c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d128      	bne.n	8001260 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_SPI_MspInit+0x80>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	4a16      	ldr	r2, [pc, #88]	@ (800126c <HAL_SPI_MspInit+0x80>)
 8001214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001218:	6593      	str	r3, [r2, #88]	@ 0x58
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_SPI_MspInit+0x80>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_SPI_MspInit+0x80>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a10      	ldr	r2, [pc, #64]	@ (800126c <HAL_SPI_MspInit+0x80>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <HAL_SPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = PN5180_SCK_Pin|PN5180_MISO_Pin|PN5180_MOSI_Pin;
 800123e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001250:	2306      	movs	r3, #6
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <HAL_SPI_MspInit+0x84>)
 800125c:	f018 f98a 	bl	8019574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	@ 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40003c00 	.word	0x40003c00
 800126c:	40021000 	.word	0x40021000
 8001270:	48000800 	.word	0x48000800

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_MspInit+0x44>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6613      	str	r3, [r2, #96]	@ 0x60
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x44>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6593      	str	r3, [r2, #88]	@ 0x58
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f017 ff5b 	bl	80191cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <TIM2_IRQHandler+0x10>)
 8001322:	f01a fb7b 	bl	801ba1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002fc 	.word	0x200002fc

08001330 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <USART1_IRQHandler+0x10>)
 8001336:	f01b fc57 	bl	801cbe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000049c 	.word	0x2000049c

08001344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_kill>:

int _kill(int pid, int sig)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135e:	f01d fe35 	bl	801efcc <__errno>
 8001362:	4603      	mov	r3, r0
 8001364:	2216      	movs	r2, #22
 8001366:	601a      	str	r2, [r3, #0]
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_exit>:

void _exit (int status)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffe7 	bl	8001354 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001386:	bf00      	nop
 8001388:	e7fd      	b.n	8001386 <_exit+0x12>

0800138a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e00a      	b.n	80013b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139c:	f3af 8000 	nop.w
 80013a0:	4601      	mov	r1, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	b2ca      	uxtb	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbf0      	blt.n	800139c <_read+0x12>
  }

  return len;
 80013ba:	687b      	ldr	r3, [r7, #4]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e009      	b.n	80013ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60ba      	str	r2, [r7, #8]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fb18 	bl	8001a14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf1      	blt.n	80013d6 <_write+0x12>
  }
  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_close>:

int _close(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001424:	605a      	str	r2, [r3, #4]
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_isatty>:

int _isatty(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f01d fd9a 	bl	801efcc <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000c000 	.word	0x2000c000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	200002ac 	.word	0x200002ac
 80014cc:	200019e8 	.word	0x200019e8

080014d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	@ 0x58
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	222c      	movs	r2, #44	@ 0x2c
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f01d fd01 	bl	801ef28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <MX_TIM1_Init+0x114>)
 8001528:	4a38      	ldr	r2, [pc, #224]	@ (800160c <MX_TIM1_Init+0x118>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800152c:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <MX_TIM1_Init+0x114>)
 800152e:	224f      	movs	r2, #79	@ 0x4f
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <MX_TIM1_Init+0x114>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 370-1;
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <MX_TIM1_Init+0x114>)
 800153a:	f240 1271 	movw	r2, #369	@ 0x171
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <MX_TIM1_Init+0x114>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <MX_TIM1_Init+0x114>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <MX_TIM1_Init+0x114>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001552:	482d      	ldr	r0, [pc, #180]	@ (8001608 <MX_TIM1_Init+0x114>)
 8001554:	f01a f8a4 	bl	801b6a0 <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f7ff fe00 	bl	8001162 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001572:	4619      	mov	r1, r3
 8001574:	4824      	ldr	r0, [pc, #144]	@ (8001608 <MX_TIM1_Init+0x114>)
 8001576:	f01b f917 	bl	801c7a8 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001580:	f7ff fdef 	bl	8001162 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	@ 0x60
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 185;
 8001588:	23b9      	movs	r3, #185	@ 0xb9
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800159c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015a0:	220c      	movs	r2, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4818      	ldr	r0, [pc, #96]	@ (8001608 <MX_TIM1_Init+0x114>)
 80015a6:	f01a fb41 	bl	801bc2c <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80015b0:	f7ff fdd7 	bl	8001162 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <MX_TIM1_Init+0x114>)
 80015ea:	f01b f943 	bl	801c874 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80015f4:	f7ff fdb5 	bl	8001162 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <MX_TIM1_Init+0x114>)
 80015fa:	f000 f8e5 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3758      	adds	r7, #88	@ 0x58
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200002b0 	.word	0x200002b0
 800160c:	40012c00 	.word	0x40012c00

08001610 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001630:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001638:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800163c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001646:	f241 3287 	movw	r2, #4999	@ 0x1387
 800164a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_TIM2_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001654:	2280      	movs	r2, #128	@ 0x80
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001658:	4813      	ldr	r0, [pc, #76]	@ (80016a8 <MX_TIM2_Init+0x98>)
 800165a:	f019 ff01 	bl	801b460 <HAL_TIM_Base_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001664:	f7ff fd7d 	bl	8001162 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001676:	f01a fbed 	bl	801be54 <HAL_TIM_ConfigClockSource>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001680:	f7ff fd6f 	bl	8001162 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_TIM2_Init+0x98>)
 8001692:	f01b f889 	bl	801c7a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800169c:	f7ff fd61 	bl	8001162 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200002fc 	.word	0x200002fc

080016ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016be:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <MX_TIM6_Init+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016c4:	224f      	movs	r2, #79	@ 0x4f
 80016c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016da:	480d      	ldr	r0, [pc, #52]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016dc:	f019 fec0 	bl	801b460 <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80016e6:	f7ff fd3c 	bl	8001162 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4806      	ldr	r0, [pc, #24]	@ (8001710 <MX_TIM6_Init+0x64>)
 80016f8:	f01b f856 	bl	801c7a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001702:	f7ff fd2e 	bl	8001162 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000348 	.word	0x20000348
 8001714:	40001000 	.word	0x40001000

08001718 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_TIM_PWM_MspInit+0x38>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10b      	bne.n	8001742 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_TIM_PWM_MspInit+0x3c>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <HAL_TIM_PWM_MspInit+0x3c>)
 8001730:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001734:	6613      	str	r3, [r2, #96]	@ 0x60
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_TIM_PWM_MspInit+0x3c>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001768:	d114      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_TIM_Base_MspInit+0x68>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <HAL_TIM_Base_MspInit+0x68>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_TIM_Base_MspInit+0x68>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2102      	movs	r1, #2
 8001786:	201c      	movs	r0, #28
 8001788:	f017 fe3f 	bl	801940a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f017 fe58 	bl	8019442 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001792:	e010      	b.n	80017b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_TIM_Base_MspInit+0x6c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10b      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_TIM_Base_MspInit+0x68>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_TIM_Base_MspInit+0x68>)
 80017a4:	f043 0310 	orr.w	r3, r3, #16
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_TIM_Base_MspInit+0x68>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40001000 	.word	0x40001000

080017c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11d      	bne.n	8001826 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_TIM_MspPostInit+0x6c>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 8001802:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001806:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180c:	2302      	movs	r3, #2
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001822:	f017 fea7 	bl	8019574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40021000 	.word	0x40021000

08001838 <delay_us>:
}

/* USER CODE BEGIN 1 */
/* TIM6 是16位的计数器（65535），这里我们us级延时最大到60000 */
void delay_us(uint16_t us)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 60000-us;
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8001848:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800184c:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001850:	3360      	adds	r3, #96	@ 0x60
 8001852:	81fb      	strh	r3, [r7, #14]

	// 打开定时器
	HAL_TIM_Base_Start(&htim6);
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <delay_us+0x4c>)
 8001856:	f019 fe5b 	bl	801b510 <HAL_TIM_Base_Start>

	// 设置CNT每次重置后的初始值，然后再向上计数
	__HAL_TIM_SET_COUNTER(&htim6, differ);
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <delay_us+0x4c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	89fa      	ldrh	r2, [r7, #14]
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

	while( differ < 60000 )
 8001862:	e003      	b.n	800186c <delay_us+0x34>
	{
		// 一直读CNT的值，检查是否过了us时间
		differ = __HAL_TIM_GET_COUNTER(&htim6);
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <delay_us+0x4c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	81fb      	strh	r3, [r7, #14]
	while( differ < 60000 )
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001872:	4293      	cmp	r3, r2
 8001874:	d9f6      	bls.n	8001864 <delay_us+0x2c>
	}

	// 关闭定时器
	HAL_TIM_Base_Stop(&htim6);
 8001876:	4803      	ldr	r0, [pc, #12]	@ (8001884 <delay_us+0x4c>)
 8001878:	f019 fe96 	bl	801b5a8 <HAL_TIM_Base_Stop>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000348 	.word	0x20000348

08001888 <beep_start>:

/* 让蜂鸣器响 times 次，每次 interval 秒*/
void beep_start(uint8_t times, uint16_t interval)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	while( times -- )
 8001898:	e019      	b.n	80018ce <beep_start+0x46>
	{
		/* Start buzzer:通过 定时器 TIM1 的通道 4（TIM_CHANNEL_4） 产生 PWM 信号，从而让蜂鸣器响起来 */
		if( HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_4) != HAL_OK )
 800189a:	210c      	movs	r1, #12
 800189c:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <beep_start+0x5c>)
 800189e:	f019 ff57 	bl	801b750 <HAL_TIM_PWM_Start>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <beep_start+0x24>
		{
			/* Start Error */
			Error_Handler();
 80018a8:	f7ff fc5b 	bl	8001162 <Error_Handler>
		}
		/* 让蜂鸣器 响 interval 毫秒 */
		HAL_Delay( interval);
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f017 fcac 	bl	801920c <HAL_Delay>

		/* Stop buzzer：静音蜂鸣器 */
		if( HAL_TIM_PWM_Stop( &htim1, TIM_CHANNEL_4 ) != HAL_OK )
 80018b4:	210c      	movs	r1, #12
 80018b6:	480b      	ldr	r0, [pc, #44]	@ (80018e4 <beep_start+0x5c>)
 80018b8:	f01a f828 	bl	801b90c <HAL_TIM_PWM_Stop>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <beep_start+0x3e>
		{
			/* Start Error */
			Error_Handler();
 80018c2:	f7ff fc4e 	bl	8001162 <Error_Handler>
		}
		HAL_Delay(interval);
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f017 fc9f 	bl	801920c <HAL_Delay>
	while( times -- )
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	71fa      	strb	r2, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1e0      	bne.n	800189a <beep_start+0x12>
	}
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002b0 	.word	0x200002b0

080018e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 80018ee:	4a17      	ldr	r2, [pc, #92]	@ (800194c <MX_USART1_UART_Init+0x64>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192a:	4807      	ldr	r0, [pc, #28]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 800192c:	f01b f838 	bl	801c9a0 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001936:	f7ff fc14 	bl	8001162 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 800193a:	2201      	movs	r2, #1
 800193c:	4904      	ldr	r1, [pc, #16]	@ (8001950 <MX_USART1_UART_Init+0x68>)
 800193e:	4802      	ldr	r0, [pc, #8]	@ (8001948 <MX_USART1_UART_Init+0x60>)
 8001940:	f01b f906 	bl	801cb50 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000049c 	.word	0x2000049c
 800194c:	40013800 	.word	0x40013800
 8001950:	20000394 	.word	0x20000394

08001954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0a0      	sub	sp, #128	@ 0x80
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	225c      	movs	r2, #92	@ 0x5c
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f01d fad7 	bl	801ef28 <memset>
  if(uartHandle->Instance==USART1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <HAL_UART_MspInit+0xb8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d13f      	bne.n	8001a04 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001984:	2301      	movs	r3, #1
 8001986:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4618      	mov	r0, r3
 8001992:	f018 fe35 	bl	801a600 <HAL_RCCEx_PeriphCLKConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800199c:	f7ff fbe1 	bl	8001162 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_UART_MspInit+0xbc>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a10 <HAL_UART_MspInit+0xbc>)
 80019a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_UART_MspInit+0xbc>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_UART_MspInit+0xbc>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_UART_MspInit+0xbc>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_UART_MspInit+0xbc>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e2:	2307      	movs	r3, #7
 80019e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f0:	f017 fdc0 	bl	8019574 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2025      	movs	r0, #37	@ 0x25
 80019fa:	f017 fd06 	bl	801940a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019fe:	2025      	movs	r0, #37	@ 0x25
 8001a00:	f017 fd1f 	bl	8019442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a04:	bf00      	nop
 8001a06:	3780      	adds	r7, #128	@ 0x80
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40021000 	.word	0x40021000

08001a14 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define	PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a1c:	1d39      	adds	r1, r7, #4
 8001a1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a22:	2201      	movs	r2, #1
 8001a24:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <__io_putchar+0x20>)
 8001a26:	f01b f809 	bl	801ca3c <HAL_UART_Transmit>
	return ch;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	2000049c 	.word	0x2000049c

08001a38 <HAL_UART_RxCpltCallback>:

/* 串口->cpu，串口中断回调函数，要是 g_uart1_rxbuf 还没有满，就将中断收到的1字节数据 s_uart1_rxch 存储到 g_uart1_rxbuf 中，并计数+1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <HAL_UART_RxCpltCallback+0x44>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d113      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0x3a>
	{
		 printf("UART1 received: %s\r\n", g_uart1_rxbuf); // 调试打印
 8001a4a:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <HAL_UART_RxCpltCallback+0x48>)
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <HAL_UART_RxCpltCallback+0x4c>)
 8001a4e:	f01d f90b 	bl	801ec68 <iprintf>
		/* buf 还有空间 */
		if( g_uart1_bytes < sizeof(g_uart1_rxbuf) )
		{
			g_uart1_rxbuf[g_uart1_bytes++] = s_uart1_rxch;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_UART_RxCpltCallback+0x50>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	b2d1      	uxtb	r1, r2
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_UART_RxCpltCallback+0x50>)
 8001a5c:	7011      	strb	r1, [r2, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_UART_RxCpltCallback+0x54>)
 8001a62:	7819      	ldrb	r1, [r3, #0]
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_UART_RxCpltCallback+0x48>)
 8001a66:	5499      	strb	r1, [r3, r2]
		}
		/* 使能下一次中断接收 */
		HAL_UART_Receive_IT(&huart1, &s_uart1_rxch, 1);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4908      	ldr	r1, [pc, #32]	@ (8001a8c <HAL_UART_RxCpltCallback+0x54>)
 8001a6c:	4808      	ldr	r0, [pc, #32]	@ (8001a90 <HAL_UART_RxCpltCallback+0x58>)
 8001a6e:	f01b f86f 	bl	801cb50 <HAL_UART_Receive_IT>
	}
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	20000398 	.word	0x20000398
 8001a84:	08020bbc 	.word	0x08020bbc
 8001a88:	20000498 	.word	0x20000498
 8001a8c:	20000394 	.word	0x20000394
 8001a90:	2000049c 	.word	0x2000049c

08001a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a98:	f7ff fd1a 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	@ (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f01d fa89 	bl	801efd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac6:	f7ff fadd 	bl	8001084 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001acc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8001ad8:	080224bc 	.word	0x080224bc
  ldr r2, =_sbss
 8001adc:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8001ae0:	200019e4 	.word	0x200019e4

08001ae4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_IRQHandler>
	...

08001ae8 <nfc_discovery_main>:
/*******************************************************************************
**   Code
*******************************************************************************/

int nfc_discovery_main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
    do
    {
        phStatus_t status = PH_ERR_INTERNAL_ERROR;
 8001aee:	237f      	movs	r3, #127	@ 0x7f
 8001af0:	82fb      	strh	r3, [r7, #22]
        phNfcLib_Status_t     dwStatus;
#ifdef PH_PLATFORM_HAS_ICFRONTEND
        phNfcLib_AppContext_t AppContext = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
#ifndef PH_OSAL_NULLOS
        phOsal_ThreadObj_t DiscLoop;
#endif /* PH_OSAL_NULLOS */

        /* Perform Controller specific initialization. */
        phApp_CPU_Init();
 8001afc:	f001 fcfe 	bl	80034fc <phApp_CPU_Init>

        /* Perform OSAL Initialization. */
//        (void)phOsal_Init(); // STM32的HAL_Ini()中已经配置了Systick，通过HAL_InitTick()，不需要OSAL的定时器

        DEBUG_PRINTF("\n DiscoveryLoop Example: \n");
 8001b00:	484c      	ldr	r0, [pc, #304]	@ (8001c34 <nfc_discovery_main+0x14c>)
 8001b02:	f01d f921 	bl	801ed48 <puts>
 8001b06:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <nfc_discovery_main+0x150>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f01c ffd5 	bl	801eabc <fflush>

#ifdef PH_PLATFORM_HAS_ICFRONTEND
        status = phbalReg_Init(&sBalParams, sizeof(phbalReg_Type_t));
 8001b12:	2104      	movs	r1, #4
 8001b14:	4849      	ldr	r0, [pc, #292]	@ (8001c3c <nfc_discovery_main+0x154>)
 8001b16:	f017 f939 	bl	8018d8c <phbalReg_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001b1e:	8afb      	ldrh	r3, [r7, #22]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <nfc_discovery_main+0x54>
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2192      	movs	r1, #146	@ 0x92
 8001b2a:	4845      	ldr	r0, [pc, #276]	@ (8001c40 <nfc_discovery_main+0x158>)
 8001b2c:	f01d f89c 	bl	801ec68 <iprintf>
 8001b30:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <nfc_discovery_main+0x150>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f01c ffc0 	bl	801eabc <fflush>

        AppContext.pBalDataparams = &sBalParams;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c3c <nfc_discovery_main+0x154>)
 8001b3e:	607b      	str	r3, [r7, #4]
        dwStatus = phNfcLib_SetContext(&AppContext);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f005 f89a 	bl	8006c7c <phNfcLib_SetContext>
 8001b48:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <nfc_discovery_main+0x7e>
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	2196      	movs	r1, #150	@ 0x96
 8001b54:	483b      	ldr	r0, [pc, #236]	@ (8001c44 <nfc_discovery_main+0x15c>)
 8001b56:	f01d f887 	bl	801ec68 <iprintf>
 8001b5a:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <nfc_discovery_main+0x150>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f01c ffab 	bl	801eabc <fflush>
#endif

        /* Initialize library */
        dwStatus = phNfcLib_Init();
 8001b66:	f005 fb13 	bl	8007190 <phNfcLib_Init>
 8001b6a:	6138      	str	r0, [r7, #16]
        CHECK_NFCLIB_STATUS(dwStatus);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <nfc_discovery_main+0xa0>
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	219b      	movs	r1, #155	@ 0x9b
 8001b76:	4833      	ldr	r0, [pc, #204]	@ (8001c44 <nfc_discovery_main+0x15c>)
 8001b78:	f01d f876 	bl	801ec68 <iprintf>
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <nfc_discovery_main+0x150>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f01c ff9a 	bl	801eabc <fflush>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d142      	bne.n	8001c14 <nfc_discovery_main+0x12c>

        /* Set the generic pointer */
        pHal = phNfcLib_GetDataParams(PH_COMP_HAL);
 8001b8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b92:	f005 fbc1 	bl	8007318 <phNfcLib_GetDataParams>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a2b      	ldr	r2, [pc, #172]	@ (8001c48 <nfc_discovery_main+0x160>)
 8001b9a:	6013      	str	r3, [r2, #0]
        pDiscLoop = phNfcLib_GetDataParams(PH_COMP_AC_DISCLOOP);
 8001b9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ba0:	f005 fbba 	bl	8007318 <phNfcLib_GetDataParams>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a29      	ldr	r2, [pc, #164]	@ (8001c4c <nfc_discovery_main+0x164>)
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Initialize other components that are not initialized by NFCLIB and configure Discovery Loop. */
        status = phApp_Comp_Init(pDiscLoop);
 8001baa:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <nfc_discovery_main+0x164>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fcb6 	bl	8003520 <phApp_Comp_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <nfc_discovery_main+0xee>
 8001bbe:	8afb      	ldrh	r3, [r7, #22]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	21a4      	movs	r1, #164	@ 0xa4
 8001bc4:	481e      	ldr	r0, [pc, #120]	@ (8001c40 <nfc_discovery_main+0x158>)
 8001bc6:	f01d f84f 	bl	801ec68 <iprintf>
 8001bca:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <nfc_discovery_main+0x150>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f01c ff73 	bl	801eabc <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001bd6:	8afb      	ldrh	r3, [r7, #22]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11d      	bne.n	8001c18 <nfc_discovery_main+0x130>

        /* Perform Platform Init */
        status = phApp_Configure_IRQ();
 8001bdc:	f001 fcd2 	bl	8003584 <phApp_Configure_IRQ>
 8001be0:	4603      	mov	r3, r0
 8001be2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8001be4:	8afb      	ldrh	r3, [r7, #22]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <nfc_discovery_main+0x11a>
 8001bea:	8afb      	ldrh	r3, [r7, #22]
 8001bec:	461a      	mov	r2, r3
 8001bee:	21a9      	movs	r1, #169	@ 0xa9
 8001bf0:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <nfc_discovery_main+0x158>)
 8001bf2:	f01d f839 	bl	801ec68 <iprintf>
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <nfc_discovery_main+0x150>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f01c ff5d 	bl	801eabc <fflush>
        if(status != PH_ERR_SUCCESS) break;
 8001c02:	8afb      	ldrh	r3, [r7, #22]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <nfc_discovery_main+0x134>

        phOsal_StartScheduler();

        DEBUG_PRINTF("RTOS Error : Scheduler exited. \n");
#else
        (void)DiscoveryLoop_Demo(pDiscLoop);
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <nfc_discovery_main+0x164>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f821 	bl	8001c54 <DiscoveryLoop_Demo>
 8001c12:	e004      	b.n	8001c1e <nfc_discovery_main+0x136>
        if(dwStatus != PH_NFCLIB_STATUS_SUCCESS) break;
 8001c14:	bf00      	nop
 8001c16:	e002      	b.n	8001c1e <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8001c18:	bf00      	nop
 8001c1a:	e000      	b.n	8001c1e <nfc_discovery_main+0x136>
        if(status != PH_ERR_SUCCESS) break;
 8001c1c:	bf00      	nop
#endif
    } while(0);

    while(bInfLoop); /* Comes here if initialization failure or scheduler exit due to error */
 8001c1e:	bf00      	nop
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <nfc_discovery_main+0x168>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1fa      	bne.n	8001c20 <nfc_discovery_main+0x138>

    return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	08020bd4 	.word	0x08020bd4
 8001c38:	20000070 	.word	0x20000070
 8001c3c:	2000056c 	.word	0x2000056c
 8001c40:	08020bf0 	.word	0x08020bf0
 8001c44:	08020c58 	.word	0x08020c58
 8001c48:	20000570 	.word	0x20000570
 8001c4c:	20000524 	.word	0x20000524
 8001c50:	20000022 	.word	0x20000022

08001c54 <DiscoveryLoop_Demo>:
* is used to detects and reports the NFC technology type.
* \param   pDataParams      The discovery loop data parameters
* \note    This function will never return
*/
void DiscoveryLoop_Demo(void  *pDataParams)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    phStatus_t    status, statustmp;
    uint16_t      wEntryPoint;
    phacDiscLoop_Profile_t bProfile = PHAC_DISCLOOP_PROFILE_UNKNOWN;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	737b      	strb	r3, [r7, #13]
    /* This call shall allocate secure context before calling any secure function,
     * when FreeRtos trust zone is enabled.
     * */
//    phOsal_ThreadSecureStack( 512 ); // 这是FreeRTOS Trust Zone相关的，裸机不需要

    DEBUG_PRINTF("Entering Discovery Loop Demo...\r\n");
 8001c60:	4879      	ldr	r0, [pc, #484]	@ (8001e48 <DiscoveryLoop_Demo+0x1f4>)
 8001c62:	f01d f871 	bl	801ed48 <puts>
 8001c66:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f01c ff25 	bl	801eabc <fflush>

#ifdef ENABLE_DISC_CONFIG

#ifndef ENABLE_EMVCO_PROF
    bProfile = PHAC_DISCLOOP_PROFILE_NFC;
 8001c72:	2301      	movs	r3, #1
 8001c74:	737b      	strb	r3, [r7, #13]
#else
    bProfile = PHAC_DISCLOOP_PROFILE_EMVCO;
#endif
    /* Load selected profile for Discovery loop */
    LoadProfile(bProfile);
 8001c76:	7b7b      	ldrb	r3, [r7, #13]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fc0b 	bl	8002494 <LoadProfile>
#endif /* ENABLE_DISC_CONFIG */

#ifdef NXPBUILD__PHHAL_HW_TARGET
    /* Initialize the setting for Listen Mode */
    status = phApp_HALConfigAutoColl();
 8001c7e:	f001 fc93 	bl	80035a8 <phApp_HALConfigAutoColl>
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
    CHECK_STATUS(status);
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <DiscoveryLoop_Demo+0x50>
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	21e3      	movs	r1, #227	@ 0xe3
 8001c92:	486f      	ldr	r0, [pc, #444]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001c94:	f01c ffe8 	bl	801ec68 <iprintf>
 8001c98:	4b6c      	ldr	r3, [pc, #432]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f01c ff0c 	bl	801eabc <fflush>
#endif /* NXPBUILD__PHHAL_HW_TARGET */

    /* Get Poll Configuration */
    status = phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, &bSavePollTechCfg);
 8001ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8001e54 <DiscoveryLoop_Demo+0x200>)
 8001ca6:	218c      	movs	r1, #140	@ 0x8c
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f006 fdb9 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	817b      	strh	r3, [r7, #10]
    CHECK_STATUS(status);
 8001cb2:	897b      	ldrh	r3, [r7, #10]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <DiscoveryLoop_Demo+0x7c>
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	21e8      	movs	r1, #232	@ 0xe8
 8001cbe:	4864      	ldr	r0, [pc, #400]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001cc0:	f01c ffd2 	bl	801ec68 <iprintf>
 8001cc4:	4b61      	ldr	r3, [pc, #388]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f01c fef6 	bl	801eabc <fflush>

    /* Start in poll mode */
    wEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	81fb      	strh	r3, [r7, #14]
    status = PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED;
 8001cd4:	2386      	movs	r3, #134	@ 0x86
 8001cd6:	817b      	strh	r3, [r7, #10]

    /* Switch off RF field */
    statustmp = phhalHw_FieldOff(pHal);
 8001cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <DiscoveryLoop_Demo+0x204>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00c fb1b 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	813b      	strh	r3, [r7, #8]
    CHECK_STATUS(statustmp);
 8001ce6:	893b      	ldrh	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <DiscoveryLoop_Demo+0xb0>
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	21f0      	movs	r1, #240	@ 0xf0
 8001cf2:	4857      	ldr	r0, [pc, #348]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001cf4:	f01c ffb8 	bl	801ec68 <iprintf>
 8001cf8:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f01c fedc 	bl	801eabc <fflush>
    DEBUG_PRINTF("RF Field OFF status: 0x%04X\r\n", statustmp);
 8001d04:	893b      	ldrh	r3, [r7, #8]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4854      	ldr	r0, [pc, #336]	@ (8001e5c <DiscoveryLoop_Demo+0x208>)
 8001d0a:	f01c ffad 	bl	801ec68 <iprintf>
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f01c fed1 	bl	801eabc <fflush>

    TestRFField();
 8001d1a:	f001 f87f 	bl	8002e1c <TestRFField>

    while(1)
    {
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8001d1e:	4850      	ldr	r0, [pc, #320]	@ (8001e60 <DiscoveryLoop_Demo+0x20c>)
 8001d20:	f01d f812 	bl	801ed48 <puts>
 8001d24:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f01c fec6 	bl	801eabc <fflush>

        /* Before polling set Discovery Poll State to Detection , as later in the code it can be changed to e.g. PHAC_DISCLOOP_POLL_STATE_REMOVAL*/
        statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2184      	movs	r1, #132	@ 0x84
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f006 f8f5 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	813b      	strh	r3, [r7, #8]
        CHECK_STATUS(statustmp);
 8001d3e:	893b      	ldrh	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <DiscoveryLoop_Demo+0x108>
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	461a      	mov	r2, r3
 8001d48:	21fb      	movs	r1, #251	@ 0xfb
 8001d4a:	4841      	ldr	r0, [pc, #260]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001d4c:	f01c ff8c 	bl	801ec68 <iprintf>
 8001d50:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f01c feb0 	bl	801eabc <fflush>
        CHECK_STATUS(status);
#endif /* PH_EXAMPLE1_LPCD_ENABLE*/

        /* Start discovery loop */
        /* PROGRAM BLOCK HERE!!! */
        status = phacDiscLoop_Run(pDataParams, wEntryPoint);
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f006 f80c 	bl	8007d80 <phacDiscLoop_Sw_Run>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	817b      	strh	r3, [r7, #10]

        /* 输出：0x4080  或者  0x4083 */
        DEBUG_PRINTF("Discovery result: 0x%04X\r\n", status);
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	483c      	ldr	r0, [pc, #240]	@ (8001e64 <DiscoveryLoop_Demo+0x210>)
 8001d72:	f01c ff79 	bl	801ec68 <iprintf>
 8001d76:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f01c fe9d 	bl	801eabc <fflush>

        if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 8001d82:	7b7b      	ldrb	r3, [r7, #13]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d0ca      	beq.n	8001d1e <DiscoveryLoop_Demo+0xca>

#endif /* ENABLE_EMVCO_PROF */
        }
        else
        {
            wEntryPoint = NFCForumProcess(wEntryPoint, status);
 8001d88:	897a      	ldrh	r2, [r7, #10]
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f86c 	bl	8001e6c <NFCForumProcess>
 8001d94:	4603      	mov	r3, r0
 8001d96:	81fb      	strh	r3, [r7, #14]

            /* Set Poll Configuration */
            statustmp = phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, bSavePollTechCfg);
 8001d98:	4b2e      	ldr	r3, [pc, #184]	@ (8001e54 <DiscoveryLoop_Demo+0x200>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	218c      	movs	r1, #140	@ 0x8c
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f006 f8bf 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	813b      	strh	r3, [r7, #8]
            CHECK_STATUS(statustmp);
 8001daa:	893b      	ldrh	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <DiscoveryLoop_Demo+0x176>
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8001db8:	4825      	ldr	r0, [pc, #148]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001dba:	f01c ff55 	bl	801ec68 <iprintf>
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f01c fe79 	bl	801eabc <fflush>

            /* Switch off RF field */
            statustmp = phhalHw_FieldOff(pHal);
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <DiscoveryLoop_Demo+0x204>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00c faa2 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	813b      	strh	r3, [r7, #8]
            CHECK_STATUS(statustmp);
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <DiscoveryLoop_Demo+0x1a4>
 8001dde:	893b      	ldrh	r3, [r7, #8]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8001de6:	481a      	ldr	r0, [pc, #104]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001de8:	f01c ff3e 	bl	801ec68 <iprintf>
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f01c fe62 	bl	801eabc <fflush>

            /* Wait for field-off time-out */
            statustmp = phhalHw_Wait(pHal, PHHAL_HW_TIME_MICROSECONDS, 5100);
 8001df8:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <DiscoveryLoop_Demo+0x204>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00c faac 	bl	800e360 <phhalHw_Pn5180_Wait>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	813b      	strh	r3, [r7, #8]
            CHECK_STATUS(statustmp);	// error
 8001e0c:	893b      	ldrh	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <DiscoveryLoop_Demo+0x1d8>
 8001e12:	893b      	ldrh	r3, [r7, #8]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <DiscoveryLoop_Demo+0x1fc>)
 8001e1c:	f01c ff24 	bl	801ec68 <iprintf>
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f01c fe48 	bl	801eabc <fflush>

            DEBUG_PRINTF("Poll cycle complete, waiting...\r\n");  // 添加这行
 8001e2c:	480e      	ldr	r0, [pc, #56]	@ (8001e68 <DiscoveryLoop_Demo+0x214>)
 8001e2e:	f01c ff8b 	bl	801ed48 <puts>
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <DiscoveryLoop_Demo+0x1f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f01c fe3f 	bl	801eabc <fflush>
            HAL_Delay(1000);  // 添加1秒延时，方便观察
 8001e3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e42:	f017 f9e3 	bl	801920c <HAL_Delay>
    	DEBUG_PRINTF("Poll cycle start...\r\n");
 8001e46:	e76a      	b.n	8001d1e <DiscoveryLoop_Demo+0xca>
 8001e48:	08020c90 	.word	0x08020c90
 8001e4c:	20000070 	.word	0x20000070
 8001e50:	08020bf0 	.word	0x08020bf0
 8001e54:	20000528 	.word	0x20000528
 8001e58:	20000570 	.word	0x20000570
 8001e5c:	08020cb4 	.word	0x08020cb4
 8001e60:	08020cd4 	.word	0x08020cd4
 8001e64:	08020cec 	.word	0x08020cec
 8001e68:	08020d08 	.word	0x08020d08

08001e6c <NFCForumProcess>:
        }
    }
}

uint16_t NFCForumProcess(uint16_t wEntryPoint, phStatus_t DiscLoopStatus)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	80fb      	strh	r3, [r7, #6]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	80bb      	strh	r3, [r7, #4]
    phStatus_t    status;
    uint16_t      wTechDetected = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	823b      	strh	r3, [r7, #16]
    uint16_t      wNumberOfTags = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	81fb      	strh	r3, [r7, #14]
    uint16_t      wValue;
    uint8_t       bIndex;
    uint16_t      wReturnEntryPoint;

    if(wEntryPoint == PHAC_DISCLOOP_ENTRY_POINT_POLL)
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 826e 	bne.w	8002368 <NFCForumProcess+0x4fc>
    {
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_TECH_DETECTED)
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b88      	cmp	r3, #136	@ 0x88
 8001e92:	f040 80c6 	bne.w	8002022 <NFCForumProcess+0x1b6>
        {
            DEBUG_PRINTF (" \n Multiple technology detected: \n");
 8001e96:	489a      	ldr	r0, [pc, #616]	@ (8002100 <NFCForumProcess+0x294>)
 8001e98:	f01c ff56 	bl	801ed48 <puts>
 8001e9c:	4b99      	ldr	r3, [pc, #612]	@ (8002104 <NFCForumProcess+0x298>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f01c fe0a 	bl	801eabc <fflush>

            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8001ea8:	4b97      	ldr	r3, [pc, #604]	@ (8002108 <NFCForumProcess+0x29c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	2187      	movs	r1, #135	@ 0x87
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f006 fcb4 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8001ebc:	8afb      	ldrh	r3, [r7, #22]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <NFCForumProcess+0x70>
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8001eca:	4890      	ldr	r0, [pc, #576]	@ (800210c <NFCForumProcess+0x2a0>)
 8001ecc:	f01c fecc 	bl	801ec68 <iprintf>
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8002104 <NFCForumProcess+0x298>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f01c fdf0 	bl	801eabc <fflush>

            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8001edc:	8a3b      	ldrh	r3, [r7, #16]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <NFCForumProcess+0x8c>
            {
                DEBUG_PRINTF (" \tType A detected... \n");
 8001ee6:	488a      	ldr	r0, [pc, #552]	@ (8002110 <NFCForumProcess+0x2a4>)
 8001ee8:	f01c ff2e 	bl	801ed48 <puts>
 8001eec:	4b85      	ldr	r3, [pc, #532]	@ (8002104 <NFCForumProcess+0x298>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f01c fde2 	bl	801eabc <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 8001ef8:	8a3b      	ldrh	r3, [r7, #16]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <NFCForumProcess+0xa8>
            {
                DEBUG_PRINTF (" \tType B detected... \n");
 8001f02:	4884      	ldr	r0, [pc, #528]	@ (8002114 <NFCForumProcess+0x2a8>)
 8001f04:	f01c ff20 	bl	801ed48 <puts>
 8001f08:	4b7e      	ldr	r3, [pc, #504]	@ (8002104 <NFCForumProcess+0x298>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f01c fdd4 	bl	801eabc <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212))
 8001f14:	8a3b      	ldrh	r3, [r7, #16]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <NFCForumProcess+0xc4>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 212... \n");
 8001f1e:	487e      	ldr	r0, [pc, #504]	@ (8002118 <NFCForumProcess+0x2ac>)
 8001f20:	f01c ff12 	bl	801ed48 <puts>
 8001f24:	4b77      	ldr	r3, [pc, #476]	@ (8002104 <NFCForumProcess+0x298>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f01c fdc6 	bl	801eabc <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8001f30:	8a3b      	ldrh	r3, [r7, #16]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <NFCForumProcess+0xe0>
            {
                DEBUG_PRINTF (" \tType F detected with baud rate 424... \n");
 8001f3a:	4878      	ldr	r0, [pc, #480]	@ (800211c <NFCForumProcess+0x2b0>)
 8001f3c:	f01c ff04 	bl	801ed48 <puts>
 8001f40:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <NFCForumProcess+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f01c fdb8 	bl	801eabc <fflush>
            }
            if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 8001f4c:	8a3b      	ldrh	r3, [r7, #16]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <NFCForumProcess+0xfc>
            {
                DEBUG_PRINTF(" \tType V / ISO 15693 / T5T detected... \n");
 8001f56:	4872      	ldr	r0, [pc, #456]	@ (8002120 <NFCForumProcess+0x2b4>)
 8001f58:	f01c fef6 	bl	801ed48 <puts>
 8001f5c:	4b69      	ldr	r3, [pc, #420]	@ (8002104 <NFCForumProcess+0x298>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f01c fdaa 	bl	801eabc <fflush>
            }

            /* Select 1st Detected Technology to Resolve*/
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	757b      	strb	r3, [r7, #21]
 8001f6c:	e029      	b.n	8001fc2 <NFCForumProcess+0x156>
            {
                if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 8001f6e:	8a3b      	ldrh	r3, [r7, #16]
 8001f70:	461a      	mov	r2, r3
 8001f72:	7d7b      	ldrb	r3, [r7, #21]
 8001f74:	fa42 f303 	asr.w	r3, r2, r3
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01d      	beq.n	8001fbc <NFCForumProcess+0x150>
                {
                    /* Configure for one of the detected technology */
                    status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (1 << bIndex));
 8001f80:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <NFCForumProcess+0x29c>)
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	7d7b      	ldrb	r3, [r7, #21]
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	218c      	movs	r1, #140	@ 0x8c
 8001f92:	f005 ffc7 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8001f9a:	8afb      	ldrh	r3, [r7, #22]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d014      	beq.n	8001fca <NFCForumProcess+0x15e>
 8001fa0:	8afb      	ldrh	r3, [r7, #22]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8001fa8:	4858      	ldr	r0, [pc, #352]	@ (800210c <NFCForumProcess+0x2a0>)
 8001faa:	f01c fe5d 	bl	801ec68 <iprintf>
 8001fae:	4b55      	ldr	r3, [pc, #340]	@ (8002104 <NFCForumProcess+0x298>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f01c fd81 	bl	801eabc <fflush>
                    break;
 8001fba:	e006      	b.n	8001fca <NFCForumProcess+0x15e>
            for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8001fbc:	7d7b      	ldrb	r3, [r7, #21]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	757b      	strb	r3, [r7, #21]
 8001fc2:	7d7b      	ldrb	r3, [r7, #21]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d9d2      	bls.n	8001f6e <NFCForumProcess+0x102>
 8001fc8:	e000      	b.n	8001fcc <NFCForumProcess+0x160>
                    break;
 8001fca:	bf00      	nop
                }
            }

            /* Print the technology resolved */
            phApp_PrintTech((1 << bIndex));
 8001fcc:	7d7b      	ldrb	r3, [r7, #21]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 ff7a 	bl	8002ed0 <phApp_PrintTech>

            /* Set Discovery Poll State to collision resolution */
            status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION);
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8002108 <NFCForumProcess+0x29c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	2184      	movs	r1, #132	@ 0x84
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f005 ff9d 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00c      	beq.n	800200e <NFCForumProcess+0x1a2>
 8001ff4:	8afb      	ldrh	r3, [r7, #22]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001ffc:	4843      	ldr	r0, [pc, #268]	@ (800210c <NFCForumProcess+0x2a0>)
 8001ffe:	f01c fe33 	bl	801ec68 <iprintf>
 8002002:	4b40      	ldr	r3, [pc, #256]	@ (8002104 <NFCForumProcess+0x298>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f01c fd57 	bl	801eabc <fflush>

            /* Restart discovery loop in poll mode from collision resolution phase */
            DiscLoopStatus = phacDiscLoop_Run(pDiscLoop, wEntryPoint);
 800200e:	4b3e      	ldr	r3, [pc, #248]	@ (8002108 <NFCForumProcess+0x29c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f005 feb1 	bl	8007d80 <phacDiscLoop_Sw_Run>
 800201e:	4603      	mov	r3, r0
 8002020:	80bb      	strh	r3, [r7, #4]
        }

        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED)
 8002022:	88bb      	ldrh	r3, [r7, #4]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b8a      	cmp	r3, #138	@ 0x8a
 8002028:	f040 80b5 	bne.w	8002196 <NFCForumProcess+0x32a>
        {
            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 800202c:	4b36      	ldr	r3, [pc, #216]	@ (8002108 <NFCForumProcess+0x29c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f107 0210 	add.w	r2, r7, #16
 8002034:	2187      	movs	r1, #135	@ 0x87
 8002036:	4618      	mov	r0, r3
 8002038:	f006 fbf2 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002040:	8afb      	ldrh	r3, [r7, #22]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <NFCForumProcess+0x1f4>
 8002046:	8afb      	ldrh	r3, [r7, #22]
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 800204e:	482f      	ldr	r0, [pc, #188]	@ (800210c <NFCForumProcess+0x2a0>)
 8002050:	f01c fe0a 	bl	801ec68 <iprintf>
 8002054:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <NFCForumProcess+0x298>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4618      	mov	r0, r3
 800205c:	f01c fd2e 	bl	801eabc <fflush>

            /* Get number of tags detected */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 8002060:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <NFCForumProcess+0x29c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f107 020e 	add.w	r2, r7, #14
 8002068:	2181      	movs	r1, #129	@ 0x81
 800206a:	4618      	mov	r0, r3
 800206c:	f006 fbd8 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 8002070:	4603      	mov	r3, r0
 8002072:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002074:	8afb      	ldrh	r3, [r7, #22]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <NFCForumProcess+0x228>
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8002082:	4822      	ldr	r0, [pc, #136]	@ (800210c <NFCForumProcess+0x2a0>)
 8002084:	f01c fdf0 	bl	801ec68 <iprintf>
 8002088:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <NFCForumProcess+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4618      	mov	r0, r3
 8002090:	f01c fd14 	bl	801eabc <fflush>

            DEBUG_PRINTF (" \n Multiple cards resolved: %d cards \n",wNumberOfTags);
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	4619      	mov	r1, r3
 8002098:	4822      	ldr	r0, [pc, #136]	@ (8002124 <NFCForumProcess+0x2b8>)
 800209a:	f01c fde5 	bl	801ec68 <iprintf>
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <NFCForumProcess+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f01c fd09 	bl	801eabc <fflush>
            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 80020aa:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <NFCForumProcess+0x29c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	89f9      	ldrh	r1, [r7, #14]
 80020b0:	8a3a      	ldrh	r2, [r7, #16]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 ffa4 	bl	8003000 <phApp_PrintTagInfo>

            if(wNumberOfTags > 1)
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	f240 8151 	bls.w	8002362 <NFCForumProcess+0x4f6>
            {
                /* Get 1st Detected Technology and Activate device at index 0 */
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	757b      	strb	r3, [r7, #21]
 80020c4:	e035      	b.n	8002132 <NFCForumProcess+0x2c6>
                {
                    if(PHAC_DISCLOOP_CHECK_ANDMASK(wTechDetected, (1 << bIndex)))
 80020c6:	8a3b      	ldrh	r3, [r7, #16]
 80020c8:	461a      	mov	r2, r3
 80020ca:	7d7b      	ldrb	r3, [r7, #21]
 80020cc:	fa42 f303 	asr.w	r3, r2, r3
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d029      	beq.n	800212c <NFCForumProcess+0x2c0>
                    {
                        DEBUG_PRINTF("\t Activating one card...\n");
 80020d8:	4813      	ldr	r0, [pc, #76]	@ (8002128 <NFCForumProcess+0x2bc>)
 80020da:	f01c fe35 	bl	801ed48 <puts>
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <NFCForumProcess+0x298>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f01c fce9 	bl	801eabc <fflush>
                        status = phacDiscLoop_ActivateCard(pDiscLoop, bIndex, 0);
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <NFCForumProcess+0x29c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	7d79      	ldrb	r1, [r7, #21]
 80020f0:	2200      	movs	r2, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 fe50 	bl	8008d98 <phacDiscLoop_Sw_ActivateCard>
 80020f8:	4603      	mov	r3, r0
 80020fa:	82fb      	strh	r3, [r7, #22]
                        break;
 80020fc:	e01c      	b.n	8002138 <NFCForumProcess+0x2cc>
 80020fe:	bf00      	nop
 8002100:	08020d2c 	.word	0x08020d2c
 8002104:	20000070 	.word	0x20000070
 8002108:	20000524 	.word	0x20000524
 800210c:	08020bf0 	.word	0x08020bf0
 8002110:	08020d50 	.word	0x08020d50
 8002114:	08020d68 	.word	0x08020d68
 8002118:	08020d80 	.word	0x08020d80
 800211c:	08020dac 	.word	0x08020dac
 8002120:	08020dd8 	.word	0x08020dd8
 8002124:	08020e00 	.word	0x08020e00
 8002128:	08020e28 	.word	0x08020e28
                for(bIndex = 0; bIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 800212c:	7d7b      	ldrb	r3, [r7, #21]
 800212e:	3301      	adds	r3, #1
 8002130:	757b      	strb	r3, [r7, #21]
 8002132:	7d7b      	ldrb	r3, [r7, #21]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d9c6      	bls.n	80020c6 <NFCForumProcess+0x25a>
                    }
                }

                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 8002138:	8afb      	ldrh	r3, [r7, #22]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b8b      	cmp	r3, #139	@ 0x8b
 800213e:	d008      	beq.n	8002152 <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 8002140:	8afb      	ldrh	r3, [r7, #22]
 8002142:	b2db      	uxtb	r3, r3
                if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED) ||
 8002144:	2b8d      	cmp	r3, #141	@ 0x8d
 8002146:	d004      	beq.n	8002152 <NFCForumProcess+0x2e6>
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND))
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	b2db      	uxtb	r3, r3
                        ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED) ||
 800214c:	2b8e      	cmp	r3, #142	@ 0x8e
 800214e:	f040 8108 	bne.w	8002362 <NFCForumProcess+0x4f6>
                {
                    /* Get Detected Technology Type */
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002152:	4ba7      	ldr	r3, [pc, #668]	@ (80023f0 <NFCForumProcess+0x584>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f107 0210 	add.w	r2, r7, #16
 800215a:	2187      	movs	r1, #135	@ 0x87
 800215c:	4618      	mov	r0, r3
 800215e:	f006 fb5f 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8002166:	8afb      	ldrh	r3, [r7, #22]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <NFCForumProcess+0x31a>
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	461a      	mov	r2, r3
 8002170:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8002174:	489f      	ldr	r0, [pc, #636]	@ (80023f4 <NFCForumProcess+0x588>)
 8002176:	f01c fd77 	bl	801ec68 <iprintf>
 800217a:	4b9f      	ldr	r3, [pc, #636]	@ (80023f8 <NFCForumProcess+0x58c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4618      	mov	r0, r3
 8002182:	f01c fc9b 	bl	801eabc <fflush>

                    phApp_PrintTagInfo(pDiscLoop, 0x01, wTechDetected);
 8002186:	4b9a      	ldr	r3, [pc, #616]	@ (80023f0 <NFCForumProcess+0x584>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	8a3a      	ldrh	r2, [r7, #16]
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f000 ff36 	bl	8003000 <phApp_PrintTagInfo>
 8002194:	e0e5      	b.n	8002362 <NFCForumProcess+0x4f6>
                    PRINT_INFO("\t\tCard activation failed...\n");
                }
            }
            /* Switch to LISTEN mode after POLL mode */
        }
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 8002196:	88bb      	ldrh	r3, [r7, #4]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b84      	cmp	r3, #132	@ 0x84
 800219c:	f000 80e1 	beq.w	8002362 <NFCForumProcess+0x4f6>
                ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_DEVICE_RESOLVED))
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	b2db      	uxtb	r3, r3
        else if (((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED) ||
 80021a4:	2b85      	cmp	r3, #133	@ 0x85
 80021a6:	f000 80dc 	beq.w	8002362 <NFCForumProcess+0x4f6>
        {
            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFON)
 80021aa:	88bb      	ldrh	r3, [r7, #4]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b82      	cmp	r3, #130	@ 0x82
 80021b0:	f000 80d7 	beq.w	8002362 <NFCForumProcess+0x4f6>
            /*
             * If external RF is detected during POLL, return back so that the application
             * can restart the loop in LISTEN mode
             */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 80021b4:	88bb      	ldrh	r3, [r7, #4]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b8e      	cmp	r3, #142	@ 0x8e
 80021ba:	d12a      	bne.n	8002212 <NFCForumProcess+0x3a6>
        {
            DEBUG_PRINTF (" \n Device having T4T and NFC-DEP support detected... \n");
 80021bc:	488f      	ldr	r0, [pc, #572]	@ (80023fc <NFCForumProcess+0x590>)
 80021be:	f01c fdc3 	bl	801ed48 <puts>
 80021c2:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <NFCForumProcess+0x58c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f01c fc77 	bl	801eabc <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80021ce:	4b88      	ldr	r3, [pc, #544]	@ (80023f0 <NFCForumProcess+0x584>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f107 0210 	add.w	r2, r7, #16
 80021d6:	2187      	movs	r1, #135	@ 0x87
 80021d8:	4618      	mov	r0, r3
 80021da:	f006 fb21 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80021e2:	8afb      	ldrh	r3, [r7, #22]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <NFCForumProcess+0x396>
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f240 11af 	movw	r1, #431	@ 0x1af
 80021f0:	4880      	ldr	r0, [pc, #512]	@ (80023f4 <NFCForumProcess+0x588>)
 80021f2:	f01c fd39 	bl	801ec68 <iprintf>
 80021f6:	4b80      	ldr	r3, [pc, #512]	@ (80023f8 <NFCForumProcess+0x58c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f01c fc5d 	bl	801eabc <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 8002202:	4b7b      	ldr	r3, [pc, #492]	@ (80023f0 <NFCForumProcess+0x584>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	8a3a      	ldrh	r2, [r7, #16]
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fef8 	bl	8003000 <phApp_PrintTagInfo>
 8002210:	e0a7      	b.n	8002362 <NFCForumProcess+0x4f6>

        /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_ACTIVATED)
 8002212:	88bb      	ldrh	r3, [r7, #4]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b8b      	cmp	r3, #139	@ 0x8b
 8002218:	d144      	bne.n	80022a4 <NFCForumProcess+0x438>
        {
            DEBUG_PRINTF (" \n Card detected and activated successfully... \n");
 800221a:	4879      	ldr	r0, [pc, #484]	@ (8002400 <NFCForumProcess+0x594>)
 800221c:	f01c fd94 	bl	801ed48 <puts>
 8002220:	4b75      	ldr	r3, [pc, #468]	@ (80023f8 <NFCForumProcess+0x58c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4618      	mov	r0, r3
 8002228:	f01c fc48 	bl	801eabc <fflush>
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND, &wNumberOfTags);
 800222c:	4b70      	ldr	r3, [pc, #448]	@ (80023f0 <NFCForumProcess+0x584>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f107 020e 	add.w	r2, r7, #14
 8002234:	2181      	movs	r1, #129	@ 0x81
 8002236:	4618      	mov	r0, r3
 8002238:	f006 faf2 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002240:	8afb      	ldrh	r3, [r7, #22]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <NFCForumProcess+0x3f4>
 8002246:	8afb      	ldrh	r3, [r7, #22]
 8002248:	461a      	mov	r2, r3
 800224a:	f240 11b9 	movw	r1, #441	@ 0x1b9
 800224e:	4869      	ldr	r0, [pc, #420]	@ (80023f4 <NFCForumProcess+0x588>)
 8002250:	f01c fd0a 	bl	801ec68 <iprintf>
 8002254:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <NFCForumProcess+0x58c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4618      	mov	r0, r3
 800225c:	f01c fc2e 	bl	801eabc <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 8002260:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <NFCForumProcess+0x584>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f107 0210 	add.w	r2, r7, #16
 8002268:	2187      	movs	r1, #135	@ 0x87
 800226a:	4618      	mov	r0, r3
 800226c:	f006 fad8 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 8002274:	8afb      	ldrh	r3, [r7, #22]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <NFCForumProcess+0x428>
 800227a:	8afb      	ldrh	r3, [r7, #22]
 800227c:	461a      	mov	r2, r3
 800227e:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8002282:	485c      	ldr	r0, [pc, #368]	@ (80023f4 <NFCForumProcess+0x588>)
 8002284:	f01c fcf0 	bl	801ec68 <iprintf>
 8002288:	4b5b      	ldr	r3, [pc, #364]	@ (80023f8 <NFCForumProcess+0x58c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f01c fc14 	bl	801eabc <fflush>

            phApp_PrintTagInfo(pDiscLoop, wNumberOfTags, wTechDetected);
 8002294:	4b56      	ldr	r3, [pc, #344]	@ (80023f0 <NFCForumProcess+0x584>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	89f9      	ldrh	r1, [r7, #14]
 800229a:	8a3a      	ldrh	r2, [r7, #16]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 feaf 	bl	8003000 <phApp_PrintTagInfo>
 80022a2:	e05e      	b.n	8002362 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED)
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b8c      	cmp	r3, #140	@ 0x8c
 80022aa:	d109      	bne.n	80022c0 <NFCForumProcess+0x454>
        {
            DEBUG_PRINTF (" \n Active target detected... \n");
 80022ac:	4855      	ldr	r0, [pc, #340]	@ (8002404 <NFCForumProcess+0x598>)
 80022ae:	f01c fd4b 	bl	801ed48 <puts>
 80022b2:	4b51      	ldr	r3, [pc, #324]	@ (80023f8 <NFCForumProcess+0x58c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f01c fbff 	bl	801eabc <fflush>
 80022be:	e050      	b.n	8002362 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED)
 80022c0:	88bb      	ldrh	r3, [r7, #4]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b8d      	cmp	r3, #141	@ 0x8d
 80022c6:	d12a      	bne.n	800231e <NFCForumProcess+0x4b2>
        {
            DEBUG_PRINTF (" \n Passive target detected... \n");
 80022c8:	484f      	ldr	r0, [pc, #316]	@ (8002408 <NFCForumProcess+0x59c>)
 80022ca:	f01c fd3d 	bl	801ed48 <puts>
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <NFCForumProcess+0x58c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f01c fbf1 	bl	801eabc <fflush>

            /* Get Detected Technology Type */
            status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TECH_DETECTED, &wTechDetected);
 80022da:	4b45      	ldr	r3, [pc, #276]	@ (80023f0 <NFCForumProcess+0x584>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f107 0210 	add.w	r2, r7, #16
 80022e2:	2187      	movs	r1, #135	@ 0x87
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 fa9b 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80022ee:	8afb      	ldrh	r3, [r7, #22]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00c      	beq.n	800230e <NFCForumProcess+0x4a2>
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f240 11cf 	movw	r1, #463	@ 0x1cf
 80022fc:	483d      	ldr	r0, [pc, #244]	@ (80023f4 <NFCForumProcess+0x588>)
 80022fe:	f01c fcb3 	bl	801ec68 <iprintf>
 8002302:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <NFCForumProcess+0x58c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4618      	mov	r0, r3
 800230a:	f01c fbd7 	bl	801eabc <fflush>

            phApp_PrintTagInfo(pDiscLoop, 1, wTechDetected);
 800230e:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <NFCForumProcess+0x584>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	8a3a      	ldrh	r2, [r7, #16]
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fe72 	bl	8003000 <phApp_PrintTagInfo>
 800231c:	e021      	b.n	8002362 <NFCForumProcess+0x4f6>

            /* Switch to LISTEN mode after POLL mode */
        }
        else if ((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED)
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b86      	cmp	r3, #134	@ 0x86
 8002324:	d01d      	beq.n	8002362 <NFCForumProcess+0x4f6>
        {
            /* LPCD is succeed but no tag is detected. */
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 8002326:	88bb      	ldrh	r3, [r7, #4]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b80      	cmp	r3, #128	@ 0x80
 800232c:	d119      	bne.n	8002362 <NFCForumProcess+0x4f6>
            {
                status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 800232e:	4b30      	ldr	r3, [pc, #192]	@ (80023f0 <NFCForumProcess+0x584>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f107 020c 	add.w	r2, r7, #12
 8002336:	2185      	movs	r1, #133	@ 0x85
 8002338:	4618      	mov	r0, r3
 800233a:	f006 fa71 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	82fb      	strh	r3, [r7, #22]
                CHECK_STATUS(status);
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <NFCForumProcess+0x4f6>
 8002348:	8afb      	ldrh	r3, [r7, #22]
 800234a:	461a      	mov	r2, r3
 800234c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8002350:	4828      	ldr	r0, [pc, #160]	@ (80023f4 <NFCForumProcess+0x588>)
 8002352:	f01c fc89 	bl	801ec68 <iprintf>
 8002356:	4b28      	ldr	r3, [pc, #160]	@ (80023f8 <NFCForumProcess+0x58c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f01c fbad 	bl	801eabc <fflush>
                DEBUG_ERROR_PRINT(PrintErrorInfo(status));
            }
        }

        /* Update the Entry point to LISTEN mode. */
        wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 8002362:	2301      	movs	r3, #1
 8002364:	827b      	strh	r3, [r7, #18]
 8002366:	e088      	b.n	800247a <NFCForumProcess+0x60e>

    }
    else
    {
        if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_EXTERNAL_RFOFF)
 8002368:	88bb      	ldrh	r3, [r7, #4]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b83      	cmp	r3, #131	@ 0x83
 800236e:	d152      	bne.n	8002416 <NFCForumProcess+0x5aa>
            /*
             * Enters here if in the target/card mode and external RF is not available
             * Wait for LISTEN timeout till an external RF is detected.
             * Application may choose to go into standby at this point.
             */
            status = phhalHw_EventConsume(pHal);
 8002370:	4b26      	ldr	r3, [pc, #152]	@ (800240c <NFCForumProcess+0x5a0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f00e fe91 	bl	801109c <phhalHw_Pn5180_EventConsume>
 800237a:	4603      	mov	r3, r0
 800237c:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 800237e:	8afb      	ldrh	r3, [r7, #22]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00c      	beq.n	800239e <NFCForumProcess+0x532>
 8002384:	8afb      	ldrh	r3, [r7, #22]
 8002386:	461a      	mov	r2, r3
 8002388:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800238c:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <NFCForumProcess+0x588>)
 800238e:	f01c fc6b 	bl	801ec68 <iprintf>
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <NFCForumProcess+0x58c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f01c fb8f 	bl	801eabc <fflush>

            status = phhalHw_SetConfig(pHal, PHHAL_HW_CONFIG_RFON_INTERRUPT, PH_ON);
 800239e:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <NFCForumProcess+0x5a0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	2157      	movs	r1, #87	@ 0x57
 80023a6:	4618      	mov	r0, r3
 80023a8:	f00c f896 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	82fb      	strh	r3, [r7, #22]
            CHECK_STATUS(status);
 80023b0:	8afb      	ldrh	r3, [r7, #22]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <NFCForumProcess+0x564>
 80023b6:	8afb      	ldrh	r3, [r7, #22]
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 80023be:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <NFCForumProcess+0x588>)
 80023c0:	f01c fc52 	bl	801ec68 <iprintf>
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <NFCForumProcess+0x58c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f01c fb76 	bl	801eabc <fflush>

            status = phhalHw_EventWait(pHal, LISTEN_PHASE_TIME_MS);
 80023d0:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <NFCForumProcess+0x5a0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80023d8:	4618      	mov	r0, r3
 80023da:	f00e fe4b 	bl	8011074 <phhalHw_Pn5180_EventWait>
 80023de:	4603      	mov	r3, r0
 80023e0:	82fb      	strh	r3, [r7, #22]
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 80023e2:	8afb      	ldrh	r3, [r7, #22]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d112      	bne.n	8002410 <NFCForumProcess+0x5a4>
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	827b      	strh	r3, [r7, #18]
 80023ee:	e044      	b.n	800247a <NFCForumProcess+0x60e>
 80023f0:	20000524 	.word	0x20000524
 80023f4:	08020bf0 	.word	0x08020bf0
 80023f8:	20000070 	.word	0x20000070
 80023fc:	08020e44 	.word	0x08020e44
 8002400:	08020e7c 	.word	0x08020e7c
 8002404:	08020eac 	.word	0x08020eac
 8002408:	08020ecc 	.word	0x08020ecc
 800240c:	20000570 	.word	0x20000570
            }
            else
            {
                wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_LISTEN;
 8002410:	2301      	movs	r3, #1
 8002412:	827b      	strh	r3, [r7, #18]
 8002414:	e031      	b.n	800247a <NFCForumProcess+0x60e>
            }
        }
        else
        {
            if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_ACTIVATED_BY_PEER)
 8002416:	88bb      	ldrh	r3, [r7, #4]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b8f      	cmp	r3, #143	@ 0x8f
 800241c:	d109      	bne.n	8002432 <NFCForumProcess+0x5c6>
            {
                DEBUG_PRINTF (" \n Device activated in listen mode... \n");
 800241e:	4819      	ldr	r0, [pc, #100]	@ (8002484 <NFCForumProcess+0x618>)
 8002420:	f01c fc92 	bl	801ed48 <puts>
 8002424:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <NFCForumProcess+0x61c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4618      	mov	r0, r3
 800242c:	f01c fb46 	bl	801eabc <fflush>
 8002430:	e021      	b.n	8002476 <NFCForumProcess+0x60a>
            }
            else if ((DiscLoopStatus & PH_ERR_MASK) == PH_ERR_INVALID_PARAMETER)
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b21      	cmp	r3, #33	@ 0x21
 8002438:	d01d      	beq.n	8002476 <NFCForumProcess+0x60a>
                /* In case of Front end used is RC663, then listen mode is not supported.
                 * Switch from listen mode to poll mode. */
            }
            else
            {
                if((DiscLoopStatus & PH_ERR_MASK) == PHAC_DISCLOOP_FAILURE)
 800243a:	88bb      	ldrh	r3, [r7, #4]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b80      	cmp	r3, #128	@ 0x80
 8002440:	d119      	bne.n	8002476 <NFCForumProcess+0x60a>
                {
                    status = phacDiscLoop_GetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO, &wValue);
 8002442:	4b12      	ldr	r3, [pc, #72]	@ (800248c <NFCForumProcess+0x620>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f107 020c 	add.w	r2, r7, #12
 800244a:	2185      	movs	r1, #133	@ 0x85
 800244c:	4618      	mov	r0, r3
 800244e:	f006 f9e7 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	82fb      	strh	r3, [r7, #22]
                    CHECK_STATUS(status);
 8002456:	8afb      	ldrh	r3, [r7, #22]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <NFCForumProcess+0x60a>
 800245c:	8afb      	ldrh	r3, [r7, #22]
 800245e:	461a      	mov	r2, r3
 8002460:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8002464:	480a      	ldr	r0, [pc, #40]	@ (8002490 <NFCForumProcess+0x624>)
 8002466:	f01c fbff 	bl	801ec68 <iprintf>
 800246a:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <NFCForumProcess+0x61c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f01c fb23 	bl	801eabc <fflush>
                    DEBUG_ERROR_PRINT(PrintErrorInfo(status));
                }
            }

            /* On successful activated by Peer, switch to LISTEN mode */
            wReturnEntryPoint = PHAC_DISCLOOP_ENTRY_POINT_POLL;
 8002476:	2300      	movs	r3, #0
 8002478:	827b      	strh	r3, [r7, #18]
        }
    }
    return wReturnEntryPoint;
 800247a:	8a7b      	ldrh	r3, [r7, #18]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	08020eec 	.word	0x08020eec
 8002488:	20000070 	.word	0x20000070
 800248c:	20000524 	.word	0x20000524
 8002490:	08020bf0 	.word	0x08020bf0

08002494 <LoadProfile>:
 * Application can read these values from EEPROM area and load/configure Discovery loop via SetConfig
* \param   bProfile      Reader Library Profile
* \note    Values used below are default and is for demonstration purpose.
*/
static phStatus_t LoadProfile(phacDiscLoop_Profile_t bProfile)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
    phStatus_t status = PH_ERR_SUCCESS;
 800249e:	2300      	movs	r3, #0
 80024a0:	82fb      	strh	r3, [r7, #22]
    uint16_t   wPasPollConfig = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	82bb      	strh	r3, [r7, #20]
    uint16_t   wActPollConfig = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	827b      	strh	r3, [r7, #18]
    uint16_t   wPasLisConfig = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	823b      	strh	r3, [r7, #16]
    uint16_t   wActLisConfig = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80024b2:	8abb      	ldrh	r3, [r7, #20]
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 80024ba:	8abb      	ldrh	r3, [r7, #20]
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    wPasPollConfig |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 80024c2:	8abb      	ldrh	r3, [r7, #20]
 80024c4:	f043 030c 	orr.w	r3, r3, #12
 80024c8:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 80024ca:	8abb      	ldrh	r3, [r7, #20]
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	82bb      	strh	r3, [r7, #20]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    wPasPollConfig |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 80024d2:	8abb      	ldrh	r3, [r7, #20]
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	82bb      	strh	r3, [r7, #20]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_106;
 80024da:	8a7b      	ldrh	r3, [r7, #18]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212;
 80024e2:	8a7b      	ldrh	r3, [r7, #18]
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	827b      	strh	r3, [r7, #18]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    wActPollConfig |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424;
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	827b      	strh	r3, [r7, #18]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 80024f2:	8a3b      	ldrh	r3, [r7, #16]
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 80024fa:	8a3b      	ldrh	r3, [r7, #16]
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	823b      	strh	r3, [r7, #16]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    wPasLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8002502:	8a3b      	ldrh	r3, [r7, #16]
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	823b      	strh	r3, [r7, #16]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	81fb      	strh	r3, [r7, #14]
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    wActLisConfig |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	81fb      	strh	r3, [r7, #14]
#endif

    if(bProfile == PHAC_DISCLOOP_PROFILE_NFC)
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	2b01      	cmp	r3, #1
 8002526:	f040 8209 	bne.w	800293c <LoadProfile+0x4a8>
    {
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 800252a:	4baf      	ldr	r3, [pc, #700]	@ (80027e8 <LoadProfile+0x354>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	2186      	movs	r1, #134	@ 0x86
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fcf6 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <LoadProfile+0xc8>
 8002542:	8afb      	ldrh	r3, [r7, #22]
 8002544:	461a      	mov	r2, r3
 8002546:	f240 2165 	movw	r1, #613	@ 0x265
 800254a:	48a8      	ldr	r0, [pc, #672]	@ (80027ec <LoadProfile+0x358>)
 800254c:	f01c fb8c 	bl	801ec68 <iprintf>
 8002550:	4ba7      	ldr	r3, [pc, #668]	@ (80027f0 <LoadProfile+0x35c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f01c fab0 	bl	801eabc <fflush>

        /* Set Passive poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, wPasPollConfig);
 800255c:	4ba2      	ldr	r3, [pc, #648]	@ (80027e8 <LoadProfile+0x354>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	8aba      	ldrh	r2, [r7, #20]
 8002562:	218c      	movs	r1, #140	@ 0x8c
 8002564:	4618      	mov	r0, r3
 8002566:	f005 fcdd 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800256e:	8afb      	ldrh	r3, [r7, #22]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <LoadProfile+0xfa>
 8002574:	8afb      	ldrh	r3, [r7, #22]
 8002576:	461a      	mov	r2, r3
 8002578:	f240 2169 	movw	r1, #617	@ 0x269
 800257c:	489b      	ldr	r0, [pc, #620]	@ (80027ec <LoadProfile+0x358>)
 800257e:	f01c fb73 	bl	801ec68 <iprintf>
 8002582:	4b9b      	ldr	r3, [pc, #620]	@ (80027f0 <LoadProfile+0x35c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f01c fa97 	bl	801eabc <fflush>

        /* Set Active poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, wActPollConfig);
 800258e:	4b96      	ldr	r3, [pc, #600]	@ (80027e8 <LoadProfile+0x354>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	8a7a      	ldrh	r2, [r7, #18]
 8002594:	218a      	movs	r1, #138	@ 0x8a
 8002596:	4618      	mov	r0, r3
 8002598:	f005 fcc4 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80025a0:	8afb      	ldrh	r3, [r7, #22]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <LoadProfile+0x12c>
 80025a6:	8afb      	ldrh	r3, [r7, #22]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f240 216d 	movw	r1, #621	@ 0x26d
 80025ae:	488f      	ldr	r0, [pc, #572]	@ (80027ec <LoadProfile+0x358>)
 80025b0:	f01c fb5a 	bl	801ec68 <iprintf>
 80025b4:	4b8e      	ldr	r3, [pc, #568]	@ (80027f0 <LoadProfile+0x35c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f01c fa7e 	bl	801eabc <fflush>

        /* Set Passive listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, wPasLisConfig);
 80025c0:	4b89      	ldr	r3, [pc, #548]	@ (80027e8 <LoadProfile+0x354>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	8a3a      	ldrh	r2, [r7, #16]
 80025c6:	218b      	movs	r1, #139	@ 0x8b
 80025c8:	4618      	mov	r0, r3
 80025ca:	f005 fcab 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80025ce:	4603      	mov	r3, r0
 80025d0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80025d2:	8afb      	ldrh	r3, [r7, #22]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00c      	beq.n	80025f2 <LoadProfile+0x15e>
 80025d8:	8afb      	ldrh	r3, [r7, #22]
 80025da:	461a      	mov	r2, r3
 80025dc:	f240 2171 	movw	r1, #625	@ 0x271
 80025e0:	4882      	ldr	r0, [pc, #520]	@ (80027ec <LoadProfile+0x358>)
 80025e2:	f01c fb41 	bl	801ec68 <iprintf>
 80025e6:	4b82      	ldr	r3, [pc, #520]	@ (80027f0 <LoadProfile+0x35c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f01c fa65 	bl	801eabc <fflush>

        /* Set Active listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, wActLisConfig);
 80025f2:	4b7d      	ldr	r3, [pc, #500]	@ (80027e8 <LoadProfile+0x354>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	89fa      	ldrh	r2, [r7, #14]
 80025f8:	2189      	movs	r1, #137	@ 0x89
 80025fa:	4618      	mov	r0, r3
 80025fc:	f005 fc92 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002604:	8afb      	ldrh	r3, [r7, #22]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <LoadProfile+0x190>
 800260a:	8afb      	ldrh	r3, [r7, #22]
 800260c:	461a      	mov	r2, r3
 800260e:	f240 2175 	movw	r1, #629	@ 0x275
 8002612:	4876      	ldr	r0, [pc, #472]	@ (80027ec <LoadProfile+0x358>)
 8002614:	f01c fb28 	bl	801ec68 <iprintf>
 8002618:	4b75      	ldr	r3, [pc, #468]	@ (80027f0 <LoadProfile+0x35c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f01c fa4c 	bl	801eabc <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 8002624:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <LoadProfile+0x354>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	2183      	movs	r1, #131	@ 0x83
 800262c:	4618      	mov	r0, r3
 800262e:	f005 fc79 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <LoadProfile+0x1c2>
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	461a      	mov	r2, r3
 8002640:	f240 2179 	movw	r1, #633	@ 0x279
 8002644:	4869      	ldr	r0, [pc, #420]	@ (80027ec <LoadProfile+0x358>)
 8002646:	f01c fb0f 	bl	801ec68 <iprintf>
 800264a:	4b69      	ldr	r3, [pc, #420]	@ (80027f0 <LoadProfile+0x35c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f01c fa33 	bl	801eabc <fflush>

        /* whether anti-collision is supported or not. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8002656:	4b64      	ldr	r3, [pc, #400]	@ (80027e8 <LoadProfile+0x354>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	2188      	movs	r1, #136	@ 0x88
 800265e:	4618      	mov	r0, r3
 8002660:	f005 fc60 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002668:	8afb      	ldrh	r3, [r7, #22]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <LoadProfile+0x1f4>
 800266e:	8afb      	ldrh	r3, [r7, #22]
 8002670:	461a      	mov	r2, r3
 8002672:	f240 217d 	movw	r1, #637	@ 0x27d
 8002676:	485d      	ldr	r0, [pc, #372]	@ (80027ec <LoadProfile+0x358>)
 8002678:	f01c faf6 	bl	801ec68 <iprintf>
 800267c:	4b5c      	ldr	r3, [pc, #368]	@ (80027f0 <LoadProfile+0x35c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f01c fa1a 	bl	801eabc <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8002688:	4b57      	ldr	r3, [pc, #348]	@ (80027e8 <LoadProfile+0x354>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2201      	movs	r2, #1
 800268e:	2184      	movs	r1, #132	@ 0x84
 8002690:	4618      	mov	r0, r3
 8002692:	f005 fc47 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800269a:	8afb      	ldrh	r3, [r7, #22]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00c      	beq.n	80026ba <LoadProfile+0x226>
 80026a0:	8afb      	ldrh	r3, [r7, #22]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f240 2181 	movw	r1, #641	@ 0x281
 80026a8:	4850      	ldr	r0, [pc, #320]	@ (80027ec <LoadProfile+0x358>)
 80026aa:	f01c fadd 	bl	801ec68 <iprintf>
 80026ae:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <LoadProfile+0x35c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f01c fa01 	bl	801eabc <fflush>

#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 80026ba:	4b4b      	ldr	r3, [pc, #300]	@ (80027e8 <LoadProfile+0x354>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	2110      	movs	r1, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 fc2e 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80026cc:	8afb      	ldrh	r3, [r7, #22]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <LoadProfile+0x258>
 80026d2:	8afb      	ldrh	r3, [r7, #22]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f240 2186 	movw	r1, #646	@ 0x286
 80026da:	4844      	ldr	r0, [pc, #272]	@ (80027ec <LoadProfile+0x358>)
 80026dc:	f01c fac4 	bl	801ec68 <iprintf>
 80026e0:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <LoadProfile+0x35c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f01c f9e8 	bl	801eabc <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 80026ec:	4b3e      	ldr	r3, [pc, #248]	@ (80027e8 <LoadProfile+0x354>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f005 fc14 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002700:	8afb      	ldrh	r3, [r7, #22]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <LoadProfile+0x28c>
 8002706:	8afb      	ldrh	r3, [r7, #22]
 8002708:	461a      	mov	r2, r3
 800270a:	f240 218a 	movw	r1, #650	@ 0x28a
 800270e:	4837      	ldr	r0, [pc, #220]	@ (80027ec <LoadProfile+0x358>)
 8002710:	f01c faaa 	bl	801ec68 <iprintf>
 8002714:	4b36      	ldr	r3, [pc, #216]	@ (80027f0 <LoadProfile+0x35c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f01c f9ce 	bl	801eabc <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 8002720:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <LoadProfile+0x354>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	2111      	movs	r1, #17
 8002728:	4618      	mov	r0, r3
 800272a:	f005 fbfb 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002732:	8afb      	ldrh	r3, [r7, #22]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <LoadProfile+0x2be>
 8002738:	8afb      	ldrh	r3, [r7, #22]
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8002740:	482a      	ldr	r0, [pc, #168]	@ (80027ec <LoadProfile+0x358>)
 8002742:	f01c fa91 	bl	801ec68 <iprintf>
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <LoadProfile+0x35c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f01c f9b5 	bl	801eabc <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8002752:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <LoadProfile+0x354>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f005 fbe1 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002766:	8afb      	ldrh	r3, [r7, #22]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <LoadProfile+0x2f2>
 800276c:	8afb      	ldrh	r3, [r7, #22]
 800276e:	461a      	mov	r2, r3
 8002770:	f240 2193 	movw	r1, #659	@ 0x293
 8002774:	481d      	ldr	r0, [pc, #116]	@ (80027ec <LoadProfile+0x358>)
 8002776:	f01c fa77 	bl	801ec68 <iprintf>
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <LoadProfile+0x35c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f01c f99b 	bl	801eabc <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
        /* Device limit for Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT, 1);
 8002786:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <LoadProfile+0x354>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	2112      	movs	r1, #18
 800278e:	4618      	mov	r0, r3
 8002790:	f005 fbc8 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002798:	8afb      	ldrh	r3, [r7, #22]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00c      	beq.n	80027b8 <LoadProfile+0x324>
 800279e:	8afb      	ldrh	r3, [r7, #22]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f240 2199 	movw	r1, #665	@ 0x299
 80027a6:	4811      	ldr	r0, [pc, #68]	@ (80027ec <LoadProfile+0x358>)
 80027a8:	f01c fa5e 	bl	801ec68 <iprintf>
 80027ac:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <LoadProfile+0x35c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f01c f982 	bl	801eabc <fflush>

        /* Guard time for Type F. This guard time is applied when Type F poll before Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US, 20400);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <LoadProfile+0x354>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 80027c0:	2102      	movs	r1, #2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f005 fbae 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d013      	beq.n	80027fa <LoadProfile+0x366>
 80027d2:	8afb      	ldrh	r3, [r7, #22]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f240 219d 	movw	r1, #669	@ 0x29d
 80027da:	4804      	ldr	r0, [pc, #16]	@ (80027ec <LoadProfile+0x358>)
 80027dc:	f01c fa44 	bl	801ec68 <iprintf>
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <LoadProfile+0x35c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	e005      	b.n	80027f4 <LoadProfile+0x360>
 80027e8:	20000524 	.word	0x20000524
 80027ec:	08020bf0 	.word	0x08020bf0
 80027f0:	20000070 	.word	0x20000070
 80027f4:	4618      	mov	r0, r3
 80027f6:	f01c f961 	bl	801eabc <fflush>

        /* Guard time for Type F. This guard time is applied when Type B poll before Type F */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US, 15300);
 80027fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002930 <LoadProfile+0x49c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8002802:	2103      	movs	r1, #3
 8002804:	4618      	mov	r0, r3
 8002806:	f005 fb8d 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <LoadProfile+0x39a>
 8002814:	8afb      	ldrh	r3, [r7, #22]
 8002816:	461a      	mov	r2, r3
 8002818:	f240 21a1 	movw	r1, #673	@ 0x2a1
 800281c:	4845      	ldr	r0, [pc, #276]	@ (8002934 <LoadProfile+0x4a0>)
 800281e:	f01c fa23 	bl	801ec68 <iprintf>
 8002822:	4b45      	ldr	r3, [pc, #276]	@ (8002938 <LoadProfile+0x4a4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f01c f947 	bl	801eabc <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
        /* Device limit for Type V (ISO 15693) */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT, 1);
 800282e:	4b40      	ldr	r3, [pc, #256]	@ (8002930 <LoadProfile+0x49c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	2113      	movs	r1, #19
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fb74 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002840:	8afb      	ldrh	r3, [r7, #22]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <LoadProfile+0x3cc>
 8002846:	8afb      	ldrh	r3, [r7, #22]
 8002848:	461a      	mov	r2, r3
 800284a:	f240 21a7 	movw	r1, #679	@ 0x2a7
 800284e:	4839      	ldr	r0, [pc, #228]	@ (8002934 <LoadProfile+0x4a0>)
 8002850:	f01c fa0a 	bl	801ec68 <iprintf>
 8002854:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <LoadProfile+0x4a4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f01c f92e 	bl	801eabc <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTV_VALUE_US, 5200);
 8002860:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <LoadProfile+0x49c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f241 4250 	movw	r2, #5200	@ 0x1450
 8002868:	2104      	movs	r1, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f005 fb5a 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002874:	8afb      	ldrh	r3, [r7, #22]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00c      	beq.n	8002894 <LoadProfile+0x400>
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	461a      	mov	r2, r3
 800287e:	f240 21aa 	movw	r1, #682	@ 0x2aa
 8002882:	482c      	ldr	r0, [pc, #176]	@ (8002934 <LoadProfile+0x4a0>)
 8002884:	f01c f9f0 	bl	801ec68 <iprintf>
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <LoadProfile+0x4a4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4618      	mov	r0, r3
 8002890:	f01c f914 	bl	801eabc <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
        /* Device limit for 18000P3M3 */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT, 1);
 8002894:	4b26      	ldr	r3, [pc, #152]	@ (8002930 <LoadProfile+0x49c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	2114      	movs	r1, #20
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fb41 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80028a6:	8afb      	ldrh	r3, [r7, #22]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <LoadProfile+0x432>
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 80028b4:	481f      	ldr	r0, [pc, #124]	@ (8002934 <LoadProfile+0x4a0>)
 80028b6:	f01c f9d7 	bl	801ec68 <iprintf>
 80028ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <LoadProfile+0x4a4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f01c f8fb 	bl	801eabc <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, 10000);
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <LoadProfile+0x49c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80028ce:	2105      	movs	r1, #5
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 fb27 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80028da:	8afb      	ldrh	r3, [r7, #22]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <LoadProfile+0x466>
 80028e0:	8afb      	ldrh	r3, [r7, #22]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f240 21b3 	movw	r1, #691	@ 0x2b3
 80028e8:	4812      	ldr	r0, [pc, #72]	@ (8002934 <LoadProfile+0x4a0>)
 80028ea:	f01c f9bd 	bl	801ec68 <iprintf>
 80028ee:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <LoadProfile+0x4a4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f01c f8e1 	bl	801eabc <fflush>
#endif

        /* Discovery loop Operation mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_NFC);
 80028fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <LoadProfile+0x49c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2202      	movs	r2, #2
 8002900:	2182      	movs	r1, #130	@ 0x82
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fb0e 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 800290c:	8afb      	ldrh	r3, [r7, #22]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8279 	beq.w	8002e06 <LoadProfile+0x972>
 8002914:	8afb      	ldrh	r3, [r7, #22]
 8002916:	461a      	mov	r2, r3
 8002918:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800291c:	4805      	ldr	r0, [pc, #20]	@ (8002934 <LoadProfile+0x4a0>)
 800291e:	f01c f9a3 	bl	801ec68 <iprintf>
 8002922:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <LoadProfile+0x4a4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f01c f8c7 	bl	801eabc <fflush>
 800292e:	e26a      	b.n	8002e06 <LoadProfile+0x972>
 8002930:	20000524 	.word	0x20000524
 8002934:	08020bf0 	.word	0x08020bf0
 8002938:	20000070 	.word	0x20000070
    }
    else if(bProfile == PHAC_DISCLOOP_PROFILE_EMVCO)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b02      	cmp	r3, #2
 8002940:	f040 8261 	bne.w	8002e06 <LoadProfile+0x972>
    {
        /* EMVCO */
        /* passive Bailout bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_BAIL_OUT, 0x00);
 8002944:	4baf      	ldr	r3, [pc, #700]	@ (8002c04 <LoadProfile+0x770>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	2186      	movs	r1, #134	@ 0x86
 800294c:	4618      	mov	r0, r3
 800294e:	f005 fae9 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002956:	8afb      	ldrh	r3, [r7, #22]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <LoadProfile+0x4e2>
 800295c:	8afb      	ldrh	r3, [r7, #22]
 800295e:	461a      	mov	r2, r3
 8002960:	f240 21bf 	movw	r1, #703	@ 0x2bf
 8002964:	48a8      	ldr	r0, [pc, #672]	@ (8002c08 <LoadProfile+0x774>)
 8002966:	f01c f97f 	bl	801ec68 <iprintf>
 800296a:	4ba8      	ldr	r3, [pc, #672]	@ (8002c0c <LoadProfile+0x778>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4618      	mov	r0, r3
 8002972:	f01c f8a3 	bl	801eabc <fflush>

        /* passive poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG, (PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B));
 8002976:	4ba3      	ldr	r3, [pc, #652]	@ (8002c04 <LoadProfile+0x770>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2203      	movs	r2, #3
 800297c:	218c      	movs	r1, #140	@ 0x8c
 800297e:	4618      	mov	r0, r3
 8002980:	f005 fad0 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002988:	8afb      	ldrh	r3, [r7, #22]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <LoadProfile+0x514>
 800298e:	8afb      	ldrh	r3, [r7, #22]
 8002990:	461a      	mov	r2, r3
 8002992:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8002996:	489c      	ldr	r0, [pc, #624]	@ (8002c08 <LoadProfile+0x774>)
 8002998:	f01c f966 	bl	801ec68 <iprintf>
 800299c:	4b9b      	ldr	r3, [pc, #620]	@ (8002c0c <LoadProfile+0x778>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f01c f88a 	bl	801eabc <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG, 0x00);
 80029a8:	4b96      	ldr	r3, [pc, #600]	@ (8002c04 <LoadProfile+0x770>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	218b      	movs	r1, #139	@ 0x8b
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 fab7 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80029ba:	8afb      	ldrh	r3, [r7, #22]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00c      	beq.n	80029da <LoadProfile+0x546>
 80029c0:	8afb      	ldrh	r3, [r7, #22]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f240 21c7 	movw	r1, #711	@ 0x2c7
 80029c8:	488f      	ldr	r0, [pc, #572]	@ (8002c08 <LoadProfile+0x774>)
 80029ca:	f01c f94d 	bl	801ec68 <iprintf>
 80029ce:	4b8f      	ldr	r3, [pc, #572]	@ (8002c0c <LoadProfile+0x778>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f01c f871 	bl	801eabc <fflush>

        /* Active Listen bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG, 0x00);
 80029da:	4b8a      	ldr	r3, [pc, #552]	@ (8002c04 <LoadProfile+0x770>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	2189      	movs	r1, #137	@ 0x89
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 fa9e 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 80029ec:	8afb      	ldrh	r3, [r7, #22]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <LoadProfile+0x578>
 80029f2:	8afb      	ldrh	r3, [r7, #22]
 80029f4:	461a      	mov	r2, r3
 80029f6:	f240 21cb 	movw	r1, #715	@ 0x2cb
 80029fa:	4883      	ldr	r0, [pc, #524]	@ (8002c08 <LoadProfile+0x774>)
 80029fc:	f01c f934 	bl	801ec68 <iprintf>
 8002a00:	4b82      	ldr	r3, [pc, #520]	@ (8002c0c <LoadProfile+0x778>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f01c f858 	bl	801eabc <fflush>

        /* Active Poll bitmap config. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG, 0x00);
 8002a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002c04 <LoadProfile+0x770>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	218a      	movs	r1, #138	@ 0x8a
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 fa85 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a1e:	8afb      	ldrh	r3, [r7, #22]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <LoadProfile+0x5aa>
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f240 21cf 	movw	r1, #719	@ 0x2cf
 8002a2c:	4876      	ldr	r0, [pc, #472]	@ (8002c08 <LoadProfile+0x774>)
 8002a2e:	f01c f91b 	bl	801ec68 <iprintf>
 8002a32:	4b76      	ldr	r3, [pc, #472]	@ (8002c0c <LoadProfile+0x778>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f01c f83f 	bl	801eabc <fflush>

        /* Bool to enable LPCD feature. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ENABLE_LPCD, PH_OFF);
 8002a3e:	4b71      	ldr	r3, [pc, #452]	@ (8002c04 <LoadProfile+0x770>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	2180      	movs	r1, #128	@ 0x80
 8002a46:	4618      	mov	r0, r3
 8002a48:	f005 fa6c 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a50:	8afb      	ldrh	r3, [r7, #22]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <LoadProfile+0x5dc>
 8002a56:	8afb      	ldrh	r3, [r7, #22]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8002a5e:	486a      	ldr	r0, [pc, #424]	@ (8002c08 <LoadProfile+0x774>)
 8002a60:	f01c f902 	bl	801ec68 <iprintf>
 8002a64:	4b69      	ldr	r3, [pc, #420]	@ (8002c0c <LoadProfile+0x778>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f01c f826 	bl	801eabc <fflush>

        /* reset collision Pending */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_COLLISION_PENDING, PH_OFF);
 8002a70:	4b64      	ldr	r3, [pc, #400]	@ (8002c04 <LoadProfile+0x770>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2183      	movs	r1, #131	@ 0x83
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fa53 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002a82:	8afb      	ldrh	r3, [r7, #22]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00c      	beq.n	8002aa2 <LoadProfile+0x60e>
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f240 21d7 	movw	r1, #727	@ 0x2d7
 8002a90:	485d      	ldr	r0, [pc, #372]	@ (8002c08 <LoadProfile+0x774>)
 8002a92:	f01c f8e9 	bl	801ec68 <iprintf>
 8002a96:	4b5d      	ldr	r3, [pc, #372]	@ (8002c0c <LoadProfile+0x778>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f01c f80d 	bl	801eabc <fflush>

        /* whether anti-collision is supported or not. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_ANTI_COLL, PH_ON);
 8002aa2:	4b58      	ldr	r3, [pc, #352]	@ (8002c04 <LoadProfile+0x770>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2188      	movs	r1, #136	@ 0x88
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 fa3a 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002ab4:	8afb      	ldrh	r3, [r7, #22]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <LoadProfile+0x640>
 8002aba:	8afb      	ldrh	r3, [r7, #22]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f240 21db 	movw	r1, #731	@ 0x2db
 8002ac2:	4851      	ldr	r0, [pc, #324]	@ (8002c08 <LoadProfile+0x774>)
 8002ac4:	f01c f8d0 	bl	801ec68 <iprintf>
 8002ac8:	4b50      	ldr	r3, [pc, #320]	@ (8002c0c <LoadProfile+0x778>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f01b fff4 	bl	801eabc <fflush>

        /* Poll Mode default state*/
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE, PHAC_DISCLOOP_POLL_STATE_DETECTION);
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8002c04 <LoadProfile+0x770>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2184      	movs	r1, #132	@ 0x84
 8002adc:	4618      	mov	r0, r3
 8002ade:	f005 fa21 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002ae6:	8afb      	ldrh	r3, [r7, #22]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <LoadProfile+0x672>
 8002aec:	8afb      	ldrh	r3, [r7, #22]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f240 21df 	movw	r1, #735	@ 0x2df
 8002af4:	4844      	ldr	r0, [pc, #272]	@ (8002c08 <LoadProfile+0x774>)
 8002af6:	f01c f8b7 	bl	801ec68 <iprintf>
 8002afa:	4b44      	ldr	r3, [pc, #272]	@ (8002c0c <LoadProfile+0x778>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f01b ffdb 	bl	801eabc <fflush>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
        /* Device limit for Type A */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT, 1);
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <LoadProfile+0x770>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 fa08 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b18:	8afb      	ldrh	r3, [r7, #22]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <LoadProfile+0x6a4>
 8002b1e:	8afb      	ldrh	r3, [r7, #22]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 8002b26:	4838      	ldr	r0, [pc, #224]	@ (8002c08 <LoadProfile+0x774>)
 8002b28:	f01c f89e 	bl	801ec68 <iprintf>
 8002b2c:	4b37      	ldr	r3, [pc, #220]	@ (8002c0c <LoadProfile+0x778>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f01b ffc2 	bl	801eabc <fflush>

        /* Passive polling Tx Guard times in micro seconds. */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTA_VALUE_US, 5100);
 8002b38:	4b32      	ldr	r3, [pc, #200]	@ (8002c04 <LoadProfile+0x770>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 f9ee 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <LoadProfile+0x6d8>
 8002b52:	8afb      	ldrh	r3, [r7, #22]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 8002b5a:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <LoadProfile+0x774>)
 8002b5c:	f01c f884 	bl	801ec68 <iprintf>
 8002b60:	4b2a      	ldr	r3, [pc, #168]	@ (8002c0c <LoadProfile+0x778>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f01b ffa8 	bl	801eabc <fflush>

        /* Configure FSDI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI, 0x08);
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <LoadProfile+0x770>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	2140      	movs	r1, #64	@ 0x40
 8002b74:	4618      	mov	r0, r3
 8002b76:	f005 f9d5 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <LoadProfile+0x70a>
 8002b84:	8afb      	ldrh	r3, [r7, #22]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f44f 713b 	mov.w	r1, #748	@ 0x2ec
 8002b8c:	481e      	ldr	r0, [pc, #120]	@ (8002c08 <LoadProfile+0x774>)
 8002b8e:	f01c f86b 	bl	801ec68 <iprintf>
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <LoadProfile+0x778>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f01b ff8f 	bl	801eabc <fflush>

        /* Configure CID for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID, 0x00);
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <LoadProfile+0x770>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2141      	movs	r1, #65	@ 0x41
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 f9bc 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002bb0:	8afb      	ldrh	r3, [r7, #22]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <LoadProfile+0x73c>
 8002bb6:	8afb      	ldrh	r3, [r7, #22]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8002bbe:	4812      	ldr	r0, [pc, #72]	@ (8002c08 <LoadProfile+0x774>)
 8002bc0:	f01c f852 	bl	801ec68 <iprintf>
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <LoadProfile+0x778>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f01b ff76 	bl	801eabc <fflush>

        /* Configure DRI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI, 0x00);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <LoadProfile+0x770>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2143      	movs	r1, #67	@ 0x43
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 f9a3 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002be2:	8afb      	ldrh	r3, [r7, #22]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <LoadProfile+0x77c>
 8002be8:	8afb      	ldrh	r3, [r7, #22]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8002bf0:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <LoadProfile+0x774>)
 8002bf2:	f01c f839 	bl	801ec68 <iprintf>
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <LoadProfile+0x778>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f01b ff5d 	bl	801eabc <fflush>
 8002c02:	e005      	b.n	8002c10 <LoadProfile+0x77c>
 8002c04:	20000524 	.word	0x20000524
 8002c08:	08020bf0 	.word	0x08020bf0
 8002c0c:	20000070 	.word	0x20000070

        /* Configure DSI for the 14443P4A tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI, 0x00);
 8002c10:	4b7f      	ldr	r3, [pc, #508]	@ (8002e10 <LoadProfile+0x97c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2144      	movs	r1, #68	@ 0x44
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f005 f983 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c22:	8afb      	ldrh	r3, [r7, #22]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <LoadProfile+0x7ae>
 8002c28:	8afb      	ldrh	r3, [r7, #22]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8002c30:	4878      	ldr	r0, [pc, #480]	@ (8002e14 <LoadProfile+0x980>)
 8002c32:	f01c f819 	bl	801ec68 <iprintf>
 8002c36:	4b78      	ldr	r3, [pc, #480]	@ (8002e18 <LoadProfile+0x984>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f01b ff3d 	bl	801eabc <fflush>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
        /* Device limit for Type B */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT, 1);
 8002c42:	4b73      	ldr	r3, [pc, #460]	@ (8002e10 <LoadProfile+0x97c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	2111      	movs	r1, #17
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f005 f96a 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c54:	8afb      	ldrh	r3, [r7, #22]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <LoadProfile+0x7e0>
 8002c5a:	8afb      	ldrh	r3, [r7, #22]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002c62:	486c      	ldr	r0, [pc, #432]	@ (8002e14 <LoadProfile+0x980>)
 8002c64:	f01c f800 	bl	801ec68 <iprintf>
 8002c68:	4b6b      	ldr	r3, [pc, #428]	@ (8002e18 <LoadProfile+0x984>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f01b ff24 	bl	801eabc <fflush>

        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_GTB_VALUE_US, 5100);
 8002c74:	4b66      	ldr	r3, [pc, #408]	@ (8002e10 <LoadProfile+0x97c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f005 f950 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002c84:	4603      	mov	r3, r0
 8002c86:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002c88:	8afb      	ldrh	r3, [r7, #22]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <LoadProfile+0x814>
 8002c8e:	8afb      	ldrh	r3, [r7, #22]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f240 3101 	movw	r1, #769	@ 0x301
 8002c96:	485f      	ldr	r0, [pc, #380]	@ (8002e14 <LoadProfile+0x980>)
 8002c98:	f01b ffe6 	bl	801ec68 <iprintf>
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e18 <LoadProfile+0x984>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f01b ff0a 	bl	801eabc <fflush>

        /* Configure AFI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ, 0x00);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <LoadProfile+0x97c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2130      	movs	r1, #48	@ 0x30
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f005 f937 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002cba:	8afb      	ldrh	r3, [r7, #22]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00c      	beq.n	8002cda <LoadProfile+0x846>
 8002cc0:	8afb      	ldrh	r3, [r7, #22]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f240 3105 	movw	r1, #773	@ 0x305
 8002cc8:	4852      	ldr	r0, [pc, #328]	@ (8002e14 <LoadProfile+0x980>)
 8002cca:	f01b ffcd 	bl	801ec68 <iprintf>
 8002cce:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <LoadProfile+0x984>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f01b fef1 	bl	801eabc <fflush>

        /* Configure FSDI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_FSDI, 0x08);
 8002cda:	4b4d      	ldr	r3, [pc, #308]	@ (8002e10 <LoadProfile+0x97c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	2132      	movs	r1, #50	@ 0x32
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f005 f91e 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002cec:	8afb      	ldrh	r3, [r7, #22]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00c      	beq.n	8002d0c <LoadProfile+0x878>
 8002cf2:	8afb      	ldrh	r3, [r7, #22]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f240 3109 	movw	r1, #777	@ 0x309
 8002cfa:	4846      	ldr	r0, [pc, #280]	@ (8002e14 <LoadProfile+0x980>)
 8002cfc:	f01b ffb4 	bl	801ec68 <iprintf>
 8002d00:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <LoadProfile+0x984>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f01b fed8 	bl	801eabc <fflush>

        /* Configure CID for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_CID, 0x00);
 8002d0c:	4b40      	ldr	r3, [pc, #256]	@ (8002e10 <LoadProfile+0x97c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	2133      	movs	r1, #51	@ 0x33
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 f905 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d1e:	8afb      	ldrh	r3, [r7, #22]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <LoadProfile+0x8aa>
 8002d24:	8afb      	ldrh	r3, [r7, #22]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f240 310d 	movw	r1, #781	@ 0x30d
 8002d2c:	4839      	ldr	r0, [pc, #228]	@ (8002e14 <LoadProfile+0x980>)
 8002d2e:	f01b ff9b 	bl	801ec68 <iprintf>
 8002d32:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <LoadProfile+0x984>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f01b febf 	bl	801eabc <fflush>

        /* Configure DRI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DRI, 0x00);
 8002d3e:	4b34      	ldr	r3, [pc, #208]	@ (8002e10 <LoadProfile+0x97c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2135      	movs	r1, #53	@ 0x35
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 f8ec 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d50:	8afb      	ldrh	r3, [r7, #22]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <LoadProfile+0x8dc>
 8002d56:	8afb      	ldrh	r3, [r7, #22]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f240 3111 	movw	r1, #785	@ 0x311
 8002d5e:	482d      	ldr	r0, [pc, #180]	@ (8002e14 <LoadProfile+0x980>)
 8002d60:	f01b ff82 	bl	801ec68 <iprintf>
 8002d64:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <LoadProfile+0x984>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f01b fea6 	bl	801eabc <fflush>

        /* Configure DSI for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_DSI, 0x00);
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <LoadProfile+0x97c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2136      	movs	r1, #54	@ 0x36
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 f8d3 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <LoadProfile+0x90e>
 8002d88:	8afb      	ldrh	r3, [r7, #22]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f240 3115 	movw	r1, #789	@ 0x315
 8002d90:	4820      	ldr	r0, [pc, #128]	@ (8002e14 <LoadProfile+0x980>)
 8002d92:	f01b ff69 	bl	801ec68 <iprintf>
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <LoadProfile+0x984>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f01b fe8d 	bl	801eabc <fflush>

        /* Configure Extended ATQB support for the type B tags */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB, 0x00);
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <LoadProfile+0x97c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2131      	movs	r1, #49	@ 0x31
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 f8ba 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002db4:	8afb      	ldrh	r3, [r7, #22]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <LoadProfile+0x940>
 8002dba:	8afb      	ldrh	r3, [r7, #22]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f240 3119 	movw	r1, #793	@ 0x319
 8002dc2:	4814      	ldr	r0, [pc, #80]	@ (8002e14 <LoadProfile+0x980>)
 8002dc4:	f01b ff50 	bl	801ec68 <iprintf>
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <LoadProfile+0x984>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f01b fe74 	bl	801eabc <fflush>
#endif
        /* Configure reader library mode */
        status = phacDiscLoop_SetConfig(pDiscLoop, PHAC_DISCLOOP_CONFIG_OPE_MODE, RD_LIB_MODE_EMVCO);
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <LoadProfile+0x97c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2182      	movs	r1, #130	@ 0x82
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f005 f8a1 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	82fb      	strh	r3, [r7, #22]
        CHECK_STATUS(status);
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00c      	beq.n	8002e06 <LoadProfile+0x972>
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f240 311d 	movw	r1, #797	@ 0x31d
 8002df4:	4807      	ldr	r0, [pc, #28]	@ (8002e14 <LoadProfile+0x980>)
 8002df6:	f01b ff37 	bl	801ec68 <iprintf>
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <LoadProfile+0x984>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f01b fe5b 	bl	801eabc <fflush>
    }
    else
    {
        /* Do Nothing */
    }
    return status;
 8002e06:	8afb      	ldrh	r3, [r7, #22]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000524 	.word	0x20000524
 8002e14:	08020bf0 	.word	0x08020bf0
 8002e18:	20000070 	.word	0x20000070

08002e1c <TestRFField>:
#endif /* ENABLE_DISC_CONFIG */


/* 测试射频场 */
void TestRFField(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
    phStatus_t status;
    uint32_t regValue;

    printf("\n=== RF FIELD TEST ===\n");
 8002e22:	4823      	ldr	r0, [pc, #140]	@ (8002eb0 <TestRFField+0x94>)
 8002e24:	f01b ff90 	bl	801ed48 <puts>

    // 2. 检查RF状态
    status = phhalHw_Pn5180_Instr_ReadRegister(pHal, RF_STATUS, &regValue);
 8002e28:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <TestRFField+0x98>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	463a      	mov	r2, r7
 8002e2e:	211d      	movs	r1, #29
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00e fbcd 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
    printf("RF_STATUS: 0x%08lX (status: 0x%04X)\n", regValue, status);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	481d      	ldr	r0, [pc, #116]	@ (8002eb8 <TestRFField+0x9c>)
 8002e42:	f01b ff11 	bl	801ec68 <iprintf>

    // 3. 强制开启RF场
    printf("Turning RF Field ON...\n");
 8002e46:	481d      	ldr	r0, [pc, #116]	@ (8002ebc <TestRFField+0xa0>)
 8002e48:	f01b ff7e 	bl	801ed48 <puts>
    status = phhalHw_FieldOn(pHal);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <TestRFField+0x98>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00b fa0b 	bl	800e26c <phhalHw_Pn5180_FieldOn>
 8002e56:	4603      	mov	r3, r0
 8002e58:	80fb      	strh	r3, [r7, #6]
    printf("FieldOn status: 0x%04X\n", status);
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4818      	ldr	r0, [pc, #96]	@ (8002ec0 <TestRFField+0xa4>)
 8002e60:	f01b ff02 	bl	801ec68 <iprintf>

    HAL_Delay(100);  // 等待RF场稳定
 8002e64:	2064      	movs	r0, #100	@ 0x64
 8002e66:	f016 f9d1 	bl	801920c <HAL_Delay>

    // 4. 再次检查RF状态
    status = phhalHw_Pn5180_Instr_ReadRegister(pHal, RF_STATUS, &regValue);
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <TestRFField+0x98>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	463a      	mov	r2, r7
 8002e70:	211d      	movs	r1, #29
 8002e72:	4618      	mov	r0, r3
 8002e74:	f00e fbac 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	80fb      	strh	r3, [r7, #6]
    printf("RF_STATUS after FieldOn: 0x%08lX\n", regValue);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4810      	ldr	r0, [pc, #64]	@ (8002ec4 <TestRFField+0xa8>)
 8002e82:	f01b fef1 	bl	801ec68 <iprintf>

    // 5. 检查IRQ状态
    status = phhalHw_Pn5180_Instr_ReadRegister(pHal, IRQ_STATUS, &regValue);
 8002e86:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <TestRFField+0x98>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	463a      	mov	r2, r7
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f00e fb9e 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8002e94:	4603      	mov	r3, r0
 8002e96:	80fb      	strh	r3, [r7, #6]
    printf("IRQ_STATUS: 0x%08lX\n", regValue);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480a      	ldr	r0, [pc, #40]	@ (8002ec8 <TestRFField+0xac>)
 8002e9e:	f01b fee3 	bl	801ec68 <iprintf>

    printf("=== RF FIELD TEST COMPLETE ===\n\n");
 8002ea2:	480a      	ldr	r0, [pc, #40]	@ (8002ecc <TestRFField+0xb0>)
 8002ea4:	f01b ff50 	bl	801ed48 <puts>
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	08020f14 	.word	0x08020f14
 8002eb4:	20000570 	.word	0x20000570
 8002eb8:	08020f2c 	.word	0x08020f2c
 8002ebc:	08020f54 	.word	0x08020f54
 8002ec0:	08020f6c 	.word	0x08020f6c
 8002ec4:	08020f84 	.word	0x08020f84
 8002ec8:	08020fa8 	.word	0x08020fa8
 8002ecc:	08020fc0 	.word	0x08020fc0

08002ed0 <phApp_PrintTech>:
/*******************************************************************************
**   Function Definitions
*******************************************************************************/
/* Print technology being resolved */
void phApp_PrintTech(uint8_t TechType)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
    switch(TechType)
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	d854      	bhi.n	8002f8c <phApp_PrintTech+0xbc>
 8002ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <phApp_PrintTech+0x18>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f29 	.word	0x08002f29
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f8d 	.word	0x08002f8d
 8002ef4:	08002f51 	.word	0x08002f51
 8002ef8:	08002f8d 	.word	0x08002f8d
 8002efc:	08002f8d 	.word	0x08002f8d
 8002f00:	08002f8d 	.word	0x08002f8d
 8002f04:	08002f65 	.word	0x08002f65
 8002f08:	08002f8d 	.word	0x08002f8d
 8002f0c:	08002f8d 	.word	0x08002f8d
 8002f10:	08002f8d 	.word	0x08002f8d
 8002f14:	08002f8d 	.word	0x08002f8d
 8002f18:	08002f8d 	.word	0x08002f8d
 8002f1c:	08002f8d 	.word	0x08002f8d
 8002f20:	08002f8d 	.word	0x08002f8d
 8002f24:	08002f79 	.word	0x08002f79
    {
    case PHAC_DISCLOOP_POS_BIT_MASK_A:
        DEBUG_PRINTF ("\tResolving Type A... \n");
 8002f28:	481b      	ldr	r0, [pc, #108]	@ (8002f98 <phApp_PrintTech+0xc8>)
 8002f2a:	f01b ff0d 	bl	801ed48 <puts>
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <phApp_PrintTech+0xcc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f01b fdc1 	bl	801eabc <fflush>
        break;
 8002f3a:	e028      	b.n	8002f8e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_B:
        DEBUG_PRINTF ("\tResolving Type B... \n");
 8002f3c:	4818      	ldr	r0, [pc, #96]	@ (8002fa0 <phApp_PrintTech+0xd0>)
 8002f3e:	f01b ff03 	bl	801ed48 <puts>
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <phApp_PrintTech+0xcc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f01b fdb7 	bl	801eabc <fflush>
        break;
 8002f4e:	e01e      	b.n	8002f8e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F212:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 212... \n");
 8002f50:	4814      	ldr	r0, [pc, #80]	@ (8002fa4 <phApp_PrintTech+0xd4>)
 8002f52:	f01b fef9 	bl	801ed48 <puts>
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <phApp_PrintTech+0xcc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f01b fdad 	bl	801eabc <fflush>
        break;
 8002f62:	e014      	b.n	8002f8e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_F424:
        DEBUG_PRINTF ("\tResolving Type F with baud rate 424... \n");
 8002f64:	4810      	ldr	r0, [pc, #64]	@ (8002fa8 <phApp_PrintTech+0xd8>)
 8002f66:	f01b feef 	bl	801ed48 <puts>
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <phApp_PrintTech+0xcc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f01b fda3 	bl	801eabc <fflush>
        break;
 8002f76:	e00a      	b.n	8002f8e <phApp_PrintTech+0xbe>

    case PHAC_DISCLOOP_POS_BIT_MASK_V:
        DEBUG_PRINTF ("\tResolving Type V... \n");
 8002f78:	480c      	ldr	r0, [pc, #48]	@ (8002fac <phApp_PrintTech+0xdc>)
 8002f7a:	f01b fee5 	bl	801ed48 <puts>
 8002f7e:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <phApp_PrintTech+0xcc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f01b fd99 	bl	801eabc <fflush>
        break;
 8002f8a:	e000      	b.n	8002f8e <phApp_PrintTech+0xbe>

    default:
        break;
 8002f8c:	bf00      	nop
    }
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08020fe0 	.word	0x08020fe0
 8002f9c:	20000070 	.word	0x20000070
 8002fa0:	08020ff8 	.word	0x08020ff8
 8002fa4:	08021010 	.word	0x08021010
 8002fa8:	0802103c 	.word	0x0802103c
 8002fac:	08021068 	.word	0x08021068

08002fb0 <phApp_Print_Buff>:
* This function will print buffer content
* \param   *pBuff   Buffer Reference
* \param   num      data size to be print
*/
void phApp_Print_Buff(uint8_t *pBuff, uint8_t num)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
    uint32_t    i;

    for(i = 0; i < num; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e010      	b.n	8002fe4 <phApp_Print_Buff+0x34>
    {
        DEBUG_PRINTF(" %02X",pBuff[i]);
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480a      	ldr	r0, [pc, #40]	@ (8002ff8 <phApp_Print_Buff+0x48>)
 8002fce:	f01b fe4b 	bl	801ec68 <iprintf>
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <phApp_Print_Buff+0x4c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f01b fd6f 	bl	801eabc <fflush>
    for(i = 0; i < num; i++)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3ea      	bcc.n	8002fc2 <phApp_Print_Buff+0x12>
    }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	08021080 	.word	0x08021080
 8002ffc:	20000070 	.word	0x20000070

08003000 <phApp_PrintTagInfo>:
* \param   pDataParams      The discovery loop data parameters
* \param   wNumberOfTags    Total number of tags detected
* \param   wTagsDetected    Technology Detected
*/
void phApp_PrintTagInfo(phacDiscLoop_Sw_DataParams_t *pDataParams, uint16_t wNumberOfTags, uint16_t wTagsDetected)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	803b      	strh	r3, [r7, #0]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint8_t bTagType;
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8003010:	883b      	ldrh	r3, [r7, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80da 	beq.w	80031d0 <phApp_PrintTagInfo+0x1d0>
    {
        if(pDataParams->sTypeATargetInfo.bT1TFlag)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003022:	2b00      	cmp	r3, #0
 8003024:	d032      	beq.n	800308c <phApp_PrintTagInfo+0x8c>
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 8003026:	4898      	ldr	r0, [pc, #608]	@ (8003288 <phApp_PrintTagInfo+0x288>)
 8003028:	f01b fe1e 	bl	801ec68 <iprintf>
 800302c:	4b97      	ldr	r3, [pc, #604]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f01b fd42 	bl	801eabc <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 8003038:	4895      	ldr	r0, [pc, #596]	@ (8003290 <phApp_PrintTagInfo+0x290>)
 800303a:	f01b fe15 	bl	801ec68 <iprintf>
 800303e:	4b93      	ldr	r3, [pc, #588]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f01b fd39 	bl	801eabc <fflush>
            phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7ff ffa9 	bl	8002fb0 <phApp_Print_Buff>
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
            DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aSak);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8003064:	4619      	mov	r1, r3
 8003066:	488b      	ldr	r0, [pc, #556]	@ (8003294 <phApp_PrintTagInfo+0x294>)
 8003068:	f01b fdfe 	bl	801ec68 <iprintf>
 800306c:	4b87      	ldr	r3, [pc, #540]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f01b fd22 	bl	801eabc <fflush>
            DEBUG_PRINTF ("\n\t\tType: Type 1 Tag\n");
 8003078:	4887      	ldr	r0, [pc, #540]	@ (8003298 <phApp_PrintTagInfo+0x298>)
 800307a:	f01b fe65 	bl	801ed48 <puts>
 800307e:	4b83      	ldr	r3, [pc, #524]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4618      	mov	r0, r3
 8003086:	f01b fd19 	bl	801eabc <fflush>
 800308a:	e0a1      	b.n	80031d0 <phApp_PrintTagInfo+0x1d0>
        }
        else
        {
            DEBUG_PRINTF("\tTechnology  : Type A");
 800308c:	487e      	ldr	r0, [pc, #504]	@ (8003288 <phApp_PrintTagInfo+0x288>)
 800308e:	f01b fdeb 	bl	801ec68 <iprintf>
 8003092:	4b7e      	ldr	r3, [pc, #504]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f01b fd0f 	bl	801eabc <fflush>
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	e08f      	b.n	80031c4 <phApp_PrintTagInfo+0x1c4>
            {
                DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4619      	mov	r1, r3
 80030aa:	487c      	ldr	r0, [pc, #496]	@ (800329c <phApp_PrintTagInfo+0x29c>)
 80030ac:	f01b fddc 	bl	801ec68 <iprintf>
 80030b0:	4b76      	ldr	r3, [pc, #472]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f01b fd00 	bl	801eabc <fflush>
                DEBUG_PRINTF ("\n\t\tUID :");
 80030bc:	4874      	ldr	r0, [pc, #464]	@ (8003290 <phApp_PrintTagInfo+0x290>)
 80030be:	f01b fdd3 	bl	801ec68 <iprintf>
 80030c2:	4b72      	ldr	r3, [pc, #456]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f01b fcf7 	bl	801eabc <fflush>
                phApp_Print_Buff( pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aUid,
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	3358      	adds	r3, #88	@ 0x58
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	f103 0008 	add.w	r0, r3, #8
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	336a      	adds	r3, #106	@ 0x6a
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7ff ff5d 	bl	8002fb0 <phApp_Print_Buff>
                            pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize);
                DEBUG_PRINTF ("\n\t\tSAK : 0x%02x",pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak);
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	440b      	add	r3, r1
 8003102:	336b      	adds	r3, #107	@ 0x6b
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	4619      	mov	r1, r3
 8003108:	4862      	ldr	r0, [pc, #392]	@ (8003294 <phApp_PrintTagInfo+0x294>)
 800310a:	f01b fdad 	bl	801ec68 <iprintf>
 800310e:	4b5f      	ldr	r3, [pc, #380]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f01b fcd1 	bl	801eabc <fflush>

                if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & (uint8_t) ~0xFB) == 0)
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	440b      	add	r3, r1
 8003126:	336b      	adds	r3, #107	@ 0x6b
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d145      	bne.n	80031be <phApp_PrintTagInfo+0x1be>
                {
                    /* Bit b3 is set to zero, [Digital] 4.8.2 */
                    /* Mask out all other bits except for b7 and b6 */
                    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].aSak & 0x60);
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	440b      	add	r3, r1
 800313e:	336b      	adds	r3, #107	@ 0x6b
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003146:	73bb      	strb	r3, [r7, #14]
                    bTagType = bTagType >> 5;
 8003148:	7bbb      	ldrb	r3, [r7, #14]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	73bb      	strb	r3, [r7, #14]

                    switch(bTagType)
 800314e:	7bbb      	ldrb	r3, [r7, #14]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d833      	bhi.n	80031bc <phApp_PrintTagInfo+0x1bc>
 8003154:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <phApp_PrintTagInfo+0x15c>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003181 	.word	0x08003181
 8003164:	08003195 	.word	0x08003195
 8003168:	080031a9 	.word	0x080031a9
                    {
                    case PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 2 Tag\n");
 800316c:	484c      	ldr	r0, [pc, #304]	@ (80032a0 <phApp_PrintTagInfo+0x2a0>)
 800316e:	f01b fdeb 	bl	801ed48 <puts>
 8003172:	4b46      	ldr	r3, [pc, #280]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f01b fc9f 	bl	801eabc <fflush>
                        break;
 800317e:	e01e      	b.n	80031be <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type 4A Tag\n");
 8003180:	4848      	ldr	r0, [pc, #288]	@ (80032a4 <phApp_PrintTagInfo+0x2a4>)
 8003182:	f01b fde1 	bl	801ed48 <puts>
 8003186:	4b41      	ldr	r3, [pc, #260]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f01b fc95 	bl	801eabc <fflush>
                        break;
 8003192:	e014      	b.n	80031be <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: P2P\n");
 8003194:	4844      	ldr	r0, [pc, #272]	@ (80032a8 <phApp_PrintTagInfo+0x2a8>)
 8003196:	f01b fdd7 	bl	801ed48 <puts>
 800319a:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f01b fc8b 	bl	801eabc <fflush>
                        break;
 80031a6:	e00a      	b.n	80031be <phApp_PrintTagInfo+0x1be>
                    case PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK:
                        DEBUG_PRINTF ("\n\t\tType: Type NFC_DEP and  4A Tag\n");
 80031a8:	4840      	ldr	r0, [pc, #256]	@ (80032ac <phApp_PrintTagInfo+0x2ac>)
 80031aa:	f01b fdcd 	bl	801ed48 <puts>
 80031ae:	4b37      	ldr	r3, [pc, #220]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f01b fc81 	bl	801eabc <fflush>
                        break;
 80031ba:	e000      	b.n	80031be <phApp_PrintTagInfo+0x1be>
                    default:
                        break;
 80031bc:	bf00      	nop
            for(bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	3301      	adds	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f63f af6a 	bhi.w	80030a4 <phApp_PrintTagInfo+0xa4>
        }
    }
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_B))
 80031d0:	883b      	ldrh	r3, [r7, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03e      	beq.n	8003258 <phApp_PrintTagInfo+0x258>
    {
        DEBUG_PRINTF("\tTechnology  : Type B");
 80031da:	4835      	ldr	r0, [pc, #212]	@ (80032b0 <phApp_PrintTagInfo+0x2b0>)
 80031dc:	f01b fd44 	bl	801ec68 <iprintf>
 80031e0:	4b2a      	ldr	r3, [pc, #168]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f01b fc68 	bl	801eabc <fflush>
        /* Loop through all the Type B tags detected and print the Pupi */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e024      	b.n	800323c <phApp_PrintTagInfo+0x23c>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4619      	mov	r1, r3
 80031f8:	4828      	ldr	r0, [pc, #160]	@ (800329c <phApp_PrintTagInfo+0x29c>)
 80031fa:	f01b fd35 	bl	801ec68 <iprintf>
 80031fe:	4b23      	ldr	r3, [pc, #140]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f01b fc59 	bl	801eabc <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 800320a:	4821      	ldr	r0, [pc, #132]	@ (8003290 <phApp_PrintTagInfo+0x290>)
 800320c:	f01b fd2c 	bl	801ec68 <iprintf>
 8003210:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f01b fc50 	bl	801eabc <fflush>
            /* PUPI Length is always 4 bytes */
            phApp_Print_Buff( pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].aPupi, 0x04);
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	33c8      	adds	r3, #200	@ 0xc8
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	3301      	adds	r3, #1
 800322e:	2104      	movs	r1, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff febd 	bl	8002fb0 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3301      	adds	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	b29b      	uxth	r3, r3
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	429a      	cmp	r2, r3
 8003244:	d8d5      	bhi.n	80031f2 <phApp_PrintTagInfo+0x1f2>
        }
        DEBUG_PRINTF("\n");
 8003246:	200a      	movs	r0, #10
 8003248:	f01b fd20 	bl	801ec8c <putchar>
 800324c:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f01b fc32 	bl	801eabc <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 8003258:	883b      	ldrh	r3, [r7, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <phApp_PrintTagInfo+0x26e>
        PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8003262:	883b      	ldrh	r3, [r7, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
    if( PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_F212) ||
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 809b 	beq.w	80033a4 <phApp_PrintTagInfo+0x3a4>
    {
        DEBUG_PRINTF("\tTechnology  : Type F");
 800326e:	4811      	ldr	r0, [pc, #68]	@ (80032b4 <phApp_PrintTagInfo+0x2b4>)
 8003270:	f01b fcfa 	bl	801ec68 <iprintf>
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <phApp_PrintTagInfo+0x28c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f01b fc1e 	bl	801eabc <fflush>

        /* Loop through all the type F tags and print the IDm */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e089      	b.n	800339a <phApp_PrintTagInfo+0x39a>
 8003286:	bf00      	nop
 8003288:	08021088 	.word	0x08021088
 800328c:	20000070 	.word	0x20000070
 8003290:	080210a0 	.word	0x080210a0
 8003294:	080210ac 	.word	0x080210ac
 8003298:	080210bc 	.word	0x080210bc
 800329c:	080210d0 	.word	0x080210d0
 80032a0:	080210dc 	.word	0x080210dc
 80032a4:	080210f0 	.word	0x080210f0
 80032a8:	08021108 	.word	0x08021108
 80032ac:	08021118 	.word	0x08021118
 80032b0:	0802113c 	.word	0x0802113c
 80032b4:	08021154 	.word	0x08021154
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	3301      	adds	r3, #1
 80032bc:	4619      	mov	r1, r3
 80032be:	4885      	ldr	r0, [pc, #532]	@ (80034d4 <phApp_PrintTagInfo+0x4d4>)
 80032c0:	f01b fcd2 	bl	801ec68 <iprintf>
 80032c4:	4b84      	ldr	r3, [pc, #528]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f01b fbf6 	bl	801eabc <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80032d0:	4882      	ldr	r0, [pc, #520]	@ (80034dc <phApp_PrintTagInfo+0x4dc>)
 80032d2:	f01b fcc9 	bl	801ec68 <iprintf>
 80032d6:	4b80      	ldr	r3, [pc, #512]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f01b fbed 	bl	801eabc <fflush>
            phApp_Print_Buff( pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm,
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	1ad2      	subs	r2, r2, r3
 80032ee:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	3304      	adds	r3, #4
 80032f8:	2108      	movs	r1, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe58 	bl	8002fb0 <phApp_Print_Buff>
                        PHAC_DISCLOOP_FELICA_IDM_LENGTH );
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	00da      	lsls	r2, r3, #3
 800330c:	1ad2      	subs	r2, r2, r3
 800330e:	188b      	adds	r3, r1, r2
 8003310:	3394      	adds	r3, #148	@ 0x94
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d115      	bne.n	8003344 <phApp_PrintTagInfo+0x344>
                (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFE))
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00da      	lsls	r2, r3, #3
 8003324:	1ad2      	subs	r2, r2, r3
 8003326:	188b      	adds	r3, r1, r2
 8003328:	3395      	adds	r3, #149	@ 0x95
 800332a:	781b      	ldrb	r3, [r3, #0]
            if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01) &&
 800332c:	2bfe      	cmp	r3, #254	@ 0xfe
 800332e:	d109      	bne.n	8003344 <phApp_PrintTagInfo+0x344>
            {
                /* This is Type F tag with P2P capabilities */
                DEBUG_PRINTF ("\n\t\tType: P2P");
 8003330:	486b      	ldr	r0, [pc, #428]	@ (80034e0 <phApp_PrintTagInfo+0x4e0>)
 8003332:	f01b fc99 	bl	801ec68 <iprintf>
 8003336:	4b68      	ldr	r3, [pc, #416]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f01b fbbd 	bl	801eabc <fflush>
 8003342:	e008      	b.n	8003356 <phApp_PrintTagInfo+0x356>
            }
            else
            {
                /* This is Type F T3T tag */
                DEBUG_PRINTF ("\n\t\tType: Type 3 Tag");
 8003344:	4867      	ldr	r0, [pc, #412]	@ (80034e4 <phApp_PrintTagInfo+0x4e4>)
 8003346:	f01b fc8f 	bl	801ec68 <iprintf>
 800334a:	4b63      	ldr	r3, [pc, #396]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f01b fbb3 	bl	801eabc <fflush>
            }

            if(pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].bBaud != PHAC_DISCLOOP_CON_BITR_212)
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	00da      	lsls	r2, r3, #3
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	188b      	adds	r3, r1, r2
 8003366:	33a6      	adds	r3, #166	@ 0xa6
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d009      	beq.n	8003382 <phApp_PrintTagInfo+0x382>
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 424\n");
 800336e:	485e      	ldr	r0, [pc, #376]	@ (80034e8 <phApp_PrintTagInfo+0x4e8>)
 8003370:	f01b fcea 	bl	801ed48 <puts>
 8003374:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f01b fb9e 	bl	801eabc <fflush>
 8003380:	e008      	b.n	8003394 <phApp_PrintTagInfo+0x394>
            }
            else
            {
                DEBUG_PRINTF ("\n\t\tBit Rate: 212\n");
 8003382:	485a      	ldr	r0, [pc, #360]	@ (80034ec <phApp_PrintTagInfo+0x4ec>)
 8003384:	f01b fce0 	bl	801ed48 <puts>
 8003388:	4b53      	ldr	r3, [pc, #332]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f01b fb94 	bl	801eabc <fflush>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	3301      	adds	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	b29b      	uxth	r3, r3
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d889      	bhi.n	80032b8 <phApp_PrintTagInfo+0x2b8>
        }
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_V))
 80033a4:	883b      	ldrh	r3, [r7, #0]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03d      	beq.n	800342a <phApp_PrintTagInfo+0x42a>
    {
        DEBUG_PRINTF("\tTechnology  : Type V / ISO 15693 / T5T");
 80033ae:	4850      	ldr	r0, [pc, #320]	@ (80034f0 <phApp_PrintTagInfo+0x4f0>)
 80033b0:	f01b fc5a 	bl	801ec68 <iprintf>
 80033b4:	4b48      	ldr	r3, [pc, #288]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f01b fb7e 	bl	801eabc <fflush>
        /* Loop through all the Type V tags detected and print the UIDs */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e023      	b.n	800340e <phApp_PrintTagInfo+0x40e>
        {
            DEBUG_PRINTF ("\n\t\tCard: %d",bIndex + 1);
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	3301      	adds	r3, #1
 80033ca:	4619      	mov	r1, r3
 80033cc:	4841      	ldr	r0, [pc, #260]	@ (80034d4 <phApp_PrintTagInfo+0x4d4>)
 80033ce:	f01b fc4b 	bl	801ec68 <iprintf>
 80033d2:	4b41      	ldr	r3, [pc, #260]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4618      	mov	r0, r3
 80033da:	f01b fb6f 	bl	801eabc <fflush>
            DEBUG_PRINTF ("\n\t\tUID :");
 80033de:	483f      	ldr	r0, [pc, #252]	@ (80034dc <phApp_PrintTagInfo+0x4dc>)
 80033e0:	f01b fc42 	bl	801ec68 <iprintf>
 80033e4:	4b3c      	ldr	r3, [pc, #240]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f01b fb66 	bl	801eabc <fflush>
            phApp_Print_Buff( pDataParams->sTypeVTargetInfo.aTypeV[bIndex].aUid, 0x08);
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	33d8      	adds	r3, #216	@ 0xd8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	330b      	adds	r3, #11
 8003400:	2108      	movs	r1, #8
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fdd4 	bl	8002fb0 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	3301      	adds	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	b29b      	uxth	r3, r3
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	429a      	cmp	r2, r3
 8003416:	d8d6      	bhi.n	80033c6 <phApp_PrintTagInfo+0x3c6>
        }
        DEBUG_PRINTF("\n");
 8003418:	200a      	movs	r0, #10
 800341a:	f01b fc37 	bl	801ec8c <putchar>
 800341e:	4b2e      	ldr	r3, [pc, #184]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4618      	mov	r0, r3
 8003426:	f01b fb49 	bl	801eabc <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    if (PHAC_DISCLOOP_CHECK_ANDMASK(wTagsDetected, PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 800342a:	883b      	ldrh	r3, [r7, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d04b      	beq.n	80034cc <phApp_PrintTagInfo+0x4cc>
    {
        DEBUG_PRINTF("\tTechnology  : ISO 18000p3m3 / EPC Gen2");
 8003434:	482f      	ldr	r0, [pc, #188]	@ (80034f4 <phApp_PrintTagInfo+0x4f4>)
 8003436:	f01b fc17 	bl	801ec68 <iprintf>
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f01b fb3b 	bl	801eabc <fflush>
        /* Loop through all the 18000p3m3 tags detected and print the UII */
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	e031      	b.n	80034b0 <phApp_PrintTagInfo+0x4b0>
        {
            DEBUG_PRINTF("\n\t\tCard: %d",bIndex + 1);
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	3301      	adds	r3, #1
 8003450:	4619      	mov	r1, r3
 8003452:	4820      	ldr	r0, [pc, #128]	@ (80034d4 <phApp_PrintTagInfo+0x4d4>)
 8003454:	f01b fc08 	bl	801ec68 <iprintf>
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f01b fb2c 	bl	801eabc <fflush>
            DEBUG_PRINTF("\n\t\tUII :");
 8003464:	4824      	ldr	r0, [pc, #144]	@ (80034f8 <phApp_PrintTagInfo+0x4f8>)
 8003466:	f01b fbff 	bl	801ec68 <iprintf>
 800346a:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f01b fb23 	bl	801eabc <fflush>
            phApp_Print_Buff(
                pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].aUii,
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	33e8      	adds	r3, #232	@ 0xe8
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	f103 0008 	add.w	r0, r3, #8
                (pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bIndex].wUiiLength / 8));
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800349c:	881b      	ldrh	r3, [r3, #0]
            phApp_Print_Buff(
 800349e:	08db      	lsrs	r3, r3, #3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	f7ff fd83 	bl	8002fb0 <phApp_Print_Buff>
        for (bIndex = 0; bIndex < wNumberOfTags; bIndex++)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	3301      	adds	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d8c8      	bhi.n	800344c <phApp_PrintTagInfo+0x44c>
        }
        DEBUG_PRINTF("\n");
 80034ba:	200a      	movs	r0, #10
 80034bc:	f01b fbe6 	bl	801ec8c <putchar>
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <phApp_PrintTagInfo+0x4d8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f01b faf8 	bl	801eabc <fflush>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	080210d0 	.word	0x080210d0
 80034d8:	20000070 	.word	0x20000070
 80034dc:	080210a0 	.word	0x080210a0
 80034e0:	08021108 	.word	0x08021108
 80034e4:	0802116c 	.word	0x0802116c
 80034e8:	08021180 	.word	0x08021180
 80034ec:	08021194 	.word	0x08021194
 80034f0:	080211a8 	.word	0x080211a8
 80034f4:	080211d0 	.word	0x080211d0
 80034f8:	080211f8 	.word	0x080211f8

080034fc <phApp_CPU_Init>:
* This function will initialize Host Controller interfaced with NXP Reader IC's.
* Any initialization which is not generic across Platforms, should be done here.
* Note: For NXP NFC Controllers HOST initialization is not required.
*/
void phApp_CPU_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
	DEBUG_PRINTF("STM32 CPU already initialized\r\n");
 8003500:	4805      	ldr	r0, [pc, #20]	@ (8003518 <phApp_CPU_Init+0x1c>)
 8003502:	f01b fc21 	bl	801ed48 <puts>
 8003506:	4b05      	ldr	r3, [pc, #20]	@ (800351c <phApp_CPU_Init+0x20>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f01b fad5 	bl	801eabc <fflush>
    }
#else
    /* In case of LPC series, startup file takes care of initializing clock and ports.
     * No initialization is required in Linux environment. */
#endif
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	08021594 	.word	0x08021594
 800351c:	20000070 	.word	0x20000070

08003520 <phApp_Comp_Init>:

/**
* This function will initialize Reader LIbrary Component
*/
phStatus_t phApp_Comp_Init(void * pDiscLoopParams)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8003528:	2300      	movs	r3, #0
 800352a:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)

    phacDiscLoop_Sw_DataParams_t * pDiscLoop = (phacDiscLoop_Sw_DataParams_t *)pDiscLoopParams;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60bb      	str	r3, [r7, #8]
#endif /* NXPBUILD__PHLN_LLCP_SW */

#ifdef NXPBUILD__PHAC_DISCLOOP_SW
#if defined(NXPBUILD__PHPAL_I18092MPI_SW) || defined(NXPBUILD__PHPAL_I18092MT_SW)
    /* Assign the GI for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <phApp_Comp_Init+0x58>)
 8003534:	675a      	str	r2, [r3, #116]	@ 0x74
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.bGiLength = bLLCPGBLength;
 8003536:	4b11      	ldr	r3, [pc, #68]	@ (800357c <phApp_Comp_Init+0x5c>)
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    /* Assign the GI for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pGi       = (uint8_t *)aLLCPGeneralBytes;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <phApp_Comp_Init+0x58>)
 8003544:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.bGiLength = bLLCPGBLength;
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <phApp_Comp_Init+0x5c>)
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
#endif

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    /* Assign ATR response for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_P2P.pAtrRes   = aResponseHolder;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <phApp_Comp_Init+0x60>)
 8003556:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS) ||  defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
    defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    /* Assign ATR response for Type F */
    pDiscLoop->sTypeFTargetInfo.sTypeF_P2P.pAtrRes   = aResponseHolder;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <phApp_Comp_Init+0x60>)
 800355c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    /* Assign ATS buffer for Type A */
    pDiscLoop->sTypeATargetInfo.sTypeA_I3P4.pAts     = aResponseHolder;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4a07      	ldr	r2, [pc, #28]	@ (8003580 <phApp_Comp_Init+0x60>)
 8003564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */
    return wStatus;
 8003568:	89fb      	ldrh	r3, [r7, #14]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000024 	.word	0x20000024
 800357c:	20000048 	.word	0x20000048
 8003580:	2000052c 	.word	0x2000052c

08003584 <phApp_Configure_IRQ>:

phStatus_t phApp_Configure_IRQ()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
    // 简化版本 - 不配置IRQ，直接返回成功
    DEBUG_PRINTF("IRQ configuration skipped - using polling mode\r\n");
 8003588:	4805      	ldr	r0, [pc, #20]	@ (80035a0 <phApp_Configure_IRQ+0x1c>)
 800358a:	f01b fbdd 	bl	801ed48 <puts>
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <phApp_Configure_IRQ+0x20>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f01b fa91 	bl	801eabc <fflush>

    return PH_ERR_SUCCESS;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	080215b4 	.word	0x080215b4
 80035a4:	20000070 	.word	0x20000070

080035a8 <phApp_HALConfigAutoColl>:
*******************************************************************************/
/**
* This function will initialize Hal Target Config
*/
phStatus_t phApp_HALConfigAutoColl(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	@ 0x28
 80035ac:	af02      	add	r7, sp, #8
#ifdef NXPBUILD__PHHAL_HW_TARGET
    phStatus_t wStatus;
    uint8_t baDynamicUidConfig[1U] = { 1U };
 80035ae:	2301      	movs	r3, #1
 80035b0:	773b      	strb	r3, [r7, #28]
    uint8_t baReadEepromConfig[24U] = { 0U };
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
 80035c0:	615a      	str	r2, [r3, #20]

    /* Read Set Listen Parameters data from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 80035c2:	4b54      	ldr	r3, [pc, #336]	@ (8003714 <phApp_HALConfigAutoColl+0x16c>)
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	1d3a      	adds	r2, r7, #4
 80035c8:	2318      	movs	r3, #24
 80035ca:	2140      	movs	r1, #64	@ 0x40
 80035cc:	f00e f980 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
 80035d0:	4603      	mov	r3, r0
 80035d2:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR,
        baReadEepromConfig,
        24U
        );
    CHECK_SUCCESS(wStatus);
 80035d4:	8bfb      	ldrh	r3, [r7, #30]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <phApp_HALConfigAutoColl+0x4e>
 80035da:	8bfb      	ldrh	r3, [r7, #30]
 80035dc:	461a      	mov	r2, r3
 80035de:	2152      	movs	r1, #82	@ 0x52
 80035e0:	484d      	ldr	r0, [pc, #308]	@ (8003718 <phApp_HALConfigAutoColl+0x170>)
 80035e2:	f01b fb41 	bl	801ec68 <iprintf>
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <phApp_HALConfigAutoColl+0x174>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f01b fa65 	bl	801eabc <fflush>
 80035f2:	8bfb      	ldrh	r3, [r7, #30]
 80035f4:	e08a      	b.n	800370c <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and configure Set Listen Parameters if EEPROM data is not correct. */
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2202      	movs	r2, #2
 80035fa:	4949      	ldr	r1, [pc, #292]	@ (8003720 <phApp_HALConfigAutoColl+0x178>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f01b fc83 	bl	801ef08 <memcmp>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11a      	bne.n	800363e <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	3302      	adds	r3, #2
 800360c:	2203      	movs	r2, #3
 800360e:	4945      	ldr	r1, [pc, #276]	@ (8003724 <phApp_HALConfigAutoColl+0x17c>)
 8003610:	4618      	mov	r0, r3
 8003612:	f01b fc79 	bl	801ef08 <memcmp>
 8003616:	4603      	mov	r3, r0
    if ((memcmp(&baReadEepromConfig[0U], sens_res, 2U) != 0x00)  ||
 8003618:	2b00      	cmp	r3, #0
 800361a:	d110      	bne.n	800363e <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	3305      	adds	r3, #5
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	4b41      	ldr	r3, [pc, #260]	@ (8003728 <phApp_HALConfigAutoColl+0x180>)
 8003624:	781b      	ldrb	r3, [r3, #0]
        (memcmp(&baReadEepromConfig[2U], nfc_id1, 3U) != 0x00)   ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d109      	bne.n	800363e <phApp_HALConfigAutoColl+0x96>
        (memcmp(&baReadEepromConfig[6U], poll_res, 18U) != 0x00))
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	3306      	adds	r3, #6
 800362e:	2212      	movs	r2, #18
 8003630:	493e      	ldr	r1, [pc, #248]	@ (800372c <phApp_HALConfigAutoColl+0x184>)
 8003632:	4618      	mov	r0, r3
 8003634:	f01b fc68 	bl	801ef08 <memcmp>
 8003638:	4603      	mov	r3, r0
        (memcmp(&baReadEepromConfig[5U], &sel_res, 1U) != 0x00)  ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <phApp_HALConfigAutoColl+0xd8>
    {
        /* Configure Set Listen Parameters. */
        wStatus = phhalHw_Pn5180_SetListenParameters(
 800363e:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <phApp_HALConfigAutoColl+0x16c>)
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	4b39      	ldr	r3, [pc, #228]	@ (8003728 <phApp_HALConfigAutoColl+0x180>)
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	4b3a      	ldr	r3, [pc, #232]	@ (8003730 <phApp_HALConfigAutoColl+0x188>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	4b37      	ldr	r3, [pc, #220]	@ (800372c <phApp_HALConfigAutoColl+0x184>)
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	4a34      	ldr	r2, [pc, #208]	@ (8003724 <phApp_HALConfigAutoColl+0x17c>)
 8003654:	4932      	ldr	r1, [pc, #200]	@ (8003720 <phApp_HALConfigAutoColl+0x178>)
 8003656:	f00d faab 	bl	8010bb0 <phhalHw_Pn5180_SetListenParameters>
 800365a:	4603      	mov	r3, r0
 800365c:	83fb      	strh	r3, [r7, #30]
            &nfc_id1[0],
            sel_res,
            &poll_res[0],
            nfc_id3
            );
        CHECK_SUCCESS(wStatus);
 800365e:	8bfb      	ldrh	r3, [r7, #30]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <phApp_HALConfigAutoColl+0xd8>
 8003664:	8bfb      	ldrh	r3, [r7, #30]
 8003666:	461a      	mov	r2, r3
 8003668:	2163      	movs	r1, #99	@ 0x63
 800366a:	482b      	ldr	r0, [pc, #172]	@ (8003718 <phApp_HALConfigAutoColl+0x170>)
 800366c:	f01b fafc 	bl	801ec68 <iprintf>
 8003670:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <phApp_HALConfigAutoColl+0x174>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f01b fa20 	bl	801eabc <fflush>
 800367c:	8bfb      	ldrh	r3, [r7, #30]
 800367e:	e045      	b.n	800370c <phApp_HALConfigAutoColl+0x164>
    }

    if (pHal->wFirmwareVer < 0x308U)
 8003680:	4b24      	ldr	r3, [pc, #144]	@ (8003714 <phApp_HALConfigAutoColl+0x16c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8003688:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800368c:	d201      	bcs.n	8003692 <phApp_HALConfigAutoColl+0xea>
    {
        /* With Pn5180 FW version < 3.8, only static UID is supported. */
        baDynamicUidConfig[0] = 0x00;
 800368e:	2300      	movs	r3, #0
 8003690:	773b      	strb	r3, [r7, #28]
    }

    /* Read Dynamic UID configuration from EEPROM */
    wStatus = phhalHw_Pn5180_Instr_ReadE2Prom(
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <phApp_HALConfigAutoColl+0x16c>)
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	1d3a      	adds	r2, r7, #4
 8003698:	2301      	movs	r3, #1
 800369a:	2158      	movs	r1, #88	@ 0x58
 800369c:	f00e f918 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
 80036a0:	4603      	mov	r3, r0
 80036a2:	83fb      	strh	r3, [r7, #30]
        (phhalHw_Pn5180_DataParams_t *) pHal,
        PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
        baReadEepromConfig,
        1U
        );
    CHECK_SUCCESS(wStatus);
 80036a4:	8bfb      	ldrh	r3, [r7, #30]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <phApp_HALConfigAutoColl+0x11e>
 80036aa:	8bfb      	ldrh	r3, [r7, #30]
 80036ac:	461a      	mov	r2, r3
 80036ae:	2173      	movs	r1, #115	@ 0x73
 80036b0:	4819      	ldr	r0, [pc, #100]	@ (8003718 <phApp_HALConfigAutoColl+0x170>)
 80036b2:	f01b fad9 	bl	801ec68 <iprintf>
 80036b6:	4b19      	ldr	r3, [pc, #100]	@ (800371c <phApp_HALConfigAutoColl+0x174>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f01b f9fd 	bl	801eabc <fflush>
 80036c2:	8bfb      	ldrh	r3, [r7, #30]
 80036c4:	e022      	b.n	800370c <phApp_HALConfigAutoColl+0x164>

    /* Verify EEPROM data and perform Dynamic UID configuration if EEPROM data is not correct. */
    if (memcmp(baReadEepromConfig, baDynamicUidConfig, 1U) != 0x00)
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d01a      	beq.n	800370a <phApp_HALConfigAutoColl+0x162>
    {
        /* Configure Dynamic UID */
        wStatus = phhalHw_Pn5180_Instr_WriteE2Prom(
 80036d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <phApp_HALConfigAutoColl+0x16c>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	f107 021c 	add.w	r2, r7, #28
 80036dc:	2301      	movs	r3, #1
 80036de:	2158      	movs	r1, #88	@ 0x58
 80036e0:	f00e f87e 	bl	80117e0 <phhalHw_Pn5180_Instr_WriteE2Prom>
 80036e4:	4603      	mov	r3, r0
 80036e6:	83fb      	strh	r3, [r7, #30]
            (phhalHw_Pn5180_DataParams_t *) pHal,
            PHHAL_HW_PN5180_DYN_UID_CFG_E2PROM_ADDR,
            baDynamicUidConfig,
            1U
            );
        CHECK_SUCCESS(wStatus);
 80036e8:	8bfb      	ldrh	r3, [r7, #30]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <phApp_HALConfigAutoColl+0x162>
 80036ee:	8bfb      	ldrh	r3, [r7, #30]
 80036f0:	461a      	mov	r2, r3
 80036f2:	217f      	movs	r1, #127	@ 0x7f
 80036f4:	4808      	ldr	r0, [pc, #32]	@ (8003718 <phApp_HALConfigAutoColl+0x170>)
 80036f6:	f01b fab7 	bl	801ec68 <iprintf>
 80036fa:	4b08      	ldr	r3, [pc, #32]	@ (800371c <phApp_HALConfigAutoColl+0x174>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4618      	mov	r0, r3
 8003702:	f01b f9db 	bl	801eabc <fflush>
 8003706:	8bfb      	ldrh	r3, [r7, #30]
 8003708:	e000      	b.n	800370c <phApp_HALConfigAutoColl+0x164>
    }
#endif /* NXPBUILD__PHHAL_HW_TARGET */
    return PH_ERR_SUCCESS;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000570 	.word	0x20000570
 8003718:	080215e4 	.word	0x080215e4
 800371c:	20000070 	.word	0x20000070
 8003720:	20000004 	.word	0x20000004
 8003724:	20000008 	.word	0x20000008
 8003728:	2000000b 	.word	0x2000000b
 800372c:	20000010 	.word	0x20000010
 8003730:	2000000c 	.word	0x2000000c

08003734 <phCryptoRng_Sw_Init>:

static const uint8_t PH_CRYPTOSYM_SW_CONST_ROM phCryptoRng_Sw_BlockCipherDf_DefaultKey[PHCRYPTORNG_SW_KEYLEN] =
{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

phStatus_t phCryptoRng_Sw_Init(phCryptoRng_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pCryptoDataParams)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	460b      	mov	r3, r1
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	817b      	strh	r3, [r7, #10]
    if(sizeof(phCryptoRng_Sw_DataParams_t) != wSizeOfDataParams)
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d002      	beq.n	800374e <phCryptoRng_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8003748:	f24e 4320 	movw	r3, #58400	@ 0xe420
 800374c:	e01b      	b.n	8003786 <phCryptoRng_Sw_Init+0x52>
    }
    PH_ASSERT_NULL (pDataParams);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <phCryptoRng_Sw_Init+0x24>
 8003754:	2321      	movs	r3, #33	@ 0x21
 8003756:	e016      	b.n	8003786 <phCryptoRng_Sw_Init+0x52>
    PH_ASSERT_NULL (pCryptoDataParams);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <phCryptoRng_Sw_Init+0x2e>
 800375e:	2321      	movs	r3, #33	@ 0x21
 8003760:	e011      	b.n	8003786 <phCryptoRng_Sw_Init+0x52>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTORNG | PH_CRYPTORNG_SW_ID;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f24e 4201 	movw	r2, #58369	@ 0xe401
 8003768:	801a      	strh	r2, [r3, #0]
    pDataParams->pCryptoDataParams = pCryptoDataParams;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]
    (void) memset(pDataParams->V, 0, (size_t) sizeof(pDataParams->V));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3308      	adds	r3, #8
 8003774:	2210      	movs	r2, #16
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f01b fbd5 	bl	801ef28 <memset>
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]

    return PH_ERR_SUCCESS;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <phCryptoRng_Sw_Seed>:

phStatus_t phCryptoRng_Sw_Seed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b092      	sub	sp, #72	@ 0x48
 8003794:	af04      	add	r7, sp, #16
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeed[PHCRYPTORNG_SW_SEEDLEN];

    /* we do not set the seed to 0 as we like randomness in here... */

    if (bSeedLength > PHCRYPTORNG_SW_SEEDLEN)
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d90e      	bls.n	80037c2 <phCryptoRng_Sw_Seed+0x32>
    {
        (void) memcpy(aSeed, pSeed, PHCRYPTORNG_SW_SEEDLEN);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f107 0414 	add.w	r4, r7, #20
 80037aa:	461d      	mov	r5, r3
 80037ac:	6828      	ldr	r0, [r5, #0]
 80037ae:	6869      	ldr	r1, [r5, #4]
 80037b0:	68aa      	ldr	r2, [r5, #8]
 80037b2:	68eb      	ldr	r3, [r5, #12]
 80037b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b6:	6928      	ldr	r0, [r5, #16]
 80037b8:	6969      	ldr	r1, [r5, #20]
 80037ba:	69aa      	ldr	r2, [r5, #24]
 80037bc:	69eb      	ldr	r3, [r5, #28]
 80037be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c0:	e006      	b.n	80037d0 <phCryptoRng_Sw_Seed+0x40>
    }
    else
    {
        (void) memcpy(aSeed, pSeed, bSeedLength);
 80037c2:	79fa      	ldrb	r2, [r7, #7]
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f01b fc2b 	bl	801f026 <memcpy>
    }

    if (pDataParams->bState == PHCRYPTORNG_SW_STATE_INIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	7f1b      	ldrb	r3, [r3, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <phCryptoRng_Sw_Seed+0x68>
    {
        statusTmp = phCryptoRng_Sw_Instantiate(
 80037d8:	f107 0114 	add.w	r1, r7, #20
 80037dc:	2300      	movs	r3, #0
 80037de:	9302      	str	r3, [sp, #8]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	2300      	movs	r3, #0
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	2220      	movs	r2, #32
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f8a9 	bl	8003944 <phCryptoRng_Sw_Instantiate>
 80037f2:	4603      	mov	r3, r0
 80037f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80037f6:	e00a      	b.n	800380e <phCryptoRng_Sw_Seed+0x7e>
            NULL,
            0);
    }
    else
    {
        statusTmp = phCryptoRng_Sw_Reseed(
 80037f8:	f107 0114 	add.w	r1, r7, #20
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	2220      	movs	r2, #32
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f914 	bl	8003a32 <phCryptoRng_Sw_Reseed>
 800380a:	4603      	mov	r3, r0
 800380c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)sizeof(aSeed),
            NULL,
            0);
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_CRYPTORNG);
 800380e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <phCryptoRng_Sw_Seed+0x9c>
 8003814:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003816:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <phCryptoRng_Sw_Seed+0x9c>
 800381e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003820:	b2db      	uxtb	r3, r3
 8003822:	b29a      	uxth	r2, r3
 8003824:	4b04      	ldr	r3, [pc, #16]	@ (8003838 <phCryptoRng_Sw_Seed+0xa8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	e000      	b.n	800382e <phCryptoRng_Sw_Seed+0x9e>
 800382c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800382e:	4618      	mov	r0, r3
 8003830:	3738      	adds	r7, #56	@ 0x38
 8003832:	46bd      	mov	sp, r7
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	bf00      	nop
 8003838:	ffffe400 	.word	0xffffe400

0800383c <phCryptoRng_Sw_Update>:
        wNoOfRndBytes,
        pRnd);
}

phStatus_t phCryptoRng_Sw_Update(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pProvidedData)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	@ 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
    /* NOTE: as seedlen == 2*PH_CRYPTOSYN_AES_BLOCK_SIZE, the loop is unrolled in this implementation. */
    /* NOTE: First iteration: Generate new key, second iteration: Generate new V. */
    /* For further details refer to sec. 10.2.1.1. of NIST SP 800-90 */

    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9fa 	bl	8003c40 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* Note: Encrypt V to get Key using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6858      	ldr	r0, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f103 0208 	add.w	r2, r3, #8
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2310      	movs	r3, #16
 800385e:	2100      	movs	r1, #0
 8003860:	f002 ff4e 	bl	8006700 <phCryptoSym_Encrypt>
 8003864:	4603      	mov	r3, r0
 8003866:	83bb      	strh	r3, [r7, #28]
 8003868:	8bbb      	ldrh	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <phCryptoRng_Sw_Update+0x36>
 800386e:	8bbb      	ldrh	r3, [r7, #28]
 8003870:	e064      	b.n	800393c <phCryptoRng_Sw_Update+0x100>
    /*  3. temp = Leftmost seedlen bits of temp. */
    /*  4 temp = temp xor provided_data. */
    /*  5. Key = Leftmost keylen bits of temp. */
    /* Note: Xor Key with provided data to get the key to be later used in the crypto unit. */
    /* Note: We must not load the key immediately, as the updated value of V shall be encrypted using the old key */
    if(pProvidedData != NULL)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d018      	beq.n	80038aa <phCryptoRng_Sw_Update+0x6e>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e012      	b.n	80038a4 <phCryptoRng_Sw_Update+0x68>
        {
            aKey[bIndex] ^= pProvidedData[bIndex];
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	3320      	adds	r3, #32
 8003882:	443b      	add	r3, r7
 8003884:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	4413      	add	r3, r2
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	7ffb      	ldrb	r3, [r7, #31]
 8003892:	404a      	eors	r2, r1
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	3320      	adds	r3, #32
 8003898:	443b      	add	r3, r7
 800389a:	f803 2c14 	strb.w	r2, [r3, #-20]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_KEYLEN; ++bIndex)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	3301      	adds	r3, #1
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d9e9      	bls.n	800387e <phCryptoRng_Sw_Update+0x42>
        }
    }

    /* NOTE: Second iteration of the loop */
    /* 2.1 V = (V + 1U) mod 2 exp outlen.*/
    phCryptoRng_Sw_IncrementV(pDataParams);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f9c8 	bl	8003c40 <phCryptoRng_Sw_IncrementV>

    /* 2.2 output_block = Block_Encrypt (Key, V). */
    /* 2.3 temp = temp || ouput_block. */
    /* NOTE: Encrypt V to get V' using ECB mode */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6858      	ldr	r0, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f103 0208 	add.w	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3308      	adds	r3, #8
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2310      	movs	r3, #16
 80038c2:	2100      	movs	r1, #0
 80038c4:	f002 ff1c 	bl	8006700 <phCryptoSym_Encrypt>
 80038c8:	4603      	mov	r3, r0
 80038ca:	83bb      	strh	r3, [r7, #28]
 80038cc:	8bbb      	ldrh	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <phCryptoRng_Sw_Update+0x9a>
 80038d2:	8bbb      	ldrh	r3, [r7, #28]
 80038d4:	e032      	b.n	800393c <phCryptoRng_Sw_Update+0x100>

    /* 3. temp = Leftmost seedlen bits of temp. */
    /* 4 temp = temp xor provided_data. */
    /* 6. V = Rightmost outlen bits of temp. */
    /* NOTE: Xor V' with provided data */
    if(pProvidedData != NULL)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d018      	beq.n	800390e <phCryptoRng_Sw_Update+0xd2>
    {
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e012      	b.n	8003908 <phCryptoRng_Sw_Update+0xcc>
        {
            pDataParams->V[bIndex] ^= pProvidedData[bIndex + PHCRYPTORNG_SW_KEYLEN];
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	7a19      	ldrb	r1, [r3, #8]
 80038ea:	7ffb      	ldrb	r3, [r7, #31]
 80038ec:	3310      	adds	r3, #16
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	7ffb      	ldrb	r3, [r7, #31]
 80038f6:	404a      	eors	r2, r1
 80038f8:	b2d1      	uxtb	r1, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	460a      	mov	r2, r1
 8003900:	721a      	strb	r2, [r3, #8]
        for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	3301      	adds	r3, #1
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	7ffb      	ldrb	r3, [r7, #31]
 800390a:	2b0f      	cmp	r3, #15
 800390c:	d9e9      	bls.n	80038e2 <phCryptoRng_Sw_Update+0xa6>

#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Load the new key into the Crypto Data Params structure */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f107 010c 	add.w	r1, r7, #12
 8003916:	2200      	movs	r2, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f002 ffb6 	bl	800688a <phCryptoSym_LoadKeyDirect>
 800391e:	4603      	mov	r3, r0
 8003920:	83bb      	strh	r3, [r7, #28]
 8003922:	8bbb      	ldrh	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <phCryptoRng_Sw_Update+0xf0>
 8003928:	8bbb      	ldrh	r3, [r7, #28]
 800392a:	e007      	b.n	800393c <phCryptoRng_Sw_Update+0x100>
        aKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Clear aKey for security reasons */
    (void) memset(aKey, 0x00, (size_t) sizeof(aKey));
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	2210      	movs	r2, #16
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f01b faf7 	bl	801ef28 <memset>
    return PH_ERR_SUCCESS;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <phCryptoRng_Sw_Instantiate>:

phStatus_t phCryptoRng_Sw_Instantiate(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pNonce, uint8_t bNonceLength, uint8_t * pPersonalizationString, uint8_t bPersonalizationString)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	@ 0x38
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Reset state to be init again. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_INIT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	771a      	strb	r2, [r3, #28]

    /* do we have a wrong input data length? */
    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bNonceLength + bPersonalizationString))
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003960:	441a      	add	r2, r3
 8003962:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003966:	4413      	add	r3, r2
 8003968:	2b20      	cmp	r3, #32
 800396a:	d002      	beq.n	8003972 <phCryptoRng_Sw_Instantiate+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 800396c:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8003970:	e05b      	b.n	8003a2a <phCryptoRng_Sw_Instantiate+0xe6>
    }

    /* NOTE: Prepare seed Material */
    /* 1. seed_material = entropy_input || nonce || personalization_string. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4618      	mov	r0, r3
 800397c:	f01b fb53 	bl	801f026 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pNonce, bNonceLength);
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	f107 0214 	add.w	r2, r7, #20
 8003986:	4413      	add	r3, r2
 8003988:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f01b fb49 	bl	801f026 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength + bNonceLength], pPersonalizationString, bPersonalizationString);
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800399a:	4413      	add	r3, r2
 800399c:	f107 0214 	add.w	r2, r7, #20
 80039a0:	4413      	add	r3, r2
 80039a2:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80039a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039a8:	4618      	mov	r0, r3
 80039aa:	f01b fb3c 	bl	801f026 <memcpy>

    /* Note: Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	4619      	mov	r1, r3
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f88f 	bl	8003ad8 <phCryptoRng_Sw_BlockCipherDf>
 80039ba:	4603      	mov	r3, r0
 80039bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80039be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <phCryptoRng_Sw_Instantiate+0x84>
 80039c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039c6:	e030      	b.n	8003a2a <phCryptoRng_Sw_Instantiate+0xe6>
        pDataParams,
        aSeedMaterial));

    /* Note: Reset the Key and the V-Value. */
    /* 4. V = 0 expoutlen. Comment: outlen bits of zeros. */
    (void) memset(pDataParams->V, 0, PHCRYPTORNG_SW_OUTLEN);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3308      	adds	r3, #8
 80039cc:	2210      	movs	r2, #16
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f01b faa9 	bl	801ef28 <memset>
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* 3. Key = 0 exp keylen. Comment: keylen bits of zeros. */
    /* Also reset the key, this can be done by loading V into the key register, as we set it to 0 before. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6858      	ldr	r0, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3308      	adds	r3, #8
 80039de:	2200      	movs	r2, #0
 80039e0:	4619      	mov	r1, r3
 80039e2:	f002 ff52 	bl	800688a <phCryptoSym_LoadKeyDirect>
 80039e6:	4603      	mov	r3, r0
 80039e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80039ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <phCryptoRng_Sw_Instantiate+0xb0>
 80039f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039f2:	e01a      	b.n	8003a2a <phCryptoRng_Sw_Instantiate+0xe6>
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* Update using aSeedMaterial as the personalization string. */
    /* 5. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff ff1e 	bl	800383c <phCryptoRng_Sw_Update>
 8003a00:	4603      	mov	r3, r0
 8003a02:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003a04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <phCryptoRng_Sw_Instantiate+0xca>
 8003a0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a0c:	e00d      	b.n	8003a2a <phCryptoRng_Sw_Instantiate+0xe6>

    /* Set the counter again to 1. */
    /* 6. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	619a      	str	r2, [r3, #24]

    /* Set the correct state */
    /* 7. Return V, Key, and reseed_counter as the initial_working_state. */
    pDataParams->bState = PHCRYPTORNG_SW_STATE_WORKING;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	771a      	strb	r2, [r3, #28]

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	2220      	movs	r2, #32
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f01b fa80 	bl	801ef28 <memset>

    return PH_ERR_SUCCESS;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3738      	adds	r7, #56	@ 0x38
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <phCryptoRng_Sw_Reseed>:

phStatus_t phCryptoRng_Sw_Reseed(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pEntropyInput, uint16_t wEntropyInputLength,
    uint8_t * pAdditionalInput, uint8_t bAdditionalInputLength)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08e      	sub	sp, #56	@ 0x38
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aSeedMaterial[PHCRYPTORNG_SW_SEEDLEN];

    /* Check for operational state */
    if(pDataParams->bState != PHCRYPTORNG_SW_STATE_WORKING)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	7f1b      	ldrb	r3, [r3, #28]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d002      	beq.n	8003a50 <phCryptoRng_Sw_Reseed+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_CRYPTORNG);
 8003a4a:	f24e 4325 	movw	r3, #58405	@ 0xe425
 8003a4e:	e03e      	b.n	8003ace <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Comment: Ensure that the length of the seed_material is exactly seedlen bits. */
    if(PHCRYPTORNG_SW_SEEDLEN != (wEntropyInputLength + bAdditionalInputLength))
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003a56:	4413      	add	r3, r2
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d002      	beq.n	8003a62 <phCryptoRng_Sw_Reseed+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTORNG);
 8003a5c:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8003a60:	e035      	b.n	8003ace <phCryptoRng_Sw_Reseed+0x9c>
    }

    /* Prepare seed Material */
    /* 1. seed_material = entropy_input || additional_input. */
    (void) memcpy(aSeedMaterial, pEntropyInput, wEntropyInputLength);
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f01b fadb 	bl	801f026 <memcpy>
    (void) memcpy(&aSeedMaterial[wEntropyInputLength], pAdditionalInput, bAdditionalInputLength);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	f107 0214 	add.w	r2, r7, #20
 8003a76:	4413      	add	r3, r2
 8003a78:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f01b fad1 	bl	801f026 <memcpy>

    /* Encrypt the seed value */
    /* 2. seed_material = Block_Cipher_df (seed_material, seedlen). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_BlockCipherDf(
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f824 	bl	8003ad8 <phCryptoRng_Sw_BlockCipherDf>
 8003a90:	4603      	mov	r3, r0
 8003a92:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003a94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <phCryptoRng_Sw_Reseed+0x6c>
 8003a9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a9c:	e017      	b.n	8003ace <phCryptoRng_Sw_Reseed+0x9c>
        pDataParams,
        aSeedMaterial));

    /* Update using aSeedMaterial as the personalization string. */
    /* 3. (Key, V) = Update (seed_material, Key, V). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoRng_Sw_Update(pDataParams, aSeedMaterial));
 8003a9e:	f107 0314 	add.w	r3, r7, #20
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fec9 	bl	800383c <phCryptoRng_Sw_Update>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003aae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <phCryptoRng_Sw_Reseed+0x86>
 8003ab4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ab6:	e00a      	b.n	8003ace <phCryptoRng_Sw_Reseed+0x9c>

    /* Set the counter again to 1. */
    /* 4. reseed_counter = 1. */
    pDataParams->dwRequestCounter = 1;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	619a      	str	r2, [r3, #24]

    /* 5. Return V, Key, and reseed_counter as the new_working_state. */

    /* Clear seed material for security reasons */
    (void) memset(aSeedMaterial, 0x00, (size_t) sizeof(aSeedMaterial));
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f01b fa2e 	bl	801ef28 <memset>

    return PH_ERR_SUCCESS;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3738      	adds	r7, #56	@ 0x38
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <phCryptoRng_Sw_BlockCipherDf>:
    /* 8. Return SUCCESS and returned_bits; also return Key, V, and reseed_counter as the new_working_state. */
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoRng_Sw_BlockCipherDf(phCryptoRng_Sw_DataParams_t * pDataParams, uint8_t * pIoString)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b096      	sub	sp, #88	@ 0x58
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* Then we load the default key */
    /* 8. K = Leftmost keylen bits of 0x00010203...1D1E1F. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	4954      	ldr	r1, [pc, #336]	@ (8003c3c <phCryptoRng_Sw_BlockCipherDf+0x164>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 fecd 	bl	800688a <phCryptoSym_LoadKeyDirect>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003af6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <phCryptoRng_Sw_BlockCipherDf+0x2c>
 8003afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b02:	e097      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        phCryptoRng_Sw_BlockCipherDf_DefaultKey,
        PH_CRYPTOSYM_KEY_TYPE_AES128));
#endif /* PH_CRYPTOSYM_SW_AES */

    /* First clear the cipher buffer*/
    (void) memset(aCipher, 0x00, (size_t) sizeof(aCipher));
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2240      	movs	r2, #64	@ 0x40
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f01b fa0b 	bl	801ef28 <memset>

    /* Prepare the cipher */
    /* We use the integers in LSB FIRST format - length is always 32 bits*/
    /* S = L || N || input_string || 0x80. */
    /* 2. L = len (input_string)/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN] = 0x20;
 8003b12:	2320      	movs	r3, #32
 8003b14:	773b      	strb	r3, [r7, #28]

    /* 3. N = number_of_bits_to_return/8. */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 4U] = 0x20;
 8003b16:	2320      	movs	r3, #32
 8003b18:	f887 3020 	strb.w	r3, [r7, #32]

    /* 4. S = L || N || input_string || 0x80. */
    (void) memcpy(&aCipher[PHCRYPTORNG_SW_OUTLEN + 8U], pIoString, PHCRYPTORNG_SW_SEEDLEN);
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	3318      	adds	r3, #24
 8003b22:	2220      	movs	r2, #32
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f01b fa7d 	bl	801f026 <memcpy>

    /* Add Padding */
    aCipher[PHCRYPTORNG_SW_OUTLEN + 8U + PHCRYPTORNG_SW_SEEDLEN] = 0x80;
 8003b2c:	2380      	movs	r3, #128	@ 0x80
 8003b2e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    /* NOTE: For simplicity, the loop is unrolled. */
    /* 9. While len (temp) < keylen + outlen, do */

    /* Set IV to zero according to specification of BCC (note: at this moment, first part of aCipher is 0 (16 bytes) */
    /* 1. chaining_value = 0 exp outlen. Comment: Set the first chaining value to outlen zeros. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadIv(pDataParams->pCryptoDataParams, aCipher, 16));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f107 010c 	add.w	r1, r7, #12
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f002 fe6e 	bl	800681e <phCryptoSym_LoadIv>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003b48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <phCryptoRng_Sw_BlockCipherDf+0x7e>
 8003b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b54:	e06e      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6858      	ldr	r0, [r3, #4]
 8003b5a:	f107 020c 	add.w	r2, r7, #12
 8003b5e:	f107 030b 	add.w	r3, r7, #11
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2340      	movs	r3, #64	@ 0x40
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f002 fe0a 	bl	8006784 <phCryptoSym_CalculateMac>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003b76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <phCryptoRng_Sw_BlockCipherDf+0xac>
 8003b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b82:	e057      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 4. For i = 1 to n do  */
    /* 4.1 input_block = chaining_value xor block_i.  */
    /* 4.2 chaining_value = Block_Encrypt (Key, input_block).  */
    /* 5. output_block = chaining_value.  */
    /* Set the MAC mode to CBC mac which is equal to BCC*/
    aCipher[0] = 0x01;
 8003b84:	2301      	movs	r3, #1
 8003b86:	733b      	strb	r3, [r7, #12]
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_CalculateMac(pDataParams->pCryptoDataParams,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6858      	ldr	r0, [r3, #4]
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	f107 010c 	add.w	r1, r7, #12
 8003b98:	f107 020b 	add.w	r2, r7, #11
 8003b9c:	9201      	str	r2, [sp, #4]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2340      	movs	r3, #64	@ 0x40
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	f002 fded 	bl	8006784 <phCryptoSym_CalculateMac>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003bb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <phCryptoRng_Sw_BlockCipherDf+0xe6>
 8003bb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bbc:	e03a      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>
    /* 10. K = Leftmost keylen bits of temp. */
#ifndef PH_CRYPTOSYM_SW_AES
    #error "No valid cipher available"
#else
    /* We can load the newly created key */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_LoadKeyDirect(
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fe5f 	bl	800688a <phCryptoSym_LoadKeyDirect>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003bd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <phCryptoRng_Sw_BlockCipherDf+0x108>
 8003bda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bde:	e029      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is upper part of pIoString) into lower part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6858      	ldr	r0, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f103 0210 	add.w	r2, r3, #16
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2310      	movs	r3, #16
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	f002 fd85 	bl	8006700 <phCryptoSym_Encrypt>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <phCryptoRng_Sw_BlockCipherDf+0x132>
 8003c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c08:	e014      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>

    /* 11. X = Next outlen bits of temp. */
    /* 13.1 X = Block_Encrypt (K, X). */
    /* 13.2 temp = temp || X. */
    /* Encrypt X (which is now lower part of pIoString) into upper part of pIoString. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Encrypt(pDataParams->pCryptoDataParams,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6858      	ldr	r0, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3310      	adds	r3, #16
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2310      	movs	r3, #16
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f002 fd71 	bl	8006700 <phCryptoSym_Encrypt>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <phCryptoRng_Sw_BlockCipherDf+0x15a>
 8003c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c30:	e000      	b.n	8003c34 <phCryptoRng_Sw_BlockCipherDf+0x15c>
        PH_CRYPTOSYM_CIPHER_MODE_ECB,
        pIoString,
        PHCRYPTORNG_SW_OUTLEN,
        &pIoString[PHCRYPTORNG_SW_KEYLEN]));

    return PH_ERR_SUCCESS;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3750      	adds	r7, #80	@ 0x50
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	080217a8 	.word	0x080217a8

08003c40 <phCryptoRng_Sw_IncrementV>:

static void phCryptoRng_Sw_IncrementV(phCryptoRng_Sw_DataParams_t * pDataParams)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
    uint8_t PH_MEMLOC_REM bIndex;

    /* Increment the V value of the pDataParams structure by 1 mod 2^128. Note: LSB is stored in position 0. */
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e018      	b.n	8003c80 <phCryptoRng_Sw_IncrementV+0x40>
    {
        if(pDataParams->V[bIndex] < 0xFFU)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	7a1b      	ldrb	r3, [r3, #8]
 8003c56:	2bff      	cmp	r3, #255	@ 0xff
 8003c58:	d00a      	beq.n	8003c70 <phCryptoRng_Sw_IncrementV+0x30>
        {
            ++pDataParams->V[bIndex];
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	441a      	add	r2, r3
 8003c60:	7a12      	ldrb	r2, [r2, #8]
 8003c62:	3201      	adds	r2, #1
 8003c64:	b2d1      	uxtb	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	721a      	strb	r2, [r3, #8]
            break;
 8003c6e:	e00b      	b.n	8003c88 <phCryptoRng_Sw_IncrementV+0x48>
        }
        else
        {
            pDataParams->V[bIndex] = 0x00;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	2200      	movs	r2, #0
 8003c78:	721a      	strb	r2, [r3, #8]
    for(bIndex = 0; bIndex < PHCRYPTORNG_SW_OUTLEN; ++bIndex)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	d9e3      	bls.n	8003c4e <phCryptoRng_Sw_IncrementV+0xe>
        }
    }
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <phCryptoRng_Seed>:
#include "mBedTLS/phCryptoRng_mBedTLS.h"
#endif /*NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
phStatus_t phCryptoRng_Seed(void * pDataParams, uint8_t * pSeed, uint8_t bSeedLength)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pSeed);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bSeedLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTORNG);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <phCryptoRng_Seed+0x1a>
 8003ca8:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003cac:	e027      	b.n	8003cfe <phCryptoRng_Seed+0x6a>
    if(0U != bSeedLength) PH_ASSERT_NULL_PARAM(pSeed, PH_COMP_CRYPTORNG);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <phCryptoRng_Seed+0x2c>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <phCryptoRng_Seed+0x2c>
 8003cba:	f24e 4321 	movw	r3, #58401	@ 0xe421
 8003cbe:	e01e      	b.n	8003cfe <phCryptoRng_Seed+0x6a>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pSeed), pSeed, bSeedLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bSeedLength), &bSeedLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTORNG)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003cc8:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8003ccc:	d004      	beq.n	8003cd8 <phCryptoRng_Seed+0x44>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8003cce:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003cd2:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8003cd4:	8afb      	ldrh	r3, [r7, #22]
 8003cd6:	e012      	b.n	8003cfe <phCryptoRng_Seed+0x6a>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <phCryptoRng_Seed+0x60>
    {
#ifdef NXPBUILD__PH_CRYPTORNG_SW
        case PH_CRYPTORNG_SW_ID:
            status = phCryptoRng_Sw_Seed((phCryptoRng_Sw_DataParams_t *) pDataParams, pSeed, bSeedLength);
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff fd51 	bl	8003790 <phCryptoRng_Sw_Seed>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	82fb      	strh	r3, [r7, #22]
            break;
 8003cf2:	e003      	b.n	8003cfc <phCryptoRng_Seed+0x68>
            status = phCryptoRng_mBedTLS_Seed((phCryptoRng_mBedTLS_DataParams_t *) pDataParams, pSeed, bSeedLength);
            break;
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTORNG);
 8003cf4:	f24e 4320 	movw	r3, #58400	@ 0xe420
 8003cf8:	82fb      	strh	r3, [r7, #22]
            break;
 8003cfa:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8003cfc:	8afb      	ldrh	r3, [r7, #22]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <phCryptoSym_Sw_Init>:
#endif /* PH_CRYPTOSYM_SW_DES */

#include "phCryptoSym_Sw_Int.h"

phStatus_t phCryptoSym_Sw_Init(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pKeyStoreDataParams)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	82fb      	strh	r3, [r7, #22]
    if(sizeof(phCryptoSym_Sw_DataParams_t) != wSizeOfDataParams)
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d002      	beq.n	8003d24 <phCryptoSym_Sw_Init+0x1e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8003d1e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8003d22:	e016      	b.n	8003d52 <phCryptoSym_Sw_Init+0x4c>
    }
    PH_ASSERT_NULL (pDataParams);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <phCryptoSym_Sw_Init+0x28>
 8003d2a:	2321      	movs	r3, #33	@ 0x21
 8003d2c:	e011      	b.n	8003d52 <phCryptoSym_Sw_Init+0x4c>

    /* Init. private data */
    pDataParams->wId = PH_COMP_CRYPTOSYM | PH_CRYPTOSYM_SW_ID;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f24e 1201 	movw	r2, #57601	@ 0xe101
 8003d34:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	605a      	str	r2, [r3, #4]

    /* Invalidate keys */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_InvalidateKey(pDataParams));
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f80c 	bl	8003d5a <phCryptoSym_Sw_InvalidateKey>
 8003d42:	4603      	mov	r3, r0
 8003d44:	82fb      	strh	r3, [r7, #22]
 8003d46:	8afb      	ldrh	r3, [r7, #22]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <phCryptoSym_Sw_Init+0x4a>
 8003d4c:	8afb      	ldrh	r3, [r7, #22]
 8003d4e:	e000      	b.n	8003d52 <phCryptoSym_Sw_Init+0x4c>

    return PH_ERR_SUCCESS;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <phCryptoSym_Sw_InvalidateKey>:

phStatus_t phCryptoSym_Sw_InvalidateKey(phCryptoSym_Sw_DataParams_t * pDataParams)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
    /* Reset all the key storage */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3308      	adds	r3, #8
 8003d66:	2220      	movs	r2, #32
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f01b f8dc 	bl	801ef28 <memset>
    (void) memset(pDataParams->pIV, 0x00, (size_t) sizeof(pDataParams->pIV));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3328      	adds	r3, #40	@ 0x28
 8003d74:	2210      	movs	r2, #16
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f01b f8d5 	bl	801ef28 <memset>

    pDataParams->wKeyType = PH_CRYPTOSYM_KEY_TYPE_INVALID;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d84:	871a      	strh	r2, [r3, #56]	@ 0x38
    pDataParams->wKeepIV = PH_CRYPTOSYM_VALUE_KEEP_IV_OFF;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    pDataParams->wAddInfo = 0x00;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	879a      	strh	r2, [r3, #60]	@ 0x3c
    pDataParams->bCMACSubKeysInitialized = PH_OFF;
    (void) memset(pDataParams->pCMACSubKey1, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey1));
    (void) memset(pDataParams->pCMACSubKey2, 0x00, (size_t) sizeof(pDataParams->pCMACSubKey2));
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    return PH_ERR_SUCCESS;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <phCryptoSym_Sw_Encrypt>:

phStatus_t phCryptoSym_Sw_Encrypt(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pPlainBuff, uint16_t wBuffLen,
    uint8_t * pEncBuff)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	461a      	mov	r2, r3
 8003da8:	460b      	mov	r3, r1
 8003daa:	817b      	strh	r3, [r7, #10]
 8003dac:	4613      	mov	r3, r2
 8003dae:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	82fb      	strh	r3, [r7, #22]
    uint16_t wBlockSize = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	82bb      	strh	r3, [r7, #20]
    uint16_t wIndex_Buff = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	83fb      	strh	r3, [r7, #30]
    uint8_t bIndex_BlockSize = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	777b      	strb	r3, [r7, #29]
    uint8_t * pIv = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pHelperBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2102      	movs	r1, #2
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fb13 	bl	80043f8 <phCryptoSym_Sw_GetConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	82fb      	strh	r3, [r7, #22]
 8003dd6:	8afb      	ldrh	r3, [r7, #22]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <phCryptoSym_Sw_Encrypt+0x44>
 8003ddc:	8afb      	ldrh	r3, [r7, #22]
 8003dde:	e097      	b.n	8003f10 <phCryptoSym_Sw_Encrypt+0x174>

    /* Check that the input buffer length is a multiple of the block size; */
    if (0U != (wBuffLen % wBlockSize))
 8003de0:	8aba      	ldrh	r2, [r7, #20]
 8003de2:	893b      	ldrh	r3, [r7, #8]
 8003de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003de8:	fb01 f202 	mul.w	r2, r1, r2
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <phCryptoSym_Sw_Encrypt+0x5e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8003df4:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8003df8:	e08a      	b.n	8003f10 <phCryptoSym_Sw_Encrypt+0x174>
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3328      	adds	r3, #40	@ 0x28
 8003dfe:	61bb      	str	r3, [r7, #24]

    /*Iterate over all blocks and perform the encryption*/
    wIndex_Buff = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8003e04:	e070      	b.n	8003ee8 <phCryptoSym_Sw_Encrypt+0x14c>
    {
        /* Is the output array the same as the input array? Else we need to recopy the plaintext upfronjt */
        if(pPlainBuff != pEncBuff)
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d009      	beq.n	8003e22 <phCryptoSym_Sw_Encrypt+0x86>
        {
            (void) memcpy(&pEncBuff[wIndex_Buff], &pPlainBuff[wIndex_Buff], wBlockSize);
 8003e0e:	8bfb      	ldrh	r3, [r7, #30]
 8003e10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e12:	18d0      	adds	r0, r2, r3
 8003e14:	8bfb      	ldrh	r3, [r7, #30]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	8aba      	ldrh	r2, [r7, #20]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f01b f902 	bl	801f026 <memcpy>
        }

        /* In case of CBC mode, we need to perform the XOR with the previous cipher block */
        switch((uint8_t) (wOption))
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d027      	beq.n	8003e7a <phCryptoSym_Sw_Encrypt+0xde>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db22      	blt.n	8003e74 <phCryptoSym_Sw_Encrypt+0xd8>
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d81f      	bhi.n	8003e74 <phCryptoSym_Sw_Encrypt+0xd8>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	777b      	strb	r3, [r7, #29]
 8003e38:	e016      	b.n	8003e68 <phCryptoSym_Sw_Encrypt+0xcc>
                {
                    pEncBuff[bIndex_BlockSize + wIndex_Buff] ^= pIv[bIndex_BlockSize];
 8003e3a:	7f7a      	ldrb	r2, [r7, #29]
 8003e3c:	8bfb      	ldrh	r3, [r7, #30]
 8003e3e:	4413      	add	r3, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	4413      	add	r3, r2
 8003e46:	7819      	ldrb	r1, [r3, #0]
 8003e48:	7f7b      	ldrb	r3, [r7, #29]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	7f78      	ldrb	r0, [r7, #29]
 8003e52:	8bfb      	ldrh	r3, [r7, #30]
 8003e54:	4403      	add	r3, r0
 8003e56:	4618      	mov	r0, r3
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	4403      	add	r3, r0
 8003e5c:	404a      	eors	r2, r1
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8003e62:	7f7b      	ldrb	r3, [r7, #29]
 8003e64:	3301      	adds	r3, #1
 8003e66:	777b      	strb	r3, [r7, #29]
 8003e68:	7f7b      	ldrb	r3, [r7, #29]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	8abb      	ldrh	r3, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3e3      	bcc.n	8003e3a <phCryptoSym_Sw_Encrypt+0x9e>
                }
                break;
 8003e72:	e003      	b.n	8003e7c <phCryptoSym_Sw_Encrypt+0xe0>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8003e74:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8003e78:	e04a      	b.n	8003f10 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8003e7a:	bf00      	nop
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        }

        (void) memcpy(&pEncBuff[wIndex_Buff], pHelperBuffer, wBlockSize);
#else
        if((uint8_t) wOption == PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4)
 8003e7c:	897b      	ldrh	r3, [r7, #10]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d10d      	bne.n	8003ea0 <phCryptoSym_Sw_Encrypt+0x104>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_DecryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8003e84:	8bfb      	ldrh	r3, [r7, #30]
 8003e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e88:	4413      	add	r3, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f002 fb91 	bl	80065b4 <phCryptoSym_Sw_DecryptBlock>
 8003e92:	4603      	mov	r3, r0
 8003e94:	82fb      	strh	r3, [r7, #22]
 8003e96:	8afb      	ldrh	r3, [r7, #22]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00f      	beq.n	8003ebc <phCryptoSym_Sw_Encrypt+0x120>
 8003e9c:	8afb      	ldrh	r3, [r7, #22]
 8003e9e:	e037      	b.n	8003f10 <phCryptoSym_Sw_Encrypt+0x174>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, &pEncBuff[wIndex_Buff]));
 8003ea0:	8bfb      	ldrh	r3, [r7, #30]
 8003ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f002 fadd 	bl	8006468 <phCryptoSym_Sw_EncryptBlock>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	82fb      	strh	r3, [r7, #22]
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <phCryptoSym_Sw_Encrypt+0x120>
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	e029      	b.n	8003f10 <phCryptoSym_Sw_Encrypt+0x174>
        }

#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

        /* do the loop dependent post processing of the data according to the used mode of operation */
        switch((uint8_t) (wOption))
 8003ebc:	897b      	ldrh	r3, [r7, #10]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <phCryptoSym_Sw_Encrypt+0x142>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	db07      	blt.n	8003ed8 <phCryptoSym_Sw_Encrypt+0x13c>
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d804      	bhi.n	8003ed8 <phCryptoSym_Sw_Encrypt+0x13c>
        {
            case PH_CRYPTOSYM_CIPHER_MODE_CBC:
            case PH_CRYPTOSYM_CIPHER_MODE_CBC_DF4:
                /* we should set the IV now to the old ciphertext... */
                pIv = &pEncBuff[wIndex_Buff];
 8003ece:	8bfb      	ldrh	r3, [r7, #30]
 8003ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed2:	4413      	add	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
                break;
 8003ed6:	e003      	b.n	8003ee0 <phCryptoSym_Sw_Encrypt+0x144>
                /* Nothing to do here */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 8003ed8:	f24e 1323 	movw	r3, #57635	@ 0xe123
 8003edc:	e018      	b.n	8003f10 <phCryptoSym_Sw_Encrypt+0x174>
                break;
 8003ede:	bf00      	nop
        }

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 8003ee0:	8aba      	ldrh	r2, [r7, #20]
 8003ee2:	8bfb      	ldrh	r3, [r7, #30]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	83fb      	strh	r3, [r7, #30]
    while(wIndex_Buff < wBuffLen)
 8003ee8:	8bfa      	ldrh	r2, [r7, #30]
 8003eea:	893b      	ldrh	r3, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d38a      	bcc.n	8003e06 <phCryptoSym_Sw_Encrypt+0x6a>
    } /* end of loop over all data blocks */

    /* do the final update of the IV according to the keep IV setting. */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d003      	beq.n	8003f00 <phCryptoSym_Sw_Encrypt+0x164>
 8003ef8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	da06      	bge.n	8003f0e <phCryptoSym_Sw_Encrypt+0x172>
    {
        (void) memcpy(pDataParams->pIV, pIv, wBlockSize);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3328      	adds	r3, #40	@ 0x28
 8003f04:	8aba      	ldrh	r2, [r7, #20]
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f01b f88c 	bl	801f026 <memcpy>
    }

    return PH_ERR_SUCCESS;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <phCryptoSym_Sw_CalculateMac>:
    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_CalculateMac(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wOption, const uint8_t * pData, uint16_t wDataLen,
    uint8_t * pMac, uint8_t * pMacLen)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b094      	sub	sp, #80	@ 0x50
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	460b      	mov	r3, r1
 8003f26:	817b      	strh	r3, [r7, #10]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	813b      	strh	r3, [r7, #8]
    phStatus_t wStatus = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t wBlockSize = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t wIndex_Buff = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t bIndex_BlockSize = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t bPaddingLen = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t bLastBlock[16];
    uint8_t * pIv = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t * pSubKey2 = pDataParams->pCMACSubKey2;
#else
    uint8_t pSubKey1[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint8_t pSubKey2[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];

    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8003f4e:	f107 0320 	add.w	r3, r7, #32
 8003f52:	2210      	movs	r2, #16
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f01a ffe6 	bl	801ef28 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8003f5c:	f107 0310 	add.w	r3, r7, #16
 8003f60:	2210      	movs	r2, #16
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f01a ffdf 	bl	801ef28 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear MAC length */
    *pMacLen = 0;
 8003f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]

    /* Clear the last block array */
    (void) memset(bLastBlock, 0, (size_t) sizeof(bLastBlock));
 8003f70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f74:	2210      	movs	r2, #16
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f01a ffd5 	bl	801ef28 <memset>

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 8003f7e:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8003f82:	461a      	mov	r2, r3
 8003f84:	2102      	movs	r1, #2
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fa36 	bl	80043f8 <phCryptoSym_Sw_GetConfig>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <phCryptoSym_Sw_CalculateMac+0x88>
 8003f9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003f9e:	e175      	b.n	800428c <phCryptoSym_Sw_CalculateMac+0x374>

    /* In case of a first block and in case of KEEP_IV is not set, the IV has to be cleared. */
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <phCryptoSym_Sw_CalculateMac+0xaa>
        (pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if((0U != (wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT)) ||
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d007      	beq.n	8003fc2 <phCryptoSym_Sw_CalculateMac+0xaa>
    {
        /* better leave the IV */
    }
    else
    {
        (void) memset(pDataParams->pIV, 0x00, wBlockSize);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3328      	adds	r3, #40	@ 0x28
 8003fb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f01a ffb3 	bl	801ef28 <memset>
    }

    /* Now we may start with  MAC calculation */

    /*Let's find out whether we should complete the MAC or if this is just an intermediate MAC calculation */
    if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT))
 8003fc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da0e      	bge.n	8003fe8 <phCryptoSym_Sw_CalculateMac+0xd0>
    {
        /* This is just an intermediate MAC */

        /* In this case we do not allow incomplete blocks. */
        if (0U != (wDataLen % wBlockSize))
 8003fca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8003fce:	893b      	ldrh	r3, [r7, #8]
 8003fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fd4:	fb01 f202 	mul.w	r2, r1, r2
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ac 	beq.w	800413a <phCryptoSym_Sw_CalculateMac+0x222>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8003fe2:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8003fe6:	e151      	b.n	800428c <phCryptoSym_Sw_CalculateMac+0x374>
        }
    }
    else
    {
        switch((uint8_t) (wOption))
 8003fe8:	897b      	ldrh	r3, [r7, #10]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <phCryptoSym_Sw_CalculateMac+0xde>
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d015      	beq.n	8004020 <phCryptoSym_Sw_CalculateMac+0x108>
 8003ff4:	e011      	b.n	800401a <phCryptoSym_Sw_CalculateMac+0x102>
                    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));

                }
#else
                /* Always perform with sub key generation */
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_CMAC_GenerateK1K2(pDataParams, pSubKey1, pSubKey2));
 8003ff6:	f107 0210 	add.w	r2, r7, #16
 8003ffa:	f107 0320 	add.w	r3, r7, #32
 8003ffe:	4619      	mov	r1, r3
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f002 f987 	bl	8006314 <phCryptoSym_Sw_CMAC_GenerateK1K2>
 8004006:	4603      	mov	r3, r0
 8004008:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800400c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <phCryptoSym_Sw_CalculateMac+0x10c>
 8004014:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004018:	e138      	b.n	800428c <phCryptoSym_Sw_CalculateMac+0x374>
                /* Nothing to do! */
                break;

            default:
                /* Add additional Modes of operation in here! */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 800401a:	f24e 1323 	movw	r3, #57635	@ 0xe123
 800401e:	e135      	b.n	800428c <phCryptoSym_Sw_CalculateMac+0x374>
                break;
 8004020:	bf00      	nop
 8004022:	e000      	b.n	8004026 <phCryptoSym_Sw_CalculateMac+0x10e>
                break;
 8004024:	bf00      	nop
        }

        /* Get number of bytes in last block */
        bPaddingLen = (uint8_t) (wDataLen % wBlockSize);
 8004026:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800402a:	893b      	ldrh	r3, [r7, #8]
 800402c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004030:	fb01 f202 	mul.w	r2, r1, r2
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	b29b      	uxth	r3, r3
 8004038:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        /* do we have incomplete blocks? */
        if((0U != bPaddingLen) || (wDataLen == 0x0000U))
 800403c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <phCryptoSym_Sw_CalculateMac+0x132>
 8004044:	893b      	ldrh	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d13f      	bne.n	80040ca <phCryptoSym_Sw_CalculateMac+0x1b2>
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = (uint16_t) (wDataLen - bPaddingLen);
 800404a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800404e:	b29b      	uxth	r3, r3
 8004050:	893a      	ldrh	r2, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	813b      	strh	r3, [r7, #8]

            (void) memcpy(bLastBlock, &pData[wDataLen], bPaddingLen);
 8004056:	893b      	ldrh	r3, [r7, #8]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	18d1      	adds	r1, r2, r3
 800405c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004060:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004064:	4618      	mov	r0, r3
 8004066:	f01a ffde 	bl	801f026 <memcpy>

            /* Apply padding byte*/
            bLastBlock[bPaddingLen] = 0x80;
 800406a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800406e:	3350      	adds	r3, #80	@ 0x50
 8004070:	443b      	add	r3, r7
 8004072:	2280      	movs	r2, #128	@ 0x80
 8004074:	f803 2c20 	strb.w	r2, [r3, #-32]
            /* pad with zeros not necessary, memset done upfront*/

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 8004078:	897b      	ldrh	r3, [r7, #10]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d15c      	bne.n	800413a <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K2, as we have an icomplete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004080:	2300      	movs	r3, #0
 8004082:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004086:	e018      	b.n	80040ba <phCryptoSym_Sw_CalculateMac+0x1a2>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey2[bIndex_BlockSize];
 8004088:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800408c:	3350      	adds	r3, #80	@ 0x50
 800408e:	443b      	add	r3, r7
 8004090:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8004094:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004098:	3350      	adds	r3, #80	@ 0x50
 800409a:	443b      	add	r3, r7
 800409c:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 80040a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040a4:	404a      	eors	r2, r1
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	3350      	adds	r3, #80	@ 0x50
 80040aa:	443b      	add	r3, r7
 80040ac:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80040b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040b4:	3301      	adds	r3, #1
 80040b6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80040ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040be:	b29a      	uxth	r2, r3
 80040c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d3df      	bcc.n	8004088 <phCryptoSym_Sw_CalculateMac+0x170>
            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 80040c8:	e037      	b.n	800413a <phCryptoSym_Sw_CalculateMac+0x222>
            }
        }
        else
        {
            /* Update wDataLen, last block is in other array */
            wDataLen = wDataLen - wBlockSize;
 80040ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80040ce:	893a      	ldrh	r2, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	813b      	strh	r3, [r7, #8]

            /* Copy whole block into bLastBlock */
            (void) memcpy(bLastBlock, &pData[wDataLen], wBlockSize);
 80040d4:	893b      	ldrh	r3, [r7, #8]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	18d1      	adds	r1, r2, r3
 80040da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80040de:	461a      	mov	r2, r3
 80040e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80040e4:	4618      	mov	r0, r3
 80040e6:	f01a ff9e 	bl	801f026 <memcpy>

            if((uint8_t) wOption == PH_CRYPTOSYM_MAC_MODE_CMAC)
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d123      	bne.n	800413a <phCryptoSym_Sw_CalculateMac+0x222>
            {
                /* XOR with K1, as we have a complete block */
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80040f8:	e018      	b.n	800412c <phCryptoSym_Sw_CalculateMac+0x214>
                {
                    bLastBlock[bIndex_BlockSize] ^= pSubKey1[bIndex_BlockSize];
 80040fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040fe:	3350      	adds	r3, #80	@ 0x50
 8004100:	443b      	add	r3, r7
 8004102:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8004106:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800410a:	3350      	adds	r3, #80	@ 0x50
 800410c:	443b      	add	r3, r7
 800410e:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8004112:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004116:	404a      	eors	r2, r1
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	3350      	adds	r3, #80	@ 0x50
 800411c:	443b      	add	r3, r7
 800411e:	f803 2c20 	strb.w	r2, [r3, #-32]
                for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004122:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004126:	3301      	adds	r3, #1
 8004128:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800412c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004130:	b29a      	uxth	r2, r3
 8004132:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004136:	429a      	cmp	r2, r3
 8004138:	d3df      	bcc.n	80040fa <phCryptoSym_Sw_CalculateMac+0x1e2>
            }
        }
    }

    /* Set the IV to the iv specified in the private data params */
    pIv = pDataParams->pIV;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	64bb      	str	r3, [r7, #72]	@ 0x48

    /*Iterate over all blocks and perform the CBC encryption*/
    wIndex_Buff = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 8004146:	e03b      	b.n	80041c0 <phCryptoSym_Sw_CalculateMac+0x2a8>
    {
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 8004148:	2300      	movs	r3, #0
 800414a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800414e:	e019      	b.n	8004184 <phCryptoSym_Sw_CalculateMac+0x26c>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ pData[wIndex_Buff + bIndex_BlockSize];
 8004150:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004156:	4413      	add	r3, r2
 8004158:	7819      	ldrb	r1, [r3, #0]
 800415a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800415e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004162:	4413      	add	r3, r2
 8004164:	461a      	mov	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004170:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004172:	4403      	add	r3, r0
 8004174:	404a      	eors	r2, r1
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 800417a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800417e:	3301      	adds	r3, #1
 8004180:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004184:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004188:	b29a      	uxth	r2, r3
 800418a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800418e:	429a      	cmp	r2, r3
 8004190:	d3de      	bcc.n	8004150 <phCryptoSym_Sw_CalculateMac+0x238>

#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8004192:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f002 f967 	bl	8006468 <phCryptoSym_Sw_EncryptBlock>
 800419a:	4603      	mov	r3, r0
 800419c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80041a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <phCryptoSym_Sw_CalculateMac+0x296>
 80041a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041ac:	e06e      	b.n	800428c <phCryptoSym_Sw_CalculateMac+0x374>
#endif

        /* set pIv to last cipher block*/
        pIv = pMac;
 80041ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041b0:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* update the loop counter */
        wIndex_Buff = wBlockSize + wIndex_Buff;
 80041b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80041b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041ba:	4413      	add	r3, r2
 80041bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    while(wIndex_Buff < wDataLen)
 80041c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3be      	bcc.n	8004148 <phCryptoSym_Sw_CalculateMac+0x230>
    } /* end of loop over all data blocks */

    /* If we have a complete MAC, lets encrypt the last block */
    if(0U == (wOption & PH_EXCHANGE_BUFFERED_BIT))
 80041ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db2f      	blt.n	8004232 <phCryptoSym_Sw_CalculateMac+0x31a>
    {
        /* Encrypt last block. */
        /* perform the XOR with the previous cipher block */
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80041d8:	e016      	b.n	8004208 <phCryptoSym_Sw_CalculateMac+0x2f0>
        {
            /* Note: after one round pIv == pMac */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
            pHelperBuffer[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
#else
            pMac[bIndex_BlockSize] = pIv[bIndex_BlockSize] ^ bLastBlock[bIndex_BlockSize];
 80041da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e0:	4413      	add	r3, r2
 80041e2:	7819      	ldrb	r1, [r3, #0]
 80041e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041e8:	3350      	adds	r3, #80	@ 0x50
 80041ea:	443b      	add	r3, r7
 80041ec:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 80041f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80041f6:	4403      	add	r3, r0
 80041f8:	404a      	eors	r2, r1
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
        for(bIndex_BlockSize = 0; bIndex_BlockSize < wBlockSize; bIndex_BlockSize++)
 80041fe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004202:	3301      	adds	r3, #1
 8004204:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004208:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800420c:	b29a      	uxth	r2, r3
 800420e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004212:	429a      	cmp	r2, r3
 8004214:	d3e1      	bcc.n	80041da <phCryptoSym_Sw_CalculateMac+0x2c2>
        }
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pHelperBuffer));
        (void) memcpy(pMac, pHelperBuffer, wBlockSize);
#else
        PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_EncryptBlock(pDataParams, pMac));
 8004216:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f002 f925 	bl	8006468 <phCryptoSym_Sw_EncryptBlock>
 800421e:	4603      	mov	r3, r0
 8004220:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004224:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <phCryptoSym_Sw_CalculateMac+0x31a>
 800422c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004230:	e02c      	b.n	800428c <phCryptoSym_Sw_CalculateMac+0x374>
#endif

    }

    /* do the final update of the IV according to the settings */
    if((pDataParams->wKeepIV == PH_CRYPTOSYM_VALUE_KEEP_IV_ON) || (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004236:	2b01      	cmp	r3, #1
 8004238:	d003      	beq.n	8004242 <phCryptoSym_Sw_CalculateMac+0x32a>
 800423a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da08      	bge.n	8004254 <phCryptoSym_Sw_CalculateMac+0x33c>
    {
        (void) memcpy(pDataParams->pIV, pMac, wBlockSize);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3328      	adds	r3, #40	@ 0x28
 8004246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800424a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800424c:	4618      	mov	r0, r3
 800424e:	f01a feea 	bl	801f026 <memcpy>
 8004252:	e007      	b.n	8004264 <phCryptoSym_Sw_CalculateMac+0x34c>
    }
    else
    {
        /* Clear the IV for security reasons */
        (void) memset(pDataParams->pIV, 0, wBlockSize);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3328      	adds	r3, #40	@ 0x28
 8004258:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f01a fe62 	bl	801ef28 <memset>
    }

#ifdef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    /* Clear key arrays */
    (void) memset(pSubKey1, 0x00, (size_t) sizeof(pSubKey1));
 8004264:	f107 0320 	add.w	r3, r7, #32
 8004268:	2210      	movs	r2, #16
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f01a fe5b 	bl	801ef28 <memset>
    (void) memset(pSubKey2, 0x00, (size_t) sizeof(pSubKey2));
 8004272:	f107 0310 	add.w	r3, r7, #16
 8004276:	2210      	movs	r2, #16
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f01a fe54 	bl	801ef28 <memset>
#endif

    *pMacLen = (uint8_t) wBlockSize;
 8004280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004288:	701a      	strb	r2, [r3, #0]
    return PH_ERR_SUCCESS;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3750      	adds	r7, #80	@ 0x50
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <phCryptoSym_Sw_LoadIv>:

phStatus_t phCryptoSym_Sw_LoadIv(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pIV, uint8_t bIVLen)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBlockSize = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	82bb      	strh	r3, [r7, #20]

    /* Get the block size of the currently loaded key */
    PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	461a      	mov	r2, r3
 80042b0:	2102      	movs	r1, #2
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f8a0 	bl	80043f8 <phCryptoSym_Sw_GetConfig>
 80042b8:	4603      	mov	r3, r0
 80042ba:	82fb      	strh	r3, [r7, #22]
 80042bc:	8afb      	ldrh	r3, [r7, #22]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <phCryptoSym_Sw_LoadIv+0x32>
 80042c2:	8afb      	ldrh	r3, [r7, #22]
 80042c4:	e00f      	b.n	80042e6 <phCryptoSym_Sw_LoadIv+0x52>

    /* Check block-size */
    if(bIVLen != wBlockSize)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	8abb      	ldrh	r3, [r7, #20]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d002      	beq.n	80042d6 <phCryptoSym_Sw_LoadIv+0x42>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80042d0:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80042d4:	e007      	b.n	80042e6 <phCryptoSym_Sw_LoadIv+0x52>
    }

    /* Update IV */
    (void) memcpy(pDataParams->pIV, pIV, wBlockSize);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3328      	adds	r3, #40	@ 0x28
 80042da:	8aba      	ldrh	r2, [r7, #20]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	4618      	mov	r0, r3
 80042e0:	f01a fea1 	bl	801f026 <memcpy>

    return PH_ERR_SUCCESS;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <phCryptoSym_Sw_LoadKeyDirect>:
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_CRYPTOSYM);
#endif /* NXPBUILD__PH_KEYSTORE */
}

phStatus_t phCryptoSym_Sw_LoadKeyDirect(phCryptoSym_Sw_DataParams_t * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM wStatus = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	82fb      	strh	r3, [r7, #22]

    /* Clear existing key */
    (void) memset(pDataParams->pKey, 0x00, (size_t) sizeof(pDataParams->pKey));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3308      	adds	r3, #8
 8004306:	2220      	movs	r2, #32
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f01a fe0c 	bl	801ef28 <memset>
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
        /* Disable the CMAC calculated Flag */
        pDataParams->bCMACSubKeysInitialized = PH_OFF;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

        switch(wKeyType)
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b05      	cmp	r3, #5
 8004314:	d859      	bhi.n	80043ca <phCryptoSym_Sw_LoadKeyDirect+0xda>
 8004316:	a201      	add	r2, pc, #4	@ (adr r2, 800431c <phCryptoSym_Sw_LoadKeyDirect+0x2c>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	08004335 	.word	0x08004335
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004369 	.word	0x08004369
 8004328:	08004383 	.word	0x08004383
 800432c:	0800439b 	.word	0x0800439b
 8004330:	080043b3 	.word	0x080043b3
        {
#ifdef PH_CRYPTOSYM_SW_AES
            case PH_CRYPTOSYM_KEY_TYPE_AES128:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8004334:	232c      	movs	r3, #44	@ 0x2c
 8004336:	2204      	movs	r2, #4
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8d8 	bl	80044f0 <phCryptoSym_Sw_Aes_KeyExpansion>
 8004340:	4603      	mov	r3, r0
 8004342:	82fb      	strh	r3, [r7, #22]
 8004344:	8afb      	ldrh	r3, [r7, #22]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d042      	beq.n	80043d0 <phCryptoSym_Sw_LoadKeyDirect+0xe0>
 800434a:	8afb      	ldrh	r3, [r7, #22]
 800434c:	e04f      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES128_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES192:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 800434e:	2334      	movs	r3, #52	@ 0x34
 8004350:	2206      	movs	r2, #6
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f8cb 	bl	80044f0 <phCryptoSym_Sw_Aes_KeyExpansion>
 800435a:	4603      	mov	r3, r0
 800435c:	82fb      	strh	r3, [r7, #22]
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d037      	beq.n	80043d4 <phCryptoSym_Sw_LoadKeyDirect+0xe4>
 8004364:	8afb      	ldrh	r3, [r7, #22]
 8004366:	e042      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                    PH_CRYPTOSYM_AES192_KEY_SIZE >> 2U,
                    (PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192 + 1U) << 2U));
                break;

            case PH_CRYPTOSYM_KEY_TYPE_AES256:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Aes_KeyExpansion(
 8004368:	233c      	movs	r3, #60	@ 0x3c
 800436a:	2208      	movs	r2, #8
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8be 	bl	80044f0 <phCryptoSym_Sw_Aes_KeyExpansion>
 8004374:	4603      	mov	r3, r0
 8004376:	82fb      	strh	r3, [r7, #22]
 8004378:	8afb      	ldrh	r3, [r7, #22]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02c      	beq.n	80043d8 <phCryptoSym_Sw_LoadKeyDirect+0xe8>
 800437e:	8afb      	ldrh	r3, [r7, #22]
 8004380:	e035      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
            case PH_CRYPTOSYM_KEY_TYPE_DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 1));
 8004382:	2201      	movs	r2, #1
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fe62 	bl	8005050 <phCryptoSym_Sw_Des_KeyInit>
 800438c:	4603      	mov	r3, r0
 800438e:	82fb      	strh	r3, [r7, #22]
 8004390:	8afb      	ldrh	r3, [r7, #22]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d022      	beq.n	80043dc <phCryptoSym_Sw_LoadKeyDirect+0xec>
 8004396:	8afb      	ldrh	r3, [r7, #22]
 8004398:	e029      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 2));
 800439a:	2202      	movs	r2, #2
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fe56 	bl	8005050 <phCryptoSym_Sw_Des_KeyInit>
 80043a4:	4603      	mov	r3, r0
 80043a6:	82fb      	strh	r3, [r7, #22]
 80043a8:	8afb      	ldrh	r3, [r7, #22]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <phCryptoSym_Sw_LoadKeyDirect+0xf0>
 80043ae:	8afb      	ldrh	r3, [r7, #22]
 80043b0:	e01d      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;

            case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                PH_CHECK_SUCCESS_FCT(wStatus, phCryptoSym_Sw_Des_KeyInit(pDataParams, pKey, 3));
 80043b2:	2203      	movs	r2, #3
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fe4a 	bl	8005050 <phCryptoSym_Sw_Des_KeyInit>
 80043bc:	4603      	mov	r3, r0
 80043be:	82fb      	strh	r3, [r7, #22]
 80043c0:	8afb      	ldrh	r3, [r7, #22]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00e      	beq.n	80043e4 <phCryptoSym_Sw_LoadKeyDirect+0xf4>
 80043c6:	8afb      	ldrh	r3, [r7, #22]
 80043c8:	e011      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
#endif /* PH_CRYPTOSYM_SW_DES */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80043ca:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80043ce:	e00e      	b.n	80043ee <phCryptoSym_Sw_LoadKeyDirect+0xfe>
                break;
 80043d0:	bf00      	nop
 80043d2:	e008      	b.n	80043e6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80043d4:	bf00      	nop
 80043d6:	e006      	b.n	80043e6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80043d8:	bf00      	nop
 80043da:	e004      	b.n	80043e6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <phCryptoSym_Sw_LoadKeyDirect+0xf6>
                break;
 80043e4:	bf00      	nop
        }
    }
    /* Update global KeyType */
    pDataParams->wKeyType = wKeyType;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	871a      	strh	r2, [r3, #56]	@ 0x38

    return PH_ERR_SUCCESS;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop

080043f8 <phCryptoSym_Sw_GetConfig>:

    return PH_ERR_SUCCESS;
}

phStatus_t phCryptoSym_Sw_GetConfig(phCryptoSym_Sw_DataParams_t * pDataParams, uint16_t wConfig, uint16_t * pValue)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	460b      	mov	r3, r1
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8004406:	897b      	ldrh	r3, [r7, #10]
 8004408:	2b06      	cmp	r3, #6
 800440a:	d867      	bhi.n	80044dc <phCryptoSym_Sw_GetConfig+0xe4>
 800440c:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <phCryptoSym_Sw_GetConfig+0x1c>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	080044bf 	.word	0x080044bf
 8004418:	08004431 	.word	0x08004431
 800441c:	08004491 	.word	0x08004491
 8004420:	080044c9 	.word	0x080044c9
 8004424:	080044dd 	.word	0x080044dd
 8004428:	080044dd 	.word	0x080044dd
 800442c:	080044d3 	.word	0x080044d3
    {
        case PH_CRYPTOSYM_CONFIG_KEY_SIZE:
            switch(pDataParams->wKeyType)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004434:	2b05      	cmp	r3, #5
 8004436:	d827      	bhi.n	8004488 <phCryptoSym_Sw_GetConfig+0x90>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <phCryptoSym_Sw_GetConfig+0x48>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004459 	.word	0x08004459
 8004444:	08004461 	.word	0x08004461
 8004448:	08004469 	.word	0x08004469
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                    *pValue = PH_CRYPTOSYM_AES128_KEY_SIZE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2210      	movs	r2, #16
 800445c:	801a      	strh	r2, [r3, #0]
                    break;
 800445e:	e016      	b.n	800448e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                    *pValue = PH_CRYPTOSYM_AES192_KEY_SIZE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2218      	movs	r2, #24
 8004464:	801a      	strh	r2, [r3, #0]
                    break;
 8004466:	e012      	b.n	800448e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES256_KEY_SIZE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	801a      	strh	r2, [r3, #0]
                    break;
 800446e:	e00e      	b.n	800448e <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_AES */

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                    *pValue = PH_CRYPTOSYM_DES_KEY_SIZE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2208      	movs	r2, #8
 8004474:	801a      	strh	r2, [r3, #0]
                    break;
 8004476:	e00a      	b.n	800448e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                    *pValue = PH_CRYPTOSYM_2K3DES_KEY_SIZE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2210      	movs	r2, #16
 800447c:	801a      	strh	r2, [r3, #0]
                    break;
 800447e:	e006      	b.n	800448e <phCryptoSym_Sw_GetConfig+0x96>

                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_3K3DES_KEY_SIZE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2218      	movs	r2, #24
 8004484:	801a      	strh	r2, [r3, #0]
                    break;
 8004486:	e002      	b.n	800448e <phCryptoSym_Sw_GetConfig+0x96>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 8004488:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800448c:	e02a      	b.n	80044e4 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 800448e:	e028      	b.n	80044e2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_BLOCK_SIZE:
            switch(pDataParams->wKeyType)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004494:	2b02      	cmp	r3, #2
 8004496:	dc02      	bgt.n	800449e <phCryptoSym_Sw_GetConfig+0xa6>
 8004498:	2b00      	cmp	r3, #0
 800449a:	da04      	bge.n	80044a6 <phCryptoSym_Sw_GetConfig+0xae>
 800449c:	e00b      	b.n	80044b6 <phCryptoSym_Sw_GetConfig+0xbe>
 800449e:	3b03      	subs	r3, #3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d808      	bhi.n	80044b6 <phCryptoSym_Sw_GetConfig+0xbe>
 80044a4:	e003      	b.n	80044ae <phCryptoSym_Sw_GetConfig+0xb6>
            {
#ifdef PH_CRYPTOSYM_SW_AES
                case PH_CRYPTOSYM_KEY_TYPE_AES128:
                case PH_CRYPTOSYM_KEY_TYPE_AES192:
                case PH_CRYPTOSYM_KEY_TYPE_AES256:
                    *pValue = PH_CRYPTOSYM_AES_BLOCK_SIZE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2210      	movs	r2, #16
 80044aa:	801a      	strh	r2, [r3, #0]
                    break;
 80044ac:	e006      	b.n	80044bc <phCryptoSym_Sw_GetConfig+0xc4>

#ifdef PH_CRYPTOSYM_SW_DES
                case PH_CRYPTOSYM_KEY_TYPE_DES:
                case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
                case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
                    *pValue = PH_CRYPTOSYM_DES_BLOCK_SIZE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2208      	movs	r2, #8
 80044b2:	801a      	strh	r2, [r3, #0]
                    break;
 80044b4:	e002      	b.n	80044bc <phCryptoSym_Sw_GetConfig+0xc4>
#endif /* PH_CRYPTOSYM_SW_DES */

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80044b6:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80044ba:	e013      	b.n	80044e4 <phCryptoSym_Sw_GetConfig+0xec>
            }
            break;
 80044bc:	e011      	b.n	80044e2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEY_TYPE:
            *pValue = pDataParams->wKeyType;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	801a      	strh	r2, [r3, #0]
            break;
 80044c6:	e00c      	b.n	80044e2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_KEEP_IV:
            *pValue = pDataParams->wKeepIV;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	801a      	strh	r2, [r3, #0]
            break;
 80044d0:	e007      	b.n	80044e2 <phCryptoSym_Sw_GetConfig+0xea>

        case PH_CRYPTOSYM_CONFIG_ADDITIONAL_INFO:
            *pValue = pDataParams->wAddInfo;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	801a      	strh	r2, [r3, #0]
            break;
 80044da:	e002      	b.n	80044e2 <phCryptoSym_Sw_GetConfig+0xea>

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_CRYPTOSYM);
 80044dc:	f24e 1323 	movw	r3, #57635	@ 0xe123
 80044e0:	e000      	b.n	80044e4 <phCryptoSym_Sw_GetConfig+0xec>
    }

    return PH_ERR_SUCCESS;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <phCryptoSym_Sw_Aes_KeyExpansion>:
    phCryptoSym_Sw_DataParams_t * pDataParams,
    const uint8_t * pKey,
    uint8_t bNkCurrent,
    uint8_t bNkMax
    )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	460b      	mov	r3, r1
 8004500:	71fb      	strb	r3, [r7, #7]
 8004502:	4613      	mov	r3, r2
 8004504:	71bb      	strb	r3, [r7, #6]
    {
        /* Noting to do */;
    }

    /* We only need to copy the key provided... */
    (void)memcpy(pDataParams->pKey, pKey, (size_t)(((uint32_t)bNkCurrent) << 2U));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f103 0008 	add.w	r0, r3, #8
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	461a      	mov	r2, r3
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	f01a fd87 	bl	801f026 <memcpy>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <phCryptoSym_Sw_Aes_EncryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b090      	sub	sp, #64	@ 0x40
 8004526:	af02      	add	r7, sp, #8
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, 0);
#else
    uint8_t i;
    uint8_t bNk;
    uint8_t bCurrentNk = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_AES256_KEY_SIZE];

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function */
    switch(pDataParams->wKeyType)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800453a:	2b02      	cmp	r3, #2
 800453c:	d00e      	beq.n	800455c <phCryptoSym_Sw_Aes_EncryptBlock+0x3a>
 800453e:	2b02      	cmp	r3, #2
 8004540:	dc10      	bgt.n	8004564 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <phCryptoSym_Sw_Aes_EncryptBlock+0x2a>
 8004546:	2b01      	cmp	r3, #1
 8004548:	d004      	beq.n	8004554 <phCryptoSym_Sw_Aes_EncryptBlock+0x32>
 800454a:	e00b      	b.n	8004564 <phCryptoSym_Sw_Aes_EncryptBlock+0x42>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 800454c:	2304      	movs	r3, #4
 800454e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8004552:	e00a      	b.n	800456a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 8004554:	2306      	movs	r3, #6
 8004556:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 800455a:	e006      	b.n	800456a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 800455c:	2308      	movs	r3, #8
 800455e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        break;
 8004562:	e002      	b.n	800456a <phCryptoSym_Sw_Aes_EncryptBlock+0x48>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8004564:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8004568:	e04a      	b.n	8004600 <phCryptoSym_Sw_Aes_EncryptBlock+0xde>
    }
    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f103 0108 	add.w	r1, r3, #8
 8004570:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	f107 0314 	add.w	r3, r7, #20
 800457a:	4618      	mov	r0, r3
 800457c:	f01a fd53 	bl	801f026 <memcpy>

    /* AddRoundKey(state, w[0, Nb-1])  See Sec. 5.1.4*/
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 8004580:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004584:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 8004588:	f107 0114 	add.w	r1, r7, #20
 800458c:	200f      	movs	r0, #15
 800458e:	9000      	str	r0, [sp, #0]
 8004590:	68b8      	ldr	r0, [r7, #8]
 8004592:	f000 fba9 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = 1 step 1 to Nr-1 */
    for (i=1; i< bNumRounds; i++)
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800459c:	e015      	b.n	80045ca <phCryptoSym_Sw_Aes_EncryptBlock+0xa8>
    {
        /* SubBytes(state)  See Sec. 5.1.1 */
        /* ShiftRows(state)  See Sec. 5.1.2*/
        phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f000 f8c8 	bl	8004734 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
        /* MixColumns(state)  See Sec. 5.1.3 */
        phCryptoSym_Sw_Aes_MixColumns(pBlock);
 80045a4:	68b8      	ldr	r0, [r7, #8]
 80045a6:	f000 fa09 	bl	80049bc <phCryptoSym_Sw_Aes_MixColumns>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80045aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80045ae:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80045b2:	f107 0114 	add.w	r1, r7, #20
 80045b6:	200f      	movs	r0, #15
 80045b8:	9000      	str	r0, [sp, #0]
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	f000 fb94 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=1; i< bNumRounds; i++)
 80045c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80045c4:	3301      	adds	r3, #1
 80045c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80045ca:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3e4      	bcc.n	800459e <phCryptoSym_Sw_Aes_EncryptBlock+0x7c>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    } /* end for */

    /* SubBytes(state) */
    /* ShiftRows(state) */
    phCryptoSym_Sw_Aes_SubBytesShiftRows(pBlock);
 80045d4:	68b8      	ldr	r0, [r7, #8]
 80045d6:	f000 f8ad 	bl	8004734 <phCryptoSym_Sw_Aes_SubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION);
 80045da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80045de:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80045e2:	f107 0114 	add.w	r1, r7, #20
 80045e6:	200f      	movs	r0, #15
 80045e8:	9000      	str	r0, [sp, #0]
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f000 fb7c 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>

    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2220      	movs	r2, #32
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f01a fc95 	bl	801ef28 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3738      	adds	r7, #56	@ 0x38
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <phCryptoSym_Sw_Aes_DecryptBlock>:
phStatus_t phCryptoSym_Sw_Aes_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bNumRounds
    )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b090      	sub	sp, #64	@ 0x40
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	71fb      	strb	r3, [r7, #7]

    /* In case of online key scheduling, the key needs to be copied into a temporary array and the bNk as well as the
    bCurrentNk have to be provided to the add round key function. In addition, the complete key expansion has to be
    performed upfront because the first round key needed is the one corresponding to round 10/12/14. */

    switch(pDataParams->wKeyType)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800461a:	2b02      	cmp	r3, #2
 800461c:	d014      	beq.n	8004648 <phCryptoSym_Sw_Aes_DecryptBlock+0x40>
 800461e:	2b02      	cmp	r3, #2
 8004620:	dc19      	bgt.n	8004656 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <phCryptoSym_Sw_Aes_DecryptBlock+0x24>
 8004626:	2b01      	cmp	r3, #1
 8004628:	d007      	beq.n	800463a <phCryptoSym_Sw_Aes_DecryptBlock+0x32>
 800462a:	e014      	b.n	8004656 <phCryptoSym_Sw_Aes_DecryptBlock+0x4e>
    {
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        bNk = 4;
 800462c:	2304      	movs	r3, #4
 800462e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 43;
 8004632:	232b      	movs	r3, #43	@ 0x2b
 8004634:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8004638:	e010      	b.n	800465c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        bNk = 6;
 800463a:	2306      	movs	r3, #6
 800463c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 51;
 8004640:	2333      	movs	r3, #51	@ 0x33
 8004642:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8004646:	e009      	b.n	800465c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        bNk = 8;
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        bCurrentNk = 59;
 800464e:	233b      	movs	r3, #59	@ 0x3b
 8004650:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        break;
 8004654:	e002      	b.n	800465c <phCryptoSym_Sw_Aes_DecryptBlock+0x54>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8004656:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 800465a:	e066      	b.n	800472a <phCryptoSym_Sw_Aes_DecryptBlock+0x122>
    }

    /* Recopy the key */
    (void)memcpy(bTmpKey, pDataParams->pKey, (size_t)(((uint32_t)bNk) << 2U));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f103 0108 	add.w	r1, r3, #8
 8004662:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	4618      	mov	r0, r3
 800466e:	f01a fcda 	bl	801f026 <memcpy>

    /* Perform complete key expansion upfront. */
    bTmp = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (i=0;i<=bNumRounds;i++)
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800467e:	e00f      	b.n	80046a0 <phCryptoSym_Sw_Aes_DecryptBlock+0x98>
    {
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bTmp, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION_PREPARE);
 8004680:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004684:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004688:	f107 0114 	add.w	r1, r7, #20
 800468c:	2030      	movs	r0, #48	@ 0x30
 800468e:	9000      	str	r0, [sp, #0]
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f000 fb29 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>
    for (i=0;i<=bNumRounds;i++)
 8004696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800469a:	3301      	adds	r3, #1
 800469c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80046a0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d9ea      	bls.n	8004680 <phCryptoSym_Sw_Aes_DecryptBlock+0x78>
    }
    /* Now, bTmpKey contains the last round key. */

    /* AddRoundKey(state, w[Nr*Nb, (Nr+1U)*Nb-1])  See Sec. 5.1.4 */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80046aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046ae:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80046b2:	f107 0114 	add.w	r1, r7, #20
 80046b6:	20c0      	movs	r0, #192	@ 0xc0
 80046b8:	9000      	str	r0, [sp, #0]
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f000 fb14 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    /* for round = Nr-1 step -1 downto 1 */
    for (i=bNumRounds - 1U; i > 0U; i--)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80046c8:	e015      	b.n	80046f6 <phCryptoSym_Sw_Aes_DecryptBlock+0xee>
    {
        /* InvShiftRows(state)  See Sec. 5.3.1 */
        /* InvSubBytes(state)  See Sec. 5.3.2  */
        phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f000 f8d4 	bl	8004878 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
        /* AddRoundKey(state, w[round*Nb, (round+1U)*Nb-1]) */
        phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 80046d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80046d4:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80046d8:	f107 0114 	add.w	r1, r7, #20
 80046dc:	20c0      	movs	r0, #192	@ 0xc0
 80046de:	9000      	str	r0, [sp, #0]
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	f000 fb01 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
        /* InvMixColumns(state)  See Sec. 5.3.3 */
        phCryptoSym_Sw_Aes_InvMixColumns(pBlock);
 80046e6:	68b8      	ldr	r0, [r7, #8]
 80046e8:	f000 fa06 	bl	8004af8 <phCryptoSym_Sw_Aes_InvMixColumns>
    for (i=bNumRounds - 1U; i > 0U; i--)
 80046ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80046f0:	3b01      	subs	r3, #1
 80046f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80046f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <phCryptoSym_Sw_Aes_DecryptBlock+0xc2>
    } /* end for */

    /* InvShiftRows(state) */
    /* InvSubBytes(state)  */
    phCryptoSym_Sw_Aes_InvSubBytesShiftRows(pBlock);
 80046fe:	68b8      	ldr	r0, [r7, #8]
 8004700:	f000 f8ba 	bl	8004878 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>
#ifndef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, pDataParams->pKey, i);
#else
    /* AddRoundKey(state, w[0, Nb-1]) */
    phCryptoSym_Sw_Aes_AddRoundKey(pBlock, bTmpKey, &bCurrentNk, bNk, PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION);
 8004704:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004708:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 800470c:	f107 0114 	add.w	r1, r7, #20
 8004710:	20c0      	movs	r0, #192	@ 0xc0
 8004712:	9000      	str	r0, [sp, #0]
 8004714:	68b8      	ldr	r0, [r7, #8]
 8004716:	f000 fae7 	bl	8004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
 800471a:	f107 0314 	add.w	r3, r7, #20
 800471e:	2220      	movs	r2, #32
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f01a fc00 	bl	801ef28 <memset>
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3738      	adds	r7, #56	@ 0x38
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <phCryptoSym_Sw_Aes_SubBytesShiftRows>:

void phCryptoSym_Sw_Aes_SubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;
    /* For details, see section Sec. 5.1.1 and See Sec. 5.1.2 in FIPS-197 */

    pState[0] = phCryptoSym_Sw_Aes_sboxTable[pState[0]];    /* Row 1: No shift */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4b4c      	ldr	r3, [pc, #304]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004744:	5c9a      	ldrb	r2, [r3, r2]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_sboxTable[pState[4]];    /* Row 1: No shift */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	4619      	mov	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	4a47      	ldr	r2, [pc, #284]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004758:	5c52      	ldrb	r2, [r2, r1]
 800475a:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_sboxTable[pState[8]];    /* Row 1: No shift */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3308      	adds	r3, #8
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	4619      	mov	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3308      	adds	r3, #8
 8004768:	4a42      	ldr	r2, [pc, #264]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800476a:	5c52      	ldrb	r2, [r2, r1]
 800476c:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_sboxTable[pState[12]];  /* Row 1: No shift */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	330c      	adds	r3, #12
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	330c      	adds	r3, #12
 800477a:	4a3e      	ldr	r2, [pc, #248]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800477c:	5c52      	ldrb	r2, [r2, r1]
 800477e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[1]];          /* Row 2: Shift 1 Position to the left */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3301      	adds	r3, #1
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	4b3a      	ldr	r3, [pc, #232]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	73fb      	strb	r3, [r7, #15]
    pState[1] = phCryptoSym_Sw_Aes_sboxTable[pState[5]];    /* Row 2: Shift 1 Position to the left */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3305      	adds	r3, #5
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3301      	adds	r3, #1
 800479a:	4a36      	ldr	r2, [pc, #216]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800479c:	5c52      	ldrb	r2, [r2, r1]
 800479e:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_sboxTable[pState[9]];    /* Row 2: Shift 1 Position to the left */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3309      	adds	r3, #9
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3305      	adds	r3, #5
 80047ac:	4a31      	ldr	r2, [pc, #196]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80047ae:	5c52      	ldrb	r2, [r2, r1]
 80047b0:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_sboxTable[pState[13]];   /* Row 2: Shift 1 Position to the left */
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	330d      	adds	r3, #13
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3309      	adds	r3, #9
 80047be:	4a2d      	ldr	r2, [pc, #180]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80047c0:	5c52      	ldrb	r2, [r2, r1]
 80047c2:	701a      	strb	r2, [r3, #0]
    pState[13] = tmp;                                       /* Row 2: Shift 1 Position to the left */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	330d      	adds	r3, #13
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[2]];          /* Row 3: Shift 2 Position to the left */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3302      	adds	r3, #2
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	4b27      	ldr	r3, [pc, #156]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80047d6:	5c9b      	ldrb	r3, [r3, r2]
 80047d8:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_sboxTable[pState[10]];   /* Row 3: Shift 2 Position to the left */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	330a      	adds	r3, #10
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3302      	adds	r3, #2
 80047e6:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80047e8:	5c52      	ldrb	r2, [r2, r1]
 80047ea:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	330a      	adds	r3, #10
 80047f0:	7bfa      	ldrb	r2, [r7, #15]
 80047f2:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[6]];          /* Row 3: Shift 2 Position to the left */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3306      	adds	r3, #6
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_sboxTable[pState[14]];   /* Row 3: Shift 2 Position to the left */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	330e      	adds	r3, #14
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4619      	mov	r1, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3306      	adds	r3, #6
 800480e:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004810:	5c52      	ldrb	r2, [r2, r1]
 8004812:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                       /* Row 3: Shift 2 Position to the left */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	330e      	adds	r3, #14
 8004818:	7bfa      	ldrb	r2, [r7, #15]
 800481a:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_sboxTable[pState[15]];         /* Row 4: Shift 3 Position to the left */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	330f      	adds	r3, #15
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	73fb      	strb	r3, [r7, #15]
    pState[15] = phCryptoSym_Sw_Aes_sboxTable[pState[11]];  /* Row 4: Shift 3 Position to the left */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	330b      	adds	r3, #11
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4619      	mov	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	330f      	adds	r3, #15
 8004836:	4a0f      	ldr	r2, [pc, #60]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 8004838:	5c52      	ldrb	r2, [r2, r1]
 800483a:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_sboxTable[pState[7]];   /* Row 4: Shift 3 Position to the left */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3307      	adds	r3, #7
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4619      	mov	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	330b      	adds	r3, #11
 8004848:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800484a:	5c52      	ldrb	r2, [r2, r1]
 800484c:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_sboxTable[pState[3]];    /* Row 4: Shift 3 Position to the left */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3303      	adds	r3, #3
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3307      	adds	r3, #7
 800485a:	4a06      	ldr	r2, [pc, #24]	@ (8004874 <phCryptoSym_Sw_Aes_SubBytesShiftRows+0x140>)
 800485c:	5c52      	ldrb	r2, [r2, r1]
 800485e:	701a      	strb	r2, [r3, #0]
    pState[3] = tmp;                                        /* Row 4: Shift 3 Position to the left */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3303      	adds	r3, #3
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	701a      	strb	r2, [r3, #0]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	080217b8 	.word	0x080217b8

08004878 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows>:

void phCryptoSym_Sw_Aes_InvSubBytesShiftRows(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp;

    /* For details, see section Sec. 5.3.1 and See Sec. 5.3.2 in FIPS-197 */
    pState[0] = phCryptoSym_Sw_Aes_invSboxTable[pState[0]];        /* Row 1: No shift */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	4b4c      	ldr	r3, [pc, #304]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004888:	5c9a      	ldrb	r2, [r3, r2]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	701a      	strb	r2, [r3, #0]
    pState[4] = phCryptoSym_Sw_Aes_invSboxTable[pState[4]];     /* Row 1: No shift */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3304      	adds	r3, #4
 800489a:	4a47      	ldr	r2, [pc, #284]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800489c:	5c52      	ldrb	r2, [r2, r1]
 800489e:	701a      	strb	r2, [r3, #0]
    pState[8] = phCryptoSym_Sw_Aes_invSboxTable[pState[8]];     /* Row 1: No shift */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3308      	adds	r3, #8
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3308      	adds	r3, #8
 80048ac:	4a42      	ldr	r2, [pc, #264]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80048ae:	5c52      	ldrb	r2, [r2, r1]
 80048b0:	701a      	strb	r2, [r3, #0]
    pState[12] = phCryptoSym_Sw_Aes_invSboxTable[pState[12]];   /* Row 1: No shift */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	330c      	adds	r3, #12
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	330c      	adds	r3, #12
 80048be:	4a3e      	ldr	r2, [pc, #248]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80048c0:	5c52      	ldrb	r2, [r2, r1]
 80048c2:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[13]];          /* Row 2: Shift 1 Position to the right */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	330d      	adds	r3, #13
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b3a      	ldr	r3, [pc, #232]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	73fb      	strb	r3, [r7, #15]
    pState[13] = phCryptoSym_Sw_Aes_invSboxTable[pState[9]];    /* Row 2: Shift 1 Position to the right */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3309      	adds	r3, #9
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	330d      	adds	r3, #13
 80048de:	4a36      	ldr	r2, [pc, #216]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80048e0:	5c52      	ldrb	r2, [r2, r1]
 80048e2:	701a      	strb	r2, [r3, #0]
    pState[9] = phCryptoSym_Sw_Aes_invSboxTable[pState[5]];     /* Row 2: Shift 1 Position to the right */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3305      	adds	r3, #5
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3309      	adds	r3, #9
 80048f0:	4a31      	ldr	r2, [pc, #196]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80048f2:	5c52      	ldrb	r2, [r2, r1]
 80048f4:	701a      	strb	r2, [r3, #0]
    pState[5] = phCryptoSym_Sw_Aes_invSboxTable[pState[1]];     /* Row 2: Shift 1 Position to the right */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3301      	adds	r3, #1
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	4619      	mov	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3305      	adds	r3, #5
 8004902:	4a2d      	ldr	r2, [pc, #180]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004904:	5c52      	ldrb	r2, [r2, r1]
 8004906:	701a      	strb	r2, [r3, #0]
    pState[1] = tmp;                                            /* Row 2: Shift 1 Position to the right */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3301      	adds	r3, #1
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[2]];           /* Row 3: Shift 2 Position to the right */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3302      	adds	r3, #2
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	73fb      	strb	r3, [r7, #15]
    pState[2] = phCryptoSym_Sw_Aes_invSboxTable[pState[10]];    /* Row 3: Shift 2 Position to the right */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	330a      	adds	r3, #10
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3302      	adds	r3, #2
 800492a:	4a23      	ldr	r2, [pc, #140]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800492c:	5c52      	ldrb	r2, [r2, r1]
 800492e:	701a      	strb	r2, [r3, #0]
    pState[10] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	330a      	adds	r3, #10
 8004934:	7bfa      	ldrb	r2, [r7, #15]
 8004936:	701a      	strb	r2, [r3, #0]
    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[6]];           /* Row 3: Shift 2 Position to the right */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3306      	adds	r3, #6
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	73fb      	strb	r3, [r7, #15]
    pState[6] = phCryptoSym_Sw_Aes_invSboxTable[pState[14]];    /* Row 3: Shift 2 Position to the right */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	330e      	adds	r3, #14
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4619      	mov	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3306      	adds	r3, #6
 8004952:	4a19      	ldr	r2, [pc, #100]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 8004954:	5c52      	ldrb	r2, [r2, r1]
 8004956:	701a      	strb	r2, [r3, #0]
    pState[14] = tmp;                                           /* Row 3: Shift 2 Position to the right */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	330e      	adds	r3, #14
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	701a      	strb	r2, [r3, #0]

    tmp = phCryptoSym_Sw_Aes_invSboxTable[pState[3]];           /* Row 4: Shift 3 Position to the right */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3303      	adds	r3, #3
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	73fb      	strb	r3, [r7, #15]
    pState[3] = phCryptoSym_Sw_Aes_invSboxTable[pState[7]];     /* Row 4: Shift 3 Position to the right */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3307      	adds	r3, #7
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3303      	adds	r3, #3
 800497a:	4a0f      	ldr	r2, [pc, #60]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800497c:	5c52      	ldrb	r2, [r2, r1]
 800497e:	701a      	strb	r2, [r3, #0]
    pState[7] = phCryptoSym_Sw_Aes_invSboxTable[pState[11]];    /* Row 4: Shift 3 Position to the right */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	330b      	adds	r3, #11
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3307      	adds	r3, #7
 800498c:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 800498e:	5c52      	ldrb	r2, [r2, r1]
 8004990:	701a      	strb	r2, [r3, #0]
    pState[11] = phCryptoSym_Sw_Aes_invSboxTable[pState[15]];   /* Row 4: Shift 3 Position to the right */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	330f      	adds	r3, #15
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	4619      	mov	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	330b      	adds	r3, #11
 800499e:	4a06      	ldr	r2, [pc, #24]	@ (80049b8 <phCryptoSym_Sw_Aes_InvSubBytesShiftRows+0x140>)
 80049a0:	5c52      	ldrb	r2, [r2, r1]
 80049a2:	701a      	strb	r2, [r3, #0]
    pState[15] = tmp;                                           /* Row 4: Shift 3 Position to the right */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	330f      	adds	r3, #15
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	701a      	strb	r2, [r3, #0]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	080218b8 	.word	0x080218b8

080049bc <phCryptoSym_Sw_Aes_MixColumns>:

void phCryptoSym_Sw_Aes_MixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    /* For details, see section Sec. 5.1.3 in FIPS-197 */

    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* times3 = times2 xor times1 */
    for (i=0;i<4U;i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e089      	b.n	8004ade <phCryptoSym_Sw_Aes_MixColumns+0x122>
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ phCryptoSym_Sw_Aes_times3[pState[1]] ^ pState[2] ^ pState[3];
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ phCryptoSym_Sw_Aes_times3[pState[2]] ^ pState[3];
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ phCryptoSym_Sw_Aes_times3[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_times3[pState[0]] ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
#else
        tmp[0] = phCryptoSym_Sw_Aes_times2[pState[0]] ^ (phCryptoSym_Sw_Aes_times2[pState[1]] ^ pState[1]) ^ pState[2] ^ pState[3];
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b48      	ldr	r3, [pc, #288]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80049d2:	5c9a      	ldrb	r2, [r3, r2]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3301      	adds	r3, #1
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	4619      	mov	r1, r3
 80049dc:	4b45      	ldr	r3, [pc, #276]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 80049de:	5c59      	ldrb	r1, [r3, r1]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	404b      	eors	r3, r1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	4053      	eors	r3, r2
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3302      	adds	r3, #2
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4053      	eors	r3, r2
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3303      	adds	r3, #3
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	4053      	eors	r3, r2
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	723b      	strb	r3, [r7, #8]
        tmp[1] = pState[0] ^ phCryptoSym_Sw_Aes_times2[pState[1]] ^ (phCryptoSym_Sw_Aes_times2[pState[2]] ^ pState[2]) ^ pState[3];
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4b38      	ldr	r3, [pc, #224]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004a12:	5c5b      	ldrb	r3, [r3, r1]
 8004a14:	4053      	eors	r3, r2
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4b34      	ldr	r3, [pc, #208]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004a22:	5c59      	ldrb	r1, [r3, r1]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3302      	adds	r3, #2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	404b      	eors	r3, r1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4053      	eors	r3, r2
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3303      	adds	r3, #3
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4053      	eors	r3, r2
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	727b      	strb	r3, [r7, #9]
        tmp[2] = pState[0] ^ pState[1] ^ phCryptoSym_Sw_Aes_times2[pState[2]] ^ (phCryptoSym_Sw_Aes_times2[pState[3]] ^ pState[3]);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3301      	adds	r3, #1
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4053      	eors	r3, r2
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004a56:	5c5b      	ldrb	r3, [r3, r1]
 8004a58:	4053      	eors	r3, r2
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3303      	adds	r3, #3
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4b23      	ldr	r3, [pc, #140]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004a66:	5c59      	ldrb	r1, [r3, r1]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3303      	adds	r3, #3
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	404b      	eors	r3, r1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	4053      	eors	r3, r2
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times2[pState[0]] ^ pState[0]) ^ pState[1] ^ pState[2] ^ phCryptoSym_Sw_Aes_times2[pState[3]];
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004a80:	5c9a      	ldrb	r2, [r3, r2]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	4053      	eors	r3, r2
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	4053      	eors	r3, r2
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3302      	adds	r3, #2
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	4053      	eors	r3, r2
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3303      	adds	r3, #3
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4b13      	ldr	r3, [pc, #76]	@ (8004af4 <phCryptoSym_Sw_Aes_MixColumns+0x138>)
 8004aa8:	5c5b      	ldrb	r3, [r3, r1]
 8004aaa:	4053      	eors	r3, r2
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	7a3a      	ldrb	r2, [r7, #8]
 8004ab8:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	7a7a      	ldrb	r2, [r7, #9]
 8004ac2:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	7aba      	ldrb	r2, [r7, #10]
 8004acc:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	7afa      	ldrb	r2, [r7, #11]
 8004ad6:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	3301      	adds	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	f67f af72 	bls.w	80049ca <phCryptoSym_Sw_Aes_MixColumns+0xe>
    }
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	080219b8 	.word	0x080219b8

08004af8 <phCryptoSym_Sw_Aes_InvMixColumns>:

void phCryptoSym_Sw_Aes_InvMixColumns(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
    /* Generally, the calculation speed is increased by operating with lookup tables. */
    /* in case of ROM_OPTIMIZATION enabled, the following equation is calculated online: */
    /* timesB = times9 xor times2 */
    /* timesD = timesC xor times1 */
    /* timesE = timesC xor times2 */
    for (i=0;i<4U;i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e0df      	b.n	8004cc6 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ce>
        tmp[0] = phCryptoSym_Sw_Aes_timesE[pState[0]] ^ phCryptoSym_Sw_Aes_timesB[pState[1]] ^ phCryptoSym_Sw_Aes_timesD[pState[2]] ^ phCryptoSym_Sw_Aes_times9[pState[3]];
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_timesE[pState[1]] ^ phCryptoSym_Sw_Aes_timesB[pState[2]] ^ phCryptoSym_Sw_Aes_timesD[pState[3]];
        tmp[2] = phCryptoSym_Sw_Aes_timesD[pState[0]] ^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_timesE[pState[2]] ^ phCryptoSym_Sw_Aes_timesB[pState[3]];
        tmp[3] = phCryptoSym_Sw_Aes_timesB[pState[0]] ^ phCryptoSym_Sw_Aes_timesD[pState[1]] ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_timesE[pState[3]];
#else
        tmp[0] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_times9[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ pState[2]) ^ phCryptoSym_Sw_Aes_times9[pState[3]];
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b73      	ldr	r3, [pc, #460]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004b0e:	5c9a      	ldrb	r2, [r3, r2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	4b72      	ldr	r3, [pc, #456]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004b18:	5c5b      	ldrb	r3, [r3, r1]
 8004b1a:	4053      	eors	r3, r2
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3301      	adds	r3, #1
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004b28:	5c59      	ldrb	r1, [r3, r1]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	4b6b      	ldr	r3, [pc, #428]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004b34:	5c1b      	ldrb	r3, [r3, r0]
 8004b36:	404b      	eors	r3, r1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	4053      	eors	r3, r2
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3302      	adds	r3, #2
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	4b65      	ldr	r3, [pc, #404]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004b48:	5c59      	ldrb	r1, [r3, r1]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	404b      	eors	r3, r1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4053      	eors	r3, r2
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3303      	adds	r3, #3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4b60      	ldr	r3, [pc, #384]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004b62:	5c5b      	ldrb	r3, [r3, r1]
 8004b64:	4053      	eors	r3, r2
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	723b      	strb	r3, [r7, #8]
        tmp[1] = phCryptoSym_Sw_Aes_times9[pState[0]] ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ phCryptoSym_Sw_Aes_times2[pState[1]]) ^ (phCryptoSym_Sw_Aes_times9[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ pState[3]);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b5c      	ldr	r3, [pc, #368]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004b72:	5c9a      	ldrb	r2, [r3, r2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3301      	adds	r3, #1
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4b57      	ldr	r3, [pc, #348]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004b7e:	5c59      	ldrb	r1, [r3, r1]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	4b55      	ldr	r3, [pc, #340]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004b8a:	5c1b      	ldrb	r3, [r3, r0]
 8004b8c:	404b      	eors	r3, r1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	4053      	eors	r3, r2
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3302      	adds	r3, #2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4b51      	ldr	r3, [pc, #324]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004b9e:	5c59      	ldrb	r1, [r3, r1]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004baa:	5c1b      	ldrb	r3, [r3, r0]
 8004bac:	404b      	eors	r3, r1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4053      	eors	r3, r2
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3303      	adds	r3, #3
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004bbe:	5c59      	ldrb	r1, [r3, r1]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	404b      	eors	r3, r1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	4053      	eors	r3, r2
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	727b      	strb	r3, [r7, #9]
        tmp[2] = (phCryptoSym_Sw_Aes_timesC[pState[0]] ^ pState[0])^ phCryptoSym_Sw_Aes_times9[pState[1]] ^ (phCryptoSym_Sw_Aes_timesC[pState[2]] ^ phCryptoSym_Sw_Aes_times2[pState[2]]) ^ (phCryptoSym_Sw_Aes_times9[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4b41      	ldr	r3, [pc, #260]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004bd8:	5c9a      	ldrb	r2, [r3, r2]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	4053      	eors	r3, r2
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3301      	adds	r3, #1
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004bec:	5c5b      	ldrb	r3, [r3, r1]
 8004bee:	4053      	eors	r3, r2
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4b38      	ldr	r3, [pc, #224]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004bfc:	5c59      	ldrb	r1, [r3, r1]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3302      	adds	r3, #2
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004c08:	5c1b      	ldrb	r3, [r3, r0]
 8004c0a:	404b      	eors	r3, r1
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	4053      	eors	r3, r2
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3303      	adds	r3, #3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004c1c:	5c59      	ldrb	r1, [r3, r1]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3303      	adds	r3, #3
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004c28:	5c1b      	ldrb	r3, [r3, r0]
 8004c2a:	404b      	eors	r3, r1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	4053      	eors	r3, r2
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	72bb      	strb	r3, [r7, #10]
        tmp[3] = (phCryptoSym_Sw_Aes_times9[pState[0]] ^ phCryptoSym_Sw_Aes_times2[pState[0]]) ^ (phCryptoSym_Sw_Aes_timesC[pState[1]] ^ pState[1]) ^ phCryptoSym_Sw_Aes_times9[pState[2]] ^ (phCryptoSym_Sw_Aes_timesC[pState[3]] ^ phCryptoSym_Sw_Aes_times2[pState[3]]);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004c3c:	5c9a      	ldrb	r2, [r3, r2]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	4b26      	ldr	r3, [pc, #152]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004c46:	5c5b      	ldrb	r3, [r3, r1]
 8004c48:	4053      	eors	r3, r2
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	4619      	mov	r1, r3
 8004c54:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004c56:	5c59      	ldrb	r1, [r3, r1]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	404b      	eors	r3, r1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	4053      	eors	r3, r2
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <phCryptoSym_Sw_Aes_InvMixColumns+0x1ec>)
 8004c70:	5c5b      	ldrb	r3, [r3, r1]
 8004c72:	4053      	eors	r3, r2
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3303      	adds	r3, #3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4b17      	ldr	r3, [pc, #92]	@ (8004cdc <phCryptoSym_Sw_Aes_InvMixColumns+0x1e4>)
 8004c80:	5c59      	ldrb	r1, [r3, r1]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3303      	adds	r3, #3
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <phCryptoSym_Sw_Aes_InvMixColumns+0x1e8>)
 8004c8c:	5c1b      	ldrb	r3, [r3, r0]
 8004c8e:	404b      	eors	r3, r1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4053      	eors	r3, r2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	72fb      	strb	r3, [r7, #11]
#endif /* PH_CRYPTOSYM_SW_ROM_OPTIMIZATION */
        *pState++ = tmp[0];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	7a3a      	ldrb	r2, [r7, #8]
 8004ca0:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[1];
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	7a7a      	ldrb	r2, [r7, #9]
 8004caa:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[2];
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	7aba      	ldrb	r2, [r7, #10]
 8004cb4:	701a      	strb	r2, [r3, #0]
        *pState++ = tmp[3];
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	7afa      	ldrb	r2, [r7, #11]
 8004cbe:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	f67f af1c 	bls.w	8004b06 <phCryptoSym_Sw_Aes_InvMixColumns+0xe>
    }
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	08021bb8 	.word	0x08021bb8
 8004ce0:	080219b8 	.word	0x080219b8
 8004ce4:	08021ab8 	.word	0x08021ab8

08004ce8 <phCryptoSym_Sw_Aes_AddRoundKey>:
#ifdef PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void phCryptoSym_Sw_Aes_AddRoundKey(uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState, uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKey, uint8_t * pNkCurrent, uint8_t bNk, uint8_t bMode)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	@ 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77fb      	strb	r3, [r7, #31]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bOffset;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bModulus;

    /* NOTE: As pKey is an array of size bNk, the byte of the last round w[i-nk]is always in the same position as the byte currently operated on. */
    /* For each call of the function, 16 bytes of round key need to be calculated */
    for (i=0;i<4U;i++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e197      	b.n	8005030 <phCryptoSym_Sw_Aes_AddRoundKey+0x348>
    {
        /* Find out, if we are in a "first" column, a "special" column or a "standard" column. */
        bModulus = *pNkCurrent % bNk;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d0a:	fb01 f202 	mul.w	r2, r1, r2
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	75fb      	strb	r3, [r7, #23]

        /* Generally the pCurKeyPtr can be calculated directly out of the bModulus */
        pCurKeyPtr = &pKey[bModulus << 2U];
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4413      	add	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]

        /* In case of decryption, xoring has to be done upfront. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8004d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d20:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d22:	d150      	bne.n	8004dc6 <phCryptoSym_Sw_Aes_AddRoundKey+0xde>
        {
            pState[((3U-i)*4U)] ^= *(pCurKeyPtr + 0U);
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
 8004d26:	f1c3 0303 	rsb	r3, r3, #3
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	7819      	ldrb	r1, [r3, #0]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	f1c3 0303 	rsb	r3, r3, #3
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	4403      	add	r3, r0
 8004d42:	404a      	eors	r2, r1
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+1U] ^= *(pCurKeyPtr + 1U);
 8004d48:	7ffb      	ldrb	r3, [r7, #31]
 8004d4a:	f1c3 0303 	rsb	r3, r3, #3
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	3301      	adds	r3, #1
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	7819      	ldrb	r1, [r3, #0]
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	7ffb      	ldrb	r3, [r7, #31]
 8004d60:	f1c3 0303 	rsb	r3, r3, #3
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3301      	adds	r3, #1
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	4403      	add	r3, r0
 8004d6c:	404a      	eors	r2, r1
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+2U] ^= *(pCurKeyPtr + 2U);
 8004d72:	7ffb      	ldrb	r3, [r7, #31]
 8004d74:	f1c3 0303 	rsb	r3, r3, #3
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	7819      	ldrb	r1, [r3, #0]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3302      	adds	r3, #2
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	7ffb      	ldrb	r3, [r7, #31]
 8004d8a:	f1c3 0303 	rsb	r3, r3, #3
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3302      	adds	r3, #2
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	4403      	add	r3, r0
 8004d96:	404a      	eors	r2, r1
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
            pState[((3U-i)*4U)+3U] ^= *(pCurKeyPtr + 3U);
 8004d9c:	7ffb      	ldrb	r3, [r7, #31]
 8004d9e:	f1c3 0303 	rsb	r3, r3, #3
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	3303      	adds	r3, #3
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	7819      	ldrb	r1, [r3, #0]
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	3303      	adds	r3, #3
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
 8004db4:	f1c3 0303 	rsb	r3, r3, #3
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3303      	adds	r3, #3
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	4403      	add	r3, r0
 8004dc0:	404a      	eors	r2, r1
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
        }

        if (*pNkCurrent < bNk)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d903      	bls.n	8004dd8 <phCryptoSym_Sw_Aes_AddRoundKey+0xf0>
        {
            /* w[i] = word(key[4U*i], key[4U*i+1U], key[4U*i+2U], key[4U*i+3U]) */
            /* Just increment the current key pointer, as the key is already stored internally...*/
            pCurKeyPtr += 4U;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e0d1      	b.n	8004f7c <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
        }else
        {
            if ( bModulus == 0U)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d153      	bne.n	8004e86 <phCryptoSym_Sw_Aes_AddRoundKey+0x19e>
            {
                /* First find the offset to w[i-1] */
                bOffset = (uint8_t)(((uint8_t)((uint8_t)bNk-1U)<<2U) + 1U);
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	3301      	adds	r3, #1
 8004dea:	75bb      	strb	r3, [r7, #22]
                /* now calculate the following calculation: */
                /* w[i] = w[i-Nk] xor SubWord(RotWord(w[i-1])) xor Rcon[i/Nk] */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)] ^ phCryptoSym_Sw_Aes_Rcon[(*pNkCurrent)/bNk - 1U];
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	781a      	ldrb	r2, [r3, #0]
 8004df0:	7dbb      	ldrb	r3, [r7, #22]
 8004df2:	69b9      	ldr	r1, [r7, #24]
 8004df4:	440b      	add	r3, r1
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4b93      	ldr	r3, [pc, #588]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004dfc:	5c59      	ldrb	r1, [r3, r1]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7818      	ldrb	r0, [r3, #0]
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	488f      	ldr	r0, [pc, #572]	@ (800504c <phCryptoSym_Sw_Aes_AddRoundKey+0x364>)
 8004e0e:	5cc3      	ldrb	r3, [r0, r3]
 8004e10:	404b      	eors	r3, r1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	4053      	eors	r3, r2
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	7dbb      	ldrb	r3, [r7, #22]
 8004e28:	69b9      	ldr	r1, [r7, #24]
 8004e2a:	440b      	add	r3, r1
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4b85      	ldr	r3, [pc, #532]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004e32:	5c5b      	ldrb	r3, [r3, r1]
 8004e34:	4053      	eors	r3, r2
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset)];
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	7dbb      	ldrb	r3, [r7, #22]
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	440b      	add	r3, r1
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4b7d      	ldr	r3, [pc, #500]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004e52:	5c5b      	ldrb	r3, [r3, r1]
 8004e54:	4053      	eors	r3, r2
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr+bOffset - 4U)];
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	7dbb      	ldrb	r3, [r7, #22]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4b75      	ldr	r3, [pc, #468]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004e74:	5c5b      	ldrb	r3, [r3, r1]
 8004e76:	4053      	eors	r3, r2
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	e07a      	b.n	8004f7c <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else if ((bNk == 8U) && ((*pNkCurrent % bNk) == 4U))
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d147      	bne.n	8004f1c <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e96:	fb01 f202 	mul.w	r2, r1, r2
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d13c      	bne.n	8004f1c <phCryptoSym_Sw_Aes_AddRoundKey+0x234>
            {
                /* w[i] = w[i-Nk] xor SubWord(w[i-1]) */
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	3b04      	subs	r3, #4
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4b66      	ldr	r3, [pc, #408]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004eb0:	5c5b      	ldrb	r3, [r3, r1]
 8004eb2:	4053      	eors	r3, r2
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	781a      	ldrb	r2, [r3, #0]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	3b04      	subs	r3, #4
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004ece:	5c5b      	ldrb	r3, [r3, r1]
 8004ed0:	4053      	eors	r3, r2
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	3301      	adds	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3b04      	subs	r3, #4
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4b57      	ldr	r3, [pc, #348]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004eec:	5c5b      	ldrb	r3, [r3, r1]
 8004eee:	4053      	eors	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= phCryptoSym_Sw_Aes_sboxTable[*(pCurKeyPtr-4U)];
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	3b04      	subs	r3, #4
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	4b4f      	ldr	r3, [pc, #316]	@ (8005048 <phCryptoSym_Sw_Aes_AddRoundKey+0x360>)
 8004f0a:	5c5b      	ldrb	r3, [r3, r1]
 8004f0c:	4053      	eors	r3, r2
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	e02f      	b.n	8004f7c <phCryptoSym_Sw_Aes_AddRoundKey+0x294>
            }else
            {
                /* w[i] = w[i-Nk] xor w[i-1] */
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	781a      	ldrb	r2, [r3, #0]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3b04      	subs	r3, #4
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	4053      	eors	r3, r2
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	3b04      	subs	r3, #4
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	4053      	eors	r3, r2
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3b04      	subs	r3, #4
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	4053      	eors	r3, r2
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	3301      	adds	r3, #1
 8004f62:	61bb      	str	r3, [r7, #24]
                *pCurKeyPtr ^= *(pCurKeyPtr-4U);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	781a      	ldrb	r2, [r3, #0]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	4053      	eors	r3, r2
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	701a      	strb	r2, [r3, #0]
                pCurKeyPtr++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* In case of encryption and key initialization for decryption, we have to increment, else we have to decrement NkCurrent */
        if (bMode != PH_CRYPTOSYM_KEYSCHEDULE_DECRYPTION)
 8004f7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f80:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f82:	d006      	beq.n	8004f92 <phCryptoSym_Sw_Aes_AddRoundKey+0x2aa>
        {
            (*pNkCurrent)++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e005      	b.n	8004f9e <phCryptoSym_Sw_Aes_AddRoundKey+0x2b6>
        }else
        {
            (*pNkCurrent)--;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	701a      	strb	r2, [r3, #0]
        }

        /* In case of encryption, xoring has to be done at the end. */
        if (bMode == PH_CRYPTOSYM_KEYSCHEDULE_ENCRYPTION)
 8004f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fa2:	2b0f      	cmp	r3, #15
 8004fa4:	d141      	bne.n	800502a <phCryptoSym_Sw_Aes_AddRoundKey+0x342>
        {
            pState[(i*4U)] ^= *(pCurKeyPtr - 4U);
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	7819      	ldrb	r1, [r3, #0]
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	3b04      	subs	r3, #4
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	7ffb      	ldrb	r3, [r7, #31]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	4403      	add	r3, r0
 8004fbe:	404a      	eors	r2, r1
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+1U] ^= *(pCurKeyPtr - 3U);
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	3301      	adds	r3, #1
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	7819      	ldrb	r1, [r3, #0]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	3b03      	subs	r3, #3
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	3301      	adds	r3, #1
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	4403      	add	r3, r0
 8004fe0:	404a      	eors	r2, r1
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+2U] ^= *(pCurKeyPtr - 2U);
 8004fe6:	7ffb      	ldrb	r3, [r7, #31]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	3302      	adds	r3, #2
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	7819      	ldrb	r1, [r3, #0]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	3b02      	subs	r3, #2
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	7ffb      	ldrb	r3, [r7, #31]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	4403      	add	r3, r0
 8005002:	404a      	eors	r2, r1
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
            pState[(i*4U)+3U] ^= *(pCurKeyPtr - 1U);
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	3303      	adds	r3, #3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	7819      	ldrb	r1, [r3, #0]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	3b01      	subs	r3, #1
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	7ffb      	ldrb	r3, [r7, #31]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	3303      	adds	r3, #3
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	4403      	add	r3, r0
 8005024:	404a      	eors	r2, r1
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
    for (i=0;i<4U;i++)
 800502a:	7ffb      	ldrb	r3, [r7, #31]
 800502c:	3301      	adds	r3, #1
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	7ffb      	ldrb	r3, [r7, #31]
 8005032:	2b03      	cmp	r3, #3
 8005034:	f67f ae64 	bls.w	8004d00 <phCryptoSym_Sw_Aes_AddRoundKey+0x18>
        }
    }
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3724      	adds	r7, #36	@ 0x24
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	080217b8 	.word	0x080217b8
 800504c:	08021cb8 	.word	0x08021cb8

08005050 <phCryptoSym_Sw_Des_KeyInit>:
phStatus_t  phCryptoSym_Sw_Des_KeyInit(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       const uint8_t * pKey,
                                       uint8_t bNumKeys
                                       )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	71fb      	strb	r3, [r7, #7]
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bTmpKey[PH_CRYPTOSYM_DES_KEY_SIZE];
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */

    /* In case of online key expansion we only calculate P1 in this step*/
    while(0u != bNumKeys--)
 800505e:	e00b      	b.n	8005078 <phCryptoSym_Sw_Des_KeyInit+0x28>
        /* take the key, starting with the last one and write the result to the internal keybuffer. */
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], bTmpKey);
        (void)memcpy(&pDataParams->pKey[bNumKeys << 3U], bTmpKey, PH_CRYPTOSYM_DES_KEY_SIZE);
#else
        phCryptoSym_Sw_Des_PC1_Permutation(&pKey[bNumKeys << 3U], &pDataParams->pKey[bNumKeys << 3U]);
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	18d0      	adds	r0, r2, r3
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	3308      	adds	r3, #8
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	4619      	mov	r1, r3
 8005074:	f000 f9f0 	bl	8005458 <phCryptoSym_Sw_Des_PC1_Permutation>
    while(0u != bNumKeys--)
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	71fa      	strb	r2, [r7, #7]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ee      	bne.n	8005060 <phCryptoSym_Sw_Des_KeyInit+0x10>
    /* Clear TmpKey */
    (void)memset(bTmpKey, 0x00, (size_t)sizeof(bTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    return PH_ERR_SUCCESS;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <phCryptoSym_Sw_Des_EncryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_EncryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	4613      	mov	r3, r2
 8005098:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	3308      	adds	r3, #8
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmp);
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	4619      	mov	r1, r3
 80050ac:	68b8      	ldr	r0, [r7, #8]
 80050ae:	f000 f887 	bl	80051c0 <phCryptoSym_Sw_Des_Permutate_IP>

    for (i = 0; i < 16U; i++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e021      	b.n	80050fc <phCryptoSym_Sw_Des_EncryptBlock+0x70>
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_RotateLeft28(pKey, key_rotation[i]);
 80050b8:	7ffb      	ldrb	r3, [r7, #31]
 80050ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 80050bc:	5cd3      	ldrb	r3, [r2, r3]
 80050be:	4619      	mov	r1, r3
 80050c0:	69b8      	ldr	r0, [r7, #24]
 80050c2:	f000 fd8f 	bl	8005be4 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_RotateLeft28(&pKey[4], key_rotation[i]);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	4915      	ldr	r1, [pc, #84]	@ (8005124 <phCryptoSym_Sw_Des_EncryptBlock+0x98>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f000 fd86 	bl	8005be4 <phCryptoSym_Sw_Des_RotateLeft28>
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3320      	adds	r3, #32
 80050dc:	4619      	mov	r1, r3
 80050de:	69b8      	ldr	r0, [r7, #24]
 80050e0:	f000 fa3f 	bl	8005562 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f103 0220 	add.w	r2, r3, #32
 80050ea:	f107 0310 	add.w	r3, r7, #16
 80050ee:	4611      	mov	r1, r2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fdc2 	bl	8005c7a <phCryptoSym_Sw_Des_ComputeRound>
    for (i = 0; i < 16U; i++)
 80050f6:	7ffb      	ldrb	r3, [r7, #31]
 80050f8:	3301      	adds	r3, #1
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	7ffb      	ldrb	r3, [r7, #31]
 80050fe:	2b0f      	cmp	r3, #15
 8005100:	d9da      	bls.n	80050b8 <phCryptoSym_Sw_Des_EncryptBlock+0x2c>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmp, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }

    phCryptoSym_Sw_Des_Swap(pTmp);
 8005102:	f107 0310 	add.w	r3, r7, #16
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fdf3 	bl	8005cf2 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmp, pBlock);
 800510c:	f107 0310 	add.w	r3, r7, #16
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f8f3 	bl	80052fe <phCryptoSym_Sw_Des_Permutate_IP_Inv>
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    /* Clear TmpKey */
    (void)memset(pTmpKey, 0x00, (size_t)sizeof(pTmpKey));
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    return PH_ERR_SUCCESS;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	08021cc4 	.word	0x08021cc4

08005128 <phCryptoSym_Sw_Des_DecryptBlock>:
phStatus_t  phCryptoSym_Sw_Des_DecryptBlock(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock,
    uint8_t bKeyNumber
    )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	71fb      	strb	r3, [r7, #7]
#else
#ifdef PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE
    (void)memcpy(pTmpKey, &pDataParams->pKey[(bKeyNumber << 3U)], PH_CRYPTOSYM_DES_KEY_SIZE);
    pKey = pTmpKey;
#else
    pKey = &pDataParams->pKey[(bKeyNumber << 3U)];
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	3308      	adds	r3, #8
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
#endif /* PH_CRYPTOSYM_SW_USE_8051_DATA_STORAGE */
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */

    phCryptoSym_Sw_Des_Permutate_IP(pBlock, pTmpBlock);
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	4619      	mov	r1, r3
 8005148:	68b8      	ldr	r0, [r7, #8]
 800514a:	f000 f839 	bl	80051c0 <phCryptoSym_Sw_Des_Permutate_IP>

    i = 15;
 800514e:	230f      	movs	r3, #15
 8005150:	77fb      	strb	r3, [r7, #31]
    do
    {
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
        phCryptoSym_Sw_Des_PC2_Permutation(pKey , &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3320      	adds	r3, #32
 8005156:	4619      	mov	r1, r3
 8005158:	69b8      	ldr	r0, [r7, #24]
 800515a:	f000 fa02 	bl	8005562 <phCryptoSym_Sw_Des_PC2_Permutation>
        phCryptoSym_Sw_Des_RotateRight28(pKey, key_rotation[i]);
 800515e:	7ffb      	ldrb	r3, [r7, #31]
 8005160:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8005162:	5cd3      	ldrb	r3, [r2, r3]
 8005164:	4619      	mov	r1, r3
 8005166:	69b8      	ldr	r0, [r7, #24]
 8005168:	f000 fce5 	bl	8005b36 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_RotateRight28(&pKey[4], key_rotation[i]);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1d1a      	adds	r2, r3, #4
 8005170:	7ffb      	ldrb	r3, [r7, #31]
 8005172:	4912      	ldr	r1, [pc, #72]	@ (80051bc <phCryptoSym_Sw_Des_DecryptBlock+0x94>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 fcdc 	bl	8005b36 <phCryptoSym_Sw_Des_RotateRight28>
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pDataParams->pKey[PH_CRYPTOSYM_3K3DES_KEY_SIZE]);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f103 0220 	add.w	r2, r3, #32
 8005184:	f107 0310 	add.w	r3, r7, #16
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fd75 	bl	8005c7a <phCryptoSym_Sw_Des_ComputeRound>
#else
        phCryptoSym_Sw_Des_ComputeRound(pTmpBlock, &pKey[i << 3U]);
#endif /* PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING */
    }while(i-- > 0U);
 8005190:	7ffb      	ldrb	r3, [r7, #31]
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	77fa      	strb	r2, [r7, #31]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1db      	bne.n	8005152 <phCryptoSym_Sw_Des_DecryptBlock+0x2a>

    phCryptoSym_Sw_Des_Swap(pTmpBlock);
 800519a:	f107 0310 	add.w	r3, r7, #16
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fda7 	bl	8005cf2 <phCryptoSym_Sw_Des_Swap>

    phCryptoSym_Sw_Des_Permutate_IP_Inv(pTmpBlock, pBlock);
 80051a4:	f107 0310 	add.w	r3, r7, #16
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f8a7 	bl	80052fe <phCryptoSym_Sw_Des_Permutate_IP_Inv>

    return PH_ERR_SUCCESS;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	08021cc4 	.word	0x08021cc4

080051c0 <phCryptoSym_Sw_Des_Permutate_IP>:

void  phCryptoSym_Sw_Des_Permutate_IP(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
                                      )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
    /* round 3: pStateOut[7]: 63 55 47 39 31 23 15 7 */
    /* round 3: pStateOut[3]: 64 56 48 40 32 24 16 8 */

    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM* outTmp = pStateOut;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	60bb      	str	r3, [r7, #8]

    /* Outer loop to iterate over output byte pairs 4,0, 5,1, 6,2, 7,2 */
    for (i=0;i<4U;i++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	e089      	b.n	80052e8 <phCryptoSym_Sw_Des_Permutate_IP+0x128>
    {
        /* Set output bytes to 0x00 to be able to OR in the loop */
        outTmp[0]=0x00;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
        outTmp[4]=0x00;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3304      	adds	r3, #4
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]

        /* Inner loop to iterate over input bytes */
        for (j=0;j<7U;j++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	73bb      	strb	r3, [r7, #14]
 80051e6:	e046      	b.n	8005276 <phCryptoSym_Sw_Des_Permutate_IP+0xb6>
        {
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[4] |= (uint8_t)(pStateIn[j] & 0x80U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	3304      	adds	r3, #4
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b25a      	sxtb	r2, r3
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	440b      	add	r3, r1
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80051fe:	b25b      	sxtb	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b25a      	sxtb	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	3304      	adds	r3, #4
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
            outTmp[4] >>= 1U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	3304      	adds	r3, #4
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3304      	adds	r3, #4
 8005216:	0852      	lsrs	r2, r2, #1
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 800521c:	7bbb      	ldrb	r3, [r7, #14]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	781a      	ldrb	r2, [r3, #0]
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	440b      	add	r3, r1
 800522a:	0052      	lsls	r2, r2, #1
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
            /* Take MSBit of input, shift output to right to make space for next input bit
            and input to left to get next bit at the bit position 7.*/
            outTmp[0] |= (uint8_t)(pStateIn[j] & 0x80U);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b25a      	sxtb	r2, r3
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	440b      	add	r3, r1
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b25b      	sxtb	r3, r3
 8005240:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005244:	b25b      	sxtb	r3, r3
 8005246:	4313      	orrs	r3, r2
 8005248:	b25b      	sxtb	r3, r3
 800524a:	b2da      	uxtb	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	701a      	strb	r2, [r3, #0]
            outTmp[0] >>= 1U;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	701a      	strb	r2, [r3, #0]
            pStateIn[j] <<= 1U;
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	440b      	add	r3, r1
 800526a:	0052      	lsls	r2, r2, #1
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
        for (j=0;j<7U;j++)
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	3301      	adds	r3, #1
 8005274:	73bb      	strb	r3, [r7, #14]
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d9b5      	bls.n	80051e8 <phCryptoSym_Sw_Des_Permutate_IP+0x28>
        }
        /* Take MSBit of input, do not shift output, as the byte is already full.
        and input to left to get next bit at the bit position 7.*/
        outTmp[4] |= (uint8_t)(pStateIn[7] & 0x80U);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	3304      	adds	r3, #4
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b25a      	sxtb	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3307      	adds	r3, #7
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b25b      	sxtb	r3, r3
 800528c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005290:	b25b      	sxtb	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b25a      	sxtb	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	3304      	adds	r3, #4
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3307      	adds	r3, #7
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3307      	adds	r3, #7
 80052a8:	0052      	lsls	r2, r2, #1
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
        outTmp[0] |= (uint8_t)(pStateIn[7] & 0x80U);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b25a      	sxtb	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3307      	adds	r3, #7
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b25b      	sxtb	r3, r3
 80052bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b25b      	sxtb	r3, r3
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	701a      	strb	r2, [r3, #0]
        pStateIn[7] <<= 1U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3307      	adds	r3, #7
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3307      	adds	r3, #7
 80052d6:	0052      	lsls	r2, r2, #1
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
        /* Increment base pointer to get next output byte pair. */
        outTmp++;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	3301      	adds	r3, #1
 80052e0:	60bb      	str	r3, [r7, #8]
    for (i=0;i<4U;i++)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	3301      	adds	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	f67f af72 	bls.w	80051d4 <phCryptoSym_Sw_Des_Permutate_IP+0x14>
    }
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <phCryptoSym_Sw_Des_Permutate_IP_Inv>:

void  phCryptoSym_Sw_Des_Permutate_IP_Inv(
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pStateOut
    )
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * inTmp;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;

    /* Outer loop to iterate over all output bytes */
    for (i=0;i<8U;i++)
 8005308:	2300      	movs	r3, #0
 800530a:	72fb      	strb	r3, [r7, #11]
 800530c:	e099      	b.n	8005442 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x144>
    {
        pStateOut[i]=0x00;
 800530e:	7afb      	ldrb	r3, [r7, #11]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	4413      	add	r3, r2
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
        inTmp = pStateIn;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]
        /* Inner loop to iterate over input byte pairs 4,0, 5,1, 6,2, */
        for (j=0;j<3U;j++)
 800531c:	2300      	movs	r3, #0
 800531e:	72bb      	strb	r3, [r7, #10]
 8005320:	e04c      	b.n	80053bc <phCryptoSym_Sw_Des_Permutate_IP_Inv+0xbe>
        {
            /* Take LSBit of input bytes base[4] and base[0], shift output to left
            to make space for next input bit and input to rigth to get next bit at
            the bit position 1.*/
            pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	4413      	add	r3, r2
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b25a      	sxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3304      	adds	r3, #4
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b25b      	sxtb	r3, r3
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	b25b      	sxtb	r3, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	b259      	sxtb	r1, r3
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	4413      	add	r3, r2
 8005344:	b2ca      	uxtb	r2, r1
 8005346:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4413      	add	r3, r2
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	7afb      	ldrb	r3, [r7, #11]
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	440b      	add	r3, r1
 8005356:	0052      	lsls	r2, r2, #1
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
            pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	4413      	add	r3, r2
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	b25a      	sxtb	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b25b      	sxtb	r3, r3
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	b25b      	sxtb	r3, r3
 8005372:	4313      	orrs	r3, r2
 8005374:	b259      	sxtb	r1, r3
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4413      	add	r3, r2
 800537c:	b2ca      	uxtb	r2, r1
 800537e:	701a      	strb	r2, [r3, #0]
            pStateOut[i] <<= 1U;
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4413      	add	r3, r2
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	7afb      	ldrb	r3, [r7, #11]
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	440b      	add	r3, r1
 800538e:	0052      	lsls	r2, r2, #1
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
            inTmp[0] >>= 1U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	701a      	strb	r2, [r3, #0]
            inTmp[4] >>= 1U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3304      	adds	r3, #4
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3304      	adds	r3, #4
 80053aa:	0852      	lsrs	r2, r2, #1
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
            inTmp++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
        for (j=0;j<3U;j++)
 80053b6:	7abb      	ldrb	r3, [r7, #10]
 80053b8:	3301      	adds	r3, #1
 80053ba:	72bb      	strb	r3, [r7, #10]
 80053bc:	7abb      	ldrb	r3, [r7, #10]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d9af      	bls.n	8005322 <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x24>
        }
        /* Use input byte pair 7,2 without shifting the output byte in the final iteration
        as it is already complete */
        pStateOut[i] |= (uint8_t)(inTmp[4] & 0x01U);
 80053c2:	7afb      	ldrb	r3, [r7, #11]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b25a      	sxtb	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3304      	adds	r3, #4
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	4313      	orrs	r3, r2
 80053dc:	b259      	sxtb	r1, r3
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	b2ca      	uxtb	r2, r1
 80053e6:	701a      	strb	r2, [r3, #0]
        pStateOut[i] <<= 1U;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	781a      	ldrb	r2, [r3, #0]
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	440b      	add	r3, r1
 80053f6:	0052      	lsls	r2, r2, #1
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
        pStateOut[i] |= (uint8_t)(inTmp[0] & 0x01U);
 80053fc:	7afb      	ldrb	r3, [r7, #11]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4413      	add	r3, r2
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b25a      	sxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	b25b      	sxtb	r3, r3
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	b25b      	sxtb	r3, r3
 8005412:	4313      	orrs	r3, r2
 8005414:	b259      	sxtb	r1, r3
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	4413      	add	r3, r2
 800541c:	b2ca      	uxtb	r2, r1
 800541e:	701a      	strb	r2, [r3, #0]
        inTmp[0] >>= 1U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	701a      	strb	r2, [r3, #0]
        inTmp[4] >>= 1U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3304      	adds	r3, #4
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3304      	adds	r3, #4
 8005436:	0852      	lsrs	r2, r2, #1
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<8U;i++)
 800543c:	7afb      	ldrb	r3, [r7, #11]
 800543e:	3301      	adds	r3, #1
 8005440:	72fb      	strb	r3, [r7, #11]
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	2b07      	cmp	r3, #7
 8005446:	f67f af62 	bls.w	800530e <phCryptoSym_Sw_Des_Permutate_IP_Inv+0x10>
    }
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <phCryptoSym_Sw_Des_PC1_Permutation>:

void  phCryptoSym_Sw_Des_PC1_Permutation(
    const uint8_t * pKeyIn,
    uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyOut
    )
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM j;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM pKeyInTmp[PH_CRYPTOSYM_DES_KEY_SIZE];

    /* Recopy the key */
    (void)memcpy(pKeyInTmp, pKeyIn, PH_CRYPTOSYM_DES_KEY_SIZE);
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	f107 030c 	add.w	r3, r7, #12
 8005468:	6810      	ldr	r0, [r2, #0]
 800546a:	6851      	ldr	r1, [r2, #4]
 800546c:	c303      	stmia	r3!, {r0, r1}
    /* round 2: 3, 11, 19, 27, 35, 43, 51, 59 */
    /* round 3: 4, 12, 20, 28, 36, 44, 52, 60 */
    /* round 4: 5, 13, 21, 29, 37, 45, 53, 61 */
    /* round 5: 6, 14, 22, 30, 38, 46, 54, 62 */
    /* round 6: 7, 15, 23, 31, 39, 47, 55, 63 */
    for (i=0;i<7U;i++)
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]
 8005472:	e050      	b.n	8005516 <phCryptoSym_Sw_Des_PC1_Permutation+0xbe>
    {
        pKeyOut[i] = 0x00;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	4413      	add	r3, r2
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j<7U; j++)
 800547e:	2300      	movs	r3, #0
 8005480:	75bb      	strb	r3, [r7, #22]
 8005482:	e02d      	b.n	80054e0 <phCryptoSym_Sw_Des_PC1_Permutation+0x88>
        {
            pKeyOut[i] |= (uint8_t)(pKeyInTmp[j] & 0x80U);
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b25a      	sxtb	r2, r3
 800548e:	7dbb      	ldrb	r3, [r7, #22]
 8005490:	3318      	adds	r3, #24
 8005492:	443b      	add	r3, r7
 8005494:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b259      	sxtb	r1, r3
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	b2ca      	uxtb	r2, r1
 80054ac:	701a      	strb	r2, [r3, #0]
            pKeyOut[i] >>= 1U;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	4413      	add	r3, r2
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	440b      	add	r3, r1
 80054bc:	0852      	lsrs	r2, r2, #1
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
            pKeyInTmp[j] <<= 1U;
 80054c2:	7dbb      	ldrb	r3, [r7, #22]
 80054c4:	3318      	adds	r3, #24
 80054c6:	443b      	add	r3, r7
 80054c8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80054cc:	7dbb      	ldrb	r3, [r7, #22]
 80054ce:	0052      	lsls	r2, r2, #1
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	3318      	adds	r3, #24
 80054d4:	443b      	add	r3, r7
 80054d6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (j = 0; j<7U; j++)
 80054da:	7dbb      	ldrb	r3, [r7, #22]
 80054dc:	3301      	adds	r3, #1
 80054de:	75bb      	strb	r3, [r7, #22]
 80054e0:	7dbb      	ldrb	r3, [r7, #22]
 80054e2:	2b06      	cmp	r3, #6
 80054e4:	d9ce      	bls.n	8005484 <phCryptoSym_Sw_Des_PC1_Permutation+0x2c>
        }
        pKeyOut[i] |= (uint8_t)(pKeyInTmp[7] & 0x80U);
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4413      	add	r3, r2
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	b25a      	sxtb	r2, r3
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b259      	sxtb	r1, r3
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	4413      	add	r3, r2
 8005504:	b2ca      	uxtb	r2, r1
 8005506:	701a      	strb	r2, [r3, #0]
        pKeyInTmp[7] <<= 1U;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	74fb      	strb	r3, [r7, #19]
    for (i=0;i<7U;i++)
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	3301      	adds	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
 8005516:	7dfb      	ldrb	r3, [r7, #23]
 8005518:	2b06      	cmp	r3, #6
 800551a:	d9ab      	bls.n	8005474 <phCryptoSym_Sw_Des_PC1_Permutation+0x1c>
    }

    /* Now the output bytes 3 and 7 are calculated by taking the correct subsets of the pKeyOut[3] byte */
    pKeyOut[7] = pKeyOut[3] <<4U;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3303      	adds	r3, #3
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	3307      	adds	r3, #7
 8005526:	0112      	lsls	r2, r2, #4
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] &= 0xF0U;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	3303      	adds	r3, #3
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	3303      	adds	r3, #3
 8005536:	f022 020f 	bic.w	r2, r2, #15
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Also byte 4 and 6 need to change the position. */
    i = pKeyOut[6];
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	799b      	ldrb	r3, [r3, #6]
 8005542:	75fb      	strb	r3, [r7, #23]
    pKeyOut[6] = pKeyOut[4];
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	3306      	adds	r3, #6
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	7912      	ldrb	r2, [r2, #4]
 800554c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] = i;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	3304      	adds	r3, #4
 8005552:	7dfa      	ldrb	r2, [r7, #23]
 8005554:	701a      	strb	r2, [r3, #0]

}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <phCryptoSym_Sw_Des_PC2_Permutation>:

void phCryptoSym_Sw_Des_PC2_Permutation(
                                        uint8_t PH_CRYTOSYM_SW_FAST_RAM * pKeyIn,
                                        uint8_t * pKeyOut
                                        )
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
    /* As the input bit sequence can not be mapped easily to the output bits,
    the implementation simply extracts the required bit out of the input and shifts it
    into the correct position of the output. */

    pKeyOut[0] = (uint8_t)((pKeyIn[1] & 0x04U) << 3U); /* Input bit 14 */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3301      	adds	r3, #1
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	b2da      	uxtb	r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x80U) >> 3U); /* Input bit 17 */
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3302      	adds	r3, #2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	b2db      	uxtb	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	b2da      	uxtb	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[1] & 0x20U) >> 2U); /* Input bit 11 */
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3301      	adds	r3, #1
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[2] & 0x01U) << 2U); /* Input bit 24 */
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b25a      	sxtb	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3302      	adds	r3, #2
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x80U) >> 6U); /* Input bit 1 */
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4313      	orrs	r3, r2
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	701a      	strb	r2, [r3, #0]
    pKeyOut[0] |= (uint8_t)((pKeyIn[0] & 0x08U) >> 3U); /* Input bit 5 */
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	4313      	orrs	r3, r2
 8005608:	b2da      	uxtb	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	701a      	strb	r2, [r3, #0]

    pKeyOut[1] = (uint8_t)((pKeyIn[0] & 0x20U)); /* Input bit 3 */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	f002 0220 	and.w	r2, r2, #32
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[3] & 0x10U)); /* Input bit 28 */
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b25a      	sxtb	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3303      	adds	r3, #3
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b25b      	sxtb	r3, r3
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	b25b      	sxtb	r3, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	b25a      	sxtb	r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x02U) << 2U); /* Input bit 15 */
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b25a      	sxtb	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3301      	adds	r3, #1
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b25b      	sxtb	r3, r3
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	b25b      	sxtb	r3, r3
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	b25b      	sxtb	r3, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	b25a      	sxtb	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[0] & 0x04U)); /* Input bit 6 */
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b25a      	sxtb	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b25b      	sxtb	r3, r3
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	b25b      	sxtb	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b25a      	sxtb	r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[2] & 0x08U) >> 2U); /* Input bit 21 */
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	7819      	ldrb	r1, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3302      	adds	r3, #2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	089b      	lsrs	r3, r3, #2
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	b2da      	uxtb	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	430a      	orrs	r2, r1
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
    pKeyOut[1] |= (uint8_t)((pKeyIn[1] & 0x40U) >> 6U); /* Input bit 10 */
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	7819      	ldrb	r1, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3301      	adds	r3, #1
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	099b      	lsrs	r3, r3, #6
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	3301      	adds	r3, #1
 80056c0:	430a      	orrs	r2, r1
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

    pKeyOut[2] = (uint8_t)((pKeyIn[2] & 0x02U) << 4U); /* Input bit 23 */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3302      	adds	r3, #2
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	3302      	adds	r3, #2
 80056d4:	f002 0220 	and.w	r2, r2, #32
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[2] & 0x20U) >> 1U); /* Input bit 19 */
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	3302      	adds	r3, #2
 80056e0:	7819      	ldrb	r1, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3302      	adds	r3, #2
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	3302      	adds	r3, #2
 80056f6:	430a      	orrs	r2, r1
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[1] & 0x10U) >> 1U); /* Input bit 12 */
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	3302      	adds	r3, #2
 8005700:	7819      	ldrb	r1, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3301      	adds	r3, #1
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	b2da      	uxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	3302      	adds	r3, #2
 8005716:	430a      	orrs	r2, r1
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x10U) >> 2U); /* Input bit 4 */
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	3302      	adds	r3, #2
 8005720:	7819      	ldrb	r1, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	b2da      	uxtb	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	3302      	adds	r3, #2
 8005734:	430a      	orrs	r2, r1
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[3] & 0x40U) >> 5U); /* Input bit 26 */
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	3302      	adds	r3, #2
 800573e:	7819      	ldrb	r1, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3303      	adds	r3, #3
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	b2da      	uxtb	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	3302      	adds	r3, #2
 8005754:	430a      	orrs	r2, r1
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
    pKeyOut[2] |= (uint8_t)((pKeyIn[0] & 0x01U)); /* Input bit 8 */
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	3302      	adds	r3, #2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b25a      	sxtb	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b25b      	sxtb	r3, r3
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	b25b      	sxtb	r3, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	b25a      	sxtb	r2, r3
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	3302      	adds	r3, #2
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

    pKeyOut[3] = (uint8_t)((pKeyIn[1] & 0x01U) << 5U); /* Input bit 16 */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3301      	adds	r3, #1
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	015b      	lsls	r3, r3, #5
 8005782:	b2da      	uxtb	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	3303      	adds	r3, #3
 8005788:	f002 0220 	and.w	r2, r2, #32
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x02U) << 3U); /* Input bit 7 */
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	3303      	adds	r3, #3
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b25a      	sxtb	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b25b      	sxtb	r3, r3
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	4313      	orrs	r3, r2
 80057aa:	b25a      	sxtb	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3303      	adds	r3, #3
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[3] & 0x20U) >> 2U); /* Input bit 27 */
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	3303      	adds	r3, #3
 80057b8:	7819      	ldrb	r1, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3303      	adds	r3, #3
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	3303      	adds	r3, #3
 80057ce:	430a      	orrs	r2, r1
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[2] & 0x10U) >> 2U); /* Input bit 20 */
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	3303      	adds	r3, #3
 80057d8:	7819      	ldrb	r1, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3302      	adds	r3, #2
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	089b      	lsrs	r3, r3, #2
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3303      	adds	r3, #3
 80057ee:	430a      	orrs	r2, r1
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[1] & 0x08U) >> 2U); /* Input bit 13 */
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	3303      	adds	r3, #3
 80057f8:	7819      	ldrb	r1, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3301      	adds	r3, #1
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	089b      	lsrs	r3, r3, #2
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	b2da      	uxtb	r2, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3303      	adds	r3, #3
 800580e:	430a      	orrs	r2, r1
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
    pKeyOut[3] |= (uint8_t)((pKeyIn[0] & 0x40U) >> 6U); /* Input bit 2 */
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	3303      	adds	r3, #3
 8005818:	7819      	ldrb	r1, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	099b      	lsrs	r3, r3, #6
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	3303      	adds	r3, #3
 800582c:	430a      	orrs	r2, r1
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

    pKeyOut[4] = (uint8_t)((pKeyIn[5] & 0x08U) << 2U); /* Input bit 41 */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3305      	adds	r3, #5
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	b2da      	uxtb	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	3304      	adds	r3, #4
 8005840:	f002 0220 	and.w	r2, r2, #32
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x01U) << 4U); /* Input bit 52 */
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	3304      	adds	r3, #4
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b25a      	sxtb	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3306      	adds	r3, #6
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b25b      	sxtb	r3, r3
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	b25b      	sxtb	r3, r3
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	b25b      	sxtb	r3, r3
 8005862:	4313      	orrs	r3, r2
 8005864:	b25a      	sxtb	r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	3304      	adds	r3, #4
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[4] & 0x20U) >> 2U); /* Input bit 31 */
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	3304      	adds	r3, #4
 8005872:	7819      	ldrb	r1, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	089b      	lsrs	r3, r3, #2
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	b2da      	uxtb	r2, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	3304      	adds	r3, #4
 8005888:	430a      	orrs	r2, r1
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[5] & 0x80U) >> 5U); /* Input bit 37 */
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	3304      	adds	r3, #4
 8005892:	7819      	ldrb	r1, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3305      	adds	r3, #5
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3304      	adds	r3, #4
 80058a8:	430a      	orrs	r2, r1
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[6] & 0x20U) >> 4U); /* Input bit 47 */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	3304      	adds	r3, #4
 80058b2:	7819      	ldrb	r1, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3306      	adds	r3, #6
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	430a      	orrs	r2, r1
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
    pKeyOut[4] |= (uint8_t)((pKeyIn[7] & 0x20U) >> 5U); /* Input bit 55 */
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	3304      	adds	r3, #4
 80058d2:	7819      	ldrb	r1, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3307      	adds	r3, #7
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	3304      	adds	r3, #4
 80058e8:	430a      	orrs	r2, r1
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

    pKeyOut[5] = (uint8_t)((pKeyIn[4] & 0x40U) >> 1U); /* Input bit 30 */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	3305      	adds	r3, #5
 80058fc:	f002 0220 	and.w	r2, r2, #32
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[5] & 0x10U)); /* Input bit 40 */
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	3305      	adds	r3, #5
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	b25a      	sxtb	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3305      	adds	r3, #5
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b25b      	sxtb	r3, r3
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	b25b      	sxtb	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b25a      	sxtb	r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3305      	adds	r3, #5
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x02U) << 2U); /* Input bit 51 */
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	3305      	adds	r3, #5
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b25a      	sxtb	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3306      	adds	r3, #6
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b25b      	sxtb	r3, r3
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	b25b      	sxtb	r3, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	b25a      	sxtb	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	3305      	adds	r3, #5
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x80U) >> 5U); /* Input bit 45 */
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	3305      	adds	r3, #5
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3306      	adds	r3, #6
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	b2da      	uxtb	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3305      	adds	r3, #5
 8005966:	430a      	orrs	r2, r1
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[4] & 0x08U) >> 2U); /* Input bit 33 */
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	3305      	adds	r3, #5
 8005970:	7819      	ldrb	r1, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	b2da      	uxtb	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	3305      	adds	r3, #5
 8005986:	430a      	orrs	r2, r1
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
    pKeyOut[5] |= (uint8_t)((pKeyIn[6] & 0x10U) >> 4U); /* Input bit 48 */
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	3305      	adds	r3, #5
 8005990:	7819      	ldrb	r1, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3306      	adds	r3, #6
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	091b      	lsrs	r3, r3, #4
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	3305      	adds	r3, #5
 80059a6:	430a      	orrs	r2, r1
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]

    pKeyOut[6] = (uint8_t)((pKeyIn[5] & 0x01U) << 5U); /* Input bit 44 */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3305      	adds	r3, #5
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	015b      	lsls	r3, r3, #5
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	3306      	adds	r3, #6
 80059ba:	f002 0220 	and.w	r2, r2, #32
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[6] & 0x08U) << 1U); /* Input bit 49 */
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	3306      	adds	r3, #6
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	b25a      	sxtb	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3306      	adds	r3, #6
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	b25b      	sxtb	r3, r3
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	4313      	orrs	r3, r2
 80059de:	b25a      	sxtb	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	3306      	adds	r3, #6
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[5] & 0x20U) >> 2U); /* Input bit 39 */
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	3306      	adds	r3, #6
 80059ec:	7819      	ldrb	r1, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3305      	adds	r3, #5
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	3306      	adds	r3, #6
 8005a02:	430a      	orrs	r2, r1
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x10U) >> 2U); /* Input bit 56 */
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	3306      	adds	r3, #6
 8005a0c:	7819      	ldrb	r1, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3307      	adds	r3, #7
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	3306      	adds	r3, #6
 8005a22:	430a      	orrs	r2, r1
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[4] & 0x04U) >> 1U); /* Input bit 34 */
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	3306      	adds	r3, #6
 8005a2c:	7819      	ldrb	r1, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	3306      	adds	r3, #6
 8005a42:	430a      	orrs	r2, r1
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
    pKeyOut[6] |= (uint8_t)((pKeyIn[7] & 0x80U) >> 7U); /* Input bit 53 */
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	3306      	adds	r3, #6
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3307      	adds	r3, #7
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	09db      	lsrs	r3, r3, #7
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	3306      	adds	r3, #6
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    pKeyOut[7] = (uint8_t)((pKeyIn[6] & 0x40U) >> 1U); /* Input bit 46 */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3306      	adds	r3, #6
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	3307      	adds	r3, #7
 8005a70:	f002 0220 	and.w	r2, r2, #32
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[5] & 0x04U) << 2U); /* Input bit 42 */
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	3307      	adds	r3, #7
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b25a      	sxtb	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3305      	adds	r3, #5
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	4313      	orrs	r3, r2
 8005a94:	b25a      	sxtb	r2, r3
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	3307      	adds	r3, #7
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[6] & 0x04U) << 1U); /* Input bit 50 */
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b25a      	sxtb	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3306      	adds	r3, #6
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	b25b      	sxtb	r3, r3
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	b25a      	sxtb	r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	3307      	adds	r3, #7
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x01U) << 2U); /* Input bit 36 */
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	3307      	adds	r3, #7
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b25a      	sxtb	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b25b      	sxtb	r3, r3
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	b25b      	sxtb	r3, r3
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b25a      	sxtb	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	3307      	adds	r3, #7
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x80U)>> 6U); /* Input bit 29 */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3307      	adds	r3, #7
 8005aee:	7819      	ldrb	r1, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	099b      	lsrs	r3, r3, #6
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	3307      	adds	r3, #7
 8005b04:	430a      	orrs	r2, r1
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    pKeyOut[7] |= (uint8_t)((pKeyIn[4] & 0x10U) >> 4U); /* Input bit 32 */
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	3307      	adds	r3, #7
 8005b0e:	7819      	ldrb	r1, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	3307      	adds	r3, #7
 8005b24:	430a      	orrs	r2, r1
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <phCryptoSym_Sw_Des_RotateRight28>:
#ifdef  PH_CRYPTOSYM_SW_ONLINE_KEYSCHEDULING
void  phCryptoSym_Sw_Des_RotateRight28(
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                       uint8_t bNumPos
                                       )
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != bNumPos)
 8005b4a:	e041      	b.n	8005bd0 <phCryptoSym_Sw_Des_RotateRight28+0x9a>
    {
        /* Start at lowest index because we need to rotate to right */
        for (i=0;i<4U;i++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	e01f      	b.n	8005b92 <phCryptoSym_Sw_Des_RotateRight28+0x5c>
        {
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x01U) != 0U) ? 0x80U : 0x00U);
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	01db      	lsls	r3, r3, #7
 8005b5c:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] >> 1U;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	440b      	add	r3, r1
 8005b6c:	0852      	lsrs	r2, r2, #1
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	7819      	ldrb	r1, [r3, #0]
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4413      	add	r3, r2
 8005b80:	7bba      	ldrb	r2, [r7, #14]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8005b88:	7b7b      	ldrb	r3, [r7, #13]
 8005b8a:	73bb      	strb	r3, [r7, #14]
        for (i=0;i<4U;i++)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d9dc      	bls.n	8005b52 <phCryptoSym_Sw_Des_RotateRight28+0x1c>
        }

        /* In case of overflow of the highest byte, the bit needs to be fed in back at position 0 of the array */
        if (0U != (pArray[3] & 0x08U))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00f      	beq.n	8005bc6 <phCryptoSym_Sw_Des_RotateRight28+0x90>
        {
            pArray[0] |= 0x80U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	701a      	strb	r2, [r3, #0]
            pArray[3] &= 0xF0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3303      	adds	r3, #3
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3303      	adds	r3, #3
 8005bbe:	f022 020f 	bic.w	r2, r2, #15
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	70fb      	strb	r3, [r7, #3]
    while(0U != bNumPos)
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1ba      	bne.n	8005b4c <phCryptoSym_Sw_Des_RotateRight28+0x16>
    }
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <phCryptoSym_Sw_Des_RotateLeft28>:

void  phCryptoSym_Sw_Des_RotateLeft28(
                                      uint8_t PH_CRYTOSYM_SW_FAST_RAM * pArray,
                                      uint8_t bNumPos
                                      )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM i;
    uint8_t bOverflow = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	73bb      	strb	r3, [r7, #14]
    uint8_t bOverflowNew = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	737b      	strb	r3, [r7, #13]

    /* Iterate over all positions in outer loop */
    while(0U != (bNumPos))
 8005bf8:	e035      	b.n	8005c66 <phCryptoSym_Sw_Des_RotateLeft28+0x82>
    {
        /* Start at highest index because we need to rotate to left */
        i = 4;
 8005bfa:	2304      	movs	r3, #4
 8005bfc:	73fb      	strb	r3, [r7, #15]
        do
        {
            i--;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
            /* Calculate, if there is an overflow generated by the currently shifted byte */
            bOverflowNew = (uint8_t) (((pArray[i] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	09db      	lsrs	r3, r3, #7
 8005c0e:	737b      	strb	r3, [r7, #13]
            /* Shift the byte */
            pArray[i] = pArray[i] << 1U;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	440b      	add	r3, r1
 8005c1e:	0052      	lsls	r2, r2, #1
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
            /* Mask the overflow of the previous byte into the current byte */
            pArray[i] |= bOverflow;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	7819      	ldrb	r1, [r3, #0]
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	7bba      	ldrb	r2, [r7, #14]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
            /* Remember current overflow */
            bOverflow = bOverflowNew;
 8005c3a:	7b7b      	ldrb	r3, [r7, #13]
 8005c3c:	73bb      	strb	r3, [r7, #14]
        }while(0U != i);
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1dc      	bne.n	8005bfe <phCryptoSym_Sw_Des_RotateLeft28+0x1a>

        /* In case of overflow of the first byte, the bit needs to be fed in back at position 28 of the array */
        if (0U != (bOverflow))
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <phCryptoSym_Sw_Des_RotateLeft28+0x78>
        {
            pArray[3] |= 0x10U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3303      	adds	r3, #3
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3303      	adds	r3, #3
 8005c54:	f042 0210 	orr.w	r2, r2, #16
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
        }
        bOverflow = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73bb      	strb	r3, [r7, #14]
        bNumPos--;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	70fb      	strb	r3, [r7, #3]
    while(0U != (bNumPos))
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1c6      	bne.n	8005bfa <phCryptoSym_Sw_Des_RotateLeft28+0x16>
    }
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <phCryptoSym_Sw_Des_ComputeRound>:

void phCryptoSym_Sw_Des_ComputeRound(
                                     uint8_t PH_CRYTOSYM_SW_FAST_RAM * pState,
                                     uint8_t * pRoundKey
                                     )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    (void)memcpy(temp, pState, 4);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
    (void)memcpy(pState, &pState[4], 4);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
    phCryptoSym_Sw_Des_F(&pState[4], pRoundKey);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f83f 	bl	8005d20 <phCryptoSym_Sw_Des_F>
    pState[4] ^= temp[0] ;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	7819      	ldrb	r1, [r3, #0]
 8005ca8:	7b3a      	ldrb	r2, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	404a      	eors	r2, r1
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
    pState[5] ^= temp[1];
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3305      	adds	r3, #5
 8005cb8:	7819      	ldrb	r1, [r3, #0]
 8005cba:	7b7a      	ldrb	r2, [r7, #13]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3305      	adds	r3, #5
 8005cc0:	404a      	eors	r2, r1
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
    pState[6] ^= temp[2];
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3306      	adds	r3, #6
 8005cca:	7819      	ldrb	r1, [r3, #0]
 8005ccc:	7bba      	ldrb	r2, [r7, #14]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3306      	adds	r3, #6
 8005cd2:	404a      	eors	r2, r1
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
    pState[7] ^= temp[3];
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	7819      	ldrb	r1, [r3, #0]
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3307      	adds	r3, #7
 8005ce4:	404a      	eors	r2, r1
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <phCryptoSym_Sw_Des_Swap>:

void phCryptoSym_Sw_Des_Swap(uint8_t PH_CRYTOSYM_SW_FAST_RAM * bState)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
    uint8_t PH_CRYTOSYM_SW_FAST_RAM tmp[4];

    (void)memcpy(tmp, bState, 4);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
    (void)memcpy(bState, &bState[4], 4);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]
    (void)memcpy(&bState[4], tmp, 4);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	601a      	str	r2, [r3, #0]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <phCryptoSym_Sw_Des_F>:

void phCryptoSym_Sw_Des_F(
                          uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                          uint8_t * pRoundKey
                          )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
    uint8_t   j;
    uint8_t  rc;
    uint8_t PH_CRYTOSYM_SW_FAST_RAM bArray[PH_CRYPTOSYM_DES_BLOCK_SIZE];

    /* First expand the input array pR such that an 8 byte output array containing 6 bits in each byte is generated */
    phCryptoSym_Sw_Des_Expand(pR, bArray);
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fa4d 	bl	80061d0 <phCryptoSym_Sw_Des_Expand>

    /* Iterate over all 8 bytes */
    for (j = 0; j < 4U; j++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]
 8005d3a:	e06d      	b.n	8005e18 <phCryptoSym_Sw_Des_F+0xf8>
    {
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index. */
        rc = bArray[(2U*j)] ^ pRoundKey[(2U*j)];
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	3318      	adds	r3, #24
 8005d42:	443b      	add	r3, r7
 8005d44:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	440b      	add	r3, r1
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	4053      	eors	r3, r2
 8005d54:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8005d56:	7dbb      	ldrb	r3, [r7, #22]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	7dbb      	ldrb	r3, [r7, #22]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	7dbb      	ldrb	r3, [r7, #22]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and write back. */
        bArray[j] = (uint8_t)(SBOX[2U*j][rc] << 4U);
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	005a      	lsls	r2, r3, #1
 8005d82:	7dbb      	ldrb	r3, [r7, #22]
 8005d84:	4923      	ldr	r1, [pc, #140]	@ (8005e14 <phCryptoSym_Sw_Des_F+0xf4>)
 8005d86:	0192      	lsls	r2, r2, #6
 8005d88:	440a      	add	r2, r1
 8005d8a:	4413      	add	r3, r2
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	0112      	lsls	r2, r2, #4
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	3318      	adds	r3, #24
 8005d96:	443b      	add	r3, r7
 8005d98:	f803 2c0c 	strb.w	r2, [r3, #-12]
        /* Calculate the XORing of the key and the input to find the correct SBOX lookup index for the next byte. */
        rc = bArray[(2U*j) + 1U] ^ pRoundKey[(2U*j) + 1U];
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	3301      	adds	r3, #1
 8005da2:	3318      	adds	r3, #24
 8005da4:	443b      	add	r3, r7
 8005da6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	3301      	adds	r3, #1
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	440b      	add	r3, r1
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	4053      	eors	r3, r2
 8005db8:	75bb      	strb	r3, [r7, #22]
        rc = (uint8_t)((rc & 0x20U) | ((rc << 4U) & 0x10U) | ((rc >> 1U) & 0x0FU));
 8005dba:	7dbb      	ldrb	r3, [r7, #22]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	7dbb      	ldrb	r3, [r7, #22]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	75bb      	strb	r3, [r7, #22]
        /* Lookup the result in the SBOX and OR it to the result of the previous byte. */
        bArray[j] |= (uint8_t)(SBOX[(2U*j)+1U][rc]);
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	3318      	adds	r3, #24
 8005de6:	443b      	add	r3, r7
 8005de8:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	7dbb      	ldrb	r3, [r7, #22]
 8005df4:	4807      	ldr	r0, [pc, #28]	@ (8005e14 <phCryptoSym_Sw_Des_F+0xf4>)
 8005df6:	0192      	lsls	r2, r2, #6
 8005df8:	4402      	add	r2, r0
 8005dfa:	4413      	add	r3, r2
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	3318      	adds	r3, #24
 8005e06:	443b      	add	r3, r7
 8005e08:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (j = 0; j < 4U; j++)
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
 8005e12:	e001      	b.n	8005e18 <phCryptoSym_Sw_Des_F+0xf8>
 8005e14:	08021cd4 	.word	0x08021cd4
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d98e      	bls.n	8005d3c <phCryptoSym_Sw_Des_F+0x1c>
    }

    /* Finally perform the permutation P.
    As there is no regular mapping from input to output the relevant input bits are looked up in bArray and written back to pR.
    When designing this function, the goal was to minimize the shift operations. */
    pR[1] = (uint8_t)((bArray[0] & 0x88U));        /* Input bits 1, 5 */
 8005e1e:	7b3a      	ldrb	r2, [r7, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3301      	adds	r3, #1
 8005e24:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
    bArray[0] <<=1U;
 8005e2c:	7b3b      	ldrb	r3, [r7, #12]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	733b      	strb	r3, [r7, #12]
    pR[2] = (uint8_t)(bArray[0] & 0x80U);          /* Input bit 2 */
 8005e34:	7b3a      	ldrb	r2, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3302      	adds	r3, #2
 8005e3a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[0]& 0x02U ) << 5U);  /* Input bit 8 */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3302      	adds	r3, #2
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	b25a      	sxtb	r2, r3
 8005e4a:	7b3b      	ldrb	r3, [r7, #12]
 8005e4c:	b25b      	sxtb	r3, r3
 8005e4e:	015b      	lsls	r3, r3, #5
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b25a      	sxtb	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3302      	adds	r3, #2
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
    pR[0] = (uint8_t)((bArray[0]& 0x04U ) << 4U);   /* Input bit 7 */
 8005e64:	7b3b      	ldrb	r3, [r7, #12]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	701a      	strb	r2, [r3, #0]
    pR[3] = (uint8_t)((bArray[0] & 0x08U) << 1U);   /* Input bit 6 */
 8005e74:	7b3b      	ldrb	r3, [r7, #12]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	f002 0210 	and.w	r2, r2, #16
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 4U;
 8005e86:	7b3b      	ldrb	r3, [r7, #12]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	733b      	strb	r3, [r7, #12]
    pR[3] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 4 */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3303      	adds	r3, #3
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b25a      	sxtb	r2, r3
 8005e96:	7b3b      	ldrb	r3, [r7, #12]
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	b25a      	sxtb	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3303      	adds	r3, #3
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
    bArray[0] >>= 1U;
 8005eac:	7b3b      	ldrb	r3, [r7, #12]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	733b      	strb	r3, [r7, #12]
    pR[2] |= (uint8_t)(bArray[0] & 0x02U);         /* Input bit 3 */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b25a      	sxtb	r2, r3
 8005ebc:	7b3b      	ldrb	r3, [r7, #12]
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b25a      	sxtb	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3302      	adds	r3, #2
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
    pR[0]|= (uint8_t)((bArray[1] & 0x01U) << 7U);   /* Input bit 16 */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	7b7b      	ldrb	r3, [r7, #13]
 8005ed8:	01db      	lsls	r3, r3, #7
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	701a      	strb	r2, [r3, #0]
    pR[1]|= (uint8_t)((bArray[1] & 0x02U) << 5U);   /* Input bit 15 */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	b25a      	sxtb	r2, r3
 8005eec:	7b7b      	ldrb	r3, [r7, #13]
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	015b      	lsls	r3, r3, #5
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef8:	b25b      	sxtb	r3, r3
 8005efa:	4313      	orrs	r3, r2
 8005efc:	b25a      	sxtb	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3301      	adds	r3, #1
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[1] & 0x04U) << 2U);   /* Input bit 14 */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3302      	adds	r3, #2
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b25a      	sxtb	r2, r3
 8005f0e:	7b7b      	ldrb	r3, [r7, #13]
 8005f10:	b25b      	sxtb	r3, r3
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	b25b      	sxtb	r3, r3
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b25a      	sxtb	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3302      	adds	r3, #2
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
    pR[3]|= (uint8_t)((bArray[1] & 0x08U) << 3U);   /* Input bit 13 */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3303      	adds	r3, #3
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b25a      	sxtb	r2, r3
 8005f30:	7b7b      	ldrb	r3, [r7, #13]
 8005f32:	b25b      	sxtb	r3, r3
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b25a      	sxtb	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3303      	adds	r3, #3
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 2U;
 8005f4a:	7b7b      	ldrb	r3, [r7, #13]
 8005f4c:	089b      	lsrs	r3, r3, #2
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	737b      	strb	r3, [r7, #13]
    pR[0] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 12 */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b25a      	sxtb	r2, r3
 8005f58:	7b7b      	ldrb	r3, [r7, #13]
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b25b      	sxtb	r3, r3
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8005f6c:	7b7b      	ldrb	r3, [r7, #13]
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	737b      	strb	r3, [r7, #13]
    pR[3] |= (uint8_t)(bArray[1]& 0x04U);          /* Input bit 11 */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3303      	adds	r3, #3
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b25a      	sxtb	r2, r3
 8005f7c:	7b7b      	ldrb	r3, [r7, #13]
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	b25b      	sxtb	r3, r3
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b25a      	sxtb	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3303      	adds	r3, #3
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 3U;
 8005f92:	7b7b      	ldrb	r3, [r7, #13]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	737b      	strb	r3, [r7, #13]
    pR[1] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 10 */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b25a      	sxtb	r2, r3
 8005fa2:	7b7b      	ldrb	r3, [r7, #13]
 8005fa4:	b25b      	sxtb	r3, r3
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	b25b      	sxtb	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b25a      	sxtb	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
    bArray[1] >>= 1U;
 8005fb8:	7b7b      	ldrb	r3, [r7, #13]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	737b      	strb	r3, [r7, #13]
    pR[2] |= (uint8_t)(bArray[1]& 0x01U);          /* Input bit 9 */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b25a      	sxtb	r2, r3
 8005fc8:	7b7b      	ldrb	r3, [r7, #13]
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	b25b      	sxtb	r3, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b25a      	sxtb	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3302      	adds	r3, #2
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)((bArray[2] & 0x80U) >> 7U);  /* Input bit 17  */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	09db      	lsrs	r3, r3, #7
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)((bArray[2] & 0x40U) >> 4U);  /* Input bit 18 */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	7819      	ldrb	r1, [r3, #0]
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	b2da      	uxtb	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3301      	adds	r3, #1
 8006006:	430a      	orrs	r2, r1
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[2] & 0x20U) << 2U);  /* Input bit 19 */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3303      	adds	r3, #3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b25a      	sxtb	r2, r3
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	b25b      	sxtb	r3, r3
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	b25b      	sxtb	r3, r3
 800601c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006020:	b25b      	sxtb	r3, r3
 8006022:	4313      	orrs	r3, r2
 8006024:	b25a      	sxtb	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3303      	adds	r3, #3
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=1U;
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	b2db      	uxtb	r3, r3
 8006034:	73bb      	strb	r3, [r7, #14]
    pR[0] |= (uint8_t)(bArray[2] & 0x20U);         /* Input bit 20 */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b25a      	sxtb	r2, r3
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	b25b      	sxtb	r3, r3
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	b25b      	sxtb	r3, r3
 8006046:	4313      	orrs	r3, r2
 8006048:	b25b      	sxtb	r3, r3
 800604a:	b2da      	uxtb	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)(bArray[2] & 0x10U);         /* Input bit 21 */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b25a      	sxtb	r2, r3
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	b25b      	sxtb	r3, r3
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	b25b      	sxtb	r3, r3
 8006060:	4313      	orrs	r3, r2
 8006062:	b25b      	sxtb	r3, r3
 8006064:	b2da      	uxtb	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)(bArray[2] & 0x08U);         /* Input bit 22 */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3303      	adds	r3, #3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b25a      	sxtb	r2, r3
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	b25b      	sxtb	r3, r3
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	b25b      	sxtb	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	b25a      	sxtb	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3303      	adds	r3, #3
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
    bArray[2]<<=3U;
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	b2db      	uxtb	r3, r3
 800608e:	73bb      	strb	r3, [r7, #14]
    pR[1]|= (uint8_t)(bArray[2] & 0x20U);          /* Input bit 23 */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3301      	adds	r3, #1
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b25a      	sxtb	r2, r3
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	b25b      	sxtb	r3, r3
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b25a      	sxtb	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3301      	adds	r3, #1
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
    pR[2]|= (uint8_t)((bArray[2] & 0x10U) << 1U);   /* Input bit 24 */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3302      	adds	r3, #2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b25a      	sxtb	r2, r3
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	b25b      	sxtb	r3, r3
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	b25a      	sxtb	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3302      	adds	r3, #2
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

    pR[0] |= (uint8_t)(bArray[3] & 0x08U);         /* Input bit 29 */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b25a      	sxtb	r2, r3
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	701a      	strb	r2, [r3, #0]
    pR[1] |= (uint8_t)(bArray[3] & 0x02U);         /* Input bit 31 */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3301      	adds	r3, #1
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b25a      	sxtb	r2, r3
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	b25b      	sxtb	r3, r3
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b25a      	sxtb	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3301      	adds	r3, #1
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x80U) >> 7U);  /* Input bit 25 */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3303      	adds	r3, #3
 800610c:	7819      	ldrb	r1, [r3, #0]
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	09db      	lsrs	r3, r3, #7
 8006112:	b2da      	uxtb	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3303      	adds	r3, #3
 8006118:	430a      	orrs	r2, r1
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
    pR[2] |= (uint8_t)((bArray[3] & 0x01U) << 3U);  /* Input bit 32 */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3302      	adds	r3, #2
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	b25a      	sxtb	r2, r3
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	b25b      	sxtb	r3, r3
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	b25b      	sxtb	r3, r3
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	b25b      	sxtb	r3, r3
 8006134:	4313      	orrs	r3, r2
 8006136:	b25a      	sxtb	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3302      	adds	r3, #2
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
    pR[3] |= (uint8_t)((bArray[3] & 0x04U) << 3U);  /* Input bit 30 */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3303      	adds	r3, #3
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b25a      	sxtb	r2, r3
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	b25b      	sxtb	r3, r3
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	b25b      	sxtb	r3, r3
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	b25b      	sxtb	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b25a      	sxtb	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3303      	adds	r3, #3
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=2U;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	b2db      	uxtb	r3, r3
 8006168:	73fb      	strb	r3, [r7, #15]
    pR[1] |= (uint8_t)((bArray[3] & 0x10U));       /* Input bit 26 */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3301      	adds	r3, #1
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b25a      	sxtb	r2, r3
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	b25b      	sxtb	r3, r3
 800617c:	4313      	orrs	r3, r2
 800617e:	b25a      	sxtb	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3301      	adds	r3, #1
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
    bArray[3]>>=1U;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	73fb      	strb	r3, [r7, #15]
    pR[2] |= (uint8_t)((bArray[3] & 0x04U));       /* Input bit 27 */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3302      	adds	r3, #2
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b25a      	sxtb	r2, r3
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	b25b      	sxtb	r3, r3
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	b25b      	sxtb	r3, r3
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b25a      	sxtb	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3302      	adds	r3, #2
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
    pR[0] |= (uint8_t)((bArray[3] & 0x02U));       /* Input bit 28 */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b25a      	sxtb	r2, r3
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	b25b      	sxtb	r3, r3
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	b25b      	sxtb	r3, r3
 80061be:	4313      	orrs	r3, r2
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	701a      	strb	r2, [r3, #0]

}
 80061c8:	bf00      	nop
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <phCryptoSym_Sw_Des_Expand>:

void phCryptoSym_Sw_Des_Expand(
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pR,
                               uint8_t PH_CRYTOSYM_SW_FAST_RAM * pRexp
                               )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
    pRexp[0] = (uint8_t)((uint8_t)(((pR[3] & 0x01U) << 5U) | (pR[0] >> 3U)) & MASK6); /* Input bits 32 1 2 3 4 5 */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3303      	adds	r3, #3
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	015b      	lsls	r3, r3, #5
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	701a      	strb	r2, [r3, #0]
    pRexp[1] = (uint8_t)((uint8_t)((pR[0] << 1U) | ((pR[1] & 0x80U) >> 7U)) & MASK6); /* Input bits 4 5 6 7 8 9 */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3301      	adds	r3, #1
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	09db      	lsrs	r3, r3, #7
 8006210:	b2db      	uxtb	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b2da      	uxtb	r2, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
    pRexp[2] = (uint8_t)((uint8_t)(((pR[0] & 0x01U) << 5U) | (pR[1] >> 3U)) & MASK6); /* Input bits 8 9 10 11 12 13 */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015b      	lsls	r3, r3, #5
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	b2da      	uxtb	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3301      	adds	r3, #1
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	08db      	lsrs	r3, r3, #3
 8006238:	b2db      	uxtb	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	b2da      	uxtb	r2, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	3302      	adds	r3, #2
 8006242:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]
    pRexp[3] = (uint8_t)((uint8_t)((pR[1] << 1U) | ((pR[2] & 0x80U) >> 7U)) & MASK6); /* Input bits 12 13 14 15 16 17 */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3301      	adds	r3, #1
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3302      	adds	r3, #2
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	09db      	lsrs	r3, r3, #7
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	b2da      	uxtb	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	3303      	adds	r3, #3
 8006266:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
    pRexp[4] = (uint8_t)((uint8_t)(((pR[1] & 0x01U) << 5U) | (pR[2] >> 3U)) & MASK6); /* Input bits 16 17 18 19 20 21 */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3301      	adds	r3, #1
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	015b      	lsls	r3, r3, #5
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	b2da      	uxtb	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3302      	adds	r3, #2
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	b2db      	uxtb	r3, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	b2da      	uxtb	r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	3304      	adds	r3, #4
 8006290:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
    pRexp[5] = (uint8_t)((uint8_t)((pR[2] << 1U) | ((pR[3] & 0x80U) >> 7U)) & MASK6); /* Input bits 20 21 22 23 24 25*/
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3302      	adds	r3, #2
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3303      	adds	r3, #3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	3305      	adds	r3, #5
 80062b4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
    pRexp[6] = (uint8_t)((uint8_t)(((pR[2] & 0x01U) << 5U) | (pR[3] >> 3U)) & MASK6); /* Input bits 24 25 26 27 28 29*/
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3302      	adds	r3, #2
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	015b      	lsls	r3, r3, #5
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3303      	adds	r3, #3
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	08db      	lsrs	r3, r3, #3
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3306      	adds	r3, #6
 80062de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
    pRexp[7] = (uint8_t)((uint8_t)((pR[3] << 1U) | ((pR[0] & 0x80U) >> 7U)) & MASK6); /* Input bits 28 29 30 31 32 1 */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3303      	adds	r3, #3
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	09db      	lsrs	r3, r3, #7
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	3307      	adds	r3, #7
 8006300:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <phCryptoSym_Sw_CMAC_GenerateK1K2>:
phStatus_t phCryptoSym_Sw_CMAC_GenerateK1K2(
    phCryptoSym_Sw_DataParams_t * pDataParams,
    uint8_t * pSubKey1,
    uint8_t * pSubKey2
    )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	@ 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_CRYTOSYM_SW_FAST_RAM aBuffer[PH_CRYPTOSYM_SW_MAX_BLOCK_SIZE];
    uint16_t    PH_MEMLOC_REM wBlockSize;
    uint8_t     PH_MEMLOC_REM bR_b;

    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	2210      	movs	r2, #16
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f018 fdfd 	bl	801ef28 <memset>

    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_GetConfig(pDataParams, PH_CRYPTOSYM_CONFIG_BLOCK_SIZE, &wBlockSize));
 800632e:	f107 0312 	add.w	r3, r7, #18
 8006332:	461a      	mov	r2, r3
 8006334:	2102      	movs	r1, #2
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7fe f85e 	bl	80043f8 <phCryptoSym_Sw_GetConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x36>
 8006346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006348:	e058      	b.n	80063fc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Calculate xor value according to Seq. 5.3 of SP_800-38B */
    /* R128 = 0exp(120) || 10000111, and R64 = 0exp(59) || 11011. */
    switch (wBlockSize)
 800634a:	8a7b      	ldrh	r3, [r7, #18]
 800634c:	2b08      	cmp	r3, #8
 800634e:	d005      	beq.n	800635c <phCryptoSym_Sw_CMAC_GenerateK1K2+0x48>
 8006350:	2b10      	cmp	r3, #16
 8006352:	d107      	bne.n	8006364 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x50>
    {
    case PH_CRYPTOSYM_AES_BLOCK_SIZE:
        bR_b = 0x87U;
 8006354:	2387      	movs	r3, #135	@ 0x87
 8006356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 800635a:	e006      	b.n	800636a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    case PH_CRYPTOSYM_DES_BLOCK_SIZE:
        bR_b = 0x1BU;
 800635c:	231b      	movs	r3, #27
 800635e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        break;
 8006362:	e002      	b.n	800636a <phCryptoSym_Sw_CMAC_GenerateK1K2+0x56>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_CRYPTOSYM);
 8006364:	f24e 137f 	movw	r3, #57727	@ 0xe17f
 8006368:	e048      	b.n	80063fc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>
    }

    /* Encrypt zero block*/
    /* 1. Let L = CIPHK(0 exp b). */
    PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_EncryptBlock(pDataParams, aBuffer));
 800636a:	f107 0314 	add.w	r3, r7, #20
 800636e:	4619      	mov	r1, r3
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f879 	bl	8006468 <phCryptoSym_Sw_EncryptBlock>
 8006376:	4603      	mov	r3, r0
 8006378:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800637a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <phCryptoSym_Sw_CMAC_GenerateK1K2+0x70>
 8006380:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006382:	e03b      	b.n	80063fc <phCryptoSym_Sw_CMAC_GenerateK1K2+0xe8>

    /* Shift the pSubKey array according to NIST SP_800-38B */
    /* 2. If MSB1(L) = 0, then K1 = L << 1U; */
    /* Else K1 = (L << 1U) xor Rb; see Sec. 5.3 for the definition of Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(aBuffer, (uint8_t)wBlockSize, pSubKey1);
 8006384:	8a7b      	ldrh	r3, [r7, #18]
 8006386:	b2d9      	uxtb	r1, r3
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f838 	bl	8006404 <phCryptoSym_Sw_CMAC_LeftShift>
    if (0U != (aBuffer[0] & 0x80U))
 8006394:	7d3b      	ldrb	r3, [r7, #20]
 8006396:	b25b      	sxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	da0d      	bge.n	80063b8 <phCryptoSym_Sw_CMAC_GenerateK1K2+0xa4>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey1[wBlockSize - 1U ]  ^= bR_b;
 800639c:	8a7b      	ldrh	r3, [r7, #18]
 800639e:	3b01      	subs	r3, #1
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	4413      	add	r3, r2
 80063a4:	7819      	ldrb	r1, [r3, #0]
 80063a6:	8a7b      	ldrh	r3, [r7, #18]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80063b2:	404a      	eors	r2, r1
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]

    /* Now let's continue with Key 2 */
    /* Shift the pSubKey array according to NIST SP_800-38B*/
    /* 3. If MSB1(K1) = 0, then K2 = K1 << 1U; */
    /* Else K2 = (K1 << 1U) xor Rb. */
    phCryptoSym_Sw_CMAC_LeftShift(pSubKey1, (uint8_t)wBlockSize, pSubKey2);
 80063b8:	8a7b      	ldrh	r3, [r7, #18]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4619      	mov	r1, r3
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f000 f81f 	bl	8006404 <phCryptoSym_Sw_CMAC_LeftShift>

    if (0U != (pSubKey1[0] & 0x80U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da0d      	bge.n	80063ec <phCryptoSym_Sw_CMAC_GenerateK1K2+0xd8>
    {
        /* We need to perform the XOR operation with the R_b array */
        pSubKey2[wBlockSize - 1U ]  ^= bR_b;
 80063d0:	8a7b      	ldrh	r3, [r7, #18]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	7819      	ldrb	r1, [r3, #0]
 80063da:	8a7b      	ldrh	r3, [r7, #18]
 80063dc:	3b01      	subs	r3, #1
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4413      	add	r3, r2
 80063e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80063e6:	404a      	eors	r2, r1
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
#ifndef PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION
    pDataParams->bCMACSubKeysInitialized    = PH_ON;
#endif /* PH_CRYPTOSYM_SW_ONLINE_CMAC_SUBKEY_CALCULATION */

    /* Clear buffer for security reasons */
    (void)memset(aBuffer, 0x00, (size_t)sizeof(aBuffer));
 80063ec:	f107 0314 	add.w	r3, r7, #20
 80063f0:	2210      	movs	r2, #16
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f018 fd97 	bl	801ef28 <memset>

    return PH_ERR_SUCCESS;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3728      	adds	r7, #40	@ 0x28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <phCryptoSym_Sw_CMAC_LeftShift>:
void phCryptoSym_Sw_CMAC_LeftShift(
                                   const uint8_t * pInBuffer,
                                   uint8_t bInputLen,
                                   uint8_t * pOutBuffer
                                   )
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	460b      	mov	r3, r1
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bOverflow = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]

    do
    {
        bInputLen--;
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	3b01      	subs	r3, #1
 800641a:	72fb      	strb	r3, [r7, #11]
        pOutBuffer[bInputLen] = pInBuffer[bInputLen] << 1U;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	440b      	add	r3, r1
 800642a:	0052      	lsls	r2, r2, #1
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
        pOutBuffer[bInputLen] |= bOverflow;
 8006430:	7afb      	ldrb	r3, [r7, #11]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	7819      	ldrb	r1, [r3, #0]
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	7dfa      	ldrb	r2, [r7, #23]
 8006440:	430a      	orrs	r2, r1
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
        bOverflow = (uint8_t) (((pInBuffer[bInputLen] & 0x80U) != 0U) ? 0x01U : 0x00U);
 8006446:	7afb      	ldrb	r3, [r7, #11]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	09db      	lsrs	r3, r3, #7
 8006450:	75fb      	strb	r3, [r7, #23]
    }
    while(0U != bInputLen);
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1de      	bne.n	8006416 <phCryptoSym_Sw_CMAC_LeftShift+0x12>
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <phCryptoSym_Sw_EncryptBlock>:

phStatus_t phCryptoSym_Sw_EncryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006476:	2b05      	cmp	r3, #5
 8006478:	f200 8088 	bhi.w	800658c <phCryptoSym_Sw_EncryptBlock+0x124>
 800647c:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <phCryptoSym_Sw_EncryptBlock+0x1c>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	0800649d 	.word	0x0800649d
 8006488:	080064b5 	.word	0x080064b5
 800648c:	080064cd 	.word	0x080064cd
 8006490:	080064e5 	.word	0x080064e5
 8006494:	080064fd 	.word	0x080064fd
 8006498:	08006545 	.word	0x08006545
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 800649c:	220a      	movs	r2, #10
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fe f83e 	bl	8004522 <phCryptoSym_Sw_Aes_EncryptBlock>
 80064a6:	4603      	mov	r3, r0
 80064a8:	81fb      	strh	r3, [r7, #14]
 80064aa:	89fb      	ldrh	r3, [r7, #14]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d070      	beq.n	8006592 <phCryptoSym_Sw_EncryptBlock+0x12a>
 80064b0:	89fb      	ldrh	r3, [r7, #14]
 80064b2:	e07a      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80064b4:	220c      	movs	r2, #12
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fe f832 	bl	8004522 <phCryptoSym_Sw_Aes_EncryptBlock>
 80064be:	4603      	mov	r3, r0
 80064c0:	81fb      	strh	r3, [r7, #14]
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d066      	beq.n	8006596 <phCryptoSym_Sw_EncryptBlock+0x12e>
 80064c8:	89fb      	ldrh	r3, [r7, #14]
 80064ca:	e06e      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_EncryptBlock(
 80064cc:	220e      	movs	r2, #14
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fe f826 	bl	8004522 <phCryptoSym_Sw_Aes_EncryptBlock>
 80064d6:	4603      	mov	r3, r0
 80064d8:	81fb      	strh	r3, [r7, #14]
 80064da:	89fb      	ldrh	r3, [r7, #14]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05c      	beq.n	800659a <phCryptoSym_Sw_EncryptBlock+0x132>
 80064e0:	89fb      	ldrh	r3, [r7, #14]
 80064e2:	e062      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80064e4:	2200      	movs	r2, #0
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fe fdcf 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 80064ee:	4603      	mov	r3, r0
 80064f0:	81fb      	strh	r3, [r7, #14]
 80064f2:	89fb      	ldrh	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d052      	beq.n	800659e <phCryptoSym_Sw_EncryptBlock+0x136>
 80064f8:	89fb      	ldrh	r3, [r7, #14]
 80064fa:	e056      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80064fc:	2200      	movs	r2, #0
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fe fdc3 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 8006506:	4603      	mov	r3, r0
 8006508:	81fb      	strh	r3, [r7, #14]
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <phCryptoSym_Sw_EncryptBlock+0xac>
 8006510:	89fb      	ldrh	r3, [r7, #14]
 8006512:	e04a      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006514:	2201      	movs	r2, #1
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fe fe05 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 800651e:	4603      	mov	r3, r0
 8006520:	81fb      	strh	r3, [r7, #14]
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <phCryptoSym_Sw_EncryptBlock+0xc4>
 8006528:	89fb      	ldrh	r3, [r7, #14]
 800652a:	e03e      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 800652c:	2200      	movs	r2, #0
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fe fdab 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 8006536:	4603      	mov	r3, r0
 8006538:	81fb      	strh	r3, [r7, #14]
 800653a:	89fb      	ldrh	r3, [r7, #14]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d030      	beq.n	80065a2 <phCryptoSym_Sw_EncryptBlock+0x13a>
 8006540:	89fb      	ldrh	r3, [r7, #14]
 8006542:	e032      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8006544:	2200      	movs	r2, #0
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fe fd9f 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 800654e:	4603      	mov	r3, r0
 8006550:	81fb      	strh	r3, [r7, #14]
 8006552:	89fb      	ldrh	r3, [r7, #14]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <phCryptoSym_Sw_EncryptBlock+0xf4>
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	e026      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 800655c:	2201      	movs	r2, #1
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fe fde1 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 8006566:	4603      	mov	r3, r0
 8006568:	81fb      	strh	r3, [r7, #14]
 800656a:	89fb      	ldrh	r3, [r7, #14]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <phCryptoSym_Sw_EncryptBlock+0x10c>
 8006570:	89fb      	ldrh	r3, [r7, #14]
 8006572:	e01a      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8006574:	2202      	movs	r2, #2
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fe fd87 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 800657e:	4603      	mov	r3, r0
 8006580:	81fb      	strh	r3, [r7, #14]
 8006582:	89fb      	ldrh	r3, [r7, #14]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <phCryptoSym_Sw_EncryptBlock+0x13e>
 8006588:	89fb      	ldrh	r3, [r7, #14]
 800658a:	e00e      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
            pBlock,
            2));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 800658c:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006590:	e00b      	b.n	80065aa <phCryptoSym_Sw_EncryptBlock+0x142>
        break;
 8006592:	bf00      	nop
 8006594:	e008      	b.n	80065a8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 8006596:	bf00      	nop
 8006598:	e006      	b.n	80065a8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <phCryptoSym_Sw_EncryptBlock+0x140>
        break;
 80065a6:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop

080065b4 <phCryptoSym_Sw_DecryptBlock>:

phStatus_t phCryptoSym_Sw_DecryptBlock(
                                       phCryptoSym_Sw_DataParams_t * pDataParams,
                                       uint8_t PH_CRYTOSYM_SW_FAST_RAM * pBlock
                                       )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (pDataParams->wKeyType)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	f200 8088 	bhi.w	80066d8 <phCryptoSym_Sw_DecryptBlock+0x124>
 80065c8:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <phCryptoSym_Sw_DecryptBlock+0x1c>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	080065e9 	.word	0x080065e9
 80065d4:	08006601 	.word	0x08006601
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006631 	.word	0x08006631
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006691 	.word	0x08006691
    {
#ifdef PH_CRYPTOSYM_SW_AES
    case PH_CRYPTOSYM_KEY_TYPE_AES128:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 80065e8:	220a      	movs	r2, #10
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fe f80b 	bl	8004608 <phCryptoSym_Sw_Aes_DecryptBlock>
 80065f2:	4603      	mov	r3, r0
 80065f4:	81fb      	strh	r3, [r7, #14]
 80065f6:	89fb      	ldrh	r3, [r7, #14]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d070      	beq.n	80066de <phCryptoSym_Sw_DecryptBlock+0x12a>
 80065fc:	89fb      	ldrh	r3, [r7, #14]
 80065fe:	e07a      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_128));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES192:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8006600:	220c      	movs	r2, #12
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7fd ffff 	bl	8004608 <phCryptoSym_Sw_Aes_DecryptBlock>
 800660a:	4603      	mov	r3, r0
 800660c:	81fb      	strh	r3, [r7, #14]
 800660e:	89fb      	ldrh	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d066      	beq.n	80066e2 <phCryptoSym_Sw_DecryptBlock+0x12e>
 8006614:	89fb      	ldrh	r3, [r7, #14]
 8006616:	e06e      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_192));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_AES256:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Aes_DecryptBlock(
 8006618:	220e      	movs	r2, #14
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fd fff3 	bl	8004608 <phCryptoSym_Sw_Aes_DecryptBlock>
 8006622:	4603      	mov	r3, r0
 8006624:	81fb      	strh	r3, [r7, #14]
 8006626:	89fb      	ldrh	r3, [r7, #14]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d05c      	beq.n	80066e6 <phCryptoSym_Sw_DecryptBlock+0x132>
 800662c:	89fb      	ldrh	r3, [r7, #14]
 800662e:	e062      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            PH_CRYPTOSYM_SW_NUM_AES_ROUNDS_256));
        break;
#endif /* PH_CRYPTOSYM_SW_AES */
#ifdef PH_CRYPTOSYM_SW_DES
    case PH_CRYPTOSYM_KEY_TYPE_DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006630:	2200      	movs	r2, #0
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7fe fd77 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 800663a:	4603      	mov	r3, r0
 800663c:	81fb      	strh	r3, [r7, #14]
 800663e:	89fb      	ldrh	r3, [r7, #14]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d052      	beq.n	80066ea <phCryptoSym_Sw_DecryptBlock+0x136>
 8006644:	89fb      	ldrh	r3, [r7, #14]
 8006646:	e056      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_2K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006648:	2200      	movs	r2, #0
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fe fd6b 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 8006652:	4603      	mov	r3, r0
 8006654:	81fb      	strh	r3, [r7, #14]
 8006656:	89fb      	ldrh	r3, [r7, #14]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <phCryptoSym_Sw_DecryptBlock+0xac>
 800665c:	89fb      	ldrh	r3, [r7, #14]
 800665e:	e04a      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 8006660:	2201      	movs	r2, #1
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe fd11 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 800666a:	4603      	mov	r3, r0
 800666c:	81fb      	strh	r3, [r7, #14]
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <phCryptoSym_Sw_DecryptBlock+0xc4>
 8006674:	89fb      	ldrh	r3, [r7, #14]
 8006676:	e03e      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006678:	2200      	movs	r2, #0
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fe fd53 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 8006682:	4603      	mov	r3, r0
 8006684:	81fb      	strh	r3, [r7, #14]
 8006686:	89fb      	ldrh	r3, [r7, #14]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d030      	beq.n	80066ee <phCryptoSym_Sw_DecryptBlock+0x13a>
 800668c:	89fb      	ldrh	r3, [r7, #14]
 800668e:	e032      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            0));
        break;
    case PH_CRYPTOSYM_KEY_TYPE_3K3DES:
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 8006690:	2202      	movs	r2, #2
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fe fd47 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 800669a:	4603      	mov	r3, r0
 800669c:	81fb      	strh	r3, [r7, #14]
 800669e:	89fb      	ldrh	r3, [r7, #14]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <phCryptoSym_Sw_DecryptBlock+0xf4>
 80066a4:	89fb      	ldrh	r3, [r7, #14]
 80066a6:	e026      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            2));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_EncryptBlock(
 80066a8:	2201      	movs	r2, #1
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fe fced 	bl	800508c <phCryptoSym_Sw_Des_EncryptBlock>
 80066b2:	4603      	mov	r3, r0
 80066b4:	81fb      	strh	r3, [r7, #14]
 80066b6:	89fb      	ldrh	r3, [r7, #14]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <phCryptoSym_Sw_DecryptBlock+0x10c>
 80066bc:	89fb      	ldrh	r3, [r7, #14]
 80066be:	e01a      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pDataParams,
            pBlock,
            1));
        PH_CHECK_SUCCESS_FCT(statusTmp, phCryptoSym_Sw_Des_DecryptBlock(
 80066c0:	2200      	movs	r2, #0
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fe fd2f 	bl	8005128 <phCryptoSym_Sw_Des_DecryptBlock>
 80066ca:	4603      	mov	r3, r0
 80066cc:	81fb      	strh	r3, [r7, #14]
 80066ce:	89fb      	ldrh	r3, [r7, #14]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00e      	beq.n	80066f2 <phCryptoSym_Sw_DecryptBlock+0x13e>
 80066d4:	89fb      	ldrh	r3, [r7, #14]
 80066d6:	e00e      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
            pBlock,
            0));
        break;
#endif /* PH_CRYPTOSYM_SW_DES */
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_CRYPTOSYM);
 80066d8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80066dc:	e00b      	b.n	80066f6 <phCryptoSym_Sw_DecryptBlock+0x142>
        break;
 80066de:	bf00      	nop
 80066e0:	e008      	b.n	80066f4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80066e2:	bf00      	nop
 80066e4:	e006      	b.n	80066f4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80066e6:	bf00      	nop
 80066e8:	e004      	b.n	80066f4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <phCryptoSym_Sw_DecryptBlock+0x140>
        break;
 80066f2:	bf00      	nop
    }
    return PH_ERR_SUCCESS;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <phCryptoSym_Encrypt>:
    return status;
}

phStatus_t phCryptoSym_Encrypt(void * pDataParams, uint16_t wOption, const uint8_t * pPlainBuffer, uint16_t wBufferLength,
    uint8_t * pEncryptedBuffer)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	461a      	mov	r2, r3
 800670c:	460b      	mov	r3, r1
 800670e:	817b      	strh	r3, [r7, #10]
 8006710:	4613      	mov	r3, r2
 8006712:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wBufferLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pEncryptedBuffer);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <phCryptoSym_Encrypt+0x20>
 800671a:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800671e:	e02d      	b.n	800677c <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pPlainBuffer, PH_COMP_CRYPTOSYM);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <phCryptoSym_Encrypt+0x2c>
 8006726:	f24e 1321 	movw	r3, #57633	@ 0xe121
 800672a:	e027      	b.n	800677c <phCryptoSym_Encrypt+0x7c>
    PH_ASSERT_NULL_PARAM(pEncryptedBuffer, PH_COMP_CRYPTOSYM);
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <phCryptoSym_Encrypt+0x38>
 8006732:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006736:	e021      	b.n	800677c <phCryptoSym_Encrypt+0x7c>
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wBufferLength), &wBufferLength);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pPlainBuffer), pPlainBuffer, wBufferLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006740:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006744:	d004      	beq.n	8006750 <phCryptoSym_Encrypt+0x50>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006746:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800674a:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 800674c:	8afb      	ldrh	r3, [r7, #22]
 800674e:	e015      	b.n	800677c <phCryptoSym_Encrypt+0x7c>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	d10b      	bne.n	8006772 <phCryptoSym_Encrypt+0x72>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_Encrypt((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pPlainBuffer, wBufferLength,
 800675a:	893a      	ldrh	r2, [r7, #8]
 800675c:	8979      	ldrh	r1, [r7, #10]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	4613      	mov	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7fd fb18 	bl	8003d9c <phCryptoSym_Sw_Encrypt>
 800676c:	4603      	mov	r3, r0
 800676e:	82fb      	strh	r3, [r7, #22]
                pEncryptedBuffer);
            break;
 8006770:	e003      	b.n	800677a <phCryptoSym_Encrypt+0x7a>
                pEncryptedBuffer);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006772:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006776:	82fb      	strh	r3, [r7, #22]
            break;
 8006778:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 800677a:	8afb      	ldrh	r3, [r7, #22]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <phCryptoSym_CalculateMac>:
    return status;
}

phStatus_t phCryptoSym_CalculateMac(void * pDataParams, uint16_t wOption, const uint8_t* pData, uint16_t wDataLength,
    uint8_t * pMac, uint8_t * pMacLength)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	461a      	mov	r2, r3
 8006790:	460b      	mov	r3, r1
 8006792:	817b      	strh	r3, [r7, #10]
 8006794:	4613      	mov	r3, r2
 8006796:	813b      	strh	r3, [r7, #8]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMac);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pMacLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <phCryptoSym_CalculateMac+0x20>
 800679e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80067a2:	e038      	b.n	8006816 <phCryptoSym_CalculateMac+0x92>
    if(wDataLength != 0)
 80067a4:	893b      	ldrh	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <phCryptoSym_CalculateMac+0x32>
    {
        PH_ASSERT_NULL_PARAM(pData, PH_COMP_CRYPTOSYM);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d102      	bne.n	80067b6 <phCryptoSym_CalculateMac+0x32>
 80067b0:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80067b4:	e02f      	b.n	8006816 <phCryptoSym_CalculateMac+0x92>
    }
    PH_ASSERT_NULL_PARAM(pMac, PH_COMP_CRYPTOSYM);
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <phCryptoSym_CalculateMac+0x3e>
 80067bc:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80067c0:	e029      	b.n	8006816 <phCryptoSym_CalculateMac+0x92>
    PH_ASSERT_NULL_PARAM(pMacLength, PH_COMP_CRYPTOSYM);
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <phCryptoSym_CalculateMac+0x4a>
 80067c8:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80067cc:	e023      	b.n	8006816 <phCryptoSym_CalculateMac+0x92>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pData), pData, wDataLength);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wDataLength), &wDataLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80067d6:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80067da:	d004      	beq.n	80067e6 <phCryptoSym_CalculateMac+0x62>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80067dc:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80067e0:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80067e2:	8afb      	ldrh	r3, [r7, #22]
 80067e4:	e017      	b.n	8006816 <phCryptoSym_CalculateMac+0x92>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d10d      	bne.n	800680c <phCryptoSym_CalculateMac+0x88>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_CalculateMac((phCryptoSym_Sw_DataParams_t *) pDataParams, wOption, pData, wDataLength,
 80067f0:	893a      	ldrh	r2, [r7, #8]
 80067f2:	8979      	ldrh	r1, [r7, #10]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7fd fb89 	bl	8003f18 <phCryptoSym_Sw_CalculateMac>
 8006806:	4603      	mov	r3, r0
 8006808:	82fb      	strh	r3, [r7, #22]
                pMac, pMacLength);
            break;
 800680a:	e003      	b.n	8006814 <phCryptoSym_CalculateMac+0x90>
                pMac, pMacLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 800680c:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006810:	82fb      	strh	r3, [r7, #22]
            break;
 8006812:	bf00      	nop
    }
#endif /* NXPBUILD__PH_LOG */
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8006814:	8afb      	ldrh	r3, [r7, #22]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <phCryptoSym_LoadIv>:

phStatus_t phCryptoSym_LoadIv(void * pDataParams, const uint8_t * pIV, uint8_t bIVLength)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pIV);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(bIVLength);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <phCryptoSym_LoadIv+0x1a>
 8006832:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006836:	e024      	b.n	8006882 <phCryptoSym_LoadIv+0x64>
    PH_ASSERT_NULL_PARAM(pIV, PH_COMP_CRYPTOSYM);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <phCryptoSym_LoadIv+0x26>
 800683e:	f24e 1321 	movw	r3, #57633	@ 0xe121
 8006842:	e01e      	b.n	8006882 <phCryptoSym_LoadIv+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pIV), pIV, bIVLength);
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(bIVLength), &bIVLength);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800684c:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8006850:	d004      	beq.n	800685c <phCryptoSym_LoadIv+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006852:	f24e 1320 	movw	r3, #57632	@ 0xe120
 8006856:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	e012      	b.n	8006882 <phCryptoSym_LoadIv+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	d108      	bne.n	8006878 <phCryptoSym_LoadIv+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadIv((phCryptoSym_Sw_DataParams_t *) pDataParams, pIV, bIVLength);
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	461a      	mov	r2, r3
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7fd fd11 	bl	8004294 <phCryptoSym_Sw_LoadIv>
 8006872:	4603      	mov	r3, r0
 8006874:	82fb      	strh	r3, [r7, #22]
            break;
 8006876:	e003      	b.n	8006880 <phCryptoSym_LoadIv+0x62>
            status = phCryptoSym_mBedTLS_LoadIv((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pIV, bIVLength);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 8006878:	f24e 1320 	movw	r3, #57632	@ 0xe120
 800687c:	82fb      	strh	r3, [r7, #22]
            break;
 800687e:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 8006880:	8afb      	ldrh	r3, [r7, #22]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <phCryptoSym_LoadKeyDirect>:

    return status;
}

phStatus_t phCryptoSym_LoadKeyDirect(void * pDataParams, const uint8_t * pKey, uint16_t wKeyType)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	4613      	mov	r3, r2
 8006896:	80fb      	strh	r3, [r7, #6]
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(pKey);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(wKeyType);
    PH_LOG_HELPER_ALLOCATE_PARAMNAME(status);

    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_CRYPTOSYM);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <phCryptoSym_LoadKeyDirect+0x1a>
 800689e:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80068a2:	e024      	b.n	80068ee <phCryptoSym_LoadKeyDirect+0x64>
    PH_ASSERT_NULL_PARAM(pKey, PH_COMP_CRYPTOSYM);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <phCryptoSym_LoadKeyDirect+0x26>
 80068aa:	f24e 1321 	movw	r3, #57633	@ 0xe121
 80068ae:	e01e      	b.n	80068ee <phCryptoSym_LoadKeyDirect+0x64>
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(pKey), pKey, phCryptoSym_GetKeySize(wKeyType));
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_DEBUG, PH_LOG_VAR(wKeyType), &wKeyType);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Component Code Validation */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_CRYPTOSYM)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80068b8:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80068bc:	d004      	beq.n	80068c8 <phCryptoSym_LoadKeyDirect+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80068be:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80068c2:	82fb      	strh	r3, [r7, #22]

        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

        return status;
 80068c4:	8afb      	ldrh	r3, [r7, #22]
 80068c6:	e012      	b.n	80068ee <phCryptoSym_LoadKeyDirect+0x64>
    }

    /* Perform operation on active layer. */
    switch(PH_GET_COMPID(pDataParams))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d108      	bne.n	80068e4 <phCryptoSym_LoadKeyDirect+0x5a>
    {
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        case PH_CRYPTOSYM_SW_ID:
            status = phCryptoSym_Sw_LoadKeyDirect((phCryptoSym_Sw_DataParams_t *) pDataParams, pKey, wKeyType);
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	461a      	mov	r2, r3
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7fd fd09 	bl	80042f0 <phCryptoSym_Sw_LoadKeyDirect>
 80068de:	4603      	mov	r3, r0
 80068e0:	82fb      	strh	r3, [r7, #22]
            break;
 80068e2:	e003      	b.n	80068ec <phCryptoSym_LoadKeyDirect+0x62>
            status = phCryptoSym_mBedTLS_LoadKeyDirect((phCryptoSym_mBedTLS_DataParams_t *) pDataParams, pKey, wKeyType);
            break;
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_CRYPTOSYM);
 80068e4:	f24e 1320 	movw	r3, #57632	@ 0xe120
 80068e8:	82fb      	strh	r3, [r7, #22]
            break;
 80068ea:	bf00      	nop

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, PH_LOG_VAR(status), &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);

    return status;
 80068ec:	8afb      	ldrh	r3, [r7, #22]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <phKeyStore_Sw_Init>:
#include "phKeyStore_Sw_Int.h"

phStatus_t phKeyStore_Sw_Init(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, phKeyStore_Sw_KeyEntry_t * pKeyEntries,
    uint16_t wNoOfKeyEntries, phKeyStore_Sw_KeyVersionPair_t * pKeyVersionPairs, uint16_t wNoOfVersionPairs, phKeyStore_Sw_KUCEntry_t * pKUCEntries,
    uint16_t wNoOfKUCEntries)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b088      	sub	sp, #32
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	461a      	mov	r2, r3
 8006902:	460b      	mov	r3, r1
 8006904:	817b      	strh	r3, [r7, #10]
 8006906:	4613      	mov	r3, r2
 8006908:	813b      	strh	r3, [r7, #8]
    uint16_t wEntryIndex;
    uint16_t wPos;
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVersion;

    if(sizeof(phKeyStore_Sw_DataParams_t) != wSizeOfDataParams)
 800690a:	897b      	ldrh	r3, [r7, #10]
 800690c:	2b18      	cmp	r3, #24
 800690e:	d002      	beq.n	8006916 <phKeyStore_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_KEYSTORE);
 8006910:	f24e 2320 	movw	r3, #57888	@ 0xe220
 8006914:	e07b      	b.n	8006a0e <phKeyStore_Sw_Init+0x118>
    }
    PH_ASSERT_NULL(pDataParams);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <phKeyStore_Sw_Init+0x2a>
 800691c:	2321      	movs	r3, #33	@ 0x21
 800691e:	e076      	b.n	8006a0e <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyEntries);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <phKeyStore_Sw_Init+0x34>
 8006926:	2321      	movs	r3, #33	@ 0x21
 8006928:	e071      	b.n	8006a0e <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKeyVersionPairs);
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <phKeyStore_Sw_Init+0x3e>
 8006930:	2321      	movs	r3, #33	@ 0x21
 8006932:	e06c      	b.n	8006a0e <phKeyStore_Sw_Init+0x118>
    PH_ASSERT_NULL(pKUCEntries);
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <phKeyStore_Sw_Init+0x48>
 800693a:	2321      	movs	r3, #33	@ 0x21
 800693c:	e067      	b.n	8006a0e <phKeyStore_Sw_Init+0x118>

    /* Init private data */
    pDataParams->wId = PH_COMP_KEYSTORE | PH_KEYSTORE_SW_ID;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f24e 2201 	movw	r2, #57857	@ 0xe201
 8006944:	801a      	strh	r2, [r3, #0]
    pDataParams->pKeyEntries = pKeyEntries;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyVersionPairs = pKeyVersionPairs;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006950:	609a      	str	r2, [r3, #8]
    pDataParams->wNoOfKeyEntries = wNoOfKeyEntries;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	893a      	ldrh	r2, [r7, #8]
 8006956:	819a      	strh	r2, [r3, #12]
    pDataParams->wNoOfVersions = wNoOfVersionPairs;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800695c:	81da      	strh	r2, [r3, #14]
    pDataParams->pKUCEntries = pKUCEntries;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006962:	611a      	str	r2, [r3, #16]
    pDataParams->wNoOfKUCEntries = wNoOfKUCEntries;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006968:	829a      	strh	r2, [r3, #20]

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 800696a:	2300      	movs	r3, #0
 800696c:	83fb      	strh	r3, [r7, #30]
 800696e:	e02e      	b.n	80069ce <phKeyStore_Sw_Init+0xd8>
    {
        pDataParams->pKeyEntries[wEntryIndex].wKeyType = PH_KEYSTORE_INVALID_ID;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	8bfb      	ldrh	r3, [r7, #30]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800697e:	801a      	strh	r2, [r3, #0]
        pDataParams->pKeyEntries[wEntryIndex].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	8bfb      	ldrh	r3, [r7, #30]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800698e:	805a      	strh	r2, [r3, #2]

        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 8006990:	2300      	movs	r3, #0
 8006992:	83bb      	strh	r3, [r7, #28]
 8006994:	e013      	b.n	80069be <phKeyStore_Sw_Init+0xc8>
        {
            PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wEntryIndex, wPos, &pKeyVersion));
 8006996:	f107 0314 	add.w	r3, r7, #20
 800699a:	8bba      	ldrh	r2, [r7, #28]
 800699c:	8bf9      	ldrh	r1, [r7, #30]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f90a 	bl	8006bb8 <phKeyStore_Sw_GetKeyValuePtrPos>
 80069a4:	4603      	mov	r3, r0
 80069a6:	837b      	strh	r3, [r7, #26]
 80069a8:	8b7b      	ldrh	r3, [r7, #26]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <phKeyStore_Sw_Init+0xbc>
 80069ae:	8b7b      	ldrh	r3, [r7, #26]
 80069b0:	e02d      	b.n	8006a0e <phKeyStore_Sw_Init+0x118>
            pKeyVersion->wVersion = PH_KEYSTORE_DEFAULT_ID;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	841a      	strh	r2, [r3, #32]
        for(wPos = 0; wPos < pDataParams->wNoOfVersions; wPos++)
 80069b8:	8bbb      	ldrh	r3, [r7, #28]
 80069ba:	3301      	adds	r3, #1
 80069bc:	83bb      	strh	r3, [r7, #28]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	89db      	ldrh	r3, [r3, #14]
 80069c2:	8bba      	ldrh	r2, [r7, #28]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d3e6      	bcc.n	8006996 <phKeyStore_Sw_Init+0xa0>
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKeyEntries; wEntryIndex++)
 80069c8:	8bfb      	ldrh	r3, [r7, #30]
 80069ca:	3301      	adds	r3, #1
 80069cc:	83fb      	strh	r3, [r7, #30]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	899b      	ldrh	r3, [r3, #12]
 80069d2:	8bfa      	ldrh	r2, [r7, #30]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d3cb      	bcc.n	8006970 <phKeyStore_Sw_Init+0x7a>
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        }
    }

    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 80069d8:	2300      	movs	r3, #0
 80069da:	83fb      	strh	r3, [r7, #30]
 80069dc:	e011      	b.n	8006a02 <phKeyStore_Sw_Init+0x10c>
    {
        pDataParams->pKUCEntries[wEntryIndex].dwLimit = 0xFFFFFFFFU;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	8bfb      	ldrh	r3, [r7, #30]
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4413      	add	r3, r2
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	601a      	str	r2, [r3, #0]
        pDataParams->pKUCEntries[wEntryIndex].dwCurVal = 0;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	8bfb      	ldrh	r3, [r7, #30]
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	2200      	movs	r2, #0
 80069fa:	605a      	str	r2, [r3, #4]
    for(wEntryIndex = 0; wEntryIndex < pDataParams->wNoOfKUCEntries; wEntryIndex++)
 80069fc:	8bfb      	ldrh	r3, [r7, #30]
 80069fe:	3301      	adds	r3, #1
 8006a00:	83fb      	strh	r3, [r7, #30]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8a9b      	ldrh	r3, [r3, #20]
 8006a06:	8bfa      	ldrh	r2, [r7, #30]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d3e8      	bcc.n	80069de <phKeyStore_Sw_Init+0xe8>
    }

    return PH_ERR_SUCCESS;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <phKeyStore_Sw_FormatKeyEntry>:

/* Common Interfaces ------------------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_FormatKeyEntry(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wNewKeyType)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	807b      	strh	r3, [r7, #2]
 8006a22:	4613      	mov	r3, r2
 8006a24:	803b      	strh	r3, [r7, #0]
    phStatus_t wStatus;
    uint16_t   wPos;
    phKeyStore_Sw_KeyVersionPair_t * pKeyPair;
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	899b      	ldrh	r3, [r3, #12]
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d302      	bcc.n	8006a36 <phKeyStore_Sw_FormatKeyEntry+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006a30:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006a34:	e038      	b.n	8006aa8 <phKeyStore_Sw_FormatKeyEntry+0x92>
    }

    switch(wNewKeyType)
 8006a36:	883b      	ldrh	r3, [r7, #0]
 8006a38:	2b06      	cmp	r3, #6
 8006a3a:	d902      	bls.n	8006a42 <phKeyStore_Sw_FormatKeyEntry+0x2c>
        case PH_KEYSTORE_KEY_TYPE_ECC:
            break;
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006a3c:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006a40:	e032      	b.n	8006aa8 <phKeyStore_Sw_FormatKeyEntry+0x92>
            break;
 8006a42:	bf00      	nop
    }

    pDataParams->pKeyEntries[wKeyNo].wKeyType = wNewKeyType;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	883a      	ldrh	r2, [r7, #0]
 8006a50:	801a      	strh	r2, [r3, #0]

    /* Reset CEK to master Key */
    pDataParams->pKeyEntries[wKeyNo].wRefNoKUC = PH_KEYSTORE_INVALID_ID;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a60:	805a      	strh	r2, [r3, #2]

    /* Reset all keys to 0x00*/
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8006a62:	2300      	movs	r3, #0
 8006a64:	81fb      	strh	r3, [r7, #14]
 8006a66:	e019      	b.n	8006a9c <phKeyStore_Sw_FormatKeyEntry+0x86>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrPos(pDataParams, wKeyNo, wPos, &pKeyPair));
 8006a68:	f107 0308 	add.w	r3, r7, #8
 8006a6c:	89fa      	ldrh	r2, [r7, #14]
 8006a6e:	8879      	ldrh	r1, [r7, #2]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8a1 	bl	8006bb8 <phKeyStore_Sw_GetKeyValuePtrPos>
 8006a76:	4603      	mov	r3, r0
 8006a78:	81bb      	strh	r3, [r7, #12]
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <phKeyStore_Sw_FormatKeyEntry+0x6e>
 8006a80:	89bb      	ldrh	r3, [r7, #12]
 8006a82:	e011      	b.n	8006aa8 <phKeyStore_Sw_FormatKeyEntry+0x92>
        pKeyPair->wVersion = 0;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	841a      	strh	r2, [r3, #32]

        (void) memset(pKeyPair->pKey, 0x00, PH_KEYSTORE_MAX_KEY_SIZE);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f018 fa49 	bl	801ef28 <memset>
    for(wPos = 0; wPos < pDataParams->wNoOfVersions; ++wPos)
 8006a96:	89fb      	ldrh	r3, [r7, #14]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	81fb      	strh	r3, [r7, #14]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	89db      	ldrh	r3, [r3, #14]
 8006aa0:	89fa      	ldrh	r2, [r7, #14]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3e0      	bcc.n	8006a68 <phKeyStore_Sw_FormatKeyEntry+0x52>
        pKeyPair->wKeyPairType = PH_KEYSTORE_KEY_PAIR_INVALID;
        (void) memset(pKeyPair->pPubKey, 0x00, sizeof(pKeyPair->pPubKey));
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
    }

    return PH_ERR_SUCCESS;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <phKeyStore_Sw_SetKey>:
}

/* Interfaces for Symmetric Keys ------------------------------------------------------------------------------------------------------- */
phStatus_t phKeyStore_Sw_SetKey(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    uint16_t wKeyType, uint8_t * pNewKey, uint16_t wNewKeyVer)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	813b      	strh	r3, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
    phStatus_t wStatus;
    phKeyStore_Sw_KeyVersionPair_t * pKeyVer;
    PH_CHECK_SUCCESS_FCT(wStatus, phKeyStore_Sw_GetKeyValuePtrVersion(pDataParams, wKeyNo, wKeyVer, &pKeyVer));
 8006aca:	f107 0310 	add.w	r3, r7, #16
 8006ace:	893a      	ldrh	r2, [r7, #8]
 8006ad0:	8979      	ldrh	r1, [r7, #10]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f827 	bl	8006b26 <phKeyStore_Sw_GetKeyValuePtrVersion>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	82fb      	strh	r3, [r7, #22]
 8006adc:	8afb      	ldrh	r3, [r7, #22]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <phKeyStore_Sw_SetKey+0x36>
 8006ae2:	8afb      	ldrh	r3, [r7, #22]
 8006ae4:	e01b      	b.n	8006b1e <phKeyStore_Sw_SetKey+0x6e>

    /* Check that Key type matches with current Key Type format */
    if(pDataParams->pKeyEntries[wKeyNo].wKeyType != wKeyType)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	897b      	ldrh	r3, [r7, #10]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d002      	beq.n	8006afe <phKeyStore_Sw_SetKey+0x4e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006af8:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006afc:	e00f      	b.n	8006b1e <phKeyStore_Sw_SetKey+0x6e>
    }

    /* copy the key and version */
    (void) memcpy(pKeyVer->pKey, pNewKey, phKeyStore_GetKeySize(wKeyType));
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	461c      	mov	r4, r3
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f88d 	bl	8006c24 <phKeyStore_GetKeySize>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b10:	4620      	mov	r0, r4
 8006b12:	f018 fa88 	bl	801f026 <memcpy>
    pKeyVer->wVersion = wNewKeyVer;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006b1a:	841a      	strh	r2, [r3, #32]

    return PH_ERR_SUCCESS;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd90      	pop	{r4, r7, pc}

08006b26 <phKeyStore_Sw_GetKeyValuePtrVersion>:
    return PH_ERR_SUCCESS;
}

phStatus_t phKeyStore_Sw_GetKeyValuePtrVersion(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wKeyVer,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVer)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b087      	sub	sp, #28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	817b      	strh	r3, [r7, #10]
 8006b34:	4613      	mov	r3, r2
 8006b36:	813b      	strh	r3, [r7, #8]
    uint16_t bPos;
    *pKeyVer = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	899b      	ldrh	r3, [r3, #12]
 8006b42:	897a      	ldrh	r2, [r7, #10]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <phKeyStore_Sw_GetKeyValuePtrVersion+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006b48:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006b4c:	e02e      	b.n	8006bac <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }

    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	82fb      	strh	r3, [r7, #22]
 8006b52:	e01b      	b.n	8006b8c <phKeyStore_Sw_GetKeyValuePtrVersion+0x66>
    {
        *pKeyVer = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + bPos)];
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	89db      	ldrh	r3, [r3, #14]
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	fb11 f303 	smulbb	r3, r1, r3
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	8afb      	ldrh	r3, [r7, #22]
 8006b68:	440b      	add	r3, r1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	440b      	add	r3, r1
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
        if((*pKeyVer)->wVersion == wKeyVer)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	8c1b      	ldrh	r3, [r3, #32]
 8006b80:	893a      	ldrh	r2, [r7, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d008      	beq.n	8006b98 <phKeyStore_Sw_GetKeyValuePtrVersion+0x72>
    for(bPos = 0; bPos < pDataParams->wNoOfVersions; bPos++)
 8006b86:	8afb      	ldrh	r3, [r7, #22]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	82fb      	strh	r3, [r7, #22]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	89db      	ldrh	r3, [r3, #14]
 8006b90:	8afa      	ldrh	r2, [r7, #22]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d3de      	bcc.n	8006b54 <phKeyStore_Sw_GetKeyValuePtrVersion+0x2e>
 8006b96:	e000      	b.n	8006b9a <phKeyStore_Sw_GetKeyValuePtrVersion+0x74>
        {
            break;
 8006b98:	bf00      	nop
        }
    }
    /* No entry found */
    if(bPos == pDataParams->wNoOfVersions)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	89db      	ldrh	r3, [r3, #14]
 8006b9e:	8afa      	ldrh	r2, [r7, #22]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d102      	bne.n	8006baa <phKeyStore_Sw_GetKeyValuePtrVersion+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006ba4:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006ba8:	e000      	b.n	8006bac <phKeyStore_Sw_GetKeyValuePtrVersion+0x86>
    }
    return PH_ERR_SUCCESS;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <phKeyStore_Sw_GetKeyValuePtrPos>:
}
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */

phStatus_t phKeyStore_Sw_GetKeyValuePtrPos(phKeyStore_Sw_DataParams_t * pDataParams, uint16_t wKeyNo, uint16_t wPos,
    phKeyStore_Sw_KeyVersionPair_t ** pKeyVersion)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	817b      	strh	r3, [r7, #10]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	813b      	strh	r3, [r7, #8]
    *pKeyVersion = NULL;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
    /* Overflow checks */
    if(wKeyNo >= pDataParams->wNoOfKeyEntries)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	899b      	ldrh	r3, [r3, #12]
 8006bd4:	897a      	ldrh	r2, [r7, #10]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <phKeyStore_Sw_GetKeyValuePtrPos+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006bda:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006bde:	e01b      	b.n	8006c18 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    /* Overflow checks */
    if(wPos >= pDataParams->wNoOfVersions)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	89db      	ldrh	r3, [r3, #14]
 8006be4:	893a      	ldrh	r2, [r7, #8]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d302      	bcc.n	8006bf0 <phKeyStore_Sw_GetKeyValuePtrPos+0x38>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_KEYSTORE);
 8006bea:	f24e 2321 	movw	r3, #57889	@ 0xe221
 8006bee:	e013      	b.n	8006c18 <phKeyStore_Sw_GetKeyValuePtrPos+0x60>
    }

    *pKeyVersion = &pDataParams->pKeyVersionPairs[(((uint16_t)(((uint32_t)wKeyNo * pDataParams->wNoOfVersions)) & 0xFFFF) + wPos)];
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	89db      	ldrh	r3, [r3, #14]
 8006bf8:	8979      	ldrh	r1, [r7, #10]
 8006bfa:	fb11 f303 	smulbb	r3, r1, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4619      	mov	r1, r3
 8006c02:	893b      	ldrh	r3, [r7, #8]
 8006c04:	440b      	add	r3, r1
 8006c06:	4619      	mov	r1, r3
 8006c08:	460b      	mov	r3, r1
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	440b      	add	r3, r1
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <phKeyStore_GetKeySize>:
#endif /* NXPBUILD__PH_KEYSTORE_ASYM */
#endif /* NXPRDLIB_REM_GEN_INTFS  */

/* Utility Interfaces ------------------------------------------------------------------------------------------------------------------ */
uint8_t phKeyStore_GetKeySize(uint16_t wKeyType)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	80fb      	strh	r3, [r7, #6]
    switch(wKeyType)
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d81b      	bhi.n	8006c6c <phKeyStore_GetKeySize+0x48>
 8006c34:	a201      	add	r2, pc, #4	@ (adr r2, 8006c3c <phKeyStore_GetKeySize+0x18>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c65 	.word	0x08006c65
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c5d 	.word	0x08006c5d
 8006c4c:	08006c61 	.word	0x08006c61
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c59 	.word	0x08006c59
    {
        case PH_KEYSTORE_KEY_TYPE_MIFARE:
            /* 6 bytes for key A + 6 bytes for key B */
            return 12;
 8006c58:	230c      	movs	r3, #12
 8006c5a:	e008      	b.n	8006c6e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_DES:
            return 8;
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	e006      	b.n	8006c6e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_2K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES128:
            return 16;
 8006c60:	2310      	movs	r3, #16
 8006c62:	e004      	b.n	8006c6e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_3K3DES:
        case PH_KEYSTORE_KEY_TYPE_AES192:
            return 24;
 8006c64:	2318      	movs	r3, #24
 8006c66:	e002      	b.n	8006c6e <phKeyStore_GetKeySize+0x4a>

        case PH_KEYSTORE_KEY_TYPE_AES256:
            return 32;
 8006c68:	2320      	movs	r3, #32
 8006c6a:	e000      	b.n	8006c6e <phKeyStore_GetKeySize+0x4a>

        default:
            return 0;
 8006c6c:	2300      	movs	r3, #0
    }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop

08006c7c <phNfcLib_SetContext>:

/*******************************************************************************
**   Function Definitions
*******************************************************************************/
phNfcLib_Status_t phNfcLib_SetContext(phNfcLib_AppContext_t * pAppContext)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
    if (pAppContext == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <phNfcLib_SetContext+0x12>
    {
        return PH_NFCLIB_STATUS_INVALID_PARAMETER;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e010      	b.n	8006cb0 <phNfcLib_SetContext+0x34>
    }

    gphNfcLib_Params.pBal = pAppContext->pBalDataparams;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <phNfcLib_SetContext+0x40>)
 8006c94:	6053      	str	r3, [r2, #4]
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
    gphNfcLib_Params.pWtxCallback = (pWtxTimerCallback)pAppContext->pWtxCallback;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <phNfcLib_SetContext+0x40>)
 8006c9e:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

#ifdef NXPBUILD__PHPAL_I18092MT_SW
    gphNfcLib_Params.pRtoxCallback = (pRtoxTimerCallback)pAppContext->pRtoxCallback;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b04      	ldr	r3, [pc, #16]	@ (8006cbc <phNfcLib_SetContext+0x40>)
 8006caa:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    return PH_NFCLIB_STATUS_SUCCESS;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20000574 	.word	0x20000574

08006cc0 <phNfcLib_CommonLayer_Init>:

/**
* This function will initialize Reader Library Common Layer Components
*/
static phStatus_t phNfcLib_CommonLayer_Init(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af04      	add	r7, sp, #16
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	80fb      	strh	r3, [r7, #6]
    do
    {
#ifdef NXPBUILD__PH_KEYSTORE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_Sw_Init(
 8006cca:	2301      	movs	r3, #1
 8006ccc:	9303      	str	r3, [sp, #12]
 8006cce:	4b3c      	ldr	r3, [pc, #240]	@ (8006dc0 <phNfcLib_CommonLayer_Init+0x100>)
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8006dc4 <phNfcLib_CommonLayer_Init+0x104>)
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	2308      	movs	r3, #8
 8006cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8006dc8 <phNfcLib_CommonLayer_Init+0x108>)
 8006cde:	2118      	movs	r1, #24
 8006ce0:	483a      	ldr	r0, [pc, #232]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006ce2:	f7ff fe08 	bl	80068f6 <phKeyStore_Sw_Init>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	80fb      	strh	r3, [r7, #6]
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d162      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
            NUMBER_OF_KUCENTRIES));

        /* load a Key to the Store */
        /* Note: If You use Key number 0x00, be aware that in SAM
                this Key is the 'Host authentication key' !!! */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phKeyStore_FormatKeyEntry(PTR_sKeyStore, 1, 0x6));
 8006cf0:	2206      	movs	r2, #6
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4835      	ldr	r0, [pc, #212]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006cf6:	f7ff fe8e 	bl	8006a16 <phKeyStore_Sw_FormatKeyEntry>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	80fb      	strh	r3, [r7, #6]
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d158      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>

        /* Set Key Store */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,  phKeyStore_SetKey(PTR_sKeyStore, 1, 0, 0x6, &gphNfcLib_Key[0], 0));
 8006d04:	2300      	movs	r3, #0
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	4b31      	ldr	r3, [pc, #196]	@ (8006dd0 <phNfcLib_CommonLayer_Init+0x110>)
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2306      	movs	r3, #6
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2101      	movs	r1, #1
 8006d12:	482e      	ldr	r0, [pc, #184]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006d14:	f7ff fecc 	bl	8006ab0 <phKeyStore_Sw_SetKey>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	80fb      	strh	r3, [r7, #6]
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d149      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||         \
    defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || \
    defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW)
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* init. crypto */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006d22:	4a2a      	ldr	r2, [pc, #168]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006d24:	2140      	movs	r1, #64	@ 0x40
 8006d26:	482b      	ldr	r0, [pc, #172]	@ (8006dd4 <phNfcLib_CommonLayer_Init+0x114>)
 8006d28:	f7fc ffed 	bl	8003d06 <phCryptoSym_Sw_Init>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	80fb      	strh	r3, [r7, #6]
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d13f      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
            PTR_aAddData_Buffer,
            PRS_INT_BUFFER_SIZE));
#endif /* NXPBUILD__PH_CRYPTOSYM_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006d36:	4a25      	ldr	r2, [pc, #148]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006d38:	2140      	movs	r1, #64	@ 0x40
 8006d3a:	4827      	ldr	r0, [pc, #156]	@ (8006dd8 <phNfcLib_CommonLayer_Init+0x118>)
 8006d3c:	f7fc ffe3 	bl	8003d06 <phCryptoSym_Sw_Init>
 8006d40:	4603      	mov	r3, r0
 8006d42:	80fb      	strh	r3, [r7, #6]
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d135      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PH_CRYPTOASYM_MBEDTLS */

#ifdef NXPBUILD__PHAL_MFPEVX_SW
#ifdef NXPBUILD__PH_CRYPTOSYM_SW
        /* Initialize CryptoSym for key diversification. */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006d4a:	4a20      	ldr	r2, [pc, #128]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006d4c:	2140      	movs	r1, #64	@ 0x40
 8006d4e:	4823      	ldr	r0, [pc, #140]	@ (8006ddc <phNfcLib_CommonLayer_Init+0x11c>)
 8006d50:	f7fc ffd9 	bl	8003d06 <phCryptoSym_Sw_Init>
 8006d54:	4603      	mov	r3, r0
 8006d56:	80fb      	strh	r3, [r7, #6]
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d12b      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) || \
    defined(NXPBUILD__PHAL_MFDFLIGHT_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
        /* Initialize TMI utility. */
        memset ( &aTmi_Buffer[0], 0x00, sizeof(aTmi_Buffer));
 8006d5e:	22ff      	movs	r2, #255	@ 0xff
 8006d60:	2100      	movs	r1, #0
 8006d62:	481f      	ldr	r0, [pc, #124]	@ (8006de0 <phNfcLib_CommonLayer_Init+0x120>)
 8006d64:	f018 f8e0 	bl	801ef28 <memset>
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phTMIUtils_Init(
 8006d68:	22ff      	movs	r2, #255	@ 0xff
 8006d6a:	491d      	ldr	r1, [pc, #116]	@ (8006de0 <phNfcLib_CommonLayer_Init+0x120>)
 8006d6c:	481d      	ldr	r0, [pc, #116]	@ (8006de4 <phNfcLib_CommonLayer_Init+0x124>)
 8006d6e:	f000 fc49 	bl	8007604 <phTMIUtils_Init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	80fb      	strh	r3, [r7, #6]
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11c      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
#endif /* defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFPEVX_SW) ||
          defined(NXPBUILD__PHAL_MFNTAG42XDNA_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||
          defined(NXPBUILD__PHAL_MFDUOX_SW) || defined(NXPBUILD__PHAL_NTAGXDNA_SW) */

#ifdef NXPBUILD__PH_CRYPTORNG_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoSym_Sw_Init(
 8006d7c:	4a13      	ldr	r2, [pc, #76]	@ (8006dcc <phNfcLib_CommonLayer_Init+0x10c>)
 8006d7e:	2140      	movs	r1, #64	@ 0x40
 8006d80:	4819      	ldr	r0, [pc, #100]	@ (8006de8 <phNfcLib_CommonLayer_Init+0x128>)
 8006d82:	f7fc ffc0 	bl	8003d06 <phCryptoSym_Sw_Init>
 8006d86:	4603      	mov	r3, r0
 8006d88:	80fb      	strh	r3, [r7, #6]
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d112      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
            &sCryptoSymRng,
            sizeof(phCryptoSym_Sw_DataParams_t),
            PTR_sKeyStore));

        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Sw_Init(
 8006d90:	4a15      	ldr	r2, [pc, #84]	@ (8006de8 <phNfcLib_CommonLayer_Init+0x128>)
 8006d92:	2120      	movs	r1, #32
 8006d94:	4815      	ldr	r0, [pc, #84]	@ (8006dec <phNfcLib_CommonLayer_Init+0x12c>)
 8006d96:	f7fc fccd 	bl	8003734 <phCryptoRng_Sw_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <phNfcLib_CommonLayer_Init+0xf6>
            PTR_sCryptoRng,
            sizeof(phCryptoRng_mBedTLS_DataParams_t)));
#endif /* NXPBUILD__PH_CRYPTORNG_MBEDTLS */

#ifdef NXPBUILD__PH_CRYPTORNG
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phCryptoRng_Seed(
 8006da4:	2208      	movs	r2, #8
 8006da6:	4912      	ldr	r1, [pc, #72]	@ (8006df0 <phNfcLib_CommonLayer_Init+0x130>)
 8006da8:	4810      	ldr	r0, [pc, #64]	@ (8006dec <phNfcLib_CommonLayer_Init+0x12c>)
 8006daa:	f7fc ff73 	bl	8003c94 <phCryptoRng_Seed>
 8006dae:	4603      	mov	r3, r0
 8006db0:	80fb      	strh	r3, [r7, #6]
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	2b00      	cmp	r3, #0
            &aTmi_Buffer[0],
            TMI_BUFFER_SIZE));
#endif /* defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) */
    }while(FALSE);

    return wStatus;
 8006db6:	88fb      	ldrh	r3, [r7, #6]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20001868 	.word	0x20001868
 8006dc4:	20001648 	.word	0x20001648
 8006dc8:	20001628 	.word	0x20001628
 8006dcc:	20000710 	.word	0x20000710
 8006dd0:	20000050 	.word	0x20000050
 8006dd4:	20000db4 	.word	0x20000db4
 8006dd8:	20000df4 	.word	0x20000df4
 8006ddc:	20000e34 	.word	0x20000e34
 8006de0:	20001244 	.word	0x20001244
 8006de4:	200015d4 	.word	0x200015d4
 8006de8:	200015e8 	.word	0x200015e8
 8006dec:	20000e74 	.word	0x20000e74
 8006df0:	2000123c 	.word	0x2000123c

08006df4 <phNfcLib_PAL_Init>:

/**
* This function will initialize Reader LIbrary PAL Components
*/
static phStatus_t phNfcLib_PAL_Init(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize the I14443-3A PAL layer */
#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3a_Sw_Init(
 8006dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e00:	2118      	movs	r1, #24
 8006e02:	483c      	ldr	r0, [pc, #240]	@ (8006ef4 <phNfcLib_PAL_Init+0x100>)
 8006e04:	f00d f926 	bl	8014054 <phpalI14443p3a_Sw_Init>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	80fb      	strh	r3, [r7, #6]
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d169      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

        /* Initialize the I14443-3B PAL  component */
#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p3b_Sw_Init(
 8006e12:	4a37      	ldr	r2, [pc, #220]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e14:	212c      	movs	r1, #44	@ 0x2c
 8006e16:	4838      	ldr	r0, [pc, #224]	@ (8006ef8 <phNfcLib_PAL_Init+0x104>)
 8006e18:	f00d ff1c 	bl	8014c54 <phpalI14443p3b_Sw_Init>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	80fb      	strh	r3, [r7, #6]
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d15f      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

        /* Initialize the I14443-4A PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4a_Sw_Init(
 8006e26:	4a32      	ldr	r2, [pc, #200]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e28:	2114      	movs	r1, #20
 8006e2a:	4834      	ldr	r0, [pc, #208]	@ (8006efc <phNfcLib_PAL_Init+0x108>)
 8006e2c:	f00e fe9e 	bl	8015b6c <phpalI14443p4a_Sw_Init>
 8006e30:	4603      	mov	r3, r0
 8006e32:	80fb      	strh	r3, [r7, #6]
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d155      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

        /* Initialize the I14443-4 PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI14443p4_Sw_Init(
 8006e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e3c:	2114      	movs	r1, #20
 8006e3e:	4830      	ldr	r0, [pc, #192]	@ (8006f00 <phNfcLib_PAL_Init+0x10c>)
 8006e40:	f00e fd7a 	bl	8015938 <phpalI14443p4_Sw_Init>
 8006e44:	4603      	mov	r3, r0
 8006e46:	80fb      	strh	r3, [r7, #6]
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d14b      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

        /* Initialize the MIFARE product PAL component */
#ifdef NXPBUILD__PHPAL_MIFARE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalMifare_Sw_Init(
 8006e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f00 <phNfcLib_PAL_Init+0x10c>)
 8006e50:	4a27      	ldr	r2, [pc, #156]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e52:	210c      	movs	r1, #12
 8006e54:	482b      	ldr	r0, [pc, #172]	@ (8006f04 <phNfcLib_PAL_Init+0x110>)
 8006e56:	f010 fc84 	bl	8017762 <phpalMifare_Sw_Init>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	80fb      	strh	r3, [r7, #6]
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d140      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
        ));
#endif /* NXPBUILD__PHPAL_MIFARE_SW */

        /* Initialize PAL FeliCa PAL component */
#ifdef NXPBUILD__PHPAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalFelica_Sw_Init(
 8006e64:	4a22      	ldr	r2, [pc, #136]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e66:	2120      	movs	r1, #32
 8006e68:	4827      	ldr	r0, [pc, #156]	@ (8006f08 <phNfcLib_PAL_Init+0x114>)
 8006e6a:	f00c fe99 	bl	8013ba0 <phpalFelica_Sw_Init>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	80fb      	strh	r3, [r7, #6]
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d136      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_FELICA_SW */

        /* Initialize the 15693 PAL component */
#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalSli15693_Sw_Init(
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e7a:	211c      	movs	r1, #28
 8006e7c:	4823      	ldr	r0, [pc, #140]	@ (8006f0c <phNfcLib_PAL_Init+0x118>)
 8006e7e:	f010 fc99 	bl	80177b4 <phpalSli15693_Sw_Init>
 8006e82:	4603      	mov	r3, r0
 8006e84:	80fb      	strh	r3, [r7, #6]
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d12c      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

        /* Initialize the 1800p3m3 PAL component */
#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phpalI18000p3m3_Sw_Init(
 8006e8c:	4a18      	ldr	r2, [pc, #96]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006e8e:	210c      	movs	r1, #12
 8006e90:	481f      	ldr	r0, [pc, #124]	@ (8006f10 <phNfcLib_PAL_Init+0x11c>)
 8006e92:	f00f fc46 	bl	8016722 <phpalI18000p3m3_Sw_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	80fb      	strh	r3, [r7, #6]
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d122      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_EPCUID_SW */

        /* Initialize 18092 Initiator PAL component */
#ifdef NXPBUILD__PHPAL_I18092MPI_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mPI_Sw_Init(
 8006ea0:	4a13      	ldr	r2, [pc, #76]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006ea2:	2124      	movs	r1, #36	@ 0x24
 8006ea4:	481b      	ldr	r0, [pc, #108]	@ (8006f14 <phNfcLib_PAL_Init+0x120>)
 8006ea6:	f00f fe23 	bl	8016af0 <phpalI18092mPI_Sw_Init>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	80fb      	strh	r3, [r7, #6]
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d118      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

        /* Initialize 14443-4mC Target PAL component */
#ifdef NXPBUILD__PHPAL_I14443P4MC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI14443p4mC_Sw_Init(
 8006eb4:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <phNfcLib_PAL_Init+0x124>)
 8006eb6:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8006eba:	4a0d      	ldr	r2, [pc, #52]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006ebc:	2134      	movs	r1, #52	@ 0x34
 8006ebe:	4817      	ldr	r0, [pc, #92]	@ (8006f1c <phNfcLib_PAL_Init+0x128>)
 8006ec0:	f00f fb88 	bl	80165d4 <phpalI14443p4mC_Sw_Init>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	80fb      	strh	r3, [r7, #6]
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <phNfcLib_PAL_Init+0xf2>
            ));
#endif /* NXPBUILD__PHPAL_I14443P4MC_SW */

        /* Initialize 18092 Target PAL component */
#ifdef NXPBUILD__PHPAL_I18092MT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus,phpalI18092mT_Sw_Init(
 8006ece:	4b12      	ldr	r3, [pc, #72]	@ (8006f18 <phNfcLib_PAL_Init+0x124>)
 8006ed0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8006ed4:	4a06      	ldr	r2, [pc, #24]	@ (8006ef0 <phNfcLib_PAL_Init+0xfc>)
 8006ed6:	214c      	movs	r1, #76	@ 0x4c
 8006ed8:	4811      	ldr	r0, [pc, #68]	@ (8006f20 <phNfcLib_PAL_Init+0x12c>)
 8006eda:	f010 fb91 	bl	8017600 <phpalI18092mT_Sw_Init>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80fb      	strh	r3, [r7, #6]
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b00      	cmp	r3, #0
            ));
#endif /* NXPBUILD__PHPAL_I18092MT_SW */

    }while(FALSE);

    return wStatus;
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	2000057c 	.word	0x2000057c
 8006ef4:	2000072c 	.word	0x2000072c
 8006ef8:	20000744 	.word	0x20000744
 8006efc:	20000770 	.word	0x20000770
 8006f00:	20000784 	.word	0x20000784
 8006f04:	2000088c 	.word	0x2000088c
 8006f08:	200007c0 	.word	0x200007c0
 8006f0c:	20000798 	.word	0x20000798
 8006f10:	200007b4 	.word	0x200007b4
 8006f14:	200007e0 	.word	0x200007e0
 8006f18:	20000574 	.word	0x20000574
 8006f1c:	20000854 	.word	0x20000854
 8006f20:	20000804 	.word	0x20000804

08006f24 <phNfcLib_AL_Init>:

/**
* This function will initialize the Reader Library AL Components
*/
static phStatus_t phNfcLib_AL_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af06      	add	r7, sp, #24
    phStatus_t wStatus = PH_ERR_SUCCESS;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	80fb      	strh	r3, [r7, #6]

    do
    {
        /* Initialize AL FeliCa component */
#ifdef NXPBUILD__PHAL_FELICA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalFelica_Sw_Init(
 8006f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800711c <phNfcLib_AL_Init+0x1f8>)
 8006f30:	210c      	movs	r1, #12
 8006f32:	487b      	ldr	r0, [pc, #492]	@ (8007120 <phNfcLib_AL_Init+0x1fc>)
 8006f34:	f005 fc14 	bl	800c760 <phalFelica_Sw_Init>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	80fb      	strh	r3, [r7, #6]
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 80e6 	bne.w	8007110 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalFelica));
#endif /* NXPBUILD__PHAL_FELICA_SW */

        /* Initialize AL MIFARE Classic contactless IC component */
#ifdef NXPBUILD__PHAL_MFC_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfc_Sw_Init(
 8006f44:	4b77      	ldr	r3, [pc, #476]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 8006f46:	4a78      	ldr	r2, [pc, #480]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 8006f48:	210c      	movs	r1, #12
 8006f4a:	4878      	ldr	r0, [pc, #480]	@ (800712c <phNfcLib_AL_Init+0x208>)
 8006f4c:	f005 fd60 	bl	800ca10 <phalMfc_Sw_Init>
 8006f50:	4603      	mov	r3, r0
 8006f52:	80fb      	strh	r3, [r7, #6]
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 80da 	bne.w	8007110 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_MFC_SW */

        /* Initialize AL MIFARE Ultralight contactless IC component */
#ifdef NXPBUILD__PHAL_MFUL_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMful_Sw_Init(
 8006f5c:	4b74      	ldr	r3, [pc, #464]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	2300      	movs	r3, #0
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4b6f      	ldr	r3, [pc, #444]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 8006f66:	4a70      	ldr	r2, [pc, #448]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 8006f68:	211c      	movs	r1, #28
 8006f6a:	4872      	ldr	r0, [pc, #456]	@ (8007134 <phNfcLib_AL_Init+0x210>)
 8006f6c:	f006 f850 	bl	800d010 <phalMful_Sw_Init>
 8006f70:	4603      	mov	r3, r0
 8006f72:	80fb      	strh	r3, [r7, #6]
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f040 80ca 	bne.w	8007110 <phNfcLib_AL_Init+0x1ec>
            PTR_sCryptoRng));
#endif /* NXPBUILD__PHAL_MFUL_SW */

        /* Initialize AL MIFARE DESFire contactless IC component */
#ifdef NXPBUILD__PHAL_MFDF_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdf_Sw_Init(
 8006f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8007138 <phNfcLib_AL_Init+0x214>)
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	4b6b      	ldr	r3, [pc, #428]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4b66      	ldr	r3, [pc, #408]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 8006f8a:	4a67      	ldr	r2, [pc, #412]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 8006f8c:	2168      	movs	r1, #104	@ 0x68
 8006f8e:	486b      	ldr	r0, [pc, #428]	@ (800713c <phNfcLib_AL_Init+0x218>)
 8006f90:	f005 fd67 	bl	800ca62 <phalMfdf_Sw_Init>
 8006f94:	4603      	mov	r3, r0
 8006f96:	80fb      	strh	r3, [r7, #6]
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 80b8 	bne.w	8007110 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDF_SW */

#ifdef NXPBUILD__PHAL_VCA_SW
        /* Initialize the VCA component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_Sw_Init(
 8006fa0:	4b67      	ldr	r3, [pc, #412]	@ (8007140 <phNfcLib_AL_Init+0x21c>)
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	4a67      	ldr	r2, [pc, #412]	@ (8007144 <phNfcLib_AL_Init+0x220>)
 8006fa6:	8812      	ldrh	r2, [r2, #0]
 8006fa8:	9205      	str	r2, [sp, #20]
 8006faa:	4a67      	ldr	r2, [pc, #412]	@ (8007148 <phNfcLib_AL_Init+0x224>)
 8006fac:	9204      	str	r2, [sp, #16]
 8006fae:	9303      	str	r3, [sp, #12]
 8006fb0:	4b66      	ldr	r3, [pc, #408]	@ (800714c <phNfcLib_AL_Init+0x228>)
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	4b65      	ldr	r3, [pc, #404]	@ (8007150 <phNfcLib_AL_Init+0x22c>)
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4b59      	ldr	r3, [pc, #356]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 8006fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 8006fc0:	2154      	movs	r1, #84	@ 0x54
 8006fc2:	4864      	ldr	r0, [pc, #400]	@ (8007154 <phNfcLib_AL_Init+0x230>)
 8006fc4:	f006 f959 	bl	800d27a <phalVca_Sw_Init>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	80fb      	strh	r3, [r7, #6]
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 809e 	bne.w	8007110 <phNfcLib_AL_Init+0x1ec>
            wNumCardTableStorageEntries));
#endif /* NXPBUILD__PHAL_VCA_SW */

        /* Initialize AL MIFARE DESFire EVx contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfEVx_Sw_Init(
 8006fd4:	4b58      	ldr	r3, [pc, #352]	@ (8007138 <phNfcLib_AL_Init+0x214>)
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8007154 <phNfcLib_AL_Init+0x230>)
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8007158 <phNfcLib_AL_Init+0x234>)
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	4b53      	ldr	r3, [pc, #332]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 8006fe2:	9302      	str	r3, [sp, #8]
 8006fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800715c <phNfcLib_AL_Init+0x238>)
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	4b59      	ldr	r3, [pc, #356]	@ (8007150 <phNfcLib_AL_Init+0x22c>)
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	4b4d      	ldr	r3, [pc, #308]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 8006fee:	4a4e      	ldr	r2, [pc, #312]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 8006ff0:	21b4      	movs	r1, #180	@ 0xb4
 8006ff2:	485b      	ldr	r0, [pc, #364]	@ (8007160 <phNfcLib_AL_Init+0x23c>)
 8006ff4:	f005 fd9f 	bl	800cb36 <phalMfdfEVx_Sw_Init>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	80fb      	strh	r3, [r7, #6]
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 8086 	bne.w	8007110 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            &sVca,
            &gphNfcLib_Params.sHal));

#ifdef NXPBUILD__PHAL_VCA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 8007004:	4956      	ldr	r1, [pc, #344]	@ (8007160 <phNfcLib_AL_Init+0x23c>)
 8007006:	4853      	ldr	r0, [pc, #332]	@ (8007154 <phNfcLib_AL_Init+0x230>)
 8007008:	f006 faad 	bl	800d566 <phalVca_SetApplicationType>
 800700c:	4603      	mov	r3, r0
 800700e:	80fb      	strh	r3, [r7, #6]
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d17c      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA_SW */
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */

        /* Initialize AL MIFARE DESFire Light contactless IC component */
#ifdef NXPBUILD__PHAL_MFDFLIGHT_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfdfLight_Sw_Init(
 8007016:	4b48      	ldr	r3, [pc, #288]	@ (8007138 <phNfcLib_AL_Init+0x214>)
 8007018:	9304      	str	r3, [sp, #16]
 800701a:	4b4f      	ldr	r3, [pc, #316]	@ (8007158 <phNfcLib_AL_Init+0x234>)
 800701c:	9303      	str	r3, [sp, #12]
 800701e:	4b44      	ldr	r3, [pc, #272]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 8007020:	9302      	str	r3, [sp, #8]
 8007022:	4b4e      	ldr	r3, [pc, #312]	@ (800715c <phNfcLib_AL_Init+0x238>)
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	4b4a      	ldr	r3, [pc, #296]	@ (8007150 <phNfcLib_AL_Init+0x22c>)
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4b3e      	ldr	r3, [pc, #248]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 800702c:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 800702e:	21ac      	movs	r1, #172	@ 0xac
 8007030:	484c      	ldr	r0, [pc, #304]	@ (8007164 <phNfcLib_AL_Init+0x240>)
 8007032:	f005 fe32 	bl	800cc9a <phalMfdfLight_Sw_Init>
 8007036:	4603      	mov	r3, r0
 8007038:	80fb      	strh	r3, [r7, #6]
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d167      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.sHal));
#endif /* NXPBUILD__PHAL_MFDFLIGHT_SW */

        /* Initialize AL MIFARE Plus Ev1 contactless IC component */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfpEVx_Sw_Init (
 8007040:	4b44      	ldr	r3, [pc, #272]	@ (8007154 <phNfcLib_AL_Init+0x230>)
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	4b44      	ldr	r3, [pc, #272]	@ (8007158 <phNfcLib_AL_Init+0x234>)
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	4b47      	ldr	r3, [pc, #284]	@ (8007168 <phNfcLib_AL_Init+0x244>)
 800704a:	9303      	str	r3, [sp, #12]
 800704c:	4b38      	ldr	r3, [pc, #224]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 800704e:	9302      	str	r3, [sp, #8]
 8007050:	4b42      	ldr	r3, [pc, #264]	@ (800715c <phNfcLib_AL_Init+0x238>)
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	4b3e      	ldr	r3, [pc, #248]	@ (8007150 <phNfcLib_AL_Init+0x22c>)
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4b32      	ldr	r3, [pc, #200]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 800705a:	4a33      	ldr	r2, [pc, #204]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 800705c:	2184      	movs	r1, #132	@ 0x84
 800705e:	4843      	ldr	r0, [pc, #268]	@ (800716c <phNfcLib_AL_Init+0x248>)
 8007060:	f005 fed9 	bl	800ce16 <phalMfpEVx_Sw_Init>
 8007064:	4603      	mov	r3, r0
 8007066:	80fb      	strh	r3, [r7, #6]
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d150      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
            &sTMI,
            PH_NFCLIB_VCA_DATAPARAMS));

#ifdef NXPBUILD__PHAL_VCA
        /* Initialize the MIFARE Plus EV1 component */
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalVca_SetApplicationType(
 800706e:	493f      	ldr	r1, [pc, #252]	@ (800716c <phNfcLib_AL_Init+0x248>)
 8007070:	4838      	ldr	r0, [pc, #224]	@ (8007154 <phNfcLib_AL_Init+0x230>)
 8007072:	f006 fa78 	bl	800d566 <phalVca_SetApplicationType>
 8007076:	4603      	mov	r3, r0
 8007078:	80fb      	strh	r3, [r7, #6]
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d147      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
#endif /* NXPBUILD__PHAL_VCA */
#endif /* NXPBUILD__PHAL_MFPEVX_SW */

        /* Initialize AL MIFARE NTAG 42x DNA contactless IC component */
#ifdef NXPBUILD__PHAL_MFNTAG42XDNA_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalMfNtag42XDna_Sw_Init(
 8007080:	4b2d      	ldr	r3, [pc, #180]	@ (8007138 <phNfcLib_AL_Init+0x214>)
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	4b2a      	ldr	r3, [pc, #168]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	4b34      	ldr	r3, [pc, #208]	@ (800715c <phNfcLib_AL_Init+0x238>)
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	4b30      	ldr	r3, [pc, #192]	@ (8007150 <phNfcLib_AL_Init+0x22c>)
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4b24      	ldr	r3, [pc, #144]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 8007092:	4a25      	ldr	r2, [pc, #148]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 8007094:	21a8      	movs	r1, #168	@ 0xa8
 8007096:	4836      	ldr	r0, [pc, #216]	@ (8007170 <phNfcLib_AL_Init+0x24c>)
 8007098:	f005 fc06 	bl	800c8a8 <phalMfNtag42XDna_Sw_Init>
 800709c:	4603      	mov	r3, r0
 800709e:	80fb      	strh	r3, [r7, #6]
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d134      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
                PHAL_MFDUOX_PRS_BUFFER_SIZE_MINIMUM));
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

        /* Initialize the T1T AL component */
#ifdef NXPBUILD__PHAL_T1T_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalT1T_Sw_Init(
 80070a6:	4a33      	ldr	r2, [pc, #204]	@ (8007174 <phNfcLib_AL_Init+0x250>)
 80070a8:	2110      	movs	r1, #16
 80070aa:	4833      	ldr	r0, [pc, #204]	@ (8007178 <phNfcLib_AL_Init+0x254>)
 80070ac:	f005 ffeb 	bl	800d086 <phalT1T_Sw_Init>
 80070b0:	4603      	mov	r3, r0
 80070b2:	80fb      	strh	r3, [r7, #6]
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d12a      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
            &gphNfcLib_Params.spalI14443p3a));
#endif /* NXPBUILD__PHAL_T1T_SW */

        /* Initialize the ISO ICODE AL component */
#ifdef NXPBUILD__PHAL_ICODE_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalICode_Sw_Init(
 80070ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <phNfcLib_AL_Init+0x200>)
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	4b1c      	ldr	r3, [pc, #112]	@ (8007130 <phNfcLib_AL_Init+0x20c>)
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	2300      	movs	r3, #0
 80070c4:	4a2d      	ldr	r2, [pc, #180]	@ (800717c <phNfcLib_AL_Init+0x258>)
 80070c6:	2120      	movs	r1, #32
 80070c8:	482d      	ldr	r0, [pc, #180]	@ (8007180 <phNfcLib_AL_Init+0x25c>)
 80070ca:	f005 fbb4 	bl	800c836 <phalICode_Sw_Init>
 80070ce:	4603      	mov	r3, r0
 80070d0:	80fb      	strh	r3, [r7, #6]
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11b      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
            PTR_sKeyStore));
#endif /* NXPBUILD__PHAL_ICODE_SW */

        /* Initialize the Tag operations component */
#ifdef NXPBUILD__PHAL_TOP_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalTop_Sw_Init(
 80070d8:	4b26      	ldr	r3, [pc, #152]	@ (8007174 <phNfcLib_AL_Init+0x250>)
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	4b28      	ldr	r3, [pc, #160]	@ (8007180 <phNfcLib_AL_Init+0x25c>)
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <phNfcLib_AL_Init+0x204>)
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007120 <phNfcLib_AL_Init+0x1fc>)
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <phNfcLib_AL_Init+0x210>)
 80070ea:	4a23      	ldr	r2, [pc, #140]	@ (8007178 <phNfcLib_AL_Init+0x254>)
 80070ec:	2180      	movs	r1, #128	@ 0x80
 80070ee:	4825      	ldr	r0, [pc, #148]	@ (8007184 <phNfcLib_AL_Init+0x260>)
 80070f0:	f006 f873 	bl	800d1da <phalTop_Sw_Init>
 80070f4:	4603      	mov	r3, r0
 80070f6:	80fb      	strh	r3, [r7, #6]
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d108      	bne.n	8007110 <phNfcLib_AL_Init+0x1ec>
              PTR_spalI14443p3a));
#endif /* NXPBUILD__PHAL_TOP_SW */

        /* Initialize the 18000p3m3 AL component */
#ifdef NXPBUILD__PHAL_I18000P3M3_SW
        PH_CHECK_NFCLIB_INIT_FCT(wStatus, phalI18000p3m3_Sw_Init(
 80070fe:	4a22      	ldr	r2, [pc, #136]	@ (8007188 <phNfcLib_AL_Init+0x264>)
 8007100:	210c      	movs	r1, #12
 8007102:	4822      	ldr	r0, [pc, #136]	@ (800718c <phNfcLib_AL_Init+0x268>)
 8007104:	f005 fb54 	bl	800c7b0 <phalI18000p3m3_Sw_Init>
 8007108:	4603      	mov	r3, r0
 800710a:	80fb      	strh	r3, [r7, #6]
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	2b00      	cmp	r3, #0
            &gphNfcLib_Params.spalI18000p3m3));
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

    }while(FALSE);

    return wStatus;
 8007110:	88fb      	ldrh	r3, [r7, #6]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200007c0 	.word	0x200007c0
 8007120:	200008a4 	.word	0x200008a4
 8007124:	20000710 	.word	0x20000710
 8007128:	2000088c 	.word	0x2000088c
 800712c:	200008d0 	.word	0x200008d0
 8007130:	20000e74 	.word	0x20000e74
 8007134:	20000b28 	.word	0x20000b28
 8007138:	2000057c 	.word	0x2000057c
 800713c:	200008dc 	.word	0x200008dc
 8007140:	2000004a 	.word	0x2000004a
 8007144:	2000004c 	.word	0x2000004c
 8007148:	20001404 	.word	0x20001404
 800714c:	20001344 	.word	0x20001344
 8007150:	20000db4 	.word	0x20000db4
 8007154:	20001580 	.word	0x20001580
 8007158:	200015d4 	.word	0x200015d4
 800715c:	20000df4 	.word	0x20000df4
 8007160:	20000944 	.word	0x20000944
 8007164:	200009f8 	.word	0x200009f8
 8007168:	20000e34 	.word	0x20000e34
 800716c:	20000aa4 	.word	0x20000aa4
 8007170:	20000b44 	.word	0x20000b44
 8007174:	2000072c 	.word	0x2000072c
 8007178:	20000bec 	.word	0x20000bec
 800717c:	20000798 	.word	0x20000798
 8007180:	200008b0 	.word	0x200008b0
 8007184:	20000bfc 	.word	0x20000bfc
 8007188:	200007b4 	.word	0x200007b4
 800718c:	20000898 	.word	0x20000898

08007190 <phNfcLib_Init>:

phNfcLib_Status_t phNfcLib_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af04      	add	r7, sp, #16
    phStatus_t        wStatus  = PH_ERR_SUCCESS;
 8007196:	2300      	movs	r3, #0
 8007198:	80fb      	strh	r3, [r7, #6]
    phNfcLib_Status_t dwStatus = PH_NFCLIB_STATUS_INVALID_STATE;
 800719a:	2301      	movs	r3, #1
 800719c:	603b      	str	r3, [r7, #0]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) == eNfcLib_ResetState)
 800719e:	4b4d      	ldr	r3, [pc, #308]	@ (80072d4 <phNfcLib_Init+0x144>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f040 8091 	bne.w	80072ca <phNfcLib_Init+0x13a>
    {
        do
        {
            /* Perform Reader Library Common Layer Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_CommonLayer_Init());
 80071a8:	f7ff fd8a 	bl	8006cc0 <phNfcLib_CommonLayer_Init>
 80071ac:	4603      	mov	r3, r0
 80071ae:	80fb      	strh	r3, [r7, #6]
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d15d      	bne.n	8007272 <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_RC663 */

#ifdef NXPBUILD__PHHAL_HW_PN5180
            /* Initialize the Pn5180 HAL component */
            PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_Pn5180_Init(
 80071b6:	4b48      	ldr	r3, [pc, #288]	@ (80072d8 <phNfcLib_Init+0x148>)
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	4b46      	ldr	r3, [pc, #280]	@ (80072dc <phNfcLib_Init+0x14c>)
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	4b45      	ldr	r3, [pc, #276]	@ (80072e0 <phNfcLib_Init+0x150>)
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	4b45      	ldr	r3, [pc, #276]	@ (80072e4 <phNfcLib_Init+0x154>)
 80071d0:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80071d4:	4844      	ldr	r0, [pc, #272]	@ (80072e8 <phNfcLib_Init+0x158>)
 80071d6:	f006 fa23 	bl	800d620 <phhalHw_Pn5180_Init>
 80071da:	4603      	mov	r3, r0
 80071dc:	80fb      	strh	r3, [r7, #6]
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <phNfcLib_Init+0x58>
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	e071      	b.n	80072cc <phNfcLib_Init+0x13c>
                gphNfcLib_State.bHalBufferRx,
                PH_NXPNFCRDLIB_CONFIG_HAL_RX_BUFFSIZE));
#endif /* NXPBUILD__PHHAL_HW_PN7462AU */

            /* Perform Reader Library PAL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_PAL_Init());
 80071e8:	f7ff fe04 	bl	8006df4 <phNfcLib_PAL_Init>
 80071ec:	4603      	mov	r3, r0
 80071ee:	80fb      	strh	r3, [r7, #6]
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d13d      	bne.n	8007272 <phNfcLib_Init+0xe2>

            /* Perform Reader Library AL Initialization */
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phNfcLib_AL_Init());
 80071f6:	f7ff fe95 	bl	8006f24 <phNfcLib_AL_Init>
 80071fa:	4603      	mov	r3, r0
 80071fc:	80fb      	strh	r3, [r7, #6]
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d136      	bne.n	8007272 <phNfcLib_Init+0xe2>
                PH_NXPNFCRDLIB_CONFIG_HCE_BUFF_LENGTH));
#endif /* NXPBUILD__PHCE_T4T_SW */

            /* Initialize the discover component */
#ifdef NXPBUILD__PHAC_DISCLOOP_SW
            PH_CHECK_NFCLIB_INIT_FCT(wStatus, phacDiscLoop_Sw_Init(
 8007204:	4a38      	ldr	r2, [pc, #224]	@ (80072e8 <phNfcLib_Init+0x158>)
 8007206:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800720a:	4838      	ldr	r0, [pc, #224]	@ (80072ec <phNfcLib_Init+0x15c>)
 800720c:	f000 fc18 	bl	8007a40 <phacDiscLoop_Sw_Init>
 8007210:	4603      	mov	r3, r0
 8007212:	80fb      	strh	r3, [r7, #6]
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d12b      	bne.n	8007272 <phNfcLib_Init+0xe2>
                &gphNfcLib_Params.sDiscLoop,
                (uint16_t)(sizeof(phacDiscLoop_Sw_DataParams_t)),
                &gphNfcLib_Params.sHal));

            /* Assign other layer parameters in discovery loop */
            gphNfcLib_Params.sDiscLoop.pHalDataParams = &gphNfcLib_Params.sHal;
 800721a:	4b2f      	ldr	r3, [pc, #188]	@ (80072d8 <phNfcLib_Init+0x148>)
 800721c:	4a32      	ldr	r2, [pc, #200]	@ (80072e8 <phNfcLib_Init+0x158>)
 800721e:	f8c3 2730 	str.w	r2, [r3, #1840]	@ 0x730

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3aDataParams = &gphNfcLib_Params.spalI14443p3a;
 8007222:	4b2d      	ldr	r3, [pc, #180]	@ (80072d8 <phNfcLib_Init+0x148>)
 8007224:	4a32      	ldr	r2, [pc, #200]	@ (80072f0 <phNfcLib_Init+0x160>)
 8007226:	f8c3 2734 	str.w	r2, [r3, #1844]	@ 0x734
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p3bDataParams = &gphNfcLib_Params.spalI14443p3b;
 800722a:	4b2b      	ldr	r3, [pc, #172]	@ (80072d8 <phNfcLib_Init+0x148>)
 800722c:	4a31      	ldr	r2, [pc, #196]	@ (80072f4 <phNfcLib_Init+0x164>)
 800722e:	f8c3 273c 	str.w	r2, [r3, #1852]	@ 0x73c
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
            gphNfcLib_Params.sDiscLoop.pPal1443p4aDataParams = &gphNfcLib_Params.spalI14443p4a;
 8007232:	4b29      	ldr	r3, [pc, #164]	@ (80072d8 <phNfcLib_Init+0x148>)
 8007234:	4a30      	ldr	r2, [pc, #192]	@ (80072f8 <phNfcLib_Init+0x168>)
 8007236:	f8c3 2744 	str.w	r2, [r3, #1860]	@ 0x744
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4_SW
            gphNfcLib_Params.sDiscLoop.pPal14443p4DataParams = &gphNfcLib_Params.spalI14443p4;
 800723a:	4b27      	ldr	r3, [pc, #156]	@ (80072d8 <phNfcLib_Init+0x148>)
 800723c:	4a2f      	ldr	r2, [pc, #188]	@ (80072fc <phNfcLib_Init+0x16c>)
 800723e:	f8c3 2740 	str.w	r2, [r3, #1856]	@ 0x740
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_FELICA_SW
            gphNfcLib_Params.sDiscLoop.pPalFelicaDataParams = &gphNfcLib_Params.spalFelica;
 8007242:	4b25      	ldr	r3, [pc, #148]	@ (80072d8 <phNfcLib_Init+0x148>)
 8007244:	4a2e      	ldr	r2, [pc, #184]	@ (8007300 <phNfcLib_Init+0x170>)
 8007246:	f8c3 2738 	str.w	r2, [r3, #1848]	@ 0x738
#endif /* NXPBUILD__PHPAL_FELICA_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
            gphNfcLib_Params.sDiscLoop.pPalSli15693DataParams = &gphNfcLib_Params.spalSli15693;
 800724a:	4b23      	ldr	r3, [pc, #140]	@ (80072d8 <phNfcLib_Init+0x148>)
 800724c:	4a2d      	ldr	r2, [pc, #180]	@ (8007304 <phNfcLib_Init+0x174>)
 800724e:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
#endif /* NXPBUILD__PHPAL_SLI15693_SW */

#ifdef NXPBUILD__PHPAL_I18092MPI_SW
            gphNfcLib_Params.sDiscLoop.pPal18092mPIDataParams = &gphNfcLib_Params.spalI18092mPI;
 8007252:	4b21      	ldr	r3, [pc, #132]	@ (80072d8 <phNfcLib_Init+0x148>)
 8007254:	4a2c      	ldr	r2, [pc, #176]	@ (8007308 <phNfcLib_Init+0x178>)
 8007256:	f8c3 2754 	str.w	r2, [r3, #1876]	@ 0x754
#endif /* NXPBUILD__PHPAL_I18092MPI_SW */

#ifdef NXPBUILD__PHPAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pPal18000p3m3DataParams = &gphNfcLib_Params.spalI18000p3m3;
 800725a:	4b1f      	ldr	r3, [pc, #124]	@ (80072d8 <phNfcLib_Init+0x148>)
 800725c:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <phNfcLib_Init+0x17c>)
 800725e:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c
#endif /* NXPBUILD__PHPAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_I18000P3M3_SW
            gphNfcLib_Params.sDiscLoop.pAl18000p3m3DataParams = &gphNfcLib_Params.salI18000p3m3;
 8007262:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <phNfcLib_Init+0x148>)
 8007264:	4a2a      	ldr	r2, [pc, #168]	@ (8007310 <phNfcLib_Init+0x180>)
 8007266:	f8c3 2750 	str.w	r2, [r3, #1872]	@ 0x750
#endif /* NXPBUILD__PHAL_I18000P3M3_SW */

#ifdef NXPBUILD__PHAL_T1T_SW
            gphNfcLib_Params.sDiscLoop.pAlT1TDataParams = &gphNfcLib_Params.salT1T;
 800726a:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <phNfcLib_Init+0x148>)
 800726c:	4a29      	ldr	r2, [pc, #164]	@ (8007314 <phNfcLib_Init+0x184>)
 800726e:	f8c3 2758 	str.w	r2, [r3, #1880]	@ 0x758
#endif /* NXPBUILD__PHAL_T1T_SW */
#endif /* NXPBUILD__PHAC_DISCLOOP_SW */

        }while(FALSE);

        if(wStatus != PH_ERR_SUCCESS)
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <phNfcLib_Init+0xee>
        {
            dwStatus = PH_NFCLIB_STATUS_INTERNAL_ERROR;
 8007278:	2310      	movs	r3, #16
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	e025      	b.n	80072ca <phNfcLib_Init+0x13a>
        }
        else
        {
            gphNfcLib_State.bNfcLibState      = eNfcLib_InitializedState;
 800727e:	4b15      	ldr	r3, [pc, #84]	@ (80072d4 <phNfcLib_Init+0x144>)
 8007280:	2201      	movs	r2, #1
 8007282:	701a      	strb	r2, [r3, #0]
            gphNfcLib_State.bProfileSelected  = PH_NFCLIB_ACTIVATION_PROFILE_NFC;
 8007284:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <phNfcLib_Init+0x144>)
 8007286:	2200      	movs	r2, #0
 8007288:	705a      	strb	r2, [r3, #1]
            gphNfcLib_State.wConfiguredRFTech = PH_NFCLIB_TECHNOLOGY_DEFAULT;
 800728a:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <phNfcLib_Init+0x144>)
 800728c:	2200      	movs	r2, #0
 800728e:	811a      	strh	r2, [r3, #8]
            gphNfcLib_State.bActivateBlocking = PH_NFCLIB_ACTIVATION_BLOCKINGMODE_DEFAULT;
 8007290:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <phNfcLib_Init+0x144>)
 8007292:	2201      	movs	r2, #1
 8007294:	709a      	strb	r2, [r3, #2]
            gphNfcLib_State.bDeactBlocking    = PH_NFCLIB_DEACTIVATION_BLOCKINGMODE_DEFAULT;
 8007296:	4b0f      	ldr	r3, [pc, #60]	@ (80072d4 <phNfcLib_Init+0x144>)
 8007298:	2201      	movs	r2, #1
 800729a:	70da      	strb	r2, [r3, #3]
            gphNfcLib_State.bLPCDState        = PH_OFF;
 800729c:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <phNfcLib_Init+0x144>)
 800729e:	2200      	movs	r2, #0
 80072a0:	715a      	strb	r2, [r3, #5]
            gphNfcLib_State.bTxState          = PH_NFCLIB_INT_TRANSMIT_OFF;
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <phNfcLib_Init+0x144>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	719a      	strb	r2, [r3, #6]
            gphNfcLib_State.bMergedSakPrio    = PH_NFCLIB_ACTIVATION_MERGED_SAK_PRIO_14443;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <phNfcLib_Init+0x144>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	711a      	strb	r2, [r3, #4]
            gphNfcLib_State.bAuthMode         = PH_NFCLIB_MFDF_NOT_AUTHENTICATED;
 80072ae:	4b09      	ldr	r3, [pc, #36]	@ (80072d4 <phNfcLib_Init+0x144>)
 80072b0:	22ff      	movs	r2, #255	@ 0xff
 80072b2:	f883 239d 	strb.w	r2, [r3, #925]	@ 0x39d
            gphNfcLib_Params.pNfcLib_ErrCallbck = NULL;
 80072b6:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <phNfcLib_Init+0x148>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            gphNfcLib_State.bFsdi             = PH_NXPNFCRDLIB_CONFIG_FSDI_VALUE;
 80072be:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <phNfcLib_Init+0x144>)
 80072c0:	2208      	movs	r2, #8
 80072c2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

            dwStatus = PH_NFCLIB_STATUS_SUCCESS;
 80072c6:	2300      	movs	r3, #0
 80072c8:	603b      	str	r3, [r7, #0]
        }
    }

    return dwStatus;
 80072ca:	683b      	ldr	r3, [r7, #0]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000e94 	.word	0x20000e94
 80072d8:	20000574 	.word	0x20000574
 80072dc:	20000fd8 	.word	0x20000fd8
 80072e0:	20000eac 	.word	0x20000eac
 80072e4:	20000710 	.word	0x20000710
 80072e8:	2000057c 	.word	0x2000057c
 80072ec:	20000c7c 	.word	0x20000c7c
 80072f0:	2000072c 	.word	0x2000072c
 80072f4:	20000744 	.word	0x20000744
 80072f8:	20000770 	.word	0x20000770
 80072fc:	20000784 	.word	0x20000784
 8007300:	200007c0 	.word	0x200007c0
 8007304:	20000798 	.word	0x20000798
 8007308:	200007e0 	.word	0x200007e0
 800730c:	200007b4 	.word	0x200007b4
 8007310:	20000898 	.word	0x20000898
 8007314:	20000bec 	.word	0x20000bec

08007318 <phNfcLib_GetDataParams>:
}

void* phNfcLib_GetDataParams(
                             uint16_t wComponent
                             )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	80fb      	strh	r3, [r7, #6]
    void * pDataparam = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]

    if (((phNfcLib_StateMachine_t)gphNfcLib_State.bNfcLibState) != eNfcLib_ResetState)
 8007326:	4b9a      	ldr	r3, [pc, #616]	@ (8007590 <phNfcLib_GetDataParams+0x278>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8129 	beq.w	8007582 <phNfcLib_GetDataParams+0x26a>
    {
        switch(wComponent & PH_COMP_MASK)
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007336:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 800733a:	f000 811e 	beq.w	800757a <phNfcLib_GetDataParams+0x262>
 800733e:	f5b3 4f65 	cmp.w	r3, #58624	@ 0xe500
 8007342:	f300 811d 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007346:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 800734a:	f000 8113 	beq.w	8007574 <phNfcLib_GetDataParams+0x25c>
 800734e:	f5b3 4f64 	cmp.w	r3, #58368	@ 0xe400
 8007352:	f300 8115 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007356:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 800735a:	f000 8105 	beq.w	8007568 <phNfcLib_GetDataParams+0x250>
 800735e:	f5b3 4f62 	cmp.w	r3, #57856	@ 0xe200
 8007362:	f300 810d 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007366:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 800736a:	f000 8100 	beq.w	800756e <phNfcLib_GetDataParams+0x256>
 800736e:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 8007372:	f300 8105 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007376:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800737a:	f000 80f2 	beq.w	8007562 <phNfcLib_GetDataParams+0x24a>
 800737e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007382:	f300 80fd 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007386:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 800738a:	f000 80d5 	beq.w	8007538 <phNfcLib_GetDataParams+0x220>
 800738e:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8007392:	f300 80f5 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007396:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 800739a:	f000 80c7 	beq.w	800752c <phNfcLib_GetDataParams+0x214>
 800739e:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 80073a2:	f300 80ed 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 80073a6:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 80073aa:	f000 80c2 	beq.w	8007532 <phNfcLib_GetDataParams+0x21a>
 80073ae:	f5b3 5f04 	cmp.w	r3, #8448	@ 0x2100
 80073b2:	f300 80e5 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 80073b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ba:	f000 80b4 	beq.w	8007526 <phNfcLib_GetDataParams+0x20e>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c2:	f300 80dd 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 80073c6:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80073ca:	f000 80c4 	beq.w	8007556 <phNfcLib_GetDataParams+0x23e>
 80073ce:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 80073d2:	f300 80d5 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 80073d6:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80073da:	f000 80b9 	beq.w	8007550 <phNfcLib_GetDataParams+0x238>
 80073de:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80073e2:	f300 80cd 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 80073e6:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80073ea:	f000 8099 	beq.w	8007520 <phNfcLib_GetDataParams+0x208>
 80073ee:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80073f2:	f300 80c5 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 80073f6:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80073fa:	f000 80af 	beq.w	800755c <phNfcLib_GetDataParams+0x244>
 80073fe:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8007402:	f300 80bd 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007406:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 800740a:	f000 809e 	beq.w	800754a <phNfcLib_GetDataParams+0x232>
 800740e:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
 8007412:	f300 80b5 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007416:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800741a:	f000 8093 	beq.w	8007544 <phNfcLib_GetDataParams+0x22c>
 800741e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007422:	f300 80ad 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007426:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 800742a:	f000 8088 	beq.w	800753e <phNfcLib_GetDataParams+0x226>
 800742e:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8007432:	f300 80a5 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743a:	d06e      	beq.n	800751a <phNfcLib_GetDataParams+0x202>
 800743c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007440:	f300 809e 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007444:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007448:	d064      	beq.n	8007514 <phNfcLib_GetDataParams+0x1fc>
 800744a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800744e:	f300 8097 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007452:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8007456:	d05a      	beq.n	800750e <phNfcLib_GetDataParams+0x1f6>
 8007458:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 800745c:	f300 8090 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 8007460:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007464:	d04d      	beq.n	8007502 <phNfcLib_GetDataParams+0x1ea>
 8007466:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800746a:	f300 8089 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 800746e:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8007472:	d043      	beq.n	80074fc <phNfcLib_GetDataParams+0x1e4>
 8007474:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8007478:	f300 8082 	bgt.w	8007580 <phNfcLib_GetDataParams+0x268>
 800747c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007480:	d039      	beq.n	80074f6 <phNfcLib_GetDataParams+0x1de>
 8007482:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007486:	dc7b      	bgt.n	8007580 <phNfcLib_GetDataParams+0x268>
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748c:	d03c      	beq.n	8007508 <phNfcLib_GetDataParams+0x1f0>
 800748e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007492:	dc75      	bgt.n	8007580 <phNfcLib_GetDataParams+0x268>
 8007494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007498:	d02a      	beq.n	80074f0 <phNfcLib_GetDataParams+0x1d8>
 800749a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800749e:	dc6f      	bgt.n	8007580 <phNfcLib_GetDataParams+0x268>
 80074a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074a4:	d021      	beq.n	80074ea <phNfcLib_GetDataParams+0x1d2>
 80074a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074aa:	dc69      	bgt.n	8007580 <phNfcLib_GetDataParams+0x268>
 80074ac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80074b0:	d018      	beq.n	80074e4 <phNfcLib_GetDataParams+0x1cc>
 80074b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80074b6:	dc63      	bgt.n	8007580 <phNfcLib_GetDataParams+0x268>
 80074b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074bc:	d00f      	beq.n	80074de <phNfcLib_GetDataParams+0x1c6>
 80074be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c2:	dc5d      	bgt.n	8007580 <phNfcLib_GetDataParams+0x268>
 80074c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c8:	d003      	beq.n	80074d2 <phNfcLib_GetDataParams+0x1ba>
 80074ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074ce:	d003      	beq.n	80074d8 <phNfcLib_GetDataParams+0x1c0>
#endif /* defined (NXPBUILD__PHAL_MFPEVX_SW) || defined (NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDFLIGHT_SW) ||   \
    defined (NXPBUILD__PHAL_MFDFEVX_SAM_NONX) || defined (NXPBUILD__PHAL_MFPEVX_SAM_NONX) || defined(NXPBUILD__PHAL_MFDUOX_SW)*/

        default:
            /* Do nothing. pDataparam is already null. */
            break;
 80074d0:	e056      	b.n	8007580 <phNfcLib_GetDataParams+0x268>
            pDataparam = (void *) &gphNfcLib_Params.sHal;
 80074d2:	4b30      	ldr	r3, [pc, #192]	@ (8007594 <phNfcLib_GetDataParams+0x27c>)
 80074d4:	60fb      	str	r3, [r7, #12]
            break;
 80074d6:	e054      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3a;
 80074d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007598 <phNfcLib_GetDataParams+0x280>)
 80074da:	60fb      	str	r3, [r7, #12]
            break;
 80074dc:	e051      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p3b;
 80074de:	4b2f      	ldr	r3, [pc, #188]	@ (800759c <phNfcLib_GetDataParams+0x284>)
 80074e0:	60fb      	str	r3, [r7, #12]
            break;
 80074e2:	e04e      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4a;
 80074e4:	4b2e      	ldr	r3, [pc, #184]	@ (80075a0 <phNfcLib_GetDataParams+0x288>)
 80074e6:	60fb      	str	r3, [r7, #12]
            break;
 80074e8:	e04b      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4;
 80074ea:	4b2e      	ldr	r3, [pc, #184]	@ (80075a4 <phNfcLib_GetDataParams+0x28c>)
 80074ec:	60fb      	str	r3, [r7, #12]
            break;
 80074ee:	e048      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalMifare;
 80074f0:	4b2d      	ldr	r3, [pc, #180]	@ (80075a8 <phNfcLib_GetDataParams+0x290>)
 80074f2:	60fb      	str	r3, [r7, #12]
            break;
 80074f4:	e045      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalSli15693;
 80074f6:	4b2d      	ldr	r3, [pc, #180]	@ (80075ac <phNfcLib_GetDataParams+0x294>)
 80074f8:	60fb      	str	r3, [r7, #12]
            break;
 80074fa:	e042      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18000p3m3;
 80074fc:	4b2c      	ldr	r3, [pc, #176]	@ (80075b0 <phNfcLib_GetDataParams+0x298>)
 80074fe:	60fb      	str	r3, [r7, #12]
            break;
 8007500:	e03f      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mPI;
 8007502:	4b2c      	ldr	r3, [pc, #176]	@ (80075b4 <phNfcLib_GetDataParams+0x29c>)
 8007504:	60fb      	str	r3, [r7, #12]
            break;
 8007506:	e03c      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalFelica;
 8007508:	4b2b      	ldr	r3, [pc, #172]	@ (80075b8 <phNfcLib_GetDataParams+0x2a0>)
 800750a:	60fb      	str	r3, [r7, #12]
            break;
 800750c:	e039      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI18092mT;
 800750e:	4b2b      	ldr	r3, [pc, #172]	@ (80075bc <phNfcLib_GetDataParams+0x2a4>)
 8007510:	60fb      	str	r3, [r7, #12]
            break;
 8007512:	e036      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.spalI14443p4mC;
 8007514:	4b2a      	ldr	r3, [pc, #168]	@ (80075c0 <phNfcLib_GetDataParams+0x2a8>)
 8007516:	60fb      	str	r3, [r7, #12]
            break;
 8007518:	e033      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFC;
 800751a:	4b2a      	ldr	r3, [pc, #168]	@ (80075c4 <phNfcLib_GetDataParams+0x2ac>)
 800751c:	60fb      	str	r3, [r7, #12]
            break;
 800751e:	e030      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDF;
 8007520:	4b29      	ldr	r3, [pc, #164]	@ (80075c8 <phNfcLib_GetDataParams+0x2b0>)
 8007522:	60fb      	str	r3, [r7, #12]
            break;
 8007524:	e02d      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFEVx;
 8007526:	4b29      	ldr	r3, [pc, #164]	@ (80075cc <phNfcLib_GetDataParams+0x2b4>)
 8007528:	60fb      	str	r3, [r7, #12]
            break;
 800752a:	e02a      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFDFLight;
 800752c:	4b28      	ldr	r3, [pc, #160]	@ (80075d0 <phNfcLib_GetDataParams+0x2b8>)
 800752e:	60fb      	str	r3, [r7, #12]
            break;
 8007530:	e027      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFPEVx;
 8007532:	4b28      	ldr	r3, [pc, #160]	@ (80075d4 <phNfcLib_GetDataParams+0x2bc>)
 8007534:	60fb      	str	r3, [r7, #12]
            break;
 8007536:	e024      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFNtag42XDNA;
 8007538:	4b27      	ldr	r3, [pc, #156]	@ (80075d8 <phNfcLib_GetDataParams+0x2c0>)
 800753a:	60fb      	str	r3, [r7, #12]
            break;
 800753c:	e021      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salMFUL;
 800753e:	4b27      	ldr	r3, [pc, #156]	@ (80075dc <phNfcLib_GetDataParams+0x2c4>)
 8007540:	60fb      	str	r3, [r7, #12]
            break;
 8007542:	e01e      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salFelica;
 8007544:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <phNfcLib_GetDataParams+0x2c8>)
 8007546:	60fb      	str	r3, [r7, #12]
            break;
 8007548:	e01b      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salICode;
 800754a:	4b26      	ldr	r3, [pc, #152]	@ (80075e4 <phNfcLib_GetDataParams+0x2cc>)
 800754c:	60fb      	str	r3, [r7, #12]
            break;
 800754e:	e018      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salT1T;
 8007550:	4b25      	ldr	r3, [pc, #148]	@ (80075e8 <phNfcLib_GetDataParams+0x2d0>)
 8007552:	60fb      	str	r3, [r7, #12]
            break;
 8007554:	e015      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salTop;
 8007556:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <phNfcLib_GetDataParams+0x2d4>)
 8007558:	60fb      	str	r3, [r7, #12]
            break;
 800755a:	e012      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.salI18000p3m3;
 800755c:	4b24      	ldr	r3, [pc, #144]	@ (80075f0 <phNfcLib_GetDataParams+0x2d8>)
 800755e:	60fb      	str	r3, [r7, #12]
            break;
 8007560:	e00f      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) &gphNfcLib_Params.sDiscLoop;
 8007562:	4b24      	ldr	r3, [pc, #144]	@ (80075f4 <phNfcLib_GetDataParams+0x2dc>)
 8007564:	60fb      	str	r3, [r7, #12]
            break;
 8007566:	e00c      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sKeyStore;
 8007568:	4b23      	ldr	r3, [pc, #140]	@ (80075f8 <phNfcLib_GetDataParams+0x2e0>)
 800756a:	60fb      	str	r3, [r7, #12]
            break;
 800756c:	e009      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoSym;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
            break;
 8007572:	e006      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = (void *) PTR_sCryptoRng;
 8007574:	4b21      	ldr	r3, [pc, #132]	@ (80075fc <phNfcLib_GetDataParams+0x2e4>)
 8007576:	60fb      	str	r3, [r7, #12]
            break;
 8007578:	e003      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            pDataparam = &sTMI;
 800757a:	4b21      	ldr	r3, [pc, #132]	@ (8007600 <phNfcLib_GetDataParams+0x2e8>)
 800757c:	60fb      	str	r3, [r7, #12]
            break;
 800757e:	e000      	b.n	8007582 <phNfcLib_GetDataParams+0x26a>
            break;
 8007580:	bf00      	nop
        }
    }
    return pDataparam;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	20000e94 	.word	0x20000e94
 8007594:	2000057c 	.word	0x2000057c
 8007598:	2000072c 	.word	0x2000072c
 800759c:	20000744 	.word	0x20000744
 80075a0:	20000770 	.word	0x20000770
 80075a4:	20000784 	.word	0x20000784
 80075a8:	2000088c 	.word	0x2000088c
 80075ac:	20000798 	.word	0x20000798
 80075b0:	200007b4 	.word	0x200007b4
 80075b4:	200007e0 	.word	0x200007e0
 80075b8:	200007c0 	.word	0x200007c0
 80075bc:	20000804 	.word	0x20000804
 80075c0:	20000854 	.word	0x20000854
 80075c4:	200008d0 	.word	0x200008d0
 80075c8:	200008dc 	.word	0x200008dc
 80075cc:	20000944 	.word	0x20000944
 80075d0:	200009f8 	.word	0x200009f8
 80075d4:	20000aa4 	.word	0x20000aa4
 80075d8:	20000b44 	.word	0x20000b44
 80075dc:	20000b28 	.word	0x20000b28
 80075e0:	200008a4 	.word	0x200008a4
 80075e4:	200008b0 	.word	0x200008b0
 80075e8:	20000bec 	.word	0x20000bec
 80075ec:	20000bfc 	.word	0x20000bfc
 80075f0:	20000898 	.word	0x20000898
 80075f4:	20000c7c 	.word	0x20000c7c
 80075f8:	20000710 	.word	0x20000710
 80075fc:	20000e74 	.word	0x20000e74
 8007600:	200015d4 	.word	0x200015d4

08007604 <phTMIUtils_Init>:
phStatus_t phTMIUtils_Init(
                           phTMIUtils_t * pDataParams,
                           uint8_t * pTMIBuffer,
                           uint32_t dwBufLen
                           )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
    PH_ASSERT_NULL (pDataParams);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <phTMIUtils_Init+0x16>
 8007616:	2321      	movs	r3, #33	@ 0x21
 8007618:	e018      	b.n	800764c <phTMIUtils_Init+0x48>
    /* Check parameters */
    if ((pTMIBuffer == NULL) || (dwBufLen == 0U))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <phTMIUtils_Init+0x22>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <phTMIUtils_Init+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8007626:	f24e 5321 	movw	r3, #58657	@ 0xe521
 800762a:	e00f      	b.n	800764c <phTMIUtils_Init+0x48>
    }
    pDataParams->pTMIBuffer = pTMIBuffer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	601a      	str	r2, [r3, #0]
    pDataParams->dwTMIBufLen = dwBufLen;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	605a      	str	r2, [r3, #4]
    pDataParams->dwTMIbufIndex = 0;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	609a      	str	r2, [r3, #8]
    pDataParams->bTMIStatus = PH_OFF;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	731a      	strb	r2, [r3, #12]
    pDataParams->dwOffsetInTMI = 0;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	611a      	str	r2, [r3, #16]

    return PH_ERR_SUCCESS;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <phTMIUtils_ActivateTMICollection>:

phStatus_t phTMIUtils_ActivateTMICollection(
    phTMIUtils_t *pDataParams,
    uint8_t bOption
    )
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
    if ((pDataParams == NULL) || (pDataParams->dwTMIBufLen == 0U))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <phTMIUtils_ActivateTMICollection+0x1a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <phTMIUtils_ActivateTMICollection+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 8007672:	f24e 5321 	movw	r3, #58657	@ 0xe521
 8007676:	e02c      	b.n	80076d2 <phTMIUtils_ActivateTMICollection+0x7a>
    }

    switch (bOption)
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	2b04      	cmp	r3, #4
 800767c:	d825      	bhi.n	80076ca <phTMIUtils_ActivateTMICollection+0x72>
 800767e:	a201      	add	r2, pc, #4	@ (adr r2, 8007684 <phTMIUtils_ActivateTMICollection+0x2c>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	08007699 	.word	0x08007699
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076ad 	.word	0x080076ad
 8007694:	080076bd 	.word	0x080076bd
    {
    case PH_TMIUTILS_DEACTIVATE_TMI:

        /* Deactivate TMI Collection */
        pDataParams->dwTMIBufLen = 0;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	605a      	str	r2, [r3, #4]
        pDataParams->dwOffsetInTMI = 0;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	611a      	str	r2, [r3, #16]
        pDataParams->bTMIStatus = PH_OFF;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	731a      	strb	r2, [r3, #12]
        break;
 80076aa:	e011      	b.n	80076d0 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_ACTIVATE_TMI:
    case PH_TMIUTILS_RESUME_TMI:

        /* Activate/Resume TMI collection */
        pDataParams->bTMIStatus = PH_ON;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	731a      	strb	r2, [r3, #12]
        break;
 80076b2:	e00d      	b.n	80076d0 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_PAUSE_TMI:

        /* Pause TMI collection */
        pDataParams->bTMIStatus = PH_OFF;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	731a      	strb	r2, [r3, #12]
        break;
 80076ba:	e009      	b.n	80076d0 <phTMIUtils_ActivateTMICollection+0x78>

    case PH_TMIUTILS_RESET_TMI:

        /* Reset TMI collection buffer index to 0 */
        pDataParams->dwTMIbufIndex = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	609a      	str	r2, [r3, #8]
        pDataParams->dwOffsetInTMI = 0;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	611a      	str	r2, [r3, #16]
        break;
 80076c8:	e002      	b.n	80076d0 <phTMIUtils_ActivateTMICollection+0x78>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TMIUTILS);
 80076ca:	f24e 5321 	movw	r3, #58657	@ 0xe521
 80076ce:	e000      	b.n	80076d2 <phTMIUtils_ActivateTMICollection+0x7a>

    }
    return PH_ERR_SUCCESS;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop

080076e0 <phTools_DecodeParity>:
                                uint16_t wOutBufferSize,
                                uint8_t * pOutBuffer,
                                uint16_t * pOutBufferLength,
                                uint8_t * pOutBufferBits
                                )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6039      	str	r1, [r7, #0]
 80076e8:	4611      	mov	r1, r2
 80076ea:	461a      	mov	r2, r3
 80076ec:	4603      	mov	r3, r0
 80076ee:	71fb      	strb	r3, [r7, #7]
 80076f0:	460b      	mov	r3, r1
 80076f2:	80bb      	strh	r3, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	71bb      	strb	r3, [r7, #6]
    uint16_t    PH_MEMLOC_REM wDiv;
    uint8_t     PH_MEMLOC_REM bMod;
    uint8_t     PH_MEMLOC_REM bParity;

    /* Parameter check */
    if (((bOption != PH_TOOLS_PARITY_OPTION_EVEN) && (bOption != PH_TOOLS_PARITY_OPTION_ODD)) || (bInBufferBits > 7U))
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <phTools_DecodeParity+0x24>
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d102      	bne.n	800770a <phTools_DecodeParity+0x2a>
 8007704:	79bb      	ldrb	r3, [r7, #6]
 8007706:	2b07      	cmp	r3, #7
 8007708:	d902      	bls.n	8007710 <phTools_DecodeParity+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 800770a:	f24e 3321 	movw	r3, #58145	@ 0xe321
 800770e:	e0fa      	b.n	8007906 <phTools_DecodeParity+0x226>
    }

    /* Parameter check */
    if (wInBufferLength == 0U)
 8007710:	88bb      	ldrh	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10d      	bne.n	8007732 <phTools_DecodeParity+0x52>
    {
        /* Zero input length is simply passed through */
        if (bInBufferBits == 0U)
 8007716:	79bb      	ldrb	r3, [r7, #6]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d107      	bne.n	800772c <phTools_DecodeParity+0x4c>
        {
            (*pOutBufferLength) = 0;
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	2200      	movs	r2, #0
 8007720:	801a      	strh	r2, [r3, #0]
            *pOutBufferBits = 0;
 8007722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
            return PH_ERR_SUCCESS;
 8007728:	2300      	movs	r3, #0
 800772a:	e0ec      	b.n	8007906 <phTools_DecodeParity+0x226>
        }
        /* Invalid parameter */
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_TOOLS);
 800772c:	f24e 3321 	movw	r3, #58145	@ 0xe321
 8007730:	e0e9      	b.n	8007906 <phTools_DecodeParity+0x226>
        }
    }

    /* Retrieve DIV and MOD */
    if (bInBufferBits == 0U)
 8007732:	79bb      	ldrb	r3, [r7, #6]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d111      	bne.n	800775c <phTools_DecodeParity+0x7c>
    {
        wDiv = (uint16_t)(wInBufferLength / 9U);
 8007738:	88bb      	ldrh	r3, [r7, #4]
 800773a:	4a75      	ldr	r2, [pc, #468]	@ (8007910 <phTools_DecodeParity+0x230>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)(wInBufferLength % 9U);
 8007744:	88ba      	ldrh	r2, [r7, #4]
 8007746:	4b72      	ldr	r3, [pc, #456]	@ (8007910 <phTools_DecodeParity+0x230>)
 8007748:	fba3 1302 	umull	r1, r3, r3, r2
 800774c:	0859      	lsrs	r1, r3, #1
 800774e:	460b      	mov	r3, r1
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	440b      	add	r3, r1
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	b29b      	uxth	r3, r3
 8007758:	73fb      	strb	r3, [r7, #15]
 800775a:	e012      	b.n	8007782 <phTools_DecodeParity+0xa2>
    }
    else
    {
        wDiv = (uint16_t)((wInBufferLength - 1U) / 9U);
 800775c:	88bb      	ldrh	r3, [r7, #4]
 800775e:	3b01      	subs	r3, #1
 8007760:	4a6b      	ldr	r2, [pc, #428]	@ (8007910 <phTools_DecodeParity+0x230>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	823b      	strh	r3, [r7, #16]
        bMod = (uint8_t)((wInBufferLength - 1U) % 9U);
 800776a:	88bb      	ldrh	r3, [r7, #4]
 800776c:	1e59      	subs	r1, r3, #1
 800776e:	4b68      	ldr	r3, [pc, #416]	@ (8007910 <phTools_DecodeParity+0x230>)
 8007770:	fba3 2301 	umull	r2, r3, r3, r1
 8007774:	085a      	lsrs	r2, r3, #1
 8007776:	4613      	mov	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4413      	add	r3, r2
 800777c:	1aca      	subs	r2, r1, r3
 800777e:	4613      	mov	r3, r2
 8007780:	73fb      	strb	r3, [r7, #15]
    }

    /* Calculate number of output bytes */
    (*pOutBufferLength) = (uint16_t)((wDiv << 3U) + bMod);
 8007782:	8a3b      	ldrh	r3, [r7, #16]
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	b29a      	uxth	r2, r3
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	b29b      	uxth	r3, r3
 800778c:	4413      	add	r3, r2
 800778e:	b29a      	uxth	r2, r3
 8007790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007792:	801a      	strh	r2, [r3, #0]
    if (bMod > bInBufferBits)
 8007794:	7bfa      	ldrb	r2, [r7, #15]
 8007796:	79bb      	ldrb	r3, [r7, #6]
 8007798:	429a      	cmp	r2, r3
 800779a:	d905      	bls.n	80077a8 <phTools_DecodeParity+0xc8>
    {
        --(*pOutBufferLength);
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a6:	801a      	strh	r2, [r3, #0]
    }

    /* Calculate number of rest-bits of output */
    *pOutBufferBits = (uint8_t)((8U - (((8U + ((*pOutBufferLength) % 8U)) - bInBufferBits) % 8U)) % 8U);
 80077a8:	79bb      	ldrb	r3, [r7, #6]
 80077aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077ac:	8812      	ldrh	r2, [r2, #0]
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ba:	701a      	strb	r2, [r3, #0]

    /* Increment output length in case of incomplete byte */
    if (*pOutBufferBits > 0U)
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <phTools_DecodeParity+0xf0>
    {
        ++(*pOutBufferLength);
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ce:	801a      	strh	r2, [r3, #0]
    }

    /* Buffer overflow check*/
    if (wOutBufferSize < (*pOutBufferLength))
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	8c3a      	ldrh	r2, [r7, #32]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d205      	bcs.n	80077e6 <phTools_DecodeParity+0x106>
    {
        (*pOutBufferLength) = 0;
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	2200      	movs	r2, #0
 80077de:	801a      	strh	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_TOOLS);
 80077e0:	f24e 3304 	movw	r3, #58116	@ 0xe304
 80077e4:	e08f      	b.n	8007906 <phTools_DecodeParity+0x226>
    }

    /* Prepare loop vars */
    wByteIndexIn = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	82fb      	strh	r3, [r7, #22]
    wByteIndexOut = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	82bb      	strh	r3, [r7, #20]
    bBitPosition = 7U;
 80077ee:	2307      	movs	r3, #7
 80077f0:	74fb      	strb	r3, [r7, #19]

    /* Do for each byte */
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 80077f2:	e068      	b.n	80078c6 <phTools_DecodeParity+0x1e6>
    {
        /* Append source bits to output */
        pOutBuffer[wByteIndexOut] = (uint8_t)(pInBuffer[wByteIndexIn] >> (7U - bBitPosition));
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	4413      	add	r3, r2
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	f1c3 0307 	rsb	r3, r3, #7
 8007804:	fa42 f103 	asr.w	r1, r2, r3
 8007808:	8abb      	ldrh	r3, [r7, #20]
 800780a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780c:	4413      	add	r3, r2
 800780e:	b2ca      	uxtb	r2, r1
 8007810:	701a      	strb	r2, [r3, #0]

        /* If there is more data bits in the sourcebyte append it to next data byte */
        if ((wByteIndexIn + /* */ 1U) < wInBufferLength)
 8007812:	8afb      	ldrh	r3, [r7, #22]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	88bb      	ldrh	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d243      	bcs.n	80078a4 <phTools_DecodeParity+0x1c4>
        {
            /* Append remaining bits to output */
            pOutBuffer[wByteIndexOut] |= (uint8_t)(pInBuffer[wByteIndexIn + 1U] << (1U + bBitPosition));
 800781c:	8abb      	ldrh	r3, [r7, #20]
 800781e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007820:	4413      	add	r3, r2
 8007822:	7819      	ldrb	r1, [r3, #0]
 8007824:	8afb      	ldrh	r3, [r7, #22]
 8007826:	3301      	adds	r3, #1
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	4413      	add	r3, r2
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	7cfb      	ldrb	r3, [r7, #19]
 8007832:	3301      	adds	r3, #1
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	b2da      	uxtb	r2, r3
 800783a:	8abb      	ldrh	r3, [r7, #20]
 800783c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800783e:	4403      	add	r3, r0
 8007840:	430a      	orrs	r2, r1
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]

            /* Perform parity checking if this isn't an incomplete byte */
            if ((*pOutBufferBits == 0U)
 8007846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <phTools_DecodeParity+0x17a>
                || ((wByteIndexOut + /* */ 1U) < (*pOutBufferLength)))
 800784e:	8abb      	ldrh	r3, [r7, #20]
 8007850:	3301      	adds	r3, #1
 8007852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007854:	8812      	ldrh	r2, [r2, #0]
 8007856:	4293      	cmp	r3, r2
 8007858:	d224      	bcs.n	80078a4 <phTools_DecodeParity+0x1c4>
            {
                bParity = phTools_CalcParity(pOutBuffer[wByteIndexOut], bOption);
 800785a:	8abb      	ldrh	r3, [r7, #20]
 800785c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	79fa      	ldrb	r2, [r7, #7]
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f854 	bl	8007914 <phTools_CalcParity>
 800786c:	4603      	mov	r3, r0
 800786e:	73bb      	strb	r3, [r7, #14]
                if ((pInBuffer[wByteIndexIn + 1U] & (uint8_t)(1U << (7U - bBitPosition))) != (bParity << (7U - bBitPosition)))
 8007870:	8afb      	ldrh	r3, [r7, #22]
 8007872:	3301      	adds	r3, #1
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	4413      	add	r3, r2
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	f1c3 0307 	rsb	r3, r3, #7
 8007880:	2101      	movs	r1, #1
 8007882:	fa01 f303 	lsl.w	r3, r1, r3
 8007886:	b2db      	uxtb	r3, r3
 8007888:	4013      	ands	r3, r2
 800788a:	b2db      	uxtb	r3, r3
 800788c:	4619      	mov	r1, r3
 800788e:	7bba      	ldrb	r2, [r7, #14]
 8007890:	7cfb      	ldrb	r3, [r7, #19]
 8007892:	f1c3 0307 	rsb	r3, r3, #7
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	4299      	cmp	r1, r3
 800789c:	d002      	beq.n	80078a4 <phTools_DecodeParity+0x1c4>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_TOOLS);
 800789e:	f24e 3302 	movw	r3, #58114	@ 0xe302
 80078a2:	e030      	b.n	8007906 <phTools_DecodeParity+0x226>
                }
            }
        }

        /* We have reached the 8th parity bit, the input buffer index is now one ahead */
        if (bBitPosition == 0U)
 80078a4:	7cfb      	ldrb	r3, [r7, #19]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <phTools_DecodeParity+0x1d4>
        {
            bBitPosition = 8;
 80078aa:	2308      	movs	r3, #8
 80078ac:	74fb      	strb	r3, [r7, #19]
            ++wByteIndexIn;
 80078ae:	8afb      	ldrh	r3, [r7, #22]
 80078b0:	3301      	adds	r3, #1
 80078b2:	82fb      	strh	r3, [r7, #22]
    for (; wByteIndexOut < (*pOutBufferLength); ++wByteIndexOut, ++wByteIndexIn, --bBitPosition)
 80078b4:	8abb      	ldrh	r3, [r7, #20]
 80078b6:	3301      	adds	r3, #1
 80078b8:	82bb      	strh	r3, [r7, #20]
 80078ba:	8afb      	ldrh	r3, [r7, #22]
 80078bc:	3301      	adds	r3, #1
 80078be:	82fb      	strh	r3, [r7, #22]
 80078c0:	7cfb      	ldrb	r3, [r7, #19]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	74fb      	strb	r3, [r7, #19]
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	8aba      	ldrh	r2, [r7, #20]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d391      	bcc.n	80077f4 <phTools_DecodeParity+0x114>
        }
    }

    /* Mask out invalid bits of last byte */
    if (*pOutBufferBits > 0U)
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d015      	beq.n	8007904 <phTools_DecodeParity+0x224>
    {
        pOutBuffer[(*pOutBufferLength) - 1U] &= (uint8_t)(0xFFU >> (8U - *pOutBufferBits));
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	4413      	add	r3, r2
 80078e2:	7819      	ldrb	r1, [r3, #0]
 80078e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f1c3 0308 	rsb	r3, r3, #8
 80078ec:	22ff      	movs	r2, #255	@ 0xff
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078fc:	4403      	add	r3, r0
 80078fe:	400a      	ands	r2, r1
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	38e38e39 	.word	0x38e38e39

08007914 <phTools_CalcParity>:

static uint8_t phTools_CalcParity(
                                  uint8_t bDataByte,
                                  uint8_t bOption
                                  )
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	460a      	mov	r2, r1
 800791e:	71fb      	strb	r3, [r7, #7]
 8007920:	4613      	mov	r3, r2
 8007922:	71bb      	strb	r3, [r7, #6]
    uint8_t PH_MEMLOC_REM bBit;
    uint8_t PH_MEMLOC_REM bParity;

    if (bOption == PH_TOOLS_PARITY_OPTION_EVEN)
 8007924:	79bb      	ldrb	r3, [r7, #6]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <phTools_CalcParity+0x1c>
    {
        bParity = 0x00;
 800792a:	2300      	movs	r3, #0
 800792c:	73bb      	strb	r3, [r7, #14]
 800792e:	e001      	b.n	8007934 <phTools_CalcParity+0x20>
    }
    else
    {
        bParity = 0x01;
 8007930:	2301      	movs	r3, #1
 8007932:	73bb      	strb	r3, [r7, #14]
    }

    for (bBit = 0; bBit < 8U; ++bBit)
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
 8007938:	e00f      	b.n	800795a <phTools_CalcParity+0x46>
    {
        if (0U != (bDataByte & (uint8_t)(1U << bBit)))
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2201      	movs	r2, #1
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	b2da      	uxtb	r2, r3
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	4013      	ands	r3, r2
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <phTools_CalcParity+0x40>
        {
            ++bParity;
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	3301      	adds	r3, #1
 8007952:	73bb      	strb	r3, [r7, #14]
    for (bBit = 0; bBit < 8U; ++bBit)
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	3301      	adds	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b07      	cmp	r3, #7
 800795e:	d9ec      	bls.n	800793a <phTools_CalcParity+0x26>
        }
    }
    return bParity & 0x01U;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	b2db      	uxtb	r3, r3
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <phTools_UpdateCrc_B>:

static void phTools_UpdateCrc_B(uint8_t bCh, uint16_t *pLpwCrc)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	6039      	str	r1, [r7, #0]
 800797e:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh^(uint8_t)((*pLpwCrc)&0x00FFU));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b2da      	uxtb	r2, r3
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	4053      	eors	r3, r2
 800798a:	71fb      	strb	r3, [r7, #7]
    bCh = (bCh ^ (bCh<<4U));
 800798c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	b25a      	sxtb	r2, r3
 8007994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007998:	4053      	eors	r3, r2
 800799a:	b25b      	sxtb	r3, r3
 800799c:	71fb      	strb	r3, [r7, #7]
    *pLpwCrc = (*pLpwCrc >> 8U) ^ ((uint16_t)bCh << 8U) ^ ((uint16_t)bCh << 3U) ^ ((uint16_t)bCh>>4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	b21a      	sxth	r2, r3
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	b21b      	sxth	r3, r3
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	b21b      	sxth	r3, r3
 80079b0:	4053      	eors	r3, r2
 80079b2:	b21a      	sxth	r2, r3
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	b21b      	sxth	r3, r3
 80079bc:	4053      	eors	r3, r2
 80079be:	b21a      	sxth	r2, r3
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	4053      	eors	r3, r2
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	801a      	strh	r2, [r3, #0]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <phTools_ComputeCrc_B>:

phStatus_t phTools_ComputeCrc_B(
                                uint8_t *pData,
                                uint32_t dwLength,
                                uint8_t *pCrc)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b086      	sub	sp, #24
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_REM bChBlock = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
    uint16_t PH_MEMLOC_REM wCrc = 0xFFFF;
 80079ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079f2:	82bb      	strh	r3, [r7, #20]

    do
    {
        bChBlock = *pData++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	60fa      	str	r2, [r7, #12]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	75fb      	strb	r3, [r7, #23]
        phTools_UpdateCrc_B(bChBlock, &wCrc);
 80079fe:	f107 0214 	add.w	r2, r7, #20
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ffb4 	bl	8007974 <phTools_UpdateCrc_B>
    } while (0u != (--dwLength));
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60bb      	str	r3, [r7, #8]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ed      	bne.n	80079f4 <phTools_ComputeCrc_B+0x16>

    wCrc = ~wCrc;
 8007a18:	8abb      	ldrh	r3, [r7, #20]
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	82bb      	strh	r3, [r7, #20]

    pCrc[0] = (uint8_t) (wCrc & 0xFFU);
 8007a20:	8abb      	ldrh	r3, [r7, #20]
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	701a      	strb	r2, [r3, #0]
    pCrc[1] = (uint8_t) ( (wCrc>>8U) & 0xFFU);
 8007a28:	8abb      	ldrh	r3, [r7, #20]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3301      	adds	r3, #1
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <phacDiscLoop_Sw_Init>:
phStatus_t phacDiscLoop_Sw_Init(
                                phacDiscLoop_Sw_DataParams_t * pDataParams,
                                uint16_t wSizeOfDataParams,
                                void * pHalDataParams
                                )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	817b      	strh	r3, [r7, #10]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    uint8_t PH_MEMLOC_COUNT bCardIndex;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

    if (sizeof(phacDiscLoop_Sw_DataParams_t) != wSizeOfDataParams)
 8007a4e:	897b      	ldrh	r3, [r7, #10]
 8007a50:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8007a54:	d002      	beq.n	8007a5c <phacDiscLoop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AC_DISCLOOP);
 8007a56:	f244 0320 	movw	r3, #16416	@ 0x4020
 8007a5a:	e189      	b.n	8007d70 <phacDiscLoop_Sw_Init+0x330>
    }

    PH_ASSERT_NULL(pDataParams);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <phacDiscLoop_Sw_Init+0x26>
 8007a62:	2321      	movs	r3, #33	@ 0x21
 8007a64:	e184      	b.n	8007d70 <phacDiscLoop_Sw_Init+0x330>

    /* Initialize the private data */
    pDataParams->wId                      = PH_COMP_AC_DISCLOOP | PHAC_DISCLOOP_SW_ID;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f244 0201 	movw	r2, #16385	@ 0x4001
 8007a6c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams           = pHalDataParams;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	629a      	str	r2, [r3, #40]	@ 0x28
    pDataParams->pPal1443p3aDataParams    = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	62da      	str	r2, [r3, #44]	@ 0x2c
    pDataParams->pPal1443p3bDataParams    = NULL;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    pDataParams->pPal14443p4DataParams    = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	639a      	str	r2, [r3, #56]	@ 0x38
    pDataParams->pPalFelicaDataParams     = NULL;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    pDataParams->pPal1443p4aDataParams    = NULL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	63da      	str	r2, [r3, #60]	@ 0x3c
    pDataParams->pPalSli15693DataParams   = NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->pPal18000p3m3DataParams  = NULL;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    pDataParams->pAl18000p3m3DataParams   = NULL;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pPal18092mPIDataParams   = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->pAlT1TDataParams         = NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Default Operation Mode is NFC */
    pDataParams->bOpeMode                 = RD_LIB_MODE_NFC;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bNfcActivityVersion      = PHAC_DISCLOOP_NFC_ACTIVITY_VERSION_2_2;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2222      	movs	r2, #34	@ 0x22
 8007abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Default listen and poll mode technologies */
    pDataParams->bPollState               = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	811a      	strh	r2, [r3, #8]
    pDataParams->bPasPollTechCfg          = 0x00;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	709a      	strb	r2, [r3, #2]
    pDataParams->bPasLisTechCfg           = 0x00;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	715a      	strb	r2, [r3, #5]
    pDataParams->bActPollTechCfg          = 0x00;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	70da      	strb	r2, [r3, #3]
    pDataParams->bActLisTechCfg           = 0x00;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	719a      	strb	r2, [r3, #6]

    pDataParams->pPasTechPollSeq          = (uint8_t *)&gPasTechPollSeqMapTable;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4aa6      	ldr	r2, [pc, #664]	@ (8007d7c <phacDiscLoop_Sw_Init+0x33c>)
 8007ae2:	655a      	str	r2, [r3, #84]	@ 0x54

    pDataParams->bUseAntiColl             = PH_ON;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bLpcdEnabled             = PH_OFF;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	77da      	strb	r2, [r3, #31]

    pDataParams->bNumOfCards              = 0x00;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bDetectedTechs           = 0x00;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bCollPend                = 0x00;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	779a      	strb	r2, [r3, #30]
    pDataParams->wActPollGTimeUs          = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007b0e:	839a      	strh	r2, [r3, #28]

    pDataParams->bPasPollBailOut          = 0x00;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	711a      	strb	r2, [r3, #4]

    pDataParams->bFsciMax                 = PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pDataParams->bEMVCoPropOpRfFieldReset = PH_OFF;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]           = PHAC_DISCLOOP_TYPEA_DEFAULT_DEVICE_LIMIT;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	729a      	strb	r2, [r3, #10]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]         = PH_NXPNFCRDLIB_CONFIG_TYPEA_GT;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007b32:	821a      	strh	r2, [r3, #16]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_A);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	789b      	ldrb	r3, [r3, #2]
 8007b38:	f043 0301 	orr.w	r3, r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	709a      	strb	r2, [r3, #2]
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= (PHAC_DISCLOOP_ACT_POS_BIT_MASK_106);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	795b      	ldrb	r3, [r3, #5]
 8007b54:	f043 0301 	orr.w	r3, r3, #1
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	799b      	ldrb	r3, [r3, #6]
 8007b62:	f043 0301 	orr.w	r3, r3, #1
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B]           = PHAC_DISCLOOP_TYPEB_DEFAULT_DEVICE_LIMIT;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	72da      	strb	r2, [r3, #11]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]         = PH_NXPNFCRDLIB_CONFIG_TYPEB_GT;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007b78:	825a      	strh	r2, [r3, #18]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_B);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	789b      	ldrb	r3, [r3, #2]
 8007b7e:	f043 0302 	orr.w	r3, r3, #2
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	731a      	strb	r2, [r3, #12]
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F424]        = PHAC_DISCLOOP_TYPEF_DEFAULT_DEVICE_LIMIT;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	735a      	strb	r2, [r3, #13]
    /* Guard time GTFB */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]      = PH_NXPNFCRDLIB_CONFIG_TYPEF_GT;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f644 72b0 	movw	r2, #20400	@ 0x4fb0
 8007b9a:	829a      	strh	r2, [r3, #20]
    /* Guard time GTBF */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424]      = PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f643 32c4 	movw	r2, #15300	@ 0x3bc4
 8007ba2:	82da      	strh	r2, [r3, #22]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_F212 | PHAC_DISCLOOP_POS_BIT_MASK_F424);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	789b      	ldrb	r3, [r3, #2]
 8007ba8:	f043 030c 	orr.w	r3, r3, #12
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_212 ;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	78db      	ldrb	r3, [r3, #3]
 8007bb6:	f043 0302 	orr.w	r3, r3, #2
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE
    pDataParams->bActPollTechCfg                                     |= PHAC_DISCLOOP_ACT_POS_BIT_MASK_424 ;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	f043 0304 	orr.w	r3, r3, #4
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	70da      	strb	r2, [r3, #3]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	f043 0304 	orr.w	r3, r3, #4
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE
    pDataParams->bPasLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	795b      	ldrb	r3, [r3, #5]
 8007be0:	f043 0308 	orr.w	r3, r3, #8
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	715a      	strb	r2, [r3, #5]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_PASSIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	799b      	ldrb	r3, [r3, #6]
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF212_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE
    pDataParams->bActLisTechCfg                                      |= PHAC_DISCLOOP_POS_BIT_MASK_F424;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	799b      	ldrb	r3, [r3, #6]
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	719a      	strb	r2, [r3, #6]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEF424_TARGET_ACTIVE */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V]      = PHAC_DISCLOOP_TYPEV_DEFAULT_DEVICE_LIMIT;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	739a      	strb	r2, [r3, #14]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]    = PH_NXPNFCRDLIB_CONFIG_TYPEV_GT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8007c12:	831a      	strh	r2, [r3, #24]
    pDataParams->bPasPollTechCfg                                |= (PHAC_DISCLOOP_POS_BIT_MASK_V);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	789b      	ldrb	r3, [r3, #2]
 8007c18:	f043 0310 	orr.w	r3, r3, #16
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    /* Poll device limits */
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]   = PHAC_DISCLOOP_I18000P3M3_DEFAULT_DEVICE_LIMIT;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	73da      	strb	r2, [r3, #15]
    /* Guard times */
    pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = PH_NXPNFCRDLIB_CONFIG_I18000P3M3_GT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c2e:	835a      	strh	r2, [r3, #26]
    pDataParams->bPasPollTechCfg                                     |= (PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	789b      	ldrb	r3, [r3, #2]
 8007c34:	f043 0320 	orr.w	r3, r3, #32
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	709a      	strb	r2, [r3, #2]
#endif  /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    pDataParams->sTypeATargetInfo.bTotalTagsFound   = 0;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    #if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid        = 0;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri        = 0;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable  = 0;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad        = 0;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
    #endif

    #ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi  = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2208      	movs	r2, #8
 8007c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid   = 0x00;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad   = 0x00;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri   = 0x00;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi   = 0x00;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    #endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    pDataParams->sTypeBTargetInfo.bTotalTagsFound   = 0x00;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->sTypeBTargetInfo.bAfiReq           = 0x00;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bFsdi             = 0x08;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    pDataParams->sTypeBTargetInfo.bCid              = 0x00;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    pDataParams->sTypeBTargetInfo.bNad              = 0x00;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
    pDataParams->sTypeBTargetInfo.bDri              = 0x00;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    pDataParams->sTypeBTargetInfo.bDsi              = 0x00;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit  = 0x00;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    pDataParams->sTypeFTargetInfo.bTotalTagsFound  = 0x00;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    pDataParams->sTypeFTargetInfo.aSystemCode[0]   = 0xFF;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	22ff      	movs	r2, #255	@ 0xff
 8007cda:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    pDataParams->sTypeFTargetInfo.aSystemCode[1]   = 0xFF;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	22ff      	movs	r2, #255	@ 0xff
 8007ce2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    pDataParams->sTypeFTargetInfo.bTimeSlot        = PHPAL_FELICA_NUMSLOTS_4;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]
 8007cf2:	e00d      	b.n	8007d10 <phacDiscLoop_Sw_Init+0x2d0>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 8007cf4:	7dfa      	ldrb	r2, [r7, #23]
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	00da      	lsls	r2, r3, #3
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	188b      	adds	r3, r1, r2
 8007d04:	33a7      	adds	r3, #167	@ 0xa7
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0ee      	beq.n	8007cf4 <phacDiscLoop_Sw_Init+0x2b4>
    }
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid          = 0;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri          = 0;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable    = 0;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad          = 0;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    pDataParams->sTypeVTargetInfo.bTotalTagsFound  = 0x00;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->sTypeVTargetInfo.bFlag            = PHPAL_SLI15693_FLAG_DATA_RATE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    pDataParams->sTypeVTargetInfo.bMode            = PHPAL_SLI15693_FLAG_ADDRESSED;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound  = 0;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->sI18000p3m3TargetInfo.bM               = PHPAL_I18000P3M3_M_MANCHESTER_4;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    pDataParams->sI18000p3m3TargetInfo.bDr              = PHPAL_I18000P3M3_LF_847KHZ;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    pDataParams->sTargetParams.bRetryCount = 0;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    return PH_ERR_SUCCESS;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	08021ed4 	.word	0x08021ed4

08007d80 <phacDiscLoop_Sw_Run>:

phStatus_t phacDiscLoop_Sw_Run(
                               phacDiscLoop_Sw_DataParams_t * pDataParams,
                               uint8_t bEntryPoint
                               )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wDiscloopStatus;

    /* Disable Emd Check */
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d90:	2200      	movs	r2, #0
 8007d92:	215e      	movs	r1, #94	@ 0x5e
 8007d94:	4618      	mov	r0, r3
 8007d96:	f006 fb9f 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	81fb      	strh	r3, [r7, #14]
 8007d9e:	89fb      	ldrh	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <phacDiscLoop_Sw_Run+0x28>
 8007da4:	89fb      	ldrh	r3, [r7, #14]
 8007da6:	e0b9      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_OFF));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	2200      	movs	r2, #0
 8007dae:	2120      	movs	r1, #32
 8007db0:	4618      	mov	r0, r3
 8007db2:	f006 fb91 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8007db6:	4603      	mov	r3, r0
 8007db8:	81fb      	strh	r3, [r7, #14]
 8007dba:	89fb      	ldrh	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <phacDiscLoop_Sw_Run+0x44>
 8007dc0:	89fb      	ldrh	r3, [r7, #14]
 8007dc2:	e0ab      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    switch (bEntryPoint)
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <phacDiscLoop_Sw_Run+0x50>
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d07a      	beq.n	8007ec4 <phacDiscLoop_Sw_Run+0x144>
 8007dce:	e0a3      	b.n	8007f18 <phacDiscLoop_Sw_Run+0x198>
    {
    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_POLL):

#ifdef NXPBUILD__PHAC_DISCLOOP_LPCD
        /* Perform LPCD if Enabled. */
        if ((0U != (pDataParams->bLpcdEnabled))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7fdb      	ldrb	r3, [r3, #31]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d017      	beq.n	8007e08 <phacDiscLoop_Sw_Run+0x88>
            && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	891b      	ldrh	r3, [r3, #8]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d113      	bne.n	8007e08 <phacDiscLoop_Sw_Run+0x88>
        {
            wDiscloopStatus = phhalHw_Lpcd(pDataParams->pHalDataParams);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	4618      	mov	r0, r3
 8007de6:	f008 fdf3 	bl	80109d0 <phhalHw_Pn5180_Lpcd>
 8007dea:	4603      	mov	r3, r0
 8007dec:	81fb      	strh	r3, [r7, #14]
            if ((wDiscloopStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8007dee:	89fb      	ldrh	r3, [r7, #14]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <phacDiscLoop_Sw_Run+0x88>
            {
                if ((wDiscloopStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8007df6:	89fb      	ldrh	r3, [r7, #14]
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d102      	bne.n	8007e04 <phacDiscLoop_Sw_Run+0x84>
                {
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP); /* No card presence. */
 8007dfe:	f244 0384 	movw	r3, #16516	@ 0x4084
 8007e02:	e08b      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
                }

                return wDiscloopStatus; /* Other error. */
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	e089      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
            }
        }
#endif /* NXPBUILD__PHAC_DISCLOOP_LPCD */

        /* Check for active poll configuration */
        if((0U != (pDataParams->bActPollTechCfg))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	78db      	ldrb	r3, [r3, #3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d037      	beq.n	8007e80 <phacDiscLoop_Sw_Run+0x100>
           && (pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	891b      	ldrh	r3, [r3, #8]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d133      	bne.n	8007e80 <phacDiscLoop_Sw_Run+0x100>
        {
            wDiscloopStatus = phacDiscLoop_Sw_Int_ActivePollMode(pDataParams);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f931 	bl	8009080 <phacDiscLoop_Sw_Int_ActivePollMode>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	81fb      	strh	r3, [r7, #14]
            /* Continue with passive polling, if no peer detected */
            if((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_NO_TECH_DETECTED)
 8007e22:	89fb      	ldrh	r3, [r7, #14]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b84      	cmp	r3, #132	@ 0x84
 8007e28:	d00f      	beq.n	8007e4a <phacDiscLoop_Sw_Run+0xca>
            {
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8007e2a:	89fb      	ldrh	r3, [r7, #14]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b8c      	cmp	r3, #140	@ 0x8c
 8007e30:	d009      	beq.n	8007e46 <phacDiscLoop_Sw_Run+0xc6>
                    ((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_EXTERNAL_RFON))
 8007e32:	89fb      	ldrh	r3, [r7, #14]
 8007e34:	b2db      	uxtb	r3, r3
                if(((wDiscloopStatus & PH_ERR_MASK) != PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED) &&
 8007e36:	2b82      	cmp	r3, #130	@ 0x82
 8007e38:	d005      	beq.n	8007e46 <phacDiscLoop_Sw_Run+0xc6>
                {
                    pDataParams->wErrorCode = wDiscloopStatus;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	89fa      	ldrh	r2, [r7, #14]
 8007e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8007e40:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8007e44:	e06a      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
                }
                return wDiscloopStatus;
 8007e46:	89fb      	ldrh	r3, [r7, #14]
 8007e48:	e068      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
            }
            /* Field OFF after Active polling and wait for recovery time. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f006 fa62 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 8007e54:	4603      	mov	r3, r0
 8007e56:	81fb      	strh	r3, [r7, #14]
 8007e58:	89fb      	ldrh	r3, [r7, #14]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <phacDiscLoop_Sw_Run+0xe2>
 8007e5e:	89fb      	ldrh	r3, [r7, #14]
 8007e60:	e05c      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8b9b      	ldrh	r3, [r3, #28]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	f006 fa77 	bl	800e360 <phhalHw_Pn5180_Wait>
 8007e72:	4603      	mov	r3, r0
 8007e74:	81fb      	strh	r3, [r7, #14]
 8007e76:	89fb      	ldrh	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <phacDiscLoop_Sw_Run+0x100>
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
 8007e7e:	e04d      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
        }

        /* Check for passive poll configuration */
        if(0U != (pDataParams->bPasPollTechCfg))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	789b      	ldrb	r3, [r3, #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d012      	beq.n	8007eae <phacDiscLoop_Sw_Run+0x12e>
        {
            /* Perform the Poll operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_PollMode(pDataParams);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fa5a 	bl	8009342 <phacDiscLoop_Sw_Int_PollMode>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e9c:	d005      	beq.n	8007eaa <phacDiscLoop_Sw_Run+0x12a>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	89fa      	ldrh	r2, [r7, #14]
 8007ea2:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8007ea4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8007ea8:	e038      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8007eaa:	89fb      	ldrh	r3, [r7, #14]
 8007eac:	e036      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            pDataParams->bDetectedTechs = 0x00;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            pDataParams->bNumOfCards = 0x00;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8007ebe:	f244 0384 	movw	r3, #16516	@ 0x4084
 8007ec2:	e02b      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
        }

    case ((uint8_t)PHAC_DISCLOOP_ENTRY_POINT_LISTEN):
        /* Check for listen configurations */
        if ((0U != (pDataParams->bPasLisTechCfg)) || (0U != (pDataParams->bActLisTechCfg)))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	795b      	ldrb	r3, [r3, #5]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <phacDiscLoop_Sw_Run+0x154>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	799b      	ldrb	r3, [r3, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01e      	beq.n	8007f12 <phacDiscLoop_Sw_Run+0x192>
        {
            /* Turn OFF RF field if already on. */
            PH_CHECK_SUCCESS_FCT(wDiscloopStatus, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f006 fa1d 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	81fb      	strh	r3, [r7, #14]
 8007ee2:	89fb      	ldrh	r3, [r7, #14]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <phacDiscLoop_Sw_Run+0x16c>
 8007ee8:	89fb      	ldrh	r3, [r7, #14]
 8007eea:	e017      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>

            /* Perform listen operation and store the Status code. */
            wDiscloopStatus = phacDiscLoop_Sw_Int_ListenMode(pDataParams);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f867 	bl	8008fc0 <phacDiscLoop_Sw_Int_ListenMode>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	81fb      	strh	r3, [r7, #14]

            /* If error is from below layer, store it and return failure */
            if((wDiscloopStatus & PH_COMP_MASK) != PH_COMP_AC_DISCLOOP)
 8007ef6:	89fb      	ldrh	r3, [r7, #14]
 8007ef8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f00:	d005      	beq.n	8007f0e <phacDiscLoop_Sw_Run+0x18e>
            {
                pDataParams->wErrorCode = wDiscloopStatus;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	89fa      	ldrh	r2, [r7, #14]
 8007f06:	84da      	strh	r2, [r3, #38]	@ 0x26
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 8007f08:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8007f0c:	e006      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
            }
            return wDiscloopStatus;
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	e004      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007f12:	f244 0321 	movw	r3, #16417	@ 0x4021
 8007f16:	e001      	b.n	8007f1c <phacDiscLoop_Sw_Run+0x19c>
        }

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8007f18:	f244 0321 	movw	r3, #16417	@ 0x4021
    }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <phacDiscLoop_Sw_SetConfig>:
phStatus_t phacDiscLoop_Sw_SetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t wValue
                                     )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
 8007f30:	4613      	mov	r3, r2
 8007f32:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8007f34:	2300      	movs	r3, #0
 8007f36:	81fb      	strh	r3, [r7, #14]
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS)
    uint8_t     PH_MEMLOC_REM bIndex;
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    uint16_t    PH_MEMLOC_REM wSliConfigFlags = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	817b      	strh	r3, [r7, #10]
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

    switch(wConfig)
 8007f3c:	887b      	ldrh	r3, [r7, #2]
 8007f3e:	2b94      	cmp	r3, #148	@ 0x94
 8007f40:	f200 8463 	bhi.w	800880a <phacDiscLoop_Sw_SetConfig+0x8e6>
 8007f44:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <phacDiscLoop_Sw_SetConfig+0x28>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08008209 	.word	0x08008209
 8007f50:	08008211 	.word	0x08008211
 8007f54:	08008219 	.word	0x08008219
 8007f58:	08008231 	.word	0x08008231
 8007f5c:	08008249 	.word	0x08008249
 8007f60:	08008251 	.word	0x08008251
 8007f64:	08008283 	.word	0x08008283
 8007f68:	0800880b 	.word	0x0800880b
 8007f6c:	0800880b 	.word	0x0800880b
 8007f70:	0800880b 	.word	0x0800880b
 8007f74:	0800880b 	.word	0x0800880b
 8007f78:	0800880b 	.word	0x0800880b
 8007f7c:	0800880b 	.word	0x0800880b
 8007f80:	0800880b 	.word	0x0800880b
 8007f84:	0800880b 	.word	0x0800880b
 8007f88:	0800880b 	.word	0x0800880b
 8007f8c:	08008395 	.word	0x08008395
 8007f90:	080084f7 	.word	0x080084f7
 8007f94:	08008613 	.word	0x08008613
 8007f98:	08008699 	.word	0x08008699
 8007f9c:	0800879d 	.word	0x0800879d
 8007fa0:	0800880b 	.word	0x0800880b
 8007fa4:	0800880b 	.word	0x0800880b
 8007fa8:	0800880b 	.word	0x0800880b
 8007fac:	0800880b 	.word	0x0800880b
 8007fb0:	0800880b 	.word	0x0800880b
 8007fb4:	0800880b 	.word	0x0800880b
 8007fb8:	0800880b 	.word	0x0800880b
 8007fbc:	0800880b 	.word	0x0800880b
 8007fc0:	0800880b 	.word	0x0800880b
 8007fc4:	0800880b 	.word	0x0800880b
 8007fc8:	0800880b 	.word	0x0800880b
 8007fcc:	0800880b 	.word	0x0800880b
 8007fd0:	0800880b 	.word	0x0800880b
 8007fd4:	0800880b 	.word	0x0800880b
 8007fd8:	0800880b 	.word	0x0800880b
 8007fdc:	0800880b 	.word	0x0800880b
 8007fe0:	0800880b 	.word	0x0800880b
 8007fe4:	0800880b 	.word	0x0800880b
 8007fe8:	0800880b 	.word	0x0800880b
 8007fec:	0800880b 	.word	0x0800880b
 8007ff0:	0800880b 	.word	0x0800880b
 8007ff4:	0800880b 	.word	0x0800880b
 8007ff8:	0800880b 	.word	0x0800880b
 8007ffc:	0800880b 	.word	0x0800880b
 8008000:	0800880b 	.word	0x0800880b
 8008004:	0800880b 	.word	0x0800880b
 8008008:	0800880b 	.word	0x0800880b
 800800c:	08008511 	.word	0x08008511
 8008010:	0800851d 	.word	0x0800851d
 8008014:	08008537 	.word	0x08008537
 8008018:	0800854f 	.word	0x0800854f
 800801c:	08008567 	.word	0x08008567
 8008020:	08008573 	.word	0x08008573
 8008024:	0800859b 	.word	0x0800859b
 8008028:	0800880b 	.word	0x0800880b
 800802c:	0800880b 	.word	0x0800880b
 8008030:	0800880b 	.word	0x0800880b
 8008034:	0800880b 	.word	0x0800880b
 8008038:	0800880b 	.word	0x0800880b
 800803c:	0800880b 	.word	0x0800880b
 8008040:	0800880b 	.word	0x0800880b
 8008044:	0800880b 	.word	0x0800880b
 8008048:	0800880b 	.word	0x0800880b
 800804c:	080083f1 	.word	0x080083f1
 8008050:	08008409 	.word	0x08008409
 8008054:	08008421 	.word	0x08008421
 8008058:	0800842d 	.word	0x0800842d
 800805c:	08008455 	.word	0x08008455
 8008060:	0800847d 	.word	0x0800847d
 8008064:	08008495 	.word	0x08008495
 8008068:	080084ad 	.word	0x080084ad
 800806c:	080084c7 	.word	0x080084c7
 8008070:	080084df 	.word	0x080084df
 8008074:	0800880b 	.word	0x0800880b
 8008078:	0800880b 	.word	0x0800880b
 800807c:	0800880b 	.word	0x0800880b
 8008080:	0800880b 	.word	0x0800880b
 8008084:	0800880b 	.word	0x0800880b
 8008088:	0800880b 	.word	0x0800880b
 800808c:	0800880b 	.word	0x0800880b
 8008090:	0800862d 	.word	0x0800862d
 8008094:	08008645 	.word	0x08008645
 8008098:	0800865d 	.word	0x0800865d
 800809c:	08008669 	.word	0x08008669
 80080a0:	08008681 	.word	0x08008681
 80080a4:	0800880b 	.word	0x0800880b
 80080a8:	08008607 	.word	0x08008607
 80080ac:	0800880b 	.word	0x0800880b
 80080b0:	0800880b 	.word	0x0800880b
 80080b4:	0800880b 	.word	0x0800880b
 80080b8:	0800880b 	.word	0x0800880b
 80080bc:	0800880b 	.word	0x0800880b
 80080c0:	0800880b 	.word	0x0800880b
 80080c4:	0800880b 	.word	0x0800880b
 80080c8:	0800880b 	.word	0x0800880b
 80080cc:	080086b3 	.word	0x080086b3
 80080d0:	080086f3 	.word	0x080086f3
 80080d4:	0800880b 	.word	0x0800880b
 80080d8:	0800880b 	.word	0x0800880b
 80080dc:	0800880b 	.word	0x0800880b
 80080e0:	0800880b 	.word	0x0800880b
 80080e4:	0800880b 	.word	0x0800880b
 80080e8:	0800880b 	.word	0x0800880b
 80080ec:	0800880b 	.word	0x0800880b
 80080f0:	0800880b 	.word	0x0800880b
 80080f4:	0800880b 	.word	0x0800880b
 80080f8:	0800880b 	.word	0x0800880b
 80080fc:	0800880b 	.word	0x0800880b
 8008100:	0800880b 	.word	0x0800880b
 8008104:	0800880b 	.word	0x0800880b
 8008108:	0800880b 	.word	0x0800880b
 800810c:	080087b7 	.word	0x080087b7
 8008110:	080087d5 	.word	0x080087d5
 8008114:	0800880b 	.word	0x0800880b
 8008118:	0800880b 	.word	0x0800880b
 800811c:	0800880b 	.word	0x0800880b
 8008120:	0800880b 	.word	0x0800880b
 8008124:	0800880b 	.word	0x0800880b
 8008128:	0800880b 	.word	0x0800880b
 800812c:	0800880b 	.word	0x0800880b
 8008130:	0800880b 	.word	0x0800880b
 8008134:	0800880b 	.word	0x0800880b
 8008138:	0800880b 	.word	0x0800880b
 800813c:	0800880b 	.word	0x0800880b
 8008140:	0800880b 	.word	0x0800880b
 8008144:	0800880b 	.word	0x0800880b
 8008148:	0800880b 	.word	0x0800880b
 800814c:	0800836d 	.word	0x0800836d
 8008150:	0800880b 	.word	0x0800880b
 8008154:	080082a1 	.word	0x080082a1
 8008158:	080081bf 	.word	0x080081bf
 800815c:	080081c9 	.word	0x080081c9
 8008160:	0800880b 	.word	0x0800880b
 8008164:	0800828b 	.word	0x0800828b
 8008168:	0800880b 	.word	0x0800880b
 800816c:	080081fd 	.word	0x080081fd
 8008170:	080081a1 	.word	0x080081a1
 8008174:	080081ab 	.word	0x080081ab
 8008178:	080081b5 	.word	0x080081b5
 800817c:	080081f3 	.word	0x080081f3
 8008180:	0800880b 	.word	0x0800880b
 8008184:	0800880b 	.word	0x0800880b
 8008188:	0800880b 	.word	0x0800880b
 800818c:	080087f3 	.word	0x080087f3
 8008190:	08008377 	.word	0x08008377
 8008194:	08008259 	.word	0x08008259
 8008198:	080083af 	.word	0x080083af
 800819c:	080085c3 	.word	0x080085c3
    {
    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        pDataParams->bActLisTechCfg = (uint8_t)wValue;
 80081a0:	883b      	ldrh	r3, [r7, #0]
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	719a      	strb	r2, [r3, #6]
        break;
 80081a8:	e334      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        pDataParams->bActPollTechCfg = (uint8_t)wValue;
 80081aa:	883b      	ldrh	r3, [r7, #0]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	70da      	strb	r2, [r3, #3]
        break;
 80081b2:	e32f      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        pDataParams->bPasLisTechCfg = (uint8_t)wValue;
 80081b4:	883b      	ldrh	r3, [r7, #0]
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	715a      	strb	r2, [r3, #5]
        break;
 80081bc:	e32a      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        pDataParams->bCollPend = (uint8_t)wValue;
 80081be:	883b      	ldrh	r3, [r7, #0]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	779a      	strb	r2, [r3, #30]
        break;
 80081c6:	e325      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 80081c8:	883b      	ldrh	r3, [r7, #0]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d00a      	beq.n	80081e6 <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION) ||
 80081d0:	883b      	ldrh	r3, [r7, #0]
 80081d2:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d006      	beq.n	80081e6 <phacDiscLoop_Sw_SetConfig+0x2c2>
            ((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_REMOVAL)))
 80081d8:	883b      	ldrh	r3, [r7, #0]
 80081da:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0x00FFU) == PHAC_DISCLOOP_POLL_STATE_DETECTION) ||
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d002      	beq.n	80081e6 <phacDiscLoop_Sw_SetConfig+0x2c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80081e0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80081e4:	e317      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bPollState = (wValue & 0x00FFU);
 80081e6:	883b      	ldrh	r3, [r7, #0]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	811a      	strh	r2, [r3, #8]
        break;
 80081f0:	e310      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        pDataParams->bPasPollTechCfg = (uint8_t)wValue;
 80081f2:	883b      	ldrh	r3, [r7, #0]
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	709a      	strb	r2, [r3, #2]
        break;
 80081fa:	e30b      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        pDataParams->bUseAntiColl = (uint8_t)wValue;
 80081fc:	883b      	ldrh	r3, [r7, #0]
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f883 2020 	strb.w	r2, [r3, #32]
        break;
 8008206:	e305      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A] = wValue;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	883a      	ldrh	r2, [r7, #0]
 800820c:	821a      	strh	r2, [r3, #16]
        break;
 800820e:	e301      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B] = wValue;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	883a      	ldrh	r2, [r7, #0]
 8008214:	825a      	strh	r2, [r3, #18]
        break;
 8008216:	e2fd      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_TYPEF_GT)
 8008218:	883b      	ldrh	r3, [r7, #0]
 800821a:	f644 72af 	movw	r2, #20399	@ 0x4faf
 800821e:	4293      	cmp	r3, r2
 8008220:	d802      	bhi.n	8008228 <phacDiscLoop_Sw_SetConfig+0x304>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008222:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008226:	e2f6      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212] = wValue;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	883a      	ldrh	r2, [r7, #0]
 800822c:	829a      	strh	r2, [r3, #20]
        break;
 800822e:	e2f1      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
        if(wValue < PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT)
 8008230:	883b      	ldrh	r3, [r7, #0]
 8008232:	f643 32c3 	movw	r2, #15299	@ 0x3bc3
 8008236:	4293      	cmp	r3, r2
 8008238:	d802      	bhi.n	8008240 <phacDiscLoop_Sw_SetConfig+0x31c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800823a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800823e:	e2ea      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424] = wValue;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	883a      	ldrh	r2, [r7, #0]
 8008244:	82da      	strh	r2, [r3, #22]
        break;
 8008246:	e2e5      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V] = wValue;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	883a      	ldrh	r2, [r7, #0]
 800824c:	831a      	strh	r2, [r3, #24]
        break;
 800824e:	e2e1      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = wValue;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	883a      	ldrh	r2, [r7, #0]
 8008254:	835a      	strh	r2, [r3, #26]
        break;
 8008256:	e2dd      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 8008258:	883b      	ldrh	r3, [r7, #0]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <phacDiscLoop_Sw_SetConfig+0x34c>
            (((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8008264:	883b      	ldrh	r3, [r7, #0]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0302 	and.w	r3, r3, #2
        if ((((uint8_t)wValue & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A) ||
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <phacDiscLoop_Sw_SetConfig+0x352>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008270:	f244 0323 	movw	r3, #16419	@ 0x4023
 8008274:	e2cf      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bEMVCoPropOpRfFieldReset = (uint8_t)wValue;
 8008276:	883b      	ldrh	r3, [r7, #0]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        break;
 8008280:	e2c8      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        pDataParams->wActPollGTimeUs = wValue;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	883a      	ldrh	r2, [r7, #0]
 8008286:	839a      	strh	r2, [r3, #28]
        break;
 8008288:	e2c4      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        if (0u != (wValue & ~(PHAC_DISCLOOP_POS_BIT_MASK_A |  PHAC_DISCLOOP_POS_BIT_MASK_B
 800828a:	883b      	ldrh	r3, [r7, #0]
 800828c:	2b3f      	cmp	r3, #63	@ 0x3f
 800828e:	d902      	bls.n	8008296 <phacDiscLoop_Sw_SetConfig+0x372>
            | PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212
            | PHAC_DISCLOOP_POS_BIT_MASK_V | PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3)))
        {
            /* Invalid bail out option set */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008290:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008294:	e2bf      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->bPasPollBailOut = (uint8_t) wValue;
 8008296:	883b      	ldrh	r3, [r7, #0]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	711a      	strb	r2, [r3, #4]
        break;
 800829e:	e2b9      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_OPE_MODE:
        if(!((wValue == RD_LIB_MODE_NFC) ||
 80082a0:	883b      	ldrh	r3, [r7, #0]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d008      	beq.n	80082b8 <phacDiscLoop_Sw_SetConfig+0x394>
 80082a6:	883b      	ldrh	r3, [r7, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d005      	beq.n	80082b8 <phacDiscLoop_Sw_SetConfig+0x394>
 80082ac:	883b      	ldrh	r3, [r7, #0]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d002      	beq.n	80082b8 <phacDiscLoop_Sw_SetConfig+0x394>
            (wValue == RD_LIB_MODE_EMVCO) ||
            (wValue == RD_LIB_MODE_ISO)))
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80082b2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80082b6:	e2ae      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bOpeMode = (uint8_t)wValue;
 80082b8:	883b      	ldrh	r3, [r7, #0]
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_OPE_MODE, wValue));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c6:	883a      	ldrh	r2, [r7, #0]
 80082c8:	215a      	movs	r1, #90	@ 0x5a
 80082ca:	4618      	mov	r0, r3
 80082cc:	f006 f904 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80082d0:	4603      	mov	r3, r0
 80082d2:	81fb      	strh	r3, [r7, #14]
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <phacDiscLoop_Sw_SetConfig+0x3ba>
 80082da:	89fb      	ldrh	r3, [r7, #14]
 80082dc:	e29b      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
#ifdef NXPBUILD__PHPAL_I14443P4_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetConfig(pDataParams->pPal14443p4DataParams, PHPAL_I14443P4_CONFIG_OPE_MODE, wValue));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e2:	883a      	ldrh	r2, [r7, #0]
 80082e4:	2106      	movs	r1, #6
 80082e6:	4618      	mov	r0, r3
 80082e8:	f00d fbb4 	bl	8015a54 <phpalI14443p4_Sw_SetConfig>
 80082ec:	4603      	mov	r3, r0
 80082ee:	81fb      	strh	r3, [r7, #14]
 80082f0:	89fb      	ldrh	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <phacDiscLoop_Sw_SetConfig+0x3d6>
 80082f6:	89fb      	ldrh	r3, [r7, #14]
 80082f8:	e28d      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4_SW */

#ifdef NXPBUILD__PHPAL_I14443P3B_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_SetConfig(pDataParams->pPal1443p3bDataParams, PHPAL_I14443P3B_CONFIG_OPE_MODE, wValue));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fe:	883a      	ldrh	r2, [r7, #0]
 8008300:	2101      	movs	r1, #1
 8008302:	4618      	mov	r0, r3
 8008304:	f00c fd0c 	bl	8014d20 <phpalI14443p3b_Sw_SetConfig>
 8008308:	4603      	mov	r3, r0
 800830a:	81fb      	strh	r3, [r7, #14]
 800830c:	89fb      	ldrh	r3, [r7, #14]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <phacDiscLoop_Sw_SetConfig+0x3f2>
 8008312:	89fb      	ldrh	r3, [r7, #14]
 8008314:	e27f      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3B_SW */

#ifdef NXPBUILD__PHPAL_I14443P3A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_SetConfig(pDataParams->pPal1443p3aDataParams, PHPAL_I14443P3A_CONFIG_OPE_MODE, wValue));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831a:	883a      	ldrh	r2, [r7, #0]
 800831c:	2101      	movs	r1, #1
 800831e:	4618      	mov	r0, r3
 8008320:	f00b fec9 	bl	80140b6 <phpalI14443p3a_Sw_SetConfig>
 8008324:	4603      	mov	r3, r0
 8008326:	81fb      	strh	r3, [r7, #14]
 8008328:	89fb      	ldrh	r3, [r7, #14]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <phacDiscLoop_Sw_SetConfig+0x40e>
 800832e:	89fb      	ldrh	r3, [r7, #14]
 8008330:	e271      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P3A_SW */

#ifdef NXPBUILD__PHPAL_I14443P4A_SW
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_SetConfig(pDataParams->pPal1443p4aDataParams, PHPAL_I14443P4A_CONFIG_OPE_MODE, wValue));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008336:	883a      	ldrh	r2, [r7, #0]
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f00d fc5c 	bl	8015bf8 <phpalI14443p4a_Sw_SetConfig>
 8008340:	4603      	mov	r3, r0
 8008342:	81fb      	strh	r3, [r7, #14]
 8008344:	89fb      	ldrh	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <phacDiscLoop_Sw_SetConfig+0x42a>
 800834a:	89fb      	ldrh	r3, [r7, #14]
 800834c:	e263      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_I14443P4A_SW */

#ifdef NXPBUILD__PHPAL_SLI15693_SW
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_OPE_MODE, wValue));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008352:	883a      	ldrh	r2, [r7, #0]
 8008354:	210a      	movs	r1, #10
 8008356:	4618      	mov	r0, r3
 8008358:	f00f fdf2 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 800835c:	4603      	mov	r3, r0
 800835e:	81fb      	strh	r3, [r7, #14]
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8255 	beq.w	8008812 <phacDiscLoop_Sw_SetConfig+0x8ee>
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	e254      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
#endif /* NXPBUILD__PHPAL_SLI15693_SW */
        break;

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        pDataParams->bLpcdEnabled = (uint8_t)wValue;
 800836c:	883b      	ldrh	r3, [r7, #0]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	77da      	strb	r2, [r3, #31]
        break;
 8008374:	e24e      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        if ((wValue != 0x08) && (wValue != PH_NXPNFCRDLIB_CONFIG_DEFAULT_FSCI_VALUE))
 8008376:	883b      	ldrh	r3, [r7, #0]
 8008378:	2b08      	cmp	r3, #8
 800837a:	d005      	beq.n	8008388 <phacDiscLoop_Sw_SetConfig+0x464>
 800837c:	883b      	ldrh	r3, [r7, #0]
 800837e:	2b08      	cmp	r3, #8
 8008380:	d002      	beq.n	8008388 <phacDiscLoop_Sw_SetConfig+0x464>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008382:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008386:	e246      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->bFsciMax = (uint8_t)wValue;
 8008388:	883b      	ldrh	r3, [r7, #0]
 800838a:	b2da      	uxtb	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        break;
 8008392:	e23f      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008394:	883b      	ldrh	r3, [r7, #0]
 8008396:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <phacDiscLoop_Sw_SetConfig+0x480>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800839e:	f244 0321 	movw	r3, #16417	@ 0x4021
 80083a2:	e238      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] = (uint8_t)wValue;
 80083a4:	883b      	ldrh	r3, [r7, #0]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	729a      	strb	r2, [r3, #10]
        break;
 80083ac:	e232      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80083ae:	883b      	ldrh	r3, [r7, #0]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d006      	beq.n	80083c4 <phacDiscLoop_Sw_SetConfig+0x4a0>
 80083b6:	883b      	ldrh	r3, [r7, #0]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <phacDiscLoop_Sw_SetConfig+0x4a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80083be:	f244 0321 	movw	r3, #16417	@ 0x4021
 80083c2:	e228      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80083c4:	883b      	ldrh	r3, [r7, #0]
 80083c6:	0a1b      	lsrs	r3, r3, #8
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80083cc:	7b7b      	ldrb	r3, [r7, #13]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <phacDiscLoop_Sw_SetConfig+0x4b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80083d2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80083d6:	e21e      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80083d8:	7b7a      	ldrb	r2, [r7, #13]
 80083da:	883b      	ldrh	r3, [r7, #0]
 80083dc:	b2d8      	uxtb	r0, r3
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4613      	mov	r3, r2
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	440b      	add	r3, r1
 80083e8:	336c      	adds	r3, #108	@ 0x6c
 80083ea:	4602      	mov	r2, r0
 80083ec:	701a      	strb	r2, [r3, #0]
        break;
 80083ee:	e211      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        if (wValue > PHPAL_I14443P4_FRAMESIZE_MAX)
 80083f0:	883b      	ldrh	r3, [r7, #0]
 80083f2:	2b0c      	cmp	r3, #12
 80083f4:	d902      	bls.n	80083fc <phacDiscLoop_Sw_SetConfig+0x4d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80083f6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80083fa:	e20c      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi = (uint8_t)wValue;
 80083fc:	883b      	ldrh	r3, [r7, #0]
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        break;
 8008406:	e205      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 8008408:	883b      	ldrh	r3, [r7, #0]
 800840a:	2b0e      	cmp	r3, #14
 800840c:	d902      	bls.n	8008414 <phacDiscLoop_Sw_SetConfig+0x4f0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800840e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008412:	e200      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid = (uint8_t)wValue;
 8008414:	883b      	ldrh	r3, [r7, #0]
 8008416:	b2da      	uxtb	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
        break;
 800841e:	e1f9      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad = (uint8_t)wValue;
 8008420:	883b      	ldrh	r3, [r7, #0]
 8008422:	b2da      	uxtb	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
        break;
 800842a:	e1f3      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800842c:	883b      	ldrh	r3, [r7, #0]
 800842e:	2b03      	cmp	r3, #3
 8008430:	d807      	bhi.n	8008442 <phacDiscLoop_Sw_SetConfig+0x51e>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8008438:	2b01      	cmp	r3, #1
 800843a:	d105      	bne.n	8008448 <phacDiscLoop_Sw_SetConfig+0x524>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800843c:	883b      	ldrh	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <phacDiscLoop_Sw_SetConfig+0x524>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008442:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008446:	e1e6      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wValue;
 8008448:	883b      	ldrh	r3, [r7, #0]
 800844a:	b2da      	uxtb	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
        break;
 8008452:	e1df      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8008454:	883b      	ldrh	r3, [r7, #0]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d807      	bhi.n	800846a <phacDiscLoop_Sw_SetConfig+0x546>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 8008460:	2b01      	cmp	r3, #1
 8008462:	d105      	bne.n	8008470 <phacDiscLoop_Sw_SetConfig+0x54c>
            ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P4A_DATARATE_106)))
 8008464:	883b      	ldrh	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <phacDiscLoop_Sw_SetConfig+0x54c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800846a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800846e:	e1d2      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wValue;
 8008470:	883b      	ldrh	r3, [r7, #0]
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        break;
 800847a:	e1cb      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 800847c:	883b      	ldrh	r3, [r7, #0]
 800847e:	2b0e      	cmp	r3, #14
 8008480:	d902      	bls.n	8008488 <phacDiscLoop_Sw_SetConfig+0x564>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008482:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008486:	e1c6      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid = (uint8_t)wValue;
 8008488:	883b      	ldrh	r3, [r7, #0]
 800848a:	b2da      	uxtb	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        break;
 8008492:	e1bf      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 8008494:	883b      	ldrh	r3, [r7, #0]
 8008496:	2b03      	cmp	r3, #3
 8008498:	d902      	bls.n	80084a0 <phacDiscLoop_Sw_SetConfig+0x57c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800849a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800849e:	e1ba      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri = (uint8_t)wValue;
 80084a0:	883b      	ldrh	r3, [r7, #0]
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        break;
 80084aa:	e1b3      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        if (wValue == 0U)
 80084ac:	883b      	ldrh	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d104      	bne.n	80084bc <phacDiscLoop_Sw_SetConfig+0x598>
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_OFF;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        }
        else
        {
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
        }
        break;
 80084ba:	e1ab      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable = PH_ON;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        break;
 80084c4:	e1a6      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        if (wValue > 255U)
 80084c6:	883b      	ldrh	r3, [r7, #0]
 80084c8:	2bff      	cmp	r3, #255	@ 0xff
 80084ca:	d902      	bls.n	80084d2 <phacDiscLoop_Sw_SetConfig+0x5ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80084cc:	f244 0321 	movw	r3, #16417	@ 0x4021
 80084d0:	e1a1      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad = (uint8_t)wValue;
 80084d2:	883b      	ldrh	r3, [r7, #0]
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
        break;
 80084dc:	e19a      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 80084de:	883b      	ldrh	r3, [r7, #0]
 80084e0:	2b30      	cmp	r3, #48	@ 0x30
 80084e2:	d902      	bls.n	80084ea <phacDiscLoop_Sw_SetConfig+0x5c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80084e4:	f244 0321 	movw	r3, #16417	@ 0x4021
 80084e8:	e195      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength = (uint8_t)wValue;
 80084ea:	883b      	ldrh	r3, [r7, #0]
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        break;
 80084f4:	e18e      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
    if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80084f6:	883b      	ldrh	r3, [r7, #0]
 80084f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <phacDiscLoop_Sw_SetConfig+0x5e2>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008500:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008504:	e187      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
    }
    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] = (uint8_t)wValue;
 8008506:	883b      	ldrh	r3, [r7, #0]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	72da      	strb	r2, [r3, #11]
    break;
 800850e:	e181      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_AFI_REQ:
      pDataParams->sTypeBTargetInfo.bAfiReq = (uint8_t)wValue;
 8008510:	883b      	ldrh	r3, [r7, #0]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
      break;
 800851a:	e17b      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_EXTATQB:
      if (wValue == 0U)
 800851c:	883b      	ldrh	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d104      	bne.n	800852c <phacDiscLoop_Sw_SetConfig+0x608>
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 0;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      }
      else
      {
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
      }
      break;
 800852a:	e173      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
          pDataParams->sTypeBTargetInfo.bExtendedAtqBbit = 1;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
      break;
 8008534:	e16e      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_FSDI:
      if (wValue > PHPAL_I14443P3B_FRAMESIZE_MAX)
 8008536:	883b      	ldrh	r3, [r7, #0]
 8008538:	2b0c      	cmp	r3, #12
 800853a:	d902      	bls.n	8008542 <phacDiscLoop_Sw_SetConfig+0x61e>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800853c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008540:	e169      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bFsdi = (uint8_t)wValue;
 8008542:	883b      	ldrh	r3, [r7, #0]
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
      break;
 800854c:	e162      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_CID:
      if (wValue > PHAC_DISCLOOP_SW_I3P4_MAX_CID)
 800854e:	883b      	ldrh	r3, [r7, #0]
 8008550:	2b0e      	cmp	r3, #14
 8008552:	d902      	bls.n	800855a <phacDiscLoop_Sw_SetConfig+0x636>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008554:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008558:	e15d      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bCid = (uint8_t)wValue;
 800855a:	883b      	ldrh	r3, [r7, #0]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
      break;
 8008564:	e156      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_NAD:
        /* Valid NAD complaint with ISO/IEC 7816-3 shall be set by application. */
        pDataParams->sTypeBTargetInfo.bNad = (uint8_t)wValue;
 8008566:	883b      	ldrh	r3, [r7, #0]
 8008568:	b2da      	uxtb	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
        break;
 8008570:	e150      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 8008572:	883b      	ldrh	r3, [r7, #0]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d807      	bhi.n	8008588 <phacDiscLoop_Sw_SetConfig+0x664>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DRI) ||
 800857e:	2b01      	cmp	r3, #1
 8008580:	d105      	bne.n	800858e <phacDiscLoop_Sw_SetConfig+0x66a>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 8008582:	883b      	ldrh	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <phacDiscLoop_Sw_SetConfig+0x66a>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008588:	f244 0321 	movw	r3, #16417	@ 0x4021
 800858c:	e143      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wValue;
 800858e:	883b      	ldrh	r3, [r7, #0]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
      break;
 8008598:	e13c      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 800859a:	883b      	ldrh	r3, [r7, #0]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d807      	bhi.n	80085b0 <phacDiscLoop_Sw_SetConfig+0x68c>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
      if ((wValue > PHAC_DISCLOOP_SW_I3P4_MAX_DSI) ||
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d105      	bne.n	80085b6 <phacDiscLoop_Sw_SetConfig+0x692>
          ((pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) && (wValue != PHPAL_I14443P3B_DATARATE_106)))
 80085aa:	883b      	ldrh	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <phacDiscLoop_Sw_SetConfig+0x692>
      {
          return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80085b0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80085b4:	e12f      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
      }
      pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wValue;
 80085b6:	883b      	ldrh	r3, [r7, #0]
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
      break;
 80085c0:	e128      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SLEEP_STATE:
        if (((wValue & 0xFFU) != PH_ON) && ((wValue & 0xFFU) != PH_OFF))
 80085c2:	883b      	ldrh	r3, [r7, #0]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d006      	beq.n	80085d8 <phacDiscLoop_Sw_SetConfig+0x6b4>
 80085ca:	883b      	ldrh	r3, [r7, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <phacDiscLoop_Sw_SetConfig+0x6b4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80085d2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80085d6:	e11e      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        bIndex = (uint8_t)((wValue & 0xFF00U) >> 8U);
 80085d8:	883b      	ldrh	r3, [r7, #0]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	b29b      	uxth	r3, r3
 80085de:	737b      	strb	r3, [r7, #13]
        if (bIndex >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 80085e0:	7b7b      	ldrb	r3, [r7, #13]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <phacDiscLoop_Sw_SetConfig+0x6c8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80085e6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80085ea:	e114      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = (uint8_t)(wValue & 0xFFU);
 80085ec:	7b7a      	ldrb	r2, [r7, #13]
 80085ee:	883b      	ldrh	r3, [r7, #0]
 80085f0:	b2d8      	uxtb	r0, r3
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	33dc      	adds	r3, #220	@ 0xdc
 8008600:	4602      	mov	r2, r0
 8008602:	701a      	strb	r2, [r3, #0]
        break;
 8008604:	e106      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
        pDataParams->bFelicaBaud = (uint8_t)wValue;
 8008606:	883b      	ldrh	r3, [r7, #0]
 8008608:	b2da      	uxtb	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        break;
 8008610:	e100      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 8008612:	883b      	ldrh	r3, [r7, #0]
 8008614:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <phacDiscLoop_Sw_SetConfig+0x6fe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800861c:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008620:	e0f9      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] = (uint8_t)wValue;
 8008622:	883b      	ldrh	r3, [r7, #0]
 8008624:	b2da      	uxtb	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	731a      	strb	r2, [r3, #12]
        break;
 800862a:	e0f3      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        if (wValue > PHPAL_I18092MPI_DID_MAX)
 800862c:	883b      	ldrh	r3, [r7, #0]
 800862e:	2b0e      	cmp	r3, #14
 8008630:	d902      	bls.n	8008638 <phacDiscLoop_Sw_SetConfig+0x714>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008632:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008636:	e0ee      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid = (uint8_t)wValue;
 8008638:	883b      	ldrh	r3, [r7, #0]
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
        break;
 8008642:	e0e7      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        if (wValue > PHPAL_I18092MPI_FRAMESIZE_254)
 8008644:	883b      	ldrh	r3, [r7, #0]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d902      	bls.n	8008650 <phacDiscLoop_Sw_SetConfig+0x72c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800864a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800864e:	e0e2      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri = (uint8_t)wValue;
 8008650:	883b      	ldrh	r3, [r7, #0]
 8008652:	b2da      	uxtb	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
        break;
 800865a:	e0db      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable = (uint8_t)wValue;
 800865c:	883b      	ldrh	r3, [r7, #0]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
        break;
 8008666:	e0d5      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        if (wValue > 255U)
 8008668:	883b      	ldrh	r3, [r7, #0]
 800866a:	2bff      	cmp	r3, #255	@ 0xff
 800866c:	d902      	bls.n	8008674 <phacDiscLoop_Sw_SetConfig+0x750>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800866e:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008672:	e0d0      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad = (uint8_t)wValue;
 8008674:	883b      	ldrh	r3, [r7, #0]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
        break;
 800867e:	e0c9      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        if (wValue > PHPAL_I18092MPI_MAX_GI_LENGTH)
 8008680:	883b      	ldrh	r3, [r7, #0]
 8008682:	2b30      	cmp	r3, #48	@ 0x30
 8008684:	d902      	bls.n	800868c <phacDiscLoop_Sw_SetConfig+0x768>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008686:	f244 0321 	movw	r3, #16417	@ 0x4021
 800868a:	e0c4      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength = (uint8_t)wValue;
 800868c:	883b      	ldrh	r3, [r7, #0]
 800868e:	b2da      	uxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
        break;
 8008696:	e0bd      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 8008698:	883b      	ldrh	r3, [r7, #0]
 800869a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <phacDiscLoop_Sw_SetConfig+0x784>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80086a2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80086a6:	e0b6      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] = (uint8_t)wValue;
 80086a8:	883b      	ldrh	r3, [r7, #0]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	739a      	strb	r2, [r3, #14]
        break;
 80086b0:	e0b0      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if((wValue != PHHAL_HW_RF_RX_DATARATE_HIGH)
 80086b2:	883b      	ldrh	r3, [r7, #0]
 80086b4:	2b0d      	cmp	r3, #13
 80086b6:	d005      	beq.n	80086c4 <phacDiscLoop_Sw_SetConfig+0x7a0>
           && (wValue != PHHAL_HW_RF_RX_DATARATE_LOW))
 80086b8:	883b      	ldrh	r3, [r7, #0]
 80086ba:	2b0c      	cmp	r3, #12
 80086bc:	d002      	beq.n	80086c4 <phacDiscLoop_Sw_SetConfig+0x7a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80086be:	f244 0321 	movw	r3, #16417	@ 0x4021
 80086c2:	e0a8      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Set request flag to indicate high data rate */
        if(wValue == PHHAL_HW_RF_RX_DATARATE_HIGH)
 80086c4:	883b      	ldrh	r3, [r7, #0]
 80086c6:	2b0d      	cmp	r3, #13
 80086c8:	d109      	bne.n	80086de <phacDiscLoop_Sw_SetConfig+0x7ba>
        {
            pDataParams->sTypeVTargetInfo.bFlag |= PHPAL_SLI15693_FLAG_DATA_RATE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80086d0:	f043 0302 	orr.w	r3, r3, #2
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        }
        else
        {
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
        }
        break;
 80086dc:	e09a      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
            pDataParams->sTypeVTargetInfo.bFlag &= ~((uint8_t)PHPAL_SLI15693_FLAG_DATA_RATE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80086e4:	f023 0302 	bic.w	r3, r3, #2
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
        break;
 80086f0:	e090      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        if((wValue != PHPAL_SLI15693_FLAG_ADDRESSED)
 80086f2:	883b      	ldrh	r3, [r7, #0]
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d008      	beq.n	800870a <phacDiscLoop_Sw_SetConfig+0x7e6>
           && (wValue != PHPAL_SLI15693_FLAG_SELECTED) && (wValue != PHPAL_SLI15693_FLAG_NON_ADDRESSED))
 80086f8:	883b      	ldrh	r3, [r7, #0]
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d005      	beq.n	800870a <phacDiscLoop_Sw_SetConfig+0x7e6>
 80086fe:	883b      	ldrh	r3, [r7, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <phacDiscLoop_Sw_SetConfig+0x7e6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008704:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008708:	e085      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }

        /* Save previous Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_GetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, &wSliConfigFlags));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	f107 020a 	add.w	r2, r7, #10
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f00f fde9 	bl	80182ec <phpalSli15693_Sw_GetConfig>
 800871a:	4603      	mov	r3, r0
 800871c:	81fb      	strh	r3, [r7, #14]
 800871e:	89fb      	ldrh	r3, [r7, #14]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <phacDiscLoop_Sw_SetConfig+0x804>
 8008724:	89fb      	ldrh	r3, [r7, #14]
 8008726:	e076      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>

        if(wValue == PHPAL_SLI15693_FLAG_SELECTED)
 8008728:	883b      	ldrh	r3, [r7, #0]
 800872a:	2b10      	cmp	r3, #16
 800872c:	d10a      	bne.n	8008744 <phacDiscLoop_Sw_SetConfig+0x820>
        {
            /* Set the Select_flag and clear the Adress_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 800872e:	897b      	ldrh	r3, [r7, #10]
 8008730:	f043 0310 	orr.w	r3, r3, #16
 8008734:	b29b      	uxth	r3, r3
 8008736:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8008738:	897b      	ldrh	r3, [r7, #10]
 800873a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800873e:	b29b      	uxth	r3, r3
 8008740:	817b      	strh	r3, [r7, #10]
 8008742:	e017      	b.n	8008774 <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else if(wValue == PHPAL_SLI15693_FLAG_ADDRESSED)
 8008744:	883b      	ldrh	r3, [r7, #0]
 8008746:	2b20      	cmp	r3, #32
 8008748:	d10a      	bne.n	8008760 <phacDiscLoop_Sw_SetConfig+0x83c>
        {
            /* Set the Adress_flag and clear the Select_flag */
            wSliConfigFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 800874a:	897b      	ldrh	r3, [r7, #10]
 800874c:	f043 0320 	orr.w	r3, r3, #32
 8008750:	b29b      	uxth	r3, r3
 8008752:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8008754:	897b      	ldrh	r3, [r7, #10]
 8008756:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800875a:	b29b      	uxth	r3, r3
 800875c:	817b      	strh	r3, [r7, #10]
 800875e:	e009      	b.n	8008774 <phacDiscLoop_Sw_SetConfig+0x850>
        }
        else
        {
            /* Clear both Adress_flag and Select_flag */
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8008760:	897b      	ldrh	r3, [r7, #10]
 8008762:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008766:	b29b      	uxth	r3, r3
 8008768:	817b      	strh	r3, [r7, #10]
            wSliConfigFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 800876a:	897b      	ldrh	r3, [r7, #10]
 800876c:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8008770:	b29b      	uxth	r3, r3
 8008772:	817b      	strh	r3, [r7, #10]
        }

        /* Update Flags value */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetConfig(pDataParams->pPalSli15693DataParams, PHPAL_SLI15693_CONFIG_FLAGS, wSliConfigFlags));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008778:	897a      	ldrh	r2, [r7, #10]
 800877a:	2100      	movs	r1, #0
 800877c:	4618      	mov	r0, r3
 800877e:	f00f fbdf 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 8008782:	4603      	mov	r3, r0
 8008784:	81fb      	strh	r3, [r7, #14]
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <phacDiscLoop_Sw_SetConfig+0x86c>
 800878c:	89fb      	ldrh	r3, [r7, #14]
 800878e:	e042      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>

        pDataParams->sTypeVTargetInfo.bMode = (uint8_t)wValue;
 8008790:	883b      	ldrh	r3, [r7, #0]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
        break;
 800879a:	e03b      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        if ((wValue & 0xFFU) > PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED)
 800879c:	883b      	ldrh	r3, [r7, #0]
 800879e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <phacDiscLoop_Sw_SetConfig+0x888>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80087a6:	f244 0321 	movw	r3, #16417	@ 0x4021
 80087aa:	e034      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] = (uint8_t)wValue;
 80087ac:	883b      	ldrh	r3, [r7, #0]
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	73da      	strb	r2, [r3, #15]
        break;
 80087b4:	e02e      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        if((wValue != PHPAL_I18000P3M3_M_MANCHESTER_2)
 80087b6:	883b      	ldrh	r3, [r7, #0]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d005      	beq.n	80087c8 <phacDiscLoop_Sw_SetConfig+0x8a4>
           && (wValue != PHPAL_I18000P3M3_M_MANCHESTER_4))
 80087bc:	883b      	ldrh	r3, [r7, #0]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d002      	beq.n	80087c8 <phacDiscLoop_Sw_SetConfig+0x8a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80087c2:	f244 0321 	movw	r3, #16417	@ 0x4021
 80087c6:	e026      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bM = (uint8_t)wValue;
 80087c8:	883b      	ldrh	r3, [r7, #0]
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        break;
 80087d2:	e01f      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        if((wValue != PHPAL_I18000P3M3_LF_423KHZ)
 80087d4:	883b      	ldrh	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <phacDiscLoop_Sw_SetConfig+0x8c2>
           && (wValue != PHPAL_I18000P3M3_LF_847KHZ))
 80087da:	883b      	ldrh	r3, [r7, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d002      	beq.n	80087e6 <phacDiscLoop_Sw_SetConfig+0x8c2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80087e0:	f244 0321 	movw	r3, #16417	@ 0x4021
 80087e4:	e017      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sI18000p3m3TargetInfo.bDr = (uint8_t)wValue;
 80087e6:	883b      	ldrh	r3, [r7, #0]
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        break;
 80087f0:	e010      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        if (wValue > 255U)
 80087f2:	883b      	ldrh	r3, [r7, #0]
 80087f4:	2bff      	cmp	r3, #255	@ 0xff
 80087f6:	d902      	bls.n	80087fe <phacDiscLoop_Sw_SetConfig+0x8da>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 80087f8:	f244 0321 	movw	r3, #16417	@ 0x4021
 80087fc:	e00b      	b.n	8008816 <phacDiscLoop_Sw_SetConfig+0x8f2>
        }
        pDataParams->sTargetParams.bRetryCount = (uint8_t)wValue;
 80087fe:	883b      	ldrh	r3, [r7, #0]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
        break;
 8008808:	e004      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800880a:	f244 0321 	movw	r3, #16417	@ 0x4021
 800880e:	81fb      	strh	r3, [r7, #14]
 8008810:	e000      	b.n	8008814 <phacDiscLoop_Sw_SetConfig+0x8f0>
        break;
 8008812:	bf00      	nop
    }

    return status;
 8008814:	89fb      	ldrh	r3, [r7, #14]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop

08008820 <phacDiscLoop_Sw_GetConfig>:
phStatus_t phacDiscLoop_Sw_GetConfig(
                                     phacDiscLoop_Sw_DataParams_t * pDataParams,
                                     uint16_t wConfig,
                                     uint16_t * pValue
                                     )
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	460b      	mov	r3, r1
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800882e:	2300      	movs	r3, #0
 8008830:	82fb      	strh	r3, [r7, #22]

    switch(wConfig)
 8008832:	897b      	ldrh	r3, [r7, #10]
 8008834:	2b92      	cmp	r3, #146	@ 0x92
 8008836:	f200 82a4 	bhi.w	8008d82 <phacDiscLoop_Sw_GetConfig+0x562>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <phacDiscLoop_Sw_GetConfig+0x20>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008b49 	.word	0x08008b49
 8008844:	08008c07 	.word	0x08008c07
 8008848:	08008c55 	.word	0x08008c55
 800884c:	08008c5f 	.word	0x08008c5f
 8008850:	08008ce5 	.word	0x08008ce5
 8008854:	08008d35 	.word	0x08008d35
 8008858:	08008b23 	.word	0x08008b23
 800885c:	08008d83 	.word	0x08008d83
 8008860:	08008d83 	.word	0x08008d83
 8008864:	08008d83 	.word	0x08008d83
 8008868:	08008d83 	.word	0x08008d83
 800886c:	08008d83 	.word	0x08008d83
 8008870:	08008d83 	.word	0x08008d83
 8008874:	08008d83 	.word	0x08008d83
 8008878:	08008d83 	.word	0x08008d83
 800887c:	08008d83 	.word	0x08008d83
 8008880:	08008b61 	.word	0x08008b61
 8008884:	08008c1f 	.word	0x08008c1f
 8008888:	08008c77 	.word	0x08008c77
 800888c:	08008cef 	.word	0x08008cef
 8008890:	08008d3f 	.word	0x08008d3f
 8008894:	08008d83 	.word	0x08008d83
 8008898:	08008d83 	.word	0x08008d83
 800889c:	08008d83 	.word	0x08008d83
 80088a0:	08008d83 	.word	0x08008d83
 80088a4:	08008d83 	.word	0x08008d83
 80088a8:	08008d83 	.word	0x08008d83
 80088ac:	08008d83 	.word	0x08008d83
 80088b0:	08008d83 	.word	0x08008d83
 80088b4:	08008d83 	.word	0x08008d83
 80088b8:	08008d83 	.word	0x08008d83
 80088bc:	08008d83 	.word	0x08008d83
 80088c0:	08008b53 	.word	0x08008b53
 80088c4:	08008c11 	.word	0x08008c11
 80088c8:	08008c69 	.word	0x08008c69
 80088cc:	08008cfb 	.word	0x08008cfb
 80088d0:	08008d4b 	.word	0x08008d4b
 80088d4:	08008c2b 	.word	0x08008c2b
 80088d8:	08008d83 	.word	0x08008d83
 80088dc:	08008d83 	.word	0x08008d83
 80088e0:	08008d83 	.word	0x08008d83
 80088e4:	08008d83 	.word	0x08008d83
 80088e8:	08008d83 	.word	0x08008d83
 80088ec:	08008d83 	.word	0x08008d83
 80088f0:	08008d83 	.word	0x08008d83
 80088f4:	08008d83 	.word	0x08008d83
 80088f8:	08008d83 	.word	0x08008d83
 80088fc:	08008d83 	.word	0x08008d83
 8008900:	08008d83 	.word	0x08008d83
 8008904:	08008d83 	.word	0x08008d83
 8008908:	08008d83 	.word	0x08008d83
 800890c:	08008d83 	.word	0x08008d83
 8008910:	08008d83 	.word	0x08008d83
 8008914:	08008c39 	.word	0x08008c39
 8008918:	08008c47 	.word	0x08008c47
 800891c:	08008d83 	.word	0x08008d83
 8008920:	08008d83 	.word	0x08008d83
 8008924:	08008d83 	.word	0x08008d83
 8008928:	08008d83 	.word	0x08008d83
 800892c:	08008d83 	.word	0x08008d83
 8008930:	08008d83 	.word	0x08008d83
 8008934:	08008d83 	.word	0x08008d83
 8008938:	08008d83 	.word	0x08008d83
 800893c:	08008d83 	.word	0x08008d83
 8008940:	08008b6d 	.word	0x08008b6d
 8008944:	08008b7b 	.word	0x08008b7b
 8008948:	08008b89 	.word	0x08008b89
 800894c:	08008ba5 	.word	0x08008ba5
 8008950:	08008b97 	.word	0x08008b97
 8008954:	08008bb3 	.word	0x08008bb3
 8008958:	08008bc1 	.word	0x08008bc1
 800895c:	08008bcf 	.word	0x08008bcf
 8008960:	08008bdd 	.word	0x08008bdd
 8008964:	08008beb 	.word	0x08008beb
 8008968:	08008d83 	.word	0x08008d83
 800896c:	08008d83 	.word	0x08008d83
 8008970:	08008d83 	.word	0x08008d83
 8008974:	08008d83 	.word	0x08008d83
 8008978:	08008d83 	.word	0x08008d83
 800897c:	08008d83 	.word	0x08008d83
 8008980:	08008bf9 	.word	0x08008bf9
 8008984:	08008c91 	.word	0x08008c91
 8008988:	08008c9f 	.word	0x08008c9f
 800898c:	08008cad 	.word	0x08008cad
 8008990:	08008cbb 	.word	0x08008cbb
 8008994:	08008cc9 	.word	0x08008cc9
 8008998:	08008cd7 	.word	0x08008cd7
 800899c:	08008c83 	.word	0x08008c83
 80089a0:	08008d83 	.word	0x08008d83
 80089a4:	08008d83 	.word	0x08008d83
 80089a8:	08008d83 	.word	0x08008d83
 80089ac:	08008d83 	.word	0x08008d83
 80089b0:	08008d83 	.word	0x08008d83
 80089b4:	08008d83 	.word	0x08008d83
 80089b8:	08008d83 	.word	0x08008d83
 80089bc:	08008d83 	.word	0x08008d83
 80089c0:	08008d09 	.word	0x08008d09
 80089c4:	08008d27 	.word	0x08008d27
 80089c8:	08008d83 	.word	0x08008d83
 80089cc:	08008d83 	.word	0x08008d83
 80089d0:	08008d83 	.word	0x08008d83
 80089d4:	08008d83 	.word	0x08008d83
 80089d8:	08008d83 	.word	0x08008d83
 80089dc:	08008d83 	.word	0x08008d83
 80089e0:	08008d83 	.word	0x08008d83
 80089e4:	08008d83 	.word	0x08008d83
 80089e8:	08008d83 	.word	0x08008d83
 80089ec:	08008d83 	.word	0x08008d83
 80089f0:	08008d83 	.word	0x08008d83
 80089f4:	08008d83 	.word	0x08008d83
 80089f8:	08008d83 	.word	0x08008d83
 80089fc:	08008d83 	.word	0x08008d83
 8008a00:	08008d59 	.word	0x08008d59
 8008a04:	08008d67 	.word	0x08008d67
 8008a08:	08008d83 	.word	0x08008d83
 8008a0c:	08008d83 	.word	0x08008d83
 8008a10:	08008d83 	.word	0x08008d83
 8008a14:	08008d83 	.word	0x08008d83
 8008a18:	08008d83 	.word	0x08008d83
 8008a1c:	08008d83 	.word	0x08008d83
 8008a20:	08008d83 	.word	0x08008d83
 8008a24:	08008d83 	.word	0x08008d83
 8008a28:	08008d83 	.word	0x08008d83
 8008a2c:	08008d83 	.word	0x08008d83
 8008a30:	08008d83 	.word	0x08008d83
 8008a34:	08008d83 	.word	0x08008d83
 8008a38:	08008d83 	.word	0x08008d83
 8008a3c:	08008d83 	.word	0x08008d83
 8008a40:	08008b0d 	.word	0x08008b0d
 8008a44:	08008ae7 	.word	0x08008ae7
 8008a48:	08008d83 	.word	0x08008d83
 8008a4c:	08008ab1 	.word	0x08008ab1
 8008a50:	08008abd 	.word	0x08008abd
 8008a54:	08008b19 	.word	0x08008b19
 8008a58:	08008af5 	.word	0x08008af5
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008acb 	.word	0x08008acb
 8008a64:	08008a99 	.word	0x08008a99
 8008a68:	08008aa5 	.word	0x08008aa5
 8008a6c:	08008a8d 	.word	0x08008a8d
 8008a70:	08008b01 	.word	0x08008b01
 8008a74:	08008d83 	.word	0x08008d83
 8008a78:	08008d83 	.word	0x08008d83
 8008a7c:	08008d83 	.word	0x08008d83
 8008a80:	08008d75 	.word	0x08008d75
 8008a84:	08008b2d 	.word	0x08008b2d
 8008a88:	08008b3b 	.word	0x08008b3b
    {
    case PHAC_DISCLOOP_CONFIG_PAS_LIS_TECH_CFG:
        *pValue = pDataParams->bPasLisTechCfg;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	795b      	ldrb	r3, [r3, #5]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	801a      	strh	r2, [r3, #0]
        break;
 8008a96:	e177      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_LIS_TECH_CFG:
        *pValue = pDataParams->bActLisTechCfg;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	799b      	ldrb	r3, [r3, #6]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	801a      	strh	r2, [r3, #0]
        break;
 8008aa2:	e171      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ACT_POLL_TECH_CFG:
        *pValue = pDataParams->bActPollTechCfg;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	78db      	ldrb	r3, [r3, #3]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	801a      	strh	r2, [r3, #0]
        break;
 8008aae:	e16b      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_COLLISION_PENDING:
        *pValue = pDataParams->bCollPend;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	7f9b      	ldrb	r3, [r3, #30]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	801a      	strh	r2, [r3, #0]
        break;
 8008aba:	e165      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NEXT_POLL_STATE:
        *pValue = (uint8_t)pDataParams->bPollState;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	801a      	strh	r2, [r3, #0]
        break;
 8008ac8:	e15e      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ANTI_COLL:
        *pValue = pDataParams->bUseAntiColl;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	801a      	strh	r2, [r3, #0]
        break;
 8008ad6:	e157      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TECH_DETECTED:
        *pValue = pDataParams->bDetectedTechs;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	801a      	strh	r2, [r3, #0]
        break;
 8008ae4:	e150      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_NR_TAGS_FOUND:
        *pValue = pDataParams->bNumOfCards;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	801a      	strh	r2, [r3, #0]
         break;
 8008af2:	e149      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_BAIL_OUT:
        *pValue = pDataParams->bPasPollBailOut;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	791b      	ldrb	r3, [r3, #4]
 8008af8:	461a      	mov	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	801a      	strh	r2, [r3, #0]
        break;
 8008afe:	e143      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_PAS_POLL_TECH_CFG:
        *pValue = pDataParams->bPasPollTechCfg;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	789b      	ldrb	r3, [r3, #2]
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	801a      	strh	r2, [r3, #0]
        break;
 8008b0a:	e13d      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ENABLE_LPCD:
        *pValue = pDataParams->bLpcdEnabled;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	7fdb      	ldrb	r3, [r3, #31]
 8008b10:	461a      	mov	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	801a      	strh	r2, [r3, #0]
        break;
 8008b16:	e137      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_ADDITIONAL_INFO:
        *pValue = pDataParams->wErrorCode;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	801a      	strh	r2, [r3, #0]
        break;
 8008b20:	e132      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GT_ACTIVE_US:
        *pValue = pDataParams->wActPollGTimeUs;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8b9a      	ldrh	r2, [r3, #28]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	801a      	strh	r2, [r3, #0]
        break;
 8008b2a:	e12d      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROF_FSCI_MAX:
        *pValue = pDataParams->bFsciMax;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	801a      	strh	r2, [r3, #0]
        break;
 8008b38:	e126      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_EMVCO_PROP_OP_RF_RESET:
        *pValue = pDataParams->bEMVCoPropOpRfFieldReset;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	801a      	strh	r2, [r3, #0]
        break;
 8008b46:	e11f      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS
    case PHAC_DISCLOOP_CONFIG_GTA_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A];
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8a1a      	ldrh	r2, [r3, #16]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	801a      	strh	r2, [r3, #0]
        break;
 8008b50:	e11a      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_TAGS_FOUND:
        *pValue = pDataParams->sTypeATargetInfo.bTotalTagsFound;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	801a      	strh	r2, [r3, #0]
        break;
 8008b5e:	e113      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A];
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	7a9b      	ldrb	r3, [r3, #10]
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	801a      	strh	r2, [r3, #0]
        break;
 8008b6a:	e10d      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_FSDI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bFsdi;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	801a      	strh	r2, [r3, #0]
        break;
 8008b78:	e106      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_CID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8008b80:	461a      	mov	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	801a      	strh	r2, [r3, #0]
        break;
 8008b86:	e0ff      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bNad;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	801a      	strh	r2, [r3, #0]
        break;
 8008b94:	e0f8      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DSI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	801a      	strh	r2, [r3, #0]
        break;
 8008ba2:	e0f1      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_I3P4_DRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	801a      	strh	r2, [r3, #0]
        break;
 8008bb0:	e0ea      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_DID:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bDid;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8008bb8:	461a      	mov	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	801a      	strh	r2, [r3, #0]
        break;
 8008bbe:	e0e3      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_LRI:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bLri;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	801a      	strh	r2, [r3, #0]
        break;
 8008bcc:	e0dc      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNadEnable;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	801a      	strh	r2, [r3, #0]
        break;
 8008bda:	e0d5      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_NAD:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bNad;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	801a      	strh	r2, [r3, #0]
        break;
 8008be8:	e0ce      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_GI_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	801a      	strh	r2, [r3, #0]
        break;
 8008bf6:	e0c7      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEA_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	801a      	strh	r2, [r3, #0]
        break;
 8008c04:	e0c0      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    case PHAC_DISCLOOP_CONFIG_GTB_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B];
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8a5a      	ldrh	r2, [r3, #18]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	801a      	strh	r2, [r3, #0]
        break;
 8008c0e:	e0bb      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_TAGS_FOUND:
        *pValue = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	801a      	strh	r2, [r3, #0]
        break;
 8008c1c:	e0b4      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

     case PHAC_DISCLOOP_CONFIG_TYPEB_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B];
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	7adb      	ldrb	r3, [r3, #11]
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	801a      	strh	r2, [r3, #0]
        break;
 8008c28:	e0ae      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_SUPPORT_TYPE4B:
        *pValue = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bSupportType4B;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8008c30:	461a      	mov	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	801a      	strh	r2, [r3, #0]
        break;
 8008c36:	e0a7      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DRI:
        *pValue = pDataParams->sTypeBTargetInfo.bDri;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	801a      	strh	r2, [r3, #0]
        break;
 8008c44:	e0a0      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEB_DSI:
        *pValue = pDataParams->sTypeBTargetInfo.bDsi;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	801a      	strh	r2, [r3, #0]
        break;
 8008c52:	e099      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    case PHAC_DISCLOOP_CONFIG_GTFB_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212];
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8a9a      	ldrh	r2, [r3, #20]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	801a      	strh	r2, [r3, #0]
         break;
 8008c5c:	e094      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_GTBF_VALUE_US:
         *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F424];
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8ada      	ldrh	r2, [r3, #22]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	801a      	strh	r2, [r3, #0]
         break;
 8008c66:	e08f      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_TAGS_FOUND:
        *pValue = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	801a      	strh	r2, [r3, #0]
        break;
 8008c74:	e088      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212];
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	7b1b      	ldrb	r3, [r3, #12]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	801a      	strh	r2, [r3, #0]
        break;
 8008c80:	e082      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD:
         *pValue = pDataParams->bFelicaBaud;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008c88:	461a      	mov	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	801a      	strh	r2, [r3, #0]
         break;
 8008c8e:	e07b      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS)  || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined(NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_DID:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bDid;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	801a      	strh	r2, [r3, #0]
        break;
 8008c9c:	e074      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_LRI:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bLri;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	801a      	strh	r2, [r3, #0]
        break;
 8008caa:	e06d      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD_ENABLE:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNadEnable;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	801a      	strh	r2, [r3, #0]
        break;
 8008cb8:	e066      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_NAD:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bNad;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	801a      	strh	r2, [r3, #0]
        break;
 8008cc6:	e05f      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_GI_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	801a      	strh	r2, [r3, #0]
        break;
 8008cd4:	e058      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEF_P2P_ATR_RES_LEN:
        *pValue = pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	801a      	strh	r2, [r3, #0]
        break;
 8008ce2:	e051      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    case PHAC_DISCLOOP_CONFIG_GTV_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V];
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8b1a      	ldrh	r2, [r3, #24]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	801a      	strh	r2, [r3, #0]
        break;
 8008cec:	e04c      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V];
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	7b9b      	ldrb	r3, [r3, #14]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	801a      	strh	r2, [r3, #0]
        break;
 8008cf8:	e046      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_TAGS_FOUND:
        *pValue = pDataParams->sTypeVTargetInfo.bTotalTagsFound;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8008d00:	461a      	mov	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	801a      	strh	r2, [r3, #0]
        break;
 8008d06:	e03f      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_RX_DATA_RATE:
        if(0U != (pDataParams->sTypeVTargetInfo.bFlag & PHPAL_SLI15693_FLAG_DATA_RATE))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <phacDiscLoop_Sw_GetConfig+0x4fe>
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	220d      	movs	r2, #13
 8008d1a:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
        }
        break;
 8008d1c:	e034      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
            *pValue = PHHAL_HW_RF_RX_DATARATE_LOW;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	220c      	movs	r2, #12
 8008d22:	801a      	strh	r2, [r3, #0]
        break;
 8008d24:	e030      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_TYPEV_MODE:
        *pValue = pDataParams->sTypeVTargetInfo.bMode;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	801a      	strh	r2, [r3, #0]
        break;
 8008d32:	e029      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    case PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US:
        *pValue = pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8b5a      	ldrh	r2, [r3, #26]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	801a      	strh	r2, [r3, #0]
        break;
 8008d3c:	e024      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_DEVICE_LIMIT:
        *pValue = pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3];
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	7bdb      	ldrb	r3, [r3, #15]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	801a      	strh	r2, [r3, #0]
        break;
 8008d48:	e01e      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_18000P3M3_TAGS_FOUND:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8008d50:	461a      	mov	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	801a      	strh	r2, [r3, #0]
        break;
 8008d56:	e017      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_MODULATION:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bM;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8008d5e:	461a      	mov	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	801a      	strh	r2, [r3, #0]
        break;
 8008d64:	e010      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

    case PHAC_DISCLOOP_CONFIG_I18000P3M3_FREQUENCY:
        *pValue = pDataParams->sI18000p3m3TargetInfo.bDr;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 30ee 	ldrb.w	r3, [r3, #238]	@ 0xee
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	801a      	strh	r2, [r3, #0]
        break;
 8008d72:	e009      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>

#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */

#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    case PHAC_DISCLOOP_CONFIG_TARGET_RETRY_COUNT:
        *pValue = pDataParams->sTargetParams.bRetryCount;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	801a      	strh	r2, [r3, #0]
        break;
 8008d80:	e002      	b.n	8008d88 <phacDiscLoop_Sw_GetConfig+0x568>
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */

    default:
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8008d82:	f244 0321 	movw	r3, #16417	@ 0x4021
 8008d86:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 8008d88:	8afb      	ldrh	r3, [r7, #22]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop

08008d98 <phacDiscLoop_Sw_ActivateCard>:
phStatus_t phacDiscLoop_Sw_ActivateCard(
                                        phacDiscLoop_Sw_DataParams_t * pDataParams,
                                        uint8_t bTechType,
                                        uint8_t bTagIndex
                                        )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
 8008da4:	4613      	mov	r3, r2
 8008da6:	70bb      	strb	r3, [r7, #2]
    return phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, bTechType, bTagIndex);
 8008da8:	78ba      	ldrb	r2, [r7, #2]
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 ff40 	bl	8009c34 <phacDiscLoop_Sw_Int_ActivateDevice>
 8008db4:	4603      	mov	r3, r0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <phacDiscLoop_Sw_Int_Apply_PTGT>:
 * ***************************************************************************************************************** */

static phStatus_t phacDiscLoop_Sw_Int_Apply_PTGT(
        phacDiscLoop_Sw_DataParams_t *pDataParams
        )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bPollTech;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint16_t   PH_MEMLOC_COUNT wPTGT = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	813b      	strh	r3, [r7, #8]

    /* Check for Proprietary technology and apply Proprietary Technology Guard Time(PTGT) based on preceding technology */
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	737b      	strb	r3, [r7, #13]
 8008dd4:	e0ba      	b.n	8008f4c <phacDiscLoop_Sw_Int_Apply_PTGT+0x18c>
    {
        bPollTech = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dda:	7b7b      	ldrb	r3, [r7, #13]
 8008ddc:	4413      	add	r3, r2
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	733b      	strb	r3, [r7, #12]

        if (bPollTech > PHAC_DISCLOOP_TECH_TYPE_V)
 8008de2:	7b3b      	ldrb	r3, [r7, #12]
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	f240 80ae 	bls.w	8008f46 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
        {
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8008dea:	7b3b      	ldrb	r3, [r7, #12]
 8008dec:	2b05      	cmp	r3, #5
 8008dee:	d106      	bne.n	8008dfe <phacDiscLoop_Sw_Int_Apply_PTGT+0x3e>
                ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) != PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	789b      	ldrb	r3, [r3, #2]
 8008df4:	f003 0320 	and.w	r3, r3, #32
            if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80a3 	beq.w	8008f44 <phacDiscLoop_Sw_Int_Apply_PTGT+0x184>
                /* continue to check next technology if present technology is not enabled in Polling loop */
                continue;
            }

            /* Only one technology(ISO18000p3m3) enabled */
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8008dfe:	7b3b      	ldrb	r3, [r7, #12]
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	d115      	bne.n	8008e30 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
                (pDataParams->bPasPollTechCfg == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	789b      	ldrb	r3, [r3, #2]
            if((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8008e08:	2b20      	cmp	r3, #32
 8008e0a:	d111      	bne.n	8008e30 <phacDiscLoop_Sw_Int_Apply_PTGT+0x70>
            {
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 8008e0c:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8008e10:	813b      	strh	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 8008e12:	893b      	ldrh	r3, [r7, #8]
 8008e14:	461a      	mov	r2, r3
 8008e16:	2105      	movs	r1, #5
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff f883 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	81fb      	strh	r3, [r7, #14]
 8008e22:	89fb      	ldrh	r3, [r7, #14]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <phacDiscLoop_Sw_Int_Apply_PTGT+0x6c>
 8008e28:	89fb      	ldrh	r3, [r7, #14]
 8008e2a:	e094      	b.n	8008f56 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                return status;
 8008e2c:	89fb      	ldrh	r3, [r7, #14]
 8008e2e:	e092      	b.n	8008f56 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
            }

            /* Identify preceding technology which is enabled in the Polling loop */
            bTechIndex = bTechLoopIndex;
 8008e30:	7b7b      	ldrb	r3, [r7, #13]
 8008e32:	72fb      	strb	r3, [r7, #11]
            do
            {
                bTechIndex--;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]

                /* Read preceding technology */
                bPollTech = pDataParams->pPasTechPollSeq[bTechIndex];
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	4413      	add	r3, r2
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	733b      	strb	r3, [r7, #12]

                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8008e46:	7b3b      	ldrb	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <phacDiscLoop_Sw_Int_Apply_PTGT+0x98>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	789b      	ldrb	r3, [r3, #2]
 8008e50:	f003 0301 	and.w	r3, r3, #1
                if(((bPollTech == PHAC_DISCLOOP_TECH_TYPE_A) &&
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d134      	bne.n	8008ec2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_A) == PHAC_DISCLOOP_POS_BIT_MASK_A)) ||
 8008e58:	7b3b      	ldrb	r3, [r7, #12]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d105      	bne.n	8008e6a <phacDiscLoop_Sw_Int_Apply_PTGT+0xaa>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	789b      	ldrb	r3, [r3, #2]
 8008e62:	f003 0302 	and.w	r3, r3, #2
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_B) &&
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d12b      	bne.n	8008ec2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B) == PHAC_DISCLOOP_POS_BIT_MASK_B)) ||
 8008e6a:	7b3b      	ldrb	r3, [r7, #12]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d105      	bne.n	8008e7c <phacDiscLoop_Sw_Int_Apply_PTGT+0xbc>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	789b      	ldrb	r3, [r3, #2]
 8008e74:	f003 0304 	and.w	r3, r3, #4
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F212) &&
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d122      	bne.n	8008ec2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212) == PHAC_DISCLOOP_POS_BIT_MASK_F212)) ||
 8008e7c:	7b3b      	ldrb	r3, [r7, #12]
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d105      	bne.n	8008e8e <phacDiscLoop_Sw_Int_Apply_PTGT+0xce>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	789b      	ldrb	r3, [r3, #2]
 8008e86:	f003 0308 	and.w	r3, r3, #8
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_F424) &&
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d119      	bne.n	8008ec2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424) == PHAC_DISCLOOP_POS_BIT_MASK_F424)) ||
 8008e8e:	7b3b      	ldrb	r3, [r7, #12]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d105      	bne.n	8008ea0 <phacDiscLoop_Sw_Int_Apply_PTGT+0xe0>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	789b      	ldrb	r3, [r3, #2]
 8008e98:	f003 0310 	and.w	r3, r3, #16
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_V) &&
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d110      	bne.n	8008ec2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_V) == PHAC_DISCLOOP_POS_BIT_MASK_V)) ||
 8008ea0:	7b3b      	ldrb	r3, [r7, #12]
 8008ea2:	2b05      	cmp	r3, #5
 8008ea4:	d105      	bne.n	8008eb2 <phacDiscLoop_Sw_Int_Apply_PTGT+0xf2>
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
                        ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3) == PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	789b      	ldrb	r3, [r3, #2]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
                    ((bPollTech == PHAC_DISCLOOP_TECH_TYPE_18000P3M3) &&
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d107      	bne.n	8008ec2 <phacDiscLoop_Sw_Int_Apply_PTGT+0x102>
                    )
                {
                    break;
                }

                if(bTechIndex == 0U)
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <phacDiscLoop_Sw_Int_Apply_PTGT+0xfc>
                {
                    /* No Preceding Polling technology */
                    bPollTech = PHAC_DISCLOOP_TECH_TYPE_UNKNOWN;
 8008eb8:	2306      	movs	r3, #6
 8008eba:	733b      	strb	r3, [r7, #12]
                }
            }while(bTechIndex != 0U);
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1b8      	bne.n	8008e34 <phacDiscLoop_Sw_Int_Apply_PTGT+0x74>

            switch(bPollTech)
 8008ec2:	7b3b      	ldrb	r3, [r7, #12]
 8008ec4:	2b06      	cmp	r3, #6
 8008ec6:	d825      	bhi.n	8008f14 <phacDiscLoop_Sw_Int_Apply_PTGT+0x154>
 8008ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed0 <phacDiscLoop_Sw_Int_Apply_PTGT+0x110>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	08008ef5 	.word	0x08008ef5
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008efd 	.word	0x08008efd
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f15 	.word	0x08008f15
 8008ee8:	08008f0d 	.word	0x08008f0d
            {
            case PHAC_DISCLOOP_TECH_TYPE_A:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTA;
 8008eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008ef0:	813b      	strh	r3, [r7, #8]
                break;
 8008ef2:	e013      	b.n	8008f1c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_B:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTB;
 8008ef4:	f640 63d8 	movw	r3, #3800	@ 0xed8
 8008ef8:	813b      	strh	r3, [r7, #8]
                break;
 8008efa:	e00f      	b.n	8008f1c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_F212:
            case PHAC_DISCLOOP_TECH_TYPE_F424:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTF;
 8008efc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f00:	813b      	strh	r3, [r7, #8]
                break;
 8008f02:	e00b      	b.n	8008f1c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_V:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8008f04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f08:	813b      	strh	r3, [r7, #8]
                break;
 8008f0a:	e007      	b.n	8008f1c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            case PHAC_DISCLOOP_TECH_TYPE_UNKNOWN:
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGT;
 8008f0c:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8008f10:	813b      	strh	r3, [r7, #8]
                break;
 8008f12:	e003      	b.n	8008f1c <phacDiscLoop_Sw_Int_Apply_PTGT+0x15c>
            default: /* Preceding technology is Proprietary Technology !!! */
                wPTGT = PH_NXPNFCRDLIB_CONFIG_PRE_PTGTV;
 8008f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f18:	813b      	strh	r3, [r7, #8]
                break;
 8008f1a:	bf00      	nop
            }

            if(pDataParams->pPasTechPollSeq[bTechLoopIndex] == PHAC_DISCLOOP_TECH_TYPE_18000P3M3)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f20:	7b7b      	ldrb	r3, [r7, #13]
 8008f22:	4413      	add	r3, r2
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b05      	cmp	r3, #5
 8008f28:	d10d      	bne.n	8008f46 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
            {
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_GT18000P3M3_VALUE_US, wPTGT));
 8008f2a:	893b      	ldrh	r3, [r7, #8]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	2105      	movs	r1, #5
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7fe fff7 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 8008f36:	4603      	mov	r3, r0
 8008f38:	81fb      	strh	r3, [r7, #14]
 8008f3a:	89fb      	ldrh	r3, [r7, #14]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <phacDiscLoop_Sw_Int_Apply_PTGT+0x186>
 8008f40:	89fb      	ldrh	r3, [r7, #14]
 8008f42:	e008      	b.n	8008f56 <phacDiscLoop_Sw_Int_Apply_PTGT+0x196>
                continue;
 8008f44:	bf00      	nop
    for (bTechLoopIndex = 1U; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8008f46:	7b7b      	ldrb	r3, [r7, #13]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	737b      	strb	r3, [r7, #13]
 8008f4c:	7b7b      	ldrb	r3, [r7, #13]
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	f67f af41 	bls.w	8008dd6 <phacDiscLoop_Sw_Int_Apply_PTGT+0x16>
            }
        }
    }

    return status;
 8008f54:	89fb      	ldrh	r3, [r7, #14]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop

08008f60 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>:

static phStatus_t phacDiscLoop_Sw_Int_EmvcoRfFieldReset(
                                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                                        )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f005 f9d3 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 8008f72:	4603      	mov	r3, r0
 8008f74:	81fb      	strh	r3, [r7, #14]
 8008f76:	89fb      	ldrh	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x20>
 8008f7c:	89fb      	ldrh	r3, [r7, #14]
 8008f7e:	e01b      	b.n	8008fb8 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f005 f9e8 	bl	800e360 <phhalHw_Pn5180_Wait>
 8008f90:	4603      	mov	r3, r0
 8008f92:	81fb      	strh	r3, [r7, #14]
 8008f94:	89fb      	ldrh	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x3e>
 8008f9a:	89fb      	ldrh	r3, [r7, #14]
 8008f9c:	e00c      	b.n	8008fb8 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>
        pDataParams->pHalDataParams,
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_PROP_TECH_POLL_RF_OFF_DELAY_US)
        );

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f005 f962 	bl	800e26c <phhalHw_Pn5180_FieldOn>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	81fb      	strh	r3, [r7, #14]
 8008fac:	89fb      	ldrh	r3, [r7, #14]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x56>
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	e000      	b.n	8008fb8 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset+0x58>

    return PH_ERR_SUCCESS;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <phacDiscLoop_Sw_Int_ListenMode>:

phStatus_t phacDiscLoop_Sw_Int_ListenMode(
                                          phacDiscLoop_Sw_DataParams_t *pDataParams
                                          )
{
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TARGET
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 8008fc8:	237f      	movs	r3, #127	@ 0x7f
 8008fca:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bRetryCount = pDataParams->sTargetParams.bRetryCount;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8008fd2:	73fb      	strb	r3, [r7, #15]
    uint16_t   PH_MEMLOC_REM wTempMode = 0x00;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	81bb      	strh	r3, [r7, #12]

    /* get active listen cfg except F424 */
    wTempMode = pDataParams->bActLisTechCfg & 0x07U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	799b      	ldrb	r3, [r3, #6]
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	81bb      	strh	r3, [r7, #12]

    /* Map Active F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bActLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	799b      	ldrb	r3, [r3, #6]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <phacDiscLoop_Sw_Int_ListenMode+0x36>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 8008fee:	89bb      	ldrh	r3, [r7, #12]
 8008ff0:	f043 0304 	orr.w	r3, r3, #4
 8008ff4:	81bb      	strh	r3, [r7, #12]
    }

    wTempMode = (uint16_t) (wTempMode << 8U);
 8008ff6:	89bb      	ldrh	r3, [r7, #12]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	81bb      	strh	r3, [r7, #12]

    /* get passive listen cfg except F424 */
    wTempMode = wTempMode | (pDataParams->bPasLisTechCfg & /* */ 0x07);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	795b      	ldrb	r3, [r3, #5]
 8009000:	b21b      	sxth	r3, r3
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	b21a      	sxth	r2, r3
 8009008:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800900c:	4313      	orrs	r3, r2
 800900e:	b21b      	sxth	r3, r3
 8009010:	81bb      	strh	r3, [r7, #12]

    /* Map Passice F424 configuration with Type F bit in Autocoll */
    if(0U != (pDataParams->bPasLisTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F424))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	795b      	ldrb	r3, [r3, #5]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <phacDiscLoop_Sw_Int_ListenMode+0x66>
    {
        wTempMode = wTempMode | PHAC_DISCLOOP_POS_BIT_MASK_F212;
 800901e:	89bb      	ldrh	r3, [r7, #12]
 8009020:	f043 0304 	orr.w	r3, r3, #4
 8009024:	81bb      	strh	r3, [r7, #12]
    }

    /* AUTOCOLL retry loop */
    do
    {
        status = phhalHw_Autocoll(
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f503 7296 	add.w	r2, r3, #300	@ 0x12c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f503 7498 	add.w	r4, r3, #304	@ 0x130
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800903c:	89b9      	ldrh	r1, [r7, #12]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4623      	mov	r3, r4
 8009042:	f007 fa35 	bl	80104b0 <phhalHw_Pn5180_Autocoll>
 8009046:	4603      	mov	r3, r0
 8009048:	817b      	strh	r3, [r7, #10]
            pDataParams->pHalDataParams,
            wTempMode,
            &pDataParams->sTargetParams.pRxBuffer,
            &pDataParams->sTargetParams.wRxBufferLen,
            &pDataParams->sTargetParams.wProtParams);
    }while(((status & PH_ERR_MASK) != PH_ERR_SUCCESS) && (bRetryCount--));
 800904a:	897b      	ldrh	r3, [r7, #10]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <phacDiscLoop_Sw_Int_ListenMode+0x9c>
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	1e5a      	subs	r2, r3, #1
 8009056:	73fa      	strb	r2, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e4      	bne.n	8009026 <phacDiscLoop_Sw_Int_ListenMode+0x66>

    /* Return RF OFF error, if external RF is OFF */
    if((status & PH_ERR_MASK) == PH_ERR_EXT_RF_ERROR)
 800905c:	897b      	ldrh	r3, [r7, #10]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b10      	cmp	r3, #16
 8009062:	d102      	bne.n	800906a <phacDiscLoop_Sw_Int_ListenMode+0xaa>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFOFF, PH_COMP_AC_DISCLOOP);
 8009064:	f244 0383 	movw	r3, #16515	@ 0x4083
 8009068:	e006      	b.n	8009078 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }
    else
    {
        /* Return, if error */
        PH_CHECK_SUCCESS(status);
 800906a:	897b      	ldrh	r3, [r7, #10]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <phacDiscLoop_Sw_Int_ListenMode+0xb4>
 8009070:	897b      	ldrh	r3, [r7, #10]
 8009072:	e001      	b.n	8009078 <phacDiscLoop_Sw_Int_ListenMode+0xb8>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVATED_BY_PEER, PH_COMP_AC_DISCLOOP);
 8009074:	f244 038f 	movw	r3, #16527	@ 0x408f
#else /* NXPBUILD__PHAC_DISCLOOP_TARGET */
    PH_UNUSED_VARIABLE(pDataParams);
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TARGET */
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	bd90      	pop	{r4, r7, pc}

08009080 <phacDiscLoop_Sw_Int_ActivePollMode>:

phStatus_t phacDiscLoop_Sw_Int_ActivePollMode(
                                              phacDiscLoop_Sw_DataParams_t *pDataParams
                                              )
{
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	b08c      	sub	sp, #48	@ 0x30
 8009086:	af06      	add	r7, sp, #24
 8009088:	6078      	str	r0, [r7, #4]
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || \
         defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    phStatus_t PH_MEMLOC_REM   status;
#endif
#if defined(NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_ACTIVE)
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus = PH_OFF;
 800908a:	2300      	movs	r3, #0
 800908c:	827b      	strh	r3, [r7, #18]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEF212_P2P_ACTIVE) || defined (NXPBUILD__PHAC_DISCLOOP_TYPEF424_P2P_ACTIVE)
    uint8_t    PH_MEMLOC_BUF   aNfcId3[10];
#endif

    /* Reset detected technologies */
    pDataParams->bDetectedTechs = 0x00;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Loop through all the supported active technologies */
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8009096:	2300      	movs	r3, #0
 8009098:	757b      	strb	r3, [r7, #21]
 800909a:	e147      	b.n	800932c <phacDiscLoop_Sw_Int_ActivePollMode+0x2ac>
    {
        switch(pDataParams->bActPollTechCfg & (PH_ON << bIndex))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	78db      	ldrb	r3, [r3, #3]
 80090a0:	4619      	mov	r1, r3
 80090a2:	7d7b      	ldrb	r3, [r7, #21]
 80090a4:	2201      	movs	r2, #1
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	400b      	ands	r3, r1
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	f000 8097 	beq.w	80091e0 <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	f200 8132 	bhi.w	800931c <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d003      	beq.n	80090c4 <phacDiscLoop_Sw_Int_ActivePollMode+0x44>
 80090bc:	2b02      	cmp	r3, #2
 80090be:	f000 808f 	beq.w	80091e0 <phacDiscLoop_Sw_Int_ActivePollMode+0x160>
                }
#endif
                break;

            default:
                break;
 80090c2:	e12b      	b.n	800931c <phacDiscLoop_Sw_Int_ActivePollMode+0x29c>
                status = phhalHw_GetConfig(
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c8:	f107 0212 	add.w	r2, r7, #18
 80090cc:	215f      	movs	r1, #95	@ 0x5f
 80090ce:	4618      	mov	r0, r3
 80090d0:	f006 fe50 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80090d4:	4603      	mov	r3, r0
 80090d6:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 80090d8:	8afb      	ldrh	r3, [r7, #22]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <phacDiscLoop_Sw_Int_ActivePollMode+0x62>
 80090de:	8afb      	ldrh	r3, [r7, #22]
 80090e0:	e12a      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_ON)
 80090e2:	8a7b      	ldrh	r3, [r7, #18]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d10e      	bne.n	8009106 <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8b9b      	ldrh	r3, [r3, #28]
 80090f0:	461a      	mov	r2, r3
 80090f2:	2135      	movs	r1, #53	@ 0x35
 80090f4:	f005 f9f0 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80090f8:	4603      	mov	r3, r0
 80090fa:	82fb      	strh	r3, [r7, #22]
 80090fc:	8afb      	ldrh	r3, [r7, #22]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <phacDiscLoop_Sw_Int_ActivePollMode+0x86>
 8009102:	8afb      	ldrh	r3, [r7, #22]
 8009104:	e118      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phhalHw_ApplyProtocolSettings(
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	2107      	movs	r1, #7
 800910c:	4618      	mov	r0, r3
 800910e:	f004 fc65 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 8009112:	4603      	mov	r3, r0
 8009114:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 8009116:	8afb      	ldrh	r3, [r7, #22]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <phacDiscLoop_Sw_Int_ActivePollMode+0xa0>
 800911c:	8afb      	ldrh	r3, [r7, #22]
 800911e:	e10b      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fdef 	bl	8009d04 <phacDiscLoop_Sw_Int_FieldOn>
 8009126:	4603      	mov	r3, r0
 8009128:	82fb      	strh	r3, [r7, #22]
 800912a:	8afb      	ldrh	r3, [r7, #22]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <phacDiscLoop_Sw_Int_ActivePollMode+0xb4>
 8009130:	8afb      	ldrh	r3, [r7, #22]
 8009132:	e101      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if (wIntFieldStatus == PH_OFF)
 8009134:	8a7b      	ldrh	r3, [r7, #18]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10e      	bne.n	8009158 <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	8b9b      	ldrh	r3, [r3, #28]
 8009142:	461a      	mov	r2, r3
 8009144:	2135      	movs	r1, #53	@ 0x35
 8009146:	f005 f9c7 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800914a:	4603      	mov	r3, r0
 800914c:	82fb      	strh	r3, [r7, #22]
 800914e:	8afb      	ldrh	r3, [r7, #22]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <phacDiscLoop_Sw_Int_ActivePollMode+0xd8>
 8009154:	8afb      	ldrh	r3, [r7, #22]
 8009156:	e0ef      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                status = phpalI18092mPI_Atr(
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f103 0c60 	add.w	ip, r3, #96	@ 0x60
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 8009184:	687c      	ldr	r4, [r7, #4]
 8009186:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 8009188:	687d      	ldr	r5, [r7, #4]
 800918a:	3580      	adds	r5, #128	@ 0x80
 800918c:	9505      	str	r5, [sp, #20]
 800918e:	9404      	str	r4, [sp, #16]
 8009190:	9003      	str	r0, [sp, #12]
 8009192:	9102      	str	r1, [sp, #8]
 8009194:	9201      	str	r2, [sp, #4]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	4643      	mov	r3, r8
 800919a:	4672      	mov	r2, lr
 800919c:	4661      	mov	r1, ip
 800919e:	4630      	mov	r0, r6
 80091a0:	f00d fd0e 	bl	8016bc0 <phpalI18092mPI_Sw_Atr>
 80091a4:	4603      	mov	r3, r0
 80091a6:	82fb      	strh	r3, [r7, #22]
                if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80091a8:	8afb      	ldrh	r3, [r7, #22]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10f      	bne.n	80091d0 <phacDiscLoop_Sw_Int_ActivePollMode+0x150>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80091b6:	7d7b      	ldrb	r3, [r7, #21]
 80091b8:	2101      	movs	r1, #1
 80091ba:	fa01 f303 	lsl.w	r3, r1, r3
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	4313      	orrs	r3, r2
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 80091ca:	f244 038c 	movw	r3, #16524	@ 0x408c
 80091ce:	e0b3      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 80091d0:	8afb      	ldrh	r3, [r7, #22]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	f040 80a3 	bne.w	8009320 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a0>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80091da:	f244 0384 	movw	r3, #16516	@ 0x4084
 80091de:	e0ab      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e4:	4618      	mov	r0, r3
 80091e6:	f005 f897 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 80091ea:	4603      	mov	r3, r0
 80091ec:	82fb      	strh	r3, [r7, #22]
 80091ee:	8afb      	ldrh	r3, [r7, #22]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <phacDiscLoop_Sw_Int_ActivePollMode+0x178>
 80091f4:	8afb      	ldrh	r3, [r7, #22]
 80091f6:	e09f      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, pDataParams->wActPollGTimeUs));
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8b9b      	ldrh	r3, [r3, #28]
 8009200:	461a      	mov	r2, r3
 8009202:	2100      	movs	r1, #0
 8009204:	f005 f8ac 	bl	800e360 <phhalHw_Pn5180_Wait>
 8009208:	4603      	mov	r3, r0
 800920a:	82fb      	strh	r3, [r7, #22]
 800920c:	8afb      	ldrh	r3, [r7, #22]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <phacDiscLoop_Sw_Int_ActivePollMode+0x196>
 8009212:	8afb      	ldrh	r3, [r7, #22]
 8009214:	e090      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if((PH_ON << bIndex) == PHAC_DISCLOOP_ACT_POS_BIT_MASK_212)
 8009216:	7d7b      	ldrb	r3, [r7, #21]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d108      	bne.n	800922e <phacDiscLoop_Sw_Int_ActivePollMode+0x1ae>
                    status = phhalHw_ApplyProtocolSettings(
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	2108      	movs	r1, #8
 8009222:	4618      	mov	r0, r3
 8009224:	f004 fbda 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 8009228:	4603      	mov	r3, r0
 800922a:	82fb      	strh	r3, [r7, #22]
 800922c:	e007      	b.n	800923e <phacDiscLoop_Sw_Int_ActivePollMode+0x1be>
                    status = phhalHw_ApplyProtocolSettings(
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009232:	2109      	movs	r1, #9
 8009234:	4618      	mov	r0, r3
 8009236:	f004 fbd1 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800923a:	4603      	mov	r3, r0
 800923c:	82fb      	strh	r3, [r7, #22]
                PH_CHECK_SUCCESS(status);
 800923e:	8afb      	ldrh	r3, [r7, #22]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <phacDiscLoop_Sw_Int_ActivePollMode+0x1c8>
 8009244:	8afb      	ldrh	r3, [r7, #22]
 8009246:	e077      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fd5b 	bl	8009d04 <phacDiscLoop_Sw_Int_FieldOn>
 800924e:	4603      	mov	r3, r0
 8009250:	82fb      	strh	r3, [r7, #22]
 8009252:	8afb      	ldrh	r3, [r7, #22]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <phacDiscLoop_Sw_Int_ActivePollMode+0x1dc>
 8009258:	8afb      	ldrh	r3, [r7, #22]
 800925a:	e06d      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	8b9b      	ldrh	r3, [r3, #28]
 8009264:	461a      	mov	r2, r3
 8009266:	2135      	movs	r1, #53	@ 0x35
 8009268:	f005 f936 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800926c:	4603      	mov	r3, r0
 800926e:	82fb      	strh	r3, [r7, #22]
 8009270:	8afb      	ldrh	r3, [r7, #22]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <phacDiscLoop_Sw_Int_ActivePollMode+0x1fa>
 8009276:	8afb      	ldrh	r3, [r7, #22]
 8009278:	e05e      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[0].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 8009280:	f107 0308 	add.w	r3, r7, #8
 8009284:	2208      	movs	r2, #8
 8009286:	4618      	mov	r0, r3
 8009288:	f015 fecd 	bl	801f026 <memcpy>
                aNfcId3[8] = 0x00;
 800928c:	2300      	movs	r3, #0
 800928e:	743b      	strb	r3, [r7, #16]
                aNfcId3[9] = 0x00;
 8009290:	2300      	movs	r3, #0
 8009292:	747b      	strb	r3, [r7, #17]
                status = phpalI18092mPI_Atr(
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 80092bc:	687c      	ldr	r4, [r7, #4]
 80092be:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 80092c2:	687d      	ldr	r5, [r7, #4]
 80092c4:	35bc      	adds	r5, #188	@ 0xbc
 80092c6:	f107 0c08 	add.w	ip, r7, #8
 80092ca:	9505      	str	r5, [sp, #20]
 80092cc:	9404      	str	r4, [sp, #16]
 80092ce:	9003      	str	r0, [sp, #12]
 80092d0:	9102      	str	r1, [sp, #8]
 80092d2:	9201      	str	r2, [sp, #4]
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	4643      	mov	r3, r8
 80092d8:	4672      	mov	r2, lr
 80092da:	4661      	mov	r1, ip
 80092dc:	4630      	mov	r0, r6
 80092de:	f00d fc6f 	bl	8016bc0 <phpalI18092mPI_Sw_Atr>
 80092e2:	4603      	mov	r3, r0
 80092e4:	82fb      	strh	r3, [r7, #22]
                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 80092e6:	8afb      	ldrh	r3, [r7, #22]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10f      	bne.n	800930e <phacDiscLoop_Sw_Int_ActivePollMode+0x28e>
                    pDataParams->bDetectedTechs |= PH_ON << bIndex;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80092f4:	7d7b      	ldrb	r3, [r7, #21]
 80092f6:	2101      	movs	r1, #1
 80092f8:	fa01 f303 	lsl.w	r3, r1, r3
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	b2da      	uxtb	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_ACTIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 8009308:	f244 038c 	movw	r3, #16524	@ 0x408c
 800930c:	e014      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                if ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR)
 800930e:	8afb      	ldrh	r3, [r7, #22]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d106      	bne.n	8009324 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a4>
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009316:	f244 0384 	movw	r3, #16516	@ 0x4084
 800931a:	e00d      	b.n	8009338 <phacDiscLoop_Sw_Int_ActivePollMode+0x2b8>
                break;
 800931c:	bf00      	nop
 800931e:	e002      	b.n	8009326 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 8009320:	bf00      	nop
 8009322:	e000      	b.n	8009326 <phacDiscLoop_Sw_Int_ActivePollMode+0x2a6>
                break;
 8009324:	bf00      	nop
    for (bIndex = 0; bIndex < PHAC_DISCLOOP_ACT_POLL_MAX_TECHS_SUPPORTED; bIndex++)
 8009326:	7d7b      	ldrb	r3, [r7, #21]
 8009328:	3301      	adds	r3, #1
 800932a:	757b      	strb	r3, [r7, #21]
 800932c:	7d7b      	ldrb	r3, [r7, #21]
 800932e:	2b02      	cmp	r3, #2
 8009330:	f67f aeb4 	bls.w	800909c <phacDiscLoop_Sw_Int_ActivePollMode+0x1c>
        }
    }

    /* No Target present. */
    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009334:	f244 0384 	movw	r3, #16516	@ 0x4084
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009342 <phacDiscLoop_Sw_Int_PollMode>:

phStatus_t phacDiscLoop_Sw_Int_PollMode(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                       )
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_REM bResolveTech;
    uint8_t    PH_MEMLOC_REM bTechType;
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	72fb      	strb	r3, [r7, #11]

    status = PH_ERR_INVALID_PARAMETER;
 800934e:	2321      	movs	r3, #33	@ 0x21
 8009350:	81fb      	strh	r3, [r7, #14]

    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_DETECTION)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	891b      	ldrh	r3, [r3, #8]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d145      	bne.n	80093e6 <phacDiscLoop_Sw_Int_PollMode+0xa4>
    {
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009360:	2b02      	cmp	r3, #2
 8009362:	d004      	beq.n	800936e <phacDiscLoop_Sw_Int_PollMode+0x2c>
           (pDataParams->bOpeMode == RD_LIB_MODE_ISO))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) ||
 800936a:	2b03      	cmp	r3, #3
 800936c:	d110      	bne.n	8009390 <phacDiscLoop_Sw_Int_PollMode+0x4e>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_TechDetectActivity(
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7919      	ldrb	r1, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	789a      	ldrb	r2, [r3, #2]
 8009376:	f107 030b 	add.w	r3, r7, #11
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f976 	bl	800966c <phacDiscLoop_Sw_Int_TechDetectActivity>
 8009380:	4603      	mov	r3, r0
 8009382:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollBailOut,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 8009384:	89fb      	ldrh	r3, [r7, #14]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b12      	cmp	r3, #18
 800938a:	d116      	bne.n	80093ba <phacDiscLoop_Sw_Int_PollMode+0x78>
 800938c:	89fb      	ldrh	r3, [r7, #14]
 800938e:	e092      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }
        else if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009396:	2b01      	cmp	r3, #1
 8009398:	d10f      	bne.n	80093ba <phacDiscLoop_Sw_Int_PollMode+0x78>
        {
            /* Perform Technology detection Activity */
            status = phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	789b      	ldrb	r3, [r3, #2]
 800939e:	f107 020b 	add.w	r2, r7, #11
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa95 	bl	80098d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>
 80093aa:	4603      	mov	r3, r0
 80093ac:	81fb      	strh	r3, [r7, #14]
                pDataParams,
                pDataParams->bPasPollTechCfg,
                &bNumOfTechsFound);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 80093ae:	89fb      	ldrh	r3, [r7, #14]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b12      	cmp	r3, #18
 80093b4:	d101      	bne.n	80093ba <phacDiscLoop_Sw_Int_PollMode+0x78>
 80093b6:	89fb      	ldrh	r3, [r7, #14]
 80093b8:	e07d      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
        else
        {
            ;/* Do Nothing */
        }

        if ((0U != (pDataParams->bLpcdEnabled)) &&
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	7fdb      	ldrb	r3, [r3, #31]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <phacDiscLoop_Sw_Int_PollMode+0x96>
           (0U != (pDataParams->bPasPollTechCfg)) &&
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	789b      	ldrb	r3, [r3, #2]
        if ((0U != (pDataParams->bLpcdEnabled)) &&
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d006      	beq.n	80093d8 <phacDiscLoop_Sw_Int_PollMode+0x96>
           ((status & PH_ERR_MASK) == PHAC_DISCLOOP_NO_TECH_DETECTED))
 80093ca:	89fb      	ldrh	r3, [r7, #14]
 80093cc:	b2db      	uxtb	r3, r3
           (0U != (pDataParams->bPasPollTechCfg)) &&
 80093ce:	2b84      	cmp	r3, #132	@ 0x84
 80093d0:	d102      	bne.n	80093d8 <phacDiscLoop_Sw_Int_PollMode+0x96>
        {
            /* LPCD is success but card presence does not exist/errors */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_LPCD_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80093d2:	f244 0386 	movw	r3, #16518	@ 0x4086
 80093d6:	e06e      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b87      	cmp	r3, #135	@ 0x87
 80093de:	d102      	bne.n	80093e6 <phacDiscLoop_Sw_Int_PollMode+0xa4>
        {
            pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	811a      	strh	r2, [r3, #8]
        }
    }

    /* Go for collision resolution if single tech found */
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_COLLISION_RESOLUTION)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	891b      	ldrh	r3, [r3, #8]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d145      	bne.n	800947a <phacDiscLoop_Sw_Int_PollMode+0x138>
    {
        /* Get Technology to be resolved */
        bResolveTech = pDataParams->bDetectedTechs & pDataParams->bPasPollTechCfg;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	789b      	ldrb	r3, [r3, #2]
 80093f8:	4013      	ands	r3, r2
 80093fa:	737b      	strb	r3, [r7, #13]
        if(0U != (bResolveTech))
 80093fc:	7b7b      	ldrb	r3, [r7, #13]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <phacDiscLoop_Sw_Int_PollMode+0xd6>
        {
            if(0U != (bResolveTech & (uint8_t)(bResolveTech - 1U)))
 8009402:	7b7b      	ldrb	r3, [r7, #13]
 8009404:	3b01      	subs	r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	7b7b      	ldrb	r3, [r7, #13]
 800940a:	4013      	ands	r3, r2
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <phacDiscLoop_Sw_Int_PollMode+0xdc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009412:	f244 0321 	movw	r3, #16417	@ 0x4021
 8009416:	e04e      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
            }
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 8009418:	f244 0321 	movw	r3, #16417	@ 0x4021
 800941c:	e04b      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
        }

        PHAC_DISCLOOP_GET_BIT_POS(bResolveTech, bTechType);
 800941e:	2300      	movs	r3, #0
 8009420:	733b      	strb	r3, [r7, #12]
 8009422:	e005      	b.n	8009430 <phacDiscLoop_Sw_Int_PollMode+0xee>
 8009424:	7b7b      	ldrb	r3, [r7, #13]
 8009426:	085b      	lsrs	r3, r3, #1
 8009428:	737b      	strb	r3, [r7, #13]
 800942a:	7b3b      	ldrb	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	733b      	strb	r3, [r7, #12]
 8009430:	7b7b      	ldrb	r3, [r7, #13]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f6      	bne.n	8009424 <phacDiscLoop_Sw_Int_PollMode+0xe2>
 8009436:	7b3b      	ldrb	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <phacDiscLoop_Sw_Int_PollMode+0xfe>
 800943c:	237f      	movs	r3, #127	@ 0x7f
 800943e:	e03a      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>

        status = phacDiscLoop_Sw_Int_ColsnReslnActivity(pDataParams, (bTechType -  (uint8_t)1U));
 8009440:	7b3b      	ldrb	r3, [r7, #12]
 8009442:	3b01      	subs	r3, #1
 8009444:	b2db      	uxtb	r3, r3
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fbb7 	bl	8009bbc <phacDiscLoop_Sw_Int_ColsnReslnActivity>
 800944e:	4603      	mov	r3, r0
 8009450:	81fb      	strh	r3, [r7, #14]
        if((status & PH_ERR_MASK) == PHAC_DISCLOOP_DEVICE_RESOLVED)
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b89      	cmp	r3, #137	@ 0x89
 8009458:	d109      	bne.n	800946e <phacDiscLoop_Sw_Int_PollMode+0x12c>
        {
                /* Activation */
                status = phacDiscLoop_Sw_Int_ActivateDevice(pDataParams, (bTechType - (uint8_t)1U), (uint8_t)0x00U);
 800945a:	7b3b      	ldrb	r3, [r7, #12]
 800945c:	3b01      	subs	r3, #1
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2200      	movs	r2, #0
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fbe5 	bl	8009c34 <phacDiscLoop_Sw_Int_ActivateDevice>
 800946a:	4603      	mov	r3, r0
 800946c:	81fb      	strh	r3, [r7, #14]
        }
        /* Return if status is aborted. */
        PH_CHECK_ABORT(status);
 800946e:	89fb      	ldrh	r3, [r7, #14]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b12      	cmp	r3, #18
 8009474:	d101      	bne.n	800947a <phacDiscLoop_Sw_Int_PollMode+0x138>
 8009476:	89fb      	ldrh	r3, [r7, #14]
 8009478:	e01d      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
    }
    if(pDataParams->bPollState == PHAC_DISCLOOP_POLL_STATE_REMOVAL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	891b      	ldrh	r3, [r3, #8]
 800947e:	2b03      	cmp	r3, #3
 8009480:	d109      	bne.n	8009496 <phacDiscLoop_Sw_Int_PollMode+0x154>
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009488:	2b01      	cmp	r3, #1
 800948a:	d104      	bne.n	8009496 <phacDiscLoop_Sw_Int_PollMode+0x154>
        {
            status = phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(pDataParams);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f816 	bl	80094be <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>
 8009492:	4603      	mov	r3, r0
 8009494:	81fb      	strh	r3, [r7, #14]
        }
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8009496:	89fb      	ldrh	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <phacDiscLoop_Sw_Int_PollMode+0x172>
 800949c:	89fb      	ldrh	r3, [r7, #14]
 800949e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <phacDiscLoop_Sw_Int_PollMode+0x172>
 80094a6:	89fb      	ldrh	r3, [r7, #14]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	e000      	b.n	80094b6 <phacDiscLoop_Sw_Int_PollMode+0x174>
 80094b4:	89fb      	ldrh	r3, [r7, #14]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure>:

phStatus_t phacDiscLoop_Sw_Int_EmvcoRemovalProcedure(
                                                     phacDiscLoop_Sw_DataParams_t * pDataParams
                                                     )
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b086      	sub	sp, #24
 80094c2:	af02      	add	r7, sp, #8
 80094c4:	6078      	str	r0, [r7, #4]
#if (defined NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS) && (defined NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)

    phStatus_t PH_MEMLOC_REM   status;
    uint8_t    PH_MEMLOC_COUNT bPollingCount = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	737b      	strb	r3, [r7, #13]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOff(pDataParams->pHalDataParams));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ce:	4618      	mov	r0, r3
 80094d0:	f004 ff22 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 80094d4:	4603      	mov	r3, r0
 80094d6:	81fb      	strh	r3, [r7, #14]
 80094d8:	89fb      	ldrh	r3, [r7, #14]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x24>
 80094de:	89fb      	ldrh	r3, [r7, #14]
 80094e0:	e0bf      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80094ea:	2100      	movs	r1, #0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f004 ff37 	bl	800e360 <phhalHw_Pn5180_Wait>
 80094f2:	4603      	mov	r3, r0
 80094f4:	81fb      	strh	r3, [r7, #14]
 80094f6:	89fb      	ldrh	r3, [r7, #14]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x42>
 80094fc:	89fb      	ldrh	r3, [r7, #14]
 80094fe:	e0b0      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
        PHHAL_HW_TIME_MICROSECONDS,
        PH_NXPNFCRDLIB_CONFIG_EMVCO_FIELD_OFF_DELAY_US)
        );

    /* Set poll state to Detection */
    pDataParams->bPollState = PHAC_DISCLOOP_POLL_STATE_DETECTION;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	811a      	strh	r2, [r3, #8]

    if(PHAC_DISCLOOP_CHECK_ANDMASK(pDataParams->bDetectedTechs, PHAC_DISCLOOP_POS_BIT_MASK_A))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d054      	beq.n	80095be <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x100>
    {
        pDataParams->bDetectedTechs = 0x00;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	2101      	movs	r1, #1
 8009522:	4618      	mov	r0, r3
 8009524:	f004 fa5a 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 8009528:	4603      	mov	r3, r0
 800952a:	81fb      	strh	r3, [r7, #14]
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x78>
 8009532:	89fb      	ldrh	r3, [r7, #14]
 8009534:	e095      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443A)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fbba 	bl	8009cb0 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 800953c:	4603      	mov	r3, r0
 800953e:	81fb      	strh	r3, [r7, #14]
 8009540:	89fb      	ldrh	r3, [r7, #14]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d037      	beq.n	80095b6 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
 8009546:	89fb      	ldrh	r3, [r7, #14]
 8009548:	e08b      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8a1b      	ldrh	r3, [r3, #16]
 8009552:	461a      	mov	r2, r3
 8009554:	2135      	movs	r1, #53	@ 0x35
 8009556:	f004 ffbf 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800955a:	4603      	mov	r3, r0
 800955c:	81fb      	strh	r3, [r7, #14]
 800955e:	89fb      	ldrh	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xaa>
 8009564:	89fb      	ldrh	r3, [r7, #14]
 8009566:	e07c      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

            status = phpalI14443p3a_WakeUpA(
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	335e      	adds	r3, #94	@ 0x5e
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f00a fde1 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 8009578:	4603      	mov	r3, r0
 800957a:	81fb      	strh	r3, [r7, #14]
                pDataParams->pPal1443p3aDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800957c:	89fb      	ldrh	r3, [r7, #14]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d015      	beq.n	80095b0 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf2>
            {
                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 8009584:	89fb      	ldrh	r3, [r7, #14]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b12      	cmp	r3, #18
 800958a:	d101      	bne.n	8009590 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xd2>
 800958c:	89fb      	ldrh	r3, [r7, #14]
 800958e:	e068      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

                PH_CHECK_ABORT_FCT(status, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	4618      	mov	r0, r3
 8009596:	f00a fddf 	bl	8014158 <phpalI14443p3a_Sw_HaltA>
 800959a:	4603      	mov	r3, r0
 800959c:	81fb      	strh	r3, [r7, #14]
 800959e:	89fb      	ldrh	r3, [r7, #14]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b12      	cmp	r3, #18
 80095a4:	d101      	bne.n	80095aa <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xec>
 80095a6:	89fb      	ldrh	r3, [r7, #14]
 80095a8:	e05b      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                bPollingCount = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	737b      	strb	r3, [r7, #13]
 80095ae:	e002      	b.n	80095b6 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0xf8>
            }
            else
            {
                bPollingCount++;
 80095b0:	7b7b      	ldrb	r3, [r7, #13]
 80095b2:	3301      	adds	r3, #1
 80095b4:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 80095b6:	7b7b      	ldrb	r3, [r7, #13]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d9c6      	bls.n	800954a <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x8c>
 80095bc:	e04a      	b.n	8009654 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x196>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }
    else
    {
        pDataParams->bDetectedTechs = 0x00;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ca:	2102      	movs	r1, #2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f004 fa05 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 80095d2:	4603      	mov	r3, r0
 80095d4:	81fb      	strh	r3, [r7, #14]
 80095d6:	89fb      	ldrh	r3, [r7, #14]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x122>
 80095dc:	89fb      	ldrh	r3, [r7, #14]
 80095de:	e040      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_ISO14443B)
            );

        /* Perform Field ON after Apply protocol settings. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fb65 	bl	8009cb0 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 80095e6:	4603      	mov	r3, r0
 80095e8:	81fb      	strh	r3, [r7, #14]
 80095ea:	89fb      	ldrh	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d02e      	beq.n	800964e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 80095f0:	89fb      	ldrh	r3, [r7, #14]
 80095f2:	e036      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>

        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
        {
            /* Apply Guard time. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8a5b      	ldrh	r3, [r3, #18]
 80095fc:	461a      	mov	r2, r3
 80095fe:	2135      	movs	r1, #53	@ 0x35
 8009600:	f004 ff6a 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009604:	4603      	mov	r3, r0
 8009606:	81fb      	strh	r3, [r7, #14]
 8009608:	89fb      	ldrh	r3, [r7, #14]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x154>
 800960e:	89fb      	ldrh	r3, [r7, #14]
 8009610:	e027      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
                pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

            status = phpalI14443p3b_WakeUpB(
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	33cd      	adds	r3, #205	@ 0xcd
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	32da      	adds	r2, #218	@ 0xda
 800961e:	9201      	str	r2, [sp, #4]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	f00b fc19 	bl	8014e5e <phpalI14443p3b_Sw_WakeUpB>
 800962c:	4603      	mov	r3, r0
 800962e:	81fb      	strh	r3, [r7, #14]
                0,
                0,
                0,
                pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8009630:	89fb      	ldrh	r3, [r7, #14]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d007      	beq.n	8009648 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x18a>
            {
                bPollingCount = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	737b      	strb	r3, [r7, #13]

                /* Return if status is aborted. */
                PH_CHECK_ABORT(status);
 800963c:	89fb      	ldrh	r3, [r7, #14]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b12      	cmp	r3, #18
 8009642:	d104      	bne.n	800964e <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x190>
 8009644:	89fb      	ldrh	r3, [r7, #14]
 8009646:	e00c      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
            }
            else
            {
                bPollingCount++;
 8009648:	7b7b      	ldrb	r3, [r7, #13]
 800964a:	3301      	adds	r3, #1
 800964c:	737b      	strb	r3, [r7, #13]
        while(bPollingCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_REMOVAL_RETRY_COUNT)
 800964e:	7b7b      	ldrb	r3, [r7, #13]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d9cf      	bls.n	80095f4 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x136>
            }
        }/* while(bPollingCount < Max_Retry_Count) */
    }/* else */
    if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 8009654:	89fb      	ldrh	r3, [r7, #14]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b01      	cmp	r3, #1
 800965a:	d001      	beq.n	8009660 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a2>
    {
        return status;
 800965c:	89fb      	ldrh	r3, [r7, #14]
 800965e:	e000      	b.n	8009662 <phacDiscLoop_Sw_Int_EmvcoRemovalProcedure+0x1a4>
    }
    return PH_ERR_SUCCESS;
 8009660:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <phacDiscLoop_Sw_Int_TechDetectActivity>:
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bPasPollBailOut,
                                                  uint8_t bDetectConfig,
                                                  uint8_t* pNumOfTechsDetect
                                                  )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	607b      	str	r3, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	72fb      	strb	r3, [r7, #11]
 800967a:	4613      	mov	r3, r2
 800967c:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM   status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 800967e:	2384      	movs	r3, #132	@ 0x84
 8009680:	82fb      	strh	r3, [r7, #22]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex;
    uint8_t    PH_MEMLOC_COUNT bTechIndex;
    uint8_t    PH_MEMLOC_REM   bNumOfTechsFound = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bTechTypeF_Detected = PH_OFF;
 8009686:	2300      	movs	r3, #0
 8009688:	74fb      	strb	r3, [r7, #19]
    uint16_t   PH_MEMLOC_REM   wIntFieldStatus;

    pDataParams->bDetectedTechs = 0x00;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    pDataParams->bNumOfCards = 0x00;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Apply Proprietary Technology Guard Time(PTGT) if Proprietary Technology Poll enabled */
    status = phacDiscLoop_Sw_Int_Apply_PTGT(pDataParams);
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff fb90 	bl	8008dc0 <phacDiscLoop_Sw_Int_Apply_PTGT>
 80096a0:	4603      	mov	r3, r0
 80096a2:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS(status);
 80096a4:	8afb      	ldrh	r3, [r7, #22]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <phacDiscLoop_Sw_Int_TechDetectActivity+0x42>
 80096aa:	8afb      	ldrh	r3, [r7, #22]
 80096ac:	e109      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

    /* Poll for requested NFC-Tech Type presence. */
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80096ae:	2300      	movs	r3, #0
 80096b0:	757b      	strb	r3, [r7, #21]
 80096b2:	e0e6      	b.n	8009882 <phacDiscLoop_Sw_Int_TechDetectActivity+0x216>
    {
        /* In NFC mode, poll proprietary technologies only if NFC technologies are not detected */
        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (0U != bNumOfTechsFound)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d106      	bne.n	80096cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
 80096be:	7d3b      	ldrb	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x60>
           && (bTechLoopIndex == PHAC_DISCLOOP_POLL_MAX_NFC_TECHS_SUPPORTED))
 80096c4:	7d7b      	ldrb	r3, [r7, #21]
 80096c6:	2b05      	cmp	r3, #5
 80096c8:	f000 80e0 	beq.w	800988c <phacDiscLoop_Sw_Int_TechDetectActivity+0x220>
        {
            break;
        }

        bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096d0:	7d7b      	ldrb	r3, [r7, #21]
 80096d2:	4413      	add	r3, r2
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	74bb      	strb	r3, [r7, #18]

        if (((bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F212) || (bTechIndex == PHAC_DISCLOOP_TECH_TYPE_F424))
 80096d8:	7cbb      	ldrb	r3, [r7, #18]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d002      	beq.n	80096e4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x78>
 80096de:	7cbb      	ldrb	r3, [r7, #18]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d103      	bne.n	80096ec <phacDiscLoop_Sw_Int_TechDetectActivity+0x80>
            && (bTechTypeF_Detected == PH_ON))
 80096e4:	7cfb      	ldrb	r3, [r7, #19]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	f000 80c7 	beq.w	800987a <phacDiscLoop_Sw_Int_TechDetectActivity+0x20e>
        {
            continue;
        }

        if (0U != (bDetectConfig & (PH_ON << bTechIndex)))
 80096ec:	7aba      	ldrb	r2, [r7, #10]
 80096ee:	7cbb      	ldrb	r3, [r7, #18]
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 80bf 	beq.w	800987c <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
        {
            /* Get Config to check the internal Field On. */
            status = phhalHw_GetConfig(
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009702:	f107 0210 	add.w	r2, r7, #16
 8009706:	215f      	movs	r1, #95	@ 0x5f
 8009708:	4618      	mov	r0, r3
 800970a:	f006 fb33 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 800970e:	4603      	mov	r3, r0
 8009710:	82fb      	strh	r3, [r7, #22]
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_INT_RF_ON,
                &wIntFieldStatus);
            PH_CHECK_SUCCESS(status);
 8009712:	8afb      	ldrh	r3, [r7, #22]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <phacDiscLoop_Sw_Int_TechDetectActivity+0xb0>
 8009718:	8afb      	ldrh	r3, [r7, #22]
 800971a:	e0d2      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_ON)
 800971c:	8a3b      	ldrh	r3, [r7, #16]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d123      	bne.n	800976a <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
            {
                if (((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F212 == bTechIndex) ||
 8009722:	7cbb      	ldrb	r3, [r7, #18]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d002      	beq.n	800972e <phacDiscLoop_Sw_Int_TechDetectActivity+0xc2>
 8009728:	7cbb      	ldrb	r3, [r7, #18]
 800972a:	2b03      	cmp	r3, #3
 800972c:	d10b      	bne.n	8009746 <phacDiscLoop_Sw_Int_TechDetectActivity+0xda>
                    ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 800972e:	7cbb      	ldrb	r3, [r7, #18]
 8009730:	4619      	mov	r1, r3
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f002 f8f0 	bl	800b918 <phacDiscLoop_Sw_Int_Config_GTF>
 8009738:	4603      	mov	r3, r0
 800973a:	82fb      	strh	r3, [r7, #22]
 800973c:	8afb      	ldrh	r3, [r7, #22]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d013      	beq.n	800976a <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 8009742:	8afb      	ldrh	r3, [r7, #22]
 8009744:	e0bd      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800974a:	7cba      	ldrb	r2, [r7, #18]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3208      	adds	r2, #8
 8009750:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009754:	461a      	mov	r2, r3
 8009756:	2135      	movs	r1, #53	@ 0x35
 8009758:	f004 febe 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800975c:	4603      	mov	r3, r0
 800975e:	82fb      	strh	r3, [r7, #22]
 8009760:	8afb      	ldrh	r3, [r7, #22]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <phacDiscLoop_Sw_Int_TechDetectActivity+0xfe>
 8009766:	8afb      	ldrh	r3, [r7, #22]
 8009768:	e0ab      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Apply Protocol Setting for Selected Tech  */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(pDataParams->pHalDataParams,
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800976e:	7cbb      	ldrb	r3, [r7, #18]
 8009770:	4956      	ldr	r1, [pc, #344]	@ (80098cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x260>)
 8009772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f004 f92e 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 8009780:	4603      	mov	r3, r0
 8009782:	82fb      	strh	r3, [r7, #22]
 8009784:	8afb      	ldrh	r3, [r7, #22]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <phacDiscLoop_Sw_Int_TechDetectActivity+0x122>
 800978a:	8afb      	ldrh	r3, [r7, #22]
 800978c:	e099      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

            /* Perform I-RFCA and Switch on RF Field after Apply protocol settings, if in NFC and ISO mode. */
            PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_FieldOn(pDataParams));
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fab8 	bl	8009d04 <phacDiscLoop_Sw_Int_FieldOn>
 8009794:	4603      	mov	r3, r0
 8009796:	82fb      	strh	r3, [r7, #22]
 8009798:	8afb      	ldrh	r3, [r7, #22]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x136>
 800979e:	8afb      	ldrh	r3, [r7, #22]
 80097a0:	e08f      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>

            if (wIntFieldStatus == PH_OFF)
 80097a2:	8a3b      	ldrh	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d123      	bne.n	80097f0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
            {
                if (((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F212 ==  bTechIndex) ||
 80097a8:	7cbb      	ldrb	r3, [r7, #18]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d002      	beq.n	80097b4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x148>
 80097ae:	7cbb      	ldrb	r3, [r7, #18]
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d10b      	bne.n	80097cc <phacDiscLoop_Sw_Int_TechDetectActivity+0x160>
                    ((uint8_t) PHAC_DISCLOOP_TECH_TYPE_F424 ==  bTechIndex))
                {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_Config_GTF(pDataParams, bTechIndex));
 80097b4:	7cbb      	ldrb	r3, [r7, #18]
 80097b6:	4619      	mov	r1, r3
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f002 f8ad 	bl	800b918 <phacDiscLoop_Sw_Int_Config_GTF>
 80097be:	4603      	mov	r3, r0
 80097c0:	82fb      	strh	r3, [r7, #22]
 80097c2:	8afb      	ldrh	r3, [r7, #22]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d013      	beq.n	80097f0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 80097c8:	8afb      	ldrh	r3, [r7, #22]
 80097ca:	e07a      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
                }
                else
                {
                    /* Apply Guard time. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80097d0:	7cba      	ldrb	r2, [r7, #18]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3208      	adds	r2, #8
 80097d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80097da:	461a      	mov	r2, r3
 80097dc:	2135      	movs	r1, #53	@ 0x35
 80097de:	f004 fe7b 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80097e2:	4603      	mov	r3, r0
 80097e4:	82fb      	strh	r3, [r7, #22]
 80097e6:	8afb      	ldrh	r3, [r7, #22]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x184>
 80097ec:	8afb      	ldrh	r3, [r7, #22]
 80097ee:	e068      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
                        pDataParams->waPasPollGTimeUs[bTechIndex]));
                }
            }

            /* Perform Tech detection. */
            status = pfDetTechs[bTechIndex](pDataParams);
 80097f0:	7cbb      	ldrb	r3, [r7, #18]
 80097f2:	4a37      	ldr	r2, [pc, #220]	@ (80098d0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x264>)
 80097f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	4798      	blx	r3
 80097fc:	4603      	mov	r3, r0
 80097fe:	82fb      	strh	r3, [r7, #22]

            if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8009800:	8afb      	ldrh	r3, [r7, #22]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b87      	cmp	r3, #135	@ 0x87
 8009806:	d123      	bne.n	8009850 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1e4>
            {
                /*Set the corresponding detected bit. */
                pDataParams->bDetectedTechs |= PH_ON << bTechIndex;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800980e:	7cbb      	ldrb	r3, [r7, #18]
 8009810:	2101      	movs	r1, #1
 8009812:	fa01 f303 	lsl.w	r3, r1, r3
 8009816:	b2db      	uxtb	r3, r3
 8009818:	4313      	orrs	r3, r2
 800981a:	b2da      	uxtb	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                bNumOfTechsFound++;
 8009822:	7d3b      	ldrb	r3, [r7, #20]
 8009824:	3301      	adds	r3, #1
 8009826:	753b      	strb	r3, [r7, #20]
                /* Since Device detected at 212 Baud, Skip polling at 424 */
                if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d106      	bne.n	8009844 <phacDiscLoop_Sw_Int_TechDetectActivity+0x1d8>
                        || (0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_F424))))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800983c:	f003 0308 	and.w	r3, r3, #8
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                {
                    *pNumOfTechsDetect = bNumOfTechsFound;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7d3a      	ldrb	r2, [r7, #20]
 8009848:	701a      	strb	r2, [r3, #0]
                    bTechTypeF_Detected = PH_ON;
 800984a:	2301      	movs	r3, #1
 800984c:	74fb      	strb	r3, [r7, #19]
 800984e:	e005      	b.n	800985c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
                }
            }
            else
            {
                PH_CHECK_ABORT(status);
 8009850:	8afb      	ldrh	r3, [r7, #22]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b12      	cmp	r3, #18
 8009856:	d101      	bne.n	800985c <phacDiscLoop_Sw_Int_TechDetectActivity+0x1f0>
 8009858:	8afb      	ldrh	r3, [r7, #22]
 800985a:	e032      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
            }

            if((0U != (bPasPollBailOut & (PH_ON << bTechIndex))) && (0U != bNumOfTechsFound))
 800985c:	7afa      	ldrb	r2, [r7, #11]
 800985e:	7cbb      	ldrb	r3, [r7, #18]
 8009860:	fa22 f303 	lsr.w	r3, r2, r3
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
 800986c:	7d3b      	ldrb	r3, [r7, #20]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <phacDiscLoop_Sw_Int_TechDetectActivity+0x210>
            {
                /* Bailout set, Returning to application */
                *pNumOfTechsDetect = bNumOfTechsFound;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7d3a      	ldrb	r2, [r7, #20]
 8009876:	701a      	strb	r2, [r3, #0]
                break;
 8009878:	e009      	b.n	800988e <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            continue;
 800987a:	bf00      	nop
    for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 800987c:	7d7b      	ldrb	r3, [r7, #21]
 800987e:	3301      	adds	r3, #1
 8009880:	757b      	strb	r3, [r7, #21]
 8009882:	7d7b      	ldrb	r3, [r7, #21]
 8009884:	2b05      	cmp	r3, #5
 8009886:	f67f af15 	bls.w	80096b4 <phacDiscLoop_Sw_Int_TechDetectActivity+0x48>
 800988a:	e000      	b.n	800988e <phacDiscLoop_Sw_Int_TechDetectActivity+0x222>
            break;
 800988c:	bf00      	nop
            }
        }
    }

    if (bNumOfTechsFound == 1U)
 800988e:	7d3b      	ldrb	r3, [r7, #20]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d105      	bne.n	80098a0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x234>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7d3a      	ldrb	r2, [r7, #20]
 8009898:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800989a:	f244 0387 	movw	r3, #16519	@ 0x4087
 800989e:	e010      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(bNumOfTechsFound > 1U)
 80098a0:	7d3b      	ldrb	r3, [r7, #20]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d905      	bls.n	80098b2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x246>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7d3a      	ldrb	r2, [r7, #20]
 80098aa:	701a      	strb	r2, [r3, #0]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80098ac:	f244 0388 	movw	r3, #16520	@ 0x4088
 80098b0:	e007      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 80098b2:	8afb      	ldrh	r3, [r7, #22]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d102      	bne.n	80098c0 <phacDiscLoop_Sw_Int_TechDetectActivity+0x254>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 80098ba:	f244 0384 	movw	r3, #16516	@ 0x4084
 80098be:	e000      	b.n	80098c2 <phacDiscLoop_Sw_Int_TechDetectActivity+0x256>
    }
    else
    {
        return status; /* Other Failure */
 80098c0:	8afb      	ldrh	r3, [r7, #22]
    }
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	08021edc 	.word	0x08021edc
 80098d0:	08021f0c 	.word	0x08021f0c

080098d4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity>:
phStatus_t phacDiscLoop_Sw_Int_EmvcoTechDetectActivity(
                                                       phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                       uint8_t bDetectConfig,
                                                       uint8_t* pNumOfTechsDetect
                                                       )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	460b      	mov	r3, r1
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	72fb      	strb	r3, [r7, #11]
    phStatus_t PH_MEMLOC_REM status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 80098e2:	2384      	movs	r3, #132	@ 0x84
 80098e4:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM bNumOfTechsFound = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	777b      	strb	r3, [r7, #29]
    uint8_t    PH_MEMLOC_REM bCurrentPollTech = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	757b      	strb	r3, [r7, #21]
    uint8_t    PH_MEMLOC_COUNT bTechLoopIndex = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	773b      	strb	r3, [r7, #28]
    uint8_t    PH_MEMLOC_COUNT bTechIndex = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	753b      	strb	r3, [r7, #20]
    uint8_t    PH_MEMLOC_COUNT bSkipRfReset = PH_OFF;
 80098f6:	2300      	movs	r3, #0
 80098f8:	76fb      	strb	r3, [r7, #27]
    uint8_t    PH_MEMLOC_REM bPropPollTechEn = PH_OFF;
 80098fa:	2300      	movs	r3, #0
 80098fc:	76bb      	strb	r3, [r7, #26]
    uint8_t    PH_MEMLOC_REM bStopTechDetection = PH_OFF;
 80098fe:	2300      	movs	r3, #0
 8009900:	767b      	strb	r3, [r7, #25]
    uint16_t   PH_MEMLOC_REM wIntFieldStatus;
    uint16_t   PH_MEMLOC_REM wPasBGTimeUs;

    /* EMVCo Polling procedure section 9.2, Symbol 1 */
    pDataParams->bDetectedTechs = 0x00;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Verify Type A and Type B polling sequence.
     * Note: As per the EMVCo specification,
     * 1st polling technology should be Type A and 2nd polling technology should be Type B.
     * */
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d105      	bne.n	8009920 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x4c>
        (pDataParams->pPasTechPollSeq[1] != PHAC_DISCLOOP_TECH_TYPE_B))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009918:	3301      	adds	r3, #1
 800991a:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->pPasTechPollSeq[0] != PHAC_DISCLOOP_TECH_TYPE_A) ||
 800991c:	2b01      	cmp	r3, #1
 800991e:	d002      	beq.n	8009926 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x52>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_AC_DISCLOOP);
 8009920:	f244 0325 	movw	r3, #16421	@ 0x4025
 8009924:	e142      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }

    /* Get Config to check the internal Field On. */
    status = phhalHw_GetConfig(
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992a:	f107 0212 	add.w	r2, r7, #18
 800992e:	215f      	movs	r1, #95	@ 0x5f
 8009930:	4618      	mov	r0, r3
 8009932:	f006 fa1f 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8009936:	4603      	mov	r3, r0
 8009938:	83fb      	strh	r3, [r7, #30]
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_INT_RF_ON,
        &wIntFieldStatus);
    PH_CHECK_SUCCESS(status);
 800993a:	8bfb      	ldrh	r3, [r7, #30]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x70>
 8009940:	8bfb      	ldrh	r3, [r7, #30]
 8009942:	e133      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

    if (wIntFieldStatus == PH_OFF)
 8009944:	8a7b      	ldrh	r3, [r7, #18]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 8104 	bne.w	8009b54 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
    {
        /* Apply Protocol Setting */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009950:	2201      	movs	r2, #1
 8009952:	b2d2      	uxtb	r2, r2
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f004 f840 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800995c:	4603      	mov	r3, r0
 800995e:	83fb      	strh	r3, [r7, #30]
 8009960:	8bfb      	ldrh	r3, [r7, #30]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x96>
 8009966:	8bfb      	ldrh	r3, [r7, #30]
 8009968:	e120      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
            pDataParams->pHalDataParams,
            (uint8_t)(gPasTechTypeMapTable[0] & 0xFFU)));

        /* Disable RFCA and switch on RF, if in EMV mode. */
        PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_RfcaOff_FieldOn(pDataParams));
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f9a0 	bl	8009cb0 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>
 8009970:	4603      	mov	r3, r0
 8009972:	83fb      	strh	r3, [r7, #30]
 8009974:	8bfb      	ldrh	r3, [r7, #30]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xaa>
 800997a:	8bfb      	ldrh	r3, [r7, #30]
 800997c:	e116      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        /* Get Config to check the internal Field On. */
        status = phhalHw_GetConfig(
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009982:	f107 0212 	add.w	r2, r7, #18
 8009986:	215f      	movs	r1, #95	@ 0x5f
 8009988:	4618      	mov	r0, r3
 800998a:	f006 f9f3 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 800998e:	4603      	mov	r3, r0
 8009990:	83fb      	strh	r3, [r7, #30]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_INT_RF_ON,
            &wIntFieldStatus);
        PH_CHECK_SUCCESS(status);
 8009992:	8bfb      	ldrh	r3, [r7, #30]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xc8>
 8009998:	8bfb      	ldrh	r3, [r7, #30]
 800999a:	e107      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>

        if (wIntFieldStatus != PH_ON)
 800999c:	8a7b      	ldrh	r3, [r7, #18]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	f000 80d8 	beq.w	8009b54 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_AC_DISCLOOP);
 80099a4:	f244 030a 	movw	r3, #16394	@ 0x400a
 80099a8:	e100      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
    }
    /* EMVCo: Run until a tag is discovered */
    while(0U == bStopTechDetection )
    {
        /* Poll for all requested technologies  */
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 80099aa:	2300      	movs	r3, #0
 80099ac:	773b      	strb	r3, [r7, #28]
 80099ae:	e0bf      	b.n	8009b30 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x25c>
        {
            bTechIndex = pDataParams->pPasTechPollSeq[bTechLoopIndex];
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80099b4:	7f3b      	ldrb	r3, [r7, #28]
 80099b6:	4413      	add	r3, r2
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	753b      	strb	r3, [r7, #20]
            bCurrentPollTech = (PH_ON << bTechIndex);
 80099bc:	7d3b      	ldrb	r3, [r7, #20]
 80099be:	2201      	movs	r2, #1
 80099c0:	fa02 f303 	lsl.w	r3, r2, r3
 80099c4:	757b      	strb	r3, [r7, #21]

            /* Symbol 2 (8 and 13) */
            if ((0U != (bDetectConfig & bCurrentPollTech)) && (bStopTechDetection == 0U))
 80099c6:	7afa      	ldrb	r2, [r7, #11]
 80099c8:	7d7b      	ldrb	r3, [r7, #21]
 80099ca:	4013      	ands	r3, r2
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80ab 	beq.w	8009b2a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
 80099d4:	7e7b      	ldrb	r3, [r7, #25]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f040 80a7 	bne.w	8009b2a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
            {
                if((0U == ((pDataParams->bDetectedTechs & bCurrentPollTech))))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80099e2:	7d7b      	ldrb	r3, [r7, #21]
 80099e4:	4013      	ands	r3, r2
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 809c 	bne.w	8009b26 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x252>
                {

                    if (bCurrentPollTech & (uint8_t)(~(PHAC_DISCLOOP_POS_BIT_MASK_A | PHAC_DISCLOOP_POS_BIT_MASK_B)))
 80099ee:	7d7b      	ldrb	r3, [r7, #21]
 80099f0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x128>

                    {
                        bPropPollTechEn = PH_ON;
 80099f8:	2301      	movs	r3, #1
 80099fa:	76bb      	strb	r3, [r7, #26]
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8009a02:	7d7b      	ldrb	r3, [r7, #21]
 8009a04:	4013      	ands	r3, r2
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
 8009a0c:	7ebb      	ldrb	r3, [r7, #26]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d102      	bne.n	8009a18 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x144>
                    {
                        /* Symbol 14 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff faa4 	bl	8008f60 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                    }

                    if(bCurrentPollTech == PHAC_DISCLOOP_POS_BIT_MASK_B)
 8009a18:	7d7b      	ldrb	r3, [r7, #21]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d12c      	bne.n	8009a78 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1a4>
                    {
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d011      	beq.n	8009a50 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                                (pDataParams->waPasPollGTimeUs[bTechIndex] > PHAC_DISCLOOP_HALTA_TIMOUT_US))
 8009a2c:	7d3a      	ldrb	r2, [r7, #20]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3208      	adds	r2, #8
 8009a32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                        if((0U != ((pDataParams->bDetectedTechs & PHAC_DISCLOOP_POS_BIT_MASK_A))) &&
 8009a36:	f240 424c 	movw	r2, #1100	@ 0x44c
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d908      	bls.n	8009a50 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x17c>
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex] - PHAC_DISCLOOP_HALTA_TIMOUT_US;
 8009a3e:	7d3a      	ldrb	r2, [r7, #20]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3208      	adds	r2, #8
 8009a44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009a48:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8009a4c:	82fb      	strh	r3, [r7, #22]
 8009a4e:	e005      	b.n	8009a5c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x188>
                        }
                        else
                        {
                            wPasBGTimeUs = pDataParams->waPasPollGTimeUs[bTechIndex];
 8009a50:	7d3a      	ldrb	r2, [r7, #20]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3208      	adds	r2, #8
 8009a56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009a5a:	82fb      	strh	r3, [r7, #22]
                        }
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a60:	8afa      	ldrh	r2, [r7, #22]
 8009a62:	2135      	movs	r1, #53	@ 0x35
 8009a64:	4618      	mov	r0, r3
 8009a66:	f004 fd37 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	83fb      	strh	r3, [r7, #30]
 8009a6e:	8bfb      	ldrh	r3, [r7, #30]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d013      	beq.n	8009a9c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8009a74:	8bfb      	ldrh	r3, [r7, #30]
 8009a76:	e099      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            wPasBGTimeUs));
                    }
                    else
                    {
                        /* Apply Guard time. Symbol 3 (9 and 15) */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009a7c:	7d3a      	ldrb	r2, [r7, #20]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3208      	adds	r2, #8
 8009a82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009a86:	461a      	mov	r2, r3
 8009a88:	2135      	movs	r1, #53	@ 0x35
 8009a8a:	f004 fd25 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	83fb      	strh	r3, [r7, #30]
 8009a92:	8bfb      	ldrh	r3, [r7, #30]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1c8>
 8009a98:	8bfb      	ldrh	r3, [r7, #30]
 8009a9a:	e087      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                            pDataParams->waPasPollGTimeUs[bTechIndex]));
                    }

                    /* Apply Protocol Setting for Selected Technology  */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009aa0:	7d3b      	ldrb	r3, [r7, #20]
 8009aa2:	4944      	ldr	r1, [pc, #272]	@ (8009bb4 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e0>)
 8009aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f003 ff95 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	83fb      	strh	r3, [r7, #30]
 8009ab6:	8bfb      	ldrh	r3, [r7, #30]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x1ec>
 8009abc:	8bfb      	ldrh	r3, [r7, #30]
 8009abe:	e075      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                        pDataParams->pHalDataParams,
                        (uint8_t)(gPasTechTypeMapTable[bTechIndex] & 0xFFU)));

                    /* Perform Tech detection. Symbol 4 (10 and 16) */
                    status = pfDetTechs[bTechIndex](pDataParams);
 8009ac0:	7d3b      	ldrb	r3, [r7, #20]
 8009ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8009bb8 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2e4>)
 8009ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	4798      	blx	r3
 8009acc:	4603      	mov	r3, r0
 8009ace:	83fb      	strh	r3, [r7, #30]

                    if ((status & PH_ERR_MASK) == PHAC_DISCLOOP_TECH_DETECTED)
 8009ad0:	8bfb      	ldrh	r3, [r7, #30]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b87      	cmp	r3, #135	@ 0x87
 8009ad6:	d10c      	bne.n	8009af2 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x21e>
                    {
                        /* Set the corresponding detected bit. Symbol 6 (12 and 18) */
                        pDataParams->bDetectedTechs |= bCurrentPollTech;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8009ade:	7d7b      	ldrb	r3, [r7, #21]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                        bNumOfTechsFound++;
 8009aea:	7f7b      	ldrb	r3, [r7, #29]
 8009aec:	3301      	adds	r3, #1
 8009aee:	777b      	strb	r3, [r7, #29]
 8009af0:	e005      	b.n	8009afe <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
                    }
                    else
                    {
                        PH_CHECK_ABORT(status);
 8009af2:	8bfb      	ldrh	r3, [r7, #30]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b12      	cmp	r3, #18
 8009af8:	d101      	bne.n	8009afe <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x22a>
 8009afa:	8bfb      	ldrh	r3, [r7, #30]
 8009afc:	e056      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
                    }

                    /* Optional Field Reset in case of Proprietary technologies polling. */
                    if ((pDataParams->bEMVCoPropOpRfFieldReset & bCurrentPollTech) && (bPropPollTechEn == PH_ON))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f893 2059 	ldrb.w	r2, [r3, #89]	@ 0x59
 8009b04:	7d7b      	ldrb	r3, [r7, #21]
 8009b06:	4013      	ands	r3, r2
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d008      	beq.n	8009b20 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
 8009b0e:	7ebb      	ldrb	r3, [r7, #26]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d105      	bne.n	8009b20 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x24c>
                    {
                        /* Symbol 19 */
                        phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fa23 	bl	8008f60 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
                        bSkipRfReset = PH_ON;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	76fb      	strb	r3, [r7, #27]
 8009b1e:	e004      	b.n	8009b2a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                    else
                    {
                        bSkipRfReset = PH_OFF;
 8009b20:	2300      	movs	r3, #0
 8009b22:	76fb      	strb	r3, [r7, #27]
 8009b24:	e001      	b.n	8009b2a <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x256>
                    }
                }
                else
                {
                    bStopTechDetection = PH_ON;
 8009b26:	2301      	movs	r3, #1
 8009b28:	767b      	strb	r3, [r7, #25]
        for (bTechLoopIndex = 0; bTechLoopIndex < PHAC_DISCLOOP_PASS_POLL_MAX_TECHS_SUPPORTED; bTechLoopIndex++)
 8009b2a:	7f3b      	ldrb	r3, [r7, #28]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	773b      	strb	r3, [r7, #28]
 8009b30:	7f3b      	ldrb	r3, [r7, #28]
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	f67f af3c 	bls.w	80099b0 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xdc>
                }
            }
        }

        if(bNumOfTechsFound == 0U)
 8009b38:	7f7b      	ldrb	r3, [r7, #29]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x26e>
        {
            bStopTechDetection = PH_ON;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	767b      	strb	r3, [r7, #25]
        }

        if((bPropPollTechEn == PH_ON) && (bSkipRfReset == PH_OFF))
 8009b42:	7ebb      	ldrb	r3, [r7, #26]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d105      	bne.n	8009b54 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
 8009b48:	7efb      	ldrb	r3, [r7, #27]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x280>
        {
            /* Symbol 20 */
            phacDiscLoop_Sw_Int_EmvcoRfFieldReset(pDataParams);
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff fa06 	bl	8008f60 <phacDiscLoop_Sw_Int_EmvcoRfFieldReset>
    while(0U == bStopTechDetection )
 8009b54:	7e7b      	ldrb	r3, [r7, #25]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f43f af27 	beq.w	80099aa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0xd6>
        }
    } /* End of while(!bStopTechDetection ) */

    if (bNumOfTechsFound == 1U)
 8009b5c:	7f7b      	ldrb	r3, [r7, #29]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d105      	bne.n	8009b6e <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x29a>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7f7a      	ldrb	r2, [r7, #29]
 8009b66:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_TECH_DETECTED;
 8009b68:	2387      	movs	r3, #135	@ 0x87
 8009b6a:	83fb      	strh	r3, [r7, #30]
 8009b6c:	e00e      	b.n	8009b8c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(bNumOfTechsFound > 1U)
 8009b6e:	7f7b      	ldrb	r3, [r7, #29]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d905      	bls.n	8009b80 <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2ac>
    {
        *pNumOfTechsDetect = bNumOfTechsFound;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7f7a      	ldrb	r2, [r7, #29]
 8009b78:	701a      	strb	r2, [r3, #0]
        status = PHAC_DISCLOOP_MULTI_TECH_DETECTED;
 8009b7a:	2388      	movs	r3, #136	@ 0x88
 8009b7c:	83fb      	strh	r3, [r7, #30]
 8009b7e:	e005      	b.n	8009b8c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    }
    else if(PH_ERR_IO_TIMEOUT == (status & PH_ERR_MASK))
 8009b80:	8bfb      	ldrh	r3, [r7, #30]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2b8>
    {
        status = PHAC_DISCLOOP_NO_TECH_DETECTED;
 8009b88:	2384      	movs	r3, #132	@ 0x84
 8009b8a:	83fb      	strh	r3, [r7, #30]
    }
    else
    {
        ; /* Do Nothing */
    }
    return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8009b8c:	8bfb      	ldrh	r3, [r7, #30]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 8009b92:	8bfb      	ldrh	r3, [r7, #30]
 8009b94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d6>
 8009b9c:	8bfb      	ldrh	r3, [r7, #30]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	e000      	b.n	8009bac <phacDiscLoop_Sw_Int_EmvcoTechDetectActivity+0x2d8>
 8009baa:	8bfb      	ldrh	r3, [r7, #30]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3720      	adds	r7, #32
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	08021edc 	.word	0x08021edc
 8009bb8:	08021f0c 	.word	0x08021f0c

08009bbc <phacDiscLoop_Sw_Int_ColsnReslnActivity>:

phStatus_t phacDiscLoop_Sw_Int_ColsnReslnActivity(
                                                  phacDiscLoop_Sw_DataParams_t *pDataParams,
                                                  uint8_t bTechType
                                                  )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /*Re-set number of card*/
    pDataParams->bNumOfCards = 0x00;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Call the selected collision resolution function */
    wStatus = pfColnRelsns[bTechType](pDataParams);
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	4a15      	ldr	r2, [pc, #84]	@ (8009c30 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x74>)
 8009bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
 8009be4:	4603      	mov	r3, r0
 8009be6:	81fb      	strh	r3, [r7, #14]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009be8:	89fb      	ldrh	r3, [r7, #14]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d112      	bne.n	8009c16 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x5a>
    {
        /* Collision Resolution activity is successful, update Detected Technology */
        pDataParams->bDetectedTechs = (PH_ON << bTechType);
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        if(pDataParams->bNumOfCards > 1U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d902      	bls.n	8009c10 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x54>
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MULTI_DEVICES_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009c0a:	f244 038a 	movw	r3, #16522	@ 0x408a
 8009c0e:	e00a      	b.n	8009c26 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009c10:	f244 0389 	movw	r3, #16521	@ 0x4089
 8009c14:	e007      	b.n	8009c26 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
        }
    }

    if((wStatus & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 8009c16:	89fb      	ldrh	r3, [r7, #14]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d102      	bne.n	8009c24 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x68>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009c1e:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009c22:	e000      	b.n	8009c26 <phacDiscLoop_Sw_Int_ColsnReslnActivity+0x6a>
    }

    return wStatus;
 8009c24:	89fb      	ldrh	r3, [r7, #14]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	08021ef4 	.word	0x08021ef4

08009c34 <phacDiscLoop_Sw_Int_ActivateDevice>:
phStatus_t phacDiscLoop_Sw_Int_ActivateDevice(
                                              phacDiscLoop_Sw_DataParams_t * pDataParams,
                                              uint8_t bTechType,
                                              uint8_t bTagIndex
                                              )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
 8009c40:	4613      	mov	r3, r2
 8009c42:	70bb      	strb	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM status;

    /* Since we are interested in one Technology, Reset DetectedTechs information */
    pDataParams->bDetectedTechs = 0x00;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Activate selected tag */
    status = pfDeviceActivate[bTechType](pDataParams, bTagIndex);
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	4a17      	ldr	r2, [pc, #92]	@ (8009cac <phacDiscLoop_Sw_Int_ActivateDevice+0x78>)
 8009c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c54:	78ba      	ldrb	r2, [r7, #2]
 8009c56:	4611      	mov	r1, r2
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009c60:	89fb      	ldrh	r3, [r7, #14]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10a      	bne.n	8009c7e <phacDiscLoop_Sw_Int_ActivateDevice+0x4a>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_DEVICE_ACTIVATED, PH_COMP_AC_DISCLOOP);
 8009c78:	f244 038b 	movw	r3, #16523	@ 0x408b
 8009c7c:	e012      	b.n	8009ca4 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
    }
    else if(((status & PH_ERR_MASK) == PHAC_DISCLOOP_MERGED_SEL_RES_FOUND)
 8009c7e:	89fb      	ldrh	r3, [r7, #14]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b8e      	cmp	r3, #142	@ 0x8e
 8009c84:	d003      	beq.n	8009c8e <phacDiscLoop_Sw_Int_ActivateDevice+0x5a>
       || ((status & PH_ERR_MASK) == PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED))
 8009c86:	89fb      	ldrh	r3, [r7, #14]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b8d      	cmp	r3, #141	@ 0x8d
 8009c8c:	d109      	bne.n	8009ca2 <phacDiscLoop_Sw_Int_ActivateDevice+0x6e>
    {
        /* Set Corresponding Tech Bit Position */
        pDataParams->bDetectedTechs = PH_ON << bTechType;
 8009c8e:	78fb      	ldrb	r3, [r7, #3]
 8009c90:	2201      	movs	r2, #1
 8009c92:	fa02 f303 	lsl.w	r3, r2, r3
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    else
    {
        return status;
    }
    return status;
 8009c9e:	89fb      	ldrh	r3, [r7, #14]
 8009ca0:	e000      	b.n	8009ca4 <phacDiscLoop_Sw_Int_ActivateDevice+0x70>
        return status;
 8009ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	08021f24 	.word	0x08021f24

08009cb0 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_RfcaOff_FieldOn(
                                               phacDiscLoop_Sw_DataParams_t * pDataParams
                                               )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	81fb      	strh	r3, [r7, #14]

    /* Disable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_OFF);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2156      	movs	r1, #86	@ 0x56
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f004 fc07 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	81fb      	strh	r3, [r7, #14]
    if (((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 8009cce:	89fb      	ldrh	r3, [r7, #14]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b23      	cmp	r3, #35	@ 0x23
 8009cd4:	d005      	beq.n	8009ce2 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
 8009cd6:	89fb      	ldrh	r3, [r7, #14]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x32>
    {
        return status;
 8009cde:	89fb      	ldrh	r3, [r7, #14]
 8009ce0:	e00c      	b.n	8009cfc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>
    }

    /* Switch on RF without performing I-RFCA. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_FieldOn(pDataParams->pHalDataParams));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f004 fac0 	bl	800e26c <phhalHw_Pn5180_FieldOn>
 8009cec:	4603      	mov	r3, r0
 8009cee:	81fb      	strh	r3, [r7, #14]
 8009cf0:	89fb      	ldrh	r3, [r7, #14]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4a>
 8009cf6:	89fb      	ldrh	r3, [r7, #14]
 8009cf8:	e000      	b.n	8009cfc <phacDiscLoop_Sw_Int_RfcaOff_FieldOn+0x4c>

    return status;
 8009cfa:	89fb      	ldrh	r3, [r7, #14]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <phacDiscLoop_Sw_Int_FieldOn>:

phStatus_t phacDiscLoop_Sw_Int_FieldOn(
                                       phacDiscLoop_Sw_DataParams_t * pDataParams
                                       )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	81fb      	strh	r3, [r7, #14]

    /* Enable RFCA (if supported) */
    status = phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RFCA, PH_ON);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d14:	2201      	movs	r2, #1
 8009d16:	2156      	movs	r1, #86	@ 0x56
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f004 fbdd 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	81fb      	strh	r3, [r7, #14]
    if(((status & PH_ERR_MASK) != PH_ERR_UNSUPPORTED_PARAMETER) && ((status & PH_ERR_MASK) != PH_ERR_SUCCESS))
 8009d22:	89fb      	ldrh	r3, [r7, #14]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b23      	cmp	r3, #35	@ 0x23
 8009d28:	d005      	beq.n	8009d36 <phacDiscLoop_Sw_Int_FieldOn+0x32>
 8009d2a:	89fb      	ldrh	r3, [r7, #14]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <phacDiscLoop_Sw_Int_FieldOn+0x32>
    {
        return status;
 8009d32:	89fb      	ldrh	r3, [r7, #14]
 8009d34:	e01d      	b.n	8009d72 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }

    /* Perform I-RFCA and Switch on RF Field. */
    status = phhalHw_FieldOn(pDataParams->pHalDataParams);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f004 fa96 	bl	800e26c <phhalHw_Pn5180_FieldOn>
 8009d40:	4603      	mov	r3, r0
 8009d42:	81fb      	strh	r3, [r7, #14]
    if((status & PH_ERR_MASK) == PH_ERR_RF_ERROR)
 8009d44:	89fb      	ldrh	r3, [r7, #14]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b0a      	cmp	r3, #10
 8009d4a:	d102      	bne.n	8009d52 <phacDiscLoop_Sw_Int_FieldOn+0x4e>
    {
        /* External RF is ON */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_EXTERNAL_RFON, PH_COMP_AC_DISCLOOP);
 8009d4c:	f244 0382 	movw	r3, #16514	@ 0x4082
 8009d50:	e00f      	b.n	8009d72 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
    }
    else
    {
        return PH_ADD_COMPCODE(status, PH_COMP_AC_DISCLOOP);
 8009d52:	89fb      	ldrh	r3, [r7, #14]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 8009d58:	89fb      	ldrh	r3, [r7, #14]
 8009d5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <phacDiscLoop_Sw_Int_FieldOn+0x6c>
 8009d62:	89fb      	ldrh	r3, [r7, #14]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	e000      	b.n	8009d72 <phacDiscLoop_Sw_Int_FieldOn+0x6e>
 8009d70:	89fb      	ldrh	r3, [r7, #14]
    }
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <phacDiscLoop_Sw_Int_IsValidPollStatus>:

uint8_t phacDiscLoop_Sw_Int_IsValidPollStatus(
                                              phStatus_t wStatus
                                              )
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	4603      	mov	r3, r0
 8009d82:	80fb      	strh	r3, [r7, #6]
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 8009d84:	88fb      	ldrh	r3, [r7, #6]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00f      	beq.n	8009dac <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 8009d8c:	88fb      	ldrh	r3, [r7, #6]
 8009d8e:	b2db      	uxtb	r3, r3
    if((((wStatus) & PH_ERR_MASK) == PH_ERR_SUCCESS)         ||
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d00b      	beq.n	8009dac <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR) ||
 8009d98:	2b05      	cmp	r3, #5
 8009d9a:	d007      	beq.n	8009dac <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_FRAMING_ERROR)   ||
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d003      	beq.n	8009dac <phacDiscLoop_Sw_Int_IsValidPollStatus+0x32>
       (((wStatus) & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR)
 8009da4:	88fb      	ldrh	r3, [r7, #6]
 8009da6:	b2db      	uxtb	r3, r3
       (((wStatus) & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) ||
 8009da8:	2b06      	cmp	r3, #6
 8009daa:	d101      	bne.n	8009db0 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x36>
       )
    {
        return PH_ON;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e000      	b.n	8009db2 <phacDiscLoop_Sw_Int_IsValidPollStatus+0x38>
    }
    else
    {
        return PH_OFF;
 8009db0:	2300      	movs	r3, #0
    }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <phacDiscLoop_Sw_DetTechTypeA>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeA(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    uint8_t    PH_MEMLOC_COUNT bIndex;
    phStatus_t PH_MEMLOC_REM   wStatus;

    /* Reset total tags found */
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Reset Collision Bit for Type A*/
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	7f9b      	ldrb	r3, [r3, #30]
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	779a      	strb	r2, [r3, #30]
    /* Reset the Sleep flag for Type 3 activation status */
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]
 8009de0:	e014      	b.n	8009e0c <phacDiscLoop_Sw_DetTechTypeA+0x4e>
    {
        /* Device is not in HLTA state */
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 0U;
 8009de2:	7bfa      	ldrb	r2, [r7, #15]
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	440b      	add	r3, r1
 8009dee:	336c      	adds	r3, #108	@ 0x6c
 8009df0:	2200      	movs	r2, #0
 8009df2:	701a      	strb	r2, [r3, #0]
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bUidSize = 0U;
 8009df4:	7bfa      	ldrb	r2, [r7, #15]
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	440b      	add	r3, r1
 8009e00:	336a      	adds	r3, #106	@ 0x6a
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0e7      	beq.n	8009de2 <phacDiscLoop_Sw_DetTechTypeA+0x24>
    }

    /* sending the WakeUpA */
    wStatus = phpalI14443p3a_WakeUpA(
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	335e      	adds	r3, #94	@ 0x5e
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f00a f98c 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 8009e22:	4603      	mov	r3, r0
 8009e24:	81bb      	strh	r3, [r7, #12]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 8009e26:	89bb      	ldrh	r3, [r7, #12]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7ff ffa6 	bl	8009d7a <phacDiscLoop_Sw_Int_IsValidPollStatus>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02d      	beq.n	8009e90 <phacDiscLoop_Sw_DetTechTypeA+0xd2>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009e34:	89bb      	ldrh	r3, [r7, #12]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d106      	bne.n	8009e4a <phacDiscLoop_Sw_DetTechTypeA+0x8c>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	7f9b      	ldrb	r3, [r3, #30]
 8009e40:	f043 0301 	orr.w	r3, r3, #1
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	779a      	strb	r2, [r3, #30]
        }

        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXWAIT_US, 500));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009e52:	2107      	movs	r1, #7
 8009e54:	4618      	mov	r0, r3
 8009e56:	f004 fb3f 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	81bb      	strh	r3, [r7, #12]
 8009e5e:	89bb      	ldrh	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <phacDiscLoop_Sw_DetTechTypeA+0xaa>
 8009e64:	89bb      	ldrh	r3, [r7, #12]
 8009e66:	e014      	b.n	8009e92 <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        /* Halt the detected cards. */
        PH_CHECK_ABORT_FCT(wStatus, phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f00a f973 	bl	8014158 <phpalI14443p3a_Sw_HaltA>
 8009e72:	4603      	mov	r3, r0
 8009e74:	81bb      	strh	r3, [r7, #12]
 8009e76:	89bb      	ldrh	r3, [r7, #12]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b12      	cmp	r3, #18
 8009e7c:	d101      	bne.n	8009e82 <phacDiscLoop_Sw_DetTechTypeA+0xc4>
 8009e7e:	89bb      	ldrh	r3, [r7, #12]
 8009e80:	e007      	b.n	8009e92 <phacDiscLoop_Sw_DetTechTypeA+0xd4>

        pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 8009e8a:	f244 0387 	movw	r3, #16519	@ 0x4087
 8009e8e:	e000      	b.n	8009e92 <phacDiscLoop_Sw_DetTechTypeA+0xd4>
        return wStatus;
 8009e90:	89bb      	ldrh	r3, [r7, #12]
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <phacDiscLoop_Sw_Int_CollisionResolutionA>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionA(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 8009e9c:	b590      	push	{r4, r7, lr}
 8009e9e:	b08b      	sub	sp, #44	@ 0x2c
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	6078      	str	r0, [r7, #4]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_REM   bTypeANvbUid;
    uint8_t    PH_MEMLOC_COUNT bDeviceCount;
    uint8_t    PH_MEMLOC_COUNT bTypeATagIdx;
    uint8_t    PH_MEMLOC_COUNT bCascadeCodeIdx;
    uint8_t    PH_MEMLOC_BUF   aTypeAUid[7] = {0};
 8009ea8:	f107 030c 	add.w	r3, r7, #12
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t    PH_MEMLOC_REM   bCollDetected;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
    uint16_t   *pUIDLen;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */

    bRetryCount = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	76bb      	strb	r3, [r7, #26]
    bDeviceCount = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	777b      	strb	r3, [r7, #29]
    bTypeATagIdx = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	773b      	strb	r3, [r7, #28]
    bCollDetected = PH_OFF;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	767b      	strb	r3, [r7, #25]

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U)))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	7f9b      	ldrb	r3, [r3, #30]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7a9b      	ldrb	r3, [r3, #10]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a>
    {
        pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 8009ee0:	f244 0385 	movw	r3, #16517	@ 0x4085
 8009ee4:	e2d9      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    /*Symbol 0*/
    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	8a1b      	ldrh	r3, [r3, #16]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2135      	movs	r1, #53	@ 0x35
 8009ef2:	f004 faf1 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	83fb      	strh	r3, [r7, #30]
 8009efa:	8bfb      	ldrh	r3, [r7, #30]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x68>
 8009f00:	8bfb      	ldrh	r3, [r7, #30]
 8009f02:	e2ca      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_A]));

    /* Configure HW for the TypeA technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f08:	2101      	movs	r1, #1
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f003 fd66 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 8009f10:	4603      	mov	r3, r0
 8009f12:	83fb      	strh	r3, [r7, #30]
 8009f14:	8bfb      	ldrh	r3, [r7, #30]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x82>
 8009f1a:	8bfb      	ldrh	r3, [r7, #30]
 8009f1c:	e2bd      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443A));

    /* Send WakeUpA */
    status = phpalI14443p3a_WakeUpA(
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	335e      	adds	r3, #94	@ 0x5e
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f00a f906 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	83fb      	strh	r3, [r7, #30]
        pDataParams->pPal1443p3aDataParams,
        pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009f32:	8bfb      	ldrh	r3, [r7, #30]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d109      	bne.n	8009f4e <phacDiscLoop_Sw_Int_CollisionResolutionA+0xb2>
    {
        /* In case of EMVCo, return Collision Pending status. */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d102      	bne.n	8009f4a <phacDiscLoop_Sw_Int_CollisionResolutionA+0xae>
        {
            /* Report Error to Application and Application will perform PICC Reset */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8009f44:	f244 0381 	movw	r3, #16513	@ 0x4081
 8009f48:	e2a7      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        bCollDetected = PH_ON;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	767b      	strb	r3, [r7, #25]
    }

    /* Reset card detected count */
    pDataParams->sTypeATargetInfo.bT1TFlag = 0;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    /*Symbol 1*/
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009f5e:	8bfb      	ldrh	r3, [r7, #30]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d14a      	bne.n	8009ffc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x160>
    {
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS
        /*Symbol 2*/
        /* Check for T1T Tag*/
        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa[0] == 0x00U)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f040 809e 	bne.w	800a0ae <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
        {
            /* Enable Jewel Mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_JEWEL_MODE, PH_ON));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	2201      	movs	r2, #1
 8009f78:	2120      	movs	r1, #32
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f004 faac 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8009f80:	4603      	mov	r3, r0
 8009f82:	83fb      	strh	r3, [r7, #30]
 8009f84:	8bfb      	ldrh	r3, [r7, #30]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <phacDiscLoop_Sw_Int_CollisionResolutionA+0xf2>
 8009f8a:	8bfb      	ldrh	r3, [r7, #30]
 8009f8c:	e285      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

            pUIDLen = (uint16_t *)&(pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].bUidSize);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	336a      	adds	r3, #106	@ 0x6a
 8009f92:	617b      	str	r3, [r7, #20]
            /*Symbol 23*/
            status = phalT1T_ReadUID(
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3360      	adds	r3, #96	@ 0x60
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f003 f896 	bl	800d0d0 <phalT1T_Sw_ReadUID>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	83fb      	strh	r3, [r7, #30]
                pDataParams->pAlT1TDataParams,
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aUid,
                pUIDLen);

            if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8009fa8:	8bfb      	ldrh	r3, [r7, #30]
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d115      	bne.n	8009fdc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x140>
            {
                /*Symbol 27*/
                /* indicates T1T card*/
                pDataParams->sTypeATargetInfo.bT1TFlag = 1;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
                pDataParams->sTypeATargetInfo.bTotalTagsFound = 1;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
                pDataParams->bNumOfCards = 1;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                /* Symbol 26 */
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7f9b      	ldrb	r3, [r3, #30]
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	779a      	strb	r2, [r3, #30]

                return PH_ADD_COMPCODE(PH_COMP_AC_DISCLOOP, PH_ERR_SUCCESS);
 8009fd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009fda:	e25e      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
            else
            {
                /*Symbol 24*/
                if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 8009fdc:	8bfb      	ldrh	r3, [r7, #30]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d109      	bne.n	8009ff8 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x15c>
                {
                    /* Symbol 25 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7f9b      	ldrb	r3, [r3, #30]
 8009fe8:	f043 0301 	orr.w	r3, r3, #1
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	779a      	strb	r2, [r3, #30]
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 8009ff2:	f244 0381 	movw	r3, #16513	@ 0x4081
 8009ff6:	e250      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                }
                return status;
 8009ff8:	8bfb      	ldrh	r3, [r7, #30]
 8009ffa:	e24e      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_JEWEL_TAGS */
    }
    else
    {
        /* Device count = 0 and any Error */
        if(((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8009ffc:	8bfb      	ldrh	r3, [r7, #30]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d010      	beq.n	800a026 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
          && (pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A] == 0x00U))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7a9b      	ldrb	r3, [r3, #10]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10c      	bne.n	800a026 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x18a>
        {
            pDataParams->sTypeATargetInfo.bTotalTagsFound = 0;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7f9b      	ldrb	r3, [r3, #30]
 800a018:	f043 0301 	orr.w	r3, r3, #1
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	779a      	strb	r2, [r3, #30]
            return status;
 800a022:	8bfb      	ldrh	r3, [r7, #30]
 800a024:	e239      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }

        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d131      	bne.n	800a094 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1f8>
        {
            bRetryCount = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	76bb      	strb	r3, [r7, #26]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a034:	e01b      	b.n	800a06e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1d2>
            {
                bRetryCount++;
 800a036:	7ebb      	ldrb	r3, [r7, #26]
 800a038:	3301      	adds	r3, #1
 800a03a:	76bb      	strb	r3, [r7, #26]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a040:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a044:	2100      	movs	r1, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f004 f98a 	bl	800e360 <phhalHw_Pn5180_Wait>
 800a04c:	4603      	mov	r3, r0
 800a04e:	83fb      	strh	r3, [r7, #30]
 800a050:	8bfb      	ldrh	r3, [r7, #30]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1be>
 800a056:	8bfb      	ldrh	r3, [r7, #30]
 800a058:	e21f      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3a_WakeUpA(
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	335e      	adds	r3, #94	@ 0x5e
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f00a f868 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 800a06a:	4603      	mov	r3, r0
 800a06c:	83fb      	strh	r3, [r7, #30]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a06e:	8bfb      	ldrh	r3, [r7, #30]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b01      	cmp	r3, #1
 800a074:	d102      	bne.n	800a07c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x1e0>
 800a076:	7ebb      	ldrb	r3, [r7, #26]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d9dc      	bls.n	800a036 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x19a>
                    pDataParams->pPal1443p3aDataParams,
                    pDataParams->sTypeATargetInfo.aTypeA_I3P3[0].aAtqa);
            }

            /* Collision error may happen */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	7f9b      	ldrb	r3, [r3, #30]
 800a080:	f023 0301 	bic.w	r3, r3, #1
 800a084:	b2da      	uxtb	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	779a      	strb	r2, [r3, #30]

            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800a08a:	8bfb      	ldrh	r3, [r7, #30]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00e      	beq.n	800a0ae <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
 800a090:	8bfb      	ldrh	r3, [r7, #30]
 800a092:	e202      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
        }
        else
        {
            /*Symbol 1*/
            if ((status & PH_ERR_MASK) != PH_ERR_COLLISION_ERROR)
 800a094:	8bfb      	ldrh	r3, [r7, #30]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d008      	beq.n	800a0ae <phacDiscLoop_Sw_Int_CollisionResolutionA+0x212>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7f9b      	ldrb	r3, [r3, #30]
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	779a      	strb	r2, [r3, #30]
                return status;
 800a0aa:	8bfb      	ldrh	r3, [r7, #30]
 800a0ac:	e1f5      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
            }
        }
    }

    /*Symbol 2*/
    if(0U == (pDataParams->bUseAntiColl))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 81d9 	bne.w	800a46c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5d0>
    {
        /*Symbol 23*/
        pDataParams->bCollPend |= (uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7f9b      	ldrb	r3, [r3, #30]
 800a0be:	f043 0301 	orr.w	r3, r3, #1
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	779a      	strb	r2, [r3, #30]
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a0c8:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a0cc:	e1e5      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
    {
        if (bTypeATagIdx <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7a9b      	ldrb	r3, [r3, #10]
 800a0d2:	7f3a      	ldrb	r2, [r7, #28]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	f200 81c6 	bhi.w	800a466 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
        {
            /*Symbol 4*/
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7f9b      	ldrb	r3, [r3, #30]
 800a0de:	f023 0301 	bic.w	r3, r3, #1
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	779a      	strb	r2, [r3, #30]

            /*Symbol 4, 16*/
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	76fb      	strb	r3, [r7, #27]
 800a0ec:	e13f      	b.n	800a36e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4d2>
            {
                bTypeANvbUid = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	74fb      	strb	r3, [r7, #19]

                /* Anti-collision loop */
                while (bTypeANvbUid != 0x40U)
 800a0f2:	e0a8      	b.n	800a246 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                {
                    /*Symbol 5,6,7*/
                    status = phpalI14443p3a_Anticollision(
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a0f8:	7efb      	ldrb	r3, [r7, #27]
 800a0fa:	4a9a      	ldr	r2, [pc, #616]	@ (800a364 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a0fc:	5cd1      	ldrb	r1, [r2, r3]
 800a0fe:	7cfc      	ldrb	r4, [r7, #19]
 800a100:	f107 020c 	add.w	r2, r7, #12
 800a104:	f107 0313 	add.w	r3, r7, #19
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	f107 030c 	add.w	r3, r7, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	4623      	mov	r3, r4
 800a112:	f00a f878 	bl	8014206 <phpalI14443p3a_Sw_Anticollision>
 800a116:	4603      	mov	r3, r0
 800a118:	83fb      	strh	r3, [r7, #30]
                        bTypeANvbUid,                        /* UID len = 0 */
                        aTypeAUid,                           /* UID out */
                        &bTypeANvbUid);                      /* UID out size */

                    /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a120:	2b01      	cmp	r3, #1
 800a122:	d12e      	bne.n	800a182 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
                    {
                        bRetryCount = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	76bb      	strb	r3, [r7, #26]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a128:	e024      	b.n	800a174 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2d8>
                        {
                            bRetryCount++;
 800a12a:	7ebb      	ldrb	r3, [r7, #26]
 800a12c:	3301      	adds	r3, #1
 800a12e:	76bb      	strb	r3, [r7, #26]
                            /* Wait for at least Tmin retransmission delay. */
                            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a134:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a138:	2100      	movs	r1, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f004 f910 	bl	800e360 <phhalHw_Pn5180_Wait>
 800a140:	4603      	mov	r3, r0
 800a142:	83fb      	strh	r3, [r7, #30]
 800a144:	8bfb      	ldrh	r3, [r7, #30]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2b2>
 800a14a:	8bfb      	ldrh	r3, [r7, #30]
 800a14c:	e1a5      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                                pDataParams->pHalDataParams,
                                PHHAL_HW_TIME_MICROSECONDS,
                                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                            status = phpalI14443p3a_Anticollision(
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a152:	7efb      	ldrb	r3, [r7, #27]
 800a154:	4a83      	ldr	r2, [pc, #524]	@ (800a364 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a156:	5cd1      	ldrb	r1, [r2, r3]
 800a158:	7cfc      	ldrb	r4, [r7, #19]
 800a15a:	f107 020c 	add.w	r2, r7, #12
 800a15e:	f107 0313 	add.w	r3, r7, #19
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	f107 030c 	add.w	r3, r7, #12
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4623      	mov	r3, r4
 800a16c:	f00a f84b 	bl	8014206 <phpalI14443p3a_Sw_Anticollision>
 800a170:	4603      	mov	r3, r0
 800a172:	83fb      	strh	r3, [r7, #30]
                        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a174:	8bfb      	ldrh	r3, [r7, #30]
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d102      	bne.n	800a182 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2e6>
 800a17c:	7ebb      	ldrb	r3, [r7, #26]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d9d3      	bls.n	800a12a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x28e>
                                &bTypeANvbUid);                      /* UID out size */
                        }
                    }

                    /*Symbol 8, 13*/
                    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a182:	8bfb      	ldrh	r3, [r7, #30]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b03      	cmp	r3, #3
 800a188:	d158      	bne.n	800a23c <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3a0>
                    {
                        /* Emvco: case_id TA302_00 */
                        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a190:	2b01      	cmp	r3, #1
 800a192:	d102      	bne.n	800a19a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x2fe>
                        {
                            /* Report Error to Application and Application will perform PICC Reset */
                            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800a194:	f244 0381 	movw	r3, #16513	@ 0x4081
 800a198:	e17f      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /*Symbol 9*/
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7f9b      	ldrb	r3, [r3, #30]
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	779a      	strb	r2, [r3, #30]
                        if(bTypeATagIdx >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7a9b      	ldrb	r3, [r3, #10]
 800a1ac:	7f3a      	ldrb	r2, [r7, #28]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d301      	bcc.n	800a1b6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x31a>
                        {
                            /*Symbol 10*/
                            return PH_ERR_SUCCESS;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e171      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }

                        /* Increment the number of valid bits and set the collision bit to one and handle based on Byte and Bit boundaries. */
                        if ((bTypeANvbUid & ((uint8_t)0x07U)) <  (uint8_t)7U)
 800a1b6:	7cfb      	ldrb	r3, [r7, #19]
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	2b06      	cmp	r3, #6
 800a1be:	dc1d      	bgt.n	800a1fc <phacDiscLoop_Sw_Int_CollisionResolutionA+0x360>
                        {
                            bTypeANvbUid++;
 800a1c0:	7cfb      	ldrb	r3, [r7, #19]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)((bTypeANvbUid & 0xF0U) >> 4U)] |= (uint8_t)(0x01 << ((bTypeANvbUid & ((uint8_t)0x07U)) - 1U));
 800a1c8:	7cfb      	ldrb	r3, [r7, #19]
 800a1ca:	091b      	lsrs	r3, r3, #4
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	3320      	adds	r3, #32
 800a1d0:	443b      	add	r3, r7
 800a1d2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a1d6:	7cfb      	ldrb	r3, [r7, #19]
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	2101      	movs	r1, #1
 800a1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	7cf9      	ldrb	r1, [r7, #19]
 800a1e8:	0909      	lsrs	r1, r1, #4
 800a1ea:	b2c9      	uxtb	r1, r1
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	f101 0320 	add.w	r3, r1, #32
 800a1f4:	443b      	add	r3, r7
 800a1f6:	f803 2c14 	strb.w	r2, [r3, #-20]
 800a1fa:	e024      	b.n	800a246 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                        }
                        else
                        {
                            bTypeANvbUid = (uint8_t)((((bTypeANvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 800a1fc:	7cfb      	ldrb	r3, [r7, #19]
 800a1fe:	091b      	lsrs	r3, r3, #4
 800a200:	b2db      	uxtb	r3, r3
 800a202:	3301      	adds	r3, #1
 800a204:	b2db      	uxtb	r3, r3
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	74fb      	strb	r3, [r7, #19]

                            /* Set collision bit to 1 to resolve tag with highest UID */
                            aTypeAUid[(uint8_t)(((bTypeANvbUid & 0xF0U) >> 4U) - 1U)] |= (uint8_t)(0x80U);
 800a20c:	7cfb      	ldrb	r3, [r7, #19]
 800a20e:	091b      	lsrs	r3, r3, #4
 800a210:	b2db      	uxtb	r3, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	b2db      	uxtb	r3, r3
 800a216:	3320      	adds	r3, #32
 800a218:	443b      	add	r3, r7
 800a21a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800a21e:	7cfa      	ldrb	r2, [r7, #19]
 800a220:	0912      	lsrs	r2, r2, #4
 800a222:	b2d2      	uxtb	r2, r2
 800a224:	3a01      	subs	r2, #1
 800a226:	b2d2      	uxtb	r2, r2
 800a228:	4611      	mov	r1, r2
 800a22a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	f101 0320 	add.w	r3, r1, #32
 800a234:	443b      	add	r3, r7
 800a236:	f803 2c14 	strb.w	r2, [r3, #-20]
 800a23a:	e004      	b.n	800a246 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
                    }
                    else
                    {
                        /* Check success */
                        /* Some error that can't be handled */
                        PH_CHECK_SUCCESS(status); /* TA302_01*/
 800a23c:	8bfb      	ldrh	r3, [r7, #30]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3aa>
 800a242:	8bfb      	ldrh	r3, [r7, #30]
 800a244:	e129      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                while (bTypeANvbUid != 0x40U)
 800a246:	7cfb      	ldrb	r3, [r7, #19]
 800a248:	2b40      	cmp	r3, #64	@ 0x40
 800a24a:	f47f af53 	bne.w	800a0f4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x258>
                    }
                } /*End of while (bTypeANvbUid != 0x40U)*/

                /* Atqa(which indicates NFCID1 size) is invalid since collision is encountered while receiving Atqa */
                if (bCollDetected == PH_OFF)
 800a24e:	7e7b      	ldrb	r3, [r7, #25]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d12d      	bne.n	800a2b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    * ISO14443-3 Article 6.5.2.1
                    * EMVCo article 5.4.2
                    * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                    * of a double-size NFCID1 to a value different from 88h.
                    */
                    if(((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7f9b      	ldrb	r3, [r3, #30]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d127      	bne.n	800a2b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && ((((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x00U)
 800a260:	7f3a      	ldrb	r2, [r7, #28]
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	4613      	mov	r3, r2
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	1a9b      	subs	r3, r3, r2
 800a26a:	440b      	add	r3, r1
 800a26c:	335e      	adds	r3, #94	@ 0x5e
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x3e6>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_1))
 800a278:	7efb      	ldrb	r3, [r7, #27]
 800a27a:	4a3a      	ldr	r2, [pc, #232]	@ (800a364 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a27c:	5cd3      	ldrb	r3, [r2, r3]
 800a27e:	2b93      	cmp	r3, #147	@ 0x93
 800a280:	d010      	beq.n	800a2a4 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x408>
                       || (((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] & 0xC0U) == 0x40U)
 800a282:	7f3a      	ldrb	r2, [r7, #28]
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	4613      	mov	r3, r2
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	440b      	add	r3, r1
 800a28e:	335e      	adds	r3, #94	@ 0x5e
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a296:	2b40      	cmp	r3, #64	@ 0x40
 800a298:	d10a      	bne.n	800a2b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aCascadeCodes[bCascadeCodeIdx] == PHPAL_I14443P3A_CASCADE_LEVEL_2)))
 800a29a:	7efb      	ldrb	r3, [r7, #27]
 800a29c:	4a31      	ldr	r2, [pc, #196]	@ (800a364 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	2b95      	cmp	r3, #149	@ 0x95
 800a2a2:	d105      	bne.n	800a2b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                       && (aTypeAUid[0] == 0x88U))
 800a2a4:	7b3b      	ldrb	r3, [r7, #12]
 800a2a6:	2b88      	cmp	r3, #136	@ 0x88
 800a2a8:	d102      	bne.n	800a2b0 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x414>
                    {
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AC_DISCLOOP);
 800a2aa:	f244 0306 	movw	r3, #16390	@ 0x4006
 800a2ae:	e0f4      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }
                }

                /*symbol 14*/
                status = phpalI14443p3a_Select(
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a2b4:	7efb      	ldrb	r3, [r7, #27]
 800a2b6:	4a2b      	ldr	r2, [pc, #172]	@ (800a364 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a2b8:	5cd1      	ldrb	r1, [r2, r3]
 800a2ba:	7f3a      	ldrb	r2, [r7, #28]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	3360      	adds	r3, #96	@ 0x60
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	330b      	adds	r3, #11
 800a2ca:	f107 020c 	add.w	r2, r7, #12
 800a2ce:	f00a f9d1 	bl	8014674 <phpalI14443p3a_Sw_Select>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	83fb      	strh	r3, [r7, #30]
                    aCascadeCodes[bCascadeCodeIdx],
                    aTypeAUid,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);

                /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
                if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d12e      	bne.n	800a33e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
                {
                    bRetryCount = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	76bb      	strb	r3, [r7, #26]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a2e4:	e024      	b.n	800a330 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x494>
                    {
                        bRetryCount++;
 800a2e6:	7ebb      	ldrb	r3, [r7, #26]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	76bb      	strb	r3, [r7, #26]
                        /* Wait for at least Tmin retransmission delay. */
                        PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f004 f832 	bl	800e360 <phhalHw_Pn5180_Wait>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	83fb      	strh	r3, [r7, #30]
 800a300:	8bfb      	ldrh	r3, [r7, #30]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x46e>
 800a306:	8bfb      	ldrh	r3, [r7, #30]
 800a308:	e0c7      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                            pDataParams->pHalDataParams,
                            PHHAL_HW_TIME_MICROSECONDS,
                            PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                        status = phpalI14443p3a_Select(
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a30e:	7efb      	ldrb	r3, [r7, #27]
 800a310:	4a14      	ldr	r2, [pc, #80]	@ (800a364 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c8>)
 800a312:	5cd1      	ldrb	r1, [r2, r3]
 800a314:	7f3a      	ldrb	r2, [r7, #28]
 800a316:	4613      	mov	r3, r2
 800a318:	011b      	lsls	r3, r3, #4
 800a31a:	1a9b      	subs	r3, r3, r2
 800a31c:	3360      	adds	r3, #96	@ 0x60
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	4413      	add	r3, r2
 800a322:	330b      	adds	r3, #11
 800a324:	f107 020c 	add.w	r2, r7, #12
 800a328:	f00a f9a4 	bl	8014674 <phpalI14443p3a_Sw_Select>
 800a32c:	4603      	mov	r3, r0
 800a32e:	83fb      	strh	r3, [r7, #30]
                    while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800a330:	8bfb      	ldrh	r3, [r7, #30]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b01      	cmp	r3, #1
 800a336:	d102      	bne.n	800a33e <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4a2>
 800a338:	7ebb      	ldrb	r3, [r7, #26]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d9d3      	bls.n	800a2e6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x44a>
                            aTypeAUid,
                            &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak);
                    }
                }

                if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a33e:	8bfb      	ldrh	r3, [r7, #30]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10c      	bne.n	800a360 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4c4>
                {
                    /*Symbol 15*/
                    if ((0U == (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x04U)))
 800a346:	7f3a      	ldrb	r2, [r7, #28]
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	4613      	mov	r3, r2
 800a34c:	011b      	lsls	r3, r3, #4
 800a34e:	1a9b      	subs	r3, r3, r2
 800a350:	440b      	add	r3, r1
 800a352:	336b      	adds	r3, #107	@ 0x6b
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4cc>
                    {
                        /*UID Complete*/
                        break;
 800a35e:	e00a      	b.n	800a376 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x4da>
                    }
                }
                else
                {
                    return status;
 800a360:	8bfb      	ldrh	r3, [r7, #30]
 800a362:	e09a      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
 800a364:	08021f3c 	.word	0x08021f3c
            for (bCascadeCodeIdx=0; bCascadeCodeIdx<3U; bCascadeCodeIdx++)
 800a368:	7efb      	ldrb	r3, [r7, #27]
 800a36a:	3301      	adds	r3, #1
 800a36c:	76fb      	strb	r3, [r7, #27]
 800a36e:	7efb      	ldrb	r3, [r7, #27]
 800a370:	2b02      	cmp	r3, #2
 800a372:	f67f aebc 	bls.w	800a0ee <phacDiscLoop_Sw_Int_CollisionResolutionA+0x252>
                }

            } /*for()*/

            /* If select was successful */
            if (status == PH_ERR_SUCCESS)
 800a376:	8bfb      	ldrh	r3, [r7, #30]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d174      	bne.n	800a466 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
            {
                /*Symbol 18*/
                status = phpalI14443p3a_GetSerialNo(
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a380:	7f3a      	ldrb	r2, [r7, #28]
 800a382:	4613      	mov	r3, r2
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	3358      	adds	r3, #88	@ 0x58
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	f103 0108 	add.w	r1, r3, #8
 800a392:	7f3a      	ldrb	r2, [r7, #28]
 800a394:	4613      	mov	r3, r2
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	3360      	adds	r3, #96	@ 0x60
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	4413      	add	r3, r2
 800a3a0:	330a      	adds	r3, #10
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f00a fc37 	bl	8014c16 <phpalI14443p3a_Sw_GetSerialNo>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	83fb      	strh	r3, [r7, #30]
                    pDataParams->pPal1443p3aDataParams,
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aUid[0],
                    &pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bUidSize);

                PH_CHECK_SUCCESS(status);
 800a3ac:	8bfb      	ldrh	r3, [r7, #30]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x51a>
 800a3b2:	8bfb      	ldrh	r3, [r7, #30]
 800a3b4:	e071      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>

                /*Symbol 17*/
                bTypeATagIdx++;
 800a3b6:	7f3b      	ldrb	r3, [r7, #28]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	773b      	strb	r3, [r7, #28]

                /*Symbol 19*/
                if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_A))) && (bTypeATagIdx < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A]))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	7f9b      	ldrb	r3, [r3, #30]
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d057      	beq.n	800a478 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	7a9b      	ldrb	r3, [r3, #10]
 800a3cc:	7f3a      	ldrb	r2, [r7, #28]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d252      	bcs.n	800a478 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5dc>
                {
                    /* Symbol 20 */
                    status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f009 febe 	bl	8014158 <phpalI14443p3a_Sw_HaltA>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	83fb      	strh	r3, [r7, #30]
                    if (status != PH_ERR_SUCCESS)
 800a3e0:	8bfb      	ldrh	r3, [r7, #30]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <phacDiscLoop_Sw_Int_CollisionResolutionA+0x54e>
                    {
                        /* Halt A has failed, can't count this as detected tag */
                        return status;
 800a3e6:	8bfb      	ldrh	r3, [r7, #30]
 800a3e8:	e057      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                    }

                    /* Update the corresponding Layer 3 dataparam to indicate the Tag is in HALT State. */
                    (pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx - (uint8_t)1U].bSleep = (uint8_t)1U;
 800a3ea:	7f3b      	ldrb	r3, [r7, #28]
 800a3ec:	1e5a      	subs	r2, r3, #1
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	1a9b      	subs	r3, r3, r2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	336c      	adds	r3, #108	@ 0x6c
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	701a      	strb	r2, [r3, #0]

                    /* Symbol 21 */
                    status = phpalI14443p3a_RequestA(
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a402:	7f3a      	ldrb	r2, [r7, #28]
 800a404:	4613      	mov	r3, r2
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	3358      	adds	r3, #88	@ 0x58
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	4413      	add	r3, r2
 800a410:	3306      	adds	r3, #6
 800a412:	4619      	mov	r1, r3
 800a414:	f009 fe82 	bl	801411c <phpalI14443p3a_Sw_RequestA>
 800a418:	4603      	mov	r3, r0
 800a41a:	83fb      	strh	r3, [r7, #30]
                        pDataParams->pPal1443p3aDataParams,
                        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa);

                    if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800a41c:	8bfb      	ldrh	r3, [r7, #30]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	d112      	bne.n	800a44a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ae>
                    {
                        /*Symbol 3*/
                        if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aAtqa[0] == 0x00U)
 800a424:	7f3a      	ldrb	r2, [r7, #28]
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	4613      	mov	r3, r2
 800a42a:	011b      	lsls	r3, r3, #4
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	440b      	add	r3, r1
 800a430:	335e      	adds	r3, #94	@ 0x5e
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d116      	bne.n	800a466 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                        {
                            /*Symbol 23*/
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	7f9b      	ldrb	r3, [r3, #30]
 800a43c:	f043 0301 	orr.w	r3, r3, #1
 800a440:	b2da      	uxtb	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	779a      	strb	r2, [r3, #30]
                            return PH_ERR_SUCCESS;
 800a446:	2300      	movs	r3, #0
 800a448:	e027      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                        }
                    }
                    else if((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800a44a:	8bfb      	ldrh	r3, [r7, #30]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d107      	bne.n	800a462 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5c6>
                    {
                        /* More device to resolve */
                        pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_A;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7f9b      	ldrb	r3, [r3, #30]
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	779a      	strb	r2, [r3, #30]
 800a460:	e001      	b.n	800a466 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5ca>
                    }
                    else
                    {
                        return status;
 800a462:	8bfb      	ldrh	r3, [r7, #30]
 800a464:	e019      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
                {
                    break;
                }
            }
        }
        bDeviceCount++;
 800a466:	7f7b      	ldrb	r3, [r7, #29]
 800a468:	3301      	adds	r3, #1
 800a46a:	777b      	strb	r3, [r7, #29]
    while (bDeviceCount <= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_A])
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7a9b      	ldrb	r3, [r3, #10]
 800a470:	7f7a      	ldrb	r2, [r7, #29]
 800a472:	429a      	cmp	r2, r3
 800a474:	f67f ae2b 	bls.w	800a0ce <phacDiscLoop_Sw_Int_CollisionResolutionA+0x232>
    } /* End of while(bDeviceCount < pDataParams->baPasConDevLim[0]) */

    pDataParams->sTypeATargetInfo.bTotalTagsFound = bTypeATagIdx;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	7f3a      	ldrb	r2, [r7, #28]
 800a47c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pDataParams->bNumOfCards = bTypeATagIdx;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	7f3a      	ldrb	r2, [r7, #28]
 800a484:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound == 0U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d102      	bne.n	800a498 <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fc>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a492:	f244 0385 	movw	r3, #16517	@ 0x4085
 800a496:	e000      	b.n	800a49a <phacDiscLoop_Sw_Int_CollisionResolutionA+0x5fe>
    }

    return PH_ERR_SUCCESS;
 800a498:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3724      	adds	r7, #36	@ 0x24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd90      	pop	{r4, r7, pc}
 800a4a2:	bf00      	nop

0800a4a4 <phacDiscLoop_Sw_Int_ActivateA>:

phStatus_t phacDiscLoop_Sw_Int_ActivateA(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeATagIdx
                                         )
{
 800a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a8:	b090      	sub	sp, #64	@ 0x40
 800a4aa:	af06      	add	r7, sp, #24
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	70fb      	strb	r3, [r7, #3]
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS)
    phStatus_t   PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t      PH_MEMLOC_BUF aUid[10];
    uint8_t      PH_MEMLOC_REM bUidLen;
    uint8_t      PH_MEMLOC_REM bMoreCardsAvailable;
    uint8_t      PH_MEMLOC_REM bTagType;
    uint8_t      PH_MEMLOC_REM bIndex;
    uint8_t      PH_MEMLOC_REM bActiveDevice = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t      PH_MEMLOC_REM bFsdi;
    uint8_t      PH_MEMLOC_REM bFsci;
    uint16_t     PH_MEMLOC_REM wDataRate;
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */

    if ((bTypeATagIdx >= pDataParams->sTypeATargetInfo.bTotalTagsFound) || ( bTypeATagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d202      	bcs.n	800a4ce <phacDiscLoop_Sw_Int_ActivateA+0x2a>
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <phacDiscLoop_Sw_Int_ActivateA+0x30>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800a4ce:	f244 0321 	movw	r3, #16417	@ 0x4021
 800a4d2:	e206      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    if(pDataParams->sTypeATargetInfo.bTotalTagsFound > PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d902      	bls.n	800a4e4 <phacDiscLoop_Sw_Int_ActivateA+0x40>
    {
        /* To fix coverity issue */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800a4de:	f244 037f 	movw	r3, #16511	@ 0x407f
 800a4e2:	e1fe      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    /* If it is Single device or selected device is at last position, In both case device is already active */
    if(pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep == 1U) /* Step 0 */
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	1a9b      	subs	r3, r3, r2
 800a4ee:	440b      	add	r3, r1
 800a4f0:	336c      	adds	r3, #108	@ 0x6c
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d175      	bne.n	800a5e4 <phacDiscLoop_Sw_Int_ActivateA+0x140>
    {
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a4fe:	e021      	b.n	800a544 <phacDiscLoop_Sw_Int_ActivateA+0xa0>
        {
            /* Step 1 */
            if ((pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep == 0U) && (bIndex != bTypeATagIdx))
 800a500:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	4613      	mov	r3, r2
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	1a9b      	subs	r3, r3, r2
 800a50c:	440b      	add	r3, r1
 800a50e:	336c      	adds	r3, #108	@ 0x6c
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d111      	bne.n	800a53a <phacDiscLoop_Sw_Int_ActivateA+0x96>
 800a516:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a51a:	78fb      	ldrb	r3, [r7, #3]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d00c      	beq.n	800a53a <phacDiscLoop_Sw_Int_ActivateA+0x96>
            {
                bActiveDevice = 1;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                /* Update dataparam to indicate that the tag will now be moved to IDLE state. */
                pDataParams->sTypeATargetInfo.aTypeA_I3P3[bIndex].bSleep = 1U;
 800a526:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4613      	mov	r3, r2
 800a52e:	011b      	lsls	r3, r3, #4
 800a530:	1a9b      	subs	r3, r3, r2
 800a532:	440b      	add	r3, r1
 800a534:	336c      	adds	r3, #108	@ 0x6c
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
        for (bIndex = 0; bIndex < pDataParams->sTypeATargetInfo.bTotalTagsFound; bIndex++)
 800a53a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a53e:	3301      	adds	r3, #1
 800a540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a54a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a54e:	429a      	cmp	r2, r3
 800a550:	d3d6      	bcc.n	800a500 <phacDiscLoop_Sw_Int_ActivateA+0x5c>
            }
        }
        if (bActiveDevice != 0U)
 800a552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00b      	beq.n	800a572 <phacDiscLoop_Sw_Int_ActivateA+0xce>
        {
            /* Step 2 of Activation flow */
            status = phpalI14443p3a_HaltA(pDataParams->pPal1443p3aDataParams);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55e:	4618      	mov	r0, r3
 800a560:	f009 fdfa 	bl	8014158 <phpalI14443p3a_Sw_HaltA>
 800a564:	4603      	mov	r3, r0
 800a566:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (status != PH_ERR_SUCCESS)
 800a568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <phacDiscLoop_Sw_Int_ActivateA+0xce>
            {
                /* Halt A has failed, can't count this as detected tag */
                return status;
 800a56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a570:	e1b7      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            }
        }

        /* Activate the card in sleep with given UID */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3a_ActivateCard(
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	4613      	mov	r3, r2
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	3358      	adds	r3, #88	@ 0x58
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	4413      	add	r3, r2
 800a584:	f103 0408 	add.w	r4, r3, #8
 800a588:	78fa      	ldrb	r2, [r7, #3]
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	4613      	mov	r3, r2
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	1a9b      	subs	r3, r3, r2
 800a592:	440b      	add	r3, r1
 800a594:	336a      	adds	r3, #106	@ 0x6a
 800a596:	7819      	ldrb	r1, [r3, #0]
 800a598:	78fa      	ldrb	r2, [r7, #3]
 800a59a:	4613      	mov	r3, r2
 800a59c:	011b      	lsls	r3, r3, #4
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	3360      	adds	r3, #96	@ 0x60
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	330b      	adds	r3, #11
 800a5a8:	f107 0518 	add.w	r5, r7, #24
 800a5ac:	f107 0216 	add.w	r2, r7, #22
 800a5b0:	9202      	str	r2, [sp, #8]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	f107 0317 	add.w	r3, r7, #23
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	460a      	mov	r2, r1
 800a5be:	4621      	mov	r1, r4
 800a5c0:	f00a f870 	bl	80146a4 <phpalI14443p3a_Sw_ActivateCard>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a5c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <phacDiscLoop_Sw_Int_ActivateA+0x12e>
 800a5ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a5d0:	e187      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            aUid,
            &bUidLen,
            &(((pDataParams->sTypeATargetInfo).aTypeA_I3P3[bTypeATagIdx]).aSak),
            &bMoreCardsAvailable));

        pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].bSleep = 0U;
 800a5d2:	78fa      	ldrb	r2, [r7, #3]
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	440b      	add	r3, r1
 800a5de:	336c      	adds	r3, #108	@ 0x6c
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	701a      	strb	r2, [r3, #0]

    }

    bTagType = (pDataParams->sTypeATargetInfo.aTypeA_I3P3[bTypeATagIdx].aSak & 0x60U);
 800a5e4:	78fa      	ldrb	r2, [r7, #3]
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	440b      	add	r3, r1
 800a5f0:	336b      	adds	r3, #107	@ 0x6b
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bTagType = bTagType >> 5U;
 800a5fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a600:	095b      	lsrs	r3, r3, #5
 800a602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Type 4A */
    if(bTagType == PHAC_DISCLOOP_TYPEA_TYPE4A_TAG_CONFIG_MASK)
 800a606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	f040 80a0 	bne.w	800a750 <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
    {
#if defined (NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS)
        /* Enable Emd Check */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a614:	2201      	movs	r2, #1
 800a616:	215e      	movs	r1, #94	@ 0x5e
 800a618:	4618      	mov	r0, r3
 800a61a:	f003 ff5d 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800a61e:	4603      	mov	r3, r0
 800a620:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a622:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <phacDiscLoop_Sw_Int_ActivateA+0x188>
 800a628:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a62a:	e15a      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a64e:	9201      	str	r2, [sp, #4]
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	462b      	mov	r3, r5
 800a654:	4622      	mov	r2, r4
 800a656:	f00b fedf 	bl	8016418 <phpalI14443p4a_Sw_ActivateCard>
 800a65a:	4603      	mov	r3, r0
 800a65c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a65e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <phacDiscLoop_Sw_Int_ActivateA+0x1c4>
 800a664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a666:	e13c      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bCid,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

        if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d027      	beq.n	800a6c2 <phacDiscLoop_Sw_Int_ActivateA+0x21e>
        {
            /* Update Dri and Dsi parameters with currently applied values. */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a676:	f107 020e 	add.w	r2, r7, #14
 800a67a:	2103      	movs	r1, #3
 800a67c:	4618      	mov	r0, r3
 800a67e:	f00b fae9 	bl	8015c54 <phpalI14443p4a_Sw_GetConfig>
 800a682:	4603      	mov	r3, r0
 800a684:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <phacDiscLoop_Sw_Int_ActivateA+0x1ec>
 800a68c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a68e:	e128      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DRI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri = (uint8_t)wDataRate;
 800a690:	89fb      	ldrh	r3, [r7, #14]
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetConfig(
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a69e:	f107 020e 	add.w	r2, r7, #14
 800a6a2:	2104      	movs	r1, #4
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f00b fad5 	bl	8015c54 <phpalI14443p4a_Sw_GetConfig>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a6ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <phacDiscLoop_Sw_Int_ActivateA+0x214>
 800a6b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a6b6:	e114      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->pPal1443p4aDataParams,
                PHPAL_I14443P4A_CONFIG_DSI,
                &wDataRate));
            pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi = (uint8_t)wDataRate;
 800a6b8:	89fb      	ldrh	r3, [r7, #14]
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        }

        /* Retrieve 14443-4A protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a6c6:	f107 0413 	add.w	r4, r7, #19
 800a6ca:	f107 0214 	add.w	r2, r7, #20
 800a6ce:	f107 0115 	add.w	r1, r7, #21
 800a6d2:	f107 0310 	add.w	r3, r7, #16
 800a6d6:	9302      	str	r3, [sp, #8]
 800a6d8:	f107 0311 	add.w	r3, r7, #17
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f107 0312 	add.w	r3, r7, #18
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	4623      	mov	r3, r4
 800a6e6:	f00b ff4f 	bl	8016588 <phpalI14443p4a_Sw_GetProtocolParams>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a6ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <phacDiscLoop_Sw_Int_ActivateA+0x254>
 800a6f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a6f6:	e0f4      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            &bFwi,
            &bFsdi,
            &bFsci));

        /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d109      	bne.n	800a716 <phacDiscLoop_Sw_Int_ActivateA+0x272>
        {
            if (bFsci > pDataParams->bFsciMax)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a708:	7c3b      	ldrb	r3, [r7, #16]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d203      	bcs.n	800a716 <phacDiscLoop_Sw_Int_ActivateA+0x272>
            {
                bFsci = pDataParams->bFsciMax;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a714:	743b      	strb	r3, [r7, #16]
            }
        }

        /* Set 14443-4 protocol parameter */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800a71a:	7d7d      	ldrb	r5, [r7, #21]
 800a71c:	7d3e      	ldrb	r6, [r7, #20]
 800a71e:	f897 c013 	ldrb.w	ip, [r7, #19]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800a728:	7cba      	ldrb	r2, [r7, #18]
 800a72a:	7c79      	ldrb	r1, [r7, #17]
 800a72c:	7c38      	ldrb	r0, [r7, #16]
 800a72e:	9003      	str	r0, [sp, #12]
 800a730:	9102      	str	r1, [sp, #8]
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	4663      	mov	r3, ip
 800a738:	4632      	mov	r2, r6
 800a73a:	4629      	mov	r1, r5
 800a73c:	4620      	mov	r0, r4
 800a73e:	f00b f924 	bl	801598a <phpalI14443p4_Sw_SetProtocol>
 800a742:	4603      	mov	r3, r0
 800a744:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <phacDiscLoop_Sw_Int_ActivateA+0x2ac>
 800a74c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a74e:	e0c8      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
    }

    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TAG_CONFIG_MASK)
 800a750:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a754:	2b02      	cmp	r3, #2
 800a756:	d13d      	bne.n	800a7d4 <phacDiscLoop_Sw_Int_ActivateA+0x330>
    {
        /* In case of EMVCo Profile and P2P tag is detected. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d102      	bne.n	800a768 <phacDiscLoop_Sw_Int_ActivateA+0x2c4>
        {
            /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a762:	f244 0385 	movw	r3, #16517	@ 0x4085
 800a766:	e0bc      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS
        /* Send ATR_REQ and PSL_REQ */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	4613      	mov	r3, r2
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	1a9b      	subs	r3, r3, r2
 800a774:	3358      	adds	r3, #88	@ 0x58
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	4413      	add	r3, r2
 800a77a:	f103 0c08 	add.w	ip, r3, #8
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 e070 	ldrb.w	lr, [r3, #112]	@ 0x70
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 8071 	ldrb.w	r8, [r3, #113]	@ 0x71
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	f892 2073 	ldrb.w	r2, [r2, #115]	@ 0x73
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
 800a7a0:	687c      	ldr	r4, [r7, #4]
 800a7a2:	6fe4      	ldr	r4, [r4, #124]	@ 0x7c
 800a7a4:	687d      	ldr	r5, [r7, #4]
 800a7a6:	3580      	adds	r5, #128	@ 0x80
 800a7a8:	9505      	str	r5, [sp, #20]
 800a7aa:	9404      	str	r4, [sp, #16]
 800a7ac:	9003      	str	r0, [sp, #12]
 800a7ae:	9102      	str	r1, [sp, #8]
 800a7b0:	9201      	str	r2, [sp, #4]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	4643      	mov	r3, r8
 800a7b6:	4672      	mov	r2, lr
 800a7b8:	4661      	mov	r1, ip
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f00c fa00 	bl	8016bc0 <phpalI18092mPI_Sw_Atr>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a7c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <phacDiscLoop_Sw_Int_ActivateA+0x32a>
 800a7ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7cc:	e089      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pGi,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.bGiLength,
            pDataParams->sTypeATargetInfo.sTypeA_P2P.pAtrRes,
            &(pDataParams->sTypeATargetInfo.sTypeA_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800a7ce:	f244 038d 	movw	r3, #16525	@ 0x408d
 800a7d2:	e086      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_P2P_TAGS */
    }

    /* Support for both Type 4A and NFC-DEP (Merged SAK) */
    if (bTagType == PHAC_DISCLOOP_TYPEA_TYPE_NFC_DEP_TYPE4A_TAG_CONFIG_MASK)
 800a7d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d175      	bne.n	800a8c8 <phacDiscLoop_Sw_Int_ActivateA+0x424>
    {
#ifdef  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d16d      	bne.n	800a8c2 <phacDiscLoop_Sw_Int_ActivateA+0x41e>
        {
            /* Enable Emd Check in Emvco mode */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	215e      	movs	r1, #94	@ 0x5e
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f003 fe72 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a7f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <phacDiscLoop_Sw_Int_ActivateA+0x35e>
 800a7fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a800:	e06f      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>

            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_ActivateCard(
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 1084 	ldrb.w	r1, [r3, #132]	@ 0x84
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 4085 	ldrb.w	r4, [r3, #133]	@ 0x85
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 5087 	ldrb.w	r5, [r3, #135]	@ 0x87
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a824:	9201      	str	r2, [sp, #4]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	462b      	mov	r3, r5
 800a82a:	4622      	mov	r2, r4
 800a82c:	f00b fdf4 	bl	8016418 <phpalI14443p4a_Sw_ActivateCard>
 800a830:	4603      	mov	r3, r0
 800a832:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <phacDiscLoop_Sw_Int_ActivateA+0x39a>
 800a83a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a83c:	e051      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDri,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.bDsi,
                pDataParams->sTypeATargetInfo.sTypeA_I3P4.pAts));

            /* Retrieve 14443-4A protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4a_GetProtocolParams(
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a842:	f107 0413 	add.w	r4, r7, #19
 800a846:	f107 0214 	add.w	r2, r7, #20
 800a84a:	f107 0115 	add.w	r1, r7, #21
 800a84e:	f107 0310 	add.w	r3, r7, #16
 800a852:	9302      	str	r3, [sp, #8]
 800a854:	f107 0311 	add.w	r3, r7, #17
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	f107 0312 	add.w	r3, r7, #18
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	4623      	mov	r3, r4
 800a862:	f00b fe91 	bl	8016588 <phpalI14443p4a_Sw_GetProtocolParams>
 800a866:	4603      	mov	r3, r0
 800a868:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a86a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <phacDiscLoop_Sw_Int_ActivateA+0x3d0>
 800a870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a872:	e036      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
                &bFwi,
                &bFsdi,
                &bFsci));

            /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
            if (bFsci > pDataParams->bFsciMax)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a87a:	7c3b      	ldrb	r3, [r7, #16]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d203      	bcs.n	800a888 <phacDiscLoop_Sw_Int_ActivateA+0x3e4>
            {
                bFsci = pDataParams->bFsciMax;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a886:	743b      	strb	r3, [r7, #16]
            }

            /* Set 14443-4 protocol parameter */
            PH_CHECK_SUCCESS_FCT(status, phpalI14443p4_SetProtocol(
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800a88c:	7d7d      	ldrb	r5, [r7, #21]
 800a88e:	7d3e      	ldrb	r6, [r7, #20]
 800a890:	f897 c013 	ldrb.w	ip, [r7, #19]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800a89a:	7cba      	ldrb	r2, [r7, #18]
 800a89c:	7c79      	ldrb	r1, [r7, #17]
 800a89e:	7c38      	ldrb	r0, [r7, #16]
 800a8a0:	9003      	str	r0, [sp, #12]
 800a8a2:	9102      	str	r1, [sp, #8]
 800a8a4:	9201      	str	r2, [sp, #4]
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	4663      	mov	r3, ip
 800a8aa:	4632      	mov	r2, r6
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f00b f86b 	bl	801598a <phpalI14443p4_Sw_SetProtocol>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a8b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <phacDiscLoop_Sw_Int_ActivateA+0x424>
 800a8be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8c0:	e00f      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
        else
#endif /*  NXPBUILD__PHAC_DISCLOOP_TYPEA_I3P4_TAGS */
        {
            /* Return to application; application can decide what to send RATS or ATR */
            return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_MERGED_SEL_RES_FOUND, PH_COMP_AC_DISCLOOP);
 800a8c2:	f244 038e 	movw	r3, #16526	@ 0x408e
 800a8c6:	e00c      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
        }
    }

    /* Case of EMVCo Profile and type 2 tag */
    if ((bTagType == PHAC_DISCLOOP_TYPEA_TYPE2_TAG_CONFIG_MASK) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 800a8c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d107      	bne.n	800a8e0 <phacDiscLoop_Sw_Int_ActivateA+0x43c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d102      	bne.n	800a8e0 <phacDiscLoop_Sw_Int_ActivateA+0x43c>
    {
        /* Return to application with No device resolved; In EMVCo mode only Type-A ISO 14443-4 compliant cards should be activated. */
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a8da:	f244 0385 	movw	r3, #16517	@ 0x4085
 800a8de:	e000      	b.n	800a8e2 <phacDiscLoop_Sw_Int_ActivateA+0x43e>
    }

    return PH_ERR_SUCCESS;
 800a8e0:	2300      	movs	r3, #0
#else /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEA_TAGS */
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3728      	adds	r7, #40	@ 0x28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8ec <phacDiscLoop_Sw_DetTechTypeB>:
 * Internal Definitions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeB(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800a8ec:	b590      	push	{r4, r7, lr}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    uint8_t    PH_MEMLOC_COUNT bIndex;

    phStatus_t PH_MEMLOC_REM wStatus;

    pDataParams->sTypeBTargetInfo.bAfiReq = 0x00;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	7f9b      	ldrb	r3, [r3, #30]
 800a908:	f023 0302 	bic.w	r3, r3, #2
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	779a      	strb	r2, [r3, #30]

    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
 800a916:	e00c      	b.n	800a932 <phacDiscLoop_Sw_DetTechTypeB+0x46>
    {
        /* Device is not in HLTB state */
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bIndex].bSleep = 0U;
 800a918:	7bfa      	ldrb	r2, [r7, #15]
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	4613      	mov	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	440b      	add	r3, r1
 800a926:	33dc      	adds	r3, #220	@ 0xdc
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
    for(bIndex = 0U; bIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bIndex++)
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	3301      	adds	r3, #1
 800a930:	73fb      	strb	r3, [r7, #15]
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0ef      	beq.n	800a918 <phacDiscLoop_Sw_DetTechTypeB+0x2c>
    }

    /* WakeupB with number of slot as 0 */
    wStatus = phpalI14443p3b_WakeUpB(
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 10c1 	ldrb.w	r1, [r3, #193]	@ 0xc1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 40c2 	ldrb.w	r4, [r3, #194]	@ 0xc2
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	33cd      	adds	r3, #205	@ 0xcd
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	32da      	adds	r2, #218	@ 0xda
 800a950:	9201      	str	r2, [sp, #4]
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	4623      	mov	r3, r4
 800a956:	460a      	mov	r2, r1
 800a958:	2100      	movs	r1, #0
 800a95a:	f00a fa80 	bl	8014e5e <phpalI14443p3b_Sw_WakeUpB>
 800a95e:	4603      	mov	r3, r0
 800a960:	81bb      	strh	r3, [r7, #12]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800a962:	89bb      	ldrh	r3, [r7, #12]
 800a964:	4618      	mov	r0, r3
 800a966:	f7ff fa08 	bl	8009d7a <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d015      	beq.n	800a99c <phacDiscLoop_Sw_DetTechTypeB+0xb0>
    {
        if((wStatus & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800a970:	89bb      	ldrh	r3, [r7, #12]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <phacDiscLoop_Sw_DetTechTypeB+0x9a>
        {
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7f9b      	ldrb	r3, [r3, #30]
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	b2da      	uxtb	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	779a      	strb	r2, [r3, #30]
        }
        pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a98c:	3301      	adds	r3, #1
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    else
    {
        return wStatus;
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800a996:	f244 0387 	movw	r3, #16519	@ 0x4087
 800a99a:	e000      	b.n	800a99e <phacDiscLoop_Sw_DetTechTypeB+0xb2>
        return wStatus;
 800a99c:	89bb      	ldrh	r3, [r7, #12]
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd90      	pop	{r4, r7, pc}

0800a9a6 <phacDiscLoop_Sw_Int_CollisionResolutionB>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionB(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800a9a6:	b5b0      	push	{r4, r5, r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af02      	add	r7, sp, #8
 800a9ac:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_SUCCESS;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM   bLastSlotReached;
    uint8_t    PH_MEMLOC_COUNT bNumOfSlots;
    uint8_t    PH_MEMLOC_COUNT bRetryCount;

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_B] == 0x00U)))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7f9b      	ldrb	r3, [r3, #30]
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7adb      	ldrb	r3, [r3, #11]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2e>
    {
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800a9ce:	f244 0385 	movw	r3, #16517	@ 0x4085
 800a9d2:	e1e1      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    bRetryCount = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	727b      	strb	r3, [r7, #9]
    /* Symbol 0 */
    bNumOfSlots = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	72bb      	strb	r3, [r7, #10]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	8a5b      	ldrh	r3, [r3, #18]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	2135      	movs	r1, #53	@ 0x35
 800a9e8:	f003 fd76 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	81fb      	strh	r3, [r7, #14]
 800a9f0:	89fb      	ldrh	r3, [r7, #14]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <phacDiscLoop_Sw_Int_CollisionResolutionB+0x54>
 800a9f6:	89fb      	ldrh	r3, [r7, #14]
 800a9f8:	e1ce      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_B]));

    /* Configure HW for the TypeB technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fe:	2102      	movs	r1, #2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f002 ffeb 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800aa06:	4603      	mov	r3, r0
 800aa08:	81fb      	strh	r3, [r7, #14]
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x6e>
 800aa10:	89fb      	ldrh	r3, [r7, #14]
 800aa12:	e1c1      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO14443B));

    /* WakeupB with number of slot as 0 */
    status = phpalI14443p3b_WakeUpB(
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	33cd      	adds	r3, #205	@ 0xcd
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	32da      	adds	r2, #218	@ 0xda
 800aa2c:	7ab9      	ldrb	r1, [r7, #10]
 800aa2e:	9201      	str	r2, [sp, #4]
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	462b      	mov	r3, r5
 800aa34:	4622      	mov	r2, r4
 800aa36:	f00a fa12 	bl	8014e5e <phpalI14443p3b_Sw_WakeUpB>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	81fb      	strh	r3, [r7, #14]
        pDataParams->sTypeBTargetInfo.bAfiReq,
        pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);

    if(PH_ERR_SUCCESS != (status & PH_ERR_MASK))
 800aa3e:	89fb      	ldrh	r3, [r7, #14]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 8195 	beq.w	800ad72 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
    {
        /* As per EMVCo 3.1, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d148      	bne.n	800aae4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x13e>
        {
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800aa52:	89fb      	ldrh	r3, [r7, #14]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d130      	bne.n	800aabc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x116>
            {
                pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7f9b      	ldrb	r3, [r3, #30]
 800aa5e:	f023 0302 	bic.w	r3, r3, #2
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	779a      	strb	r2, [r3, #30]

                /* Report Error to Application and Application will perform PICC Reset */
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800aa68:	f244 0381 	movw	r3, #16513	@ 0x4081
 800aa6c:	e194      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }

            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
            {
                bRetryCount++;
 800aa6e:	7a7b      	ldrb	r3, [r7, #9]
 800aa70:	3301      	adds	r3, #1
 800aa72:	727b      	strb	r3, [r7, #9]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa78:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f003 fc6e 	bl	800e360 <phhalHw_Pn5180_Wait>
 800aa84:	4603      	mov	r3, r0
 800aa86:	81fb      	strh	r3, [r7, #14]
 800aa88:	89fb      	ldrh	r3, [r7, #14]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <phacDiscLoop_Sw_Int_CollisionResolutionB+0xec>
 800aa8e:	89fb      	ldrh	r3, [r7, #14]
 800aa90:	e182      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                status = phpalI14443p3b_WakeUpB(pDataParams->pPal1443p3bDataParams,
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	33cd      	adds	r3, #205	@ 0xcd
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	32da      	adds	r2, #218	@ 0xda
 800aaaa:	7ab9      	ldrb	r1, [r7, #10]
 800aaac:	9201      	str	r2, [sp, #4]
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462b      	mov	r3, r5
 800aab2:	4622      	mov	r2, r4
 800aab4:	f00a f9d3 	bl	8014e5e <phpalI14443p3b_Sw_WakeUpB>
 800aab8:	4603      	mov	r3, r0
 800aaba:	81fb      	strh	r3, [r7, #14]
            while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 800aabc:	89fb      	ldrh	r3, [r7, #14]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d102      	bne.n	800aaca <phacDiscLoop_Sw_Int_CollisionResolutionB+0x124>
 800aac4:	7a7b      	ldrb	r3, [r7, #9]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d9d1      	bls.n	800aa6e <phacDiscLoop_Sw_Int_CollisionResolutionB+0xc8>
                    pDataParams->sTypeBTargetInfo.bExtendedAtqBbit,
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[0].bAtqBLength);
            }

            pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	7f9b      	ldrb	r3, [r3, #30]
 800aace:	f023 0302 	bic.w	r3, r3, #2
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	779a      	strb	r2, [r3, #30]
            /* Some error that can't be handled */
            PH_CHECK_SUCCESS(status);
 800aad8:	89fb      	ldrh	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 8149 	beq.w	800ad72 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
 800aae0:	89fb      	ldrh	r3, [r7, #14]
 800aae2:	e159      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        }
        else
        {
            /* Symbol 2 */
            /* No Response */
            if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800aae4:	89fb      	ldrh	r3, [r7, #14]
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d101      	bne.n	800aaf0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x14a>
            {
                return status;
 800aaec:	89fb      	ldrh	r3, [r7, #14]
 800aaee:	e153      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
            }
            else
            { /* Symbol 3 */
                if (pDataParams->baPasConDevLim[1] == 0x00U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7adb      	ldrb	r3, [r3, #11]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f040 813c 	bne.w	800ad72 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3cc>
                {
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    /* Symbol 4 */
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7f9b      	ldrb	r3, [r3, #30]
 800ab06:	f043 0302 	orr.w	r3, r3, #2
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	779a      	strb	r2, [r3, #30]
                    return status;
 800ab10:	89fb      	ldrh	r3, [r7, #14]
 800ab12:	e141      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
    {
        /* Symbol 5 */
        bCurrentSlotNum = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	737b      	strb	r3, [r7, #13]
        bCurrentDeviceCount = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	733b      	strb	r3, [r7, #12]
        bLastSlotReached = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	72fb      	strb	r3, [r7, #11]
        pDataParams->sTypeBTargetInfo.bTotalTagsFound = 0;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        pDataParams->bCollPend &= (uint8_t)~(uint8_t)PHAC_DISCLOOP_POS_BIT_MASK_B;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	7f9b      	ldrb	r3, [r3, #30]
 800ab2c:	f023 0302 	bic.w	r3, r3, #2
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	779a      	strb	r2, [r3, #30]

        while(0U == bLastSlotReached)
 800ab36:	e118      	b.n	800ad6a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
        {
            /* Symbol 6: Slot is Empty */
            if((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 800ab38:	89fb      	ldrh	r3, [r7, #14]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d060      	beq.n	800ac02 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
            {
                /* Symbol 7: Validate SENSB_RES */
                if (status == PH_ERR_SUCCESS)
 800ab40:	89fb      	ldrh	r3, [r7, #14]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d156      	bne.n	800abf4 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x24e>
                {
                    /* Symbol 9 */
                    if(bCurrentDeviceCount > 0U)
 800ab46:	7b3b      	ldrb	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01f      	beq.n	800ab8c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
                    {
                        /* Symbol 10 */
                        status = phpalI14443p3b_SetSerialNo(
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	33c8      	adds	r3, #200	@ 0xc8
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4413      	add	r3, r2
 800ab66:	3301      	adds	r3, #1
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f00a fed1 	bl	8015910 <phpalI14443p3b_Sw_SetSerialNo>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	81fb      	strh	r3, [r7, #14]
                                    pDataParams->pPal1443p3bDataParams,
                                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U].aPupi
                                    );

                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab76:	4618      	mov	r0, r3
 800ab78:	f00a f9d0 	bl	8014f1c <phpalI14443p3b_Sw_HaltB>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	81fb      	strh	r3, [r7, #14]
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b12      	cmp	r3, #18
 800ab86:	d101      	bne.n	800ab8c <phacDiscLoop_Sw_Int_CollisionResolutionB+0x1e6>
 800ab88:	89fb      	ldrh	r3, [r7, #14]
 800ab8a:	e105      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 12 */
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ab92:	461a      	mov	r2, r3
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	33c8      	adds	r3, #200	@ 0xc8
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	4413      	add	r3, r2
 800aba2:	1c5a      	adds	r2, r3, #1
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB[1],
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800abaa:	4619      	mov	r1, r3
 800abac:	460b      	mov	r3, r1
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	440b      	add	r3, r1
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	33c9      	adds	r3, #201	@ 0xc9
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	440b      	add	r3, r1
 800abba:	3305      	adds	r3, #5
                    (void)memcpy(pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aPupi,
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6013      	str	r3, [r2, #0]
                        PHAC_DISCLOOP_I3P3B_PUPI_LENGTH);

                    /* Symbol 11 */
                    pDataParams->sTypeBTargetInfo.bTotalTagsFound++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800abc6:	3301      	adds	r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
                    bCurrentDeviceCount++;
 800abd0:	7b3b      	ldrb	r3, [r7, #12]
 800abd2:	3301      	adds	r3, #1
 800abd4:	733b      	strb	r3, [r7, #12]

                    /* Symbol 13 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7adb      	ldrb	r3, [r3, #11]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d30e      	bcc.n	800ac02 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x25c>
                    {
                        pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                        return PH_ERR_SUCCESS;
 800abf0:	2300      	movs	r3, #0
 800abf2:	e0d1      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                }
                else
                {
                    /* Symbol 8 CollisionPend: 1*/
                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_B;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7f9b      	ldrb	r3, [r3, #30]
 800abf8:	f043 0302 	orr.w	r3, r3, #2
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	779a      	strb	r2, [r3, #30]
                }
            }

            /* Symbol 14 */
            bCurrentSlotNum++;
 800ac02:	7b7b      	ldrb	r3, [r7, #13]
 800ac04:	3301      	adds	r3, #1
 800ac06:	737b      	strb	r3, [r7, #13]

            /* Symbol 15 */
            if(bCurrentSlotNum < ((uint8_t)1U  << bNumOfSlots))
 800ac08:	7b7a      	ldrb	r2, [r7, #13]
 800ac0a:	7abb      	ldrb	r3, [r7, #10]
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac12:	429a      	cmp	r2, r3
 800ac14:	da28      	bge.n	800ac68 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2c2>
            {
                /* Symbol 25 */
                PH_CHECK_ABORT_FCT(status, phpalI14443p3b_SlotMarker(
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ac1a:	7b7b      	ldrb	r3, [r7, #13]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	b2d9      	uxtb	r1, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ac26:	461a      	mov	r2, r3
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	33c8      	adds	r3, #200	@ 0xc8
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	4413      	add	r3, r2
 800ac36:	1d5c      	adds	r4, r3, #5
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	33d8      	adds	r3, #216	@ 0xd8
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3302      	adds	r3, #2
 800ac50:	4622      	mov	r2, r4
 800ac52:	f00a f923 	bl	8014e9c <phpalI14443p3b_Sw_SlotMarker>
 800ac56:	4603      	mov	r3, r0
 800ac58:	81fb      	strh	r3, [r7, #14]
 800ac5a:	89fb      	ldrh	r3, [r7, #14]
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b12      	cmp	r3, #18
 800ac60:	f040 8083 	bne.w	800ad6a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800ac64:	89fb      	ldrh	r3, [r7, #14]
 800ac66:	e097      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                    &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
            }
            else
            {
                bLastSlotReached = 1;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	72fb      	strb	r3, [r7, #11]
                /* Symbol 16 */
                if (0U != (pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_B))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7f9b      	ldrb	r3, [r3, #30]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d068      	beq.n	800ad4a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3a4>
                {
                    /* Symbol 17 */
                    if (pDataParams->sTypeBTargetInfo.bTotalTagsFound > 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00e      	beq.n	800aca0 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x2fa>
                    {
                        /* Symbol 20 */
                        if (pDataParams->sTypeBTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[1])
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7adb      	ldrb	r3, [r3, #11]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d31d      	bcc.n	800accc <phacDiscLoop_Sw_Int_CollisionResolutionB+0x326>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            return PH_ERR_SUCCESS;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e07b      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }
                    }
                    else
                    {
                        /* Symbol 18 */
                        if (bNumOfSlots == PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800aca0:	7abb      	ldrb	r3, [r7, #10]
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d10f      	bne.n	800acc6 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x320>
                        {
                            pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x31c>
                            {
                                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800acbc:	f244 0385 	movw	r3, #16517	@ 0x4085
 800acc0:	e06a      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                            }

                            return PH_ERR_SUCCESS;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e068      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        }

                        /* Symbol 19 */
                        bNumOfSlots++;
 800acc6:	7abb      	ldrb	r3, [r7, #10]
 800acc8:	3301      	adds	r3, #1
 800acca:	72bb      	strb	r3, [r7, #10]
                    }

                    /* Symbol 21 */
                    if(bCurrentDeviceCount > 0U)
 800accc:	7b3b      	ldrb	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00c      	beq.n	800acec <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
                    {
                        /* Symbol 22 */
                        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_HaltB(pDataParams->pPal1443p3bDataParams));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd6:	4618      	mov	r0, r3
 800acd8:	f00a f920 	bl	8014f1c <phpalI14443p3b_Sw_HaltB>
 800acdc:	4603      	mov	r3, r0
 800acde:	81fb      	strh	r3, [r7, #14]
 800ace0:	89fb      	ldrh	r3, [r7, #14]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b12      	cmp	r3, #18
 800ace6:	d101      	bne.n	800acec <phacDiscLoop_Sw_Int_CollisionResolutionB+0x346>
 800ace8:	89fb      	ldrh	r3, [r7, #14]
 800acea:	e055      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }

                    /* Symbol 23 */
                    PH_CHECK_ABORT_FCT(status, phpalI14443p3b_RequestB(
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 40c1 	ldrb.w	r4, [r3, #193]	@ 0xc1
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 50c2 	ldrb.w	r5, [r3, #194]	@ 0xc2
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ad02:	461a      	mov	r2, r3
 800ad04:	4613      	mov	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	33c8      	adds	r3, #200	@ 0xc8
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	1d5a      	adds	r2, r3, #5
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	33d8      	adds	r3, #216	@ 0xd8
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	440b      	add	r3, r1
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	7ab9      	ldrb	r1, [r7, #10]
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	9200      	str	r2, [sp, #0]
 800ad32:	462b      	mov	r3, r5
 800ad34:	4622      	mov	r2, r4
 800ad36:	f00a f873 	bl	8014e20 <phpalI14443p3b_Sw_RequestB>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	81fb      	strh	r3, [r7, #14]
 800ad3e:	89fb      	ldrh	r3, [r7, #14]
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b12      	cmp	r3, #18
 800ad44:	d111      	bne.n	800ad6a <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c4>
 800ad46:	89fb      	ldrh	r3, [r7, #14]
 800ad48:	e026      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].aAtqB,
                        &pDataParams->sTypeBTargetInfo.aTypeB_I3P3[pDataParams->sTypeBTargetInfo.bTotalTagsFound].bAtqBLength));
                }
                else
                {
                    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d102      	bne.n	800ad66 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3c0>
                    {
                        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800ad60:	f244 0385 	movw	r3, #16517	@ 0x4085
 800ad64:	e018      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
                    }
                    return PH_ERR_SUCCESS;
 800ad66:	2300      	movs	r3, #0
 800ad68:	e016      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
        while(0U == bLastSlotReached)
 800ad6a:	7afb      	ldrb	r3, [r7, #11]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f43f aee3 	beq.w	800ab38 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x192>
    while(bNumOfSlots <= PHAC_DISCLOOP_TYPEB_MAX_SLOT_NUM)
 800ad72:	7abb      	ldrb	r3, [r7, #10]
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	f67f aecd 	bls.w	800ab14 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x16e>
                }
            }
        } /* while(!bLastSlotReached) */
    }

    pDataParams->bNumOfCards = pDataParams->sTypeBTargetInfo.bTotalTagsFound;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    if(pDataParams->sTypeBTargetInfo.bTotalTagsFound == 0U)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f0>
    {
        return (PHAC_DISCLOOP_NO_DEVICE_RESOLVED | PH_COMP_AC_DISCLOOP);
 800ad90:	f244 0385 	movw	r3, #16517	@ 0x4085
 800ad94:	e000      	b.n	800ad98 <phacDiscLoop_Sw_Int_CollisionResolutionB+0x3f2>
    }

    return PH_ERR_SUCCESS;
 800ad96:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bdb0      	pop	{r4, r5, r7, pc}

0800ada0 <phacDiscLoop_Sw_Int_ActivateB>:

phStatus_t phacDiscLoop_Sw_Int_ActivateB(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t bTypeBTagIdx
                                         )
{
 800ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada2:	b08f      	sub	sp, #60	@ 0x3c
 800ada4:	af04      	add	r7, sp, #16
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800adac:	2300      	movs	r3, #0
 800adae:	847b      	strh	r3, [r7, #34]	@ 0x22
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    /* Only deviation form Device Activation Activity is
     * Device sleep state is not been check and always send WakeUpB Command
     */
    if (bTypeBTagIdx >= pDataParams->sTypeBTargetInfo.bTotalTagsFound)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800adb6:	78fa      	ldrb	r2, [r7, #3]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d302      	bcc.n	800adc2 <phacDiscLoop_Sw_Int_ActivateB+0x22>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800adbc:	f244 0321 	movw	r3, #16417	@ 0x4021
 800adc0:	e1ba      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    /* Send WUPB for tags in sleep state (except the last detected tag all are
     * in sleep state) */
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800adc2:	78fa      	ldrb	r2, [r7, #3]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800adca:	3b01      	subs	r3, #1
 800adcc:	429a      	cmp	r2, r3
 800adce:	db0a      	blt.n	800ade6 <phacDiscLoop_Sw_Int_ActivateB+0x46>
                (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep == 1U)
 800add0:	78fa      	ldrb	r2, [r7, #3]
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	33dc      	adds	r3, #220	@ 0xdc
 800ade0:	781b      	ldrb	r3, [r3, #0]
    if ( (bTypeBTagIdx < (pDataParams->sTypeBTargetInfo.bTotalTagsFound - (uint8_t)1U) ) ||
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d119      	bne.n	800ae1a <phacDiscLoop_Sw_Int_ActivateB+0x7a>
                )
    {
        PH_CHECK_ABORT_FCT(status, phpalI14443p3b_WakeUpB(
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 10c2 	ldrb.w	r1, [r3, #194]	@ 0xc2
 800adf6:	f107 0320 	add.w	r3, r7, #32
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	f107 0310 	add.w	r3, r7, #16
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	460b      	mov	r3, r1
 800ae04:	2100      	movs	r1, #0
 800ae06:	f00a f82a 	bl	8014e5e <phpalI14443p3b_Sw_WakeUpB>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ae0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b12      	cmp	r3, #18
 800ae14:	d101      	bne.n	800ae1a <phacDiscLoop_Sw_Int_ActivateB+0x7a>
 800ae16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae18:	e18e      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>

#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS
    /* AttriB: activate PICC */

    /* Enable Emd check */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_ON));
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1e:	2201      	movs	r2, #1
 800ae20:	215e      	movs	r1, #94	@ 0x5e
 800ae22:	4618      	mov	r0, r3
 800ae24:	f003 fb58 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ae2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <phacDiscLoop_Sw_Int_ActivateB+0x96>
 800ae32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae34:	e180      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_OFF;
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	440b      	add	r3, r1
 800ae44:	33db      	adds	r3, #219	@ 0xdb
 800ae46:	2200      	movs	r2, #0
 800ae48:	701a      	strb	r2, [r3, #0]
    if (0u != ((pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[PHAC_DISCLOOP_TYPEB_PROTOCOL_TYPE_OFFSET] & PHAC_DISCLOOP_TYPEB_MASK_PROTOCOL_TYPE)))
 800ae4a:	78fa      	ldrb	r2, [r7, #3]
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	440b      	add	r3, r1
 800ae58:	33d7      	adds	r3, #215	@ 0xd7
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d009      	beq.n	800ae78 <phacDiscLoop_Sw_Int_ActivateB+0xd8>
    {
        pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B = PH_ON;
 800ae64:	78fa      	ldrb	r2, [r7, #3]
 800ae66:	6879      	ldr	r1, [r7, #4]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	440b      	add	r3, r1
 800ae72:	33db      	adds	r3, #219	@ 0xdb
 800ae74:	2201      	movs	r2, #1
 800ae76:	701a      	strb	r2, [r3, #0]
    }

    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d004      	beq.n	800ae8c <phacDiscLoop_Sw_Int_ActivateB+0xec>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d10c      	bne.n	800aea6 <phacDiscLoop_Sw_Int_ActivateB+0x106>
        (pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSupportType4B == PH_OFF))
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	33db      	adds	r3, #219	@ 0xdb
 800ae9c:	781b      	ldrb	r3, [r3, #0]
    if (((pDataParams->bOpeMode == RD_LIB_MODE_ISO) || (pDataParams->bOpeMode == RD_LIB_MODE_NFC)) &&
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <phacDiscLoop_Sw_Int_ActivateB+0x106>
    {
        return PH_ERR_SUCCESS;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e148      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>
    }

    bBitRateCapability = pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].aAtqB[9U];
 800aea6:	78fa      	ldrb	r2, [r7, #3]
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	33d6      	adds	r3, #214	@ 0xd6
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bDsi = pDataParams->sTypeBTargetInfo.bDsi;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800aec2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bDri = pDataParams->sTypeBTargetInfo.bDri;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800aecc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    /* Check user parameter change request versus Card bit rate capabilities and update DR and DS if required. */
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800aed0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d104      	bne.n	800aee2 <phacDiscLoop_Sw_Int_ActivateB+0x142>
 800aed8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 8081 	beq.w	800afe4 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        ((bBitRateCapability & 0x08U) == 0x00))
 800aee2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aee6:	f003 0308 	and.w	r3, r3, #8
    if (((bDsi != PHPAL_I14443P3B_DATARATE_106) || (bDri != PHPAL_I14443P3B_DATARATE_106)) &&
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d17a      	bne.n	800afe4 <phacDiscLoop_Sw_Int_ActivateB+0x244>
    {
        if (bBitRateCapability & 0x40U)
 800aeee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <phacDiscLoop_Sw_Int_ActivateB+0x162>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_848;
 800aefa:	2303      	movs	r3, #3
 800aefc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af00:	e016      	b.n	800af30 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x20U)
 800af02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af06:	f003 0320 	and.w	r3, r3, #32
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <phacDiscLoop_Sw_Int_ActivateB+0x176>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_424;
 800af0e:	2302      	movs	r3, #2
 800af10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af14:	e00c      	b.n	800af30 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else if (bBitRateCapability & 0x10U)
 800af16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af1a:	f003 0310 	and.w	r3, r3, #16
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <phacDiscLoop_Sw_Int_ActivateB+0x18a>
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_212;
 800af22:	2301      	movs	r3, #1
 800af24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af28:	e002      	b.n	800af30 <phacDiscLoop_Sw_Int_ActivateB+0x190>
        }
        else
        {
            bAtqb_Dsi = PHPAL_I14443P3B_DATARATE_106;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (bBitRateCapability & 0x04U)
 800af30:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <phacDiscLoop_Sw_Int_ActivateB+0x1a4>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_848;
 800af3c:	2303      	movs	r3, #3
 800af3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800af42:	e016      	b.n	800af72 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x02U)
 800af44:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <phacDiscLoop_Sw_Int_ActivateB+0x1b8>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_424;
 800af50:	2302      	movs	r3, #2
 800af52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800af56:	e00c      	b.n	800af72 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else if (bBitRateCapability & 0x01U)
 800af58:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <phacDiscLoop_Sw_Int_ActivateB+0x1cc>
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_212;
 800af64:	2301      	movs	r3, #1
 800af66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800af6a:	e002      	b.n	800af72 <phacDiscLoop_Sw_Int_ActivateB+0x1d2>
        }
        else
        {
            bAtqb_Dri = PHPAL_I14443P3B_DATARATE_106;
 800af6c:	2300      	movs	r3, #0
 800af6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        if ((bDsi != bAtqb_Dsi) && (bDsi > bAtqb_Dsi))
 800af72:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800af76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d009      	beq.n	800af92 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
 800af7e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800af82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af86:	429a      	cmp	r2, r3
 800af88:	d903      	bls.n	800af92 <phacDiscLoop_Sw_Int_ActivateB+0x1f2>
        {
            bDsi = bAtqb_Dsi;
 800af8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af8e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }

        if ((bDri != bAtqb_Dri) && (bDri > bAtqb_Dri))
 800af92:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800af96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d009      	beq.n	800afb2 <phacDiscLoop_Sw_Int_ActivateB+0x212>
 800af9e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800afa2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d903      	bls.n	800afb2 <phacDiscLoop_Sw_Int_ActivateB+0x212>
        {
            bDri = bAtqb_Dri;
 800afaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800afae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        if (bBitRateCapability & 0x80U)
 800afb2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	da14      	bge.n	800afe4 <phacDiscLoop_Sw_Int_ActivateB+0x244>
        {
            /* Only same bit rate allowed in both directions. */
            if (bDsi != bDri)
 800afba:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800afbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d00e      	beq.n	800afe4 <phacDiscLoop_Sw_Int_ActivateB+0x244>
            {
                (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 800afc6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800afca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afce:	429a      	cmp	r2, r3
 800afd0:	d204      	bcs.n	800afdc <phacDiscLoop_Sw_Int_ActivateB+0x23c>
 800afd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800afd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800afda:	e003      	b.n	800afe4 <phacDiscLoop_Sw_Int_ActivateB+0x244>
 800afdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afe0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            }
        }
    }

    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_Attrib(
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800afe8:	78fa      	ldrb	r2, [r7, #3]
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	33c8      	adds	r3, #200	@ 0xc8
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	4413      	add	r3, r2
 800aff8:	1d5c      	adds	r4, r3, #5
 800affa:	78fa      	ldrb	r2, [r7, #3]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	33da      	adds	r3, #218	@ 0xda
 800b00a:	7819      	ldrb	r1, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 50c4 	ldrb.w	r5, [r3, #196]	@ 0xc4
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	32dd      	adds	r2, #221	@ 0xdd
 800b01c:	9203      	str	r2, [sp, #12]
 800b01e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800b022:	9202      	str	r2, [sp, #8]
 800b024:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b028:	9201      	str	r2, [sp, #4]
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	462b      	mov	r3, r5
 800b02e:	460a      	mov	r2, r1
 800b030:	4621      	mov	r1, r4
 800b032:	f009 ffb9 	bl	8014fa8 <phpalI14443p3b_Sw_Attrib>
 800b036:	4603      	mov	r3, r0
 800b038:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b03a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <phacDiscLoop_Sw_Int_ActivateB+0x2a4>
 800b040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b042:	e079      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>
        pDataParams->sTypeBTargetInfo.bCid,
        bDri,
        bDsi,
        &pDataParams->sTypeBTargetInfo.sTypeB_I3P4.bMbli));

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d027      	beq.n	800b09e <phacDiscLoop_Sw_Int_ActivateB+0x2fe>
    {
        /* Update Dri and Dsi parameters with currently applied values. */
        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b052:	f107 0208 	add.w	r2, r7, #8
 800b056:	2104      	movs	r1, #4
 800b058:	4618      	mov	r0, r3
 800b05a:	f009 fea3 	bl	8014da4 <phpalI14443p3b_Sw_GetConfig>
 800b05e:	4603      	mov	r3, r0
 800b060:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b062:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <phacDiscLoop_Sw_Int_ActivateB+0x2cc>
 800b068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b06a:	e065      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DRI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDri = (uint8_t)wDataRate;
 800b06c:	893b      	ldrh	r3, [r7, #8]
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7

        PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetConfig(
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07a:	f107 0208 	add.w	r2, r7, #8
 800b07e:	2105      	movs	r1, #5
 800b080:	4618      	mov	r0, r3
 800b082:	f009 fe8f 	bl	8014da4 <phpalI14443p3b_Sw_GetConfig>
 800b086:	4603      	mov	r3, r0
 800b088:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b08a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <phacDiscLoop_Sw_Int_ActivateB+0x2f4>
 800b090:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b092:	e051      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>
            pDataParams->pPal1443p3bDataParams,
            PHPAL_I14443P3B_CONFIG_DSI,
            &wDataRate));
        pDataParams->sTypeBTargetInfo.bDsi = (uint8_t)wDataRate;
 800b094:	893b      	ldrh	r3, [r7, #8]
 800b096:	b2da      	uxtb	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    }

    /* Retrieve 14443-3b protocol parameter */
    PH_CHECK_SUCCESS_FCT(status, phpalI14443p3b_GetProtocolParams(
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b0a2:	f107 040d 	add.w	r4, r7, #13
 800b0a6:	f107 020e 	add.w	r2, r7, #14
 800b0aa:	f107 010f 	add.w	r1, r7, #15
 800b0ae:	f107 030a 	add.w	r3, r7, #10
 800b0b2:	9302      	str	r3, [sp, #8]
 800b0b4:	f107 030b 	add.w	r3, r7, #11
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	f107 030c 	add.w	r3, r7, #12
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	f00a fa2f 	bl	8015524 <phpalI14443p3b_Sw_GetProtocolParams>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b0ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <phacDiscLoop_Sw_Int_ActivateB+0x334>
 800b0d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0d2:	e031      	b.n	800b138 <phacDiscLoop_Sw_Int_ActivateB+0x398>
        &bFwi,
        &bFsdi,
        &bFsci));

    /* EMVCo v3.1: Limit the FSCI value to be used based on the RdLib execution environment. */
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d109      	bne.n	800b0f2 <phacDiscLoop_Sw_Int_ActivateB+0x352>
    {
        if (bFsci > pDataParams->bFsciMax)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b0e4:	7abb      	ldrb	r3, [r7, #10]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d203      	bcs.n	800b0f2 <phacDiscLoop_Sw_Int_ActivateB+0x352>
        {
            bFsci = pDataParams->bFsciMax;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b0f0:	72bb      	strb	r3, [r7, #10]
        }
    }

    /* Set 14443-4 protocol parameter */
    status = phpalI14443p4_SetProtocol(
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800b0f6:	7bfd      	ldrb	r5, [r7, #15]
 800b0f8:	7bbe      	ldrb	r6, [r7, #14]
 800b0fa:	f897 c00d 	ldrb.w	ip, [r7, #13]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 800b104:	7b3a      	ldrb	r2, [r7, #12]
 800b106:	7af9      	ldrb	r1, [r7, #11]
 800b108:	7ab8      	ldrb	r0, [r7, #10]
 800b10a:	9003      	str	r0, [sp, #12]
 800b10c:	9102      	str	r1, [sp, #8]
 800b10e:	9201      	str	r2, [sp, #4]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	4663      	mov	r3, ip
 800b114:	4632      	mov	r2, r6
 800b116:	4629      	mov	r1, r5
 800b118:	4620      	mov	r0, r4
 800b11a:	f00a fc36 	bl	801598a <phpalI14443p4_Sw_SetProtocol>
 800b11e:	4603      	mov	r3, r0
 800b120:	847b      	strh	r3, [r7, #34]	@ 0x22
        bFsdi,
        bFsci);

#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_I3P4B_TAGS */

    pDataParams->sTypeBTargetInfo.aTypeB_I3P3[bTypeBTagIdx].bSleep = 0U;
 800b122:	78fa      	ldrb	r2, [r7, #3]
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	440b      	add	r3, r1
 800b130:	33dc      	adds	r3, #220	@ 0xdc
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
    return status;
 800b136:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEB_TAGS */
}
 800b138:	4618      	mov	r0, r3
 800b13a:	372c      	adds	r7, #44	@ 0x2c
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b140 <phacDiscLoop_Sw_Int_CheckForDuplication>:
static phStatus_t phacDiscLoop_Sw_Int_CheckForDuplication(
                                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                          uint8_t *pID,
                                                          uint8_t *pIsDuplicate
                                                          )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
    uint8_t PH_MEMLOC_COUNT bIndex = 0x00;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75fb      	strb	r3, [r7, #23]

    *pIsDuplicate = PH_OFF;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]

    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]
 800b15a:	e019      	b.n	800b190 <phacDiscLoop_Sw_Int_CheckForDuplication+0x50>
    {   /* Skip Identical Entry */
        if((memcmp(pID, pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH + PHAC_DISCLOOP_FELICA_PMM_LENGTH )) == 0)
 800b15c:	7dfa      	ldrb	r2, [r7, #23]
 800b15e:	4613      	mov	r3, r2
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	4413      	add	r3, r2
 800b164:	00da      	lsls	r2, r3, #3
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4413      	add	r3, r2
 800b170:	3304      	adds	r3, #4
 800b172:	2210      	movs	r2, #16
 800b174:	4619      	mov	r1, r3
 800b176:	68b8      	ldr	r0, [r7, #8]
 800b178:	f013 fec6 	bl	801ef08 <memcmp>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d103      	bne.n	800b18a <phacDiscLoop_Sw_Int_CheckForDuplication+0x4a>
        {
            *pIsDuplicate = PH_ON;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	701a      	strb	r2, [r3, #0]
            /* Update baud rate if device is detected with higher baud rate */
            break;
 800b188:	e008      	b.n	800b19c <phacDiscLoop_Sw_Int_CheckForDuplication+0x5c>
    for(bIndex = 0; bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound; bIndex++)
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	3301      	adds	r3, #1
 800b18e:	75fb      	strb	r3, [r7, #23]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b196:	7dfa      	ldrb	r2, [r7, #23]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d3df      	bcc.n	800b15c <phacDiscLoop_Sw_Int_CheckForDuplication+0x1c>
        }
    }
    return PH_ERR_SUCCESS;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <phacDiscLoop_Sw_Int_UpdateSensFResp>:
                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t *pID,
                                                      uint8_t bIdLen,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b086      	sub	sp, #24
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	71fb      	strb	r3, [r7, #7]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	80bb      	strh	r3, [r7, #4]
    phStatus_t PH_MEMLOC_REM   wStatus = PH_ERR_SUCCESS;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	82bb      	strh	r3, [r7, #20]
    uint8_t    PH_MEMLOC_REM   bIsDuplicate;
    uint8_t    PH_MEMLOC_REM   bTotalTagsFound = 0x00;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75fb      	strb	r3, [r7, #23]
    uint16_t   PH_MEMLOC_REM   wRequestCode;

    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_CheckForDuplication(pDataParams, &pID[0x00], &bIsDuplicate));
 800b1c4:	f107 0313 	add.w	r3, r7, #19
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7ff ffb7 	bl	800b140 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	82bb      	strh	r3, [r7, #20]
 800b1d6:	8abb      	ldrh	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x3a>
 800b1dc:	8abb      	ldrh	r3, [r7, #20]
 800b1de:	e086      	b.n	800b2ee <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>
    if(0U == (bIsDuplicate))
 800b1e0:	7cfb      	ldrb	r3, [r7, #19]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d179      	bne.n	800b2da <phacDiscLoop_Sw_Int_UpdateSensFResp+0x134>
    {
        /* get Request code is enable */
        PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, &wRequestCode));
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ea:	f107 0210 	add.w	r2, r7, #16
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f008 fef2 	bl	8013fda <phpalFelica_Sw_GetConfig>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	82bb      	strh	r3, [r7, #20]
 800b1fa:	8abb      	ldrh	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <phacDiscLoop_Sw_Int_UpdateSensFResp+0x5e>
 800b200:	8abb      	ldrh	r3, [r7, #20]
 800b202:	e074      	b.n	800b2ee <phacDiscLoop_Sw_Int_UpdateSensFResp+0x148>

        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bLength = (uint8_t) bIdLen;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b20a:	461a      	mov	r2, r3
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	441a      	add	r2, r3
 800b210:	68f9      	ldr	r1, [r7, #12]
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	00da      	lsls	r2, r3, #3
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	188b      	adds	r3, r1, r2
 800b21e:	33a8      	adds	r3, #168	@ 0xa8
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	701a      	strb	r2, [r3, #0]

        /* Copy RD(Request Data) if received */
        if((wRequestCode != PH_OFF) && (bIdLen > (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH)))
 800b224:	8a3b      	ldrh	r3, [r7, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d018      	beq.n	800b25c <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
 800b22a:	79fb      	ldrb	r3, [r7, #7]
 800b22c:	2b10      	cmp	r3, #16
 800b22e:	d915      	bls.n	800b25c <phacDiscLoop_Sw_Int_UpdateSensFResp+0xb6>
        {
            (void)memcpy((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), &pID[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH], PHPAL_FELICA_RD_LENGTH);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b236:	461a      	mov	r2, r3
 800b238:	7dfb      	ldrb	r3, [r7, #23]
 800b23a:	441a      	add	r2, r3
 800b23c:	4613      	mov	r3, r2
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	4413      	add	r3, r2
 800b242:	00da      	lsls	r2, r3, #3
 800b244:	1ad2      	subs	r2, r2, r3
 800b246:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4413      	add	r3, r2
 800b24e:	3304      	adds	r3, #4
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	3210      	adds	r2, #16
 800b254:	8812      	ldrh	r2, [r2, #0]
 800b256:	b292      	uxth	r2, r2
 800b258:	801a      	strh	r2, [r3, #0]
 800b25a:	e014      	b.n	800b286 <phacDiscLoop_Sw_Int_UpdateSensFResp+0xe0>
        }
        else
        {
            (void)memset((uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aRD), 0x00, PHPAL_FELICA_RD_LENGTH);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b262:	461a      	mov	r2, r3
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	441a      	add	r2, r3
 800b268:	4613      	mov	r3, r2
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	4413      	add	r3, r2
 800b26e:	00da      	lsls	r2, r3, #3
 800b270:	1ad2      	subs	r2, r2, r3
 800b272:	f102 03a0 	add.w	r3, r2, #160	@ 0xa0
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	3304      	adds	r3, #4
 800b27c:	2202      	movs	r2, #2
 800b27e:	2100      	movs	r1, #0
 800b280:	4618      	mov	r0, r3
 800b282:	f013 fe51 	bl	801ef28 <memset>
        }

        /* Copy IDMmPMm */
        (void)memcpy( (uint8_t *)&(pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].aIDmPMm), pID, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b28c:	461a      	mov	r2, r3
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	441a      	add	r2, r3
 800b292:	4613      	mov	r3, r2
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	4413      	add	r3, r2
 800b298:	00da      	lsls	r2, r3, #3
 800b29a:	1ad2      	subs	r2, r2, r3
 800b29c:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	2210      	movs	r2, #16
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f013 febb 	bl	801f026 <memcpy>
        pDataParams->sTypeFTargetInfo.aTypeFTag[pDataParams->sTypeFTargetInfo.bTotalTagsFound + bTotalTagsFound].bBaud = (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	441a      	add	r2, r3
 800b2bc:	88bb      	ldrh	r3, [r7, #4]
 800b2be:	b2d8      	uxtb	r0, r3
 800b2c0:	68f9      	ldr	r1, [r7, #12]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	00da      	lsls	r2, r3, #3
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	188b      	adds	r3, r1, r2
 800b2ce:	33a6      	adds	r3, #166	@ 0xa6
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	701a      	strb	r2, [r3, #0]

        /* Increment Tag count */
        bTotalTagsFound++;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	75fb      	strb	r3, [r7, #23]
    }

    pDataParams->sTypeFTargetInfo.bTotalTagsFound += bTotalTagsFound;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return PH_ERR_SUCCESS;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <phacDiscLoop_Sw_Int_SendSensFReq>:

                                                      phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                      uint8_t bNumTimeSlots,
                                                      uint16_t wCurrentBaudBitPos
                                                      )
{
 800b2f6:	b590      	push	{r4, r7, lr}
 800b2f8:	b08b      	sub	sp, #44	@ 0x2c
 800b2fa:	af02      	add	r7, sp, #8
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	460b      	mov	r3, r1
 800b300:	70fb      	strb	r3, [r7, #3]
 800b302:	4613      	mov	r3, r2
 800b304:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800b306:	237f      	movs	r3, #127	@ 0x7f
 800b308:	83fb      	strh	r3, [r7, #30]
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800b30a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b30e:	83bb      	strh	r3, [r7, #28]
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint16_t   PH_MEMLOC_REM wTemp = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	837b      	strh	r3, [r7, #26]
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
    uint8_t    PH_MEMLOC_REM bIdLen;
    phStatus_t PH_MEMLOC_REM wFrameStatus;

    /* send ReqC command */
    wStatus = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, bNumTimeSlots, &pRxBuff, &wTemp);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b320:	f107 0410 	add.w	r4, r7, #16
 800b324:	78fa      	ldrb	r2, [r7, #3]
 800b326:	f107 011c 	add.w	r1, r7, #28
 800b32a:	f107 031a 	add.w	r3, r7, #26
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	4623      	mov	r3, r4
 800b332:	f008 fc67 	bl	8013c04 <phpalFelica_Sw_ReqC>
 800b336:	4603      	mov	r3, r0
 800b338:	83fb      	strh	r3, [r7, #30]

    if((wStatus & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800b33a:	8bfb      	ldrh	r3, [r7, #30]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d164      	bne.n	800b40c <phacDiscLoop_Sw_Int_SendSensFReq+0x116>
    {
        if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 800b342:	78fb      	ldrb	r3, [r7, #3]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d048      	beq.n	800b3da <phacDiscLoop_Sw_Int_SendSensFReq+0xe4>
        {
            /* get total number of response frame */
            PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wTemp));
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34c:	f107 021a 	add.w	r2, r7, #26
 800b350:	2101      	movs	r1, #1
 800b352:	4618      	mov	r0, r3
 800b354:	f008 fe41 	bl	8013fda <phpalFelica_Sw_GetConfig>
 800b358:	4603      	mov	r3, r0
 800b35a:	83fb      	strh	r3, [r7, #30]
 800b35c:	8bfb      	ldrh	r3, [r7, #30]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d037      	beq.n	800b3d2 <phacDiscLoop_Sw_Int_SendSensFReq+0xdc>
 800b362:	8bfb      	ldrh	r3, [r7, #30]
 800b364:	e053      	b.n	800b40e <phacDiscLoop_Sw_Int_SendSensFReq+0x118>

            while(0U != wTemp)
            {
                bIdLen = 0x00;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
                wFrameStatus = 0x00;
 800b36a:	2300      	movs	r3, #0
 800b36c:	81bb      	strh	r3, [r7, #12]
                /* retrieve IDmPMm one by one for all frames */
                PH_CHECK_SUCCESS_FCT(wStatus, phpalFelica_GetFrameInfo(
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b372:	8b7b      	ldrh	r3, [r7, #26]
 800b374:	b2d9      	uxtb	r1, r3
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	f107 040c 	add.w	r4, r7, #12
 800b37c:	f107 030f 	add.w	r3, r7, #15
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	4623      	mov	r3, r4
 800b38a:	f008 fd51 	bl	8013e30 <phpalFelica_Sw_GetFrameInfo>
 800b38e:	4603      	mov	r3, r0
 800b390:	83fb      	strh	r3, [r7, #30]
 800b392:	8bfb      	ldrh	r3, [r7, #30]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <phacDiscLoop_Sw_Int_SendSensFReq+0xa6>
 800b398:	8bfb      	ldrh	r3, [r7, #30]
 800b39a:	e038      	b.n	800b40e <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                                                    pRxBuff,
                                                    &wFrameStatus,
                                                    &pId,
                                                    &bIdLen));

                if(wFrameStatus == PH_ERR_SUCCESS)
 800b39c:	89bb      	ldrh	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10c      	bne.n	800b3bc <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
                {
                    /* store received IDmPMm */
                    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pId, bIdLen, wCurrentBaudBitPos));
 800b3a2:	6979      	ldr	r1, [r7, #20]
 800b3a4:	7bfa      	ldrb	r2, [r7, #15]
 800b3a6:	883b      	ldrh	r3, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff fefc 	bl	800b1a6 <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	83fb      	strh	r3, [r7, #30]
 800b3b2:	8bfb      	ldrh	r3, [r7, #30]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <phacDiscLoop_Sw_Int_SendSensFReq+0xc6>
 800b3b8:	8bfb      	ldrh	r3, [r7, #30]
 800b3ba:	e028      	b.n	800b40e <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                }
                wTemp--;
 800b3bc:	8b7b      	ldrh	r3, [r7, #26]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	837b      	strh	r3, [r7, #26]

                /* Check for device limit */
                if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	7b1b      	ldrb	r3, [r3, #12]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d211      	bcs.n	800b3f6 <phacDiscLoop_Sw_Int_SendSensFReq+0x100>
            while(0U != wTemp)
 800b3d2:	8b7b      	ldrh	r3, [r7, #26]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1c6      	bne.n	800b366 <phacDiscLoop_Sw_Int_SendSensFReq+0x70>
 800b3d8:	e00e      	b.n	800b3f8 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
            }
        }
        else
        {
            /* store received IDmPMm */
            PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_Sw_Int_UpdateSensFResp(pDataParams, pRxBuff, (uint8_t)wTemp, wCurrentBaudBitPos));
 800b3da:	6939      	ldr	r1, [r7, #16]
 800b3dc:	8b7b      	ldrh	r3, [r7, #26]
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	883b      	ldrh	r3, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fedf 	bl	800b1a6 <phacDiscLoop_Sw_Int_UpdateSensFResp>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	83fb      	strh	r3, [r7, #30]
 800b3ec:	8bfb      	ldrh	r3, [r7, #30]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <phacDiscLoop_Sw_Int_SendSensFReq+0x102>
 800b3f2:	8bfb      	ldrh	r3, [r7, #30]
 800b3f4:	e00b      	b.n	800b40e <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
                    break;
 800b3f6:	bf00      	nop
        }

        /*Response is success but no device found*/
        if(pDataParams->sTypeFTargetInfo.bTotalTagsFound == 0U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <phacDiscLoop_Sw_Int_SendSensFReq+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800b402:	f244 037f 	movw	r3, #16511	@ 0x407f
 800b406:	e002      	b.n	800b40e <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
        else
        {
            return PH_ERR_SUCCESS;
 800b408:	2300      	movs	r3, #0
 800b40a:	e000      	b.n	800b40e <phacDiscLoop_Sw_Int_SendSensFReq+0x118>
        }
    }

    return wStatus;
 800b40c:	8bfb      	ldrh	r3, [r7, #30]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3724      	adds	r7, #36	@ 0x24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd90      	pop	{r4, r7, pc}

0800b416 <phacDiscLoop_Sw_DetTechTypeF>:
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */

phStatus_t phacDiscLoop_Sw_DetTechTypeF(
                                        phacDiscLoop_Sw_DataParams_t *pDataParams
                                        )
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b084      	sub	sp, #16
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800b41e:	237f      	movs	r3, #127	@ 0x7f
 800b420:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wCurrentBaudBitPos;

    PH_CHECK_SUCCESS_FCT(wStatus,phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, PH_OFF));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b426:	2200      	movs	r2, #0
 800b428:	2100      	movs	r1, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	f008 fd9d 	bl	8013f6a <phpalFelica_Sw_SetConfig>
 800b430:	4603      	mov	r3, r0
 800b432:	81fb      	strh	r3, [r7, #14]
 800b434:	89fb      	ldrh	r3, [r7, #14]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <phacDiscLoop_Sw_DetTechTypeF+0x28>
 800b43a:	89fb      	ldrh	r3, [r7, #14]
 800b43c:	e042      	b.n	800b4c4 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* get current FeliCa baud rate */
    PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800b43e:	f107 030c 	add.w	r3, r7, #12
 800b442:	461a      	mov	r2, r3
 800b444:	2157      	movs	r1, #87	@ 0x57
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7fd f9ea 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 800b44c:	4603      	mov	r3, r0
 800b44e:	81fb      	strh	r3, [r7, #14]
 800b450:	89fb      	ldrh	r3, [r7, #14]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <phacDiscLoop_Sw_DetTechTypeF+0x44>
 800b456:	89fb      	ldrh	r3, [r7, #14]
 800b458:	e034      	b.n	800b4c4 <phacDiscLoop_Sw_DetTechTypeF+0xae>

    /* if any tag has detected, do not reset the tag count */
    if(0U == (pDataParams->bDetectedTechs & (PHAC_DISCLOOP_POS_BIT_MASK_F424 | PHAC_DISCLOOP_POS_BIT_MASK_F212)))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b460:	f003 030c 	and.w	r3, r3, #12
 800b464:	2b00      	cmp	r3, #0
 800b466:	d103      	bne.n	800b470 <phacDiscLoop_Sw_DetTechTypeF+0x5a>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
    }

    /* re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	7f9a      	ldrb	r2, [r3, #30]
 800b474:	89bb      	ldrh	r3, [r7, #12]
 800b476:	b2db      	uxtb	r3, r3
 800b478:	43db      	mvns	r3, r3
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	4013      	ands	r3, r2
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	779a      	strb	r2, [r3, #30]
    wStatus = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_4, wCurrentBaudBitPos);
 800b484:	89bb      	ldrh	r3, [r7, #12]
 800b486:	461a      	mov	r2, r3
 800b488:	2103      	movs	r1, #3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff ff33 	bl	800b2f6 <phacDiscLoop_Sw_Int_SendSensFReq>
 800b490:	4603      	mov	r3, r0
 800b492:	81fb      	strh	r3, [r7, #14]

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(wStatus)))
 800b494:	89fb      	ldrh	r3, [r7, #14]
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fc6f 	bl	8009d7a <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00c      	beq.n	800b4bc <phacDiscLoop_Sw_DetTechTypeF+0xa6>
    {
        if((wStatus & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800b4a2:	89fb      	ldrh	r3, [r7, #14]
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d10a      	bne.n	800b4c0 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        {
            /* set Collision Pending bit */
            pDataParams->bCollPend |= (uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7f9a      	ldrb	r2, [r3, #30]
 800b4ae:	89bb      	ldrh	r3, [r7, #12]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	779a      	strb	r2, [r3, #30]
 800b4ba:	e001      	b.n	800b4c0 <phacDiscLoop_Sw_DetTechTypeF+0xaa>
        }
    }
    else
    {
        return wStatus;
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	e001      	b.n	800b4c4 <phacDiscLoop_Sw_DetTechTypeF+0xae>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800b4c0:	f244 0387 	movw	r3, #16519	@ 0x4087

#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <phacDiscLoop_Sw_Int_CollisionResolutionF>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionF(
                                                    phacDiscLoop_Sw_DataParams_t * pDataParams
                                                    )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM   status;
    uint16_t   PH_MEMLOC_REM   wCurrentBaudBitPos;
    uint8_t    PH_MEMLOC_COUNT bIndex = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]
    uint8_t    PH_MEMLOC_COUNT bCardIndex;

    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_GetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, &wCurrentBaudBitPos));
 800b4d8:	f107 030a 	add.w	r3, r7, #10
 800b4dc:	461a      	mov	r2, r3
 800b4de:	2157      	movs	r1, #87	@ 0x57
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fd f99d 	bl	8008820 <phacDiscLoop_Sw_GetConfig>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	81bb      	strh	r3, [r7, #12]
 800b4ea:	89bb      	ldrh	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x28>
 800b4f0:	89bb      	ldrh	r3, [r7, #12]
 800b4f2:	e0e3      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Collision_Pending = 1 and Device limit  = 0 */
    if((0U != ((pDataParams->bCollPend & wCurrentBaudBitPos))) && ((pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212] == 0x00U)))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7f9b      	ldrb	r3, [r3, #30]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	897b      	ldrh	r3, [r7, #10]
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	7b1b      	ldrb	r3, [r3, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x4c>
    {
        pDataParams->sTypeFTargetInfo.bTotalTagsFound = 0;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800b512:	f244 0385 	movw	r3, #16517	@ 0x4085
 800b516:	e0d1      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800b518:	2300      	movs	r3, #0
 800b51a:	73bb      	strb	r3, [r7, #14]
 800b51c:	e00d      	b.n	800b53a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x6e>
    {
        /* Clear SLEEP_AF State */
        pDataParams->sTypeFTargetInfo.aTypeFTag[bCardIndex].bSleepAFState = 0U;
 800b51e:	7bba      	ldrb	r2, [r7, #14]
 800b520:	6879      	ldr	r1, [r7, #4]
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	00da      	lsls	r2, r3, #3
 800b52a:	1ad2      	subs	r2, r2, r3
 800b52c:	188b      	adds	r3, r1, r2
 800b52e:	33a7      	adds	r3, #167	@ 0xa7
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]
    for(bCardIndex = 0; bCardIndex < PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED; bCardIndex++)
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	3301      	adds	r3, #1
 800b538:	73bb      	strb	r3, [r7, #14]
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0ee      	beq.n	800b51e <phacDiscLoop_Sw_Int_CollisionResolutionF+0x52>
    }

    /* Symbol 1 */
    /* Symbol 2*/
    /* Device limit for F424 and F212 is same */
    if(pDataParams->sTypeFTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_F212])
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	7b1b      	ldrb	r3, [r3, #12]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d324      	bcc.n	800b598 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xcc>
    {
        if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800b54e:	897b      	ldrh	r3, [r7, #10]
 800b550:	2b04      	cmp	r3, #4
 800b552:	d10c      	bne.n	800b56e <phacDiscLoop_Sw_Int_CollisionResolutionF+0xa2>
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b558:	2103      	movs	r1, #3
 800b55a:	4618      	mov	r0, r3
 800b55c:	f002 fa3e 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800b560:	4603      	mov	r3, r0
 800b562:	81bb      	strh	r3, [r7, #12]
 800b564:	89bb      	ldrh	r3, [r7, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00e      	beq.n	800b588 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800b56a:	89bb      	ldrh	r3, [r7, #12]
 800b56c:	e0a6      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                PHHAL_HW_CARDTYPE_FELICA_212));
        }
        else
        {
            /* Configure HW for the TypeF technology */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b572:	210a      	movs	r1, #10
 800b574:	4618      	mov	r0, r3
 800b576:	f002 fa31 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800b57a:	4603      	mov	r3, r0
 800b57c:	81bb      	strh	r3, [r7, #12]
 800b57e:	89bb      	ldrh	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xbc>
 800b584:	89bb      	ldrh	r3, [r7, #12]
 800b586:	e099      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
                pDataParams->pHalDataParams,
                PHHAL_HW_CARDTYPE_FELICA_424));
        }

        /* Symbol 8 */
        pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return PH_ERR_SUCCESS;
 800b594:	2300      	movs	r3, #0
 800b596:	e091      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
    }

    /* Re-set Collision Pending bit */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(wCurrentBaudBitPos & 0xFFU);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	7f9a      	ldrb	r2, [r3, #30]
 800b59c:	897b      	ldrh	r3, [r7, #10]
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	779a      	strb	r2, [r3, #30]

    /* Symbol 3 */
    /* SENSF_REQ with TSN := 0Fh, RC := 00h, SC := FFFFh */
    status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f008 fcd8 	bl	8013f6a <phpalFelica_Sw_SetConfig>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800b5be:	89bb      	ldrh	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <phacDiscLoop_Sw_Int_CollisionResolutionF+0xfc>
 800b5c4:	89bb      	ldrh	r3, [r7, #12]
 800b5c6:	e079      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Apply Guard time.(GTFB) */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8a9b      	ldrh	r3, [r3, #20]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	2135      	movs	r1, #53	@ 0x35
 800b5d4:	f002 ff80 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	81bb      	strh	r3, [r7, #12]
 800b5dc:	89bb      	ldrh	r3, [r7, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x11a>
 800b5e2:	89bb      	ldrh	r3, [r7, #12]
 800b5e4:	e06a      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));

    if (wCurrentBaudBitPos == PHAC_DISCLOOP_CON_BITR_212)
 800b5e6:	897b      	ldrh	r3, [r7, #10]
 800b5e8:	2b04      	cmp	r3, #4
 800b5ea:	d10c      	bne.n	800b606 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x13a>
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f0:	2103      	movs	r1, #3
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f002 f9f2 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	81bb      	strh	r3, [r7, #12]
 800b5fc:	89bb      	ldrh	r3, [r7, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00e      	beq.n	800b620 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800b602:	89bb      	ldrh	r3, [r7, #12]
 800b604:	e05a      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            PHHAL_HW_CARDTYPE_FELICA_212));
    }
    else
    {
        /* Configure HW for the TypeF technology */
        PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60a:	210a      	movs	r1, #10
 800b60c:	4618      	mov	r0, r3
 800b60e:	f002 f9e5 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800b612:	4603      	mov	r3, r0
 800b614:	81bb      	strh	r3, [r7, #12]
 800b616:	89bb      	ldrh	r3, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x154>
 800b61c:	89bb      	ldrh	r3, [r7, #12]
 800b61e:	e04d      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CARDTYPE_FELICA_424));
    }

    status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800b620:	897b      	ldrh	r3, [r7, #10]
 800b622:	461a      	mov	r2, r3
 800b624:	210f      	movs	r1, #15
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fe65 	bl	800b2f6 <phacDiscLoop_Sw_Int_SendSensFReq>
 800b62c:	4603      	mov	r3, r0
 800b62e:	81bb      	strh	r3, [r7, #12]
    PH_CHECK_SUCCESS(status);
 800b630:	89bb      	ldrh	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <phacDiscLoop_Sw_Int_CollisionResolutionF+0x16e>
 800b636:	89bb      	ldrh	r3, [r7, #12]
 800b638:	e040      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

    /* Symbol 5 */
    /* Check for NFC-DEP Protocol presence within all received responses */
    bIndex = 0x00;
 800b63a:	2300      	movs	r3, #0
 800b63c:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800b63e:	e030      	b.n	800b6a2 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d6>
    {
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800b640:	7bfa      	ldrb	r2, [r7, #15]
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	4613      	mov	r3, r2
 800b646:	005b      	lsls	r3, r3, #1
 800b648:	4413      	add	r3, r2
 800b64a:	00da      	lsls	r2, r3, #3
 800b64c:	1ad2      	subs	r2, r2, r3
 800b64e:	188b      	adds	r3, r1, r2
 800b650:	3394      	adds	r3, #148	@ 0x94
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d121      	bne.n	800b69c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
            (pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[1] == 0xFEU))
 800b658:	7bfa      	ldrb	r2, [r7, #15]
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	4613      	mov	r3, r2
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	4413      	add	r3, r2
 800b662:	00da      	lsls	r2, r3, #3
 800b664:	1ad2      	subs	r2, r2, r3
 800b666:	188b      	adds	r3, r1, r2
 800b668:	3395      	adds	r3, #149	@ 0x95
 800b66a:	781b      	ldrb	r3, [r3, #0]
        if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bIndex].aIDmPMm[0] == 0x01U) &&
 800b66c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b66e:	d115      	bne.n	800b69c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1d0>
        {
            /* Symbol 6 */
            /* SENSF_REQ with TSN := 0Fh, RC := 01h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0x01);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b674:	2201      	movs	r2, #1
 800b676:	2100      	movs	r1, #0
 800b678:	4618      	mov	r0, r3
 800b67a:	f008 fc76 	bl	8013f6a <phpalFelica_Sw_SetConfig>
 800b67e:	4603      	mov	r3, r0
 800b680:	81bb      	strh	r3, [r7, #12]
            PH_CHECK_SUCCESS(status);
 800b682:	89bb      	ldrh	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1c0>
 800b688:	89bb      	ldrh	r3, [r7, #12]
 800b68a:	e017      	b.n	800b6bc <phacDiscLoop_Sw_Int_CollisionResolutionF+0x1f0>

            status = phacDiscLoop_Sw_Int_SendSensFReq(pDataParams, PHPAL_FELICA_NUMSLOTS_16, wCurrentBaudBitPos);
 800b68c:	897b      	ldrh	r3, [r7, #10]
 800b68e:	461a      	mov	r2, r3
 800b690:	210f      	movs	r1, #15
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff fe2f 	bl	800b2f6 <phacDiscLoop_Sw_Int_SendSensFReq>
 800b698:	4603      	mov	r3, r0
 800b69a:	81bb      	strh	r3, [r7, #12]
            /* Symbol 7 */
            /* The NFC Forum Device SHALL check for any Valid SENSF_RES Response(s) received during processing of Symbol 4
             * whether an identical entry already exists in GRE_SENSF_RES[], and if not, store the SENSF_RES in GRE_SENSF_RES[]
             */
         }
        bIndex++;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	73fb      	strb	r3, [r7, #15]
    while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b6a8:	7bfa      	ldrb	r2, [r7, #15]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d3c8      	bcc.n	800b640 <phacDiscLoop_Sw_Int_CollisionResolutionF+0x174>
    } /* while(bIndex < pDataParams->sTypeFTargetInfo.bTotalTagsFound) */

    pDataParams->bNumOfCards = pDataParams->sTypeFTargetInfo.bTotalTagsFound;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    return PH_ERR_SUCCESS;
 800b6ba:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <phacDiscLoop_Sw_Int_ActivateF>:

phStatus_t phacDiscLoop_Sw_Int_ActivateF(
                                         phacDiscLoop_Sw_DataParams_t * pDataParams,
                                         uint8_t  bTypeFTagIdx
                                         )
{
 800b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	b092      	sub	sp, #72	@ 0x48
 800b6ca:	af06      	add	r7, sp, #24
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t    PH_MEMLOC_REM bIsDuplicate = 0x00;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t    PH_MEMLOC_BUF baSystemCode[2] = {PHPAL_FELICA_SYSTEM_CODE_BYTE_0,
 800b6dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6e0:	853b      	strh	r3, [r7, #40]	@ 0x28
                                                PHPAL_FELICA_SYSTEM_CODE_BYTE_1};
    uint8_t *  PH_MEMLOC_REM pRxBuff = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t *  PH_MEMLOC_REM pId = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	623b      	str	r3, [r7, #32]
    uint16_t   PH_MEMLOC_REM wFrameStatus;
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
    uint8_t    PH_MEMLOC_BUF aNfcId3[10];
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */

    if ((bTypeFTagIdx >= pDataParams->sTypeFTargetInfo.bTotalTagsFound) || ( bTypeFTagIdx >= PHAC_DISCLOOP_CFG_MAX_CARDS_SUPPORTED ))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800b6f0:	78fa      	ldrb	r2, [r7, #3]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d202      	bcs.n	800b6fc <phacDiscLoop_Sw_Int_ActivateF+0x38>
 800b6f6:	78fb      	ldrb	r3, [r7, #3]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <phacDiscLoop_Sw_Int_ActivateF+0x3e>
    {
        /* Out of range or no such card found yet */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800b6fc:	f244 0321 	movw	r3, #16417	@ 0x4021
 800b700:	e105      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
    }

    /* set given card ID to FeliCa data param */
    PH_CHECK_SUCCESS_FCT(status, phpalFelica_SetSerialNo(
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b706:	78fa      	ldrb	r2, [r7, #3]
 800b708:	4613      	mov	r3, r2
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	4413      	add	r3, r2
 800b70e:	00da      	lsls	r2, r3, #3
 800b710:	1ad2      	subs	r2, r2, r3
 800b712:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	4413      	add	r3, r2
 800b71a:	3304      	adds	r3, #4
 800b71c:	4619      	mov	r1, r3
 800b71e:	f008 fc10 	bl	8013f42 <phpalFelica_Sw_SetSerialNo>
 800b722:	4603      	mov	r3, r0
 800b724:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b726:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <phacDiscLoop_Sw_Int_ActivateF+0x6c>
 800b72c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b72e:	e0ee      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                                                         pDataParams->pPalFelicaDataParams,
                                                         pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm)
                                                        );
    /* Symbol 0 */
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	4613      	mov	r3, r2
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	4413      	add	r3, r2
 800b73a:	00da      	lsls	r2, r3, #3
 800b73c:	1ad2      	subs	r2, r2, r3
 800b73e:	188b      	adds	r3, r1, r2
 800b740:	3394      	adds	r3, #148	@ 0x94
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b01      	cmp	r3, #1
 800b746:	f040 80d6 	bne.w	800b8f6 <phacDiscLoop_Sw_Int_ActivateF+0x232>
        (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[1] == 0xFEU))
 800b74a:	78fa      	ldrb	r2, [r7, #3]
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	4413      	add	r3, r2
 800b754:	00da      	lsls	r2, r3, #3
 800b756:	1ad2      	subs	r2, r2, r3
 800b758:	188b      	adds	r3, r1, r2
 800b75a:	3395      	adds	r3, #149	@ 0x95
 800b75c:	781b      	ldrb	r3, [r3, #0]
    if ((pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm[0] == 0x01U) &&
 800b75e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b760:	f040 80c9 	bne.w	800b8f6 <phacDiscLoop_Sw_Int_ActivateF+0x232>
    {
        /* Single device is detected. Activation is already done during collision resolution */
        /* Symbol 1 */
        if (pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState != 0U)
 800b764:	78fa      	ldrb	r2, [r7, #3]
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	4613      	mov	r3, r2
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	4413      	add	r3, r2
 800b76e:	00da      	lsls	r2, r3, #3
 800b770:	1ad2      	subs	r2, r2, r3
 800b772:	188b      	adds	r3, r1, r2
 800b774:	33a7      	adds	r3, #167	@ 0xa7
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d076      	beq.n	800b86a <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
        {
            /* Symbol 2 */
            /* SENSF_REQ with TSN := 03h, RC := 00h, SC := FFFFh */
            status = phpalFelica_SetConfig(pDataParams->pPalFelicaDataParams, PHPAL_FELICA_CONFIG_RC, 0);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b780:	2200      	movs	r2, #0
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f008 fbf0 	bl	8013f6a <phpalFelica_Sw_SetConfig>
 800b78a:	4603      	mov	r3, r0
 800b78c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800b78e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <phacDiscLoop_Sw_Int_ActivateF+0xd4>
 800b794:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b796:	e0ba      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            status = phpalFelica_ReqC(pDataParams->pPalFelicaDataParams, baSystemCode, PHPAL_FELICA_NUMSLOTS_4, &pRxBuff, &wLen);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b79c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b7a0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b7a4:	f107 031e 	add.w	r3, r7, #30
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	2203      	movs	r2, #3
 800b7ae:	f008 fa29 	bl	8013c04 <phpalFelica_Sw_ReqC>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            PH_CHECK_SUCCESS(status);
 800b7b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <phacDiscLoop_Sw_Int_ActivateF+0xfc>
 800b7bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b7be:	e0a6      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>

            /* Symbol 3 */
            pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800b7c0:	78fa      	ldrb	r2, [r7, #3]
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	4413      	add	r3, r2
 800b7ca:	00da      	lsls	r2, r3, #3
 800b7cc:	1ad2      	subs	r2, r2, r3
 800b7ce:	188b      	adds	r3, r1, r2
 800b7d0:	33a7      	adds	r3, #167	@ 0xa7
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]

            PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetConfig(pDataParams->pPalFelicaDataParams, PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES, &wFrames));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7da:	f107 021c 	add.w	r2, r7, #28
 800b7de:	2101      	movs	r1, #1
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f008 fbfa 	bl	8013fda <phpalFelica_Sw_GetConfig>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b7ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d02e      	beq.n	800b84e <phacDiscLoop_Sw_Int_ActivateF+0x18a>
 800b7f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b7f2:	e08c      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>

                while((0U != wFrames) && (0U == bIsDuplicate))
                {
                    IdLen = 0x00;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	76fb      	strb	r3, [r7, #27]
                    wFrameStatus = 0x00;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	833b      	strh	r3, [r7, #24]

                    PH_CHECK_SUCCESS_FCT(status, phpalFelica_GetFrameInfo(
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b800:	8bbb      	ldrh	r3, [r7, #28]
 800b802:	b2d9      	uxtb	r1, r3
 800b804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b806:	f107 0418 	add.w	r4, r7, #24
 800b80a:	f107 031b 	add.w	r3, r7, #27
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	f107 0320 	add.w	r3, r7, #32
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	4623      	mov	r3, r4
 800b818:	f008 fb0a 	bl	8013e30 <phpalFelica_Sw_GetFrameInfo>
 800b81c:	4603      	mov	r3, r0
 800b81e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b820:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <phacDiscLoop_Sw_Int_ActivateF+0x166>
 800b826:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b828:	e071      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        &pId,
                        &IdLen));

                    /* Check Device ID into greedy collection  */
                    /* Check Same response already present or not */
                    PH_CHECK_SUCCESS_FCT(status, phacDiscLoop_Sw_Int_CheckForDuplication(
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	f107 022d 	add.w	r2, r7, #45	@ 0x2d
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7ff fc84 	bl	800b140 <phacDiscLoop_Sw_Int_CheckForDuplication>
 800b838:	4603      	mov	r3, r0
 800b83a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b83c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <phacDiscLoop_Sw_Int_ActivateF+0x182>
 800b842:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b844:	e063      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
                        pDataParams,
                        pId,
                        &bIsDuplicate));

                    wFrames--;
 800b846:	8bbb      	ldrh	r3, [r7, #28]
 800b848:	3b01      	subs	r3, #1
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	83bb      	strh	r3, [r7, #28]
                while((0U != wFrames) && (0U == bIsDuplicate))
 800b84e:	8bbb      	ldrh	r3, [r7, #28]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <phacDiscLoop_Sw_Int_ActivateF+0x198>
 800b854:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0cb      	beq.n	800b7f4 <phacDiscLoop_Sw_Int_ActivateF+0x130>
                }

            /* If same response is not present means Device not present
             * or some other error has occurred
             * Report DiscLoop Failure in this case */
            if(0U == (bIsDuplicate))
 800b85c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b860:	2b00      	cmp	r3, #0
 800b862:	d102      	bne.n	800b86a <phacDiscLoop_Sw_Int_ActivateF+0x1a6>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_FAILURE, PH_COMP_AC_DISCLOOP);
 800b864:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800b868:	e051      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            }
        }
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS
        /* Symbol 4 */
        (void)memcpy(aNfcId3, pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].aIDmPMm, PHAC_DISCLOOP_FELICA_IDM_LENGTH);
 800b86a:	78fa      	ldrb	r2, [r7, #3]
 800b86c:	4613      	mov	r3, r2
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	4413      	add	r3, r2
 800b872:	00da      	lsls	r2, r3, #3
 800b874:	1ad2      	subs	r2, r2, r3
 800b876:	f102 0390 	add.w	r3, r2, #144	@ 0x90
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	4413      	add	r3, r2
 800b87e:	1d19      	adds	r1, r3, #4
 800b880:	f107 030c 	add.w	r3, r7, #12
 800b884:	2208      	movs	r2, #8
 800b886:	4618      	mov	r0, r3
 800b888:	f013 fbcd 	bl	801f026 <memcpy>

        aNfcId3[8] = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	753b      	strb	r3, [r7, #20]
        aNfcId3[9] = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	757b      	strb	r3, [r7, #21]

        /* Activate the P2P capable FeliCa card */
        PH_CHECK_SUCCESS_FCT(status, phpalI18092mPI_Atr(
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 e0ac 	ldrb.w	lr, [r3, #172]	@ 0xac
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 80ad 	ldrb.w	r8, [r3, #173]	@ 0xad
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	f892 20af 	ldrb.w	r2, [r2, #175]	@ 0xaf
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	f8d1 10b0 	ldr.w	r1, [r1, #176]	@ 0xb0
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 800b8bc:	687c      	ldr	r4, [r7, #4]
 800b8be:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
 800b8c2:	687d      	ldr	r5, [r7, #4]
 800b8c4:	35bc      	adds	r5, #188	@ 0xbc
 800b8c6:	f107 0c0c 	add.w	ip, r7, #12
 800b8ca:	9505      	str	r5, [sp, #20]
 800b8cc:	9404      	str	r4, [sp, #16]
 800b8ce:	9003      	str	r0, [sp, #12]
 800b8d0:	9102      	str	r1, [sp, #8]
 800b8d2:	9201      	str	r2, [sp, #4]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	4643      	mov	r3, r8
 800b8d8:	4672      	mov	r2, lr
 800b8da:	4661      	mov	r1, ip
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f00b f96f 	bl	8016bc0 <phpalI18092mPI_Sw_Atr>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b8e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <phacDiscLoop_Sw_Int_ActivateF+0x22c>
 800b8ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b8ee:	e00e      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pGi,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.bGiLength,
            pDataParams->sTypeFTargetInfo.sTypeF_P2P.pAtrRes,
            &(pDataParams->sTypeFTargetInfo.sTypeF_P2P.bAtrResLength)));

        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_PASSIVE_TARGET_ACTIVATED, PH_COMP_AC_DISCLOOP);
 800b8f0:	f244 038d 	movw	r3, #16525	@ 0x408d
 800b8f4:	e00b      	b.n	800b90e <phacDiscLoop_Sw_Int_ActivateF+0x24a>
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_P2P_TAGS */
    }
    else
    {
       /* Symbol 7 */
       pDataParams->sTypeFTargetInfo.aTypeFTag[bTypeFTagIdx].bSleepAFState = 0U;
 800b8f6:	78fa      	ldrb	r2, [r7, #3]
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	4413      	add	r3, r2
 800b900:	00da      	lsls	r2, r3, #3
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	188b      	adds	r3, r1, r2
 800b906:	33a7      	adds	r3, #167	@ 0xa7
 800b908:	2200      	movs	r2, #0
 800b90a:	701a      	strb	r2, [r3, #0]
    }
    return PH_ERR_SUCCESS;
 800b90c:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS */
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3730      	adds	r7, #48	@ 0x30
 800b912:	46bd      	mov	sp, r7
 800b914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b918 <phacDiscLoop_Sw_Int_Config_GTF>:
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEF_TAGS
phStatus_t phacDiscLoop_Sw_Int_Config_GTF(
                                          phacDiscLoop_Sw_DataParams_t * pDataParams,
                                          uint8_t bTechIndex
                                          )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_INTERNAL_ERROR;
 800b924:	237f      	movs	r3, #127	@ 0x7f
 800b926:	81fb      	strh	r3, [r7, #14]
    /*
     * If either one of FeliCa 212 or FeliCa 424 is polled after Type B polling,
     * then GTbf is applied. Default value is 15.3 ms (PH_NXPNFCRDLIB_CONFIG_B_TO_F_GT).
     * In this case Type B poll is followed by FeliCa poll.
     */
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	789b      	ldrb	r3, [r3, #2]
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01e      	beq.n	800b972 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
    if((0U != ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_B))) &&
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d00a      	beq.n	800b954 <phacDiscLoop_Sw_Int_Config_GTF+0x3c>
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_212) ||
 800b944:	2b08      	cmp	r3, #8
 800b946:	d114      	bne.n	800b972 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
        (0U == ((pDataParams->bPasPollTechCfg & PHAC_DISCLOOP_POS_BIT_MASK_F212))))))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	789b      	ldrb	r3, [r3, #2]
 800b94c:	f003 0304 	and.w	r3, r3, #4
        ((pDataParams->bFelicaBaud == PHAC_DISCLOOP_CON_BITR_424) &&
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10e      	bne.n	800b972 <phacDiscLoop_Sw_Int_Config_GTF+0x5a>
    {
        /* apply guard time GTBF */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8adb      	ldrh	r3, [r3, #22]
 800b95c:	461a      	mov	r2, r3
 800b95e:	2135      	movs	r1, #53	@ 0x35
 800b960:	f002 fdba 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800b964:	4603      	mov	r3, r0
 800b966:	81fb      	strh	r3, [r7, #14]
 800b968:	89fb      	ldrh	r3, [r7, #14]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d010      	beq.n	800b990 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800b96e:	89fb      	ldrh	r3, [r7, #14]
 800b970:	e02a      	b.n	800b9c8 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
        /*
         * If Type F polling is not preceded by a Type B poll apply guard time GTFB
         * Default value of GTFB is 20.4ms (PH_NXPNFCRDLIB_CONFIG_TYPEF_GT).
         *
         */
        PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	8a9b      	ldrh	r3, [r3, #20]
 800b97a:	461a      	mov	r2, r3
 800b97c:	2135      	movs	r1, #53	@ 0x35
 800b97e:	f002 fdab 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800b982:	4603      	mov	r3, r0
 800b984:	81fb      	strh	r3, [r7, #14]
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <phacDiscLoop_Sw_Int_Config_GTF+0x78>
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	e01b      	b.n	800b9c8 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
            pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_F212]));
    }

    if ((uint8_t)PHAC_DISCLOOP_TECH_TYPE_F424 == bTechIndex)
 800b990:	78fb      	ldrb	r3, [r7, #3]
 800b992:	2b03      	cmp	r3, #3
 800b994:	d10b      	bne.n	800b9ae <phacDiscLoop_Sw_Int_Config_GTF+0x96>
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_424));
 800b996:	2208      	movs	r2, #8
 800b998:	2157      	movs	r1, #87	@ 0x57
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7fc fac2 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	81fb      	strh	r3, [r7, #14]
 800b9a4:	89fb      	ldrh	r3, [r7, #14]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00d      	beq.n	800b9c6 <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800b9aa:	89fb      	ldrh	r3, [r7, #14]
 800b9ac:	e00c      	b.n	800b9c8 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(wStatus, phacDiscLoop_SetConfig(pDataParams, PHAC_DISCLOOP_CONFIG_TYPEF_CUR_BAUD, PHAC_DISCLOOP_CON_BITR_212));
 800b9ae:	2204      	movs	r2, #4
 800b9b0:	2157      	movs	r1, #87	@ 0x57
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7fc fab6 	bl	8007f24 <phacDiscLoop_Sw_SetConfig>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	81fb      	strh	r3, [r7, #14]
 800b9bc:	89fb      	ldrh	r3, [r7, #14]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <phacDiscLoop_Sw_Int_Config_GTF+0xae>
 800b9c2:	89fb      	ldrh	r3, [r7, #14]
 800b9c4:	e000      	b.n	800b9c8 <phacDiscLoop_Sw_Int_Config_GTF+0xb0>
    }

    return PH_ERR_SUCCESS;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <phacDiscLoop_Sw_DetTechTypeI18000p3m3>:
 * Private Functions
 * ****************************************************************************/
phStatus_t phacDiscLoop_Sw_DetTechTypeI18000p3m3(
                                                 phacDiscLoop_Sw_DataParams_t *pDataParams
                                                 )
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b09b      	sub	sp, #108	@ 0x6c
 800b9d4:	af08      	add	r7, sp, #32
 800b9d6:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800b9d8:	f107 031c 	add.w	r3, r7, #28
 800b9dc:	2227      	movs	r2, #39	@ 0x27
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f013 faa1 	bl	801ef28 <memset>
    uint8_t    PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800b9e6:	f107 0314 	add.w	r3, r7, #20
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	460a      	mov	r2, r1
 800b9ee:	801a      	strh	r2, [r3, #0]
 800b9f0:	460a      	mov	r2, r1
 800b9f2:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	74fb      	strb	r3, [r7, #19]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	817b      	strh	r3, [r7, #10]

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800ba04:	f107 031a 	add.w	r3, r7, #26
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	f107 031b 	add.w	r3, r7, #27
 800ba0e:	9306      	str	r3, [sp, #24]
 800ba10:	f107 031c 	add.w	r3, r7, #28
 800ba14:	9305      	str	r3, [sp, #20]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9304      	str	r3, [sp, #16]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9303      	str	r3, [sp, #12]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9302      	str	r3, [sp, #8]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	f107 0313 	add.w	r3, r7, #19
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2100      	movs	r1, #0
 800ba32:	f00a fea1 	bl	8016778 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ba3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x7a>
 800ba44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba48:	e043      	b.n	800bad2 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800ba5a:	f107 0314 	add.w	r3, r7, #20
 800ba5e:	9304      	str	r3, [sp, #16]
 800ba60:	2300      	movs	r3, #0
 800ba62:	9303      	str	r3, [sp, #12]
 800ba64:	2300      	movs	r3, #0
 800ba66:	9302      	str	r3, [sp, #8]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	2300      	movs	r3, #0
 800ba72:	f00a ff9a 	bl	80169aa <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ba7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xba>
 800ba84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba88:	e023      	b.n	800bad2 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
        0,
        0,
        aBeginRoundCmd));

    /* Inventory with 1 slot */
    status = phhalHw_I18000p3m3Inventory(
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ba8e:	7efa      	ldrb	r2, [r7, #27]
 800ba90:	7ebc      	ldrb	r4, [r7, #26]
 800ba92:	f107 011c 	add.w	r1, r7, #28
 800ba96:	f107 030a 	add.w	r3, r7, #10
 800ba9a:	9303      	str	r3, [sp, #12]
 800ba9c:	f107 030c 	add.w	r3, r7, #12
 800baa0:	9302      	str	r3, [sp, #8]
 800baa2:	2301      	movs	r3, #1
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	f107 0314 	add.w	r3, r7, #20
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	4623      	mov	r3, r4
 800baae:	f005 f8b7 	bl	8010c20 <phhalHw_Pn5180_I18000p3m3Inventory>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        aBeginRoundCmd,
        PHHAL_HW_I18000P3M3_ONE_TS_ONLY,
        &pRxBuffer,
        &wRxBufferLen);

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800bab8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe f95c 	bl	8009d7a <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0xfe>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800bac8:	f244 0387 	movw	r3, #16519	@ 0x4087
 800bacc:	e001      	b.n	800bad2 <phacDiscLoop_Sw_DetTechTypeI18000p3m3+0x102>
    }
    else
    {
        return status;
 800bace:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	374c      	adds	r7, #76	@ 0x4c
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd90      	pop	{r4, r7, pc}

0800bada <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3(
                                                             phacDiscLoop_Sw_DataParams_t *pDataParams
                                                             )
{
 800bada:	b590      	push	{r4, r7, lr}
 800badc:	b09b      	sub	sp, #108	@ 0x6c
 800bade:	af08      	add	r7, sp, #32
 800bae0:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_COUNT bQ = 4;
 800bae2:	2304      	movs	r3, #4
 800bae4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800bae8:	f107 0318 	add.w	r3, r7, #24
 800baec:	2227      	movs	r2, #39	@ 0x27
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f013 fa19 	bl	801ef28 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800baf6:	f107 0310 	add.w	r3, r7, #16
 800bafa:	2100      	movs	r1, #0
 800bafc:	460a      	mov	r2, r1
 800bafe:	801a      	strh	r2, [r3, #0]
 800bb00:	460a      	mov	r2, r1
 800bb02:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	60fb      	str	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	817b      	strh	r3, [r7, #10]
    uint8_t    PH_MEMLOC_REM bEmptyPointer = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	727b      	strb	r3, [r7, #9]
    uint8_t    PH_MEMLOC_REM bMoreCardsPresent;
    uint16_t   PH_MEMLOC_REM wIndex;
    uint8_t    PH_MEMLOC_REM bPcLength;
    uint8_t    PH_MEMLOC_REM bPacketCrcLen;

    wRxBufferLen = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	817b      	strh	r3, [r7, #10]
    /* Reset collision pending flag */
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7f9b      	ldrb	r3, [r3, #30]
 800bb18:	f023 0320 	bic.w	r3, r3, #32
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	779a      	strb	r2, [r3, #30]

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Reset more card present flag */
    bMoreCardsPresent = PH_OFF;
 800bb32:	2300      	movs	r3, #0
 800bb34:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	8b5b      	ldrh	r3, [r3, #26]
 800bb40:	461a      	mov	r2, r3
 800bb42:	2135      	movs	r1, #53	@ 0x35
 800bb44:	f002 fcc8 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bb4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x82>
 800bb56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb5a:	e1c5      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_18000P3M3]));

    /* Configure HW for the Type 18000p3m3 technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb60:	2106      	movs	r1, #6
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 ff3a 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bb6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xa2>
 800bb76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb7a:	e1b5      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_I18000P3M3));

    /* Reset detected tag count */
    pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound = 0;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    pDataParams->bNumOfCards = 0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    /* Create select command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bb90:	f107 0316 	add.w	r3, r7, #22
 800bb94:	9307      	str	r3, [sp, #28]
 800bb96:	f107 0317 	add.w	r3, r7, #23
 800bb9a:	9306      	str	r3, [sp, #24]
 800bb9c:	f107 0318 	add.w	r3, r7, #24
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	2300      	movs	r3, #0
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	2300      	movs	r3, #0
 800bba8:	9303      	str	r3, [sp, #12]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	9302      	str	r3, [sp, #8]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	f107 0309 	add.w	r3, r7, #9
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	2301      	movs	r3, #1
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	f00a fddb 	bl	8016778 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bbc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800bbd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbd4:	e188      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    do
    {
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING)
 800bbd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b71      	cmp	r3, #113	@ 0x71
 800bbde:	d113      	bne.n	800bc08 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x12e>
        {
            /* Resume Inventory */
            status = phhalHw_I18000p3m3ResumeInventory(
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe4:	f107 020a 	add.w	r2, r7, #10
 800bbe8:	f107 010c 	add.w	r1, r7, #12
 800bbec:	4618      	mov	r0, r3
 800bbee:	f005 f9af 	bl	8010f50 <phhalHw_Pn5180_18000p3m3ResumeInventory>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                pDataParams->pHalDataParams,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800bbf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b12      	cmp	r3, #18
 800bc00:	d150      	bne.n	800bca4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1ca>
 800bc02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bc06:	e16f      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        }
        else
        {
            /* Create BeginRound command frame with Q value */
            PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 40ed 	ldrb.w	r4, [r3, #237]	@ 0xed
 800bc18:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800bc22:	f107 0210 	add.w	r2, r7, #16
 800bc26:	9204      	str	r2, [sp, #16]
 800bc28:	9303      	str	r3, [sp, #12]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9302      	str	r3, [sp, #8]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	2300      	movs	r3, #0
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	2300      	movs	r3, #0
 800bc38:	4622      	mov	r2, r4
 800bc3a:	f00a feb6 	bl	80169aa <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bc44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x178>
 800bc4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bc50:	e14a      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                0,
                bQ++,
                aBeginRoundCmd));

            /* Inventory */
            status = phhalHw_I18000p3m3Inventory(
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bc56:	7dfa      	ldrb	r2, [r7, #23]
 800bc58:	7dbc      	ldrb	r4, [r7, #22]
 800bc5a:	f107 0118 	add.w	r1, r7, #24
 800bc5e:	f107 030a 	add.w	r3, r7, #10
 800bc62:	9303      	str	r3, [sp, #12]
 800bc64:	f107 030c 	add.w	r3, r7, #12
 800bc68:	9302      	str	r3, [sp, #8]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	f107 0310 	add.w	r3, r7, #16
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	4623      	mov	r3, r4
 800bc76:	f004 ffd3 	bl	8010c20 <phhalHw_Pn5180_I18000p3m3Inventory>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                aBeginRoundCmd,
                PHHAL_HW_I18000P3M3_GET_MAX_RESPS,
                &pRxBuffer,
                &wRxBufferLen);
            /* Return if status is aborted. */
            PH_CHECK_ABORT(status);
 800bc80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b12      	cmp	r3, #18
 800bc88:	d102      	bne.n	800bc90 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1b6>
 800bc8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bc8e:	e12b      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>

            /* Reset more card present flag */
            bMoreCardsPresent = PH_OFF;
 800bc90:	2300      	movs	r3, #0
 800bc92:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

            /* Reset collision pending flag */
            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7f9b      	ldrb	r3, [r3, #30]
 800bc9a:	f023 0320 	bic.w	r3, r3, #32
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	779a      	strb	r2, [r3, #30]
        }

        /* Reset receive buffer index */
        wIndex = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        while(wIndex < wRxBufferLen)
 800bcaa:	e0ff      	b.n	800beac <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
        {
            if(pRxBuffer[wIndex] == 0U)
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bcb2:	4413      	add	r3, r2
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f040 80cb 	bne.w	800be52 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x378>
            {
                /* Partial bits shall be 0 as truncation is not set */
                if(pRxBuffer[wIndex + 2U] != 0U)
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bcc2:	3302      	adds	r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1f8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800bccc:	f244 037f 	movw	r3, #16511	@ 0x407f
 800bcd0:	e10a      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                /* StoredPC/PacketPC length */
                bPcLength = 2;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                /* PacketCRC length */
                bPacketCrcLen = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                /* Check for XPC Indicator (XI) */
                if(0u != (pRxBuffer[wIndex + 3U] & 0x02U))
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bce4:	3303      	adds	r3, #3
 800bce6:	4413      	add	r3, r2
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	f003 0302 	and.w	r3, r3, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d015      	beq.n	800bd1e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                {
                    /* XPC_W1 length */
                    bPcLength = (uint8_t)(bPcLength + 2U);
 800bcf2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bcf6:	3302      	adds	r3, #2
 800bcf8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

                    /* PacketCRC length */
                    bPacketCrcLen = 2;
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                    /* Check for XPC Extension Bit (XEB) */
                    if(0u != (pRxBuffer[wIndex + 5U] & 0x80U))
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd08:	3305      	adds	r3, #5
 800bd0a:	4413      	add	r3, r2
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b25b      	sxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da04      	bge.n	800bd1e <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x244>
                    {
                        /* XPC_W2 length */
                        bPcLength = (uint8_t)(bPcLength + 2U);
 800bd14:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bd18:	3302      	adds	r3, #2
 800bd1a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    }
                }

                if(pRxBuffer[wIndex + 1U] > (bPcLength + bPacketCrcLen))
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd24:	3301      	adds	r3, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800bd30:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bd34:	4413      	add	r3, r2
 800bd36:	4299      	cmp	r1, r3
 800bd38:	dd55      	ble.n	800bde6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x30c>
                {
                    /* To avoid case of corruption */
                    if((pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)) <= (uint8_t)sizeof(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii))
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd40:	3301      	adds	r3, #1
 800bd42:	4413      	add	r3, r2
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	4619      	mov	r1, r3
 800bd48:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800bd4c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bd50:	4413      	add	r3, r2
 800bd52:	1acb      	subs	r3, r1, r3
 800bd54:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd56:	dc43      	bgt.n	800bde0 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x306>
                    {
                        /* Copy UII */
                        (void)memcpy(
                            pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].aUii,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4613      	mov	r3, r2
 800bd62:	011b      	lsls	r3, r3, #4
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	33e8      	adds	r3, #232	@ 0xe8
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f103 0008 	add.w	r0, r3, #8
                        (void)memcpy(
 800bd72:	68fa      	ldr	r2, [r7, #12]
                            &pRxBuffer[wIndex + 3U + bPcLength],
 800bd74:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 800bd78:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800bd7c:	440b      	add	r3, r1
 800bd7e:	3303      	adds	r3, #3
 800bd80:	18d1      	adds	r1, r2, r3
                            ((size_t)pRxBuffer[wIndex + 1U] - (bPcLength + bPacketCrcLen)));
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd88:	3301      	adds	r3, #1
 800bd8a:	4413      	add	r3, r2
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	461c      	mov	r4, r3
 800bd90:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800bd94:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bd98:	4413      	add	r3, r2
                        (void)memcpy(
 800bd9a:	1ae3      	subs	r3, r4, r3
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	f013 f942 	bl	801f026 <memcpy>

                        /* Calculate UII length in bits */
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bda8:	3301      	adds	r3, #1
 800bdaa:	4413      	add	r3, r2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800bdb4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800bdb8:	4413      	add	r3, r2
 800bdba:	1acb      	subs	r3, r1, r3
 800bdbc:	b29b      	uxth	r3, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 800bdc4:	4611      	mov	r1, r2
                        		(uint16_t)(((uint16_t)pRxBuffer[wIndex + 1U] - ((uint16_t)bPcLength + (uint16_t)bPacketCrcLen)) * 8U);
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	b298      	uxth	r0, r3
                        pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength =
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	011b      	lsls	r3, r3, #4
 800bdd0:	1a5b      	subs	r3, r3, r1
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800bdda:	4602      	mov	r2, r0
 800bddc:	801a      	strh	r2, [r3, #0]
 800bdde:	e010      	b.n	800be02 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x328>
                    }
                    else
                    {
                        /* In case of a compliant card this scenario should never come */
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800bde0:	f244 037f 	movw	r3, #16511	@ 0x407f
 800bde4:	e080      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                    }
                }
                else
                {
                    pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[pDataParams->bNumOfCards].wUiiLength = 0;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800bdec:	4619      	mov	r1, r3
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	1a5b      	subs	r3, r3, r1
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4413      	add	r3, r2
 800bdfa:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800bdfe:	2200      	movs	r2, #0
 800be00:	801a      	strh	r2, [r3, #0]
                }

                /* Increment device count */
                pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound++;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800be08:	3301      	adds	r3, #1
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                pDataParams->bNumOfCards++;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800be18:	3301      	adds	r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 20ec 	ldrb.w	r2, [r3, #236]	@ 0xec
                    pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3])
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7bdb      	ldrb	r3, [r3, #15]
                if(pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound >=
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d301      	bcc.n	800be34 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x35a>
                {
                    return PH_ERR_SUCCESS;
 800be30:	2300      	movs	r3, #0
 800be32:	e059      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
                }

                wIndex =  (uint16_t)(wIndex + pRxBuffer[wIndex + 1U] + 3U);
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be3a:	3301      	adds	r3, #1
 800be3c:	4413      	add	r3, r2
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be46:	4413      	add	r3, r2
 800be48:	b29b      	uxth	r3, r3
 800be4a:	3303      	adds	r3, #3
 800be4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800be50:	e02c      	b.n	800beac <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else if(pRxBuffer[wIndex] == 1U)
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be58:	4413      	add	r3, r2
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d102      	bne.n	800be66 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x38c>
            {
                /* This should not come as ReqRN is not send */
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_AC_DISCLOOP);
 800be60:	f244 037f 	movw	r3, #16511	@ 0x407f
 800be64:	e040      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
            }
            else if(pRxBuffer[wIndex] == 2U)
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be6c:	4413      	add	r3, r2
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d105      	bne.n	800be80 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3a6>
            {
                /* Timeout */
                wIndex = (uint16_t)(wIndex + 3U);
 800be74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be78:	3303      	adds	r3, #3
 800be7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800be7e:	e015      	b.n	800beac <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
            }
            else
            {
                /* Collision */
                wIndex = (uint16_t)(wIndex + 3U);
 800be80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800be84:	3303      	adds	r3, #3
 800be86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                bMoreCardsPresent = PH_ON;
 800be8a:	2301      	movs	r3, #1
 800be8c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_18000P3M3;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7f9b      	ldrb	r3, [r3, #30]
 800be94:	f043 0320 	orr.w	r3, r3, #32
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	779a      	strb	r2, [r3, #30]

                /* Check for device count */
                if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_18000P3M3] == 0x00U)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	7bdb      	ldrb	r3, [r3, #15]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3d2>
                {
                    /* return collision error */
                    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800bea6:	f244 0381 	movw	r3, #16513	@ 0x4081
 800beaa:	e01d      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
        while(wIndex < wRxBufferLen)
 800beac:	897b      	ldrh	r3, [r7, #10]
 800beae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800beb2:	429a      	cmp	r2, r3
 800beb4:	f4ff aefa 	bcc.w	800bcac <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x1d2>
                }
            }
        }
    }
    while(((bMoreCardsPresent != PH_OFF) && (bQ <= 0x0FU)) || ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_CHAINING));
 800beb8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d004      	beq.n	800beca <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x3f0>
 800bec0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800bec4:	2b0f      	cmp	r3, #15
 800bec6:	f67f ae86 	bls.w	800bbd6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>
 800beca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b71      	cmp	r3, #113	@ 0x71
 800bed2:	f43f ae80 	beq.w	800bbd6 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0xfc>

    if(0U != (pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40a>
    {
        return PH_ERR_SUCCESS;
 800bee0:	2300      	movs	r3, #0
 800bee2:	e001      	b.n	800bee8 <phacDiscLoop_Sw_Int_CollisionResolutionI18000p3m3+0x40e>
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800bee4:	f244 0385 	movw	r3, #16517	@ 0x4085
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800bee8:	4618      	mov	r0, r3
 800beea:	374c      	adds	r7, #76	@ 0x4c
 800beec:	46bd      	mov	sp, r7
 800beee:	bd90      	pop	{r4, r7, pc}

0800bef0 <phacDiscLoop_Sw_Int_ActivateI18000p3m3>:

phStatus_t phacDiscLoop_Sw_Int_ActivateI18000p3m3(
                                                  phacDiscLoop_Sw_DataParams_t * pDataParams,
                                                  uint8_t bI18000p3m3TagIdx
                                                  )
{
 800bef0:	b590      	push	{r4, r7, lr}
 800bef2:	b09b      	sub	sp, #108	@ 0x6c
 800bef4:	af08      	add	r7, sp, #32
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS
    phStatus_t PH_MEMLOC_REM status;
    uint8_t    PH_MEMLOC_BUF aSelectCmd[39] = {0};
 800befc:	f107 031c 	add.w	r3, r7, #28
 800bf00:	2227      	movs	r2, #39	@ 0x27
 800bf02:	2100      	movs	r1, #0
 800bf04:	4618      	mov	r0, r3
 800bf06:	f013 f80f 	bl	801ef28 <memset>
    uint8_t   PH_MEMLOC_REM wSelectCmdLen;
    uint8_t    PH_MEMLOC_REM bSelectCmdValidBits;
    uint8_t    PH_MEMLOC_BUF aBeginRoundCmd[3] = {0};
 800bf0a:	f107 0314 	add.w	r3, r7, #20
 800bf0e:	2100      	movs	r1, #0
 800bf10:	460a      	mov	r2, r1
 800bf12:	801a      	strh	r2, [r3, #0]
 800bf14:	460a      	mov	r2, r1
 800bf16:	709a      	strb	r2, [r3, #2]
    uint8_t    PH_MEMLOC_REM *pRxBuffer = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	613b      	str	r3, [r7, #16]
    uint16_t   PH_MEMLOC_REM wRxBufferLen = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	81fb      	strh	r3, [r7, #14]
    uint8_t    PH_MEMLOC_REM bUiiStartAddress = 0x20;
 800bf20:	2320      	movs	r3, #32
 800bf22:	737b      	strb	r3, [r7, #13]
    uint8_t    PH_MEMLOC_REM bMaskLength;

    /* Out of range check */
    if ((bI18000p3m3TagIdx >= pDataParams->sI18000p3m3TargetInfo.bTotalTagsFound) || ( bI18000p3m3TagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800bf2a:	78fa      	ldrb	r2, [r7, #3]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d202      	bcs.n	800bf36 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x46>
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d002      	beq.n	800bf3c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800bf36:	f244 0321 	movw	r3, #16417	@ 0x4021
 800bf3a:	e09b      	b.n	800c074 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
    }

    /* Maximum mask length possible is 255 */
    if(pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength > 255U)
 800bf3c:	78fa      	ldrb	r2, [r7, #3]
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	2bff      	cmp	r3, #255	@ 0xff
 800bf52:	d903      	bls.n	800bf5c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x6c>
    {
        bMaskLength = 255;
 800bf54:	23ff      	movs	r3, #255	@ 0xff
 800bf56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf5a:	e00b      	b.n	800bf74 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x84>
    }
    else
    {
        bMaskLength = (uint8_t)pDataParams->sI18000p3m3TargetInfo.aI18000p3m3[bI18000p3m3TagIdx].wUiiLength;
 800bf5c:	78fa      	ldrb	r2, [r7, #3]
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	4613      	mov	r3, r2
 800bf62:	011b      	lsls	r3, r3, #4
 800bf64:	1a9b      	subs	r3, r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    /* Create select command frame (with selected UII in mask) */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateSelectCmd(
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bf78:	78fa      	ldrb	r2, [r7, #3]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	011b      	lsls	r3, r3, #4
 800bf7e:	1a9b      	subs	r3, r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	33e8      	adds	r3, #232	@ 0xe8
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	4413      	add	r3, r2
 800bf88:	3308      	adds	r3, #8
 800bf8a:	f107 021a 	add.w	r2, r7, #26
 800bf8e:	9207      	str	r2, [sp, #28]
 800bf90:	f107 021b 	add.w	r2, r7, #27
 800bf94:	9206      	str	r2, [sp, #24]
 800bf96:	f107 021c 	add.w	r2, r7, #28
 800bf9a:	9205      	str	r2, [sp, #20]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	9204      	str	r2, [sp, #16]
 800bfa0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800bfa4:	9203      	str	r2, [sp, #12]
 800bfa6:	9302      	str	r3, [sp, #8]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	f107 030d 	add.w	r3, r7, #13
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	f00a fbde 	bl	8016778 <phpalI18000p3m3_Sw_CreateSelectCmd>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800bfc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0xe0>
 800bfca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bfce:	e051      	b.n	800c074 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        aSelectCmd,
        &wSelectCmdLen,
        &bSelectCmdValidBits));

    /* Create BeginRound command frame */
    PH_CHECK_SUCCESS_FCT(status, phpalI18000p3m3_CreateBeginRoundCmd(
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 10ee 	ldrb.w	r1, [r3, #238]	@ 0xee
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 20ed 	ldrb.w	r2, [r3, #237]	@ 0xed
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	9304      	str	r3, [sp, #16]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9302      	str	r3, [sp, #8]
 800bfee:	2300      	movs	r3, #0
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	2300      	movs	r3, #0
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	2300      	movs	r3, #0
 800bff8:	f00a fcd7 	bl	80169aa <phpalI18000p3m3_Sw_CreateBeginRoundCmd>
 800bffc:	4603      	mov	r3, r0
 800bffe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c002:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x120>
 800c00a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c00e:	e031      	b.n	800c074 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        0,
        0,
        aBeginRoundCmd));

    /* Activate tag with specified UII */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_I18000p3m3Inventory(
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c014:	7efa      	ldrb	r2, [r7, #27]
 800c016:	7ebc      	ldrb	r4, [r7, #26]
 800c018:	f107 011c 	add.w	r1, r7, #28
 800c01c:	f107 030e 	add.w	r3, r7, #14
 800c020:	9303      	str	r3, [sp, #12]
 800c022:	f107 0310 	add.w	r3, r7, #16
 800c026:	9302      	str	r3, [sp, #8]
 800c028:	2302      	movs	r3, #2
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	f107 0314 	add.w	r3, r7, #20
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	4623      	mov	r3, r4
 800c034:	f004 fdf4 	bl	8010c20 <phhalHw_Pn5180_I18000p3m3Inventory>
 800c038:	4603      	mov	r3, r0
 800c03a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c03e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x15c>
 800c046:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c04a:	e013      	b.n	800c074 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        PHHAL_HW_I18000P3M3_GET_TAG_HANDLE,
        &pRxBuffer,
        &wRxBufferLen));

    /* Update handle */
    PH_CHECK_SUCCESS_FCT(status, phalI18000p3m3_SetHandle(
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	89fb      	ldrh	r3, [r7, #14]
 800c054:	3b02      	subs	r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	4619      	mov	r1, r3
 800c05a:	f000 fbd7 	bl	800c80c <phalI18000p3m3_Sw_SetHandle>
 800c05e:	4603      	mov	r3, r0
 800c060:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c064:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d002      	beq.n	800c072 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x182>
 800c06c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c070:	e000      	b.n	800c074 <phacDiscLoop_Sw_Int_ActivateI18000p3m3+0x184>
        pDataParams->pAl18000p3m3DataParams,
        &pRxBuffer[wRxBufferLen - 2u]));

    return PH_ERR_SUCCESS;
 800c072:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_I18000P3M3_TAGS */
}
 800c074:	4618      	mov	r0, r3
 800c076:	374c      	adds	r7, #76	@ 0x4c
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd90      	pop	{r4, r7, pc}

0800c07c <phacDiscLoop_Sw_DetTechTypeV>:
 * Private Functions
 * ***************************************************************************************************************** */
phStatus_t phacDiscLoop_Sw_DetTechTypeV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af04      	add	r7, sp, #16
 800c082:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800c084:	237f      	movs	r3, #127	@ 0x7f
 800c086:	81fb      	strh	r3, [r7, #14]

    /* Inventory request with one slot */
    status = phpalSli15693_Inventory(
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c092:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800c096:	b2d9      	uxtb	r1, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	33e2      	adds	r3, #226	@ 0xe2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	32e3      	adds	r2, #227	@ 0xe3
 800c0a0:	9202      	str	r2, [sp, #8]
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f00b fbc2 	bl	8017834 <phpalSli15693_Sw_Inventory>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	81fb      	strh	r3, [r7, #14]
            0,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid
    );

    if(0u != (phacDiscLoop_Sw_Int_IsValidPollStatus(status)))
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fd fe5f 	bl	8009d7a <phacDiscLoop_Sw_Int_IsValidPollStatus>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <phacDiscLoop_Sw_DetTechTypeV+0x4c>
    {
        return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_TECH_DETECTED, PH_COMP_AC_DISCLOOP);
 800c0c2:	f244 0387 	movw	r3, #16519	@ 0x4087
 800c0c6:	e000      	b.n	800c0ca <phacDiscLoop_Sw_DetTechTypeV+0x4e>
    }
    else
    {
        return status;
 800c0c8:	89fb      	ldrh	r3, [r7, #14]
    }
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <phacDiscLoop_Sw_Int_CollisionResolutionV>:

phStatus_t phacDiscLoop_Sw_Int_CollisionResolutionV(
        phacDiscLoop_Sw_DataParams_t *pDataParams
)
{
 800c0d2:	b590      	push	{r4, r7, lr}
 800c0d4:	b09b      	sub	sp, #108	@ 0x6c
 800c0d6:	af04      	add	r7, sp, #16
 800c0d8:	6078      	str	r0, [r7, #4]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM   status = PH_ERR_INTERNAL_ERROR;
 800c0da:	237f      	movs	r3, #127	@ 0x7f
 800c0dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t    PH_MEMLOC_BUF   aMaskBuffer[PHPAL_SLI15693_UID_LENGTH];
    uint8_t    PH_MEMLOC_REM   bMaskBitLength = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    uint8_t    PH_MEMLOC_REM   bUidLengthDummy;
    uint8_t    PH_MEMLOC_REM   bDataDummy[1];
    uint8_t    PH_MEMLOC_REM   bNextSlot = 1;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    uint16_t   PH_MEMLOC_REM   wDataLengthDummy;
    uint8_t    PH_MEMLOC_COUNT bSlot;
    uint8_t    PH_MEMLOC_REM   bSlotCount = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    uint8_t    PH_MEMLOC_COUNT bLevel = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    uint8_t    PH_MEMLOC_REM   bEnd = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint8_t    PH_MEMLOC_REM   bRepeat = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t    PH_MEMLOC_REM   bCount[16] = {0};
 800c104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	605a      	str	r2, [r3, #4]
 800c10e:	609a      	str	r2, [r3, #8]
 800c110:	60da      	str	r2, [r3, #12]
    uint16_t   PH_MEMLOC_REM   wCollisionLogReg[16] = {0};
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	2220      	movs	r2, #32
 800c118:	2100      	movs	r1, #0
 800c11a:	4618      	mov	r0, r3
 800c11c:	f012 ff04 	bl	801ef28 <memset>

    /* Symbol 0 */
    pDataParams->sTypeVTargetInfo.bTotalTagsFound = 0;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7f9b      	ldrb	r3, [r3, #30]
 800c12c:	f023 0310 	bic.w	r3, r3, #16
 800c130:	b2da      	uxtb	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	779a      	strb	r2, [r3, #30]

    /* Apply Guard time. */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_SetConfig(
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	8b1b      	ldrh	r3, [r3, #24]
 800c13e:	461a      	mov	r2, r3
 800c140:	2135      	movs	r1, #53	@ 0x35
 800c142:	f002 f9c9 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800c146:	4603      	mov	r3, r0
 800c148:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c14c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x88>
 800c154:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c158:	e2bf      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_POLL_GUARD_TIME_US,
        pDataParams->waPasPollGTimeUs[PHAC_DISCLOOP_TECH_TYPE_V]));

    /* Configure HW for the TypeV technology */
    PH_CHECK_SUCCESS_FCT(status, phhalHw_ApplyProtocolSettings(
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c15e:	2104      	movs	r1, #4
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fc3b 	bl	800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>
 800c166:	4603      	mov	r3, r0
 800c168:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c16c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <phacDiscLoop_Sw_Int_CollisionResolutionV+0xa8>
 800c174:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c178:	e2af      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        pDataParams->pHalDataParams,
        PHHAL_HW_CARDTYPE_ISO15693));

    /* Symbol 0 */
    status = phpalSli15693_Inventory(
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c184:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 800c188:	b2d9      	uxtb	r1, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	33e2      	adds	r3, #226	@ 0xe2
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	32e3      	adds	r2, #227	@ 0xe3
 800c192:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800c196:	9202      	str	r2, [sp, #8]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f00b fb46 	bl	8017834 <phpalSli15693_Sw_Inventory>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            bMaskBitLength,
            &pDataParams->sTypeVTargetInfo.aTypeV[0].bDsfid,
            pDataParams->sTypeVTargetInfo.aTypeV[0].aUid);

    /* Symbol 1 */
    if((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800c1ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d102      	bne.n	800c1be <phacDiscLoop_Sw_Int_CollisionResolutionV+0xec>
    {
        return status;
 800c1b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c1bc:	e28d      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }
    else
    {
        /* Symbol 2 */
        if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c1be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d111      	bne.n	800c1ec <phacDiscLoop_Sw_Int_CollisionResolutionV+0x11a>
        {
            /* Symbol 18 */
            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
            pDataParams->bNumOfCards++;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c1de:	3301      	adds	r3, #1
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            return PH_ERR_SUCCESS;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	e276      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c1ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d005      	beq.n	800c202 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x130>
                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800c1f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	f040 8260 	bne.w	800c6c2 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f0>
        {
            /* Symbol 3 */
            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7f9b      	ldrb	r3, [r3, #30]
 800c206:	f043 0310 	orr.w	r3, r3, #16
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	779a      	strb	r2, [r3, #30]

            /* Symbol 4 */
            if(pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V] == 0x00U)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7b9b      	ldrb	r3, [r3, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f040 8245 	bne.w	800c6a4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
            {
                return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_COLLISION_PENDING, PH_COMP_AC_DISCLOOP);
 800c21a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800c21e:	e25c      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
            do
            {
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
                {
                    /* Symbol 6 */
                    bSlot = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

                    /* Symbol 7 */
                    pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	7f9b      	ldrb	r3, [r3, #30]
 800c22a:	f023 0310 	bic.w	r3, r3, #16
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	779a      	strb	r2, [r3, #30]

                    /* Symbol 8 */
                    status = phpalSli15693_Inventory(
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800c23e:	f043 0304 	orr.w	r3, r3, #4
 800c242:	b2dc      	uxtb	r4, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c24a:	461a      	mov	r2, r3
 800c24c:	4613      	mov	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	4413      	add	r3, r2
 800c252:	33d8      	adds	r3, #216	@ 0xd8
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	4413      	add	r3, r2
 800c258:	f103 020a 	add.w	r2, r3, #10
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c262:	4619      	mov	r1, r3
 800c264:	460b      	mov	r3, r1
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	440b      	add	r3, r1
 800c26a:	33d8      	adds	r3, #216	@ 0xd8
 800c26c:	6879      	ldr	r1, [r7, #4]
 800c26e:	440b      	add	r3, r1
 800c270:	330b      	adds	r3, #11
 800c272:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800c276:	9302      	str	r3, [sp, #8]
 800c278:	9201      	str	r2, [sp, #4]
 800c27a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	460b      	mov	r3, r1
 800c282:	2200      	movs	r2, #0
 800c284:	4621      	mov	r1, r4
 800c286:	f00b fad5 	bl	8017834 <phpalSli15693_Sw_Inventory>
 800c28a:	4603      	mov	r3, r0
 800c28c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    {
                        /* Symbol 9 */
                        /* Protocol error scenario is not described in Activity Spec v2.2,
                         * but based on DTA Test case treating Protocol error similar to Timeout.
                         * */
                        if(((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT)
 800c290:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b01      	cmp	r3, #1
 800c298:	d04f      	beq.n	800c33a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            || ((status & PH_ERR_MASK) == PH_ERR_PROTOCOL_ERROR))
 800c29a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b06      	cmp	r3, #6
 800c2a2:	d04a      	beq.n	800c33a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        {
                            /* Continue with next slot */
                        }
                        /* Symbol 10 */
                        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c2a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d004      	beq.n	800c2b8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1e6>
                                || ((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR))
 800c2ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d11f      	bne.n	800c2f8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x226>
                        {
                            /* Symbol 16 */
                            pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7f9b      	ldrb	r3, [r3, #30]
 800c2bc:	f043 0310 	orr.w	r3, r3, #16
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	779a      	strb	r2, [r3, #30]
                            wCollisionLogReg[bLevel] |= ((uint16_t) 1U )<< bSlot;
 800c2c6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c2ca:	005b      	lsls	r3, r3, #1
 800c2cc:	3358      	adds	r3, #88	@ 0x58
 800c2ce:	443b      	add	r3, r7
 800c2d0:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c2d4:	b21a      	sxth	r2, r3
 800c2d6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c2da:	2101      	movs	r1, #1
 800c2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2e0:	b21b      	sxth	r3, r3
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	b21a      	sxth	r2, r3
 800c2e6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c2ea:	b292      	uxth	r2, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	3358      	adds	r3, #88	@ 0x58
 800c2f0:	443b      	add	r3, r7
 800c2f2:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800c2f6:	e020      	b.n	800c33a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                        }
                        else if((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 800c2f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d118      	bne.n	800c334 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x262>
                        {
                            /* Symbol 11 */
                            pDataParams->sTypeVTargetInfo.bTotalTagsFound++;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c308:	3301      	adds	r3, #1
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
                            pDataParams->bNumOfCards++;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c318:	3301      	adds	r3, #1
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

                            /* Symbol 12 */
                            if(pDataParams->sTypeVTargetInfo.bTotalTagsFound >= pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	7b9b      	ldrb	r3, [r3, #14]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d304      	bcc.n	800c33a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x268>
                            {
                                return PH_ERR_SUCCESS;
 800c330:	2300      	movs	r3, #0
 800c332:	e1d2      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                            }
                        }
                        else
                        {
                            /* For all other error types, return error */
                            return status;
 800c334:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c338:	e1cf      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }

                        /* Symbol 13, 14U */
                        if(++bSlot == 16U)
 800c33a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c33e:	3301      	adds	r3, #1
 800c340:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800c344:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800c348:	2b10      	cmp	r3, #16
 800c34a:	d102      	bne.n	800c352 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x280>
                        {
                            bNextSlot = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                        }

                        if(0U != (bNextSlot))
 800c352:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800c356:	2b00      	cmp	r3, #0
 800c358:	d032      	beq.n	800c3c0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
                        {
                            /* Symbol 15 */
                            status = phpalSli15693_SendEof(
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c364:	461a      	mov	r2, r3
 800c366:	4613      	mov	r3, r2
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	4413      	add	r3, r2
 800c36c:	33d8      	adds	r3, #216	@ 0xd8
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	4413      	add	r3, r2
 800c372:	f103 010a 	add.w	r1, r3, #10
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c37c:	461a      	mov	r2, r3
 800c37e:	4613      	mov	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4413      	add	r3, r2
 800c384:	33d8      	adds	r3, #216	@ 0xd8
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	4413      	add	r3, r2
 800c38a:	f103 020b 	add.w	r2, r3, #11
 800c38e:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800c392:	9302      	str	r3, [sp, #8]
 800c394:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	460a      	mov	r2, r1
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	f00b fa6f 	bl	8017888 <phpalSli15693_Sw_SendEof>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                    pDataParams->sTypeVTargetInfo.aTypeV[pDataParams->sTypeVTargetInfo.bTotalTagsFound].aUid,
                                    &bUidLengthDummy,
                                    bDataDummy,
                                    &wDataLengthDummy);
                            /* Return if status is aborted. */
                            PH_CHECK_ABORT(status);
 800c3b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b12      	cmp	r3, #18
 800c3b8:	d102      	bne.n	800c3c0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2ee>
 800c3ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c3be:	e18c      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
                        }
                    }
                    while(0U != bNextSlot);
 800c3c0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f47f af63 	bne.w	800c290 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x1be>
                    bNextSlot = 1;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                    do
                    {
                        bRepeat = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                        if (0U != (wCollisionLogReg[bLevel]))
 800c3d6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	3358      	adds	r3, #88	@ 0x58
 800c3de:	443b      	add	r3, r7
 800c3e0:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 8120 	beq.w	800c62a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x558>
                        {
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800c3ea:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c3ee:	3358      	adds	r3, #88	@ 0x58
 800c3f0:	443b      	add	r3, r7
 800c3f2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c3f6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800c3fa:	e110      	b.n	800c61e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x54c>
                            {
                                if (0U != (wCollisionLogReg[bLevel] & ((uint16_t)1U << bSlotCount)))
 800c3fc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	3358      	adds	r3, #88	@ 0x58
 800c404:	443b      	add	r3, r7
 800c406:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c40a:	461a      	mov	r2, r3
 800c40c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c410:	fa42 f303 	asr.w	r3, r2, r3
 800c414:	f003 0301 	and.w	r3, r3, #1
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 80c8 	beq.w	800c5ae <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4dc>
                                {
                                    /* Get bit-length of last valid byte */
                                    bUidLengthDummy = bMaskBitLength % (uint8_t)8U;
 800c41e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	b2db      	uxtb	r3, r3
 800c428:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                                    /* Whole byte is valid -> append slot number to next byte */
                                    if (bUidLengthDummy == 0U)
 800c42c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10a      	bne.n	800c44a <phacDiscLoop_Sw_Int_CollisionResolutionV+0x378>
                                    {
                                        aMaskBuffer[bMaskBitLength >> 3U] = bSlotCount;
 800c434:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c438:	08db      	lsrs	r3, r3, #3
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	3358      	adds	r3, #88	@ 0x58
 800c43e:	443b      	add	r3, r7
 800c440:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800c444:	f803 2c14 	strb.w	r2, [r3, #-20]
 800c448:	e047      	b.n	800c4da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                    }
                                    /* Partial byte is valid */
                                    else
                                    {
                                        /* Fill the invalid bits of the incomplete byte with the 4 bits slot number */
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] &= (uint8_t)((uint8_t)0xFF >> ((uint8_t)8U  - bUidLengthDummy));
 800c44a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c44e:	08db      	lsrs	r3, r3, #3
 800c450:	b2db      	uxtb	r3, r3
 800c452:	3358      	adds	r3, #88	@ 0x58
 800c454:	443b      	add	r3, r7
 800c456:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800c45a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c45e:	f1c3 0308 	rsb	r3, r3, #8
 800c462:	21ff      	movs	r1, #255	@ 0xff
 800c464:	fa41 f303 	asr.w	r3, r1, r3
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800c46e:	08c9      	lsrs	r1, r1, #3
 800c470:	b2c9      	uxtb	r1, r1
 800c472:	4013      	ands	r3, r2
 800c474:	b2da      	uxtb	r2, r3
 800c476:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800c47a:	443b      	add	r3, r7
 800c47c:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        aMaskBuffer[bMaskBitLength >> (uint8_t)3U] |= (uint8_t)(bSlotCount << bUidLengthDummy);
 800c480:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c484:	08db      	lsrs	r3, r3, #3
 800c486:	b2db      	uxtb	r3, r3
 800c488:	3358      	adds	r3, #88	@ 0x58
 800c48a:	443b      	add	r3, r7
 800c48c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800c490:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c494:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800c498:	408b      	lsls	r3, r1
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f897 1055 	ldrb.w	r1, [r7, #85]	@ 0x55
 800c4a0:	08c9      	lsrs	r1, r1, #3
 800c4a2:	b2c9      	uxtb	r1, r1
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 800c4ac:	443b      	add	r3, r7
 800c4ae:	f803 2c14 	strb.w	r2, [r3, #-20]

                                        /* If not all 4 bits of the Slot number fit in the incomplete byte, put the rest in the next byte */
                                        if (bUidLengthDummy > 4U)
 800c4b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	2b04      	cmp	r3, #4
 800c4b8:	d90f      	bls.n	800c4da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x408>
                                        {
                                            aMaskBuffer[(bMaskBitLength >> 3U) + 1U] = (uint8_t)(bSlotCount >> bUidLengthDummy);
 800c4ba:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c4be:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800c4c2:	fa43 f202 	asr.w	r2, r3, r2
 800c4c6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c4ca:	08db      	lsrs	r3, r3, #3
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b2d2      	uxtb	r2, r2
 800c4d2:	3358      	adds	r3, #88	@ 0x58
 800c4d4:	443b      	add	r3, r7
 800c4d6:	f803 2c14 	strb.w	r2, [r3, #-20]
                                        }
                                    }

                                    /* Increment the bit length by the 4 bits slot number */
                                    bMaskBitLength = bMaskBitLength + 4U;
 800c4da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c4de:	3304      	adds	r3, #4
 800c4e0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                    pDataParams->bCollPend |= PHAC_DISCLOOP_POS_BIT_MASK_V;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	7f9b      	ldrb	r3, [r3, #30]
 800c4e8:	f043 0310 	orr.w	r3, r3, #16
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	779a      	strb	r2, [r3, #30]
                                    wCollisionLogReg[bLevel] =  wCollisionLogReg[bLevel] & ~((uint16_t)1U  << bSlotCount);
 800c4f2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c4f6:	005b      	lsls	r3, r3, #1
 800c4f8:	3358      	adds	r3, #88	@ 0x58
 800c4fa:	443b      	add	r3, r7
 800c4fc:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 800c500:	b21a      	sxth	r2, r3
 800c502:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c506:	2101      	movs	r1, #1
 800c508:	fa01 f303 	lsl.w	r3, r1, r3
 800c50c:	b21b      	sxth	r3, r3
 800c50e:	43db      	mvns	r3, r3
 800c510:	b21b      	sxth	r3, r3
 800c512:	4013      	ands	r3, r2
 800c514:	b21a      	sxth	r2, r3
 800c516:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c51a:	b292      	uxth	r2, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	3358      	adds	r3, #88	@ 0x58
 800c520:	443b      	add	r3, r7
 800c522:	f823 2c4c 	strh.w	r2, [r3, #-76]

                                    if(bSlotCount == 0x0FU)
 800c526:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c52a:	2b0f      	cmp	r3, #15
 800c52c:	d124      	bne.n	800c578 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x4a6>
                                    {
                                        bCount[bLevel] = 0U;
 800c52e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c532:	3358      	adds	r3, #88	@ 0x58
 800c534:	443b      	add	r3, r7
 800c536:	2200      	movs	r2, #0
 800c538:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        wCollisionLogReg[bLevel] = 0U;
 800c53c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	3358      	adds	r3, #88	@ 0x58
 800c544:	443b      	add	r3, r7
 800c546:	2200      	movs	r2, #0
 800c548:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                        if(bLevel == 0U)
 800c54c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c550:	2b00      	cmp	r3, #0
 800c552:	d103      	bne.n	800c55c <phacDiscLoop_Sw_Int_CollisionResolutionV+0x48a>
                                        {
                                            bEnd = 1;
 800c554:	2301      	movs	r3, #1
 800c556:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                    {
                                        bCount[bLevel] = bSlotCount;
                                        bCount[bLevel]++;
                                        bLevel++;
                                    }
                                    break;
 800c55a:	e098      	b.n	800c68e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                            bCount[bLevel] = bSlotCount;
 800c55c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c560:	3358      	adds	r3, #88	@ 0x58
 800c562:	443b      	add	r3, r7
 800c564:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800c568:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel++;
 800c56c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c570:	3301      	adds	r3, #1
 800c572:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800c576:	e08a      	b.n	800c68e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                        bCount[bLevel] = bSlotCount;
 800c578:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c57c:	3358      	adds	r3, #88	@ 0x58
 800c57e:	443b      	add	r3, r7
 800c580:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800c584:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bCount[bLevel]++;
 800c588:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c58c:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800c590:	443a      	add	r2, r7
 800c592:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 800c596:	3201      	adds	r2, #1
 800c598:	b2d2      	uxtb	r2, r2
 800c59a:	3358      	adds	r3, #88	@ 0x58
 800c59c:	443b      	add	r3, r7
 800c59e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                        bLevel++;
 800c5a2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                    break;
 800c5ac:	e06f      	b.n	800c68e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                                else
                                {
                                    if(bSlotCount == 0x0FU)
 800c5ae:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c5b2:	2b0f      	cmp	r3, #15
 800c5b4:	d12e      	bne.n	800c614 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                    {
                                        if(bLevel == 0U)
 800c5b6:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x502>
                                        {
                                            bEnd = 1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7f9b      	ldrb	r3, [r3, #30]
 800c5c8:	f023 0310 	bic.w	r3, r3, #16
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	779a      	strb	r2, [r3, #30]
 800c5d2:	e01f      	b.n	800c614 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x542>
                                        }
                                        else
                                        {
                                            /* Decrement the bit length by the 4 bits slot number */
                                            pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7f9b      	ldrb	r3, [r3, #30]
 800c5d8:	f023 0310 	bic.w	r3, r3, #16
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	779a      	strb	r2, [r3, #30]
                                            bMaskBitLength = bMaskBitLength - 4u;
 800c5e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c5e6:	3b04      	subs	r3, #4
 800c5e8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                            wCollisionLogReg[bLevel] = 0;
 800c5ec:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	3358      	adds	r3, #88	@ 0x58
 800c5f4:	443b      	add	r3, r7
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                            bCount[bLevel] = 0;
 800c5fc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c600:	3358      	adds	r3, #88	@ 0x58
 800c602:	443b      	add	r3, r7
 800c604:	2200      	movs	r2, #0
 800c606:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                            bLevel--;
 800c60a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c60e:	3b01      	subs	r3, #1
 800c610:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                            for (bSlotCount = bCount[bLevel]; bSlotCount < 16U; bSlotCount++)
 800c614:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c618:	3301      	adds	r3, #1
 800c61a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800c61e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800c622:	2b0f      	cmp	r3, #15
 800c624:	f67f aeea 	bls.w	800c3fc <phacDiscLoop_Sw_Int_CollisionResolutionV+0x32a>
 800c628:	e031      	b.n	800c68e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                                }
                            }
                        }
                        else
                        {
                            if(bLevel == 0U)
 800c62a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x576>
                            {
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	7f9b      	ldrb	r3, [r3, #30]
 800c636:	f023 0310 	bic.w	r3, r3, #16
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	779a      	strb	r2, [r3, #30]
                                bEnd = 1;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 800c646:	e022      	b.n	800c68e <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5bc>
                            }
                            else
                            {
                                /* Decrement the bit length by the 4 bits slot number */
                                pDataParams->bCollPend &= (uint8_t)~(uint8_t)(PHAC_DISCLOOP_POS_BIT_MASK_V);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7f9b      	ldrb	r3, [r3, #30]
 800c64c:	f023 0310 	bic.w	r3, r3, #16
 800c650:	b2da      	uxtb	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	779a      	strb	r2, [r3, #30]
                                bMaskBitLength = bMaskBitLength - 4u;
 800c656:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800c65a:	3b04      	subs	r3, #4
 800c65c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                                wCollisionLogReg[bLevel] = 0;
 800c660:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	3358      	adds	r3, #88	@ 0x58
 800c668:	443b      	add	r3, r7
 800c66a:	2200      	movs	r2, #0
 800c66c:	f823 2c4c 	strh.w	r2, [r3, #-76]
                                bCount[bLevel] = 0;
 800c670:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c674:	3358      	adds	r3, #88	@ 0x58
 800c676:	443b      	add	r3, r7
 800c678:	2200      	movs	r2, #0
 800c67a:	f803 2c2c 	strb.w	r2, [r3, #-44]
                                bLevel--;
 800c67e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800c682:	3b01      	subs	r3, #1
 800c684:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                                bRepeat = 1;
 800c688:	2301      	movs	r3, #1
 800c68a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                            }
                        }
                    }while(0U != bRepeat);
 800c68e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c692:	2b00      	cmp	r3, #0
 800c694:	f47f ae9c 	bne.w	800c3d0 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x2fe>

                    /* Symbol 17 */
                    if((0U == ((pDataParams->bCollPend & PHAC_DISCLOOP_POS_BIT_MASK_V))))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7f9b      	ldrb	r3, [r3, #30]
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d008      	beq.n	800c6b6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e4>
                while(pDataParams->sTypeVTargetInfo.bTotalTagsFound < pDataParams->baPasConDevLim[PHAC_DISCLOOP_TECH_TYPE_V])
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 20df 	ldrb.w	r2, [r3, #223]	@ 0xdf
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7b9b      	ldrb	r3, [r3, #14]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	f4ff adb6 	bcc.w	800c220 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x14e>
 800c6b4:	e000      	b.n	800c6b8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5e6>
                    {
                        break;
 800c6b6:	bf00      	nop
                    }
                }
            }while(0U == bEnd);
 800c6b8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d0f1      	beq.n	800c6a4 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5d2>
        else if(((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 800c6c0:	e002      	b.n	800c6c8 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x5f6>
        }
        else
        {
            /* For all other error types, return error */
            return status;
 800c6c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c6c6:	e008      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
        }
    }

    if(0U != (pDataParams->sTypeVTargetInfo.bTotalTagsFound))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <phacDiscLoop_Sw_Int_CollisionResolutionV+0x604>
    {
        return PH_ERR_SUCCESS;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	e001      	b.n	800c6da <phacDiscLoop_Sw_Int_CollisionResolutionV+0x608>
    }

    return PH_ADD_COMPCODE_FIXED(PHAC_DISCLOOP_NO_DEVICE_RESOLVED, PH_COMP_AC_DISCLOOP);
 800c6d6:	f244 0385 	movw	r3, #16517	@ 0x4085
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	375c      	adds	r7, #92	@ 0x5c
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd90      	pop	{r4, r7, pc}

0800c6e2 <phacDiscLoop_Sw_Int_ActivateV>:

phStatus_t phacDiscLoop_Sw_Int_ActivateV(
        phacDiscLoop_Sw_DataParams_t * pDataParams,
        uint8_t bTypeVTagIdx
)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	70fb      	strb	r3, [r7, #3]
#ifdef NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS
    phStatus_t PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 800c6ee:	237f      	movs	r3, #127	@ 0x7f
 800c6f0:	81fb      	strh	r3, [r7, #14]

    if ((bTypeVTagIdx >= pDataParams->sTypeVTargetInfo.bTotalTagsFound) || ( bTypeVTagIdx >= PHAC_DISCLOOP_CFG_MAX_VICINITY_CARDS_SUPPORTED ))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 800c6f8:	78fa      	ldrb	r2, [r7, #3]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d202      	bcs.n	800c704 <phacDiscLoop_Sw_Int_ActivateV+0x22>
 800c6fe:	78fb      	ldrb	r3, [r7, #3]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <phacDiscLoop_Sw_Int_ActivateV+0x28>
    {
        /* Out of range */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_AC_DISCLOOP);
 800c704:	f244 0321 	movw	r3, #16417	@ 0x4021
 800c708:	e026      	b.n	800c758 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    /* Set the UID to be selected and the UID length into PAL */
    PH_CHECK_SUCCESS_FCT(status, phpalSli15693_SetSerialNo(
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c70e:	78fa      	ldrb	r2, [r7, #3]
 800c710:	4613      	mov	r3, r2
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	4413      	add	r3, r2
 800c716:	33d8      	adds	r3, #216	@ 0xd8
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	4413      	add	r3, r2
 800c71c:	330b      	adds	r3, #11
 800c71e:	2208      	movs	r2, #8
 800c720:	4619      	mov	r1, r3
 800c722:	f00b fbf1 	bl	8017f08 <phpalSli15693_Sw_SetSerialNo>
 800c726:	4603      	mov	r3, r0
 800c728:	81fb      	strh	r3, [r7, #14]
 800c72a:	89fb      	ldrh	r3, [r7, #14]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <phacDiscLoop_Sw_Int_ActivateV+0x52>
 800c730:	89fb      	ldrh	r3, [r7, #14]
 800c732:	e011      	b.n	800c758 <phacDiscLoop_Sw_Int_ActivateV+0x76>
            pDataParams->pPalSli15693DataParams,
            pDataParams->sTypeVTargetInfo.aTypeV[bTypeVTagIdx].aUid,
            PHPAL_SLI15693_UID_LENGTH));

    /* Skip Select command as per Activity specification v2.2, section 9.4.7.1 Symbol 0 */
    if (pDataParams->sTypeVTargetInfo.bMode == PHPAL_SLI15693_FLAG_SELECTED)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800c73a:	2b10      	cmp	r3, #16
 800c73c:	d10b      	bne.n	800c756 <phacDiscLoop_Sw_Int_ActivateV+0x74>
    {
        /* Move the tag to selected state */
        PH_CHECK_SUCCESS_FCT(status, phpalSli15693_Select(pDataParams->pPalSli15693DataParams));
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c742:	4618      	mov	r0, r3
 800c744:	f00b fa78 	bl	8017c38 <phpalSli15693_Sw_Select>
 800c748:	4603      	mov	r3, r0
 800c74a:	81fb      	strh	r3, [r7, #14]
 800c74c:	89fb      	ldrh	r3, [r7, #14]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <phacDiscLoop_Sw_Int_ActivateV+0x74>
 800c752:	89fb      	ldrh	r3, [r7, #14]
 800c754:	e000      	b.n	800c758 <phacDiscLoop_Sw_Int_ActivateV+0x76>
    }

    return PH_ERR_SUCCESS;
 800c756:	2300      	movs	r3, #0
#else
    return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_COMMAND, PH_COMP_AC_DISCLOOP);
#endif /* NXPBUILD__PHAC_DISCLOOP_TYPEV_TAGS */
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <phalFelica_Sw_Init>:
phStatus_t phalFelica_Sw_Init(
                              phalFelica_Sw_DataParams_t * pDataParams,
                              uint16_t wSizeOfDataParams,
                              void * pPalFelica_DataParams
                              )
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	460b      	mov	r3, r1
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 800c76e:	897b      	ldrh	r3, [r7, #10]
 800c770:	2b0c      	cmp	r3, #12
 800c772:	d002      	beq.n	800c77a <phalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_FELICA);
 800c774:	f44f 53a1 	mov.w	r3, #5152	@ 0x1420
 800c778:	e014      	b.n	800c7a4 <phalFelica_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <phalFelica_Sw_Init+0x24>
 800c780:	2321      	movs	r3, #33	@ 0x21
 800c782:	e00f      	b.n	800c7a4 <phalFelica_Sw_Init+0x44>
    PH_ASSERT_NULL (pPalFelica_DataParams);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d101      	bne.n	800c78e <phalFelica_Sw_Init+0x2e>
 800c78a:	2321      	movs	r3, #33	@ 0x21
 800c78c:	e00a      	b.n	800c7a4 <phalFelica_Sw_Init+0x44>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_FELICA | PHAL_FELICA_SW_ID;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f241 4201 	movw	r2, #5121	@ 0x1401
 800c794:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalFelicaDataParams   = pPalFelica_DataParams;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo        = 0x0000;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	811a      	strh	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <phalI18000p3m3_Sw_Init>:
phStatus_t phalI18000p3m3_Sw_Init(
                                  phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pPalI18000p3m3DataParams
                                  )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 800c7be:	897b      	ldrh	r3, [r7, #10]
 800c7c0:	2b0c      	cmp	r3, #12
 800c7c2:	d002      	beq.n	800c7ca <phalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_I18000P3M3);
 800c7c4:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800c7c8:	e01a      	b.n	800c800 <phalI18000p3m3_Sw_Init+0x50>
    }
    PH_ASSERT_NULL (pDataParams);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <phalI18000p3m3_Sw_Init+0x24>
 800c7d0:	2321      	movs	r3, #33	@ 0x21
 800c7d2:	e015      	b.n	800c800 <phalI18000p3m3_Sw_Init+0x50>
    PH_ASSERT_NULL (pPalI18000p3m3DataParams);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <phalI18000p3m3_Sw_Init+0x2e>
 800c7da:	2321      	movs	r3, #33	@ 0x21
 800c7dc:	e010      	b.n	800c800 <phalI18000p3m3_Sw_Init+0x50>

    pDataParams->wId                        = PH_COMP_AL_I18000P3M3 | PHAL_I18000P3M3_SW_ID;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f641 0201 	movw	r2, #6145	@ 0x1801
 800c7e4:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI18000p3m3DataParams   = pPalI18000p3m3DataParams;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	605a      	str	r2, [r3, #4]
    pDataParams->bHandleValid               = PH_OFF;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	729a      	strb	r2, [r3, #10]
    pDataParams->abHandle[0]                = PH_OFF;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	721a      	strb	r2, [r3, #8]
    pDataParams->abHandle[1]                = PH_OFF;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	725a      	strb	r2, [r3, #9]

    return PH_ERR_SUCCESS;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <phalI18000p3m3_Sw_SetHandle>:

phStatus_t phalI18000p3m3_Sw_SetHandle(
                                       phalI18000p3m3_Sw_DataParams_t * pDataParams,
                                       uint8_t* pHandle
                                       )
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->abHandle, pHandle, 2);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3308      	adds	r3, #8
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	8812      	ldrh	r2, [r2, #0]
 800c81e:	b292      	uxth	r2, r2
 800c820:	801a      	strh	r2, [r3, #0]
    pDataParams->bHandleValid = PH_ON;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	729a      	strb	r2, [r3, #10]
    return PH_ERR_SUCCESS;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <phalICode_Sw_Init>:
 *          PH_ERR_SUCCESS for successfull operation.
 *          Other Depending on implementation and underlaying component.
 */
phStatus_t phalICode_Sw_Init(phalICode_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalSli15693DataParams, void * pCryptoDataParams,
        void * pCryptoRngDataParams, void * pKeyStoreDataParams)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
 800c842:	460b      	mov	r3, r1
 800c844:	817b      	strh	r3, [r7, #10]
    /* Validate the parameters. */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_ICODE);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <phalICode_Sw_Init+0x1c>
 800c84c:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800c850:	e026      	b.n	800c8a0 <phalICode_Sw_Init+0x6a>
    PH_ASSERT_NULL_PARAM(pPalSli15693DataParams, PH_COMP_AL_ICODE);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d102      	bne.n	800c85e <phalICode_Sw_Init+0x28>
 800c858:	f241 5321 	movw	r3, #5409	@ 0x1521
 800c85c:	e020      	b.n	800c8a0 <phalICode_Sw_Init+0x6a>

    /* Check the size. */
    if (sizeof(phalICode_Sw_DataParams_t) != wSizeOfDataParams)
 800c85e:	897b      	ldrh	r3, [r7, #10]
 800c860:	2b20      	cmp	r3, #32
 800c862:	d002      	beq.n	800c86a <phalICode_Sw_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_ICODE);
 800c864:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800c868:	e01a      	b.n	800c8a0 <phalICode_Sw_Init+0x6a>
    }

    /* Initialize the structure members. */
    pDataParams->wId                    = PH_COMP_AL_ICODE | PHAL_ICODE_SW_ID;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f241 5201 	movw	r2, #5377	@ 0x1501
 800c870:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalSli15693DataParams = pPalSli15693DataParams;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	605a      	str	r2, [r3, #4]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	69ba      	ldr	r2, [r7, #24]
 800c882:	60da      	str	r2, [r3, #12]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	69fa      	ldr	r2, [r7, #28]
 800c888:	611a      	str	r2, [r3, #16]
    pDataParams->bBuffering             = PH_ON;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	779a      	strb	r2, [r3, #30]

    /* Reset the random number buffer. */
    (void)memset(pDataParams->aRnd_Challenge, 0x00, PHAL_ICODE_RANDOM_NUMBER_SIZE);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3314      	adds	r3, #20
 800c894:	220a      	movs	r2, #10
 800c896:	2100      	movs	r1, #0
 800c898:	4618      	mov	r0, r3
 800c89a:	f012 fb45 	bl	801ef28 <memset>

    return PH_ERR_SUCCESS;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <phalMfNtag42XDna_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)	(((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfNtag42XDna_Sw_Init(phalMfNtag42XDna_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pHalDataParams)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	603b      	str	r3, [r7, #0]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfNtag42XDna_Sw_DataParams_t) != wSizeOfDataParams)
 800c8b8:	897b      	ldrh	r3, [r7, #10]
 800c8ba:	2ba8      	cmp	r3, #168	@ 0xa8
 800c8bc:	d002      	beq.n	800c8c4 <phalMfNtag42XDna_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFNTAG42XDNA);
 800c8be:	f242 6320 	movw	r3, #9760	@ 0x2620
 800c8c2:	e0a1      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d102      	bne.n	800c8d0 <phalMfNtag42XDna_Sw_Init+0x28>
 800c8ca:	f242 6320 	movw	r3, #9760	@ 0x2620
 800c8ce:	e09b      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <phalMfNtag42XDna_Sw_Init+0x34>
 800c8d6:	f242 6321 	movw	r3, #9761	@ 0x2621
 800c8da:	e095      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d102      	bne.n	800c8e8 <phalMfNtag42XDna_Sw_Init+0x40>
 800c8e2:	f242 6321 	movw	r3, #9761	@ 0x2621
 800c8e6:	e08f      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFNTAG42XDNA);
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d102      	bne.n	800c8f4 <phalMfNtag42XDna_Sw_Init+0x4c>
 800c8ee:	f242 6321 	movw	r3, #9761	@ 0x2621
 800c8f2:	e089      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFNTAG42XDNA);
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d102      	bne.n	800c900 <phalMfNtag42XDna_Sw_Init+0x58>
 800c8fa:	f242 6321 	movw	r3, #9761	@ 0x2621
 800c8fe:	e083      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d102      	bne.n	800c90c <phalMfNtag42XDna_Sw_Init+0x64>
 800c906:	f242 6321 	movw	r3, #9761	@ 0x2621
 800c90a:	e07d      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFNTAG42XDNA);
 800c90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d102      	bne.n	800c918 <phalMfNtag42XDna_Sw_Init+0x70>
 800c912:	f242 6321 	movw	r3, #9761	@ 0x2621
 800c916:	e077      	b.n	800ca08 <phalMfNtag42XDna_Sw_Init+0x160>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFNTAG42XDNA | PHAL_MFNTAG42XDNA_SW_ID;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f242 6201 	movw	r2, #9729	@ 0x2601
 800c91e:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	69ba      	ldr	r2, [r7, #24]
 800c930:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	69fa      	ldr	r2, [r7, #28]
 800c936:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a3a      	ldr	r2, [r7, #32]
 800c93c:	615a      	str	r2, [r3, #20]
    pDataParams->pHalDataParams         = pHalDataParams;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c942:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f246 3263 	movw	r2, #25443	@ 0x6363
 800c94a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f04f 32ff 	mov.w	r2, #4294967295
 800c954:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24);  /* PRQA S 3200 */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	331c      	adds	r3, #28
 800c95a:	2218      	movs	r2, #24
 800c95c:	2100      	movs	r1, #0
 800c95e:	4618      	mov	r0, r3
 800c960:	f012 fae2 	bl	801ef28 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	22ff      	movs	r2, #255	@ 0xff
 800c968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16); /* PRQA S 3200 */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3335      	adds	r3, #53	@ 0x35
 800c970:	2210      	movs	r2, #16
 800c972:	2100      	movs	r1, #0
 800c974:	4618      	mov	r0, r3
 800c976:	f012 fad7 	bl	801ef28 <memset>
    memset(pDataParams->pAid, 0x00, 3);  /* PRQA S 3200 */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3346      	adds	r3, #70	@ 0x46
 800c97e:	2203      	movs	r2, #3
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f012 fad0 	bl	801ef28 <memset>
    pDataParams->bAuthMode = PHAL_MFNTAG42XDNA_NOT_AUTHENTICATED; /* Set to invalid */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	22ff      	movs	r2, #255	@ 0xff
 800c98c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	22ff      	movs	r2, #255	@ 0xff
 800c99c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    pDataParams->dwPayLoadLen = 0;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFNTAG42XDNA_SIZE_TI);  /* PRQA S 3200 */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	335e      	adds	r3, #94	@ 0x5e
 800c9c2:	2204      	movs	r2, #4
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f012 faae 	bl	801ef28 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16);  /* PRQA S 3200 */
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3362      	adds	r3, #98	@ 0x62
 800c9d0:	2210      	movs	r2, #16
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f012 faa7 	bl	801ef28 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFNTAG42XDNA_SIZE_MAC);  /* PRQA S 3200 */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3382      	adds	r3, #130	@ 0x82
 800c9de:	2210      	movs	r2, #16
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f012 faa0 	bl	801ef28 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16);  /* PRQA S 3200 */
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3393      	adds	r3, #147	@ 0x93
 800c9f4:	2210      	movs	r2, #16
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f012 fa95 	bl	801ef28 <memset>
    pDataParams->bLastBlockIndex = 0;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <phalMfc_Sw_Init>:
                           phalMfc_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalMifareDataParams,
                           void * pKeyStoreDataParams
                           )
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	607a      	str	r2, [r7, #4]
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMfc_Sw_DataParams_t) != wSizeOfDataParams)
 800ca20:	897b      	ldrh	r3, [r7, #10]
 800ca22:	2b0c      	cmp	r3, #12
 800ca24:	d002      	beq.n	800ca2c <phalMfc_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFC);
 800ca26:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800ca2a:	e014      	b.n	800ca56 <phalMfc_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <phalMfc_Sw_Init+0x26>
 800ca32:	2321      	movs	r3, #33	@ 0x21
 800ca34:	e00f      	b.n	800ca56 <phalMfc_Sw_Init+0x46>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <phalMfc_Sw_Init+0x30>
 800ca3c:	2321      	movs	r3, #33	@ 0x21
 800ca3e:	e00a      	b.n	800ca56 <phalMfc_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFC | PHAL_MFC_SW_ID;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f241 0201 	movw	r2, #4097	@ 0x1001
 800ca46:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	609a      	str	r2, [r3, #8]

    return PH_ERR_SUCCESS;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <phalMfdf_Sw_Init>:
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParamsEnc,
                            void * pCryptoRngDataParams,
                            void * pHalDataParams
                            )
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	607a      	str	r2, [r7, #4]
 800ca6c:	603b      	str	r3, [r7, #0]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdf_Sw_DataParams_t) != wSizeOfDataParams)
 800ca72:	897b      	ldrh	r3, [r7, #10]
 800ca74:	2b68      	cmp	r3, #104	@ 0x68
 800ca76:	d002      	beq.n	800ca7e <phalMfdf_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDF);
 800ca78:	f44f 53c9 	mov.w	r3, #6432	@ 0x1920
 800ca7c:	e057      	b.n	800cb2e <phalMfdf_Sw_Init+0xcc>
    }
    PH_ASSERT_NULL (pDataParams);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d101      	bne.n	800ca88 <phalMfdf_Sw_Init+0x26>
 800ca84:	2321      	movs	r3, #33	@ 0x21
 800ca86:	e052      	b.n	800cb2e <phalMfdf_Sw_Init+0xcc>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <phalMfdf_Sw_Init+0x30>
 800ca8e:	2321      	movs	r3, #33	@ 0x21
 800ca90:	e04d      	b.n	800cb2e <phalMfdf_Sw_Init+0xcc>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDF | PHAL_MFDF_SW_ID;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f641 1201 	movw	r2, #6401	@ 0x1901
 800ca98:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	69ba      	ldr	r2, [r7, #24]
 800caaa:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	69fa      	ldr	r2, [r7, #28]
 800cab0:	611a      	str	r2, [r3, #16]
    pDataParams->bLastBlockIndex        = 0;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    pDataParams->pHalDataParams  = pHalDataParams;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6a3a      	ldr	r2, [r7, #32]
 800cabe:	615a      	str	r2, [r3, #20]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f246 3263 	movw	r2, #25443	@ 0x6363
 800cac6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f04f 32ff 	mov.w	r2, #4294967295
 800cad0:	64da      	str	r2, [r3, #76]	@ 0x4c

    (void)memset(pDataParams->bSessionKey, 0x00, 24);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3318      	adds	r3, #24
 800cad6:	2218      	movs	r2, #24
 800cad8:	2100      	movs	r1, #0
 800cada:	4618      	mov	r0, r3
 800cadc:	f012 fa24 	bl	801ef28 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	22ff      	movs	r2, #255	@ 0xff
 800cae4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    (void)memset(pDataParams->bIv, 0x00, 16);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	3331      	adds	r3, #49	@ 0x31
 800caec:	2210      	movs	r2, #16
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f012 fa19 	bl	801ef28 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	3342      	adds	r3, #66	@ 0x42
 800cafa:	2203      	movs	r2, #3
 800cafc:	2100      	movs	r1, #0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f012 fa12 	bl	801ef28 <memset>
    pDataParams->bAuthMode = PHAL_MFDF_NOT_AUTHENTICATED; /* Set to invalid */
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	22ff      	movs	r2, #255	@ 0xff
 800cb08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->bWrappedMode = 0x00; /* Set to FALSE */
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	22ff      	movs	r2, #255	@ 0xff
 800cb18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->wAdditionalInfo = 0x0000;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pDataParams->wPayLoadLen = 0;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    return PH_ERR_SUCCESS;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <phalMfdfEVx_Sw_Init>:
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7fU) > 0x23U)

phStatus_t phalMfdfEVx_Sw_Init(phalMfdfEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pTMIDataParams, void * pVCADataParams, void * pHalDataParams)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
 800cb42:	460b      	mov	r3, r1
 800cb44:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800cb46:	897b      	ldrh	r3, [r7, #10]
 800cb48:	2bb4      	cmp	r3, #180	@ 0xb4
 800cb4a:	d002      	beq.n	800cb52 <phalMfdfEVx_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFEVX);
 800cb4c:	f242 0320 	movw	r3, #8224	@ 0x2020
 800cb50:	e09f      	b.n	800cc92 <phalMfdfEVx_Sw_Init+0x15c>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFDFEVX);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <phalMfdfEVx_Sw_Init+0x28>
 800cb58:	f242 0320 	movw	r3, #8224	@ 0x2020
 800cb5c:	e099      	b.n	800cc92 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFDFEVX);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <phalMfdfEVx_Sw_Init+0x34>
 800cb64:	f242 0321 	movw	r3, #8225	@ 0x2021
 800cb68:	e093      	b.n	800cc92 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFDFEVX);
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d102      	bne.n	800cb76 <phalMfdfEVx_Sw_Init+0x40>
 800cb70:	f242 0321 	movw	r3, #8225	@ 0x2021
 800cb74:	e08d      	b.n	800cc92 <phalMfdfEVx_Sw_Init+0x15c>
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFDFEVX);
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d102      	bne.n	800cb82 <phalMfdfEVx_Sw_Init+0x4c>
 800cb7c:	f242 0321 	movw	r3, #8225	@ 0x2021
 800cb80:	e087      	b.n	800cc92 <phalMfdfEVx_Sw_Init+0x15c>

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFDFEVX | PHAL_MFDFEVX_SW_ID;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f242 0201 	movw	r2, #8193	@ 0x2001
 800cb88:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	69fa      	ldr	r2, [r7, #28]
 800cba0:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6a3a      	ldr	r2, [r7, #32]
 800cba6:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pDataParams->pVCADataParams = pVCADataParams;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    pDataParams->pHalDataParams = pHalDataParams;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbbc:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f246 3263 	movw	r2, #25443	@ 0x6363
 800cbc4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f04f 32ff 	mov.w	r2, #4294967295
 800cbce:	651a      	str	r2, [r3, #80]	@ 0x50

    (void)memset(pDataParams->bSesAuthENCKey, 0x00, 24);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	331c      	adds	r3, #28
 800cbd4:	2218      	movs	r2, #24
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f012 f9a5 	bl	801ef28 <memset>
    pDataParams->bKeyNo = 0xFF; /* Set to invalid */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	22ff      	movs	r2, #255	@ 0xff
 800cbe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    (void)memset(pDataParams->bIv, 0x00, 16);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3335      	adds	r3, #53	@ 0x35
 800cbea:	2210      	movs	r2, #16
 800cbec:	2100      	movs	r1, #0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f012 f99a 	bl	801ef28 <memset>
    (void)memset(pDataParams->pAid, 0x00, 3);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3347      	adds	r3, #71	@ 0x47
 800cbf8:	2203      	movs	r2, #3
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f012 f993 	bl	801ef28 <memset>
    pDataParams->bAuthMode = PHAL_MFDFEVX_NOT_AUTHENTICATED; /* Set to invalid */
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	22ff      	movs	r2, #255	@ 0xff
 800cc06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x00; /* Set to false */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    pDataParams->bCryptoMethod = 0xFF; /* No crypto just after init */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	22ff      	movs	r2, #255	@ 0xff
 800cc16:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->wAdditionalInfo = 0x0000;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x00; /* By default, extended length APDU format is used for BIG ISO Read */
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    pDataParams->dwPayLoadLen = 0;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    (void)memset(pDataParams->bTi, 0x00, PHAL_MFDFEVX_SIZE_TI);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	335e      	adds	r3, #94	@ 0x5e
 800cc3c:	2204      	movs	r2, #4
 800cc3e:	2100      	movs	r1, #0
 800cc40:	4618      	mov	r0, r3
 800cc42:	f012 f971 	bl	801ef28 <memset>
    (void)memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	3362      	adds	r3, #98	@ 0x62
 800cc4a:	2210      	movs	r2, #16
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f012 f96a 	bl	801ef28 <memset>
    (void)memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFEVX_SIZE_MAC);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	3372      	adds	r3, #114	@ 0x72
 800cc58:	2210      	movs	r2, #16
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f012 f963 	bl	801ef28 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    (void)memset(pDataParams->bLastBlockBuffer, 0x00, 16);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3383      	adds	r3, #131	@ 0x83
 800cc6e:	2210      	movs	r2, #16
 800cc70:	2100      	movs	r1, #0
 800cc72:	4618      	mov	r0, r3
 800cc74:	f012 f958 	bl	801ef28 <memset>
    pDataParams->bLastBlockIndex = 0;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    pDataParams->bCmdCode = PHAL_MFDFEVX_CMD_INVALID;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	22ff      	movs	r2, #255	@ 0xff
 800cc84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bReturn_FabID = PH_OFF;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    return PH_ERR_SUCCESS;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <phalMfdfLight_Sw_Init>:
/* VC keys are invalid after 0x23. */
 #define IS_INVALID_VC_KEY(keyNo)   (((keyNo) & 0x7FU) > 0x23U)

phStatus_t phalMfdfLight_Sw_Init(phalMfdfLight_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams, void * pTMIDataParams, void * pHalDataParams)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	603b      	str	r3, [r7, #0]
 800cca6:	460b      	mov	r3, r1
 800cca8:	817b      	strh	r3, [r7, #10]
    /* data param check */
    if (sizeof(phalMfdfLight_Sw_DataParams_t) != wSizeOfDataParams)
 800ccaa:	897b      	ldrh	r3, [r7, #10]
 800ccac:	2bac      	cmp	r3, #172	@ 0xac
 800ccae:	d002      	beq.n	800ccb6 <phalMfdfLight_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFDFLIGHT);
 800ccb0:	f242 3320 	movw	r3, #8992	@ 0x2320
 800ccb4:	e0ab      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
    }

    PH_ASSERT_NULL_DATA_PARAM(pDataParams,PH_COMP_AL_MFDFLIGHT);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <phalMfdfLight_Sw_Init+0x28>
 800ccbc:	f242 3320 	movw	r3, #8992	@ 0x2320
 800ccc0:	e0a5      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams,PH_COMP_AL_MFDFLIGHT);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <phalMfdfLight_Sw_Init+0x34>
 800ccc8:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cccc:	e09f      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams,PH_COMP_AL_MFDFLIGHT);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <phalMfdfLight_Sw_Init+0x40>
 800ccd4:	f242 3321 	movw	r3, #8993	@ 0x2321
 800ccd8:	e099      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsEnc,PH_COMP_AL_MFDFLIGHT);
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d102      	bne.n	800cce6 <phalMfdfLight_Sw_Init+0x4c>
 800cce0:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cce4:	e093      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoDataParamsMac,PH_COMP_AL_MFDFLIGHT);
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <phalMfdfLight_Sw_Init+0x58>
 800ccec:	f242 3321 	movw	r3, #8993	@ 0x2321
 800ccf0:	e08d      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams,PH_COMP_AL_MFDFLIGHT);
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d102      	bne.n	800ccfe <phalMfdfLight_Sw_Init+0x64>
 800ccf8:	f242 3321 	movw	r3, #8993	@ 0x2321
 800ccfc:	e087      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
#endif /* NXPBUILD__PH_CRYPTOSYM */
    PH_ASSERT_NULL_PARAM (pTMIDataParams,PH_COMP_AL_MFDFLIGHT);
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <phalMfdfLight_Sw_Init+0x70>
 800cd04:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cd08:	e081      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>
    PH_ASSERT_NULL_PARAM (pHalDataParams,PH_COMP_AL_MFDFLIGHT);
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d102      	bne.n	800cd16 <phalMfdfLight_Sw_Init+0x7c>
 800cd10:	f242 3321 	movw	r3, #8993	@ 0x2321
 800cd14:	e07b      	b.n	800ce0e <phalMfdfLight_Sw_Init+0x174>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFDFLIGHT | PHAL_MFDFLIGHT_SW_ID;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f242 3201 	movw	r2, #8961	@ 0x2301
 800cd1c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc   = pCryptoDataParamsEnc;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	69ba      	ldr	r2, [r7, #24]
 800cd2e:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac   = pCryptoDataParamsMac;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	69fa      	ldr	r2, [r7, #28]
 800cd34:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6a3a      	ldr	r2, [r7, #32]
 800cd3a:	615a      	str	r2, [r3, #20]
    pDataParams->pTMIDataParams         = pTMIDataParams;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    pDataParams->pHalDataParams         = pHalDataParams;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd48:	619a      	str	r2, [r3, #24]
    /* 2 Byte CRC initial value in Authenticate mode. */
    pDataParams->wCrc = PH_TOOLS_CRC16_PRESET_ISO14443A;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f246 3263 	movw	r2, #25443	@ 0x6363
 800cd50:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

    /* 4 Byte CRC initial value in 0x1A, 0xAA mode. */
    pDataParams->dwCrc = PH_TOOLS_CRC32_PRESET_DF8;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f04f 32ff 	mov.w	r2, #4294967295
 800cd5a:	651a      	str	r2, [r3, #80]	@ 0x50

    memset(pDataParams->bSesAuthENCKey, 0x00, 24U);  /* PRQA S 3200 */
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	331c      	adds	r3, #28
 800cd60:	2218      	movs	r2, #24
 800cd62:	2100      	movs	r1, #0
 800cd64:	4618      	mov	r0, r3
 800cd66:	f012 f8df 	bl	801ef28 <memset>
    pDataParams->bKeyNo = 0xFFU; /* Set to invalid */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	22ff      	movs	r2, #255	@ 0xff
 800cd6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    memset(pDataParams->bIv, 0x00, 16U); /* PRQA S 3200 */
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3335      	adds	r3, #53	@ 0x35
 800cd76:	2210      	movs	r2, #16
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f012 f8d4 	bl	801ef28 <memset>
    memset(pDataParams->pAid, 0x00, 3U);  /* PRQA S 3200 */
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3346      	adds	r3, #70	@ 0x46
 800cd84:	2203      	movs	r2, #3
 800cd86:	2100      	movs	r1, #0
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f012 f8cd 	bl	801ef28 <memset>
    pDataParams->bAuthMode = PHAL_MFDFLIGHT_NOT_AUTHENTICATED; /* Set to invalid */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	22ff      	movs	r2, #255	@ 0xff
 800cd92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bWrappedMode = 0x01U; /* Set to true */
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    pDataParams->bCryptoMethod = 0xFFU; /* No crypto just after init */
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	22ff      	movs	r2, #255	@ 0xff
 800cda2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->wAdditionalInfo = 0x0000;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    pDataParams->bShortLenApdu = 0x01U; /* Since Prime variant supports only Short Length APDU, setting this to 0x01 always */
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    pDataParams->dwPayLoadLen = 0;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	659a      	str	r2, [r3, #88]	@ 0x58
    pDataParams->wCmdCtr = 0;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    memset(pDataParams->bTi, 0x00, PHAL_MFDFLIGHT_SIZE_TI);  /* PRQA S 3200 */
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	335e      	adds	r3, #94	@ 0x5e
 800cdc8:	2204      	movs	r2, #4
 800cdca:	2100      	movs	r1, #0
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f012 f8ab 	bl	801ef28 <memset>
    memset(pDataParams->bSesAuthMACKey, 0x00, 16U);  /* PRQA S 3200 */
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3362      	adds	r3, #98	@ 0x62
 800cdd6:	2210      	movs	r2, #16
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4618      	mov	r0, r3
 800cddc:	f012 f8a4 	bl	801ef28 <memset>
    memset(pDataParams->pUnprocByteBuff, 0x00, PHAL_MFDFLIGHT_SIZE_MAC);  /* PRQA S 3200 */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	3382      	adds	r3, #130	@ 0x82
 800cde4:	2210      	movs	r2, #16
 800cde6:	2100      	movs	r1, #0
 800cde8:	4618      	mov	r0, r3
 800cdea:	f012 f89d 	bl	801ef28 <memset>
    pDataParams->bNoUnprocBytes = 0;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    memset(pDataParams->bLastBlockBuffer, 0x00, 16U);  /* PRQA S 3200 */
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3393      	adds	r3, #147	@ 0x93
 800cdfa:	2210      	movs	r2, #16
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f012 f892 	bl	801ef28 <memset>
    pDataParams->bLastBlockIndex = 0;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3

    return PH_ERR_SUCCESS;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <phalMfpEVx_Sw_Init>:
#include "phalMfpEVx_Sw.h"

phStatus_t phalMfpEVx_Sw_Init(phalMfpEVx_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams, void * pPalMifareDataParams,
    void * pKeyStoreDataParams, void * pCryptoDataParamsEnc, void * pCryptoDataParamsMac, void * pCryptoRngDataParams,
    void * pCryptoDiversifyDataParams, void * pTMIDataParams, void * pVCADataParams)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b086      	sub	sp, #24
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
 800ce22:	460b      	mov	r3, r1
 800ce24:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	82fb      	strh	r3, [r7, #22]

    /* data param check */
    if(sizeof(phalMfpEVx_Sw_DataParams_t) != wSizeOfDataParams)
 800ce2a:	897b      	ldrh	r3, [r7, #10]
 800ce2c:	2b84      	cmp	r3, #132	@ 0x84
 800ce2e:	d002      	beq.n	800ce36 <phalMfpEVx_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFPEVX);
 800ce30:	f242 1320 	movw	r3, #8480	@ 0x2120
 800ce34:	e063      	b.n	800cefe <phalMfpEVx_Sw_Init+0xe8>
    }
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_MFPEVX);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d102      	bne.n	800ce42 <phalMfpEVx_Sw_Init+0x2c>
 800ce3c:	f242 1320 	movw	r3, #8480	@ 0x2120
 800ce40:	e05d      	b.n	800cefe <phalMfpEVx_Sw_Init+0xe8>
    PH_ASSERT_NULL_PARAM(pPalMifareDataParams, PH_COMP_AL_MFPEVX);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <phalMfpEVx_Sw_Init+0x38>
 800ce48:	f242 1321 	movw	r3, #8481	@ 0x2121
 800ce4c:	e057      	b.n	800cefe <phalMfpEVx_Sw_Init+0xe8>

    PH_ASSERT_NULL_PARAM(pTMIDataParams, PH_COMP_AL_MFPEVX);
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d102      	bne.n	800ce5a <phalMfpEVx_Sw_Init+0x44>
 800ce54:	f242 1321 	movw	r3, #8481	@ 0x2121
 800ce58:	e051      	b.n	800cefe <phalMfpEVx_Sw_Init+0xe8>

#ifdef NXPBUILD__PHAL_VCA
    PH_ASSERT_NULL_PARAM(pVCADataParams, PH_COMP_AL_MFPEVX);
 800ce5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d102      	bne.n	800ce66 <phalMfpEVx_Sw_Init+0x50>
 800ce60:	f242 1321 	movw	r3, #8481	@ 0x2121
 800ce64:	e04b      	b.n	800cefe <phalMfpEVx_Sw_Init+0xe8>
#endif /* NXPBUILD__PHAL_VCA */

    /* init private data */
    pDataParams->wId = PH_COMP_AL_MFPEVX | PHAL_MFPEVX_SW_ID;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f242 1201 	movw	r2, #8449	@ 0x2101
 800ce6c:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams = pPalMifareDataParams;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams = pKeyStoreDataParams;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParamsEnc = pCryptoDataParamsEnc;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6a3a      	ldr	r2, [r7, #32]
 800ce7e:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoDataParamsMac = pCryptoDataParamsMac;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce84:	611a      	str	r2, [r3, #16]
    pDataParams->pCryptoRngDataParams = pCryptoRngDataParams;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce8a:	615a      	str	r2, [r3, #20]
    pDataParams->pCryptoDiversifyDataParams = pCryptoDiversifyDataParams;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce90:	619a      	str	r2, [r3, #24]
    pDataParams->pTMIDataParams = pTMIDataParams;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce96:	61da      	str	r2, [r3, #28]
    pDataParams->bWrappedMode = 0x00;       /* Use native mode by default */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bExtendedLenApdu = 0x00;       /* Use short length APDU by default */
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->pVCADataParams = pVCADataParams;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ceac:	621a      	str	r2, [r3, #32]
    pDataParams->bAuthMode = (uint8_t) PHAL_MFPEVX_NOTAUTHENTICATED;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    (void) memset(pDataParams->bSesAuthENCKey, 0x00, 16);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3360      	adds	r3, #96	@ 0x60
 800cec2:	2210      	movs	r2, #16
 800cec4:	2100      	movs	r1, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f012 f82e 	bl	801ef28 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, 16);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3370      	adds	r3, #112	@ 0x70
 800ced0:	2210      	movs	r2, #16
 800ced2:	2100      	movs	r1, #0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f012 f827 	bl	801ef28 <memset>
    (void) memset(pDataParams->bIv, 0x00, 16);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3350      	adds	r3, #80	@ 0x50
 800cede:	2210      	movs	r2, #16
 800cee0:	2100      	movs	r1, #0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f012 f820 	bl	801ef28 <memset>

    /* clear the secure messaging state */
    PH_CHECK_SUCCESS_FCT(wStatus, phalMfpEVx_Sw_ResetSecMsgState(pDataParams));
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f000 f80c 	bl	800cf06 <phalMfpEVx_Sw_ResetSecMsgState>
 800ceee:	4603      	mov	r3, r0
 800cef0:	82fb      	strh	r3, [r7, #22]
 800cef2:	8afb      	ldrh	r3, [r7, #22]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <phalMfpEVx_Sw_Init+0xe6>
 800cef8:	8afb      	ldrh	r3, [r7, #22]
 800cefa:	e000      	b.n	800cefe <phalMfpEVx_Sw_Init+0xe8>

    return PH_ERR_SUCCESS;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <phalMfpEVx_Sw_ResetSecMsgState>:

/***************************************************************************************************************************************/
/* Mifare Plus EVx Software command for utility operations.                                                                            */
/***************************************************************************************************************************************/
phStatus_t phalMfpEVx_Sw_ResetSecMsgState(phalMfpEVx_Sw_DataParams_t * pDataParams)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b084      	sub	sp, #16
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	81fb      	strh	r3, [r7, #14]

    pDataParams->wRCtr = 0;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wWCtr = 0;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bNumUnprocessedReadMacBytes = 0;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bFirstRead = 1;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    pDataParams->bSMMode = (uint8_t) PHAL_MFPEVX_SECURE_MESSAGE_EV0;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* State machine should be handled in a way where L3 activation or L4 activation shouldnot be lost */
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cf3c:	2b03      	cmp	r3, #3
 800cf3e:	d009      	beq.n	800cf54 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    if((pDataParams->bAuthMode == PHAL_MFPEVX_SL3_MFP_AUTHENTICATED) ||
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d004      	beq.n	800cf54 <phalMfpEVx_Sw_ResetSecMsgState+0x4e>
        (pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L4))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MFP_AUTHENTICATED) ||
 800cf50:	2b05      	cmp	r3, #5
 800cf52:	d104      	bne.n	800cf5e <phalMfpEVx_Sw_ResetSecMsgState+0x58>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L4;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2205      	movs	r2, #5
 800cf58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800cf5c:	e012      	b.n	800cf84 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d004      	beq.n	800cf72 <phalMfpEVx_Sw_ResetSecMsgState+0x6c>
        (pDataParams->bAuthMode == PHAL_MFPEVX_SL1_MIFARE_AUTHENTICATED))
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    else if((pDataParams->bAuthMode == PHAL_MFPEVX_NOT_AUTHENTICATED_L3) ||
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d104      	bne.n	800cf7c <phalMfpEVx_Sw_ResetSecMsgState+0x76>
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOT_AUTHENTICATED_L3;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2204      	movs	r2, #4
 800cf76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800cf7a:	e003      	b.n	800cf84 <phalMfpEVx_Sw_ResetSecMsgState+0x7e>
    }
    else
    {
        pDataParams->bAuthMode = PHAL_MFPEVX_NOTAUTHENTICATED;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }

    (void) memset(pDataParams->bIv, 0x00, (size_t) sizeof(pDataParams->bIv));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3350      	adds	r3, #80	@ 0x50
 800cf88:	2210      	movs	r2, #16
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f011 ffcb 	bl	801ef28 <memset>
    (void) memset(pDataParams->bSesAuthENCKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthENCKey));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3360      	adds	r3, #96	@ 0x60
 800cf96:	2210      	movs	r2, #16
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f011 ffc4 	bl	801ef28 <memset>
    (void) memset(pDataParams->bSesAuthMACKey, 0x00, (size_t) sizeof(pDataParams->bSesAuthMACKey));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3370      	adds	r3, #112	@ 0x70
 800cfa4:	2210      	movs	r2, #16
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f011 ffbd 	bl	801ef28 <memset>

    (void) memset(pDataParams->bTi, 0x00, PHAL_MFPEVX_SIZE_TI);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	332a      	adds	r3, #42	@ 0x2a
 800cfb2:	2204      	movs	r2, #4
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f011 ffb6 	bl	801ef28 <memset>

    wStatus = phTMIUtils_ActivateTMICollection((phTMIUtils_t *) pDataParams->pTMIDataParams, PH_TMIUTILS_RESET_TMI);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	2104      	movs	r1, #4
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fa fb48 	bl	8007658 <phTMIUtils_ActivateTMICollection>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	81fb      	strh	r3, [r7, #14]

#ifdef NXPBUILD__PHAL_VCA
    /* Update the authentication state if VCA PC feature is required by the application. */
    if(pDataParams->pVCADataParams != NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a1b      	ldr	r3, [r3, #32]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d009      	beq.n	800cfe8 <phalMfpEVx_Sw_ResetSecMsgState+0xe2>
    {
        wStatus = phalVca_SetSessionKeyUtility(pDataParams->pVCADataParams, pDataParams->bSesAuthMACKey,
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a18      	ldr	r0, [r3, #32]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3370      	adds	r3, #112	@ 0x70
 800cfdc:	2200      	movs	r2, #0
 800cfde:	4619      	mov	r1, r3
 800cfe0:	f000 fa8b 	bl	800d4fa <phalVca_SetSessionKeyUtility>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	81fb      	strh	r3, [r7, #14]
            PHAL_MFPEVX_NOTAUTHENTICATED);
    }
#endif /* NXPBUILD__PHAL_VCA */

    return PH_ADD_COMPCODE(wStatus, PH_COMP_AL_MFPEVX);
 800cfe8:	89fb      	ldrh	r3, [r7, #14]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00b      	beq.n	800d006 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800cfee:	89fb      	ldrh	r3, [r7, #14]
 800cff0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d106      	bne.n	800d006 <phalMfpEVx_Sw_ResetSecMsgState+0x100>
 800cff8:	89fb      	ldrh	r3, [r7, #14]
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	f443 5304 	orr.w	r3, r3, #8448	@ 0x2100
 800d002:	b29b      	uxth	r3, r3
 800d004:	e000      	b.n	800d008 <phalMfpEVx_Sw_ResetSecMsgState+0x102>
 800d006:	89fb      	ldrh	r3, [r7, #14]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <phalMful_Sw_Init>:
                            void * pPalMifareDataParams,
                            void * pKeyStoreDataParams,
                            void * pCryptoDataParams,
                            void * pCryptoRngDataParams
                            )
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	607a      	str	r2, [r7, #4]
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	460b      	mov	r3, r1
 800d01e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalMful_Sw_DataParams_t) != wSizeOfDataParams)
 800d020:	897b      	ldrh	r3, [r7, #10]
 800d022:	2b1c      	cmp	r3, #28
 800d024:	d002      	beq.n	800d02c <phalMful_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_MFUL);
 800d026:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 800d02a:	e026      	b.n	800d07a <phalMful_Sw_Init+0x6a>
    }
    PH_ASSERT_NULL (pDataParams);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <phalMful_Sw_Init+0x26>
 800d032:	2321      	movs	r3, #33	@ 0x21
 800d034:	e021      	b.n	800d07a <phalMful_Sw_Init+0x6a>
    PH_ASSERT_NULL (pPalMifareDataParams);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <phalMful_Sw_Init+0x30>
 800d03c:	2321      	movs	r3, #33	@ 0x21
 800d03e:	e01c      	b.n	800d07a <phalMful_Sw_Init+0x6a>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_MFUL | PHAL_MFUL_SW_ID;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f241 1201 	movw	r2, #4353	@ 0x1101
 800d046:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	60da      	str	r2, [r3, #12]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	69fa      	ldr	r2, [r7, #28]
 800d05e:	611a      	str	r2, [r3, #16]
    pDataParams->bAuthMode              = PHAL_MFUL_NOT_AUTHENTICATED;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	22ff      	movs	r2, #255	@ 0xff
 800d064:	761a      	strb	r2, [r3, #24]
    pDataParams->bCMACReq               = PH_OFF;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	751a      	strb	r2, [r3, #20]
    pDataParams->wCmdCtr                = 0x00U;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	82da      	strh	r2, [r3, #22]
    pDataParams->bAdditionalInfo        = 0x00U;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	765a      	strb	r2, [r3, #25]
    return PH_ERR_SUCCESS;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <phalT1T_Sw_Init>:
phStatus_t phalT1T_Sw_Init(
                           phalT1T_Sw_DataParams_t * pDataParams,
                           uint16_t wSizeOfDataParams,
                           void * pPalI14443p3aDataParams
                           )
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	460b      	mov	r3, r1
 800d090:	607a      	str	r2, [r7, #4]
 800d092:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalT1T_Sw_DataParams_t) != wSizeOfDataParams)
 800d094:	897b      	ldrh	r3, [r7, #10]
 800d096:	2b10      	cmp	r3, #16
 800d098:	d002      	beq.n	800d0a0 <phalT1T_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_T1T);
 800d09a:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800d09e:	e011      	b.n	800d0c4 <phalT1T_Sw_Init+0x3e>
    }

    PH_ASSERT_NULL (pDataParams);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <phalT1T_Sw_Init+0x24>
 800d0a6:	2321      	movs	r3, #33	@ 0x21
 800d0a8:	e00c      	b.n	800d0c4 <phalT1T_Sw_Init+0x3e>
    PH_ASSERT_NULL (pPalI14443p3aDataParams);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <phalT1T_Sw_Init+0x2e>
 800d0b0:	2321      	movs	r3, #33	@ 0x21
 800d0b2:	e007      	b.n	800d0c4 <phalT1T_Sw_Init+0x3e>

    /* Initialize private data */
    pDataParams->wId = PH_COMP_AL_T1T | PHAL_T1T_SW_ID;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f641 4201 	movw	r2, #7169	@ 0x1c01
 800d0ba:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalI14443p3aDataParams = pPalI14443p3aDataParams;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	605a      	str	r2, [r3, #4]

    return PH_ERR_SUCCESS;
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <phalT1T_Sw_ReadUID>:
phStatus_t phalT1T_Sw_ReadUID(
                              phalT1T_Sw_DataParams_t * pDataParams,
                              uint8_t * pUid,
                              uint16_t * pLength
                              )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08c      	sub	sp, #48	@ 0x30
 800d0d4:	af02      	add	r7, sp, #8
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bCountLoop;
    uint8_t *  PH_MEMLOC_REM pRxBuffer = NULL;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	61fb      	str	r3, [r7, #28]
    uint16_t   PH_MEMLOC_REM wTxLength = 7;
 800d0e0:	2307      	movs	r3, #7
 800d0e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t   PH_MEMLOC_REM wUIDLength = 4;
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t    PH_MEMLOC_REM abTxBuffer[] = {PHAL_T1T_CMD_READUID, 0x00,
 800d0e8:	2378      	movs	r3, #120	@ 0x78
 800d0ea:	617b      	str	r3, [r7, #20]
 800d0ec:	f107 0318 	add.w	r3, r7, #24
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	460a      	mov	r2, r1
 800d0f4:	801a      	strh	r2, [r3, #0]
 800d0f6:	460a      	mov	r2, r1
 800d0f8:	709a      	strb	r2, [r3, #2]
                                             0x00, 0x00, 0x00, 0x00, 0x00};

    /* Set command timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_SetConfig(
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	f240 1223 	movw	r2, #291	@ 0x123
 800d102:	2103      	movs	r1, #3
 800d104:	4618      	mov	r0, r3
 800d106:	f006 ffd6 	bl	80140b6 <phpalI14443p3a_Sw_SetConfig>
 800d10a:	4603      	mov	r3, r0
 800d10c:	843b      	strh	r3, [r7, #32]
 800d10e:	8c3b      	ldrh	r3, [r7, #32]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <phalT1T_Sw_ReadUID+0x48>
 800d114:	8c3b      	ldrh	r3, [r7, #32]
 800d116:	e05c      	b.n	800d1d2 <phalT1T_Sw_ReadUID+0x102>
        pDataParams->pPalI14443p3aDataParams,
        PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US,
        PHAL_T1T_SW_READ_TIME_US + PHAL_T1T_SW_EXT_TIME_US));

    /* Send and receive the data */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3a_Exchange(
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6858      	ldr	r0, [r3, #4]
 800d11c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800d11e:	f107 0214 	add.w	r2, r7, #20
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	f107 031c 	add.w	r3, r7, #28
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	460b      	mov	r3, r1
 800d12e:	2100      	movs	r1, #0
 800d130:	f007 fc6c 	bl	8014a0c <phpalI14443p3a_Sw_Exchange>
 800d134:	4603      	mov	r3, r0
 800d136:	843b      	strh	r3, [r7, #32]
 800d138:	8c3b      	ldrh	r3, [r7, #32]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <phalT1T_Sw_ReadUID+0x72>
 800d13e:	8c3b      	ldrh	r3, [r7, #32]
 800d140:	e047      	b.n	800d1d2 <phalT1T_Sw_ReadUID+0x102>
        &abTxBuffer[0],
        wTxLength,
        &pRxBuffer,
        pLength));

    if(((phpalI14443p3a_Sw_DataParams_t*)(pDataParams->pPalI14443p3aDataParams))->bOpeMode == RD_LIB_MODE_NFC)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	7d1b      	ldrb	r3, [r3, #20]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d10c      	bne.n	800d166 <phalT1T_Sw_ReadUID+0x96>
    {
        /* Check received length. NFC Digital Protocol 1.1-10.6.2.1 */
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	2b06      	cmp	r3, #6
 800d152:	d105      	bne.n	800d160 <phalT1T_Sw_ReadUID+0x90>
            ((pRxBuffer[0] & PHAL_T1T_HEADER_ROM0) != PHAL_T1T_HEADER_ROM0))
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	f003 0310 	and.w	r3, r3, #16
        if ((*pLength != PHAL_T1T_READUID_RESP_LEN) ||
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d109      	bne.n	800d174 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800d160:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800d164:	e035      	b.n	800d1d2 <phalT1T_Sw_ReadUID+0x102>
        }
    }
    else
    {
        if (*pLength != PHAL_T1T_READUID_RESP_LEN)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	2b06      	cmp	r3, #6
 800d16c:	d002      	beq.n	800d174 <phalT1T_Sw_ReadUID+0xa4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_AL_T1T);
 800d16e:	f641 4306 	movw	r3, #7174	@ 0x1c06
 800d172:	e02e      	b.n	800d1d2 <phalT1T_Sw_ReadUID+0x102>
        }
    }

    /* Update the Header ROM bytes */
    pDataParams->abHR[0] = pRxBuffer[0];
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	781a      	ldrb	r2, [r3, #0]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	721a      	strb	r2, [r3, #8]
    pDataParams->abHR[1] = pRxBuffer[1];
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	785a      	ldrb	r2, [r3, #1]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	725a      	strb	r2, [r3, #9]

    /* Update the UID */
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800d184:	2300      	movs	r3, #0
 800d186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d18a:	e01a      	b.n	800d1c2 <phalT1T_Sw_ReadUID+0xf2>
    {
        pDataParams->abUid[bCountLoop] = pRxBuffer[bCountLoop+2U];
 800d18c:	69fa      	ldr	r2, [r7, #28]
 800d18e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d192:	3302      	adds	r3, #2
 800d194:	441a      	add	r2, r3
 800d196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d19a:	7811      	ldrb	r1, [r2, #0]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	4413      	add	r3, r2
 800d1a0:	460a      	mov	r2, r1
 800d1a2:	729a      	strb	r2, [r3, #10]
        pUid[bCountLoop] = pDataParams->abUid[bCountLoop];
 800d1a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	440b      	add	r3, r1
 800d1b0:	68f9      	ldr	r1, [r7, #12]
 800d1b2:	440a      	add	r2, r1
 800d1b4:	7a92      	ldrb	r2, [r2, #10]
 800d1b6:	701a      	strb	r2, [r3, #0]
    for(bCountLoop = 0; bCountLoop < 4U; bCountLoop++)
 800d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1bc:	3301      	adds	r3, #1
 800d1be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d9e0      	bls.n	800d18c <phalT1T_Sw_ReadUID+0xbc>
    }

    (*pLength) = wUIDLength;   /* UID length */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d1ce:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3728      	adds	r7, #40	@ 0x28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <phalTop_Sw_Init>:
                           void * pAlFelica,
                           void * pPalMifareDataParams,
                           void * pAl15693,
                           void * pPalI14443paDataParams
                           )
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b084      	sub	sp, #16
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	603b      	str	r3, [r7, #0]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalTop_Sw_DataParams_t) != wSizeOfDataParams)
 800d1ea:	897b      	ldrh	r3, [r7, #10]
 800d1ec:	2b80      	cmp	r3, #128	@ 0x80
 800d1ee:	d002      	beq.n	800d1f6 <phalTop_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_TOP);
 800d1f0:	f44f 53e9 	mov.w	r3, #7456	@ 0x1d20
 800d1f4:	e01e      	b.n	800d234 <phalTop_Sw_Init+0x5a>
    }

    PH_ASSERT_NULL (pDataParams);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <phalTop_Sw_Init+0x26>
 800d1fc:	2321      	movs	r3, #33	@ 0x21
 800d1fe:	e019      	b.n	800d234 <phalTop_Sw_Init+0x5a>

    pDataParams->wId = PH_COMP_AL_TOP | PHAL_TOP_SW_ID;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f641 5201 	movw	r2, #7425	@ 0x1d01
 800d206:	801a      	strh	r2, [r3, #0]
    pDataParams->pTopTagsDataParams[0] = pAlT1T;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	611a      	str	r2, [r3, #16]
    pDataParams->pTopTagsDataParams[1] = pAlMful;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	615a      	str	r2, [r3, #20]
    pDataParams->pTopTagsDataParams[2] = pAlFelica;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	69ba      	ldr	r2, [r7, #24]
 800d218:	619a      	str	r2, [r3, #24]
    pDataParams->pTopTagsDataParams[3] = pPalMifareDataParams;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	69fa      	ldr	r2, [r7, #28]
 800d21e:	61da      	str	r2, [r3, #28]
    pDataParams->pTopTagsDataParams[4] = pAl15693;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6a3a      	ldr	r2, [r7, #32]
 800d224:	621a      	str	r2, [r3, #32]
    pDataParams->pTopTagsDataParams[5] = pPalI14443paDataParams;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d22a:	625a      	str	r2, [r3, #36]	@ 0x24

    return phalTop_Sw_Reset(pDataParams);
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 f805 	bl	800d23c <phalTop_Sw_Reset>
 800d232:	4603      	mov	r3, r0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <phalTop_Sw_Reset>:
}

phStatus_t phalTop_Sw_Reset(
                            phalTop_Sw_DataParams_t * pDataParams
                            )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

    /* Reset common variables */
    pDataParams->bTagState = 0;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	711a      	strb	r2, [r3, #4]
    pDataParams->bTagType = 0;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	709a      	strb	r2, [r3, #2]
    pDataParams->bVno = 0;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	70da      	strb	r2, [r3, #3]
    pDataParams->dwNdefLength = 0;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	609a      	str	r2, [r3, #8]
    pDataParams->dwMaxNdefLength = 0;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	60da      	str	r2, [r3, #12]

    (void)memset(&pDataParams->ualTop, 0x00, (size_t)(sizeof(pDataParams->ualTop)));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3328      	adds	r3, #40	@ 0x28
 800d266:	2258      	movs	r2, #88	@ 0x58
 800d268:	2100      	movs	r1, #0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f011 fe5c 	bl	801ef28 <memset>

    return PH_ERR_SUCCESS;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <phalVca_Sw_Init>:
#endif /* NXPBUILD__PH_CRYPTOSYM */

phStatus_t phalVca_Sw_Init(phalVca_Sw_DataParams_t * pDataParams, uint16_t wSizeOfDataParams,  void * pPalMifareDataParams, void * pKeyStoreDataParams,
    void * pCryptoDataParams, void * pCryptoRngDataParams, phalVca_Sw_IidTableEntry_t * pIidTableStorage, uint16_t wNumIidTableStorageEntries,
    phalVca_Sw_CardTableEntry_t * pCardTableStorage, uint16_t wNumCardTableStorageEntries)
{
 800d27a:	b480      	push	{r7}
 800d27c:	b085      	sub	sp, #20
 800d27e:	af00      	add	r7, sp, #0
 800d280:	60f8      	str	r0, [r7, #12]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
 800d286:	460b      	mov	r3, r1
 800d288:	817b      	strh	r3, [r7, #10]
    if (sizeof(phalVca_Sw_DataParams_t) != wSizeOfDataParams)
 800d28a:	897b      	ldrh	r3, [r7, #10]
 800d28c:	2b54      	cmp	r3, #84	@ 0x54
 800d28e:	d002      	beq.n	800d296 <phalVca_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d290:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d294:	e06d      	b.n	800d372 <phalVca_Sw_Init+0xf8>
    }

    PH_ASSERT_NULL_DATA_PARAM (pDataParams, PH_COMP_AL_VCA);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d102      	bne.n	800d2a2 <phalVca_Sw_Init+0x28>
 800d29c:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d2a0:	e067      	b.n	800d372 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pPalMifareDataParams, PH_COMP_AL_VCA);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <phalVca_Sw_Init+0x34>
 800d2a8:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d2ac:	e061      	b.n	800d372 <phalVca_Sw_Init+0xf8>

#ifdef NXPBUILD__PH_CRYPTOSYM
    PH_ASSERT_NULL_PARAM (pKeyStoreDataParams, PH_COMP_AL_VCA);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <phalVca_Sw_Init+0x40>
 800d2b4:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d2b8:	e05b      	b.n	800d372 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoDataParams, PH_COMP_AL_VCA);
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d102      	bne.n	800d2c6 <phalVca_Sw_Init+0x4c>
 800d2c0:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d2c4:	e055      	b.n	800d372 <phalVca_Sw_Init+0xf8>
    PH_ASSERT_NULL_PARAM (pCryptoRngDataParams, PH_COMP_AL_VCA);
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <phalVca_Sw_Init+0x58>
 800d2cc:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d2d0:	e04f      	b.n	800d372 <phalVca_Sw_Init+0xf8>
#endif /* NXPBUILD__PH_CRYPTOSYM */

    if (0U != (wNumIidTableStorageEntries)) PH_ASSERT_NULL_PARAM (pIidTableStorage, PH_COMP_AL_VCA);
 800d2d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d005      	beq.n	800d2e4 <phalVca_Sw_Init+0x6a>
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <phalVca_Sw_Init+0x6a>
 800d2de:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d2e2:	e046      	b.n	800d372 <phalVca_Sw_Init+0xf8>
    if (0U != (wNumCardTableStorageEntries)) PH_ASSERT_NULL_PARAM (pCardTableStorage, PH_COMP_AL_VCA);
 800d2e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d005      	beq.n	800d2f6 <phalVca_Sw_Init+0x7c>
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <phalVca_Sw_Init+0x7c>
 800d2f0:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d2f4:	e03d      	b.n	800d372 <phalVca_Sw_Init+0xf8>

    /* init private data */
    pDataParams->wId                    = PH_COMP_AL_VCA | PHAL_VCA_SW_ID;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f241 3201 	movw	r2, #4865	@ 0x1301
 800d2fc:	801a      	strh	r2, [r3, #0]
    pDataParams->pPalMifareDataParams   = pPalMifareDataParams;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	609a      	str	r2, [r3, #8]
    pDataParams->pCryptoDataParams      = pCryptoDataParams;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	69ba      	ldr	r2, [r7, #24]
 800d30e:	60da      	str	r2, [r3, #12]
    pDataParams->wCurrentCardTablePos   = 0;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	839a      	strh	r2, [r3, #28]
    pDataParams->pCardTable             = pCardTableStorage;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d31a:	615a      	str	r2, [r3, #20]
    pDataParams->wNumCardTableEntries   = wNumCardTableStorageEntries;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800d320:	83da      	strh	r2, [r3, #30]
    pDataParams->pIidTable              = pIidTableStorage;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6a3a      	ldr	r2, [r7, #32]
 800d326:	619a      	str	r2, [r3, #24]
    pDataParams->wCurrentIidTablePos    = 0;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wNumIidTableEntries    = wNumIidTableStorageEntries;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d332:	841a      	strh	r2, [r3, #32]
    pDataParams->pCryptoRngDataParams   = pCryptoRngDataParams;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	69fa      	ldr	r2, [r7, #28]
 800d338:	611a      	str	r2, [r3, #16]
    pDataParams->wAdditionalInfo        = PH_ERR_SUCCESS;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2200      	movs	r2, #0
 800d33e:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->eVCState               = VC_NOT_SELECTED;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    pDataParams->ePCState               = PC_NO_PCHK_IN_PROGRESS;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    pDataParams->bWrappedMode           = 0;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->bExtendedLenApdu       = 0;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    pDataParams->bOption                = 1;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    pDataParams->bLowerBoundThreshold   = 0;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    return PH_ERR_SUCCESS;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
	...

0800d380 <phalVca_Sw_SetSessionKeyUtility>:

    return PH_ERR_SUCCESS;
}

phStatus_t phalVca_Sw_SetSessionKeyUtility(phalVca_Sw_DataParams_t * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	4613      	mov	r3, r2
 800d38c:	71fb      	strb	r3, [r7, #7]
     * case-1: VCState = Authenticated, Session keys from DesfireEV2 should be used for MAC calculations
     * case-2: VCState = Proximity Check or Not Authenticated, VC Proximity Key should be used for MAC calculations
     * case-3: VCState = No VC Selected, DummyMACKey of type AES 128 should be used for MAC calculations.
     */
    /* Handling Case-1. First need to get the card auth type(AES, DES, ISO, EV2) and set the VC state based on the Auth Mode */
    switch(bAuthMode)
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	2bff      	cmp	r3, #255	@ 0xff
 800d392:	d07d      	beq.n	800d490 <phalVca_Sw_SetSessionKeyUtility+0x110>
 800d394:	2bff      	cmp	r3, #255	@ 0xff
 800d396:	f300 808c 	bgt.w	800d4b2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d39a:	2baa      	cmp	r3, #170	@ 0xaa
 800d39c:	d04f      	beq.n	800d43e <phalVca_Sw_SetSessionKeyUtility+0xbe>
 800d39e:	2baa      	cmp	r3, #170	@ 0xaa
 800d3a0:	f300 8087 	bgt.w	800d4b2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d3a4:	2b1a      	cmp	r3, #26
 800d3a6:	dc3d      	bgt.n	800d424 <phalVca_Sw_SetSessionKeyUtility+0xa4>
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f2c0 8082 	blt.w	800d4b2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d3ae:	2b1a      	cmp	r3, #26
 800d3b0:	d87f      	bhi.n	800d4b2 <phalVca_Sw_SetSessionKeyUtility+0x132>
 800d3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b8 <phalVca_Sw_SetSessionKeyUtility+0x38>)
 800d3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b8:	0800d487 	.word	0x0800d487
 800d3bc:	0800d4b3 	.word	0x0800d4b3
 800d3c0:	0800d457 	.word	0x0800d457
 800d3c4:	0800d46f 	.word	0x0800d46f
 800d3c8:	0800d487 	.word	0x0800d487
 800d3cc:	0800d487 	.word	0x0800d487
 800d3d0:	0800d4b3 	.word	0x0800d4b3
 800d3d4:	0800d4b3 	.word	0x0800d4b3
 800d3d8:	0800d4b3 	.word	0x0800d4b3
 800d3dc:	0800d4b3 	.word	0x0800d4b3
 800d3e0:	0800d42b 	.word	0x0800d42b
 800d3e4:	0800d4b3 	.word	0x0800d4b3
 800d3e8:	0800d4b3 	.word	0x0800d4b3
 800d3ec:	0800d4b3 	.word	0x0800d4b3
 800d3f0:	0800d4b3 	.word	0x0800d4b3
 800d3f4:	0800d4b3 	.word	0x0800d4b3
 800d3f8:	0800d4b3 	.word	0x0800d4b3
 800d3fc:	0800d4b3 	.word	0x0800d4b3
 800d400:	0800d4b3 	.word	0x0800d4b3
 800d404:	0800d4b3 	.word	0x0800d4b3
 800d408:	0800d4b3 	.word	0x0800d4b3
 800d40c:	0800d4b3 	.word	0x0800d4b3
 800d410:	0800d4b3 	.word	0x0800d4b3
 800d414:	0800d4b3 	.word	0x0800d4b3
 800d418:	0800d4b3 	.word	0x0800d4b3
 800d41c:	0800d4b3 	.word	0x0800d4b3
 800d420:	0800d435 	.word	0x0800d435
 800d424:	2b71      	cmp	r3, #113	@ 0x71
 800d426:	d038      	beq.n	800d49a <phalVca_Sw_SetSessionKeyUtility+0x11a>
 800d428:	e043      	b.n	800d4b2 <phalVca_Sw_SetSessionKeyUtility+0x132>
    {
#ifdef NXPBUILD__PHAL_MFDFEVX_SW
    case PHAL_MFDFEVX_AUTHENTICATE:
        pDataParams->eVCState = VC_DF_AUTH_D40;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2204      	movs	r2, #4
 800d42e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d432:	e043      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEISO:
        pDataParams->eVCState = VC_DF_AUTH_ISO;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2205      	movs	r2, #5
 800d438:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d43c:	e03e      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFDFEVX_AUTHENTICATEAES:
        pDataParams->eVCState = VC_DF_AUTH_AES;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2207      	movs	r2, #7
 800d442:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3328      	adds	r3, #40	@ 0x28
 800d44a:	2220      	movs	r2, #32
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f011 fde9 	bl	801f026 <memcpy>
        break;
 800d454:	e032      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFDFEVX_SW */
#ifdef NXPBUILD__PHAL_MFPEVX_SW
    case PHAL_MFPEVX_SL1_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL1;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2208      	movs	r2, #8
 800d45a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3328      	adds	r3, #40	@ 0x28
 800d462:	2220      	movs	r2, #32
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	4618      	mov	r0, r3
 800d468:	f011 fddd 	bl	801f026 <memcpy>
        break;
 800d46c:	e026      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_SL3_MFP_AUTHENTICATED:
        pDataParams->eVCState = VC_MFP_AUTH_AES_SL3;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2209      	movs	r2, #9
 800d472:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3328      	adds	r3, #40	@ 0x28
 800d47a:	2220      	movs	r2, #32
 800d47c:	68b9      	ldr	r1, [r7, #8]
 800d47e:	4618      	mov	r0, r3
 800d480:	f011 fdd1 	bl	801f026 <memcpy>
        break;
 800d484:	e01a      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case PHAL_MFPEVX_NOTAUTHENTICATED:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L3:
    case PHAL_MFPEVX_NOT_AUTHENTICATED_L4:
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2203      	movs	r2, #3
 800d48a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d48e:	e015      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>
#endif /* NXPBUILD__PHAL_MFPEVX_SW */
#if defined(NXPBUILD__PHAL_MFDFEVX_SW) || defined(NXPBUILD__PHAL_MFDUOX_SW)
    case 0xFFU :  /* Not Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_NOT_AUTH;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2203      	movs	r2, #3
 800d494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d498:	e010      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>

    case 0x71U:  /* EV2 Authenticate state for DESFire and DUOX PICC */
        pDataParams->eVCState = VC_DF_AUTH_EV2;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2206      	movs	r2, #6
 800d49e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        /* Set the session key (since session key is AES) to the VCA structure parameter */
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3328      	adds	r3, #40	@ 0x28
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	68b9      	ldr	r1, [r7, #8]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f011 fdbb 	bl	801f026 <memcpy>
        break;
 800d4b0:	e004      	b.n	800d4bc <phalVca_Sw_SetSessionKeyUtility+0x13c>
        (void)memcpy(pDataParams->bSessionAuthMACKey, pSessionKey, sizeof(pDataParams->bSessionAuthMACKey));
        break;
#endif /* NXPBUILD__PHAL_MFDUOX_SW */

    default:
        pDataParams->eVCState = VC_NOT_SELECTED;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        break;
 800d4ba:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop

0800d4c8 <phalVca_Sw_SetApplicationType>:

phStatus_t phalVca_Sw_SetApplicationType(phalVca_Sw_DataParams_t * pDataParams, void * pAlDataParams)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
    PH_ASSERT_NULL (pDataParams);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d101      	bne.n	800d4dc <phalVca_Sw_SetApplicationType+0x14>
 800d4d8:	2321      	movs	r3, #33	@ 0x21
 800d4da:	e008      	b.n	800d4ee <phalVca_Sw_SetApplicationType+0x26>
    PH_ASSERT_NULL (pAlDataParams);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <phalVca_Sw_SetApplicationType+0x1e>
 800d4e2:	2321      	movs	r3, #33	@ 0x21
 800d4e4:	e003      	b.n	800d4ee <phalVca_Sw_SetApplicationType+0x26>

    pDataParams->pAlDataParams = pAlDataParams;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	683a      	ldr	r2, [r7, #0]
 800d4ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    return PH_ERR_SUCCESS;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <phalVca_SetSessionKeyUtility>:
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
}

phStatus_t phalVca_SetSessionKeyUtility(void * pDataParams, uint8_t * pSessionKey, uint8_t bAuthMode)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b086      	sub	sp, #24
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	60f8      	str	r0, [r7, #12]
 800d502:	60b9      	str	r1, [r7, #8]
 800d504:	4613      	mov	r3, r2
 800d506:	71fb      	strb	r3, [r7, #7]
    PH_LOG_HELPER_ADDPARAM_UINT8(PH_LOG_LOGTYPE_DEBUG, bAuthMode_log, &bAuthMode);
    PH_LOG_HELPER_ADDPARAM_BUFFER(PH_LOG_LOGTYPE_DEBUG, pSessionKey_log, pSessionKey, 16);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d102      	bne.n	800d514 <phalVca_SetSessionKeyUtility+0x1a>
 800d50e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d512:	e024      	b.n	800d55e <phalVca_SetSessionKeyUtility+0x64>
    PH_ASSERT_NULL_PARAM(pSessionKey, PH_COMP_AL_VCA);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <phalVca_SetSessionKeyUtility+0x26>
 800d51a:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d51e:	e01e      	b.n	800d55e <phalVca_SetSessionKeyUtility+0x64>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d528:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800d52c:	d004      	beq.n	800d538 <phalVca_SetSessionKeyUtility+0x3e>
    {
        status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d52e:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d532:	82fb      	strh	r3, [r7, #22]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800d534:	8afb      	ldrh	r3, [r7, #22]
 800d536:	e012      	b.n	800d55e <phalVca_SetSessionKeyUtility+0x64>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d108      	bne.n	800d554 <phalVca_SetSessionKeyUtility+0x5a>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetSessionKeyUtility((phalVca_Sw_DataParams_t *) pDataParams, pSessionKey, bAuthMode);
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	461a      	mov	r2, r3
 800d546:	68b9      	ldr	r1, [r7, #8]
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f7ff ff19 	bl	800d380 <phalVca_Sw_SetSessionKeyUtility>
 800d54e:	4603      	mov	r3, r0
 800d550:	82fb      	strh	r3, [r7, #22]
            break;
 800d552:	e003      	b.n	800d55c <phalVca_SetSessionKeyUtility+0x62>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d554:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d558:	82fb      	strh	r3, [r7, #22]
            break;
 800d55a:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800d55c:	8afb      	ldrh	r3, [r7, #22]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <phalVca_SetApplicationType>:

phStatus_t phalVca_SetApplicationType(void * pDataParams, void * pAlDataParams)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b084      	sub	sp, #16
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_ENTER);

    /* Validate the parameters */
    PH_ASSERT_NULL_DATA_PARAM(pDataParams, PH_COMP_AL_VCA);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d102      	bne.n	800d57c <phalVca_SetApplicationType+0x16>
 800d576:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d57a:	e022      	b.n	800d5c2 <phalVca_SetApplicationType+0x5c>
    PH_ASSERT_NULL_PARAM(pAlDataParams, PH_COMP_AL_VCA);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d102      	bne.n	800d588 <phalVca_SetApplicationType+0x22>
 800d582:	f241 3321 	movw	r3, #4897	@ 0x1321
 800d586:	e01c      	b.n	800d5c2 <phalVca_SetApplicationType+0x5c>

    /* Check data parameters */
    if(PH_GET_COMPCODE(pDataParams) != PH_COMP_AL_VCA)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d590:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
 800d594:	d004      	beq.n	800d5a0 <phalVca_SetApplicationType+0x3a>
    {
        status = PH_ADD_COMPCODE(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d596:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d59a:	81fb      	strh	r3, [r7, #14]
        PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
        PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
        PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
        return status;
 800d59c:	89fb      	ldrh	r3, [r7, #14]
 800d59e:	e010      	b.n	800d5c2 <phalVca_SetApplicationType+0x5c>
    }

    /* Perform operation on active layer */
    switch(PH_GET_COMPID(pDataParams))
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d106      	bne.n	800d5b8 <phalVca_SetApplicationType+0x52>
    {
#ifdef NXPBUILD__PHAL_VCA_SW
        case PHAL_VCA_SW_ID:
            status = phalVca_Sw_SetApplicationType((phalVca_Sw_DataParams_t *) pDataParams, pAlDataParams);
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7ff ff8b 	bl	800d4c8 <phalVca_Sw_SetApplicationType>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	81fb      	strh	r3, [r7, #14]
            break;
 800d5b6:	e003      	b.n	800d5c0 <phalVca_SetApplicationType+0x5a>
#endif /* NXPBUILD__PHAL_VCA_SW */

        default:
            status = PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_AL_VCA);
 800d5b8:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 800d5bc:	81fb      	strh	r3, [r7, #14]
            break;
 800d5be:	bf00      	nop
    }

    PH_LOG_HELPER_ADDSTRING(PH_LOG_LOGTYPE_INFO, bFunctionName);
    PH_LOG_HELPER_ADDPARAM_UINT16(PH_LOG_LOGTYPE_INFO, status_log, &status);
    PH_LOG_HELPER_EXECUTE(PH_LOG_OPTION_CATEGORY_LEAVE);
    return status;
 800d5c0:	89fb      	ldrh	r3, [r7, #14]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <phhalHw_Pn5180_EventCallback>:
}

#endif

static void phhalHw_Pn5180_EventCallback(void * pDataParams)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
    phhalHw_Pn5180_DataParams_t * pPn5180DataParams = NULL;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]

    pPn5180DataParams = (phhalHw_Pn5180_DataParams_t*) pDataParams;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60fb      	str	r3, [r7, #12]
    /* Post Abort Event. */
    (void)phOsal_EventPost(&pPn5180DataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_RF, NULL);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	2108      	movs	r1, #8
 800d5e6:	f00b fcf1 	bl	8018fcc <phOsal_EventPost>
}
 800d5ea:	bf00      	nop
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <phhalHw_Pn5180_GuardTimeCallBck>:

static void phhalHw_Pn5180_GuardTimeCallBck(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
	printf("GT Callback\r\n");  // 添加这行
 800d5f8:	4807      	ldr	r0, [pc, #28]	@ (800d618 <phhalHw_Pn5180_GuardTimeCallBck+0x24>)
 800d5fa:	f011 fba5 	bl	801ed48 <puts>
    if(xEventHandle != NULL)
 800d5fe:	4b07      	ldr	r3, [pc, #28]	@ (800d61c <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d005      	beq.n	800d612 <phhalHw_Pn5180_GuardTimeCallBck+0x1e>
    {
        (void)phOsal_EventPost(&xEventHandle, E_OS_EVENT_OPT_POST_ISR, E_PH_OSAL_EVT_GT_EXP, NULL);
 800d606:	2300      	movs	r3, #0
 800d608:	2202      	movs	r2, #2
 800d60a:	2108      	movs	r1, #8
 800d60c:	4803      	ldr	r0, [pc, #12]	@ (800d61c <phhalHw_Pn5180_GuardTimeCallBck+0x28>)
 800d60e:	f00b fcdd 	bl	8018fcc <phOsal_EventPost>
    }
}
 800d612:	bf00      	nop
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	0802164c 	.word	0x0802164c
 800d61c:	20001870 	.word	0x20001870

0800d620 <phhalHw_Pn5180_Init>:
    uint8_t * pTxBuffer,
    uint16_t wTxBufSize,
    uint8_t * pRxBuffer,
    uint16_t wRxBufSize
    )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	607a      	str	r2, [r7, #4]
 800d62a:	603b      	str	r3, [r7, #0]
 800d62c:	460b      	mov	r3, r1
 800d62e:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t    PH_MEMLOC_REM bFirmwareVer[2];
//    uint8_t    PH_MEMLOC_REM bPowerStatus[16];
    uint8_t PH_MEMLOC_BUF bDigitalDelayCfg;
    uint8_t    InitGearSize = 0x01;
 800d630:	2301      	movs	r3, #1
 800d632:	76bb      	strb	r3, [r7, #26]
#ifndef _WIN32
    phDriver_Pin_Config_t pinCfg;
#endif

    if(sizeof(phhalHw_Pn5180_DataParams_t) != wSizeOfDataParams)
 800d634:	897b      	ldrh	r3, [r7, #10]
 800d636:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 800d63a:	d002      	beq.n	800d642 <phhalHw_Pn5180_Init+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800d63c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800d640:	e19a      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    }
    /* The working buffers cannot be zero */
    if (wTxBufSize == 0U || wRxBufSize == 0U)
 800d642:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <phhalHw_Pn5180_Init+0x2e>
 800d648:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d102      	bne.n	800d654 <phhalHw_Pn5180_Init+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800d64e:	f240 2321 	movw	r3, #545	@ 0x221
 800d652:	e191      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    }

    /* Check whether all the pointers supplied are non NULL */
    PH_ASSERT_NULL(pDataParams);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <phhalHw_Pn5180_Init+0x3e>
 800d65a:	2321      	movs	r3, #33	@ 0x21
 800d65c:	e18c      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    PH_ASSERT_NULL(pBalDataParams);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <phhalHw_Pn5180_Init+0x48>
 800d664:	2321      	movs	r3, #33	@ 0x21
 800d666:	e187      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    PH_ASSERT_NULL(pTxBuffer);
 800d668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <phhalHw_Pn5180_Init+0x52>
 800d66e:	2321      	movs	r3, #33	@ 0x21
 800d670:	e182      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    PH_ASSERT_NULL(pRxBuffer);
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <phhalHw_Pn5180_Init+0x5c>
 800d678:	2321      	movs	r3, #33	@ 0x21
 800d67a:	e17d      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>

    /* The first bytes are reserved for the SPI commands */
    pDataParams->pTxBuffer          = &pTxBuffer[1];
 800d67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d67e:	1c5a      	adds	r2, r3, #1
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	60da      	str	r2, [r3, #12]
    pDataParams->wTxBufSize         = wTxBufSize - 1U;
 800d684:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d686:	3b01      	subs	r3, #1
 800d688:	b29a      	uxth	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	821a      	strh	r2, [r3, #16]
    pDataParams->pRxBuffer          = &pRxBuffer[2];
 800d68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d690:	1c9a      	adds	r2, r3, #2
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	615a      	str	r2, [r3, #20]
    pDataParams->wRxBufSize         = wRxBufSize - 2U;
 800d696:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d698:	3b02      	subs	r3, #2
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	831a      	strh	r2, [r3, #24]

    /* This is the constructor for the Pn5180 HAL, let's initialize the private data */
    pDataParams->wId                    = PH_COMP_HAL | PHHAL_HW_PN5180_ID;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f240 220e 	movw	r2, #526	@ 0x20e
 800d6a6:	801a      	strh	r2, [r3, #0]
    pDataParams->pBalDataParams         = pBalDataParams;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	605a      	str	r2, [r3, #4]
    pDataParams->pKeyStoreDataParams    = pKeyStoreDataParams;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	609a      	str	r2, [r3, #8]

    pDataParams->wRxBufLen              = 0U;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	835a      	strh	r2, [r3, #26]
    pDataParams->wRxBufStartPos         = 0U;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	83da      	strh	r2, [r3, #30]

    pDataParams->wTxBufLen              = 0U;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	825a      	strh	r2, [r3, #18]
    pDataParams->wTxBufStartPos         = 0U;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	839a      	strh	r2, [r3, #28]

    pDataParams->bActiveMode            = PH_OFF;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTimingMode            = PHHAL_HW_TIMING_MODE_OFF;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pDataParams->bCardType              = PHHAL_HW_CARDTYPE_ISO14443A;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    pDataParams->bTimeoutUnit           = PHHAL_HW_TIME_MICROSECONDS;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pDataParams->dwTimingUs             = 0U;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	621a      	str	r2, [r3, #32]
    pDataParams->wFieldOffTime          = PHHAL_HW_FIELD_OFF_DEFAULT;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2205      	movs	r2, #5
 800d6f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    pDataParams->wFieldRecoveryTime     = PHHAL_HW_FIELD_RECOVERY_DEFAULT;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2205      	movs	r2, #5
 800d6fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    pDataParams->bSymbolStart           = PH_OFF;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    pDataParams->bSymbolEnd             = PH_OFF;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    pDataParams->wAdditionalInfo        = 0U;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	861a      	strh	r2, [r3, #48]	@ 0x30

    pDataParams->bRfResetAfterTo        = PH_OFF;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2202      	movs	r2, #2
 800d71e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    pDataParams->dwFelicaEmdReg         = 0U;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	655a      	str	r2, [r3, #84]	@ 0x54
    pDataParams->bRxMultiple            = PH_OFF;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pDataParams->bNfcipMode             = PH_OFF;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bJewelActivated        = PH_OFF;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bLpcdMode              = PHHAL_HW_PN5180_LPCD_MODE_DEFAULT;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    pDataParams->wWakeupCounterInMs     = 3U;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2203      	movs	r2, #3
 800d74c:	869a      	strh	r2, [r3, #52]	@ 0x34
    pDataParams->bRfca                  = PH_ON;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2201      	movs	r2, #1
 800d752:	70da      	strb	r2, [r3, #3]
    pDataParams->wTargetMode            = PH_OFF;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->dwTxWaitMs             = 0U;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	625a      	str	r2, [r3, #36]	@ 0x24
    pDataParams->bSkipSend              = PH_OFF;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    pDataParams->bTransmited            = PH_OFF;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    pDataParams->bMfcCryptoEnabled      = PH_OFF;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    pDataParams->bCardMode              = PH_OFF;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    pDataParams->bBalConnectionType     = PHHAL_HW_BAL_CONNECTION_SPI;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2201      	movs	r2, #1
 800d784:	709a      	strb	r2, [r3, #2]
    pDataParams->pRFISRCallback         = &phhalHw_Pn5180_EventCallback;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	4a7d      	ldr	r2, [pc, #500]	@ (800d980 <phhalHw_Pn5180_Init+0x360>)
 800d78a:	649a      	str	r2, [r3, #72]	@ 0x48
    pDataParams->pTimerISRCallBack      = &phhalHw_Pn5180_GuardTimeCallBck;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4a7d      	ldr	r2, [pc, #500]	@ (800d984 <phhalHw_Pn5180_Init+0x364>)
 800d790:	64da      	str	r2, [r3, #76]	@ 0x4c
    pDataParams->bPollGuardTimeFlag     = PH_OFF;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bIsTestBusEnabled      = PH_OFF;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        pinCfg.bPullSelect = PHDRIVER_PIN_BUSY_PULL_CFG;
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_PinConfig(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT, &pinCfg));
    }
#endif
    /* Reset Pn5180 Front-end. */
    phhalHw_Pn5180_Reset();
 800d7a2:	f003 fc8d 	bl	80110c0 <phhalHw_Pn5180_Reset>

    if(((phbalReg_Type_t *)pBalDataParams)->bBalType == PHBAL_REG_TYPE_SPI)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	789b      	ldrb	r3, [r3, #2]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d11a      	bne.n	800d7e4 <phhalHw_Pn5180_Init+0x1c4>
    {

        /* Before performing first SPI operation try checking if TestBus is enabled or not
         * by pulling NSS pin down and wait for some time and check for Busy pin to go high. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_LOW);
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f003 fcad 	bl	8011110 <phhalHw_Pn5180_WriteSSEL>

        /* delay of ~2 ms */
        phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_DELAY_TO_CHECK_TESTBUS, NULL);
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2102      	movs	r1, #2
 800d7ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d7be:	f00b fa91 	bl	8018ce4 <phDriver_TimerStart>

        if (phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT) == PH_ON)
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	2102      	movs	r1, #2
 800d7c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d7ca:	f00b fa67 	bl	8018c9c <phDriver_PinRead>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d103      	bne.n	800d7dc <phhalHw_Pn5180_Init+0x1bc>
        {

            pDataParams->bIsTestBusEnabled = PH_ON;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* De-assert NSS pin. */
        phhalHw_Pn5180_WriteSSEL(pBalDataParams, PH_DRIVER_SET_HIGH);
 800d7dc:	2101      	movs	r1, #1
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f003 fc96 	bl	8011110 <phhalHw_Pn5180_WriteSSEL>
    }

#endif

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_FIRMWARE_VERSION_ADDR, bFirmwareVer, 2U));
 800d7e4:	f107 021c 	add.w	r2, r7, #28
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	2112      	movs	r1, #18
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f004 f86f 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	83fb      	strh	r3, [r7, #30]
 800d7f6:	8bfb      	ldrh	r3, [r7, #30]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <phhalHw_Pn5180_Init+0x1e0>
 800d7fc:	8bfb      	ldrh	r3, [r7, #30]
 800d7fe:	e0bb      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    printf("PN-Firmware = %02X %02X\n", bFirmwareVer[1], bFirmwareVer[0]);
 800d800:	7f7b      	ldrb	r3, [r7, #29]
 800d802:	4619      	mov	r1, r3
 800d804:	7f3b      	ldrb	r3, [r7, #28]
 800d806:	461a      	mov	r2, r3
 800d808:	485f      	ldr	r0, [pc, #380]	@ (800d988 <phhalHw_Pn5180_Init+0x368>)
 800d80a:	f011 fa2d 	bl	801ec68 <iprintf>
    if ( (0xFFU == bFirmwareVer[0]) && (0xFFU == bFirmwareVer[1]) )
 800d80e:	7f3b      	ldrb	r3, [r7, #28]
 800d810:	2bff      	cmp	r3, #255	@ 0xff
 800d812:	d105      	bne.n	800d820 <phhalHw_Pn5180_Init+0x200>
 800d814:	7f7b      	ldrb	r3, [r7, #29]
 800d816:	2bff      	cmp	r3, #255	@ 0xff
 800d818:	d102      	bne.n	800d820 <phhalHw_Pn5180_Init+0x200>
    {
        /* SPI Read problem... it is returing all FFFFs..
         * Version can never be 0xFF-0xFF */
        return PH_ERR_IO_TIMEOUT | PH_COMP_BAL;
 800d81a:	f240 1301 	movw	r3, #257	@ 0x101
 800d81e:	e0ab      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadE2Prom(pDataParams, PHHAL_HW_PN5180_TESTBUS_ENABLE_ADDR, &pDataParams->bIsTestBusEnabled, 1U));
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 800d826:	2301      	movs	r3, #1
 800d828:	2117      	movs	r1, #23
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f004 f850 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
 800d830:	4603      	mov	r3, r0
 800d832:	83fb      	strh	r3, [r7, #30]
 800d834:	8bfb      	ldrh	r3, [r7, #30]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <phhalHw_Pn5180_Init+0x21e>
 800d83a:	8bfb      	ldrh	r3, [r7, #30]
 800d83c:	e09c      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    if (0U != (pDataParams->bIsTestBusEnabled & 0x80U))
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 800d844:	b25b      	sxtb	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	da04      	bge.n	800d854 <phhalHw_Pn5180_Init+0x234>
    {
        pDataParams->bIsTestBusEnabled = PH_ON;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
 800d852:	e003      	b.n	800d85c <phhalHw_Pn5180_Init+0x23c>
    }
    else
    {
        pDataParams->bIsTestBusEnabled = PH_OFF;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
    }

    /* add func ：Set Power Gear Size*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, 0x81, &InitGearSize, 1U));
 800d85c:	f107 021a 	add.w	r2, r7, #26
 800d860:	2301      	movs	r3, #1
 800d862:	2181      	movs	r1, #129	@ 0x81
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f003 ffbb 	bl	80117e0 <phhalHw_Pn5180_Instr_WriteE2Prom>
 800d86a:	4603      	mov	r3, r0
 800d86c:	83fb      	strh	r3, [r7, #30]
 800d86e:	8bfb      	ldrh	r3, [r7, #30]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <phhalHw_Pn5180_Init+0x258>
 800d874:	8bfb      	ldrh	r3, [r7, #30]
 800d876:	e07f      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>

    /* Disable Idle IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE, (uint32_t)~IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 800d878:	f06f 0204 	mvn.w	r2, #4
 800d87c:	2101      	movs	r1, #1
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f003 fd7e 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800d884:	4603      	mov	r3, r0
 800d886:	83fb      	strh	r3, [r7, #30]
 800d888:	8bfb      	ldrh	r3, [r7, #30]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <phhalHw_Pn5180_Init+0x272>
 800d88e:	8bfb      	ldrh	r3, [r7, #30]
 800d890:	e072      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>

    /* Clear all IRQs  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800d892:	4a3e      	ldr	r2, [pc, #248]	@ (800d98c <phhalHw_Pn5180_Init+0x36c>)
 800d894:	2103      	movs	r1, #3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f003 fc86 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800d89c:	4603      	mov	r3, r0
 800d89e:	83fb      	strh	r3, [r7, #30]
 800d8a0:	8bfb      	ldrh	r3, [r7, #30]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <phhalHw_Pn5180_Init+0x28a>
 800d8a6:	8bfb      	ldrh	r3, [r7, #30]
 800d8a8:	e066      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>

    /* Create the event. */
//    pDataParams->HwEventObj.pEvtName = (uint8_t *)bHalEventName;
    pDataParams->HwEventObj.intialValue = 0U;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    PH_CHECK_SUCCESS_FCT(statusTmp, phOsal_EventCreate(&pDataParams->HwEventObj.EventHandle, &pDataParams->HwEventObj));
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f503 72c2 	add.w	r2, r3, #388	@ 0x184
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4610      	mov	r0, r2
 800d8c2:	f00b faed 	bl	8018ea0 <phOsal_EventCreate>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	83fb      	strh	r3, [r7, #30]
 800d8ca:	8bfb      	ldrh	r3, [r7, #30]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <phhalHw_Pn5180_Init+0x2b4>
 800d8d0:	8bfb      	ldrh	r3, [r7, #30]
 800d8d2:	e051      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>

    /*clear previously occurred unwanted events*/
    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800d8da:	2300      	movs	r3, #0
 800d8dc:	2201      	movs	r2, #1
 800d8de:	2100      	movs	r1, #0
 800d8e0:	f00b fbac 	bl	801903c <phOsal_EventClear>
    xEventHandle = pDataParams->HwEventObj.EventHandle;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800d8ea:	4a29      	ldr	r2, [pc, #164]	@ (800d990 <phhalHw_Pn5180_Init+0x370>)
 800d8ec:	6013      	str	r3, [r2, #0]

    /* firmware version was already read earlier (to check if SPI is working).  Store it in dataparams.  */
    pDataParams->wFirmwareVer = bFirmwareVer[1];
 800d8ee:	7f7b      	ldrb	r3, [r7, #29]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    pDataParams->wFirmwareVer = (pDataParams->wFirmwareVer << 8U) | bFirmwareVer[0];
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d8fe:	b21b      	sxth	r3, r3
 800d900:	021b      	lsls	r3, r3, #8
 800d902:	b21a      	sxth	r2, r3
 800d904:	7f3b      	ldrb	r3, [r7, #28]
 800d906:	b21b      	sxth	r3, r3
 800d908:	4313      	orrs	r3, r2
 800d90a:	b21b      	sxth	r3, r3
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

    /* Check if Firmware version is above 3.4, which also verifies Pn5180 is initialized. */
    if (pDataParams->wFirmwareVer < 0x304U)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d91a:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 800d91e:	d202      	bcs.n	800d926 <phhalHw_Pn5180_Init+0x306>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERFACE_ERROR, PH_COMP_HAL);
 800d920:	f240 230b 	movw	r3, #523	@ 0x20b
 800d924:	e028      	b.n	800d978 <phhalHw_Pn5180_Init+0x358>
    }
    else
    {
        /* Apply HAL Digital delay when pn5180 FW version is less than 3.8. */
        if (pDataParams->wFirmwareVer >= 0x308U)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d92c:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 800d930:	d321      	bcc.n	800d976 <phhalHw_Pn5180_Init+0x356>
        {
            /* Read MISC_CONFIG value */
            phhalHw_Pn5180_Instr_ReadE2Prom(
 800d932:	f107 021b 	add.w	r2, r7, #27
 800d936:	2301      	movs	r3, #1
 800d938:	21e8      	movs	r1, #232	@ 0xe8
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f003 ffc8 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
                &bDigitalDelayCfg,
                PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);

            /* Apply FW Digital delay and enable timer 1 for the use of FDT/FWT for FW version 3.8 onwards. */

            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800d940:	7efb      	ldrb	r3, [r7, #27]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	d004      	beq.n	800d954 <phhalHw_Pn5180_Init+0x334>
                (!((bDigitalDelayCfg & PHHAL_HW_PN5180_FDT_TIMER_USED_MASK) == ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U))))
 800d94a:	7efb      	ldrb	r3, [r7, #27]
 800d94c:	f003 0306 	and.w	r3, r3, #6
            if (((0U == ((bDigitalDelayCfg & PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE)))) ||
 800d950:	2b02      	cmp	r3, #2
 800d952:	d010      	beq.n	800d976 <phhalHw_Pn5180_Init+0x356>
            {
                /* Clear timer bits. */
                bDigitalDelayCfg &= (uint8_t)~(PHHAL_HW_PN5180_FDT_TIMER_USED_MASK);
 800d954:	7efb      	ldrb	r3, [r7, #27]
 800d956:	f023 0306 	bic.w	r3, r3, #6
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	76fb      	strb	r3, [r7, #27]

                /* Enable FW digital delay and timer 1 for FDT/FWT. */
                bDigitalDelayCfg |= (uint8_t)(PHHAL_HW_PN5180_DIGITAL_DELAY_ENABLE | ((PHHAL_HW_PN5180_FDT_TIMER_USED) << 1U));
 800d95e:	7efb      	ldrb	r3, [r7, #27]
 800d960:	f043 0303 	orr.w	r3, r3, #3
 800d964:	b2db      	uxtb	r3, r3
 800d966:	76fb      	strb	r3, [r7, #27]

                /* Write back MISC_CONFIG value */
                phhalHw_Pn5180_Instr_WriteE2Prom(
 800d968:	f107 021b 	add.w	r2, r7, #27
 800d96c:	2301      	movs	r3, #1
 800d96e:	21e8      	movs	r1, #232	@ 0xe8
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f003 ff35 	bl	80117e0 <phhalHw_Pn5180_Instr_WriteE2Prom>
                    &bDigitalDelayCfg,
                    PHHAL_HW_PN5180_DIGITAL_DELAY_CONFIG_LEN);
            }
        }
    }
    return PH_ERR_SUCCESS;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3720      	adds	r7, #32
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	0800d5cb 	.word	0x0800d5cb
 800d984:	0800d5f5 	.word	0x0800d5f5
 800d988:	0802165c 	.word	0x0802165c
 800d98c:	000fffff 	.word	0x000fffff
 800d990:	20001870 	.word	0x20001870

0800d994 <phhalHw_Pn5180_WriteRegister>:
phStatus_t phhalHw_Pn5180_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t  bAddress,
    uint32_t dwValue
    )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	460b      	mov	r3, r1
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_WriteRegister(  \
 800d9a2:	7afb      	ldrb	r3, [r7, #11]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f003 fbfd 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800d9ae:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        dwValue);
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3710      	adds	r7, #16
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <phhalHw_Pn5180_ReadRegister>:

phStatus_t phhalHw_Pn5180_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bAddress,
    uint32_t * pValue)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	72fb      	strb	r3, [r7, #11]
    return phhalHw_Pn5180_Instr_ReadRegister(   \
 800d9c6:	7afb      	ldrb	r3, [r7, #11]
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f003 fdff 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 800d9d2:	4603      	mov	r3, r0
        pDataParams,  \
        bAddress,  \
        pValue);   \

}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <phhalHw_Pn5180_ApplyProtocolSettings>:

phStatus_t phhalHw_Pn5180_ApplyProtocolSettings(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bCardType)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	70fb      	strb	r3, [r7, #3]
    uint16_t   PH_MEMLOC_REM wConfig;
    uint16_t   PH_MEMLOC_REM wTxDatarate;
    uint16_t   PH_MEMLOC_REM wRxDatarate;

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	215e      	movs	r1, #94	@ 0x5e
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fd73 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	823b      	strh	r3, [r7, #16]
 800d9f6:	8a3b      	ldrh	r3, [r7, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <phhalHw_Pn5180_ApplyProtocolSettings+0x24>
 800d9fc:	8a3b      	ldrh	r3, [r7, #16]
 800d9fe:	e1af      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    /* Store new card type */
    if (bCardType != PHHAL_HW_CARDTYPE_CURRENT)
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <phhalHw_Pn5180_ApplyProtocolSettings+0x40>
    {
        pDataParams->bCardType = bCardType;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	78fa      	ldrb	r2, [r7, #3]
 800da0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        bUseDefaultShadow = 1U;
 800da16:	2301      	movs	r3, #1
 800da18:	767b      	strb	r3, [r7, #25]
 800da1a:	e001      	b.n	800da20 <phhalHw_Pn5180_ApplyProtocolSettings+0x44>
    }
    else
    {
        bUseDefaultShadow = 0U;
 800da1c:	2300      	movs	r3, #0
 800da1e:	767b      	strb	r3, [r7, #25]
    }

    pDataParams->bActiveMode       = PH_OFF;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->wTargetMode       = PH_OFF;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bJewelActivated   = PH_OFF;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    pDataParams->bNfcipMode        = PH_OFF;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    pDataParams->bSkipSend         = PH_OFF;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    /* configure reader IC for current card */
    switch (pDataParams->bCardType)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da4c:	3b01      	subs	r3, #1
 800da4e:	2b09      	cmp	r3, #9
 800da50:	f200 8104 	bhi.w	800dc5c <phhalHw_Pn5180_ApplyProtocolSettings+0x280>
 800da54:	a201      	add	r2, pc, #4	@ (adr r2, 800da5c <phhalHw_Pn5180_ApplyProtocolSettings+0x80>)
 800da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5a:	bf00      	nop
 800da5c:	0800da85 	.word	0x0800da85
 800da60:	0800daaf 	.word	0x0800daaf
 800da64:	0800dad9 	.word	0x0800dad9
 800da68:	0800dbf3 	.word	0x0800dbf3
 800da6c:	0800dc5d 	.word	0x0800dc5d
 800da70:	0800dc1d 	.word	0x0800dc1d
 800da74:	0800db55 	.word	0x0800db55
 800da78:	0800db8f 	.word	0x0800db8f
 800da7c:	0800dbc1 	.word	0x0800dbc1
 800da80:	0800db17 	.word	0x0800db17
    {
        /* configure hardware for ISO 14443A */
    case PHHAL_HW_CARDTYPE_ISO14443A:
        /* Use 14443a default shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER, PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC));  /* Masking RxDataRate with Minimum Configuration Index */
 800da84:	2280      	movs	r2, #128	@ 0x80
 800da86:	2100      	movs	r1, #0
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f004 fa87 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800da8e:	4603      	mov	r3, r0
 800da90:	823b      	strh	r3, [r7, #16]
 800da92:	8a3b      	ldrh	r3, [r7, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <phhalHw_Pn5180_ApplyProtocolSettings+0xc0>
 800da98:	8a3b      	ldrh	r3, [r7, #16]
 800da9a:	e161      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443a);
 800da9c:	4b99      	ldr	r3, [pc, #612]	@ (800dd04 <phhalHw_Pn5180_ApplyProtocolSettings+0x328>)
 800da9e:	61fb      	str	r3, [r7, #28]
 800daa0:	230a      	movs	r3, #10
 800daa2:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800daa4:	2300      	movs	r3, #0
 800daa6:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800daa8:	2300      	movs	r3, #0
 800daaa:	827b      	strh	r3, [r7, #18]
        break;
 800daac:	e0de      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO14443B:
        /* Use 14443b shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ, PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK));  /* Masking RxDataRate with Minimum Configuration Index */
 800daae:	2284      	movs	r2, #132	@ 0x84
 800dab0:	2104      	movs	r1, #4
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f004 fa72 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dab8:	4603      	mov	r3, r0
 800daba:	823b      	strh	r3, [r7, #16]
 800dabc:	8a3b      	ldrh	r3, [r7, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <phhalHw_Pn5180_ApplyProtocolSettings+0xea>
 800dac2:	8a3b      	ldrh	r3, [r7, #16]
 800dac4:	e14c      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I14443b);
 800dac6:	4b90      	ldr	r3, [pc, #576]	@ (800dd08 <phhalHw_Pn5180_ApplyProtocolSettings+0x32c>)
 800dac8:	61fb      	str	r3, [r7, #28]
 800daca:	230b      	movs	r3, #11
 800dacc:	837b      	strh	r3, [r7, #26]
        /* Update Datarate in shadow for parity setting */
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800dace:	2300      	movs	r3, #0
 800dad0:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800dad2:	2300      	movs	r3, #0
 800dad4:	827b      	strh	r3, [r7, #18]
        break;
 800dad6:	e0c9      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_FELICA_212:
        /* Use FeliCa shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_212, PHHAL_HW_PN5180_RF_RX_FELICA_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800dad8:	2288      	movs	r2, #136	@ 0x88
 800dada:	2108      	movs	r1, #8
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f004 fa5d 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dae2:	4603      	mov	r3, r0
 800dae4:	823b      	strh	r3, [r7, #16]
 800dae6:	8a3b      	ldrh	r3, [r7, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <phhalHw_Pn5180_ApplyProtocolSettings+0x114>
 800daec:	8a3b      	ldrh	r3, [r7, #16]
 800daee:	e137      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica);
 800daf0:	4b86      	ldr	r3, [pc, #536]	@ (800dd0c <phhalHw_Pn5180_ApplyProtocolSettings+0x330>)
 800daf2:	61fb      	str	r3, [r7, #28]
 800daf4:	230b      	movs	r3, #11
 800daf6:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800daf8:	2301      	movs	r3, #1
 800dafa:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800dafc:	2301      	movs	r3, #1
 800dafe:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f004 feed 	bl	80128e0 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800db06:	4603      	mov	r3, r0
 800db08:	823b      	strh	r3, [r7, #16]
 800db0a:	8a3b      	ldrh	r3, [r7, #16]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f000 80a8 	beq.w	800dc62 <phhalHw_Pn5180_ApplyProtocolSettings+0x286>
 800db12:	8a3b      	ldrh	r3, [r7, #16]
 800db14:	e124      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_FELICA_424:
        /* Use FeliCa shadow for 424*/
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_FELICA_424, PHHAL_HW_PN5180_RF_RX_FELICA_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800db16:	2289      	movs	r2, #137	@ 0x89
 800db18:	2109      	movs	r1, #9
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f004 fa3e 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800db20:	4603      	mov	r3, r0
 800db22:	823b      	strh	r3, [r7, #16]
 800db24:	8a3b      	ldrh	r3, [r7, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <phhalHw_Pn5180_ApplyProtocolSettings+0x152>
 800db2a:	8a3b      	ldrh	r3, [r7, #16]
 800db2c:	e118      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_Felica_424);
 800db2e:	4b78      	ldr	r3, [pc, #480]	@ (800dd10 <phhalHw_Pn5180_ApplyProtocolSettings+0x334>)
 800db30:	61fb      	str	r3, [r7, #28]
 800db32:	230b      	movs	r3, #11
 800db34:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800db36:	2302      	movs	r3, #2
 800db38:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800db3a:	2302      	movs	r3, #2
 800db3c:	827b      	strh	r3, [r7, #18]

        /* Configure FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_FelicaEmdReg(pDataParams));
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f004 fece 	bl	80128e0 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>
 800db44:	4603      	mov	r3, r0
 800db46:	823b      	strh	r3, [r7, #16]
 800db48:	8a3b      	ldrh	r3, [r7, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 808b 	beq.w	800dc66 <phhalHw_Pn5180_ApplyProtocolSettings+0x28a>
 800db50:	8a3b      	ldrh	r3, [r7, #16]
 800db52:	e105      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
        /* Use I18092m_Active shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106, PHHAL_HW_PN5180_RF_RX_NFC_AI_106));  /* Masking RxDataRate with Minimum Configuration Index */
 800db54:	228a      	movs	r2, #138	@ 0x8a
 800db56:	210a      	movs	r1, #10
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f004 fa1f 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800db5e:	4603      	mov	r3, r0
 800db60:	823b      	strh	r3, [r7, #16]
 800db62:	8a3b      	ldrh	r3, [r7, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <phhalHw_Pn5180_ApplyProtocolSettings+0x190>
 800db68:	8a3b      	ldrh	r3, [r7, #16]
 800db6a:	e0f9      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_Active);
 800db6c:	4b69      	ldr	r3, [pc, #420]	@ (800dd14 <phhalHw_Pn5180_ApplyProtocolSettings+0x338>)
 800db6e:	61fb      	str	r3, [r7, #28]
 800db70:	230b      	movs	r3, #11
 800db72:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_106;
 800db74:	2300      	movs	r3, #0
 800db76:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_106;
 800db78:	2300      	movs	r3, #0
 800db7a:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        pDataParams->bNfcipMode = PH_ON;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        break;
 800db8c:	e06e      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
        /* Use I18092m_Active_212 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212, PHHAL_HW_PN5180_RF_RX_NFC_AI_212));  /* Masking RxDataRate with Minimum Configuration Index */
 800db8e:	228b      	movs	r2, #139	@ 0x8b
 800db90:	210b      	movs	r1, #11
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f004 fa02 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800db98:	4603      	mov	r3, r0
 800db9a:	823b      	strh	r3, [r7, #16]
 800db9c:	8a3b      	ldrh	r3, [r7, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <phhalHw_Pn5180_ApplyProtocolSettings+0x1ca>
 800dba2:	8a3b      	ldrh	r3, [r7, #16]
 800dba4:	e0dc      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_212_Active);
 800dba6:	4b5c      	ldr	r3, [pc, #368]	@ (800dd18 <phhalHw_Pn5180_ApplyProtocolSettings+0x33c>)
 800dba8:	61fb      	str	r3, [r7, #28]
 800dbaa:	230b      	movs	r3, #11
 800dbac:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_212;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_212;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800dbbe:	e055      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:
        /* Use I18092m_Active_424 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424, PHHAL_HW_PN5180_RF_RX_NFC_AI_424));  /* Masking RxDataRate with Minimum Configuration Index */
 800dbc0:	228c      	movs	r2, #140	@ 0x8c
 800dbc2:	210c      	movs	r1, #12
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f004 f9e9 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	823b      	strh	r3, [r7, #16]
 800dbce:	8a3b      	ldrh	r3, [r7, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <phhalHw_Pn5180_ApplyProtocolSettings+0x1fc>
 800dbd4:	8a3b      	ldrh	r3, [r7, #16]
 800dbd6:	e0c3      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefShadow_I18092m_424_Active);
 800dbd8:	4b50      	ldr	r3, [pc, #320]	@ (800dd1c <phhalHw_Pn5180_ApplyProtocolSettings+0x340>)
 800dbda:	61fb      	str	r3, [r7, #28]
 800dbdc:	230b      	movs	r3, #11
 800dbde:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_DATARATE_424;
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_DATARATE_424;
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	827b      	strh	r3, [r7, #18]
        /* Enable active mode */
        pDataParams->bActiveMode = PH_ON;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        break;
 800dbf0:	e03c      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_ISO15693:
        /* Use 15693 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK100, PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC));  /* Masking RxDataRate with Minimum Configuration Index */
 800dbf2:	228d      	movs	r2, #141	@ 0x8d
 800dbf4:	210d      	movs	r1, #13
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f004 f9d0 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	823b      	strh	r3, [r7, #16]
 800dc00:	8a3b      	ldrh	r3, [r7, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <phhalHw_Pn5180_ApplyProtocolSettings+0x22e>
 800dc06:	8a3b      	ldrh	r3, [r7, #16]
 800dc08:	e0aa      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I15693);
 800dc0a:	4b45      	ldr	r3, [pc, #276]	@ (800dd20 <phhalHw_Pn5180_ApplyProtocolSettings+0x344>)
 800dc0c:	61fb      	str	r3, [r7, #28]
 800dc0e:	230c      	movs	r3, #12
 800dc10:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800dc12:	230b      	movs	r3, #11
 800dc14:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RF_RX_DATARATE_HIGH;
 800dc16:	230d      	movs	r3, #13
 800dc18:	827b      	strh	r3, [r7, #18]

        break;
 800dc1a:	e027      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>

    case PHHAL_HW_CARDTYPE_I18000P3M3:
        /* Use 18000p3m3 shadow */
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Instr_LoadRfConfiguration(pDataParams, PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK, PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD));  /* Masking RxDataRate with Minimum Configuration Index */
 800dc1c:	2290      	movs	r2, #144	@ 0x90
 800dc1e:	2110      	movs	r1, #16
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f004 f9bb 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 800dc26:	4603      	mov	r3, r0
 800dc28:	823b      	strh	r3, [r7, #16]
 800dc2a:	8a3b      	ldrh	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <phhalHw_Pn5180_ApplyProtocolSettings+0x258>
 800dc30:	8a3b      	ldrh	r3, [r7, #16]
 800dc32:	e095      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

        SET_PN5180_SHADOW(wPn5180_DefaultShadow_I18000p3m3);
 800dc34:	4b3b      	ldr	r3, [pc, #236]	@ (800dd24 <phhalHw_Pn5180_ApplyProtocolSettings+0x348>)
 800dc36:	61fb      	str	r3, [r7, #28]
 800dc38:	230c      	movs	r3, #12
 800dc3a:	837b      	strh	r3, [r7, #26]
        wTxDatarate = PHHAL_HW_RF_TX_DATARATE_I18000P3M3;
 800dc3c:	2311      	movs	r3, #17
 800dc3e:	82bb      	strh	r3, [r7, #20]
        wRxDatarate = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 800dc40:	2313      	movs	r3, #19
 800dc42:	827b      	strh	r3, [r7, #18]
        /*A Timeout of 5 ms has been added*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, 5U));
 800dc44:	2205      	movs	r2, #5
 800dc46:	210e      	movs	r1, #14
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fc45 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	823b      	strh	r3, [r7, #16]
 800dc52:	8a3b      	ldrh	r3, [r7, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d008      	beq.n	800dc6a <phhalHw_Pn5180_ApplyProtocolSettings+0x28e>
 800dc58:	8a3b      	ldrh	r3, [r7, #16]
 800dc5a:	e081      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800dc5c:	f240 2321 	movw	r3, #545	@ 0x221
 800dc60:	e07e      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        break;
 800dc62:	bf00      	nop
 800dc64:	e002      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800dc66:	bf00      	nop
 800dc68:	e000      	b.n	800dc6c <phhalHw_Pn5180_ApplyProtocolSettings+0x290>
        break;
 800dc6a:	bf00      	nop
    }

    /* Copy over default shadow contents into current shadow. */
    if (0U != bUseDefaultShadow)
 800dc6c:	7e7b      	ldrb	r3, [r7, #25]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d069      	beq.n	800dd46 <phhalHw_Pn5180_ApplyProtocolSettings+0x36a>
    {
        if(pShadowDefault == NULL)
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d102      	bne.n	800dc7e <phhalHw_Pn5180_ApplyProtocolSettings+0x2a2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_HAL);
 800dc78:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800dc7c:	e070      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
        }
        /* Initialize config shadow */
        (void)memset(pDataParams->wCfgShadow, 0x00U, PHHAL_HW_PN5180_SHADOW_COUNT * sizeof(pDataParams->wCfgShadow[0]));
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	3358      	adds	r3, #88	@ 0x58
 800dc82:	2220      	movs	r2, #32
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f011 f94e 	bl	801ef28 <memset>

        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	82fb      	strh	r3, [r7, #22]
 800dc90:	e04d      	b.n	800dd2e <phhalHw_Pn5180_ApplyProtocolSettings+0x352>
        {
            wConfig = pShadowDefault[wIndex << 1U];
 800dc92:	8afb      	ldrh	r3, [r7, #22]
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	69fa      	ldr	r2, [r7, #28]
 800dc98:	4413      	add	r3, r2
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	81fb      	strh	r3, [r7, #14]
            pDataParams->wCfgShadow[wConfig] = pShadowDefault[(wIndex << 1U) + 1U];
 800dc9e:	8afb      	ldrh	r3, [r7, #22]
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	3302      	adds	r3, #2
 800dca4:	69fa      	ldr	r2, [r7, #28]
 800dca6:	4413      	add	r3, r2
 800dca8:	89fa      	ldrh	r2, [r7, #14]
 800dcaa:	8819      	ldrh	r1, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	322c      	adds	r2, #44	@ 0x2c
 800dcb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800dcb4:	89fb      	ldrh	r3, [r7, #14]
 800dcb6:	2b07      	cmp	r3, #7
 800dcb8:	d136      	bne.n	800dd28 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
            if((wConfig == PHHAL_HW_CONFIG_TXWAIT_US) &&
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d109      	bne.n	800dcd8 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d004      	beq.n	800dcd8 <phhalHw_Pn5180_ApplyProtocolSettings+0x2fc>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dcd4:	2b0a      	cmp	r3, #10
 800dcd6:	d127      	bne.n	800dd28 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
                (pDataParams->wTargetMode == PH_OFF))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
                ((pDataParams->bActiveMode) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_212) || (pDataParams->bCardType == PHHAL_HW_CARDTYPE_FELICA_424)) &&
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d123      	bne.n	800dd28 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, wConfig, pDataParams->wCfgShadow[wConfig]));
 800dce0:	89fa      	ldrh	r2, [r7, #14]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	322c      	adds	r2, #44	@ 0x2c
 800dce6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800dcea:	89fb      	ldrh	r3, [r7, #14]
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fbf2 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	823b      	strh	r3, [r7, #16]
 800dcf8:	8a3b      	ldrh	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d014      	beq.n	800dd28 <phhalHw_Pn5180_ApplyProtocolSettings+0x34c>
 800dcfe:	8a3b      	ldrh	r3, [r7, #16]
 800dd00:	e02e      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>
 800dd02:	bf00      	nop
 800dd04:	08021f40 	.word	0x08021f40
 800dd08:	08021f68 	.word	0x08021f68
 800dd0c:	08021f94 	.word	0x08021f94
 800dd10:	08021fc0 	.word	0x08021fc0
 800dd14:	0802204c 	.word	0x0802204c
 800dd18:	08022078 	.word	0x08022078
 800dd1c:	080220a4 	.word	0x080220a4
 800dd20:	08021fec 	.word	0x08021fec
 800dd24:	0802201c 	.word	0x0802201c
        for (wIndex = 0U; wIndex < wShadowCount; ++wIndex)
 800dd28:	8afb      	ldrh	r3, [r7, #22]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	82fb      	strh	r3, [r7, #22]
 800dd2e:	8afa      	ldrh	r2, [r7, #22]
 800dd30:	8b7b      	ldrh	r3, [r7, #26]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d3ad      	bcc.n	800dc92 <phhalHw_Pn5180_ApplyProtocolSettings+0x2b6>
            }
        }

        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDatarate;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	8aba      	ldrh	r2, [r7, #20]
 800dd3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDatarate;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	8a7a      	ldrh	r2, [r7, #18]
 800dd42:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

    }

    /* MIFARE Classic contactless IC Crypto 1 state is disabled by default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams, PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1, PH_ON));
 800dd46:	2201      	movs	r2, #1
 800dd48:	212e      	movs	r1, #46	@ 0x2e
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fbc4 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800dd50:	4603      	mov	r3, r0
 800dd52:	823b      	strh	r3, [r7, #16]
 800dd54:	8a3b      	ldrh	r3, [r7, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <phhalHw_Pn5180_ApplyProtocolSettings+0x382>
 800dd5a:	8a3b      	ldrh	r3, [r7, #16]
 800dd5c:	e000      	b.n	800dd60 <phhalHw_Pn5180_ApplyProtocolSettings+0x384>

    return PH_ERR_SUCCESS;
 800dd5e:	2300      	movs	r3, #0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3720      	adds	r7, #32
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <phhalHw_Pn5180_Exchange>:
    uint8_t * pTxBuffer,
    uint16_t wTxLength,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength
    )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b090      	sub	sp, #64	@ 0x40
 800dd6c:	af02      	add	r7, sp, #8
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	607a      	str	r2, [r7, #4]
 800dd72:	461a      	mov	r2, r3
 800dd74:	460b      	mov	r3, r1
 800dd76:	817b      	strh	r3, [r7, #10]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0U;
 800dd84:	2300      	movs	r3, #0
 800dd86:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wTmpBufferSize = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor = 0U;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwValue;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM pReceivedData[1];
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM aCrc[2] = {0,0};
 800dd90:	2300      	movs	r3, #0
 800dd92:	833b      	strh	r3, [r7, #24]
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint32_t    PH_MEMLOC_REM dwRegister = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	613b      	str	r3, [r7, #16]

    /* Check all the pointers */
    if (0U != (wTxLength)) PH_ASSERT_NULL_PARAM(pTxBuffer, PH_COMP_HAL);
 800dd98:	893b      	ldrh	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <phhalHw_Pn5180_Exchange+0x42>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d102      	bne.n	800ddaa <phhalHw_Pn5180_Exchange+0x42>
 800dda4:	f240 2321 	movw	r3, #545	@ 0x221
 800dda8:	e253      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    do
    {
        if (pDataParams->wTargetMode != PH_OFF)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d003      	beq.n	800ddc2 <phhalHw_Pn5180_Exchange+0x5a>
        {
            /* If wTargetMode is changed then Target is activated and Exchange should not be used to perform Tx Operation. */
            statusTmp = (PH_ERR_USE_CONDITION | PH_COMP_HAL);
 800ddba:	f240 2325 	movw	r3, #549	@ 0x225
 800ddbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800ddc0:	e1cf      	b.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        /* Check options */
        if (0U != (wOption & (uint16_t)~(uint16_t)(PH_EXCHANGE_BUFFERED_BIT | PH_EXCHANGE_LEAVE_BUFFER_BIT)))
 800ddc2:	897b      	ldrh	r3, [r7, #10]
 800ddc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d003      	beq.n	800ddd4 <phhalHw_Pn5180_Exchange+0x6c>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800ddcc:	f240 2321 	movw	r3, #545	@ 0x221
 800ddd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800ddd2:	e1c6      	b.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /* Validate input parameters. */
        if (((ppRxBuffer == NULL) || (pRxLength == NULL)) && ((wOption & PH_EXCHANGE_BUFFERED_BIT) == 0U))
 800ddd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <phhalHw_Pn5180_Exchange+0x78>
 800ddda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d107      	bne.n	800ddf0 <phhalHw_Pn5180_Exchange+0x88>
 800dde0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	db03      	blt.n	800ddf0 <phhalHw_Pn5180_Exchange+0x88>
        {
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 800dde8:	f240 2321 	movw	r3, #545	@ 0x221
 800ddec:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800ddee:	e1b8      	b.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if (pDataParams->bActiveMode == PH_OFF)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d115      	bne.n	800de26 <phhalHw_Pn5180_Exchange+0xbe>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800ddfa:	f107 0310 	add.w	r3, r7, #16
 800ddfe:	461a      	mov	r2, r3
 800de00:	211d      	movs	r1, #29
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f003 fbe4 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 800de08:	4603      	mov	r3, r0
 800de0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800de0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <phhalHw_Pn5180_Exchange+0xae>
 800de12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de14:	e21d      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>

            if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d102      	bne.n	800de26 <phhalHw_Pn5180_Exchange+0xbe>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800de20:	f240 230a 	movw	r3, #522	@ 0x20a
 800de24:	e215      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>
            }
        }

        /* retrieve transmit buffer */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 800de26:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800de2a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800de2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	460b      	mov	r3, r1
 800de36:	2101      	movs	r1, #1
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f004 f986 	bl	801214a <phhalHw_Pn5180_GetTxBuffer>
 800de3e:	4603      	mov	r3, r0
 800de40:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800de42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de44:	2b00      	cmp	r3, #0
 800de46:	f040 818c 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>

        /* clear internal buffer if requested */
        if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 800de4a:	897b      	ldrh	r3, [r7, #10]
 800de4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d105      	bne.n	800de60 <phhalHw_Pn5180_Exchange+0xf8>
        {
            pDataParams->wTxBufLen = 0U;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	825a      	strh	r2, [r3, #18]
            pDataParams->wTxBufStartPos = 0U;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	839a      	strh	r2, [r3, #28]
        }

        /* Validate received parameter */
        if (pRxLength != NULL)
 800de60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <phhalHw_Pn5180_Exchange+0x104>
        {
            *pRxLength = 0U;
 800de66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de68:	2200      	movs	r2, #0
 800de6a:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de72:	2b01      	cmp	r3, #1
 800de74:	d150      	bne.n	800df18 <phhalHw_Pn5180_Exchange+0x1b0>
        {
            wOption = PH_EXCHANGE_DEFAULT;
 800de76:	2300      	movs	r3, #0
 800de78:	817b      	strh	r3, [r7, #10]

            /*Enable Crc_B for the data to be transmitted */
            /*PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, CRC_TX_CONFIG, CRC_TX_CONFIG_TX_CRC_BYTE2_ENABLE_MASK));*/

            /*Compute Crc_B for the data to be transmitted */
            PH_CHECK_FAILURE_FCT(statusTmp, phTools_ComputeCrc_B(pTxBuffer, wTxLength, aCrc));
 800de7a:	893b      	ldrh	r3, [r7, #8]
 800de7c:	f107 0218 	add.w	r2, r7, #24
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7f9 fdab 	bl	80079de <phTools_ComputeCrc_B>
 800de88:	4603      	mov	r3, r0
 800de8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800de8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 8167 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            /* Turn OFF the parity, by default shadow it is ON */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_PARITY, PH_OFF));
 800de94:	2200      	movs	r2, #0
 800de96:	2100      	movs	r1, #0
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f000 fb1d 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800de9e:	4603      	mov	r3, r0
 800dea0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800dea2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f040 815c 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>

            /* Make sure CRC is OFF */
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 800deaa:	2200      	movs	r2, #0
 800deac:	2101      	movs	r1, #1
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 fb12 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800deb4:	4603      	mov	r3, r0
 800deb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800deb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800deba:	2b00      	cmp	r3, #0
 800debc:	f040 8151 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 800dec0:	2200      	movs	r2, #0
 800dec2:	2102      	movs	r1, #2
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 fb07 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800deca:	4603      	mov	r3, r0
 800decc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800dece:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f040 8146 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7U));
 800ded6:	2207      	movs	r2, #7
 800ded8:	2103      	movs	r1, #3
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f000 fafc 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800dee0:	4603      	mov	r3, r0
 800dee2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800dee4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f040 813b 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>

            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_TX_FRAMESTEP_ENABLE_MASK));
 800deec:	2204      	movs	r2, #4
 800deee:	2104      	movs	r1, #4
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f003 f9cf 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800def6:	4603      	mov	r3, r0
 800def8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800defa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800defc:	2b00      	cmp	r3, #0
 800defe:	f040 8130 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXWAIT_US,29));
 800df02:	221d      	movs	r2, #29
 800df04:	2107      	movs	r1, #7
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 fae6 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800df0c:	4603      	mov	r3, r0
 800df0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800df10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df12:	2b00      	cmp	r3, #0
 800df14:	f040 8125 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        if ((pDataParams->wTxBufStartPos == 0U))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	8b9b      	ldrh	r3, [r3, #28]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d122      	bne.n	800df66 <phhalHw_Pn5180_Exchange+0x1fe>
        {
            pTmpBuffer[pDataParams->wTxBufStartPos++] = PHHAL_HW_PN5180_SET_INSTR_SEND_DATA; /* Reserved 0th Location of buffer for Command code */
 800df20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	8b9b      	ldrh	r3, [r3, #28]
 800df26:	1c59      	adds	r1, r3, #1
 800df28:	b288      	uxth	r0, r1
 800df2a:	68f9      	ldr	r1, [r7, #12]
 800df2c:	8388      	strh	r0, [r1, #28]
 800df2e:	4413      	add	r3, r2
 800df30:	2209      	movs	r2, #9
 800df32:	701a      	strb	r2, [r3, #0]
            pTmpBuffer[pDataParams->wTxBufStartPos++] = 0U; /* Reserved 1st Location of buffer for Command code */
 800df34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	8b9b      	ldrh	r3, [r3, #28]
 800df3a:	1c59      	adds	r1, r3, #1
 800df3c:	b288      	uxth	r0, r1
 800df3e:	68f9      	ldr	r1, [r7, #12]
 800df40:	8388      	strh	r0, [r1, #28]
 800df42:	4413      	add	r3, r2
 800df44:	2200      	movs	r2, #0
 800df46:	701a      	strb	r2, [r3, #0]

            /* Prepend Start Byte (0xF0U) in Passive 106kbps during NFCIP exchange. */
#ifndef PN5180_P2P_HW_SYNC_BYTE
            if (pDataParams->bNfcipMode == PH_ON)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d109      	bne.n	800df66 <phhalHw_Pn5180_Exchange+0x1fe>
            {
                /* Prepend Start Byte 0xF0U in case of Passive Communication at 106kbps BaudRate */
                pTmpBuffer[pDataParams->wTxBufStartPos++] = 0xF0U;
 800df52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8b9b      	ldrh	r3, [r3, #28]
 800df58:	1c59      	adds	r1, r3, #1
 800df5a:	b288      	uxth	r0, r1
 800df5c:	68f9      	ldr	r1, [r7, #12]
 800df5e:	8388      	strh	r0, [r1, #28]
 800df60:	4413      	add	r3, r2
 800df62:	22f0      	movs	r2, #240	@ 0xf0
 800df64:	701a      	strb	r2, [r3, #0]
            }
#endif
        }

        if (wTxLength != 0U)
 800df66:	893b      	ldrh	r3, [r7, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d03d      	beq.n	800dfe8 <phhalHw_Pn5180_Exchange+0x280>
        {
            /* check wTmpBufferSize fill all the required data to be transmitted */
            if (wTmpBufferSize < (wTxLength + pDataParams->wTxBufLen + pDataParams->wTxBufStartPos))
 800df6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df6e:	4619      	mov	r1, r3
 800df70:	893b      	ldrh	r3, [r7, #8]
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	8a52      	ldrh	r2, [r2, #18]
 800df76:	4413      	add	r3, r2
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	8b92      	ldrh	r2, [r2, #28]
 800df7c:	4413      	add	r3, r2
 800df7e:	4299      	cmp	r1, r3
 800df80:	da09      	bge.n	800df96 <phhalHw_Pn5180_Exchange+0x22e>
            {
                /* Can't fit in the HAL buffer what we are trying to send */
                pDataParams->wTxBufLen = 0U;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	825a      	strh	r2, [r3, #18]
                pDataParams->wTxBufStartPos = 0U;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	839a      	strh	r2, [r3, #28]
                statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800df8e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800df92:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 800df94:	e0e5      	b.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            }

            /* copy data */
            (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], pTxBuffer, wTxLength);
 800df96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	8b92      	ldrh	r2, [r2, #28]
 800df9c:	4611      	mov	r1, r2
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	8a52      	ldrh	r2, [r2, #18]
 800dfa2:	440a      	add	r2, r1
 800dfa4:	4413      	add	r3, r2
 800dfa6:	893a      	ldrh	r2, [r7, #8]
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f011 f83b 	bl	801f026 <memcpy>
            pDataParams->wTxBufLen += wTxLength;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8a5a      	ldrh	r2, [r3, #18]
 800dfb4:	893b      	ldrh	r3, [r7, #8]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	825a      	strh	r2, [r3, #18]

            if(pDataParams->bJewelActivated == PH_ON)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d10f      	bne.n	800dfe8 <phhalHw_Pn5180_Exchange+0x280>
            {
                (void)memcpy(&pTmpBuffer[pDataParams->wTxBufStartPos + pDataParams->wTxBufLen], aCrc, 2U);
 800dfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	8b92      	ldrh	r2, [r2, #28]
 800dfce:	4611      	mov	r1, r2
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	8a52      	ldrh	r2, [r2, #18]
 800dfd4:	440a      	add	r2, r1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	8b3a      	ldrh	r2, [r7, #24]
 800dfda:	801a      	strh	r2, [r3, #0]
                pDataParams->wTxBufLen += 2U;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	8a5b      	ldrh	r3, [r3, #18]
 800dfe0:	3302      	adds	r3, #2
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	825a      	strh	r2, [r3, #18]
            }
        }

        wTxLength = 0U;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	813b      	strh	r3, [r7, #8]

        if (0U != (wOption & PH_EXCHANGE_BUFFERED_BIT ))
 800dfec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	da01      	bge.n	800dff8 <phhalHw_Pn5180_Exchange+0x290>
        {
            return PH_ERR_SUCCESS;
 800dff4:	2300      	movs	r3, #0
 800dff6:	e12c      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>
        }

        pDataParams->wTxBufLen += pDataParams->wTxBufStartPos;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	8a5a      	ldrh	r2, [r3, #18]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	8b9b      	ldrh	r3, [r3, #28]
 800e000:	4413      	add	r3, r2
 800e002:	b29a      	uxth	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	825a      	strh	r2, [r3, #18]

        /* Check for maximum bytes that can be sent to IC */
        if(pDataParams->wTxBufLen > 0x106U)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	8a5b      	ldrh	r3, [r3, #18]
 800e00c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800e010:	d903      	bls.n	800e01a <phhalHw_Pn5180_Exchange+0x2b2>
        {
            /*PN5180 TxBuffer is 262 bytes including 2 byte command header*/
            statusTmp = (PH_ERR_BUFFER_OVERFLOW | PH_COMP_HAL);
 800e012:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800e016:	86fb      	strh	r3, [r7, #54]	@ 0x36
            break;
 800e018:	e0a3      	b.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        /*Execute the Tranceive Command*/
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Int_LoadCommand(pDataParams, PHHAL_HW_PN5180_SYSTEM_TRANSEIVE_CMD));
 800e01a:	2103      	movs	r1, #3
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f005 fcc9 	bl	80139b4 <phhalHw_Pn5180_Int_LoadCommand>
 800e022:	4603      	mov	r3, r0
 800e024:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e026:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f040 809a 	bne.w	800e162 <phhalHw_Pn5180_Exchange+0x3fa>

        /*Set wait IRQ */
        if(pDataParams->bRxMultiple == PH_ON)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e034:	2b01      	cmp	r3, #1
 800e036:	d103      	bne.n	800e040 <phhalHw_Pn5180_Exchange+0x2d8>
        {
            dwIrqWaitFor =  IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800e038:	f44f 3304 	mov.w	r3, #135168	@ 0x21000
 800e03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e03e:	e001      	b.n	800e044 <phhalHw_Pn5180_Exchange+0x2dc>
        }
        else
        {
            dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_TIMER1_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK;
 800e040:	4b86      	ldr	r3, [pc, #536]	@ (800e25c <phhalHw_Pn5180_Exchange+0x4f4>)
 800e042:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        if (pDataParams->bActiveMode == PH_ON)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d103      	bne.n	800e056 <phhalHw_Pn5180_Exchange+0x2ee>
        {
            dwIrqWaitFor |= IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 800e04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e050:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 800e054:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Clear Interrupts  */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 800e056:	4a82      	ldr	r2, [pc, #520]	@ (800e260 <phhalHw_Pn5180_Exchange+0x4f8>)
 800e058:	2103      	movs	r1, #3
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f003 f8a4 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800e060:	4603      	mov	r3, r0
 800e062:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e066:	2b00      	cmp	r3, #0
 800e068:	d17b      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>

        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800e070:	2300      	movs	r3, #0
 800e072:	2201      	movs	r2, #1
 800e074:	2100      	movs	r1, #0
 800e076:	f00a ffe1 	bl	801903c <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 800e07a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e07c:	2101      	movs	r1, #1
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f003 f892 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800e084:	4603      	mov	r3, r0
 800e086:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e088:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d169      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>

        /* Configure T1 */
        if(pDataParams->bRxMultiple == PH_ON)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e094:	2b01      	cmp	r3, #1
 800e096:	d116      	bne.n	800e0c6 <phhalHw_Pn5180_Exchange+0x35e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800e098:	f640 0301 	movw	r3, #2049	@ 0x801
 800e09c:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d103      	bne.n	800e0b0 <phhalHw_Pn5180_Exchange+0x348>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800e0ae:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue));
 800e0b0:	6a3b      	ldr	r3, [r7, #32]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	210f      	movs	r1, #15
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f003 f876 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e0c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d14d      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }
        if ((pDataParams->bOpeMode != RD_LIB_MODE_EMVCO) && (pDataParams->bRxMultiple == PH_OFF))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d01a      	beq.n	800e106 <phhalHw_Pn5180_Exchange+0x39e>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d115      	bne.n	800e106 <phhalHw_Pn5180_Exchange+0x39e>
        {
            dwValue = (TIMER1_CONFIG_T1_START_ON_TX_ENDED_MASK | TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK | TIMER1_CONFIG_T1_ENABLE_MASK);
 800e0da:	4b62      	ldr	r3, [pc, #392]	@ (800e264 <phhalHw_Pn5180_Exchange+0x4fc>)
 800e0dc:	623b      	str	r3, [r7, #32]
            if(pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d103      	bne.n	800e0f0 <phhalHw_Pn5180_Exchange+0x388>
            {
                dwValue |=PHHAL_HW_PN5180_MS_TIMEOUT_PRESCALAR;
 800e0e8:	6a3b      	ldr	r3, [r7, #32]
 800e0ea:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800e0ee:	623b      	str	r3, [r7, #32]
            }
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TIMER1_CONFIG, dwValue ));
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	210f      	movs	r1, #15
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f003 f856 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e100:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e102:	2b00      	cmp	r3, #0
 800e104:	d12d      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        }

        *(pTmpBuffer+1U) = (uint8_t)pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS];
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800e10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10e:	3301      	adds	r3, #1
 800e110:	b2d2      	uxtb	r2, r2
 800e112:	701a      	strb	r2, [r3, #0]

        /* No Response expected*/
        bNumExpBytes = 0U;
 800e114:	2300      	movs	r3, #0
 800e116:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* During Active Communication mode if internal RF Field is not ON before transmit then Switch ON the RF Field. */
        if (pDataParams->bActiveMode)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d01f      	beq.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
        {
            PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwValue));
 800e122:	f107 0320 	add.w	r3, r7, #32
 800e126:	461a      	mov	r2, r3
 800e128:	211d      	movs	r1, #29
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f003 fa50 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 800e130:	4603      	mov	r3, r0
 800e132:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e134:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e136:	2b00      	cmp	r3, #0
 800e138:	d113      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            if ((0U == ((dwValue & RF_STATUS_TX_RF_STATUS_MASK))))
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10e      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
            {
                /* field is turned ON */
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f000 f8e7 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 800e14a:	4603      	mov	r3, r0
 800e14c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e14e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e150:	2b00      	cmp	r3, #0
 800e152:	d106      	bne.n	800e162 <phhalHw_Pn5180_Exchange+0x3fa>
                PH_CHECK_FAILURE_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f889 	bl	800e26c <phhalHw_Pn5180_FieldOn>
 800e15a:	4603      	mov	r3, r0
 800e15c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e15e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e160:	2b00      	cmp	r3, #0
            }
        }
    }while(FALSE);

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d120      	bne.n	800e1ae <phhalHw_Pn5180_Exchange+0x446>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 800e174:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e176:	2b00      	cmp	r3, #0
 800e178:	d110      	bne.n	800e19c <phhalHw_Pn5180_Exchange+0x434>
        {
            /* Wait infinitely for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 800e17a:	f107 0314 	add.w	r3, r7, #20
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	2322      	movs	r3, #34	@ 0x22
 800e182:	f04f 32ff 	mov.w	r2, #4294967295
 800e186:	2105      	movs	r1, #5
 800e188:	4837      	ldr	r0, [pc, #220]	@ (800e268 <phhalHw_Pn5180_Exchange+0x500>)
 800e18a:	f00a fed5 	bl	8018f38 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	f003 0320 	and.w	r3, r3, #32
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <phhalHw_Pn5180_Exchange+0x434>
            {
                statusTmp = PH_ERR_ABORTED;
 800e198:	2312      	movs	r3, #18
 800e19a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        /* Disable Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 800e19c:	f00a fdec 	bl	8018d78 <phDriver_TimerStop>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e1a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <phhalHw_Pn5180_Exchange+0x446>
 800e1aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e1ac:	e051      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 800e1ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <phhalHw_Pn5180_Exchange+0x450>
    {
        return statusTmp;
 800e1b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1b6:	e04c      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 800e1b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	8a5a      	ldrh	r2, [r3, #18]
 800e1be:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 800e1c0:	f107 031a 	add.w	r3, r7, #26
 800e1c4:	9301      	str	r3, [sp, #4]
 800e1c6:	f107 031c 	add.w	r3, r7, #28
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f002 f8d2 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e1d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <phhalHw_Pn5180_Exchange+0x47a>
 800e1de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1e0:	e037      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    /* Reset for the next transaction */
    pDataParams->wTxBufStartPos = 0U;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	839a      	strh	r2, [r3, #28]
    pDataParams->wTxBufLen = 0U;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	825a      	strh	r2, [r3, #18]

    /* Reset TxLastBits */
    if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXLASTBITS] != 0U)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00b      	beq.n	800e210 <phhalHw_Pn5180_Exchange+0x4a8>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 0x00U));
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	2103      	movs	r1, #3
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f000 f96b 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800e202:	4603      	mov	r3, r0
 800e204:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <phhalHw_Pn5180_Exchange+0x4a8>
 800e20c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e20e:	e020      	b.n	800e252 <phhalHw_Pn5180_Exchange+0x4ea>
    }

    status  = phhalHw_Pn5180_Receive_Int(pDataParams,dwIrqWaitFor,ppRxBuffer,pRxLength,PH_ON);
 800e210:	2301      	movs	r3, #1
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e218:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f005 f948 	bl	80134b0 <phhalHw_Pn5180_Receive_Int>
 800e220:	4603      	mov	r3, r0
 800e222:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    if( (status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 800e224:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d004      	beq.n	800e236 <phhalHw_Pn5180_Exchange+0x4ce>
    {
        /*load idle command*/
        statusTmp = phhalHw_Pn5180_Int_IdleCommand(pDataParams);
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f005 fb9f 	bl	8013970 <phhalHw_Pn5180_Int_IdleCommand>
 800e232:	4603      	mov	r3, r0
 800e234:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d007      	beq.n	800e250 <phhalHw_Pn5180_Exchange+0x4e8>
    {
        statusTmp = phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TIMER1_CONFIG, (uint32_t)(~TIMER1_CONFIG_T1_ENABLE_MASK));
 800e240:	f06f 0201 	mvn.w	r2, #1
 800e244:	210f      	movs	r1, #15
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f003 f89a 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800e24c:	4603      	mov	r3, r0
 800e24e:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    return status;
 800e250:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 800e252:	4618      	mov	r0, r3
 800e254:	3738      	adds	r7, #56	@ 0x38
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	00021001 	.word	0x00021001
 800e260:	000fffff 	.word	0x000fffff
 800e264:	00100801 	.word	0x00100801
 800e268:	20001870 	.word	0x20001870

0800e26c <phhalHw_Pn5180_FieldOn>:

phStatus_t phhalHw_Pn5180_FieldOn(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
    uint32_t   PH_MEMLOC_REM dwRegister;		// 临时变量：用于存储寄存器值
    phStatus_t PH_MEMLOC_REM statusTmp;			// 临时变量：用于存储函数调用返回的状态值
    uint8_t    PH_MEMLOC_REM  bRFONconfig = 0U;	// 用于配置 RF_ON 参数，bit0=RFCA，bit1=ActiveMode
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]

    // 检查是否关闭了 RF 碰撞避免（RFCA），如关闭则设置 bit0 = 1
    if(pDataParams->bRfca == PH_OFF)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	78db      	ldrb	r3, [r3, #3]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d103      	bne.n	800e288 <phhalHw_Pn5180_FieldOn+0x1c>
    {
        bRFONconfig |= 0x01U;
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	f043 0301 	orr.w	r3, r3, #1
 800e286:	73fb      	strb	r3, [r7, #15]
    }
    // 检查是否启用了主动模式，如启用则设置 bit1 = 1
    if(pDataParams->bActiveMode == PH_ON)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d103      	bne.n	800e29a <phhalHw_Pn5180_FieldOn+0x2e>
    {
        bRFONconfig |= 0x02U;
 800e292:	7bfb      	ldrb	r3, [r7, #15]
 800e294:	f043 0302 	orr.w	r3, r3, #2
 800e298:	73fb      	strb	r3, [r7, #15]
    }
    // 构建清除中断标志寄存器的掩码
    dwRegister = (IRQ_SET_CLEAR_RF_ACTIVE_ERROR_IRQ_CLR_MASK    \
 800e29a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800e29e:	60bb      	str	r3, [r7, #8]
        | IRQ_SET_CLEAR_TX_RFOFF_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFON_DET_IRQ_CLR_MASK    \
        | IRQ_SET_CLEAR_RFOFF_DET_IRQ_CLR_MASK);

    // 写寄存器以清除上述中断标志
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_SET_CLEAR, dwRegister));
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	2103      	movs	r1, #3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f002 fff4 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	81bb      	strh	r3, [r7, #12]
 800e2b0:	89bb      	ldrh	r3, [r7, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <phhalHw_Pn5180_FieldOn+0x4e>
 800e2b6:	89bb      	ldrh	r3, [r7, #12]
 800e2b8:	e02a      	b.n	800e310 <phhalHw_Pn5180_FieldOn+0xa4>

    // 发出 RF_ON 指令，使用配置字节（可能包含 RFCA 或 ActiveMode）
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOn(pDataParams, bRFONconfig));      /* Field ON using Collision Avoidance option */
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	4619      	mov	r1, r3
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f003 feca 	bl	8012058 <phhalHw_Pn5180_Instr_RfOn>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	81bb      	strh	r3, [r7, #12]
 800e2c8:	89bb      	ldrh	r3, [r7, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <phhalHw_Pn5180_FieldOn+0x66>
 800e2ce:	89bb      	ldrh	r3, [r7, #12]
 800e2d0:	e01e      	b.n	800e310 <phhalHw_Pn5180_FieldOn+0xa4>

    // 读取 RF 状态寄存器以验证 RF 是否真正开启
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 800e2d2:	f107 0308 	add.w	r3, r7, #8
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	211d      	movs	r1, #29
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f003 f978 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	81bb      	strh	r3, [r7, #12]
 800e2e4:	89bb      	ldrh	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <phhalHw_Pn5180_FieldOn+0x82>
 800e2ea:	89bb      	ldrh	r3, [r7, #12]
 800e2ec:	e010      	b.n	800e310 <phhalHw_Pn5180_FieldOn+0xa4>
    // 检查 TX_RF_STATUS 位（发送器是否开启 RF）
    if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == 0U)
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10a      	bne.n	800e30e <phhalHw_Pn5180_FieldOn+0xa2>
    {
    	// 如果 RF 没打开，检查是否是外部 RF 导致错误
        if(0U != (dwRegister & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK ))
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <phhalHw_Pn5180_FieldOn+0x9c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 800e302:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800e306:	e003      	b.n	800e310 <phhalHw_Pn5180_FieldOn+0xa4>
        }
        // 其他 RF 错误
        return PH_ADD_COMPCODE_FIXED(PH_ERR_RF_ERROR, PH_COMP_HAL);
 800e308:	f240 230a 	movw	r3, #522	@ 0x20a
 800e30c:	e000      	b.n	800e310 <phhalHw_Pn5180_FieldOn+0xa4>
    }
    // RF 成功开启
    return PH_ERR_SUCCESS;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <phhalHw_Pn5180_FieldOff>:

phStatus_t phhalHw_Pn5180_FieldOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 800e328:	2200      	movs	r2, #0
 800e32a:	215e      	movs	r1, #94	@ 0x5e
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f8d3 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 800e332:	4603      	mov	r3, r0
 800e334:	81fb      	strh	r3, [r7, #14]
 800e336:	89fb      	ldrh	r3, [r7, #14]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <phhalHw_Pn5180_FieldOff+0x28>
 800e33c:	89fb      	ldrh	r3, [r7, #14]
 800e33e:	e00a      	b.n	800e356 <phhalHw_Pn5180_FieldOff+0x3e>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f003 fec8 	bl	80120d6 <phhalHw_Pn5180_Instr_RfOff>
 800e346:	4603      	mov	r3, r0
 800e348:	81fb      	strh	r3, [r7, #14]
 800e34a:	89fb      	ldrh	r3, [r7, #14]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <phhalHw_Pn5180_FieldOff+0x3c>
 800e350:	89fb      	ldrh	r3, [r7, #14]
 800e352:	e000      	b.n	800e356 <phhalHw_Pn5180_FieldOff+0x3e>
    return PH_ERR_SUCCESS;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <phhalHw_Pn5180_Wait>:
phStatus_t phhalHw_Pn5180_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bUnit,
    uint16_t wTimeout		// 等待超时时间
    )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	460b      	mov	r3, r1
 800e36a:	70fb      	strb	r3, [r7, #3]
 800e36c:	4613      	mov	r3, r2
 800e36e:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwLoadValue;	// 定时器加载值
    uint32_t    PH_MEMLOC_REM wPrescaler;	// 预分频值
    uint32_t    PH_MEMLOC_REM wFreq;		// 频率值

    /* Parameter check: only ms or us is accepted */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 800e370:	78fb      	ldrb	r3, [r7, #3]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d005      	beq.n	800e382 <phhalHw_Pn5180_Wait+0x22>
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d002      	beq.n	800e382 <phhalHw_Pn5180_Wait+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e37c:	f240 2321 	movw	r3, #545	@ 0x221
 800e380:	e062      	b.n	800e448 <phhalHw_Pn5180_Wait+0xe8>
    }

    /* When time-out value is zero, there is no wait needed */
    if (wTimeout == 0U)
 800e382:	883b      	ldrh	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <phhalHw_Pn5180_Wait+0x2c>
    {
        return PH_ERR_SUCCESS;
 800e388:	2300      	movs	r3, #0
 800e38a:	e05d      	b.n	800e448 <phhalHw_Pn5180_Wait+0xe8>
    }

    /* Setting the Prescaler frequency according to wTimeout */
    if (bUnit == PHHAL_HW_TIME_MILLISECONDS)
 800e38c:	78fb      	ldrb	r3, [r7, #3]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d13a      	bne.n	800e408 <phhalHw_Pn5180_Wait+0xa8>
    {
        wFreq = PHHAL_HW_PN5180_MIN_FREQ;			// 最小频率：53000U
 800e392:	f64c 7308 	movw	r3, #53000	@ 0xcf08
 800e396:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x3CU;							// 设置预分频器为60
 800e398:	233c      	movs	r3, #60	@ 0x3c
 800e39a:	613b      	str	r3, [r7, #16]

        /* 处理长时间等待 - 如果超过最大延时，分段执行 */
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800e39c:	e01a      	b.n	800e3d4 <phhalHw_Pn5180_Wait+0x74>
        {
            wTimeout -= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS;
 800e39e:	883b      	ldrh	r3, [r7, #0]
 800e3a0:	f5a3 439a 	sub.w	r3, r3, #19712	@ 0x4d00
 800e3a4:	3b48      	subs	r3, #72	@ 0x48
 800e3a6:	803b      	strh	r3, [r7, #0]
            /* Calculating the load value */
            dwLoadValue =(uint32_t) (  PHHAL_HW_PN5180_MAX_TIME_DELAY_MS * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	4a29      	ldr	r2, [pc, #164]	@ (800e450 <phhalHw_Pn5180_Wait+0xf0>)
 800e3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b0:	099b      	lsrs	r3, r3, #6
 800e3b2:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800e3b6:	fb02 f303 	mul.w	r3, r2, r3
 800e3ba:	60fb      	str	r3, [r7, #12]
            /* 执行内部等待函数 */
            PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800e3bc:	693a      	ldr	r2, [r7, #16]
 800e3be:	68f9      	ldr	r1, [r7, #12]
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f004 fea9 	bl	8013118 <phhalHw_Pn5180_Int_Wait>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	817b      	strh	r3, [r7, #10]
 800e3ca:	897b      	ldrh	r3, [r7, #10]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <phhalHw_Pn5180_Wait+0x74>
 800e3d0:	897b      	ldrh	r3, [r7, #10]
 800e3d2:	e039      	b.n	800e448 <phhalHw_Pn5180_Wait+0xe8>
        while(wTimeout > PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)  // 19784U
 800e3d4:	883b      	ldrh	r3, [r7, #0]
 800e3d6:	f644 5248 	movw	r2, #19784	@ 0x4d48
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d8df      	bhi.n	800e39e <phhalHw_Pn5180_Wait+0x3e>
        }

        dwLoadValue =(uint32_t) (  wTimeout * ( wFreq  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 800e3de:	883b      	ldrh	r3, [r7, #0]
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	491b      	ldr	r1, [pc, #108]	@ (800e450 <phhalHw_Pn5180_Wait+0xf0>)
 800e3e4:	fba1 1202 	umull	r1, r2, r1, r2
 800e3e8:	0992      	lsrs	r2, r2, #6
 800e3ea:	fb02 f303 	mul.w	r3, r2, r3
 800e3ee:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	68f9      	ldr	r1, [r7, #12]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f004 fe8f 	bl	8013118 <phhalHw_Pn5180_Int_Wait>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	817b      	strh	r3, [r7, #10]
 800e3fe:	897b      	ldrh	r3, [r7, #10]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d020      	beq.n	800e446 <phhalHw_Pn5180_Wait+0xe6>
 800e404:	897b      	ldrh	r3, [r7, #10]
 800e406:	e01f      	b.n	800e448 <phhalHw_Pn5180_Wait+0xe8>
    }
    else
    {
        /* here wTimeout will be in uS and not be Zero */
        wFreq = PHHAL_HW_PN5180_MAX_FREQ;
 800e408:	4b12      	ldr	r3, [pc, #72]	@ (800e454 <phhalHw_Pn5180_Wait+0xf4>)
 800e40a:	617b      	str	r3, [r7, #20]
        wPrescaler = 0x00U;
 800e40c:	2300      	movs	r3, #0
 800e40e:	613b      	str	r3, [r7, #16]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( wFreq / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	4a11      	ldr	r2, [pc, #68]	@ (800e458 <phhalHw_Pn5180_Wait+0xf8>)
 800e414:	fba2 2303 	umull	r2, r3, r2, r3
 800e418:	0b5b      	lsrs	r3, r3, #13
 800e41a:	60fb      	str	r3, [r7, #12]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) ((wTimeout * dwLoadValue)/100);
 800e41c:	883b      	ldrh	r3, [r7, #0]
 800e41e:	68fa      	ldr	r2, [r7, #12]
 800e420:	fb02 f303 	mul.w	r3, r2, r3
 800e424:	4a0d      	ldr	r2, [pc, #52]	@ (800e45c <phhalHw_Pn5180_Wait+0xfc>)
 800e426:	fba2 2303 	umull	r2, r3, r2, r3
 800e42a:	095b      	lsrs	r3, r3, #5
 800e42c:	60fb      	str	r3, [r7, #12]
        PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_Int_Wait( pDataParams, dwLoadValue,  wPrescaler));
 800e42e:	693a      	ldr	r2, [r7, #16]
 800e430:	68f9      	ldr	r1, [r7, #12]
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f004 fe70 	bl	8013118 <phhalHw_Pn5180_Int_Wait>
 800e438:	4603      	mov	r3, r0
 800e43a:	817b      	strh	r3, [r7, #10]
 800e43c:	897b      	ldrh	r3, [r7, #10]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <phhalHw_Pn5180_Wait+0xe6>
 800e442:	897b      	ldrh	r3, [r7, #10]
 800e444:	e000      	b.n	800e448 <phhalHw_Pn5180_Wait+0xe8>
    }

    return PH_ERR_SUCCESS;
 800e446:	2300      	movs	r3, #0
#endif
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3718      	adds	r7, #24
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	10624dd3 	.word	0x10624dd3
 800e454:	00cee8c0 	.word	0x00cee8c0
 800e458:	d1b71759 	.word	0xd1b71759
 800e45c:	51eb851f 	.word	0x51eb851f

0800e460 <phhalHw_Pn5180_FieldReset>:

phStatus_t phhalHw_Pn5180_FieldReset(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    /* Switch off the field */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOff(pDataParams));
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff ff55 	bl	800e318 <phhalHw_Pn5180_FieldOff>
 800e46e:	4603      	mov	r3, r0
 800e470:	81fb      	strh	r3, [r7, #14]
 800e472:	89fb      	ldrh	r3, [r7, #14]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <phhalHw_Pn5180_FieldReset+0x1c>
 800e478:	89fb      	ldrh	r3, [r7, #14]
 800e47a:	e026      	b.n	800e4ca <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-off time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e480:	461a      	mov	r2, r3
 800e482:	2101      	movs	r1, #1
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f7ff ff6b 	bl	800e360 <phhalHw_Pn5180_Wait>
 800e48a:	4603      	mov	r3, r0
 800e48c:	81fb      	strh	r3, [r7, #14]
 800e48e:	89fb      	ldrh	r3, [r7, #14]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <phhalHw_Pn5180_FieldReset+0x38>
 800e494:	89fb      	ldrh	r3, [r7, #14]
 800e496:	e018      	b.n	800e4ca <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldOffTime)));

    /* switch on the field again */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldOn(pDataParams));
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7ff fee7 	bl	800e26c <phhalHw_Pn5180_FieldOn>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	81fb      	strh	r3, [r7, #14]
 800e4a2:	89fb      	ldrh	r3, [r7, #14]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d001      	beq.n	800e4ac <phhalHw_Pn5180_FieldReset+0x4c>
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	e00e      	b.n	800e4ca <phhalHw_Pn5180_FieldReset+0x6a>

    /* wait for field-recovery time-out */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Wait(
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7ff ff53 	bl	800e360 <phhalHw_Pn5180_Wait>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	81fb      	strh	r3, [r7, #14]
 800e4be:	89fb      	ldrh	r3, [r7, #14]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <phhalHw_Pn5180_FieldReset+0x68>
 800e4c4:	89fb      	ldrh	r3, [r7, #14]
 800e4c6:	e000      	b.n	800e4ca <phhalHw_Pn5180_FieldReset+0x6a>
        pDataParams,
        PHHAL_HW_TIME_MILLISECONDS,
        (pDataParams->wFieldRecoveryTime)));

    return PH_ERR_SUCCESS;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	0000      	movs	r0, r0
 800e4d4:	0000      	movs	r0, r0
	...

0800e4d8 <phhalHw_Pn5180_SetConfig>:
phStatus_t phhalHw_Pn5180_SetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 800e4d8:	b5b0      	push	{r4, r5, r7, lr}
 800e4da:	b090      	sub	sp, #64	@ 0x40
 800e4dc:	af02      	add	r7, sp, #8
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	807b      	strh	r3, [r7, #2]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint16_t    PH_MEMLOC_REM wBufferLen = 0U;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	833b      	strh	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFraming;

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;
    float32_t   PH_MEMLOC_REM fTime=0.0;
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wTmpValue = 0xFFU;
 800e4f6:	23ff      	movs	r3, #255	@ 0xff
 800e4f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    switch(wConfig)
 800e4fa:	887b      	ldrh	r3, [r7, #2]
 800e4fc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800e500:	3b25      	subs	r3, #37	@ 0x25
 800e502:	2b07      	cmp	r3, #7
 800e504:	d809      	bhi.n	800e51a <phhalHw_Pn5180_SetConfig+0x42>
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Check if Firmware version is below 4.1, and return with PH_ERR_INVALID_PARAMETER. */
        if (pDataParams->wFirmwareVer < 0x401U)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800e50c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e510:	d805      	bhi.n	800e51e <phhalHw_Pn5180_SetConfig+0x46>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800e512:	f240 2325 	movw	r3, #549	@ 0x225
 800e516:	f001 bc22 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    default:
        break;
 800e51a:	bf00      	nop
 800e51c:	e000      	b.n	800e520 <phhalHw_Pn5180_SetConfig+0x48>
        break;
 800e51e:	bf00      	nop
    }

    switch(wConfig)
 800e520:	887b      	ldrh	r3, [r7, #2]
 800e522:	2b5e      	cmp	r3, #94	@ 0x5e
 800e524:	f300 8154 	bgt.w	800e7d0 <phhalHw_Pn5180_SetConfig+0x2f8>
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f280 808d 	bge.w	800e648 <phhalHw_Pn5180_SetConfig+0x170>
 800e52e:	f001 bbd3 	b.w	800fcd8 <phhalHw_Pn5180_SetConfig+0x1800>
 800e532:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800e536:	3b10      	subs	r3, #16
 800e538:	2b40      	cmp	r3, #64	@ 0x40
 800e53a:	f201 83cd 	bhi.w	800fcd8 <phhalHw_Pn5180_SetConfig+0x1800>
 800e53e:	a201      	add	r2, pc, #4	@ (adr r2, 800e544 <phhalHw_Pn5180_SetConfig+0x6c>)
 800e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e544:	0800f3c9 	.word	0x0800f3c9
 800e548:	0800fcd9 	.word	0x0800fcd9
 800e54c:	0800fcd9 	.word	0x0800fcd9
 800e550:	0800fcd9 	.word	0x0800fcd9
 800e554:	0800fcd9 	.word	0x0800fcd9
 800e558:	0800fcd9 	.word	0x0800fcd9
 800e55c:	0800fcd9 	.word	0x0800fcd9
 800e560:	0800fcd9 	.word	0x0800fcd9
 800e564:	0800fcd9 	.word	0x0800fcd9
 800e568:	0800fcd9 	.word	0x0800fcd9
 800e56c:	0800fcd9 	.word	0x0800fcd9
 800e570:	0800fcd9 	.word	0x0800fcd9
 800e574:	0800fcd9 	.word	0x0800fcd9
 800e578:	0800fcd9 	.word	0x0800fcd9
 800e57c:	0800fcd9 	.word	0x0800fcd9
 800e580:	0800fcd9 	.word	0x0800fcd9
 800e584:	0800fcd9 	.word	0x0800fcd9
 800e588:	0800fcd9 	.word	0x0800fcd9
 800e58c:	0800fcd9 	.word	0x0800fcd9
 800e590:	0800fcd9 	.word	0x0800fcd9
 800e594:	0800fcd9 	.word	0x0800fcd9
 800e598:	0800fbe9 	.word	0x0800fbe9
 800e59c:	0800fc1b 	.word	0x0800fc1b
 800e5a0:	0800fc37 	.word	0x0800fc37
 800e5a4:	0800fc51 	.word	0x0800fc51
 800e5a8:	0800fc6b 	.word	0x0800fc6b
 800e5ac:	0800fc85 	.word	0x0800fc85
 800e5b0:	0800fca1 	.word	0x0800fca1
 800e5b4:	0800fcbd 	.word	0x0800fcbd
 800e5b8:	0800fcd9 	.word	0x0800fcd9
 800e5bc:	0800fcd9 	.word	0x0800fcd9
 800e5c0:	0800fcd9 	.word	0x0800fcd9
 800e5c4:	0800fcd9 	.word	0x0800fcd9
 800e5c8:	0800fcd9 	.word	0x0800fcd9
 800e5cc:	0800fcd9 	.word	0x0800fcd9
 800e5d0:	0800fcd9 	.word	0x0800fcd9
 800e5d4:	0800fcd9 	.word	0x0800fcd9
 800e5d8:	0800fcd9 	.word	0x0800fcd9
 800e5dc:	0800fcd9 	.word	0x0800fcd9
 800e5e0:	0800fcd9 	.word	0x0800fcd9
 800e5e4:	0800fcd9 	.word	0x0800fcd9
 800e5e8:	0800fcd9 	.word	0x0800fcd9
 800e5ec:	0800fcd9 	.word	0x0800fcd9
 800e5f0:	0800fcd9 	.word	0x0800fcd9
 800e5f4:	0800fcd9 	.word	0x0800fcd9
 800e5f8:	0800fcd9 	.word	0x0800fcd9
 800e5fc:	0800fcd9 	.word	0x0800fcd9
 800e600:	0800fcd9 	.word	0x0800fcd9
 800e604:	0800fcd9 	.word	0x0800fcd9
 800e608:	0800fcd9 	.word	0x0800fcd9
 800e60c:	0800fcd9 	.word	0x0800fcd9
 800e610:	0800fcd9 	.word	0x0800fcd9
 800e614:	0800fcd9 	.word	0x0800fcd9
 800e618:	0800fcd9 	.word	0x0800fcd9
 800e61c:	0800fcd9 	.word	0x0800fcd9
 800e620:	0800fcd9 	.word	0x0800fcd9
 800e624:	0800fcd9 	.word	0x0800fcd9
 800e628:	0800fcd9 	.word	0x0800fcd9
 800e62c:	0800fcd9 	.word	0x0800fcd9
 800e630:	0800fcd9 	.word	0x0800fcd9
 800e634:	0800fcd9 	.word	0x0800fcd9
 800e638:	0800fcd9 	.word	0x0800fcd9
 800e63c:	0800fcd9 	.word	0x0800fcd9
 800e640:	0800fcd9 	.word	0x0800fcd9
 800e644:	0800f46b 	.word	0x0800f46b
 800e648:	2b5e      	cmp	r3, #94	@ 0x5e
 800e64a:	f201 8345 	bhi.w	800fcd8 <phhalHw_Pn5180_SetConfig+0x1800>
 800e64e:	a201      	add	r2, pc, #4	@ (adr r2, 800e654 <phhalHw_Pn5180_SetConfig+0x17c>)
 800e650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e654:	0800e7e9 	.word	0x0800e7e9
 800e658:	0800e861 	.word	0x0800e861
 800e65c:	0800e861 	.word	0x0800e861
 800e660:	0800e827 	.word	0x0800e827
 800e664:	0800fcd9 	.word	0x0800fcd9
 800e668:	0800e8a9 	.word	0x0800e8a9
 800e66c:	0800eb29 	.word	0x0800eb29
 800e670:	0800ec03 	.word	0x0800ec03
 800e674:	0800e9f1 	.word	0x0800e9f1
 800e678:	0800ef63 	.word	0x0800ef63
 800e67c:	0800f143 	.word	0x0800f143
 800e680:	0800ece3 	.word	0x0800ece3
 800e684:	0800e7e9 	.word	0x0800e7e9
 800e688:	0800f295 	.word	0x0800f295
 800e68c:	0800f2ef 	.word	0x0800f2ef
 800e690:	0800f349 	.word	0x0800f349
 800e694:	0800fcd9 	.word	0x0800fcd9
 800e698:	0800fcd9 	.word	0x0800fcd9
 800e69c:	0800fcd9 	.word	0x0800fcd9
 800e6a0:	0800f419 	.word	0x0800f419
 800e6a4:	0800f431 	.word	0x0800f431
 800e6a8:	0800f65b 	.word	0x0800f65b
 800e6ac:	0800f86d 	.word	0x0800f86d
 800e6b0:	0800f9a5 	.word	0x0800f9a5
 800e6b4:	0800ea51 	.word	0x0800ea51
 800e6b8:	0800fcd9 	.word	0x0800fcd9
 800e6bc:	0800fcd9 	.word	0x0800fcd9
 800e6c0:	0800fcd9 	.word	0x0800fcd9
 800e6c4:	0800fcd9 	.word	0x0800fcd9
 800e6c8:	0800fcd9 	.word	0x0800fcd9
 800e6cc:	0800fcd9 	.word	0x0800fcd9
 800e6d0:	0800fcd9 	.word	0x0800fcd9
 800e6d4:	0800f43b 	.word	0x0800f43b
 800e6d8:	0800fcd9 	.word	0x0800fcd9
 800e6dc:	0800fcd9 	.word	0x0800fcd9
 800e6e0:	0800fcd9 	.word	0x0800fcd9
 800e6e4:	0800fcd9 	.word	0x0800fcd9
 800e6e8:	0800fcd9 	.word	0x0800fcd9
 800e6ec:	0800fcd9 	.word	0x0800fcd9
 800e6f0:	0800fcd9 	.word	0x0800fcd9
 800e6f4:	0800fcd9 	.word	0x0800fcd9
 800e6f8:	0800fcd9 	.word	0x0800fcd9
 800e6fc:	0800fcd9 	.word	0x0800fcd9
 800e700:	0800fcd9 	.word	0x0800fcd9
 800e704:	0800fcd9 	.word	0x0800fcd9
 800e708:	0800fcd9 	.word	0x0800fcd9
 800e70c:	0800ee2b 	.word	0x0800ee2b
 800e710:	0800ee67 	.word	0x0800ee67
 800e714:	0800ee8d 	.word	0x0800ee8d
 800e718:	0800fcd9 	.word	0x0800fcd9
 800e71c:	0800fcd9 	.word	0x0800fcd9
 800e720:	0800eed1 	.word	0x0800eed1
 800e724:	0800ef15 	.word	0x0800ef15
 800e728:	0800fbaf 	.word	0x0800fbaf
 800e72c:	0800fcd9 	.word	0x0800fcd9
 800e730:	0800fcd9 	.word	0x0800fcd9
 800e734:	0800fcd9 	.word	0x0800fcd9
 800e738:	0800fcd9 	.word	0x0800fcd9
 800e73c:	0800fcd9 	.word	0x0800fcd9
 800e740:	0800fcd9 	.word	0x0800fcd9
 800e744:	0800fcd9 	.word	0x0800fcd9
 800e748:	0800fcd9 	.word	0x0800fcd9
 800e74c:	0800fcd9 	.word	0x0800fcd9
 800e750:	0800fcd9 	.word	0x0800fcd9
 800e754:	0800fcd9 	.word	0x0800fcd9
 800e758:	0800fcd9 	.word	0x0800fcd9
 800e75c:	0800fcd9 	.word	0x0800fcd9
 800e760:	0800fcd9 	.word	0x0800fcd9
 800e764:	0800fcd9 	.word	0x0800fcd9
 800e768:	0800fcd9 	.word	0x0800fcd9
 800e76c:	0800fcd9 	.word	0x0800fcd9
 800e770:	0800fcd9 	.word	0x0800fcd9
 800e774:	0800fcd9 	.word	0x0800fcd9
 800e778:	0800fcd9 	.word	0x0800fcd9
 800e77c:	0800fcd9 	.word	0x0800fcd9
 800e780:	0800fcd9 	.word	0x0800fcd9
 800e784:	0800fcd9 	.word	0x0800fcd9
 800e788:	0800fcd9 	.word	0x0800fcd9
 800e78c:	0800fcd9 	.word	0x0800fcd9
 800e790:	0800fcd9 	.word	0x0800fcd9
 800e794:	0800fcd9 	.word	0x0800fcd9
 800e798:	0800f50b 	.word	0x0800f50b
 800e79c:	0800fcd9 	.word	0x0800fcd9
 800e7a0:	0800f527 	.word	0x0800f527
 800e7a4:	0800fcd9 	.word	0x0800fcd9
 800e7a8:	0800fb4f 	.word	0x0800fb4f
 800e7ac:	0800f575 	.word	0x0800f575
 800e7b0:	0800f591 	.word	0x0800f591
 800e7b4:	0800fcd9 	.word	0x0800fcd9
 800e7b8:	0800fcd9 	.word	0x0800fcd9
 800e7bc:	0800f489 	.word	0x0800f489
 800e7c0:	0800fcd9 	.word	0x0800fcd9
 800e7c4:	0800f5ed 	.word	0x0800f5ed
 800e7c8:	0800f60b 	.word	0x0800f60b
 800e7cc:	0800f497 	.word	0x0800f497
 800e7d0:	f248 0250 	movw	r2, #32848	@ 0x8050
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	f301 827f 	bgt.w	800fcd8 <phhalHw_Pn5180_SetConfig+0x1800>
 800e7da:	f248 0210 	movw	r2, #32784	@ 0x8010
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	f6bf aea7 	bge.w	800e532 <phhalHw_Pn5180_SetConfig+0x5a>
 800e7e4:	f001 ba78 	b.w	800fcd8 <phhalHw_Pn5180_SetConfig+0x1800>
    {
    case PHHAL_HW_CONFIG_PARITY:
    case PHHAL_HW_CONFIG_ASK100:

        if( pDataParams->wCfgShadow[wConfig] != wValue)
 800e7e8:	887a      	ldrh	r2, [r7, #2]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	322c      	adds	r2, #44	@ 0x2c
 800e7ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e7f2:	883a      	ldrh	r2, [r7, #0]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	f001 8272 	beq.w	800fcde <phhalHw_Pn5180_SetConfig+0x1806>
        {
            /* Use internal set config */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800e7fa:	883a      	ldrh	r2, [r7, #0]
 800e7fc:	887b      	ldrh	r3, [r7, #2]
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f003 fea5 	bl	8012550 <phhalHw_Pn5180_SetConfig_Int>
 800e806:	4603      	mov	r3, r0
 800e808:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e80a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d002      	beq.n	800e816 <phhalHw_Pn5180_SetConfig+0x33e>
 800e810:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e812:	f001 baa4 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e816:	887a      	ldrh	r2, [r7, #2]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	322c      	adds	r2, #44	@ 0x2c
 800e81c:	8839      	ldrh	r1, [r7, #0]
 800e81e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800e822:	f001 ba5c 	b.w	800fcde <phhalHw_Pn5180_SetConfig+0x1806>

    case PHHAL_HW_CONFIG_TXLASTBITS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e826:	887a      	ldrh	r2, [r7, #2]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	322c      	adds	r2, #44	@ 0x2c
 800e82c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e830:	883a      	ldrh	r2, [r7, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d105      	bne.n	800e842 <phhalHw_Pn5180_SetConfig+0x36a>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	f001 8250 	beq.w	800fce2 <phhalHw_Pn5180_SetConfig+0x180a>
        {
            /* Check parameter */
            if (wValue > MASK_TX_LASTBITS)
 800e842:	883b      	ldrh	r3, [r7, #0]
 800e844:	2b07      	cmp	r3, #7
 800e846:	d903      	bls.n	800e850 <phhalHw_Pn5180_SetConfig+0x378>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e848:	f240 2321 	movw	r3, #545	@ 0x221
 800e84c:	f001 ba87 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e850:	887a      	ldrh	r2, [r7, #2]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	322c      	adds	r2, #44	@ 0x2c
 800e856:	8839      	ldrh	r1, [r7, #0]
 800e858:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800e85c:	f001 ba41 	b.w	800fce2 <phhalHw_Pn5180_SetConfig+0x180a>

    case PHHAL_HW_CONFIG_TXCRC:
    case PHHAL_HW_CONFIG_RXCRC:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e860:	887a      	ldrh	r2, [r7, #2]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	322c      	adds	r2, #44	@ 0x2c
 800e866:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e86a:	883a      	ldrh	r2, [r7, #0]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d105      	bne.n	800e87c <phhalHw_Pn5180_SetConfig+0x3a4>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e876:	2b01      	cmp	r3, #1
 800e878:	f001 8235 	beq.w	800fce6 <phhalHw_Pn5180_SetConfig+0x180e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig_Int(pDataParams, wConfig, wValue));
 800e87c:	883a      	ldrh	r2, [r7, #0]
 800e87e:	887b      	ldrh	r3, [r7, #2]
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f003 fe64 	bl	8012550 <phhalHw_Pn5180_SetConfig_Int>
 800e888:	4603      	mov	r3, r0
 800e88a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e88c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d002      	beq.n	800e898 <phhalHw_Pn5180_SetConfig+0x3c0>
 800e892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e894:	f001 ba63 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e898:	887a      	ldrh	r2, [r7, #2]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	322c      	adds	r2, #44	@ 0x2c
 800e89e:	8839      	ldrh	r1, [r7, #0]
 800e8a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }

        break;
 800e8a4:	f001 ba1f 	b.w	800fce6 <phhalHw_Pn5180_SetConfig+0x180e>

    case PHHAL_HW_CONFIG_RXALIGN:
        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800e8a8:	887a      	ldrh	r2, [r7, #2]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	322c      	adds	r2, #44	@ 0x2c
 800e8ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e8b2:	883a      	ldrh	r2, [r7, #0]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d105      	bne.n	800e8c4 <phhalHw_Pn5180_SetConfig+0x3ec>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	f001 8213 	beq.w	800fcea <phhalHw_Pn5180_SetConfig+0x1812>
        {
            /* Check the parameter */
            if (wValue >  MASK_RX_LASTBITS)
 800e8c4:	883b      	ldrh	r3, [r7, #0]
 800e8c6:	2b07      	cmp	r3, #7
 800e8c8:	d903      	bls.n	800e8d2 <phhalHw_Pn5180_SetConfig+0x3fa>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800e8ca:	f240 2321 	movw	r3, #545	@ 0x221
 800e8ce:	f001 ba46 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of CRC_RX_CONFIG_RX_BIT_ALIGN_MASK*/
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_BIT_ALIGN_MASK );
 800e8d6:	f46f 73e0 	mvn.w	r3, #448	@ 0x1c0
 800e8da:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800e8dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e8e2:	3338      	adds	r3, #56	@ 0x38
 800e8e4:	443b      	add	r3, r7
 800e8e6:	2212      	movs	r2, #18
 800e8e8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800e8ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e8f2:	3338      	adds	r3, #56	@ 0x38
 800e8f4:	443b      	add	r3, r7
 800e8f6:	2203      	movs	r2, #3
 800e8f8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e900:	1c59      	adds	r1, r3, #1
 800e902:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e904:	b2d2      	uxtb	r2, r2
 800e906:	3338      	adds	r3, #56	@ 0x38
 800e908:	443b      	add	r3, r7
 800e90a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	0a1a      	lsrs	r2, r3, #8
 800e912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e914:	1c59      	adds	r1, r3, #1
 800e916:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e918:	b2d2      	uxtb	r2, r2
 800e91a:	3338      	adds	r3, #56	@ 0x38
 800e91c:	443b      	add	r3, r7
 800e91e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	0c1a      	lsrs	r2, r3, #16
 800e926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e928:	1c59      	adds	r1, r3, #1
 800e92a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e92c:	b2d2      	uxtb	r2, r2
 800e92e:	3338      	adds	r3, #56	@ 0x38
 800e930:	443b      	add	r3, r7
 800e932:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	0e1a      	lsrs	r2, r3, #24
 800e93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e93c:	1c59      	adds	r1, r3, #1
 800e93e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e940:	b2d2      	uxtb	r2, r2
 800e942:	3338      	adds	r3, #56	@ 0x38
 800e944:	443b      	add	r3, r7
 800e946:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  of RX_BIT_ALIGN*/
            dwTemp = (uint32_t)((wValue << CRC_RX_CONFIG_RX_BIT_ALIGN_POS) & CRC_RX_CONFIG_RX_BIT_ALIGN_MASK);
 800e94a:	883b      	ldrh	r3, [r7, #0]
 800e94c:	019b      	lsls	r3, r3, #6
 800e94e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800e952:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 800e954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e956:	1c5a      	adds	r2, r3, #1
 800e958:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e95a:	3338      	adds	r3, #56	@ 0x38
 800e95c:	443b      	add	r3, r7
 800e95e:	2212      	movs	r2, #18
 800e960:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800e964:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800e96a:	3338      	adds	r3, #56	@ 0x38
 800e96c:	443b      	add	r3, r7
 800e96e:	2202      	movs	r2, #2
 800e970:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e978:	1c59      	adds	r1, r3, #1
 800e97a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e97c:	b2d2      	uxtb	r2, r2
 800e97e:	3338      	adds	r3, #56	@ 0x38
 800e980:	443b      	add	r3, r7
 800e982:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	0a1a      	lsrs	r2, r3, #8
 800e98a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e98c:	1c59      	adds	r1, r3, #1
 800e98e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e990:	b2d2      	uxtb	r2, r2
 800e992:	3338      	adds	r3, #56	@ 0x38
 800e994:	443b      	add	r3, r7
 800e996:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	0c1a      	lsrs	r2, r3, #16
 800e99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9a0:	1c59      	adds	r1, r3, #1
 800e9a2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e9a4:	b2d2      	uxtb	r2, r2
 800e9a6:	3338      	adds	r3, #56	@ 0x38
 800e9a8:	443b      	add	r3, r7
 800e9aa:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	0e1a      	lsrs	r2, r3, #24
 800e9b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b4:	1c59      	adds	r1, r3, #1
 800e9b6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800e9b8:	b2d2      	uxtb	r2, r2
 800e9ba:	3338      	adds	r3, #56	@ 0x38
 800e9bc:	443b      	add	r3, r7
 800e9be:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800e9c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e9c4:	f107 030c 	add.w	r3, r7, #12
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f002 fd4e 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e9d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <phhalHw_Pn5180_SetConfig+0x508>
 800e9da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e9dc:	f001 b9bf 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800e9e0:	887a      	ldrh	r2, [r7, #2]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	322c      	adds	r2, #44	@ 0x2c
 800e9e6:	8839      	ldrh	r1, [r7, #0]
 800e9e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800e9ec:	f001 b97d 	b.w	800fcea <phhalHw_Pn5180_SetConfig+0x1812>

    case PHHAL_HW_CONFIG_CLEARBITSAFTERCOLL:

        if (pDataParams->wCfgShadow[wConfig] != wValue)
 800e9f0:	887a      	ldrh	r2, [r7, #2]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	322c      	adds	r2, #44	@ 0x2c
 800e9f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e9fa:	883a      	ldrh	r2, [r7, #0]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	f001 8176 	beq.w	800fcee <phhalHw_Pn5180_SetConfig+0x1816>
        {
            /* Disbale */
            if (wValue == PH_OFF)
 800ea02:	883b      	ldrh	r3, [r7, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10d      	bne.n	800ea24 <phhalHw_Pn5180_SetConfig+0x54c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK));
 800ea08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea0c:	2112      	movs	r1, #18
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f002 fc40 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800ea14:	4603      	mov	r3, r0
 800ea16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d010      	beq.n	800ea40 <phhalHw_Pn5180_SetConfig+0x568>
 800ea1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea20:	f001 b99d 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, (0xFFFFFFFFU^CRC_RX_CONFIG_VALUES_AFTER_COLLISION_MASK)));
 800ea24:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800ea28:	2112      	movs	r1, #18
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f002 fca8 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800ea30:	4603      	mov	r3, r0
 800ea32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ea34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <phhalHw_Pn5180_SetConfig+0x568>
 800ea3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea3c:	f001 b98f 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ea40:	887a      	ldrh	r2, [r7, #2]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	322c      	adds	r2, #44	@ 0x2c
 800ea46:	8839      	ldrh	r1, [r7, #0]
 800ea48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800ea4c:	f001 b94f 	b.w	800fcee <phhalHw_Pn5180_SetConfig+0x1816>

    case PHHAL_HW_CONFIG_TXWAIT_MS:
        /* Parameter checking */
        if (wValue > 650U) /* To set Max value for wValue in uS i.e, 0xFFFFU )*/
 800ea50:	883b      	ldrh	r3, [r7, #0]
 800ea52:	f240 228a 	movw	r2, #650	@ 0x28a
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d903      	bls.n	800ea62 <phhalHw_Pn5180_SetConfig+0x58a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800ea5a:	f240 2321 	movw	r3, #545	@ 0x221
 800ea5e:	f001 b97e 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* Store the value in terms of uS in shadow table*/
        pDataParams->dwTxWaitMs =  wValue;
 800ea62:	883a      	ldrh	r2, [r7, #0]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set TxWait */
        fTime = 0.0;
 800ea68:	f04f 0300 	mov.w	r3, #0
 800ea6c:	62bb      	str	r3, [r7, #40]	@ 0x28
        dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800ea6e:	237f      	movs	r3, #127	@ 0x7f
 800ea70:	633b      	str	r3, [r7, #48]	@ 0x30
        dwTemp = wValue*1000U;
 800ea72:	883b      	ldrh	r3, [r7, #0]
 800ea74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ea78:	fb02 f303 	mul.w	r3, r2, r3
 800ea7c:	60bb      	str	r3, [r7, #8]
        if(0U != dwTemp)
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d043      	beq.n	800eb0c <phhalHw_Pn5180_SetConfig+0x634>
        {
            fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	ee07 3a90 	vmov	s15, r3
 800ea8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea8e:	ee17 0a90 	vmov	r0, s15
 800ea92:	f7f1 fd59 	bl	8000548 <__aeabi_f2d>
 800ea96:	f60f 3310 	addw	r3, pc, #2832	@ 0xb10
 800ea9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9e:	f7f1 fdab 	bl	80005f8 <__aeabi_dmul>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	4614      	mov	r4, r2
 800eaa8:	461d      	mov	r5, r3
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaac:	ee07 3a90 	vmov	s15, r3
 800eab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eab4:	ee17 0a90 	vmov	r0, s15
 800eab8:	f7f1 fd46 	bl	8000548 <__aeabi_f2d>
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	4620      	mov	r0, r4
 800eac2:	4629      	mov	r1, r5
 800eac4:	f7f1 fec2 	bl	800084c <__aeabi_ddiv>
 800eac8:	4602      	mov	r2, r0
 800eaca:	460b      	mov	r3, r1
 800eacc:	4610      	mov	r0, r2
 800eace:	4619      	mov	r1, r3
 800ead0:	f7f2 f86a 	bl	8000ba8 <__aeabi_d2f>
 800ead4:	4603      	mov	r3, r0
 800ead6:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwTemp = (uint32_t)fTime;
 800ead8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800eadc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eae0:	ee17 3a90 	vmov	r3, s15
 800eae4:	60bb      	str	r3, [r7, #8]
            dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	021b      	lsls	r3, r3, #8
 800eaea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaec:	4313      	orrs	r3, r2
 800eaee:	633b      	str	r3, [r7, #48]	@ 0x30
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800eaf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaf2:	2117      	movs	r1, #23
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7fe ff4d 	bl	800d994 <phhalHw_Pn5180_WriteRegister>
 800eafa:	4603      	mov	r3, r0
 800eafc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eafe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f001 80f6 	beq.w	800fcf2 <phhalHw_Pn5180_SetConfig+0x181a>
 800eb06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb08:	f001 b929 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800eb0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb0e:	2117      	movs	r1, #23
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7fe ff3f 	bl	800d994 <phhalHw_Pn5180_WriteRegister>
 800eb16:	4603      	mov	r3, r0
 800eb18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eb1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f001 80e8 	beq.w	800fcf2 <phhalHw_Pn5180_SetConfig+0x181a>
 800eb22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb24:	f001 b91b 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800eb28:	887a      	ldrh	r2, [r7, #2]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	322c      	adds	r2, #44	@ 0x2c
 800eb2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800eb32:	883a      	ldrh	r2, [r7, #0]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d105      	bne.n	800eb44 <phhalHw_Pn5180_SetConfig+0x66c>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	f001 80d9 	beq.w	800fcf6 <phhalHw_Pn5180_SetConfig+0x181e>
        {
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800eb44:	887a      	ldrh	r2, [r7, #2]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	322c      	adds	r2, #44	@ 0x2c
 800eb4a:	8839      	ldrh	r1, [r7, #0]
 800eb4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set Rx Wait(deaf) bits */
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800eb50:	237f      	movs	r3, #127	@ 0x7f
 800eb52:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800eb54:	883b      	ldrh	r3, [r7, #0]
 800eb56:	60bb      	str	r3, [r7, #8]
            if(0U != dwTemp)
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d043      	beq.n	800ebe6 <phhalHw_Pn5180_SetConfig+0x70e>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	ee07 3a90 	vmov	s15, r3
 800eb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb68:	ee17 0a90 	vmov	r0, s15
 800eb6c:	f7f1 fcec 	bl	8000548 <__aeabi_f2d>
 800eb70:	f60f 2334 	addw	r3, pc, #2612	@ 0xa34
 800eb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb78:	f7f1 fd3e 	bl	80005f8 <__aeabi_dmul>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	460b      	mov	r3, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	461d      	mov	r5, r3
 800eb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb86:	ee07 3a90 	vmov	s15, r3
 800eb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb8e:	ee17 0a90 	vmov	r0, s15
 800eb92:	f7f1 fcd9 	bl	8000548 <__aeabi_f2d>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	f7f1 fe55 	bl	800084c <__aeabi_ddiv>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	4610      	mov	r0, r2
 800eba8:	4619      	mov	r1, r3
 800ebaa:	f7f1 fffd 	bl	8000ba8 <__aeabi_d2f>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800ebb2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ebb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebba:	ee17 3a90 	vmov	r3, s15
 800ebbe:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)dwTemp << RX_WAIT_CONFIG_RX_WAIT_VALUE_POS;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	021b      	lsls	r3, r3, #8
 800ebc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800ebca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebcc:	2111      	movs	r1, #17
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f002 faea 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ebd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f001 808b 	beq.w	800fcf6 <phhalHw_Pn5180_SetConfig+0x181e>
 800ebe0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebe2:	f001 b8bc 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, RX_WAIT_CONFIG, dwValue ));
 800ebe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebe8:	2111      	movs	r1, #17
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f002 fadc 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ebf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f001 807d 	beq.w	800fcf6 <phhalHw_Pn5180_SetConfig+0x181e>
 800ebfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebfe:	f001 b8ae 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_TXWAIT_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800ec02:	887a      	ldrh	r2, [r7, #2]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	322c      	adds	r2, #44	@ 0x2c
 800ec08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ec0c:	883a      	ldrh	r2, [r7, #0]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d105      	bne.n	800ec1e <phhalHw_Pn5180_SetConfig+0x746>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	f001 806e 	beq.w	800fcfa <phhalHw_Pn5180_SetConfig+0x1822>
        {
            /* Write configuration data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ec1e:	887a      	ldrh	r2, [r7, #2]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	322c      	adds	r2, #44	@ 0x2c
 800ec24:	8839      	ldrh	r1, [r7, #0]
 800ec26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            /* Set TxWait */
            fTime = 0.0;
 800ec2a:	f04f 0300 	mov.w	r3, #0
 800ec2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            dwValue = PHHAL_HW_PN5180_TR_RX_PRESCALAR;
 800ec30:	237f      	movs	r3, #127	@ 0x7f
 800ec32:	633b      	str	r3, [r7, #48]	@ 0x30
            dwTemp = wValue;
 800ec34:	883b      	ldrh	r3, [r7, #0]
 800ec36:	60bb      	str	r3, [r7, #8]

            if(0U != dwTemp)
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d043      	beq.n	800ecc6 <phhalHw_Pn5180_SetConfig+0x7ee>
            {
                fTime = (float32_t)(((float32_t)dwTemp * 13.56) / (float32_t)(dwValue));
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	ee07 3a90 	vmov	s15, r3
 800ec44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec48:	ee17 0a90 	vmov	r0, s15
 800ec4c:	f7f1 fc7c 	bl	8000548 <__aeabi_f2d>
 800ec50:	f60f 1354 	addw	r3, pc, #2388	@ 0x954
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	f7f1 fcce 	bl	80005f8 <__aeabi_dmul>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4614      	mov	r4, r2
 800ec62:	461d      	mov	r5, r3
 800ec64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec66:	ee07 3a90 	vmov	s15, r3
 800ec6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec6e:	ee17 0a90 	vmov	r0, s15
 800ec72:	f7f1 fc69 	bl	8000548 <__aeabi_f2d>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	f7f1 fde5 	bl	800084c <__aeabi_ddiv>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	4610      	mov	r0, r2
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f7f1 ff8d 	bl	8000ba8 <__aeabi_d2f>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	62bb      	str	r3, [r7, #40]	@ 0x28
                dwTemp = (uint32_t)fTime;
 800ec92:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ec96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec9a:	ee17 3a90 	vmov	r3, s15
 800ec9e:	60bb      	str	r3, [r7, #8]
                dwValue |= (uint32_t)((dwTemp ) << TX_WAIT_CONFIG_TX_WAIT_VALUE_POS);
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	021b      	lsls	r3, r3, #8
 800eca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eca6:	4313      	orrs	r3, r2
 800eca8:	633b      	str	r3, [r7, #48]	@ 0x30
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800ecaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecac:	2117      	movs	r1, #23
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7fe fe70 	bl	800d994 <phhalHw_Pn5180_WriteRegister>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ecb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f001 801d 	beq.w	800fcfa <phhalHw_Pn5180_SetConfig+0x1822>
 800ecc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecc2:	f001 b84c 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, TX_WAIT_CONFIG, dwValue));
 800ecc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecc8:	2117      	movs	r1, #23
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7fe fe62 	bl	800d994 <phhalHw_Pn5180_WriteRegister>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ecd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f001 800f 	beq.w	800fcfa <phhalHw_Pn5180_SetConfig+0x1822>
 800ecdc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecde:	f001 b83e 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_MODINDEX:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800ece2:	887a      	ldrh	r2, [r7, #2]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	322c      	adds	r2, #44	@ 0x2c
 800ece8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ecec:	883a      	ldrh	r2, [r7, #0]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d105      	bne.n	800ecfe <phhalHw_Pn5180_SetConfig+0x826>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	f001 8000 	beq.w	800fcfe <phhalHw_Pn5180_SetConfig+0x1826>
        {
            /* Parameter checking */
            if (wValue > 0x1FU)
 800ecfe:	883b      	ldrh	r3, [r7, #0]
 800ed00:	2b1f      	cmp	r3, #31
 800ed02:	d903      	bls.n	800ed0c <phhalHw_Pn5180_SetConfig+0x834>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800ed04:	f240 2321 	movw	r3, #545	@ 0x221
 800ed08:	f001 b829 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            wSizeOfRegTypeValueSets = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK*/
            dwTemp = (uint32_t) ~( ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK );
 800ed10:	f46f 3378 	mvn.w	r3, #253952	@ 0x3e000
 800ed14:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800ed16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ed1c:	3338      	adds	r3, #56	@ 0x38
 800ed1e:	443b      	add	r3, r7
 800ed20:	2220      	movs	r2, #32
 800ed22:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800ed26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ed2c:	3338      	adds	r3, #56	@ 0x38
 800ed2e:	443b      	add	r3, r7
 800ed30:	2203      	movs	r2, #3
 800ed32:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed3a:	1c59      	adds	r1, r3, #1
 800ed3c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ed3e:	b2d2      	uxtb	r2, r2
 800ed40:	3338      	adds	r3, #56	@ 0x38
 800ed42:	443b      	add	r3, r7
 800ed44:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	0a1a      	lsrs	r2, r3, #8
 800ed4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed4e:	1c59      	adds	r1, r3, #1
 800ed50:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ed52:	b2d2      	uxtb	r2, r2
 800ed54:	3338      	adds	r3, #56	@ 0x38
 800ed56:	443b      	add	r3, r7
 800ed58:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	0c1a      	lsrs	r2, r3, #16
 800ed60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed62:	1c59      	adds	r1, r3, #1
 800ed64:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ed66:	b2d2      	uxtb	r2, r2
 800ed68:	3338      	adds	r3, #56	@ 0x38
 800ed6a:	443b      	add	r3, r7
 800ed6c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	0e1a      	lsrs	r2, r3, #24
 800ed74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed76:	1c59      	adds	r1, r3, #1
 800ed78:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800ed7a:	b2d2      	uxtb	r2, r2
 800ed7c:	3338      	adds	r3, #56	@ 0x38
 800ed7e:	443b      	add	r3, r7
 800ed80:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((wValue << ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_POS) & ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK);
 800ed84:	883b      	ldrh	r3, [r7, #0]
 800ed86:	035b      	lsls	r3, r3, #13
 800ed88:	f403 3378 	and.w	r3, r3, #253952	@ 0x3e000
 800ed8c:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = ANA_RF_CONTROL_TX;
 800ed8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed90:	1c5a      	adds	r2, r3, #1
 800ed92:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800ed94:	3338      	adds	r3, #56	@ 0x38
 800ed96:	443b      	add	r3, r7
 800ed98:	2220      	movs	r2, #32
 800ed9a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800ed9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eda0:	1c5a      	adds	r2, r3, #1
 800eda2:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800eda4:	3338      	adds	r3, #56	@ 0x38
 800eda6:	443b      	add	r3, r7
 800eda8:	2202      	movs	r2, #2
 800edaa:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800edae:	68ba      	ldr	r2, [r7, #8]
 800edb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edb2:	1c59      	adds	r1, r3, #1
 800edb4:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800edb6:	b2d2      	uxtb	r2, r2
 800edb8:	3338      	adds	r3, #56	@ 0x38
 800edba:	443b      	add	r3, r7
 800edbc:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	0a1a      	lsrs	r2, r3, #8
 800edc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edc6:	1c59      	adds	r1, r3, #1
 800edc8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800edca:	b2d2      	uxtb	r2, r2
 800edcc:	3338      	adds	r3, #56	@ 0x38
 800edce:	443b      	add	r3, r7
 800edd0:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	0c1a      	lsrs	r2, r3, #16
 800edd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edda:	1c59      	adds	r1, r3, #1
 800eddc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800edde:	b2d2      	uxtb	r2, r2
 800ede0:	3338      	adds	r3, #56	@ 0x38
 800ede2:	443b      	add	r3, r7
 800ede4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	0e1a      	lsrs	r2, r3, #24
 800edec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edee:	1c59      	adds	r1, r3, #1
 800edf0:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800edf2:	b2d2      	uxtb	r2, r2
 800edf4:	3338      	adds	r3, #56	@ 0x38
 800edf6:	443b      	add	r3, r7
 800edf8:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800edfc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800edfe:	f107 030c 	add.w	r3, r7, #12
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f002 fb31 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ee0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <phhalHw_Pn5180_SetConfig+0x942>
 800ee14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee16:	f000 bfa2 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800ee1a:	887a      	ldrh	r2, [r7, #2]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	322c      	adds	r2, #44	@ 0x2c
 800ee20:	8839      	ldrh	r1, [r7, #0]
 800ee22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        break;
 800ee26:	f000 bf6a 	b.w	800fcfe <phhalHw_Pn5180_SetConfig+0x1826>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:
        /* Disable crypto, enabling is not supported */
        if ((wValue != PH_OFF) && ( pDataParams->bMfcCryptoEnabled == PH_ON))
 800ee2a:	883b      	ldrh	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 8768 	beq.w	800fd02 <phhalHw_Pn5180_SetConfig+0x182a>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	f040 8762 	bne.w	800fd02 <phhalHw_Pn5180_SetConfig+0x182a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)(~(SYSTEM_CONFIG_MFC_CRYPTO_ON_MASK))));
 800ee3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ee42:	2100      	movs	r1, #0
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f002 fa9b 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ee4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d002      	beq.n	800ee5a <phhalHw_Pn5180_SetConfig+0x982>
 800ee54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee56:	f000 bf82 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bMfcCryptoEnabled = PH_OFF;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
        break;
 800ee62:	f000 bf4e 	b.w	800fd02 <phhalHw_Pn5180_SetConfig+0x182a>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:

        /* Modify additional info parameter */
        pDataParams->wAdditionalInfo = wValue + PHHAL_HW_PN5180_EXCHANGE_HEADER_SIZE;
 800ee66:	883b      	ldrh	r3, [r7, #0]
 800ee68:	3302      	adds	r3, #2
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	861a      	strh	r2, [r3, #48]	@ 0x30
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if(pDataParams->bNfcipMode == PH_ON)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	f040 8745 	bne.w	800fd06 <phhalHw_Pn5180_SetConfig+0x182e>
        {
             pDataParams->wAdditionalInfo += 1U;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800ee80:	3301      	adds	r3, #1
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	861a      	strh	r2, [r3, #48]	@ 0x30
        }
#endif
        break;
 800ee88:	f000 bf3d 	b.w	800fd06 <phhalHw_Pn5180_SetConfig+0x182e>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ee8c:	f107 0118 	add.w	r1, r7, #24
 800ee90:	f107 021c 	add.w	r2, r7, #28
 800ee94:	f107 031a 	add.w	r3, r7, #26
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	2101      	movs	r1, #1
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f003 f98f 	bl	80121c2 <phhalHw_Pn5180_GetRxBuffer>
 800eea4:	4603      	mov	r3, r0
 800eea6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eea8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <phhalHw_Pn5180_SetConfig+0x9dc>
 800eeae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eeb0:	f000 bf55 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Boundary check */
        if (wValue >= pDataParams->wRxBufSize)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8b1b      	ldrh	r3, [r3, #24]
 800eeb8:	883a      	ldrh	r2, [r7, #0]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d303      	bcc.n	800eec6 <phhalHw_Pn5180_SetConfig+0x9ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800eebe:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800eec2:	f000 bf4c 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Set start position */
        pDataParams->wRxBufStartPos = wValue;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	883a      	ldrh	r2, [r7, #0]
 800eeca:	83da      	strh	r2, [r3, #30]
        break;
 800eecc:	f000 bf46 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800eed0:	f107 0118 	add.w	r1, r7, #24
 800eed4:	f107 021c 	add.w	r2, r7, #28
 800eed8:	f107 031a 	add.w	r3, r7, #26
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	460b      	mov	r3, r1
 800eee0:	2101      	movs	r1, #1
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f003 f931 	bl	801214a <phhalHw_Pn5180_GetTxBuffer>
 800eee8:	4603      	mov	r3, r0
 800eeea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800eeec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <phhalHw_Pn5180_SetConfig+0xa20>
 800eef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eef4:	f000 bf33 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (wValue > pDataParams->wTxBufSize)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	8a1b      	ldrh	r3, [r3, #16]
 800eefc:	883a      	ldrh	r2, [r7, #0]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d903      	bls.n	800ef0a <phhalHw_Pn5180_SetConfig+0xa32>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800ef02:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800ef06:	f000 bf2a 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* set buffer length */
        pDataParams->wTxBufLen = wValue;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	883a      	ldrh	r2, [r7, #0]
 800ef0e:	825a      	strh	r2, [r3, #18]
        break;
 800ef10:	f000 bf24 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 800ef14:	f107 0118 	add.w	r1, r7, #24
 800ef18:	f107 021c 	add.w	r2, r7, #28
 800ef1c:	f107 031a 	add.w	r3, r7, #26
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	460b      	mov	r3, r1
 800ef24:	2101      	movs	r1, #1
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f003 f90f 	bl	801214a <phhalHw_Pn5180_GetTxBuffer>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ef30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <phhalHw_Pn5180_SetConfig+0xa64>
 800ef36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef38:	f000 bf11 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

        /* Check parameter, must not exceed TxBufferSize */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	8a1b      	ldrh	r3, [r3, #16]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d303      	bcc.n	800ef50 <phhalHw_Pn5180_SetConfig+0xa78>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 800ef48:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800ef4c:	f000 bf07 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Modify TxBuffer byte */
        pBuffer[pDataParams->wAdditionalInfo] = (uint8_t)wValue;
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800ef56:	4413      	add	r3, r2
 800ef58:	883a      	ldrh	r2, [r7, #0]
 800ef5a:	b2d2      	uxtb	r2, r2
 800ef5c:	701a      	strb	r2, [r3, #0]
        break;
 800ef5e:	f000 befd 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_TXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800ef62:	887a      	ldrh	r2, [r7, #2]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	322c      	adds	r2, #44	@ 0x2c
 800ef68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ef6c:	883a      	ldrh	r2, [r7, #0]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d105      	bne.n	800ef7e <phhalHw_Pn5180_SetConfig+0xaa6>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	f000 86c6 	beq.w	800fd0a <phhalHw_Pn5180_SetConfig+0x1832>
        {
            /* Update the framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800ef7e:	883b      	ldrh	r3, [r7, #0]
 800ef80:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ef84:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800ef86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef88:	0a1b      	lsrs	r3, r3, #8
 800ef8a:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800ef8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d011      	beq.n	800efb6 <phhalHw_Pn5180_SetConfig+0xade>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef98:	461a      	mov	r2, r3
 800ef9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d00a      	beq.n	800efb6 <phhalHw_Pn5180_SetConfig+0xade>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800efa0:	883b      	ldrh	r3, [r7, #0]
 800efa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800efa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800efaa:	d004      	beq.n	800efb6 <phhalHw_Pn5180_SetConfig+0xade>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800efac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800efb6:	883b      	ldrh	r3, [r7, #0]
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	803b      	strh	r3, [r7, #0]

            if(pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800efc2:	2b04      	cmp	r3, #4
 800efc4:	d104      	bne.n	800efd0 <phhalHw_Pn5180_SetConfig+0xaf8>
            {
                wTmpValue = wValue;
 800efc6:	883b      	ldrh	r3, [r7, #0]
 800efc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 800efca:	230b      	movs	r3, #11
 800efcc:	803b      	strh	r3, [r7, #0]
 800efce:	e00f      	b.n	800eff0 <phhalHw_Pn5180_SetConfig+0xb18>
            }
            else
            {
                /* Evaluate hardware settings */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800efd6:	8839      	ldrh	r1, [r7, #0]
 800efd8:	22ff      	movs	r2, #255	@ 0xff
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f003 fd3a 	bl	8012a54 <phhalHw_Pn5180_SetCardMode>
 800efe0:	4603      	mov	r3, r0
 800efe2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800efe4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d002      	beq.n	800eff0 <phhalHw_Pn5180_SetConfig+0xb18>
 800efea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800efec:	f000 beb7 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                    PHHAL_HW_RF_DATARATE_NO_CHANGE,
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));
            }

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800eff0:	887a      	ldrh	r2, [r7, #2]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	322c      	adds	r2, #44	@ 0x2c
 800eff6:	8839      	ldrh	r1, [r7, #0]
 800eff8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4))
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f002:	2b04      	cmp	r3, #4
 800f004:	d11d      	bne.n	800f042 <phhalHw_Pn5180_SetConfig+0xb6a>
 800f006:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f008:	2b0b      	cmp	r3, #11
 800f00a:	d11a      	bne.n	800f042 <phhalHw_Pn5180_SetConfig+0xb6a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_SYMBOL23));
 800f00c:	2204      	movs	r2, #4
 800f00e:	2142      	movs	r1, #66	@ 0x42
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f002 f8c9 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f016:	4603      	mov	r3, r0
 800f018:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f01a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <phhalHw_Pn5180_SetConfig+0xb4e>
 800f020:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f022:	f000 be9c 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX26_DATA_MOD));
 800f026:	2243      	movs	r2, #67	@ 0x43
 800f028:	213b      	movs	r1, #59	@ 0x3b
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f002 f8bc 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f030:	4603      	mov	r3, r0
 800f032:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f034:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 8081 	beq.w	800f13e <phhalHw_Pn5180_SetConfig+0xc66>
 800f03c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f03e:	f000 be8e 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_I15693_53KBPS_DATARATE))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f048:	2b04      	cmp	r3, #4
 800f04a:	d123      	bne.n	800f094 <phhalHw_Pn5180_SetConfig+0xbbc>
 800f04c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f04e:	2b1b      	cmp	r3, #27
 800f050:	d120      	bne.n	800f094 <phhalHw_Pn5180_SetConfig+0xbbc>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_SYMBOL23));
 800f052:	2205      	movs	r2, #5
 800f054:	2142      	movs	r1, #66	@ 0x42
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f002 f8a6 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f05c:	4603      	mov	r3, r0
 800f05e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f060:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f062:	2b00      	cmp	r3, #0
 800f064:	d002      	beq.n	800f06c <phhalHw_Pn5180_SetConfig+0xb94>
 800f066:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f068:	f000 be79 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX53_DATA_MOD));
 800f06c:	2244      	movs	r2, #68	@ 0x44
 800f06e:	213b      	movs	r1, #59	@ 0x3b
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f002 f899 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f076:	4603      	mov	r3, r0
 800f078:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f07a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d002      	beq.n	800f086 <phhalHw_Pn5180_SetConfig+0xbae>
 800f080:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f082:	f000 be6c 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f086:	887a      	ldrh	r2, [r7, #2]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	322c      	adds	r2, #44	@ 0x2c
 800f08c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f08e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800f092:	e054      	b.n	800f13e <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f09a:	2b04      	cmp	r3, #4
 800f09c:	d123      	bne.n	800f0e6 <phhalHw_Pn5180_SetConfig+0xc0e>
 800f09e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d120      	bne.n	800f0e6 <phhalHw_Pn5180_SetConfig+0xc0e>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_SYMBOL23));
 800f0a4:	2206      	movs	r2, #6
 800f0a6:	2142      	movs	r1, #66	@ 0x42
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f002 f87d 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f0b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <phhalHw_Pn5180_SetConfig+0xbe6>
 800f0b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0ba:	f000 be50 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX106_DATA_MOD));
 800f0be:	2245      	movs	r2, #69	@ 0x45
 800f0c0:	213b      	movs	r1, #59	@ 0x3b
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f002 f870 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f0cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d002      	beq.n	800f0d8 <phhalHw_Pn5180_SetConfig+0xc00>
 800f0d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0d4:	f000 be43 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f0d8:	887a      	ldrh	r2, [r7, #2]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	322c      	adds	r2, #44	@ 0x2c
 800f0de:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f0e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800f0e4:	e02b      	b.n	800f13e <phhalHw_Pn5180_SetConfig+0xc66>
            }
            else if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_212))
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	f040 860c 	bne.w	800fd0a <phhalHw_Pn5180_SetConfig+0x1832>
 800f0f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	f040 8608 	bne.w	800fd0a <phhalHw_Pn5180_SetConfig+0x1832>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_SYMBOL23_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_SYMBOL23));
 800f0fa:	2207      	movs	r2, #7
 800f0fc:	2142      	movs	r1, #66	@ 0x42
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f002 f852 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f104:	4603      	mov	r3, r0
 800f106:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f108:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d002      	beq.n	800f114 <phhalHw_Pn5180_SetConfig+0xc3c>
 800f10e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f110:	f000 be25 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, TX_DATA_MOD_RFU, (uint32_t)PHHAL_HW_15693_TX212_DATA_MOD));
 800f114:	2246      	movs	r2, #70	@ 0x46
 800f116:	213b      	movs	r1, #59	@ 0x3b
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f002 f845 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f11e:	4603      	mov	r3, r0
 800f120:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f122:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <phhalHw_Pn5180_SetConfig+0xc56>
 800f128:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f12a:	f000 be18 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f12e:	887a      	ldrh	r2, [r7, #2]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	322c      	adds	r2, #44	@ 0x2c
 800f134:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f136:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            else
            {
                /* To avoid the warning */
            }
        }
        break;
 800f13a:	f000 bde6 	b.w	800fd0a <phhalHw_Pn5180_SetConfig+0x1832>
 800f13e:	f000 bde4 	b.w	800fd0a <phhalHw_Pn5180_SetConfig+0x1832>

    case PHHAL_HW_CONFIG_RXDATARATE_FRAMING:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f142:	887a      	ldrh	r2, [r7, #2]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	322c      	adds	r2, #44	@ 0x2c
 800f148:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f14c:	883a      	ldrh	r2, [r7, #0]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d105      	bne.n	800f15e <phhalHw_Pn5180_SetConfig+0xc86>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f158:	2b01      	cmp	r3, #1
 800f15a:	f000 85d8 	beq.w	800fd0e <phhalHw_Pn5180_SetConfig+0x1836>
        {
            /* Update teh framing, based on the Higher byte */
            wFraming = wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK;
 800f15e:	883b      	ldrh	r3, [r7, #0]
 800f160:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f164:	847b      	strh	r3, [r7, #34]	@ 0x22
            wFraming = wFraming >> 0x08U;
 800f166:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f168:	0a1b      	lsrs	r3, r3, #8
 800f16a:	847b      	strh	r3, [r7, #34]	@ 0x22

            if((wFraming != PHHAL_HW_CARDTYPE_CURRENT) && (wFraming != pDataParams->bCardType))
 800f16c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d011      	beq.n	800f196 <phhalHw_Pn5180_SetConfig+0xcbe>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f178:	461a      	mov	r2, r3
 800f17a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d00a      	beq.n	800f196 <phhalHw_Pn5180_SetConfig+0xcbe>
            {
                if((wValue & PHHAL_HW_RF_FRAMING_OPTION_MASK) != PHHAL_HW_RF_TYPE_ACTIVE_FRAMING)
 800f180:	883b      	ldrh	r3, [r7, #0]
 800f182:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f18a:	d004      	beq.n	800f196 <phhalHw_Pn5180_SetConfig+0xcbe>
                {
                    pDataParams->bCardType = (uint8_t)wFraming;
 800f18c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                }
            }

            /* Update the Baudrate based on the lower byte */
            wValue = wValue & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 800f196:	883b      	ldrh	r3, [r7, #0]
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	803b      	strh	r3, [r7, #0]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue == PHHAL_HW_RF_DATARATE_106))
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1a2:	2b04      	cmp	r3, #4
 800f1a4:	d106      	bne.n	800f1b4 <phhalHw_Pn5180_SetConfig+0xcdc>
 800f1a6:	883b      	ldrh	r3, [r7, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d103      	bne.n	800f1b4 <phhalHw_Pn5180_SetConfig+0xcdc>
            {
                wTmpValue = wValue;
 800f1ac:	883b      	ldrh	r3, [r7, #0]
 800f1ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 800f1b0:	230f      	movs	r3, #15
 800f1b2:	803b      	strh	r3, [r7, #0]
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f1ba:	883a      	ldrh	r2, [r7, #0]
 800f1bc:	21ff      	movs	r1, #255	@ 0xff
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f003 fc48 	bl	8012a54 <phhalHw_Pn5180_SetCardMode>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f1c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d002      	beq.n	800f1d4 <phhalHw_Pn5180_SetConfig+0xcfc>
 800f1ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1d0:	f000 bdc5 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                PHHAL_HW_RF_DATARATE_NO_CHANGE,
                wValue,
                pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER]));

            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f1d4:	887a      	ldrh	r2, [r7, #2]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	322c      	adds	r2, #44	@ 0x2c
 800f1da:	8839      	ldrh	r1, [r7, #0]
 800f1dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wTmpValue == PHHAL_HW_RF_DATARATE_106))
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1e6:	2b04      	cmp	r3, #4
 800f1e8:	f040 8591 	bne.w	800fd0e <phhalHw_Pn5180_SetConfig+0x1836>
 800f1ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f040 858d 	bne.w	800fd0e <phhalHw_Pn5180_SetConfig+0x1836>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_CONFIG, &dwTemp));
 800f1f4:	f107 0308 	add.w	r3, r7, #8
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	211a      	movs	r1, #26
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f002 f9e7 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 800f202:	4603      	mov	r3, r0
 800f204:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f206:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <phhalHw_Pn5180_SetConfig+0xd3a>
 800f20c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f20e:	f000 bda6 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_BAUDRATE_MASK;
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 800f218:	4013      	ands	r3, r2
 800f21a:	60bb      	str	r3, [r7, #8]
                dwTemp = dwTemp | PHHAL_HW_15693_RX106_BAUDRATE_VALUE;
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	f043 0304 	orr.w	r3, r3, #4
 800f222:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_CONFIG, (uint32_t)dwTemp));
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	461a      	mov	r2, r3
 800f228:	211a      	movs	r1, #26
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f001 ffbc 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f230:	4603      	mov	r3, r0
 800f232:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f234:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f236:	2b00      	cmp	r3, #0
 800f238:	d002      	beq.n	800f240 <phhalHw_Pn5180_SetConfig+0xd68>
 800f23a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f23c:	f000 bd8f 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SIGPRO_RM_CONFIG, &dwTemp));
 800f240:	f107 0308 	add.w	r3, r7, #8
 800f244:	461a      	mov	r2, r3
 800f246:	211c      	movs	r1, #28
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f002 f9c1 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 800f24e:	4603      	mov	r3, r0
 800f250:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f252:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f254:	2b00      	cmp	r3, #0
 800f256:	d002      	beq.n	800f25e <phhalHw_Pn5180_SetConfig+0xd86>
 800f258:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f25a:	f000 bd80 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                dwTemp = dwTemp & PHHAL_HW_15693_RX106_CORRSPEED;
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 800f264:	4013      	ands	r3, r2
 800f266:	60bb      	str	r3, [r7, #8]
                PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_WriteRegister(pDataParams, SIGPRO_RM_CONFIG, (uint32_t)dwTemp));
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	461a      	mov	r2, r3
 800f26c:	211c      	movs	r1, #28
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f001 ff9a 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f274:	4603      	mov	r3, r0
 800f276:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d002      	beq.n	800f284 <phhalHw_Pn5180_SetConfig+0xdac>
 800f27e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f280:	f000 bd6d 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

                /* Write config data into shadow */
                pDataParams->wCfgShadow[wConfig] = wTmpValue;
 800f284:	887a      	ldrh	r2, [r7, #2]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	322c      	adds	r2, #44	@ 0x2c
 800f28a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800f28c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
        }
        break;
 800f290:	f000 bd3d 	b.w	800fd0e <phhalHw_Pn5180_SetConfig+0x1836>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MICROSECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f294:	887a      	ldrh	r2, [r7, #2]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	322c      	adds	r2, #44	@ 0x2c
 800f29a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f29e:	883a      	ldrh	r2, [r7, #0]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d10a      	bne.n	800f2ba <phhalHw_Pn5180_SetConfig+0xde2>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d105      	bne.n	800f2ba <phhalHw_Pn5180_SetConfig+0xde2>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	f000 852c 	beq.w	800fd12 <phhalHw_Pn5180_SetConfig+0x183a>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800f2ba:	883b      	ldrh	r3, [r7, #0]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4619      	mov	r1, r3
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f003 febd 	bl	8013040 <phhalHw_Pn5180_SetTmo>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f2ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <phhalHw_Pn5180_SetConfig+0xdfe>
 800f2d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f2d2:	f000 bd44 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MICROSECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f2d6:	887a      	ldrh	r2, [r7, #2]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	322c      	adds	r2, #44	@ 0x2c
 800f2dc:	8839      	ldrh	r1, [r7, #0]
 800f2de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MICROSECONDS;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800f2ea:	f000 bd12 	b.w	800fd12 <phhalHw_Pn5180_SetConfig+0x183a>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bTimeoutUnit != PHHAL_HW_TIME_MILLISECONDS) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f2ee:	887a      	ldrh	r2, [r7, #2]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	322c      	adds	r2, #44	@ 0x2c
 800f2f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f2f8:	883a      	ldrh	r2, [r7, #0]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d10a      	bne.n	800f314 <phhalHw_Pn5180_SetConfig+0xe3c>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f304:	2b01      	cmp	r3, #1
 800f306:	d105      	bne.n	800f314 <phhalHw_Pn5180_SetConfig+0xe3c>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f30e:	2b01      	cmp	r3, #1
 800f310:	f000 8501 	beq.w	800fd16 <phhalHw_Pn5180_SetConfig+0x183e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800f314:	883b      	ldrh	r3, [r7, #0]
 800f316:	2201      	movs	r2, #1
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f003 fe90 	bl	8013040 <phhalHw_Pn5180_SetTmo>
 800f320:	4603      	mov	r3, r0
 800f322:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f324:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f326:	2b00      	cmp	r3, #0
 800f328:	d002      	beq.n	800f330 <phhalHw_Pn5180_SetConfig+0xe58>
 800f32a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f32c:	f000 bd17 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                                 phhalHw_Pn5180_SetTmo(
                                         pDataParams,
                                         wValue,
                                         PHHAL_HW_TIME_MILLISECONDS));
            /* Write config data into shadow */
            pDataParams->wCfgShadow[wConfig] = wValue;
 800f330:	887a      	ldrh	r2, [r7, #2]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	322c      	adds	r2, #44	@ 0x2c
 800f336:	8839      	ldrh	r1, [r7, #0]
 800f338:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            pDataParams->bTimeoutUnit = PHHAL_HW_TIME_MILLISECONDS;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        break;
 800f344:	f000 bce7 	b.w	800fd16 <phhalHw_Pn5180_SetConfig+0x183e>

    case PHHAL_HW_CONFIG_SUBCARRIER:

        if ((pDataParams->wCfgShadow[wConfig] != wValue) || (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO))
 800f348:	887a      	ldrh	r2, [r7, #2]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	322c      	adds	r2, #44	@ 0x2c
 800f34e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f352:	883a      	ldrh	r2, [r7, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d105      	bne.n	800f364 <phhalHw_Pn5180_SetConfig+0xe8c>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f35e:	2b01      	cmp	r3, #1
 800f360:	f000 84db 	beq.w	800fd1a <phhalHw_Pn5180_SetConfig+0x1842>
        {
            /* Parameter check */
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	d008      	beq.n	800f380 <phhalHw_Pn5180_SetConfig+0xea8>
                    (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f374:	2b06      	cmp	r3, #6
 800f376:	d003      	beq.n	800f380 <phhalHw_Pn5180_SetConfig+0xea8>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800f378:	f240 2325 	movw	r3, #549	@ 0x225
 800f37c:	f000 bcef 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* only single subcarrier to be used while reception by ISO15693 */
            if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_ISO15693) && (wValue != PHHAL_HW_SUBCARRIER_SINGLE))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f386:	2b04      	cmp	r3, #4
 800f388:	d106      	bne.n	800f398 <phhalHw_Pn5180_SetConfig+0xec0>
 800f38a:	883b      	ldrh	r3, [r7, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d003      	beq.n	800f398 <phhalHw_Pn5180_SetConfig+0xec0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f390:	f240 2323 	movw	r3, #547	@ 0x223
 800f394:	f000 bce3 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }

            /* Evaluate hardware settings */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetCardMode(
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 800f3a4:	883b      	ldrh	r3, [r7, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f003 fb54 	bl	8012a54 <phhalHw_Pn5180_SetCardMode>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f3b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <phhalHw_Pn5180_SetConfig+0xee4>
 800f3b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3b8:	f000 bcd1 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING],
                    pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING],
                    wValue));

            /* Update Subcarrier setting */
            pDataParams->wCfgShadow[PHHAL_HW_CONFIG_SUBCARRIER] = wValue;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	883a      	ldrh	r2, [r7, #0]
 800f3c0:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
        }

        break;
 800f3c4:	f000 bca9 	b.w	800fd1a <phhalHw_Pn5180_SetConfig+0x1842>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        /* Check supported option bits */
        switch (wValue & PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800f3c8:	883b      	ldrh	r3, [r7, #0]
 800f3ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d006      	beq.n	800f3e0 <phhalHw_Pn5180_SetConfig+0xf08>
 800f3d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3d6:	d003      	beq.n	800f3e0 <phhalHw_Pn5180_SetConfig+0xf08>
        {
        case PHHAL_HW_TIMING_MODE_OPTION_DEFAULT:
        case PHHAL_HW_TIMING_MODE_OPTION_AUTOCLEAR:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f3d8:	f240 2321 	movw	r3, #545	@ 0x221
 800f3dc:	f000 bcbf 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800f3e0:	bf00      	nop
        }

        /* Check supported timing modes */
        switch (wValue & (uint16_t)~(uint16_t)PHHAL_HW_TIMING_MODE_OPTION_MASK)
 800f3e2:	883b      	ldrh	r3, [r7, #0]
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	dc02      	bgt.n	800f3f0 <phhalHw_Pn5180_SetConfig+0xf18>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	da03      	bge.n	800f3f6 <phhalHw_Pn5180_SetConfig+0xf1e>
 800f3ee:	e00f      	b.n	800f410 <phhalHw_Pn5180_SetConfig+0xf38>
 800f3f0:	2b02      	cmp	r3, #2
 800f3f2:	d009      	beq.n	800f408 <phhalHw_Pn5180_SetConfig+0xf30>
 800f3f4:	e00c      	b.n	800f410 <phhalHw_Pn5180_SetConfig+0xf38>
        {
        case PHHAL_HW_TIMING_MODE_OFF:
        case PHHAL_HW_TIMING_MODE_FDT:
            pDataParams->dwTimingUs = 0U;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	621a      	str	r2, [r3, #32]
            pDataParams->wTimingMode = wValue;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	883a      	ldrh	r2, [r7, #0]
 800f400:	851a      	strh	r2, [r3, #40]	@ 0x28
            break;
 800f402:	bf00      	nop
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }

        break;
 800f404:	f000 bcaa 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f408:	f240 2323 	movw	r3, #547	@ 0x223
 800f40c:	f000 bca7 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f410:	f240 2321 	movw	r3, #545	@ 0x221
 800f414:	f000 bca3 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        /* Parameter Check */
        if (wValue == 0U)
 800f418:	883b      	ldrh	r3, [r7, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d103      	bne.n	800f426 <phhalHw_Pn5180_SetConfig+0xf4e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f41e:	f240 2321 	movw	r3, #545	@ 0x221
 800f422:	f000 bc9c 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Store config data */
        pDataParams->wFieldOffTime = wValue;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	883a      	ldrh	r2, [r7, #0]
 800f42a:	859a      	strh	r2, [r3, #44]	@ 0x2c
        break;
 800f42c:	f000 bc96 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        /* Store config data */
        pDataParams->wFieldRecoveryTime = wValue;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	883a      	ldrh	r2, [r7, #0]
 800f434:	85da      	strh	r2, [r3, #46]	@ 0x2e
        break;
 800f436:	f000 bc91 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        if (wValue == PH_ON)
 800f43a:	883b      	ldrh	r3, [r7, #0]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d106      	bne.n	800f44e <phhalHw_Pn5180_SetConfig+0xf76>
        {
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800f440:	883b      	ldrh	r3, [r7, #0]
 800f442:	b2da      	uxtb	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
        }
        break;
 800f44a:	f000 bc87 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        else if (wValue == PH_OFF)
 800f44e:	883b      	ldrh	r3, [r7, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d106      	bne.n	800f462 <phhalHw_Pn5180_SetConfig+0xf8a>
            pDataParams->bJewelActivated = (uint8_t)wValue;
 800f454:	883b      	ldrh	r3, [r7, #0]
 800f456:	b2da      	uxtb	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 800f45e:	f000 bc7d 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f462:	f240 2321 	movw	r3, #545	@ 0x221
 800f466:	f000 bc7a 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        if (wValue == PH_OFF)
 800f46a:	883b      	ldrh	r3, [r7, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d105      	bne.n	800f47c <phhalHw_Pn5180_SetConfig+0xfa4>
        {
            pDataParams->bRfResetAfterTo = PH_OFF;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        else
        {
            pDataParams->bRfResetAfterTo = PH_ON;
        }
        break;
 800f478:	f000 bc70 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
            pDataParams->bRfResetAfterTo = PH_ON;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800f484:	f000 bc6a 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_OPE_MODE:

        pDataParams->bOpeMode = (uint8_t)wValue;
 800f488:	883b      	ldrh	r3, [r7, #0]
 800f48a:	b2da      	uxtb	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        break;
 800f492:	f000 bc63 	b.w	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_EMD:
        pDataParams->bEmdFlag = (uint8_t)wValue;
 800f496:	883b      	ldrh	r3, [r7, #0]
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        if(wValue == 0x1U)
 800f4a0:	883b      	ldrh	r3, [r7, #0]
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d122      	bne.n	800f4ec <phhalHw_Pn5180_SetConfig+0x1014>
        {
            if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f4ac:	2b03      	cmp	r3, #3
 800f4ae:	d00e      	beq.n	800f4ce <phhalHw_Pn5180_SetConfig+0xff6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_EMVCO_NFC_EMD));
 800f4b0:	f240 1207 	movw	r2, #263	@ 0x107
 800f4b4:	2128      	movs	r1, #40	@ 0x28
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7fe fa6c 	bl	800d994 <phhalHw_Pn5180_WriteRegister>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f4c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 842b 	beq.w	800fd1e <phhalHw_Pn5180_SetConfig+0x1846>
 800f4c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4ca:	f000 bc48 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            else
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WriteRegister(pDataParams, EMD_CONTROL, PHHAL_HW_PN5180_ISO_EMD));
 800f4ce:	f240 1203 	movw	r2, #259	@ 0x103
 800f4d2:	2128      	movs	r1, #40	@ 0x28
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7fe fa5d 	bl	800d994 <phhalHw_Pn5180_WriteRegister>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f4de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 841c 	beq.w	800fd1e <phhalHw_Pn5180_SetConfig+0x1846>
 800f4e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4e8:	f000 bc39 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
        }
        else
        {
            /* Clear EMD Enable bit in EMD Control Register */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, EMD_CONTROL, (uint32_t)~EMD_CONTROL_EMD_ENABLE_MASK));
 800f4ec:	f06f 0201 	mvn.w	r2, #1
 800f4f0:	2128      	movs	r1, #40	@ 0x28
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f001 ff44 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f4fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f000 840d 	beq.w	800fd1e <phhalHw_Pn5180_SetConfig+0x1846>
 800f504:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f506:	f000 bc2a 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_SETMINFDT:

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetMinFDT(pDataParams, wValue));
 800f50a:	883b      	ldrh	r3, [r7, #0]
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 fec6 	bl	80102a0 <phhalHw_Pn5180_SetMinFDT>
 800f514:	4603      	mov	r3, r0
 800f516:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f518:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 8401 	beq.w	800fd22 <phhalHw_Pn5180_SetConfig+0x184a>
 800f520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f522:	f000 bc1c 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_RXMULTIPLE:

        if (wValue == PH_ON)
 800f526:	883b      	ldrh	r3, [r7, #0]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d111      	bne.n	800f550 <phhalHw_Pn5180_SetConfig+0x1078>
        {
            pDataParams->bRxMultiple = PH_ON;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask( pDataParams, TRANSCEIVER_CONFIG, TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK ));
 800f534:	2202      	movs	r2, #2
 800f536:	2104      	movs	r1, #4
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f001 feab 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800f53e:	4603      	mov	r3, r0
 800f540:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 83ee 	beq.w	800fd26 <phhalHw_Pn5180_SetConfig+0x184e>
 800f54a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f54c:	f000 bc07 	b.w	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            pDataParams->bRxMultiple = PH_OFF;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask( pDataParams, TRANSCEIVER_CONFIG, (uint32_t )~(TRANSCEIVER_CONFIG_RX_MULTIPLE_ENABLE_MASK) ));
 800f558:	f06f 0202 	mvn.w	r2, #2
 800f55c:	2104      	movs	r1, #4
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f001 ff0e 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f564:	4603      	mov	r3, r0
 800f566:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f000 83db 	beq.w	800fd26 <phhalHw_Pn5180_SetConfig+0x184e>
 800f570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f572:	e3f4      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_RFCA:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800f574:	883b      	ldrh	r3, [r7, #0]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d005      	beq.n	800f586 <phhalHw_Pn5180_SetConfig+0x10ae>
 800f57a:	883b      	ldrh	r3, [r7, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d002      	beq.n	800f586 <phhalHw_Pn5180_SetConfig+0x10ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f580:	f240 2321 	movw	r3, #545	@ 0x221
 800f584:	e3eb      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bRfca = (uint8_t)wValue;
 800f586:	883b      	ldrh	r3, [r7, #0]
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	70da      	strb	r2, [r3, #3]
        break;
 800f58e:	e3e5      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_RFON_INTERRUPT:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800f590:	883b      	ldrh	r3, [r7, #0]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d00c      	beq.n	800f5b0 <phhalHw_Pn5180_SetConfig+0x10d8>
 800f596:	883b      	ldrh	r3, [r7, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d009      	beq.n	800f5b0 <phhalHw_Pn5180_SetConfig+0x10d8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f59c:	f240 2321 	movw	r3, #545	@ 0x221
 800f5a0:	e3dd      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
 800f5a2:	bf00      	nop
 800f5a4:	f3af 8000 	nop.w
 800f5a8:	51eb851f 	.word	0x51eb851f
 800f5ac:	402b1eb8 	.word	0x402b1eb8
        }

        if(wValue == PH_ON)
 800f5b0:	883b      	ldrh	r3, [r7, #0]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d10c      	bne.n	800f5d0 <phhalHw_Pn5180_SetConfig+0x10f8>
        {
            /* Enable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800f5b6:	2280      	movs	r2, #128	@ 0x80
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f001 fdf4 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f5c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 83af 	beq.w	800fd2a <phhalHw_Pn5180_SetConfig+0x1852>
 800f5cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5ce:	e3c6      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        else
        {
            /* Disable RF-ON Interrupt*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, IRQ_ENABLE,  ~(uint32_t)IRQ_ENABLE_RFON_DET_IRQ_SET_ENABLE_MASK));
 800f5d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f001 fed2 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f5e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f000 83a1 	beq.w	800fd2a <phhalHw_Pn5180_SetConfig+0x1852>
 800f5e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5ea:	e3b8      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        break;

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800f5ec:	883b      	ldrh	r3, [r7, #0]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d005      	beq.n	800f5fe <phhalHw_Pn5180_SetConfig+0x1126>
 800f5f2:	883b      	ldrh	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <phhalHw_Pn5180_SetConfig+0x1126>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f5f8:	f240 2321 	movw	r3, #545	@ 0x221
 800f5fc:	e3af      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bNfcipMode = (uint8_t)wValue;
 800f5fe:	883b      	ldrh	r3, [r7, #0]
 800f600:	b2da      	uxtb	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        if (pDataParams->bNfcipMode == PH_ON)
        {
            phhalHw_Pn5180_AutoSyncByte(pDataParams);
        }
#endif
        break;
 800f608:	e3a8      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_SET_SYMBOL_SEND:

        /* check parameter */
        if ((wValue != PH_ON) && (wValue != PH_OFF))
 800f60a:	883b      	ldrh	r3, [r7, #0]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d005      	beq.n	800f61c <phhalHw_Pn5180_SetConfig+0x1144>
 800f610:	883b      	ldrh	r3, [r7, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d002      	beq.n	800f61c <phhalHw_Pn5180_SetConfig+0x1144>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f616:	f240 2321 	movw	r3, #545	@ 0x221
 800f61a:	e3a0      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* PH_ON implies Clearing Bit-3 (DataEn Bit in TxDataNum). */
        if (wValue == PH_ON)
 800f61c:	883b      	ldrh	r3, [r7, #0]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d10d      	bne.n	800f63e <phhalHw_Pn5180_SetConfig+0x1166>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG,  ~(uint32_t)TX_CONFIG_TX_DATA_ENABLE_MASK));
 800f622:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800f626:	2118      	movs	r1, #24
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f001 fea9 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800f62e:	4603      	mov	r3, r0
 800f630:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f632:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f634:	2b00      	cmp	r3, #0
 800f636:	f000 837a 	beq.w	800fd2e <phhalHw_Pn5180_SetConfig+0x1856>
 800f63a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f63c:	e38f      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        /* PH_OFF implies Setting Bit-3 (DataEn Bit in TxDataNum). */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_DATA_ENABLE_MASK));
 800f63e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f642:	2118      	movs	r1, #24
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f001 fe25 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800f64a:	4603      	mov	r3, r0
 800f64c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f64e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f650:	2b00      	cmp	r3, #0
 800f652:	f000 836c 	beq.w	800fd2e <phhalHw_Pn5180_SetConfig+0x1856>
 800f656:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f658:	e381      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_START:

        /* Parameter check */
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f660:	2b05      	cmp	r3, #5
 800f662:	d00c      	beq.n	800f67e <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
        if ((pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID) &&
 800f66a:	2b04      	cmp	r3, #4
 800f66c:	d007      	beq.n	800f67e <phhalHw_Pn5180_SetConfig+0x11a6>
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3))
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
            (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693) &&
 800f674:	2b06      	cmp	r3, #6
 800f676:	d002      	beq.n	800f67e <phhalHw_Pn5180_SetConfig+0x11a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800f678:	f240 2325 	movw	r3, #549	@ 0x225
 800f67c:	e36f      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800f67e:	883b      	ldrh	r3, [r7, #0]
 800f680:	2b07      	cmp	r3, #7
 800f682:	d82b      	bhi.n	800f6dc <phhalHw_Pn5180_SetConfig+0x1204>
 800f684:	a201      	add	r2, pc, #4	@ (adr r2, 800f68c <phhalHw_Pn5180_SetConfig+0x11b4>)
 800f686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68a:	bf00      	nop
 800f68c:	0800f6e3 	.word	0x0800f6e3
 800f690:	0800f6ad 	.word	0x0800f6ad
 800f694:	0800f6ad 	.word	0x0800f6ad
 800f698:	0800f6dd 	.word	0x0800f6dd
 800f69c:	0800f6ad 	.word	0x0800f6ad
 800f6a0:	0800f6bd 	.word	0x0800f6bd
 800f6a4:	0800f6cd 	.word	0x0800f6cd
 800f6a8:	0800f6cd 	.word	0x0800f6cd
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6b2:	2b05      	cmp	r3, #5
 800f6b4:	d017      	beq.n	800f6e6 <phhalHw_Pn5180_SetConfig+0x120e>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f6b6:	f240 2321 	movw	r3, #545	@ 0x221
 800f6ba:	e350      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I15693_SOF:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ISO15693)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6c2:	2b04      	cmp	r3, #4
 800f6c4:	d011      	beq.n	800f6ea <phhalHw_Pn5180_SetConfig+0x1212>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f6c6:	f240 2321 	movw	r3, #545	@ 0x221
 800f6ca:	e348      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_I18000P3M3)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6d2:	2b06      	cmp	r3, #6
 800f6d4:	d00b      	beq.n	800f6ee <phhalHw_Pn5180_SetConfig+0x1216>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f6d6:	f240 2321 	movw	r3, #545	@ 0x221
 800f6da:	e340      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            }
            break;
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800f6dc:	f240 2323 	movw	r3, #547	@ 0x223
 800f6e0:	e33d      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800f6e2:	bf00      	nop
 800f6e4:	e004      	b.n	800f6f0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800f6e6:	bf00      	nop
 800f6e8:	e002      	b.n	800f6f0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800f6ea:	bf00      	nop
 800f6ec:	e000      	b.n	800f6f0 <phhalHw_Pn5180_SetConfig+0x1218>
            break;
 800f6ee:	bf00      	nop
        }

        wSizeOfRegTypeValueSets = 0U;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits of TX_CONFIG_TX_START_SYMBOL_MASK & DATA_ENABLE*/
        if(wValue == PH_OFF)
 800f6f4:	883b      	ldrh	r3, [r7, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d103      	bne.n	800f702 <phhalHw_Pn5180_SetConfig+0x122a>
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK | TX_CONFIG_TX_DATA_ENABLE_MASK);
 800f6fa:	f46f 6398 	mvn.w	r3, #1216	@ 0x4c0
 800f6fe:	60bb      	str	r3, [r7, #8]
 800f700:	e002      	b.n	800f708 <phhalHw_Pn5180_SetConfig+0x1230>
        }
        else
        {
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_START_SYMBOL_MASK);
 800f702:	f06f 03c0 	mvn.w	r3, #192	@ 0xc0
 800f706:	60bb      	str	r3, [r7, #8]
        }

        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800f708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f70e:	3338      	adds	r3, #56	@ 0x38
 800f710:	443b      	add	r3, r7
 800f712:	2218      	movs	r2, #24
 800f714:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800f718:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f71a:	1c5a      	adds	r2, r3, #1
 800f71c:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f71e:	3338      	adds	r3, #56	@ 0x38
 800f720:	443b      	add	r3, r7
 800f722:	2203      	movs	r2, #3
 800f724:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800f728:	68ba      	ldr	r2, [r7, #8]
 800f72a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f72c:	1c59      	adds	r1, r3, #1
 800f72e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f730:	b2d2      	uxtb	r2, r2
 800f732:	3338      	adds	r3, #56	@ 0x38
 800f734:	443b      	add	r3, r7
 800f736:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	0a1a      	lsrs	r2, r3, #8
 800f73e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f740:	1c59      	adds	r1, r3, #1
 800f742:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f744:	b2d2      	uxtb	r2, r2
 800f746:	3338      	adds	r3, #56	@ 0x38
 800f748:	443b      	add	r3, r7
 800f74a:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	0c1a      	lsrs	r2, r3, #16
 800f752:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f754:	1c59      	adds	r1, r3, #1
 800f756:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f758:	b2d2      	uxtb	r2, r2
 800f75a:	3338      	adds	r3, #56	@ 0x38
 800f75c:	443b      	add	r3, r7
 800f75e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	0e1a      	lsrs	r2, r3, #24
 800f766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f768:	1c59      	adds	r1, r3, #1
 800f76a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f76c:	b2d2      	uxtb	r2, r2
 800f76e:	3338      	adds	r3, #56	@ 0x38
 800f770:	443b      	add	r3, r7
 800f772:	f803 2c2c 	strb.w	r2, [r3, #-44]

        dwValue = 0U;
 800f776:	2300      	movs	r3, #0
 800f778:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Set new symbol */
        switch (wValue)
 800f77a:	883b      	ldrh	r3, [r7, #0]
 800f77c:	3b01      	subs	r3, #1
 800f77e:	2b06      	cmp	r3, #6
 800f780:	d822      	bhi.n	800f7c8 <phhalHw_Pn5180_SetConfig+0x12f0>
 800f782:	a201      	add	r2, pc, #4	@ (adr r2, 800f788 <phhalHw_Pn5180_SetConfig+0x12b0>)
 800f784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f788:	0800f7a5 	.word	0x0800f7a5
 800f78c:	0800f7ab 	.word	0x0800f7ab
 800f790:	0800f7c9 	.word	0x0800f7c9
 800f794:	0800f7b1 	.word	0x0800f7b1
 800f798:	0800f7b7 	.word	0x0800f7b7
 800f79c:	0800f7bd 	.word	0x0800f7bd
 800f7a0:	0800f7c3 	.word	0x0800f7c3
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_SSOF:
            dwValue = 0x3U;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800f7a8:	e00f      	b.n	800f7ca <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_LSOF:
            dwValue = 0x1U;
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800f7ae:	e00c      	b.n	800f7ca <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CS:
            dwValue = 0x2U;
 800f7b0:	2302      	movs	r3, #2
 800f7b2:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800f7b4:	e009      	b.n	800f7ca <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I15693_SOF:
            dwValue = 0x3U;
 800f7b6:	2303      	movs	r3, #3
 800f7b8:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800f7ba:	e006      	b.n	800f7ca <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_PREAMBLE:
            dwValue = 0x1U;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800f7c0:	e003      	b.n	800f7ca <phhalHw_Pn5180_SetConfig+0x12f2>
        case PHHAL_HW_SYMBOL_I18000P3M3_FSYNC:
            dwValue = 0x2U;
 800f7c2:	2302      	movs	r3, #2
 800f7c4:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800f7c6:	e000      	b.n	800f7ca <phhalHw_Pn5180_SetConfig+0x12f2>
        default:
            break;
 800f7c8:	bf00      	nop
        }

        /*Set the new value  */
        dwTemp = (uint32_t)((dwValue << TX_CONFIG_TX_START_SYMBOL_POS) & TX_CONFIG_TX_START_SYMBOL_MASK);
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7cc:	019b      	lsls	r3, r3, #6
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	60bb      	str	r3, [r7, #8]
        dwTemp |= (uint32_t)((dwValue << TX_CONFIG_TX_DATA_ENABLE_POS) & TX_CONFIG_TX_DATA_ENABLE_MASK);
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d4:	029b      	lsls	r3, r3, #10
 800f7d6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800f7e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f7e6:	3338      	adds	r3, #56	@ 0x38
 800f7e8:	443b      	add	r3, r7
 800f7ea:	2218      	movs	r2, #24
 800f7ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800f7f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f7f6:	3338      	adds	r3, #56	@ 0x38
 800f7f8:	443b      	add	r3, r7
 800f7fa:	2202      	movs	r2, #2
 800f7fc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f804:	1c59      	adds	r1, r3, #1
 800f806:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f808:	b2d2      	uxtb	r2, r2
 800f80a:	3338      	adds	r3, #56	@ 0x38
 800f80c:	443b      	add	r3, r7
 800f80e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	0a1a      	lsrs	r2, r3, #8
 800f816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f818:	1c59      	adds	r1, r3, #1
 800f81a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f81c:	b2d2      	uxtb	r2, r2
 800f81e:	3338      	adds	r3, #56	@ 0x38
 800f820:	443b      	add	r3, r7
 800f822:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	0c1a      	lsrs	r2, r3, #16
 800f82a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f82c:	1c59      	adds	r1, r3, #1
 800f82e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f830:	b2d2      	uxtb	r2, r2
 800f832:	3338      	adds	r3, #56	@ 0x38
 800f834:	443b      	add	r3, r7
 800f836:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	0e1a      	lsrs	r2, r3, #24
 800f83e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f840:	1c59      	adds	r1, r3, #1
 800f842:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f844:	b2d2      	uxtb	r2, r2
 800f846:	3338      	adds	r3, #56	@ 0x38
 800f848:	443b      	add	r3, r7
 800f84a:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800f84e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f850:	f107 030c 	add.w	r3, r7, #12
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f001 fe08 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800f85c:	4603      	mov	r3, r0
 800f85e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f860:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f862:	2b00      	cmp	r3, #0
 800f864:	f000 8265 	beq.w	800fd32 <phhalHw_Pn5180_SetConfig+0x185a>
 800f868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f86a:	e278      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        break;

    case PHHAL_HW_CONFIG_SYMBOL_END:

        /* Parameter check */
        if (pDataParams->bCardType != PHHAL_HW_CARDTYPE_ICODEEPCUID)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f872:	2b05      	cmp	r3, #5
 800f874:	d002      	beq.n	800f87c <phhalHw_Pn5180_SetConfig+0x13a4>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800f876:	f240 2325 	movw	r3, #549	@ 0x225
 800f87a:	e270      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Parameter check #2 */
        switch (wValue)
 800f87c:	883b      	ldrh	r3, [r7, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d004      	beq.n	800f88c <phhalHw_Pn5180_SetConfig+0x13b4>
 800f882:	2b03      	cmp	r3, #3
 800f884:	d002      	beq.n	800f88c <phhalHw_Pn5180_SetConfig+0x13b4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
        case PH_OFF:
            break;
        default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f886:	f240 2321 	movw	r3, #545	@ 0x221
 800f88a:	e268      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
 800f88c:	bf00      	nop
        }

        /* Read out TxFrameCon register */

        /* Set new symbol */
        switch (wValue)
 800f88e:	883b      	ldrh	r3, [r7, #0]
 800f890:	2b03      	cmp	r3, #3
 800f892:	f040 8083 	bne.w	800f99c <phhalHw_Pn5180_SetConfig+0x14c4>
        {
        case PHHAL_HW_SYMBOL_ICODEEPCUID_CEOF:
            wSizeOfRegTypeValueSets = 0U;
 800f896:	2300      	movs	r3, #0
 800f898:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
            dwTemp = (uint32_t) ~( TX_CONFIG_TX_STOP_SYMBOL_MASK );
 800f89a:	f46f 7340 	mvn.w	r3, #768	@ 0x300
 800f89e:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800f8a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8a2:	1c5a      	adds	r2, r3, #1
 800f8a4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f8a6:	3338      	adds	r3, #56	@ 0x38
 800f8a8:	443b      	add	r3, r7
 800f8aa:	2218      	movs	r2, #24
 800f8ac:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800f8b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8b2:	1c5a      	adds	r2, r3, #1
 800f8b4:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f8b6:	3338      	adds	r3, #56	@ 0x38
 800f8b8:	443b      	add	r3, r7
 800f8ba:	2203      	movs	r2, #3
 800f8bc:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8c4:	1c59      	adds	r1, r3, #1
 800f8c6:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f8c8:	b2d2      	uxtb	r2, r2
 800f8ca:	3338      	adds	r3, #56	@ 0x38
 800f8cc:	443b      	add	r3, r7
 800f8ce:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	0a1a      	lsrs	r2, r3, #8
 800f8d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8d8:	1c59      	adds	r1, r3, #1
 800f8da:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f8dc:	b2d2      	uxtb	r2, r2
 800f8de:	3338      	adds	r3, #56	@ 0x38
 800f8e0:	443b      	add	r3, r7
 800f8e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	0c1a      	lsrs	r2, r3, #16
 800f8ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8ec:	1c59      	adds	r1, r3, #1
 800f8ee:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f8f0:	b2d2      	uxtb	r2, r2
 800f8f2:	3338      	adds	r3, #56	@ 0x38
 800f8f4:	443b      	add	r3, r7
 800f8f6:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	0e1a      	lsrs	r2, r3, #24
 800f8fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f900:	1c59      	adds	r1, r3, #1
 800f902:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f904:	b2d2      	uxtb	r2, r2
 800f906:	3338      	adds	r3, #56	@ 0x38
 800f908:	443b      	add	r3, r7
 800f90a:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Set the new value  */
            dwTemp = (uint32_t)((0x0CU << TX_CONFIG_TX_STOP_SYMBOL_POS) & TX_CONFIG_TX_STOP_SYMBOL_MASK);
 800f90e:	2300      	movs	r3, #0
 800f910:	60bb      	str	r3, [r7, #8]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = TX_CONFIG;
 800f912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f914:	1c5a      	adds	r2, r3, #1
 800f916:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f918:	3338      	adds	r3, #56	@ 0x38
 800f91a:	443b      	add	r3, r7
 800f91c:	2218      	movs	r2, #24
 800f91e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800f922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800f928:	3338      	adds	r3, #56	@ 0x38
 800f92a:	443b      	add	r3, r7
 800f92c:	2202      	movs	r2, #2
 800f92e:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f936:	1c59      	adds	r1, r3, #1
 800f938:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f93a:	b2d2      	uxtb	r2, r2
 800f93c:	3338      	adds	r3, #56	@ 0x38
 800f93e:	443b      	add	r3, r7
 800f940:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	0a1a      	lsrs	r2, r3, #8
 800f948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f94a:	1c59      	adds	r1, r3, #1
 800f94c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f94e:	b2d2      	uxtb	r2, r2
 800f950:	3338      	adds	r3, #56	@ 0x38
 800f952:	443b      	add	r3, r7
 800f954:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	0c1a      	lsrs	r2, r3, #16
 800f95c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f95e:	1c59      	adds	r1, r3, #1
 800f960:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f962:	b2d2      	uxtb	r2, r2
 800f964:	3338      	adds	r3, #56	@ 0x38
 800f966:	443b      	add	r3, r7
 800f968:	f803 2c2c 	strb.w	r2, [r3, #-44]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	0e1a      	lsrs	r2, r3, #24
 800f970:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f972:	1c59      	adds	r1, r3, #1
 800f974:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800f976:	b2d2      	uxtb	r2, r2
 800f978:	3338      	adds	r3, #56	@ 0x38
 800f97a:	443b      	add	r3, r7
 800f97c:	f803 2c2c 	strb.w	r2, [r3, #-44]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800f980:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f982:	f107 030c 	add.w	r3, r7, #12
 800f986:	4619      	mov	r1, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f001 fd6f 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800f98e:	4603      	mov	r3, r0
 800f990:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f992:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f994:	2b00      	cmp	r3, #0
 800f996:	d003      	beq.n	800f9a0 <phhalHw_Pn5180_SetConfig+0x14c8>
 800f998:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f99a:	e1e0      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            break;
        default:
            break;
 800f99c:	bf00      	nop
 800f99e:	e1dd      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
            break;
 800f9a0:	bf00      	nop
        }

        break;
 800f9a2:	e1db      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_CRCTYPE:

        if(!(wValue & (PHHAL_HW_CRCTYPE_CRC5 | PHHAL_HW_CRCTYPE_CRC16 | PHHAL_HW_CRCOPTION_INVERTED)))
 800f9a4:	883a      	ldrh	r2, [r7, #0]
 800f9a6:	f240 1303 	movw	r3, #259	@ 0x103
 800f9aa:	4013      	ands	r3, r2
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d102      	bne.n	800f9b6 <phhalHw_Pn5180_SetConfig+0x14de>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800f9b0:	f240 2321 	movw	r3, #545	@ 0x221
 800f9b4:	e1d3      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

        /* in case of 18000P3M3 for CRC5 calculation we need preset value of 9 which is not supported by
        * So flag is enable to perform software calculation of CRC5 in Pn5180 HAL
        */

        dwValue = 0U;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	633b      	str	r3, [r7, #48]	@ 0x30
        /*dwRegister will contain all the bits that need to be zeroed out*/
        dwRegister = 0U;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if((0U != ((wValue & PHHAL_HW_CRCTYPE_CRC5))) && (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3))
 800f9be:	883b      	ldrh	r3, [r7, #0]
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d015      	beq.n	800f9f4 <phhalHw_Pn5180_SetConfig+0x151c>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9ce:	2b06      	cmp	r3, #6
 800f9d0:	d110      	bne.n	800f9f4 <phhalHw_Pn5180_SetConfig+0x151c>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d4:	f043 0304 	orr.w	r3, r3, #4
 800f9d8:	633b      	str	r3, [r7, #48]	@ 0x30
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800f9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9dc:	f043 0302 	orr.w	r3, r3, #2
 800f9e0:	637b      	str	r3, [r7, #52]	@ 0x34
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800f9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9e4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800f9e8:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x5U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ec:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800f9f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f9f2:	e008      	b.n	800fa06 <phhalHw_Pn5180_SetConfig+0x152e>
        }
        else if(0U != (wValue & PHHAL_HW_CRCTYPE_CRC16))
 800f9f4:	883b      	ldrh	r3, [r7, #0]
 800f9f6:	f003 0302 	and.w	r3, r3, #2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d003      	beq.n	800fa06 <phhalHw_Pn5180_SetConfig+0x152e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 800f9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa00:	f043 0304 	orr.w	r3, r3, #4
 800fa04:	637b      	str	r3, [r7, #52]	@ 0x34
        else
        {
            /* QAC */
        }

        if(0U != (wValue & PHHAL_HW_CRCOPTION_INVERTED))
 800fa06:	883b      	ldrh	r3, [r7, #0]
 800fa08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d004      	beq.n	800fa1a <phhalHw_Pn5180_SetConfig+0x1542>
        {
            dwValue |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800fa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa12:	f043 0302 	orr.w	r3, r3, #2
 800fa16:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa18:	e003      	b.n	800fa22 <phhalHw_Pn5180_SetConfig+0x154a>
        }
        else
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_INV_MASK;
 800fa1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa1c:	f043 0302 	orr.w	r3, r3, #2
 800fa20:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if ((pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3) && (0U != ((wValue & PHHAL_HW_CRCTYPE_CRC16))))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fa28:	2b06      	cmp	r3, #6
 800fa2a:	d10c      	bne.n	800fa46 <phhalHw_Pn5180_SetConfig+0x156e>
 800fa2c:	883b      	ldrh	r3, [r7, #0]
 800fa2e:	f003 0302 	and.w	r3, r3, #2
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d007      	beq.n	800fa46 <phhalHw_Pn5180_SetConfig+0x156e>
        {
            dwRegister |= CRC_TX_CONFIG_TX_CRC_PRESET_SEL_MASK;
 800fa36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa38:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800fa3c:	637b      	str	r3, [r7, #52]	@ 0x34
            dwValue |= (0x3U << CRC_TX_CONFIG_TX_CRC_PRESET_SEL_POS);
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa40:	f043 0318 	orr.w	r3, r3, #24
 800fa44:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        wSizeOfRegTypeValueSets = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	84bb      	strh	r3, [r7, #36]	@ 0x24

        /*Clear the Bits */
        dwTemp = (uint32_t) ~( dwRegister );
 800fa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa4c:	43db      	mvns	r3, r3
 800fa4e:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800fa50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa52:	1c5a      	adds	r2, r3, #1
 800fa54:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fa56:	3338      	adds	r3, #56	@ 0x38
 800fa58:	443b      	add	r3, r7
 800fa5a:	2219      	movs	r2, #25
 800fa5c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 800fa60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fa66:	3338      	adds	r3, #56	@ 0x38
 800fa68:	443b      	add	r3, r7
 800fa6a:	2203      	movs	r2, #3
 800fa6c:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa74:	1c59      	adds	r1, r3, #1
 800fa76:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fa78:	b2d2      	uxtb	r2, r2
 800fa7a:	3338      	adds	r3, #56	@ 0x38
 800fa7c:	443b      	add	r3, r7
 800fa7e:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	0a1a      	lsrs	r2, r3, #8
 800fa86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa88:	1c59      	adds	r1, r3, #1
 800fa8a:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fa8c:	b2d2      	uxtb	r2, r2
 800fa8e:	3338      	adds	r3, #56	@ 0x38
 800fa90:	443b      	add	r3, r7
 800fa92:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	0c1a      	lsrs	r2, r3, #16
 800fa9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa9c:	1c59      	adds	r1, r3, #1
 800fa9e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800faa0:	b2d2      	uxtb	r2, r2
 800faa2:	3338      	adds	r3, #56	@ 0x38
 800faa4:	443b      	add	r3, r7
 800faa6:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	0e1a      	lsrs	r2, r3, #24
 800faae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fab0:	1c59      	adds	r1, r3, #1
 800fab2:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fab4:	b2d2      	uxtb	r2, r2
 800fab6:	3338      	adds	r3, #56	@ 0x38
 800fab8:	443b      	add	r3, r7
 800faba:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Set the new value  */
        dwTemp = dwValue;
 800fabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac0:	60bb      	str	r3, [r7, #8]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 800fac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fac4:	1c5a      	adds	r2, r3, #1
 800fac6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fac8:	3338      	adds	r3, #56	@ 0x38
 800faca:	443b      	add	r3, r7
 800facc:	2219      	movs	r2, #25
 800face:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 800fad2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	84ba      	strh	r2, [r7, #36]	@ 0x24
 800fad8:	3338      	adds	r3, #56	@ 0x38
 800fada:	443b      	add	r3, r7
 800fadc:	2202      	movs	r2, #2
 800fade:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 800fae2:	68ba      	ldr	r2, [r7, #8]
 800fae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fae6:	1c59      	adds	r1, r3, #1
 800fae8:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800faea:	b2d2      	uxtb	r2, r2
 800faec:	3338      	adds	r3, #56	@ 0x38
 800faee:	443b      	add	r3, r7
 800faf0:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	0a1a      	lsrs	r2, r3, #8
 800faf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fafa:	1c59      	adds	r1, r3, #1
 800fafc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fafe:	b2d2      	uxtb	r2, r2
 800fb00:	3338      	adds	r3, #56	@ 0x38
 800fb02:	443b      	add	r3, r7
 800fb04:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	0c1a      	lsrs	r2, r3, #16
 800fb0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb0e:	1c59      	adds	r1, r3, #1
 800fb10:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fb12:	b2d2      	uxtb	r2, r2
 800fb14:	3338      	adds	r3, #56	@ 0x38
 800fb16:	443b      	add	r3, r7
 800fb18:	f803 2c2c 	strb.w	r2, [r3, #-44]
        wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	0e1a      	lsrs	r2, r3, #24
 800fb20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb22:	1c59      	adds	r1, r3, #1
 800fb24:	84b9      	strh	r1, [r7, #36]	@ 0x24
 800fb26:	b2d2      	uxtb	r2, r2
 800fb28:	3338      	adds	r3, #56	@ 0x38
 800fb2a:	443b      	add	r3, r7
 800fb2c:	f803 2c2c 	strb.w	r2, [r3, #-44]

        /*Send the array to the IC*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 800fb30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fb32:	f107 030c 	add.w	r3, r7, #12
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f001 fc97 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fb42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 80f6 	beq.w	800fd36 <phhalHw_Pn5180_SetConfig+0x185e>
 800fb4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb4c:	e107      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>

        break;

    case PHHAL_HW_CONFIG_MFHALTED:
        if((wValue != PH_ON) && (wValue != PH_OFF))
 800fb4e:	883b      	ldrh	r3, [r7, #0]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d005      	beq.n	800fb60 <phhalHw_Pn5180_SetConfig+0x1688>
 800fb54:	883b      	ldrh	r3, [r7, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d002      	beq.n	800fb60 <phhalHw_Pn5180_SetConfig+0x1688>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 800fb5a:	f240 2321 	movw	r3, #545	@ 0x221
 800fb5e:	e0fe      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        if(wValue == PH_ON)
 800fb60:	883b      	ldrh	r3, [r7, #0]
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d111      	bne.n	800fb8a <phhalHw_Pn5180_SetConfig+0x16b2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800fb66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f001 fb91 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 800fb72:	4603      	mov	r3, r0
 800fb74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fb76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <phhalHw_Pn5180_SetConfig+0x16a8>
 800fb7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb7e:	e0ee      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, SYSTEM_CONFIG, SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
           pDataParams->bCardMode  = PH_ON;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            PH_CHECK_SUCCESS_FCT(statusTmp,
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, SYSTEM_CONFIG, (uint32_t)~SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK));
            pDataParams->bCardMode  = PH_OFF;

        }
        break;
 800fb88:	e0e8      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
            PH_CHECK_SUCCESS_FCT(statusTmp,
 800fb8a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800fb8e:	2100      	movs	r1, #0
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f001 fbf5 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 800fb96:	4603      	mov	r3, r0
 800fb98:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fb9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <phhalHw_Pn5180_SetConfig+0x16cc>
 800fba0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fba2:	e0dc      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            pDataParams->bCardMode  = PH_OFF;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        break;
 800fbac:	e0d6      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>

    case PHHAL_HW_CONFIG_POLL_GUARD_TIME_US:
        /* Disable Poll guard time. */
        if (wValue == 0x00U)
 800fbae:	883b      	ldrh	r3, [r7, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d101      	bne.n	800fbb8 <phhalHw_Pn5180_SetConfig+0x16e0>
        {
            return PH_ERR_SUCCESS;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	e0d2      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }
        pDataParams->bPollGuardTimeFlag = PH_ON;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2201      	movs	r2, #1
 800fbbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        phOsal_EventClear(&xEventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_GT_EXP, NULL);
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	4868      	ldr	r0, [pc, #416]	@ (800fd68 <phhalHw_Pn5180_SetConfig+0x1890>)
 800fbc8:	f009 fa38 	bl	801903c <phOsal_EventClear>
        PH_CHECK_SUCCESS_FCT(statusTmp, phDriver_TimerStart(PH_DRIVER_TIMER_MICRO_SECS, wValue,
 800fbcc:	883b      	ldrh	r3, [r7, #0]
 800fbce:	4a67      	ldr	r2, [pc, #412]	@ (800fd6c <phhalHw_Pn5180_SetConfig+0x1894>)
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	4867      	ldr	r0, [pc, #412]	@ (800fd70 <phhalHw_Pn5180_SetConfig+0x1898>)
 800fbd4:	f009 f886 	bl	8018ce4 <phDriver_TimerStart>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fbdc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 80ab 	beq.w	800fd3a <phhalHw_Pn5180_SetConfig+0x1862>
 800fbe4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fbe6:	e0ba      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                phhalHw_Pn5180_GuardTimeCallBck));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD:
        if ((wValue == PH_ON) && (pDataParams->bOpeMode != RD_LIB_MODE_FELICA))
 800fbe8:	883b      	ldrh	r3, [r7, #0]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d107      	bne.n	800fbfe <phhalHw_Pn5180_SetConfig+0x1726>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fbf4:	2b04      	cmp	r3, #4
 800fbf6:	d002      	beq.n	800fbfe <phhalHw_Pn5180_SetConfig+0x1726>
        {
            /* Before Setting FELICA_EMD bit, OpeMode need to be configured to RD_LIB_MODE_FELICA */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_HAL);
 800fbf8:	f240 2325 	movw	r3, #549	@ 0x225
 800fbfc:	e0af      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        }

        /* Configure FeliCa EMD enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fbfe:	883b      	ldrh	r3, [r7, #0]
 800fc00:	2201      	movs	r2, #1
 800fc02:	4619      	mov	r1, r3
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f002 fe9b 	bl	8012940 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 8094 	beq.w	800fd3e <phhalHw_Pn5180_SetConfig+0x1866>
 800fc16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc18:	e0a1      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_CHECK:
        /* Configure EMD length byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fc1a:	883b      	ldrh	r3, [r7, #0]
 800fc1c:	2202      	movs	r2, #2
 800fc1e:	4619      	mov	r1, r3
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f002 fe8d 	bl	8012940 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800fc26:	4603      	mov	r3, r0
 800fc28:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f000 8088 	beq.w	800fd42 <phhalHw_Pn5180_SetConfig+0x186a>
 800fc32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc34:	e093      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LEN_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_CHECK:
        /* Configure RC byte check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fc36:	883b      	ldrh	r3, [r7, #0]
 800fc38:	2204      	movs	r2, #4
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f002 fe7f 	bl	8012940 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800fc42:	4603      	mov	r3, r0
 800fc44:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d07c      	beq.n	800fd46 <phhalHw_Pn5180_SetConfig+0x186e>
 800fc4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc4e:	e086      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_PROTOCOL_ERR_CHECK:
        /* Configure Protocol error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fc50:	883b      	ldrh	r3, [r7, #0]
 800fc52:	2208      	movs	r2, #8
 800fc54:	4619      	mov	r1, r3
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f002 fe72 	bl	8012940 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d071      	beq.n	800fd4a <phhalHw_Pn5180_SetConfig+0x1872>
 800fc66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc68:	e079      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_PROTOCOL_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_INTEGRITY_ERR_CHECK:
        /* Configure Integrity error check enable bit in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fc6a:	883b      	ldrh	r3, [r7, #0]
 800fc6c:	2210      	movs	r2, #16
 800fc6e:	4619      	mov	r1, r3
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f002 fe65 	bl	8012940 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>
 800fc76:	4603      	mov	r3, r0
 800fc78:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d066      	beq.n	800fd4e <phhalHw_Pn5180_SetConfig+0x1876>
 800fc80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc82:	e06c      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
            phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(pDataParams, wValue, (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_INTEGRITY_ERR_CHECK_ENABLE_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MIN:
        /* Configure min length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fc84:	8839      	ldrh	r1, [r7, #0]
 800fc86:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800fc8a:	2208      	movs	r2, #8
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f002 fea3 	bl	80129d8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800fc92:	4603      	mov	r3, r0
 800fc94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fc96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d05a      	beq.n	800fd52 <phhalHw_Pn5180_SetConfig+0x187a>
 800fc9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fc9e:	e05e      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MIN_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_LEN_BYTE_MAX:
        /* Configure max length byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fca0:	8839      	ldrh	r1, [r7, #0]
 800fca2:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800fca6:	2210      	movs	r2, #16
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f002 fe95 	bl	80129d8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fcb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d04e      	beq.n	800fd56 <phhalHw_Pn5180_SetConfig+0x187e>
 800fcb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fcba:	e050      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_LENGTH_BYTE_MAX_MASK));
        break;

    case PHHAL_HW_PN5180_CONFIG_SET_FELICA_EMD_RC_BYTE_VAL:
        /* Configure RC byte value in FELICA_EMD_CONTROL Register and shadow register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 800fcbc:	8839      	ldrh	r1, [r7, #0]
 800fcbe:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800fcc2:	2218      	movs	r2, #24
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f002 fe87 	bl	80129d8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>
 800fcca:	4603      	mov	r3, r0
 800fccc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fcce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d042      	beq.n	800fd5a <phhalHw_Pn5180_SetConfig+0x1882>
 800fcd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fcd6:	e042      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
                (uint8_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_POS,
                (uint32_t)FELICA_EMD_CONTROL_FELICA_EMD_RC_BYTE_VALUE_MASK));
        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 800fcd8:	f240 2323 	movw	r3, #547	@ 0x223
 800fcdc:	e03f      	b.n	800fd5e <phhalHw_Pn5180_SetConfig+0x1886>
        break;
 800fcde:	bf00      	nop
 800fce0:	e03c      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fce2:	bf00      	nop
 800fce4:	e03a      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fce6:	bf00      	nop
 800fce8:	e038      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fcea:	bf00      	nop
 800fcec:	e036      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fcee:	bf00      	nop
 800fcf0:	e034      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fcf2:	bf00      	nop
 800fcf4:	e032      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fcf6:	bf00      	nop
 800fcf8:	e030      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fcfa:	bf00      	nop
 800fcfc:	e02e      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fcfe:	bf00      	nop
 800fd00:	e02c      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd02:	bf00      	nop
 800fd04:	e02a      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd06:	bf00      	nop
 800fd08:	e028      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd0a:	bf00      	nop
 800fd0c:	e026      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd0e:	bf00      	nop
 800fd10:	e024      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd12:	bf00      	nop
 800fd14:	e022      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd16:	bf00      	nop
 800fd18:	e020      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd1a:	bf00      	nop
 800fd1c:	e01e      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd1e:	bf00      	nop
 800fd20:	e01c      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd22:	bf00      	nop
 800fd24:	e01a      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd26:	bf00      	nop
 800fd28:	e018      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd2a:	bf00      	nop
 800fd2c:	e016      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd2e:	bf00      	nop
 800fd30:	e014      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd32:	bf00      	nop
 800fd34:	e012      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd36:	bf00      	nop
 800fd38:	e010      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd3a:	bf00      	nop
 800fd3c:	e00e      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd3e:	bf00      	nop
 800fd40:	e00c      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd42:	bf00      	nop
 800fd44:	e00a      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd46:	bf00      	nop
 800fd48:	e008      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd4a:	bf00      	nop
 800fd4c:	e006      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd4e:	bf00      	nop
 800fd50:	e004      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd52:	bf00      	nop
 800fd54:	e002      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd56:	bf00      	nop
 800fd58:	e000      	b.n	800fd5c <phhalHw_Pn5180_SetConfig+0x1884>
        break;
 800fd5a:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 800fd5c:	2300      	movs	r3, #0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3738      	adds	r7, #56	@ 0x38
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bdb0      	pop	{r4, r5, r7, pc}
 800fd66:	bf00      	nop
 800fd68:	20001870 	.word	0x20001870
 800fd6c:	0800d5f5 	.word	0x0800d5f5
 800fd70:	000f4240 	.word	0x000f4240

0800fd74 <phhalHw_Pn5180_GetConfig>:
phStatus_t phhalHw_Pn5180_GetConfig(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t * pValue
    )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08a      	sub	sp, #40	@ 0x28
 800fd78:	af02      	add	r7, sp, #8
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pBuffer = NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wBufferLen = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wBufferSize;
    uint32_t    PH_MEMLOC_REM dwRegister;

    /* Check all the pointers */
    PH_ASSERT_NULL(pValue);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <phhalHw_Pn5180_GetConfig+0x20>
 800fd90:	2321      	movs	r3, #33	@ 0x21
 800fd92:	e281      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>

    switch(wConfig)
 800fd94:	897b      	ldrh	r3, [r7, #10]
 800fd96:	f248 0250 	movw	r2, #32848	@ 0x8050
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	f000 817f 	beq.w	801009e <phhalHw_Pn5180_GetConfig+0x32a>
 800fda0:	f248 0250 	movw	r2, #32848	@ 0x8050
 800fda4:	4293      	cmp	r3, r2
 800fda6:	f300 8273 	bgt.w	8010290 <phhalHw_Pn5180_GetConfig+0x51c>
 800fdaa:	f248 0212 	movw	r2, #32786	@ 0x8012
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	f000 814c 	beq.w	801004c <phhalHw_Pn5180_GetConfig+0x2d8>
 800fdb4:	f248 0212 	movw	r2, #32786	@ 0x8012
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	f300 8269 	bgt.w	8010290 <phhalHw_Pn5180_GetConfig+0x51c>
 800fdbe:	f248 0211 	movw	r2, #32785	@ 0x8011
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	f000 8131 	beq.w	801002a <phhalHw_Pn5180_GetConfig+0x2b6>
 800fdc8:	f248 0211 	movw	r2, #32785	@ 0x8011
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	f300 825f 	bgt.w	8010290 <phhalHw_Pn5180_GetConfig+0x51c>
 800fdd2:	2b5f      	cmp	r3, #95	@ 0x5f
 800fdd4:	f300 80ca 	bgt.w	800ff6c <phhalHw_Pn5180_GetConfig+0x1f8>
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f2c0 8259 	blt.w	8010290 <phhalHw_Pn5180_GetConfig+0x51c>
 800fdde:	2b5f      	cmp	r3, #95	@ 0x5f
 800fde0:	f200 8256 	bhi.w	8010290 <phhalHw_Pn5180_GetConfig+0x51c>
 800fde4:	a201      	add	r2, pc, #4	@ (adr r2, 800fdec <phhalHw_Pn5180_GetConfig+0x78>)
 800fde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdea:	bf00      	nop
 800fdec:	0800ff93 	.word	0x0800ff93
 800fdf0:	0800ff93 	.word	0x0800ff93
 800fdf4:	0800ff93 	.word	0x0800ff93
 800fdf8:	0800ff93 	.word	0x0800ff93
 800fdfc:	0800ffa3 	.word	0x0800ffa3
 800fe00:	08010291 	.word	0x08010291
 800fe04:	0800ff93 	.word	0x0800ff93
 800fe08:	0800ff93 	.word	0x0800ff93
 800fe0c:	0800ff93 	.word	0x0800ff93
 800fe10:	0800ff93 	.word	0x0800ff93
 800fe14:	0800ff93 	.word	0x0800ff93
 800fe18:	0800ff93 	.word	0x0800ff93
 800fe1c:	0800ff93 	.word	0x0800ff93
 800fe20:	0800ffad 	.word	0x0800ffad
 800fe24:	0800fff1 	.word	0x0800fff1
 800fe28:	0800ff93 	.word	0x0800ff93
 800fe2c:	08010291 	.word	0x08010291
 800fe30:	08010291 	.word	0x08010291
 800fe34:	08010291 	.word	0x08010291
 800fe38:	0801007d 	.word	0x0801007d
 800fe3c:	08010087 	.word	0x08010087
 800fe40:	08010291 	.word	0x08010291
 800fe44:	08010291 	.word	0x08010291
 800fe48:	08010291 	.word	0x08010291
 800fe4c:	08010291 	.word	0x08010291
 800fe50:	08010291 	.word	0x08010291
 800fe54:	08010291 	.word	0x08010291
 800fe58:	08010291 	.word	0x08010291
 800fe5c:	08010291 	.word	0x08010291
 800fe60:	08010291 	.word	0x08010291
 800fe64:	08010291 	.word	0x08010291
 800fe68:	08010291 	.word	0x08010291
 800fe6c:	08010091 	.word	0x08010091
 800fe70:	08010245 	.word	0x08010245
 800fe74:	08010291 	.word	0x08010291
 800fe78:	08010291 	.word	0x08010291
 800fe7c:	08010291 	.word	0x08010291
 800fe80:	08010291 	.word	0x08010291
 800fe84:	08010291 	.word	0x08010291
 800fe88:	08010291 	.word	0x08010291
 800fe8c:	08010291 	.word	0x08010291
 800fe90:	08010291 	.word	0x08010291
 800fe94:	08010291 	.word	0x08010291
 800fe98:	08010291 	.word	0x08010291
 800fe9c:	08010291 	.word	0x08010291
 800fea0:	08010291 	.word	0x08010291
 800fea4:	080100ad 	.word	0x080100ad
 800fea8:	0800ffa3 	.word	0x0800ffa3
 800feac:	080100c7 	.word	0x080100c7
 800feb0:	080100d1 	.word	0x080100d1
 800feb4:	080100ff 	.word	0x080100ff
 800feb8:	0801012d 	.word	0x0801012d
 800febc:	0801015b 	.word	0x0801015b
 800fec0:	08010291 	.word	0x08010291
 800fec4:	08010291 	.word	0x08010291
 800fec8:	08010291 	.word	0x08010291
 800fecc:	08010291 	.word	0x08010291
 800fed0:	08010291 	.word	0x08010291
 800fed4:	08010291 	.word	0x08010291
 800fed8:	08010291 	.word	0x08010291
 800fedc:	08010291 	.word	0x08010291
 800fee0:	08010291 	.word	0x08010291
 800fee4:	08010291 	.word	0x08010291
 800fee8:	08010291 	.word	0x08010291
 800feec:	08010291 	.word	0x08010291
 800fef0:	08010291 	.word	0x08010291
 800fef4:	08010291 	.word	0x08010291
 800fef8:	08010291 	.word	0x08010291
 800fefc:	08010291 	.word	0x08010291
 800ff00:	08010291 	.word	0x08010291
 800ff04:	08010291 	.word	0x08010291
 800ff08:	08010291 	.word	0x08010291
 800ff0c:	08010291 	.word	0x08010291
 800ff10:	08010291 	.word	0x08010291
 800ff14:	08010291 	.word	0x08010291
 800ff18:	08010291 	.word	0x08010291
 800ff1c:	08010291 	.word	0x08010291
 800ff20:	08010291 	.word	0x08010291
 800ff24:	08010291 	.word	0x08010291
 800ff28:	08010291 	.word	0x08010291
 800ff2c:	08010291 	.word	0x08010291
 800ff30:	08010291 	.word	0x08010291
 800ff34:	080101d9 	.word	0x080101d9
 800ff38:	080101a5 	.word	0x080101a5
 800ff3c:	080101cb 	.word	0x080101cb
 800ff40:	0801020f 	.word	0x0801020f
 800ff44:	08010291 	.word	0x08010291
 800ff48:	08010291 	.word	0x08010291
 800ff4c:	08010291 	.word	0x08010291
 800ff50:	080101c1 	.word	0x080101c1
 800ff54:	0800ff77 	.word	0x0800ff77
 800ff58:	08010291 	.word	0x08010291
 800ff5c:	080101b3 	.word	0x080101b3
 800ff60:	08010291 	.word	0x08010291
 800ff64:	0800ff85 	.word	0x0800ff85
 800ff68:	08010253 	.word	0x08010253
 800ff6c:	f248 0210 	movw	r2, #32784	@ 0x8010
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d055      	beq.n	8010020 <phhalHw_Pn5180_GetConfig+0x2ac>
 800ff74:	e18c      	b.n	8010290 <phhalHw_Pn5180_GetConfig+0x51c>
    {

    case PHHAL_HW_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	801a      	strh	r2, [r3, #0]
        break;
 800ff82:	e188      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_SET_EMD:
        *pValue = pDataParams->bEmdFlag;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	801a      	strh	r2, [r3, #0]
        break;
 800ff90:	e181      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_SUBCARRIER:
    case PHHAL_HW_CONFIG_TXWAIT_US:
    case PHHAL_HW_CONFIG_RXWAIT_US:

        /* Read config from shadow */
        *pValue = pDataParams->wCfgShadow[wConfig];
 800ff92:	897a      	ldrh	r2, [r7, #10]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	322c      	adds	r2, #44	@ 0x2c
 800ff98:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	801a      	strh	r2, [r3, #0]
        break;
 800ffa0:	e179      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_OFFSET:
    case PHHAL_HW_CONFIG_RXLASTBITS:

        *pValue = pDataParams->wAdditionalInfo;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	801a      	strh	r2, [r3, #0]
        break;
 800ffaa:	e174      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_US:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MICROSECONDS)
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d107      	bne.n	800ffc6 <phhalHw_Pn5180_GetConfig+0x252>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800ffb6:	897a      	ldrh	r2, [r7, #10]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	322c      	adds	r2, #44	@ 0x2c
 800ffbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	801a      	strh	r2, [r3, #0]
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
            }
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
        }
        break;
 800ffc4:	e167      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
            if (pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] > (0xFFFFU / 1000U))
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ffcc:	2b41      	cmp	r3, #65	@ 0x41
 800ffce:	d902      	bls.n	800ffd6 <phhalHw_Pn5180_GetConfig+0x262>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 800ffd0:	f240 2322 	movw	r3, #546	@ 0x222
 800ffd4:	e160      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS] * 1000U;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ffdc:	461a      	mov	r2, r3
 800ffde:	0152      	lsls	r2, r2, #5
 800ffe0:	1ad2      	subs	r2, r2, r3
 800ffe2:	0092      	lsls	r2, r2, #2
 800ffe4:	4413      	add	r3, r2
 800ffe6:	00db      	lsls	r3, r3, #3
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	801a      	strh	r2, [r3, #0]
        break;
 800ffee:	e152      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS:

        if (pDataParams->bTimeoutUnit == PHHAL_HW_TIME_MILLISECONDS)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d107      	bne.n	801000a <phhalHw_Pn5180_GetConfig+0x296>
        {
            *pValue = pDataParams->wCfgShadow[wConfig];
 800fffa:	897a      	ldrh	r2, [r7, #10]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	322c      	adds	r2, #44	@ 0x2c
 8010000:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
        }
        break;
 8010008:	e145      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TIMEOUT_VALUE_US] / 1000U;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010010:	4a9b      	ldr	r2, [pc, #620]	@ (8010280 <phhalHw_Pn5180_GetConfig+0x50c>)
 8010012:	fba2 2303 	umull	r2, r3, r2, r3
 8010016:	099b      	lsrs	r3, r3, #6
 8010018:	b29a      	uxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	801a      	strh	r2, [r3, #0]
        break;
 801001e:	e13a      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MODE:

        *pValue = pDataParams->wTimingMode;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	801a      	strh	r2, [r3, #0]
        break;
 8010028:	e135      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_US:

        if (pDataParams->dwTimingUs > 0xFFFFU)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6a1b      	ldr	r3, [r3, #32]
 801002e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010032:	d302      	bcc.n	801003a <phhalHw_Pn5180_GetConfig+0x2c6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8010034:	f240 2322 	movw	r3, #546	@ 0x222
 8010038:	e12e      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)pDataParams->dwTimingUs;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6a1b      	ldr	r3, [r3, #32]
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2200      	movs	r2, #0
 8010048:	621a      	str	r2, [r3, #32]
        break;
 801004a:	e124      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TIMING_MS:

        if (pDataParams->dwTimingUs > (0xFFFFU * 1000U))
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6a1b      	ldr	r3, [r3, #32]
 8010050:	4a8c      	ldr	r2, [pc, #560]	@ (8010284 <phhalHw_Pn5180_GetConfig+0x510>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d905      	bls.n	8010062 <phhalHw_Pn5180_GetConfig+0x2ee>
        {
            pDataParams->dwTimingUs = 0U;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	621a      	str	r2, [r3, #32]
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 801005c:	f240 2322 	movw	r3, #546	@ 0x222
 8010060:	e11a      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
        }

        *pValue = (uint16_t)(pDataParams->dwTimingUs / 1000U);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	6a1b      	ldr	r3, [r3, #32]
 8010066:	4a86      	ldr	r2, [pc, #536]	@ (8010280 <phhalHw_Pn5180_GetConfig+0x50c>)
 8010068:	fba2 2303 	umull	r2, r3, r2, r3
 801006c:	099b      	lsrs	r3, r3, #6
 801006e:	b29a      	uxth	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	801a      	strh	r2, [r3, #0]
        pDataParams->dwTimingUs = 0U;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	621a      	str	r2, [r3, #32]
        break;
 801007a:	e10c      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_OFF_TIME:

        *pValue = pDataParams->wFieldOffTime;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	801a      	strh	r2, [r3, #0]
        break;
 8010084:	e107      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_FIELD_RECOVERY_TIME:

        *pValue = pDataParams->wFieldRecoveryTime;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	801a      	strh	r2, [r3, #0]
        break;
 801008e:	e102      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_JEWEL_MODE:

        /* Write configuration data into shadow */
        *pValue = pDataParams->bJewelActivated;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010096:	461a      	mov	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	801a      	strh	r2, [r3, #0]
        break;
 801009c:	e0fb      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RFRESET_ON_TIMEOUT:

        *pValue = pDataParams->bRfResetAfterTo;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80100a4:	461a      	mov	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	801a      	strh	r2, [r3, #0]
        break;
 80100aa:	e0f4      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1:

        /* Check Crypto1On Status */
        if ( pDataParams->bMfcCryptoEnabled == PH_ON)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d103      	bne.n	80100be <phhalHw_Pn5180_GetConfig+0x34a>
        {
            *pValue = PH_OFF; /* OFF in this case means "Crypto1 not disabled --> enabled" */
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
        }
        break;
 80100bc:	e0eb      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_ON; /* ON in this case means "Crypto1 is disabled" */
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2201      	movs	r2, #1
 80100c2:	801a      	strh	r2, [r3, #0]
        break;
 80100c4:	e0e7      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_STARTPOS:

        /* Return parameter */
        *pValue = pDataParams->wRxBufStartPos;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	8bda      	ldrh	r2, [r3, #30]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	801a      	strh	r2, [r3, #0]
        break;
 80100ce:	e0e2      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXBUFFER_BUFSIZE:

        /* Retrieve RxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80100d0:	f107 0116 	add.w	r1, r7, #22
 80100d4:	f107 0218 	add.w	r2, r7, #24
 80100d8:	f107 0314 	add.w	r3, r7, #20
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	460b      	mov	r3, r1
 80100e0:	2101      	movs	r1, #1
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f002 f86d 	bl	80121c2 <phhalHw_Pn5180_GetRxBuffer>
 80100e8:	4603      	mov	r3, r0
 80100ea:	83fb      	strh	r3, [r7, #30]
 80100ec:	8bfb      	ldrh	r3, [r7, #30]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <phhalHw_Pn5180_GetConfig+0x382>
 80100f2:	8bfb      	ldrh	r3, [r7, #30]
 80100f4:	e0d0      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 80100f6:	8aba      	ldrh	r2, [r7, #20]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	801a      	strh	r2, [r3, #0]
        break;
 80100fc:	e0cb      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_BUFSIZE:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 80100fe:	f107 0116 	add.w	r1, r7, #22
 8010102:	f107 0218 	add.w	r2, r7, #24
 8010106:	f107 0314 	add.w	r3, r7, #20
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	460b      	mov	r3, r1
 801010e:	2101      	movs	r1, #1
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f002 f81a 	bl	801214a <phhalHw_Pn5180_GetTxBuffer>
 8010116:	4603      	mov	r3, r0
 8010118:	83fb      	strh	r3, [r7, #30]
 801011a:	8bfb      	ldrh	r3, [r7, #30]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <phhalHw_Pn5180_GetConfig+0x3b0>
 8010120:	8bfb      	ldrh	r3, [r7, #30]
 8010122:	e0b9      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferSize;
 8010124:	8aba      	ldrh	r2, [r7, #20]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	801a      	strh	r2, [r3, #0]
        break;
 801012a:	e0b4      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER_LENGTH:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 801012c:	f107 0116 	add.w	r1, r7, #22
 8010130:	f107 0218 	add.w	r2, r7, #24
 8010134:	f107 0314 	add.w	r3, r7, #20
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	460b      	mov	r3, r1
 801013c:	2101      	movs	r1, #1
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f002 f803 	bl	801214a <phhalHw_Pn5180_GetTxBuffer>
 8010144:	4603      	mov	r3, r0
 8010146:	83fb      	strh	r3, [r7, #30]
 8010148:	8bfb      	ldrh	r3, [r7, #30]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <phhalHw_Pn5180_GetConfig+0x3de>
 801014e:	8bfb      	ldrh	r3, [r7, #30]
 8010150:	e0a2      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>

        /* Return parameter */
        *pValue = wBufferLen;
 8010152:	8afa      	ldrh	r2, [r7, #22]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	801a      	strh	r2, [r3, #0]
        break;
 8010158:	e09d      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TXBUFFER:

        /* Retrieve TxBuffer parameters */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetTxBuffer(pDataParams, PH_ON, &pBuffer, &wBufferLen, &wBufferSize));
 801015a:	f107 0116 	add.w	r1, r7, #22
 801015e:	f107 0218 	add.w	r2, r7, #24
 8010162:	f107 0314 	add.w	r3, r7, #20
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	460b      	mov	r3, r1
 801016a:	2101      	movs	r1, #1
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f001 ffec 	bl	801214a <phhalHw_Pn5180_GetTxBuffer>
 8010172:	4603      	mov	r3, r0
 8010174:	83fb      	strh	r3, [r7, #30]
 8010176:	8bfb      	ldrh	r3, [r7, #30]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d001      	beq.n	8010180 <phhalHw_Pn5180_GetConfig+0x40c>
 801017c:	8bfb      	ldrh	r3, [r7, #30]
 801017e:	e08b      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>

        /* Check additional info parameter */
        if (pDataParams->wAdditionalInfo >= pDataParams->wTxBufSize)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	8a1b      	ldrh	r3, [r3, #16]
 8010188:	429a      	cmp	r2, r3
 801018a:	d302      	bcc.n	8010192 <phhalHw_Pn5180_GetConfig+0x41e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801018c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8010190:	e082      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
        }

        /* Retrieve TxBuffer byte */
        *pValue = (uint16_t)pBuffer[pDataParams->wAdditionalInfo];
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	68fa      	ldr	r2, [r7, #12]
 8010196:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8010198:	4413      	add	r3, r2
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	461a      	mov	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	801a      	strh	r2, [r3, #0]
        break;
 80101a2:	e078      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_RXMULTIPLE:
        *pValue =  pDataParams->bRxMultiple;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101aa:	461a      	mov	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	801a      	strh	r2, [r3, #0]
        break;
 80101b0:	e071      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_NFCIP_STARTBYTE:
        *pValue = pDataParams->bNfcipMode;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80101b8:	461a      	mov	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	801a      	strh	r2, [r3, #0]
        break;
 80101be:	e06a      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_TARGET_DATARATE_FRAMING:
        *pValue = pDataParams->wTargetMode;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	801a      	strh	r2, [r3, #0]
        break;
 80101c8:	e065      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_ACTIVEMODE:
        /* Return parameter */
        *pValue = (uint16_t)pDataParams->bActiveMode;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80101d0:	461a      	mov	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	801a      	strh	r2, [r3, #0]
        break;
 80101d6:	e05e      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_EXT_RF_ON:
        /* Retrieve Status register */
        PH_CHECK_SUCCESS_FCT(statusTmp,
 80101d8:	f107 0310 	add.w	r3, r7, #16
 80101dc:	461a      	mov	r2, r3
 80101de:	211d      	movs	r1, #29
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f001 f9f5 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 80101e6:	4603      	mov	r3, r0
 80101e8:	83fb      	strh	r3, [r7, #30]
 80101ea:	8bfb      	ldrh	r3, [r7, #30]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d001      	beq.n	80101f4 <phhalHw_Pn5180_GetConfig+0x480>
 80101f0:	8bfb      	ldrh	r3, [r7, #30]
 80101f2:	e051      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));

        /* Check EXT_RF_ON bit */
        if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d003      	beq.n	8010206 <phhalHw_Pn5180_GetConfig+0x492>
        {
            *pValue = PH_ON; /* ON if external RF field is detected */
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2201      	movs	r2, #1
 8010202:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
        }
        break;
 8010204:	e047      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF; /* OFF if no external RF field is detected */
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2200      	movs	r2, #0
 801020a:	801a      	strh	r2, [r3, #0]
        break;
 801020c:	e043      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
    case PHHAL_HW_CONFIG_MFHALTED:
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 801020e:	f107 0310 	add.w	r3, r7, #16
 8010212:	461a      	mov	r2, r3
 8010214:	2100      	movs	r1, #0
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f001 f9da 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 801021c:	4603      	mov	r3, r0
 801021e:	83fb      	strh	r3, [r7, #30]
 8010220:	8bfb      	ldrh	r3, [r7, #30]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d001      	beq.n	801022a <phhalHw_Pn5180_GetConfig+0x4b6>
 8010226:	8bfb      	ldrh	r3, [r7, #30]
 8010228:	e036      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
            phhalHw_Pn5180_Instr_ReadRegister(pDataParams, SYSTEM_CONFIG, &dwRegister));
        if(0U != (dwRegister & SYSTEM_CONFIG_AUTOCOLL_STATE_A_MASK))
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <phhalHw_Pn5180_GetConfig+0x4c8>
        {
            *pValue = PH_ON;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2201      	movs	r2, #1
 8010238:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 801023a:	e02c      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
            *pValue = PH_OFF;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	801a      	strh	r2, [r3, #0]
        break;
 8010242:	e028      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
    }

    case PHHAL_HW_CONFIG_CARD_TYPE:
        *pValue = pDataParams->bCardType;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	801a      	strh	r2, [r3, #0]
        break;
 8010250:	e021      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    case PHHAL_HW_CONFIG_INT_RF_ON:
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 8010252:	f107 0310 	add.w	r3, r7, #16
 8010256:	461a      	mov	r2, r3
 8010258:	211d      	movs	r1, #29
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f001 f9b8 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8010260:	4603      	mov	r3, r0
 8010262:	83fb      	strh	r3, [r7, #30]
 8010264:	8bfb      	ldrh	r3, [r7, #30]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d001      	beq.n	801026e <phhalHw_Pn5180_GetConfig+0x4fa>
 801026a:	8bfb      	ldrh	r3, [r7, #30]
 801026c:	e014      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
        if((dwRegister & RF_STATUS_TX_RF_STATUS_MASK ) == RF_STATUS_TX_RF_STATUS_MASK)
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010274:	2b00      	cmp	r3, #0
 8010276:	d007      	beq.n	8010288 <phhalHw_Pn5180_GetConfig+0x514>
        {
            *pValue = PH_ON;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = PH_OFF;
        }
        break;
 801027e:	e00a      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>
 8010280:	10624dd3 	.word	0x10624dd3
 8010284:	03e7fc18 	.word	0x03e7fc18
            *pValue = PH_OFF;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	801a      	strh	r2, [r3, #0]
        break;
 801028e:	e002      	b.n	8010296 <phhalHw_Pn5180_GetConfig+0x522>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8010290:	f240 2323 	movw	r3, #547	@ 0x223
 8010294:	e000      	b.n	8010298 <phhalHw_Pn5180_GetConfig+0x524>
    }

    return PH_ERR_SUCCESS;
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3720      	adds	r7, #32
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <phhalHw_Pn5180_SetMinFDT>:

phStatus_t phhalHw_Pn5180_SetMinFDT(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue
    )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	807b      	strh	r3, [r7, #2]
    phStatus_t PH_MEMLOC_REM statusTmp = 0U;
 80102ac:	2300      	movs	r3, #0
 80102ae:	81fb      	strh	r3, [r7, #14]
    uint16_t   PH_MEMLOC_REM wTimer = 0U;
 80102b0:	2300      	movs	r3, #0
 80102b2:	81bb      	strh	r3, [r7, #12]
    uint16_t   PH_MEMLOC_REM wTxRate = 0U;
 80102b4:	2300      	movs	r3, #0
 80102b6:	817b      	strh	r3, [r7, #10]

    if (wValue == PH_ON)
 80102b8:	887b      	ldrh	r3, [r7, #2]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d146      	bne.n	801034c <phhalHw_Pn5180_SetMinFDT+0xac>
    {
        /*Backup the old Timer values and set min FDT*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 80102be:	f107 030c 	add.w	r3, r7, #12
 80102c2:	461a      	mov	r2, r3
 80102c4:	210e      	movs	r1, #14
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7ff fd54 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80102cc:	4603      	mov	r3, r0
 80102ce:	81fb      	strh	r3, [r7, #14]
 80102d0:	89fb      	ldrh	r3, [r7, #14]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <phhalHw_Pn5180_SetMinFDT+0x3a>
 80102d6:	89fb      	ldrh	r3, [r7, #14]
 80102d8:	e04a      	b.n	8010370 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS, &wTimer));
        pDataParams->dwFdtPc = wTimer;
 80102da:	89ba      	ldrh	r2, [r7, #12]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        /* Calculate values for Microsecond values */
        /* Get the data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetConfig(pDataParams,
 80102e0:	f107 030a 	add.w	r3, r7, #10
 80102e4:	461a      	mov	r2, r3
 80102e6:	2109      	movs	r1, #9
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7ff fd43 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80102ee:	4603      	mov	r3, r0
 80102f0:	81fb      	strh	r3, [r7, #14]
 80102f2:	89fb      	ldrh	r3, [r7, #14]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <phhalHw_Pn5180_SetMinFDT+0x5c>
 80102f8:	89fb      	ldrh	r3, [r7, #14]
 80102fa:	e039      	b.n	8010370 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wTxRate));
        switch(wTxRate)
 80102fc:	897b      	ldrh	r3, [r7, #10]
 80102fe:	2b03      	cmp	r3, #3
 8010300:	d816      	bhi.n	8010330 <phhalHw_Pn5180_SetMinFDT+0x90>
 8010302:	a201      	add	r2, pc, #4	@ (adr r2, 8010308 <phhalHw_Pn5180_SetMinFDT+0x68>)
 8010304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010308:	08010319 	.word	0x08010319
 801030c:	0801031f 	.word	0x0801031f
 8010310:	08010325 	.word	0x08010325
 8010314:	0801032b 	.word	0x0801032b
        {
        case PHHAL_HW_RF_DATARATE_106:
            wTimer = PHHAL_HW_MINFDT_106_US;
 8010318:	2365      	movs	r3, #101	@ 0x65
 801031a:	81bb      	strh	r3, [r7, #12]
            break;
 801031c:	e009      	b.n	8010332 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_212:
            wTimer = PHHAL_HW_MINFDT_212_US;
 801031e:	237f      	movs	r3, #127	@ 0x7f
 8010320:	81bb      	strh	r3, [r7, #12]
            break;
 8010322:	e006      	b.n	8010332 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_424:
            wTimer = PHHAL_HW_MINFDT_424_US;
 8010324:	2377      	movs	r3, #119	@ 0x77
 8010326:	81bb      	strh	r3, [r7, #12]
            break;
 8010328:	e003      	b.n	8010332 <phhalHw_Pn5180_SetMinFDT+0x92>
        case PHHAL_HW_RF_DATARATE_848:
            wTimer = PHHAL_HW_MINFDT_848_US;
 801032a:	2380      	movs	r3, #128	@ 0x80
 801032c:	81bb      	strh	r3, [r7, #12]
            break;
 801032e:	e000      	b.n	8010332 <phhalHw_Pn5180_SetMinFDT+0x92>
        default:
            break;
 8010330:	bf00      	nop
        }
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 8010332:	89bb      	ldrh	r3, [r7, #12]
 8010334:	461a      	mov	r2, r3
 8010336:	210d      	movs	r1, #13
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7fe f8cd 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801033e:	4603      	mov	r3, r0
 8010340:	81fb      	strh	r3, [r7, #14]
 8010342:	89fb      	ldrh	r3, [r7, #14]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d012      	beq.n	801036e <phhalHw_Pn5180_SetMinFDT+0xce>
 8010348:	89fb      	ldrh	r3, [r7, #14]
 801034a:	e011      	b.n	8010370 <phhalHw_Pn5180_SetMinFDT+0xd0>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US, wTimer));
    }
    else if (wValue == PH_OFF)
 801034c:	887b      	ldrh	r3, [r7, #2]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10d      	bne.n	801036e <phhalHw_Pn5180_SetMinFDT+0xce>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams,
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010356:	461a      	mov	r2, r3
 8010358:	210e      	movs	r1, #14
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7fe f8bc 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8010360:	4603      	mov	r3, r0
 8010362:	81fb      	strh	r3, [r7, #14]
 8010364:	89fb      	ldrh	r3, [r7, #14]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d001      	beq.n	801036e <phhalHw_Pn5180_SetMinFDT+0xce>
 801036a:	89fb      	ldrh	r3, [r7, #14]
 801036c:	e000      	b.n	8010370 <phhalHw_Pn5180_SetMinFDT+0xd0>
    }
    else
    {
        /* Do nothing*/
    }
    return PH_ERR_SUCCESS;
 801036e:	2300      	movs	r3, #0
}
 8010370:	4618      	mov	r0, r3
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <phhalHw_Pn5180_BalExchange>:
                                      uint16_t wTxLength,
                                      uint16_t wRxBufSize,
                                      uint8_t * pRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b08a      	sub	sp, #40	@ 0x28
 801037c:	af04      	add	r7, sp, #16
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	4611      	mov	r1, r2
 8010384:	461a      	mov	r2, r3
 8010386:	460b      	mov	r3, r1
 8010388:	80fb      	strh	r3, [r7, #6]
 801038a:	4613      	mov	r3, r2
 801038c:	80bb      	strh	r3, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if (((phbalReg_Type_t *)(pDataParams->pBalDataParams))->bBalType == PHBAL_REG_TYPE_KERNEL_SPI)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	789b      	ldrb	r3, [r3, #2]
 8010394:	2b04      	cmp	r3, #4
 8010396:	d10f      	bne.n	80103b8 <phhalHw_Pn5180_BalExchange+0x40>
    {
        return phbalReg_Exchange(
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6858      	ldr	r0, [r3, #4]
 801039c:	88fa      	ldrh	r2, [r7, #6]
 801039e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a0:	9302      	str	r3, [sp, #8]
 80103a2:	6a3b      	ldr	r3, [r7, #32]
 80103a4:	9301      	str	r3, [sp, #4]
 80103a6:	88bb      	ldrh	r3, [r7, #4]
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	4613      	mov	r3, r2
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	2100      	movs	r1, #0
 80103b0:	f008 fd0a 	bl	8018dc8 <phbalReg_Exchange>
 80103b4:	4603      	mov	r3, r0
 80103b6:	e077      	b.n	80104a8 <phhalHw_Pn5180_BalExchange+0x130>
    else
    {

#ifndef _WIN32
        /* Wait for the Busy to be low */
        while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 80103b8:	bf00      	nop
 80103ba:	2201      	movs	r2, #1
 80103bc:	2102      	movs	r1, #2
 80103be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80103c2:	f008 fc6b 	bl	8018c9c <phDriver_PinRead>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1f6      	bne.n	80103ba <phhalHw_Pn5180_BalExchange+0x42>
                0U,
                NULL,
                NULL));
#else
        /* Enable chip select connected to reader IC by pulling NSS low. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	2100      	movs	r1, #0
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 fe9c 	bl	8011110 <phhalHw_Pn5180_WriteSSEL>

        PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6858      	ldr	r0, [r3, #4]
 80103dc:	88fa      	ldrh	r2, [r7, #6]
 80103de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e0:	9302      	str	r3, [sp, #8]
 80103e2:	2300      	movs	r3, #0
 80103e4:	9301      	str	r3, [sp, #4]
 80103e6:	88fb      	ldrh	r3, [r7, #6]
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	4613      	mov	r3, r2
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	2100      	movs	r1, #0
 80103f0:	f008 fcea 	bl	8018dc8 <phbalReg_Exchange>
 80103f4:	4603      	mov	r3, r0
 80103f6:	82fb      	strh	r3, [r7, #22]
 80103f8:	8afb      	ldrh	r3, [r7, #22]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <phhalHw_Pn5180_BalExchange+0x8a>
 80103fe:	8afb      	ldrh	r3, [r7, #22]
 8010400:	e052      	b.n	80104a8 <phhalHw_Pn5180_BalExchange+0x130>
                wTxLength,
                wTxLength,
                NULL,
                pRxLength));

        if (pDataParams->bIsTestBusEnabled == PH_ON)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8010408:	2b01      	cmp	r3, #1
 801040a:	d109      	bne.n	8010420 <phhalHw_Pn5180_BalExchange+0xa8>
        {
            /* Wait for the Busy Pin to go high when TestBus is enabled. */
            while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 801040c:	bf00      	nop
 801040e:	2201      	movs	r2, #1
 8010410:	2102      	movs	r1, #2
 8010412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010416:	f008 fc41 	bl	8018c9c <phDriver_PinRead>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0f6      	beq.n	801040e <phhalHw_Pn5180_BalExchange+0x96>
        }

        /* Disable chip select connected to reader IC by pulling NSS high. */
        phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	2101      	movs	r1, #1
 8010426:	4618      	mov	r0, r3
 8010428:	f000 fe72 	bl	8011110 <phhalHw_Pn5180_WriteSSEL>
#endif

        if (0U != wRxBufSize)
 801042c:	88bb      	ldrh	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d039      	beq.n	80104a6 <phhalHw_Pn5180_BalExchange+0x12e>
        {
#ifndef _WIN32
            while(phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 8010432:	bf00      	nop
 8010434:	2201      	movs	r2, #1
 8010436:	2102      	movs	r1, #2
 8010438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801043c:	f008 fc2e 	bl	8018c9c <phDriver_PinRead>
 8010440:	4603      	mov	r3, r0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1f6      	bne.n	8010434 <phhalHw_Pn5180_BalExchange+0xbc>
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));
#else
            /* Enable chip select connected to reader IC by pulling NSS low. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_LOW);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	2100      	movs	r1, #0
 801044c:	4618      	mov	r0, r3
 801044e:	f000 fe5f 	bl	8011110 <phhalHw_Pn5180_WriteSSEL>

            PH_CHECK_SUCCESS_FCT(statusTmp, phbalReg_Exchange(
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6858      	ldr	r0, [r3, #4]
 8010456:	88ba      	ldrh	r2, [r7, #4]
 8010458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801045a:	9302      	str	r3, [sp, #8]
 801045c:	6a3b      	ldr	r3, [r7, #32]
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	88bb      	ldrh	r3, [r7, #4]
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	4613      	mov	r3, r2
 8010466:	2200      	movs	r2, #0
 8010468:	2100      	movs	r1, #0
 801046a:	f008 fcad 	bl	8018dc8 <phbalReg_Exchange>
 801046e:	4603      	mov	r3, r0
 8010470:	82fb      	strh	r3, [r7, #22]
 8010472:	8afb      	ldrh	r3, [r7, #22]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d001      	beq.n	801047c <phhalHw_Pn5180_BalExchange+0x104>
 8010478:	8afb      	ldrh	r3, [r7, #22]
 801047a:	e015      	b.n	80104a8 <phhalHw_Pn5180_BalExchange+0x130>
                    wRxBufSize,
                    wRxBufSize,
                    pRxBuffer,
                    pRxLength));

            if (pDataParams->bIsTestBusEnabled == PH_ON)
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8010482:	2b01      	cmp	r3, #1
 8010484:	d109      	bne.n	801049a <phhalHw_Pn5180_BalExchange+0x122>
            {
                /* Wait for the Busy Pin to go high when TestBus is enabled. */
                while(!phDriver_PinRead(PHDRIVER_PIN_BUSY, PH_DRIVER_PINFUNC_INPUT));
 8010486:	bf00      	nop
 8010488:	2201      	movs	r2, #1
 801048a:	2102      	movs	r1, #2
 801048c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010490:	f008 fc04 	bl	8018c9c <phDriver_PinRead>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d0f6      	beq.n	8010488 <phhalHw_Pn5180_BalExchange+0x110>
            }

            /* Disable chip select connected to reader IC by pulling NSS high. */
            phhalHw_Pn5180_WriteSSEL(pDataParams->pBalDataParams, PH_DRIVER_SET_HIGH);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	2101      	movs	r1, #1
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fe35 	bl	8011110 <phhalHw_Pn5180_WriteSSEL>
#endif
        }

    }

    return PH_ERR_SUCCESS;
 80104a6:	2300      	movs	r3, #0
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3718      	adds	r7, #24
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <phhalHw_Pn5180_Autocoll>:
    uint16_t wMode,
    uint8_t ** ppRxBuffer,
    uint16_t * pRxLength,
    uint16_t * pProtParams
    )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b090      	sub	sp, #64	@ 0x40
 80104b4:	af02      	add	r7, sp, #8
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	607a      	str	r2, [r7, #4]
 80104ba:	603b      	str	r3, [r7, #0]
 80104bc:	460b      	mov	r3, r1
 80104be:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_INTERNAL_ERROR;
 80104c0:	237f      	movs	r3, #127	@ 0x7f
 80104c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t    PH_MEMLOC_REM dwRegValue = 0U;
 80104c4:	2300      	movs	r3, #0
 80104c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwRfStatus;
    uint8_t     PH_MEMLOC_REM bRfTechnology = 0U;
 80104c8:	2300      	movs	r3, #0
 80104ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM offsetPos = 0U;
 80104ce:	2300      	movs	r3, #0
 80104d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    uint8_t     PH_MEMLOC_REM offsetLen = 0U;
 80104d4:	2300      	movs	r3, #0
 80104d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bFraming = 0U;
 80104da:	2300      	movs	r3, #0
 80104dc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    uint8_t     PH_MEMLOC_REM bSpeed = 0U;
 80104e0:	2300      	movs	r3, #0
 80104e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM pRegisters[4];
    uint8_t*    PH_MEMLOC_REM pTmpBuffer;

    /*Fixed for Autonomous mode not used, i.e. autocoll terminates when external RF field is not present*/
    uint8_t PH_MEMLOC_REM   bAutocollMode = 0U;
 80104e6:	2300      	movs	r3, #0
 80104e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t PH_MEMLOC_REM  dwIrqReg = 0U;
 80104ec:	2300      	movs	r3, #0
 80104ee:	617b      	str	r3, [r7, #20]

    /* Disable the EMD. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_SetConfig(pDataParams, PHHAL_HW_CONFIG_SET_EMD, PH_OFF));
 80104f0:	2200      	movs	r2, #0
 80104f2:	215e      	movs	r1, #94	@ 0x5e
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7fd ffef 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80104fa:	4603      	mov	r3, r0
 80104fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80104fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <phhalHw_Pn5180_Autocoll+0x58>
 8010504:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010506:	e25e      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

    /*bTransmited is a flag which is used to identify if a transmit is followed by a receive.
    If any other api follows a transmit, then it should be reset */
    pDataParams->bTransmited = PH_OFF;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    if ( (NULL == pDataParams) \
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d008      	beq.n	8010528 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == ppRxBuffer)\
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d005      	beq.n	8010528 <phhalHw_Pn5180_Autocoll+0x78>
        || (NULL == pRxLength) \
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <phhalHw_Pn5180_Autocoll+0x78>
        ||  (NULL == pProtParams) \
 8010522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	d102      	bne.n	801052e <phhalHw_Pn5180_Autocoll+0x7e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010528:	f240 2321 	movw	r3, #545	@ 0x221
 801052c:	e24b      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(pDataParams->bCardMode == PH_ON)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010534:	2b01      	cmp	r3, #1
 8010536:	d103      	bne.n	8010540 <phhalHw_Pn5180_Autocoll+0x90>
    {
        bRfTechnology = PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 8010538:	2301      	movs	r3, #1
 801053a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 801053e:	e037      	b.n	80105b0 <phhalHw_Pn5180_Autocoll+0x100>
    }
    else
    {
        /*RFTech A*/
        if((wMode & A_MODE) == A_MODE)
 8010540:	897b      	ldrh	r3, [r7, #10]
 8010542:	f003 0301 	and.w	r3, r3, #1
 8010546:	2b00      	cmp	r3, #0
 8010548:	d005      	beq.n	8010556 <phhalHw_Pn5180_Autocoll+0xa6>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_A;
 801054a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801054e:	f043 0301 	orr.w	r3, r3, #1
 8010552:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech F*/
        if((wMode & F_MODE) == F_MODE)
 8010556:	897b      	ldrh	r3, [r7, #10]
 8010558:	f003 0304 	and.w	r3, r3, #4
 801055c:	2b00      	cmp	r3, #0
 801055e:	d005      	beq.n	801056c <phhalHw_Pn5180_Autocoll+0xbc>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F;
 8010560:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010564:	f043 0302 	orr.w	r3, r3, #2
 8010568:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active A*/
        if((wMode & ACTIVE_A_MODE) == ACTIVE_A_MODE)
 801056c:	897b      	ldrh	r3, [r7, #10]
 801056e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010572:	2b00      	cmp	r3, #0
 8010574:	d005      	beq.n	8010582 <phhalHw_Pn5180_Autocoll+0xd2>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_ISO18092_ACTIVE;
 8010576:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801057a:	f043 0304 	orr.w	r3, r3, #4
 801057e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech Active F*/
        if((wMode & ACTIVE_F_MODE) == ACTIVE_F_MODE)
 8010582:	897b      	ldrh	r3, [r7, #10]
 8010584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010588:	2b00      	cmp	r3, #0
 801058a:	d005      	beq.n	8010598 <phhalHw_Pn5180_Autocoll+0xe8>
        {
            bRfTechnology |= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK_NFC_F_ACTIVE;
 801058c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010590:	f043 0308 	orr.w	r3, r3, #8
 8010594:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /*RFTech B and Active B*/
        if(((wMode & B_MODE) == B_MODE)||((wMode & ACTIVE_B_MODE) == ACTIVE_B_MODE))
 8010598:	897b      	ldrh	r3, [r7, #10]
 801059a:	f003 0302 	and.w	r3, r3, #2
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d104      	bne.n	80105ac <phhalHw_Pn5180_Autocoll+0xfc>
 80105a2:	897b      	ldrh	r3, [r7, #10]
 80105a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <phhalHw_Pn5180_Autocoll+0x100>
        {
            /* Do nothing, ignore -- NFCP576 -- as the NFC forum DTA application expects success for Listen B */
            return PH_ERR_SUCCESS;
 80105ac:	2300      	movs	r3, #0
 80105ae:	e20a      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
        }

    }

    /* set the receive length */
    *pRxLength = 0U;
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	2200      	movs	r2, #0
 80105b4:	801a      	strh	r2, [r3, #0]

    pDataParams->wRxBufLen = 0U;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	835a      	strh	r2, [r3, #26]

    /* Reset the Flag used to indicate if Passive Target is activated by ISO/IEC 18092 Frame */
    pDataParams->wTargetMode = PH_OFF;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2200      	movs	r2, #0
 80105c0:	865a      	strh	r2, [r3, #50]	@ 0x32
    pDataParams->bActiveMode = PH_OFF;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2200      	movs	r2, #0
 80105c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    pDataParams->bNfcipMode  = PH_OFF;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2200      	movs	r2, #0
 80105ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

    /* Terminate a probably running command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_IdleCommand(pDataParams));
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f003 f9cc 	bl	8013970 <phhalHw_Pn5180_Int_IdleCommand>
 80105d8:	4603      	mov	r3, r0
 80105da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80105dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <phhalHw_Pn5180_Autocoll+0x136>
 80105e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105e4:	e1ef      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RfOff(pDataParams));
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f001 fd75 	bl	80120d6 <phhalHw_Pn5180_Instr_RfOff>
 80105ec:	4603      	mov	r3, r0
 80105ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80105f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <phhalHw_Pn5180_Autocoll+0x14a>
 80105f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105f8:	e1e5      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

    /*Set wait IRQ */
    dwIrqWaitFor =  IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK | IRQ_STATUS_RFOFF_DET_IRQ_MASK;
 80105fa:	4b9d      	ldr	r3, [pc, #628]	@ (8010870 <phhalHw_Pn5180_Autocoll+0x3c0>)
 80105fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear all Interrupts for e.g Tx interrupt during receive */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 80105fe:	4a9d      	ldr	r2, [pc, #628]	@ (8010874 <phhalHw_Pn5180_Autocoll+0x3c4>)
 8010600:	2103      	movs	r1, #3
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f000 fdd0 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8010608:	4603      	mov	r3, r0
 801060a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801060c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <phhalHw_Pn5180_Autocoll+0x166>
 8010612:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010614:	e1d7      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 801061c:	2300      	movs	r3, #0
 801061e:	2201      	movs	r2, #1
 8010620:	2100      	movs	r1, #0
 8010622:	f008 fd0b 	bl	801903c <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8010626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010628:	2101      	movs	r1, #1
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f000 fdbc 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8010630:	4603      	mov	r3, r0
 8010632:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010634:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010636:	2b00      	cmp	r3, #0
 8010638:	d001      	beq.n	801063e <phhalHw_Pn5180_Autocoll+0x18e>
 801063a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801063c:	e1c3      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

    /*Go to autocoll mode*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeAutocoll(pDataParams, bRfTechnology, bAutocollMode ) );
 801063e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8010642:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8010646:	4619      	mov	r1, r3
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f001 fa99 	bl	8011b80 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>
 801064e:	4603      	mov	r3, r0
 8010650:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010652:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010654:	2b00      	cmp	r3, #0
 8010656:	d001      	beq.n	801065c <phhalHw_Pn5180_Autocoll+0x1ac>
 8010658:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801065a:	e1b4      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

    /* Wait for Interrupt to occur */
    statusTmp =  phhalHw_Pn5180_WaitIrq( pDataParams, PH_ON, PH_OFF, dwIrqWaitFor, &dwIrqReg);
 801065c:	f107 0314 	add.w	r3, r7, #20
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010664:	2200      	movs	r2, #0
 8010666:	2101      	movs	r1, #1
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f003 fa33 	bl	8013ad4 <phhalHw_Pn5180_WaitIrq>
 801066e:	4603      	mov	r3, r0
 8010670:	853b      	strh	r3, [r7, #40]	@ 0x28

    if((statusTmp & PH_ERR_MASK) == PH_ERR_ABORTED)
 8010672:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010674:	b2db      	uxtb	r3, r3
 8010676:	2b12      	cmp	r3, #18
 8010678:	d10c      	bne.n	8010694 <phhalHw_Pn5180_Autocoll+0x1e4>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f001 fad9 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010680:	4603      	mov	r3, r0
 8010682:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010684:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010686:	2b00      	cmp	r3, #0
 8010688:	d001      	beq.n	801068e <phhalHw_Pn5180_Autocoll+0x1de>
 801068a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801068c:	e19b      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_ABORTED, PH_COMP_HAL);
 801068e:	f240 2312 	movw	r3, #530	@ 0x212
 8010692:	e198      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
    }

    if(0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00c      	beq.n	80106b8 <phhalHw_Pn5180_Autocoll+0x208>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801069e:	68f8      	ldr	r0, [r7, #12]
 80106a0:	f001 fac7 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 80106a4:	4603      	mov	r3, r0
 80106a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80106a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d001      	beq.n	80106b2 <phhalHw_Pn5180_Autocoll+0x202>
 80106ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80106b0:	e189      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80106b2:	f240 237f 	movw	r3, #639	@ 0x27f
 80106b6:	e186      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
    }
    else if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	f003 0301 	and.w	r3, r3, #1
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f000 815d 	beq.w	801097e <phhalHw_Pn5180_Autocoll+0x4ce>
    {

        pRegisters[0] = SIGPRO_CM_CONFIG;
 80106c4:	231b      	movs	r3, #27
 80106c6:	773b      	strb	r3, [r7, #28]
        pRegisters[1] = SIGPRO_CONFIG;
 80106c8:	231a      	movs	r3, #26
 80106ca:	777b      	strb	r3, [r7, #29]
        pRegisters[2] = RX_STATUS;
 80106cc:	2313      	movs	r3, #19
 80106ce:	77bb      	strb	r3, [r7, #30]
        pRegisters[3] = RF_STATUS;
 80106d0:	231d      	movs	r3, #29
 80106d2:	77fb      	strb	r3, [r7, #31]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegisterMultiple(pDataParams, pRegisters, 4U, &pTmpBuffer));
 80106d4:	f107 0318 	add.w	r3, r7, #24
 80106d8:	f107 011c 	add.w	r1, r7, #28
 80106dc:	2204      	movs	r2, #4
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f000 ffe4 	bl	80116ac <phhalHw_Pn5180_Instr_ReadRegisterMultiple>
 80106e4:	4603      	mov	r3, r0
 80106e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80106e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d001      	beq.n	80106f2 <phhalHw_Pn5180_Autocoll+0x242>
 80106ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80106f0:	e169      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

        dwRegValue = (uint32_t)pTmpBuffer[0];
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[1]<<8U;
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	3301      	adds	r3, #1
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	021b      	lsls	r3, r3, #8
 8010700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010702:	4313      	orrs	r3, r2
 8010704:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[2]<<16U;
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	3302      	adds	r3, #2
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	041b      	lsls	r3, r3, #16
 801070e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010710:	4313      	orrs	r3, r2
 8010712:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[3]<<24U;
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	3303      	adds	r3, #3
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	061b      	lsls	r3, r3, #24
 801071c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801071e:	4313      	orrs	r3, r2
 8010720:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bFraming = (uint8_t)((dwRegValue & SIGPRO_CM_CONFIG_RX_FRAMING_MASK) >> SIGPRO_CM_CONFIG_RX_FRAMING_POS);
 8010722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010724:	0f5b      	lsrs	r3, r3, #29
 8010726:	b2db      	uxtb	r3, r3
 8010728:	f003 0303 	and.w	r3, r3, #3
 801072c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        dwRegValue = (uint32_t)pTmpBuffer[4];
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	3304      	adds	r3, #4
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[5]<<8U;
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	3305      	adds	r3, #5
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	021b      	lsls	r3, r3, #8
 8010740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010742:	4313      	orrs	r3, r2
 8010744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[6]<<16U;
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	3306      	adds	r3, #6
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	041b      	lsls	r3, r3, #16
 801074e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010750:	4313      	orrs	r3, r2
 8010752:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[7]<<24U;
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	3307      	adds	r3, #7
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	061b      	lsls	r3, r3, #24
 801075c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801075e:	4313      	orrs	r3, r2
 8010760:	62fb      	str	r3, [r7, #44]	@ 0x2c

        bSpeed = (uint8_t)(dwRegValue & SIGPRO_CONFIG_BAUDRATE_MASK);
 8010762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010764:	b2db      	uxtb	r3, r3
 8010766:	f003 0307 	and.w	r3, r3, #7
 801076a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        bSpeed -= PHHAL_HW_PN5180_SIGPRO_GENERAL_MAPPING;
 801076e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010772:	3b04      	subs	r3, #4
 8010774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Read RX_STATUS_REG to know the status of reception */
        dwRegValue = (uint32_t)pTmpBuffer[8];
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	3308      	adds	r3, #8
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[9]<<8U;
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	3309      	adds	r3, #9
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	021b      	lsls	r3, r3, #8
 8010788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801078a:	4313      	orrs	r3, r2
 801078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[10]<<16U;
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	330a      	adds	r3, #10
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	041b      	lsls	r3, r3, #16
 8010796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010798:	4313      	orrs	r3, r2
 801079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwRegValue |= (uint32_t)pTmpBuffer[11]<<24U;
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	330b      	adds	r3, #11
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	061b      	lsls	r3, r3, #24
 80107a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107a6:	4313      	orrs	r3, r2
 80107a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Read RF_STATUS_REG to know the status of reception */
        dwRfStatus = (uint32_t)pTmpBuffer[12];
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	330c      	adds	r3, #12
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[13]<<8U;
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	330d      	adds	r3, #13
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	021b      	lsls	r3, r3, #8
 80107ba:	6a3a      	ldr	r2, [r7, #32]
 80107bc:	4313      	orrs	r3, r2
 80107be:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[14]<<16U;
 80107c0:	69bb      	ldr	r3, [r7, #24]
 80107c2:	330e      	adds	r3, #14
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	041b      	lsls	r3, r3, #16
 80107c8:	6a3a      	ldr	r2, [r7, #32]
 80107ca:	4313      	orrs	r3, r2
 80107cc:	623b      	str	r3, [r7, #32]
        dwRfStatus |= (uint32_t)pTmpBuffer[15]<<24U;
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	330f      	adds	r3, #15
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	061b      	lsls	r3, r3, #24
 80107d6:	6a3a      	ldr	r2, [r7, #32]
 80107d8:	4313      	orrs	r3, r2
 80107da:	623b      	str	r3, [r7, #32]

        if (0U != (dwRegValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 80107dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00c      	beq.n	8010800 <phhalHw_Pn5180_Autocoll+0x350>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams));
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f001 fa23 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 80107ec:	4603      	mov	r3, r0
 80107ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80107f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d001      	beq.n	80107fa <phhalHw_Pn5180_Autocoll+0x34a>
 80107f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107f8:	e0e5      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INTEGRITY_ERROR, PH_COMP_HAL);
 80107fa:	f240 2302 	movw	r3, #514	@ 0x202
 80107fe:	e0e2      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
        }

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_ReadData(pDataParams, ppRxBuffer, pRxLength));
 8010800:	683a      	ldr	r2, [r7, #0]
 8010802:	6879      	ldr	r1, [r7, #4]
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f001 fd68 	bl	80122da <phhalHw_Pn5180_ReadData>
 801080a:	4603      	mov	r3, r0
 801080c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801080e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010810:	2b00      	cmp	r3, #0
 8010812:	d001      	beq.n	8010818 <phhalHw_Pn5180_Autocoll+0x368>
 8010814:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010816:	e0d6      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>

        if(0U != (dwIrqReg & IRQ_STATUS_CARD_ACTIVATED_IRQ_MASK))
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	f003 0310 	and.w	r3, r3, #16
 801081e:	2b00      	cmp	r3, #0
 8010820:	d02a      	beq.n	8010878 <phhalHw_Pn5180_Autocoll+0x3c8>
        {
            /* In case External RF OFF also occurred then exit with RF Error. */
            if (0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00c      	beq.n	8010846 <phhalHw_Pn5180_Autocoll+0x396>
            {
                /* Terminate Autocoll command before existing. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f001 fa00 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010832:	4603      	mov	r3, r0
 8010834:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010836:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <phhalHw_Pn5180_Autocoll+0x390>
 801083c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801083e:	e0c2      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
                return PH_ADD_COMPCODE_FIXED(PH_ERR_EXT_RF_ERROR, PH_COMP_HAL);
 8010840:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8010844:	e0bf      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
            }
            /* Disable active mode */
            pDataParams->bActiveMode = PH_OFF;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2200      	movs	r2, #0
 801084a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if((bSpeed == PHHAL_HW_RF_DATARATE_106) && (**ppRxBuffer == PHHAL_HW_PN5180_I18092MT_START_BYTE))
 801084e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010852:	2b00      	cmp	r3, #0
 8010854:	d134      	bne.n	80108c0 <phhalHw_Pn5180_Autocoll+0x410>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2bf0      	cmp	r3, #240	@ 0xf0
 801085e:	d12f      	bne.n	80108c0 <phhalHw_Pn5180_Autocoll+0x410>
            {
                /* Offset for StartByte as it included if Passive Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8010860:	2301      	movs	r3, #1
 8010862:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 1U;
 8010866:	2301      	movs	r3, #1
 8010868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801086c:	e028      	b.n	80108c0 <phhalHw_Pn5180_Autocoll+0x410>
 801086e:	bf00      	nop
 8010870:	00020041 	.word	0x00020041
 8010874:	000fffff 	.word	0x000fffff
            }
        }
        else if ((dwRfStatus & RF_STATUS_RF_DET_STATUS_MASK) == 0U)
 8010878:	6a3b      	ldr	r3, [r7, #32]
 801087a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801087e:	2b00      	cmp	r3, #0
 8010880:	d111      	bne.n	80108a6 <phhalHw_Pn5180_Autocoll+0x3f6>
        {
            /* Enable active mode */
            pDataParams->bActiveMode = PH_ON;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2201      	movs	r2, #1
 8010886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if(bSpeed == PHHAL_HW_RF_DATARATE_106)
 801088a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801088e:	2b00      	cmp	r3, #0
 8010890:	d105      	bne.n	801089e <phhalHw_Pn5180_Autocoll+0x3ee>
            {
                /* Offset for StartByte and CRC as it is included if Active Communication in ISO/IEC 18092 */
                offsetPos = 1U;
 8010892:	2301      	movs	r3, #1
 8010894:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                offsetLen = 3U;
 8010898:	2303      	movs	r3, #3
 801089a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            bFraming = PHHAL_HW_PN5180_BIT_ISO18092;
 801089e:	2301      	movs	r3, #1
 80108a0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80108a4:	e00c      	b.n	80108c0 <phhalHw_Pn5180_Autocoll+0x410>
        }
        else
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f001 f9c3 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 80108ac:	4603      	mov	r3, r0
 80108ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80108b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <phhalHw_Pn5180_Autocoll+0x40a>
 80108b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108b8:	e085      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 80108ba:	f240 2306 	movw	r3, #518	@ 0x206
 80108be:	e082      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
        }
        if((pDataParams->bActiveMode == PH_ON) && ((wMode & ACTIVE_A_MODE) != ACTIVE_A_MODE) && (bSpeed == PHHAL_HW_RF_DATARATE_106))
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d115      	bne.n	80108f6 <phhalHw_Pn5180_Autocoll+0x446>
 80108ca:	897b      	ldrh	r3, [r7, #10]
 80108cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d110      	bne.n	80108f6 <phhalHw_Pn5180_Autocoll+0x446>
 80108d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d10c      	bne.n	80108f6 <phhalHw_Pn5180_Autocoll+0x446>
        {
            /* Terminate Autocoll command before existing. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f001 f9a8 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 80108e2:	4603      	mov	r3, r0
 80108e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80108e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <phhalHw_Pn5180_Autocoll+0x440>
 80108ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80108ee:	e06a      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_HAL);
 80108f0:	f240 2306 	movw	r3, #518	@ 0x206
 80108f4:	e067      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
        }

        if(bFraming == PHHAL_HW_PN5180_BIT_MIFARE)
 80108f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d108      	bne.n	8010910 <phhalHw_Pn5180_Autocoll+0x460>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_A_FRAMING | bSpeed;
 80108fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010902:	b29b      	uxth	r3, r3
 8010904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010908:	b29a      	uxth	r2, r3
 801090a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801090c:	801a      	strh	r2, [r3, #0]
 801090e:	e01b      	b.n	8010948 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_ISO18092)
 8010910:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8010914:	2b01      	cmp	r3, #1
 8010916:	d108      	bne.n	801092a <phhalHw_Pn5180_Autocoll+0x47a>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_ACTIVE_FRAMING | bSpeed;
 8010918:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801091c:	b29b      	uxth	r3, r3
 801091e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010922:	b29a      	uxth	r2, r3
 8010924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010926:	801a      	strh	r2, [r3, #0]
 8010928:	e00e      	b.n	8010948 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else if(bFraming == PHHAL_HW_PN5180_BIT_FELICA)
 801092a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801092e:	2b02      	cmp	r3, #2
 8010930:	d108      	bne.n	8010944 <phhalHw_Pn5180_Autocoll+0x494>
        {
            *pProtParams = PHHAL_HW_RF_TYPE_F_FRAMING | bSpeed;
 8010932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010936:	b29b      	uxth	r3, r3
 8010938:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801093c:	b29a      	uxth	r2, r3
 801093e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010940:	801a      	strh	r2, [r3, #0]
 8010942:	e001      	b.n	8010948 <phhalHw_Pn5180_Autocoll+0x498>
        }
        else
        {
            /* Invalid Framing as PN5180 will not emulate other than Type-A, Type-F and Active Frame */
            status = PH_ERR_FRAMING_ERROR;
 8010944:	2305      	movs	r3, #5
 8010946:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }

        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = *pRxLength;
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	881a      	ldrh	r2, [r3, #0]
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	835a      	strh	r2, [r3, #26]

        /* Return RxBuffer pointer */
        /* Offset "F0" incase of Active communication */
        *ppRxBuffer = pDataParams->pRxBuffer + offsetPos;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	695a      	ldr	r2, [r3, #20]
 8010954:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8010958:	441a      	add	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	601a      	str	r2, [r3, #0]

        /* Return RxBuffer length */
        /* Offset "F0" + CRC incase of Active communication */
        *pRxLength = pDataParams->wRxBufLen - offsetLen;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	8b5a      	ldrh	r2, [r3, #26]
 8010962:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010966:	b29b      	uxth	r3, r3
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	b29a      	uxth	r2, r3
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	801a      	strh	r2, [r3, #0]
        pDataParams->wTargetMode = *pProtParams;
 8010970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010972:	881a      	ldrh	r2, [r3, #0]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	865a      	strh	r2, [r3, #50]	@ 0x32

        status = PH_ERR_SUCCESS;
 8010978:	2300      	movs	r3, #0
 801097a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801097c:	e006      	b.n	801098c <phhalHw_Pn5180_Autocoll+0x4dc>
    }
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010984:	2b00      	cmp	r3, #0
 8010986:	d001      	beq.n	801098c <phhalHw_Pn5180_Autocoll+0x4dc>
    {
        status = PH_ERR_EXT_RF_ERROR;
 8010988:	2310      	movs	r3, #16
 801098a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    else
    {
        /* QAC */
    }

    if(status != PH_ERR_SUCCESS)
 801098c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801098e:	2b00      	cmp	r3, #0
 8010990:	d009      	beq.n	80109a6 <phhalHw_Pn5180_Autocoll+0x4f6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_SwitchModeNormal(pDataParams) );
 8010992:	68f8      	ldr	r0, [r7, #12]
 8010994:	f001 f94d 	bl	8011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>
 8010998:	4603      	mov	r3, r0
 801099a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801099c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <phhalHw_Pn5180_Autocoll+0x4f6>
 80109a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80109a4:	e00f      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 80109a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00b      	beq.n	80109c4 <phhalHw_Pn5180_Autocoll+0x514>
 80109ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <phhalHw_Pn5180_Autocoll+0x514>
 80109b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	e000      	b.n	80109c6 <phhalHw_Pn5180_Autocoll+0x516>
 80109c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3738      	adds	r7, #56	@ 0x38
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop

080109d0 <phhalHw_Pn5180_Lpcd>:

phStatus_t phhalHw_Pn5180_Lpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b090      	sub	sp, #64	@ 0x40
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint32_t    PH_MEMLOC_REM dwIrqWaitFor= 0U;
 80109d8:	2300      	movs	r3, #0
 80109da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM bEPromData[5];
    uint32_t    PH_MEMLOC_REM dwAgcValVariation = 0U;
 80109dc:	2300      	movs	r3, #0
 80109de:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t    PH_MEMLOC_REM dwAgcRefVal = 0U;
 80109e0:	2300      	movs	r3, #0
 80109e2:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t    PH_MEMLOC_REM dwLpcdThreshold = 0U;
 80109e4:	2300      	movs	r3, #0
 80109e6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bOcProtControl[1];

    switch (pDataParams->bLpcdMode)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <phhalHw_Pn5180_Lpcd+0x28>
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d072      	beq.n	8010adc <phhalHw_Pn5180_Lpcd+0x10c>
 80109f6:	e0c4      	b.n	8010b82 <phhalHw_Pn5180_Lpcd+0x1b2>
    {
    case PHHAL_HW_PN5180_LPCD_MODE_DEFAULT:

        /*Get the current AGC measurement*/
        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadRegister( pDataParams, AGC_REF_CONFIG, &dwRegister));
 80109f8:	f107 031c 	add.w	r3, r7, #28
 80109fc:	461a      	mov	r2, r3
 80109fe:	2126      	movs	r1, #38	@ 0x26
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 fde5 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8010a06:	4603      	mov	r3, r0
 8010a08:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010a0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d001      	beq.n	8010a14 <phhalHw_Pn5180_Lpcd+0x44>
 8010a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a12:	e0c9      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_LPCD_REFERENCE_VALUE_ADDR, bEPromData,  5U));
 8010a14:	f107 0210 	add.w	r2, r7, #16
 8010a18:	2305      	movs	r3, #5
 8010a1a:	2134      	movs	r1, #52	@ 0x34
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 ff57 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8010a22:	4603      	mov	r3, r0
 8010a24:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010a26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <phhalHw_Pn5180_Lpcd+0x60>
 8010a2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a2e:	e0bb      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_ReadE2Prom( pDataParams, PHHAL_HW_PN5180_OCPROT_CONTROL_ADDR, bOcProtControl,  1U));
 8010a30:	f107 020c 	add.w	r2, r7, #12
 8010a34:	2301      	movs	r3, #1
 8010a36:	2159      	movs	r1, #89	@ 0x59
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 ff49 	bl	80118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010a42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d001      	beq.n	8010a4c <phhalHw_Pn5180_Lpcd+0x7c>
 8010a48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a4a:	e0ad      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>

        /*Use EEPROM Value for reference value*/
        if((bEPromData[4] & LPCD_REFVAL_CONTROL_MASK) == 0U )
 8010a4c:	7d3b      	ldrb	r3, [r7, #20]
 8010a4e:	f003 0303 	and.w	r3, r3, #3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d109      	bne.n	8010a6a <phhalHw_Pn5180_Lpcd+0x9a>
        {
            /*Get the AGC Ref Value from E2PROM*/
            dwAgcRefVal = (uint8_t)bEPromData[0];
 8010a56:	7c3b      	ldrb	r3, [r7, #16]
 8010a58:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcRefVal |= (uint16_t)((uint16_t)bEPromData[1]<<8U);
 8010a5a:	7c7b      	ldrb	r3, [r7, #17]
 8010a5c:	021b      	lsls	r3, r3, #8
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	461a      	mov	r2, r3
 8010a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a64:	4313      	orrs	r3, r2
 8010a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a68:	e002      	b.n	8010a70 <phhalHw_Pn5180_Lpcd+0xa0>
        }

        else
        {
            /*used the stored reference value */
            dwAgcRefVal = pDataParams->wLpcdReference;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010a6e:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /*Get the AGV Variation threshold*/
        dwLpcdThreshold =(uint8_t)bEPromData[3];
 8010a70:	7cfb      	ldrb	r3, [r7, #19]
 8010a72:	627b      	str	r3, [r7, #36]	@ 0x24

        //Store the read AGC_REF_CONFIG reg value as reference for next comparison
        pDataParams->wLpcdReference = (uint16_t)(dwRegister &(AGC_REF_CONFIG_AGC_GEAR_MASK | AGC_REF_CONFIG_AGC_VALUE_MASK));
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	86da      	strh	r2, [r3, #54]	@ 0x36

        /*If TXOCP is enabled, Then we need to compare gear*/
        if((bOcProtControl[0] & 0x01U) && (dwRegister & AGC_REF_CONFIG_AGC_GEAR_MASK)!= (dwAgcRefVal & AGC_REF_CONFIG_AGC_GEAR_MASK))
 8010a82:	7b3b      	ldrb	r3, [r7, #12]
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d009      	beq.n	8010aa0 <phhalHw_Pn5180_Lpcd+0xd0>
 8010a8c:	69fa      	ldr	r2, [r7, #28]
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a90:	4053      	eors	r3, r2
 8010a92:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d002      	beq.n	8010aa0 <phhalHw_Pn5180_Lpcd+0xd0>
        {
            status = PH_ERR_SUCCESS;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            {
                status = PH_ERR_IO_TIMEOUT;
            }
        }

        break;
 8010a9e:	e073      	b.n	8010b88 <phhalHw_Pn5180_Lpcd+0x1b8>
            dwRegister &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010aa6:	61fb      	str	r3, [r7, #28]
            dwAgcRefVal &= AGC_REF_CONFIG_AGC_VALUE_MASK;
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010aae:	633b      	str	r3, [r7, #48]	@ 0x30
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8010ab0:	69fb      	ldr	r3, [r7, #28]
                (dwRegister - dwAgcRefVal) : (dwAgcRefVal - dwRegister));
 8010ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d203      	bcs.n	8010ac0 <phhalHw_Pn5180_Lpcd+0xf0>
 8010ab8:	69fa      	ldr	r2, [r7, #28]
 8010aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010abc:	1ad3      	subs	r3, r2, r3
 8010abe:	e002      	b.n	8010ac6 <phhalHw_Pn5180_Lpcd+0xf6>
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ac4:	1ad3      	subs	r3, r2, r3
            dwAgcValVariation = ((dwRegister > dwAgcRefVal) ?
 8010ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (dwAgcValVariation > dwLpcdThreshold)
 8010ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d902      	bls.n	8010ad6 <phhalHw_Pn5180_Lpcd+0x106>
                status = PH_ERR_SUCCESS;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010ad4:	e058      	b.n	8010b88 <phhalHw_Pn5180_Lpcd+0x1b8>
                status = PH_ERR_IO_TIMEOUT;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010ada:	e055      	b.n	8010b88 <phhalHw_Pn5180_Lpcd+0x1b8>

    case PHHAL_HW_PN5180_LPCD_MODE_POWERDOWN:
        dwIrqWaitFor = (IRQ_STATUS_LPCD_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8010adc:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8010ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear above Interrupts  */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8010ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ae4:	2103      	movs	r1, #3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 fb5e 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8010aec:	4603      	mov	r3, r0
 8010aee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010af0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d001      	beq.n	8010afa <phhalHw_Pn5180_Lpcd+0x12a>
 8010af6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010af8:	e056      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>
        (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8010b00:	2300      	movs	r3, #0
 8010b02:	2201      	movs	r2, #1
 8010b04:	2100      	movs	r1, #0
 8010b06:	f008 fa99 	bl	801903c <phOsal_EventClear>

        /* Enable IRQ sources */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8010b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fb4a 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8010b14:	4603      	mov	r3, r0
 8010b16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010b18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d001      	beq.n	8010b22 <phhalHw_Pn5180_Lpcd+0x152>
 8010b1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b20:	e042      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>

        PH_CHECK_SUCCESS_FCT(statusTmp,  phhalHw_Pn5180_Instr_SwitchModeLpcd(
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010b26:	4619      	mov	r1, r3
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 ffd0 	bl	8011ace <phhalHw_Pn5180_Instr_SwitchModeLpcd>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010b32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <phhalHw_Pn5180_Lpcd+0x16c>
 8010b38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b3a:	e035      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>
            pDataParams,
            (uint16_t)(pDataParams->wWakeupCounterInMs))
            );

        /* Now wait for the IRQ */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8010b3c:	f107 0318 	add.w	r3, r7, #24
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b44:	2200      	movs	r2, #0
 8010b46:	2101      	movs	r1, #1
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f002 ffc3 	bl	8013ad4 <phhalHw_Pn5180_WaitIrq>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010b52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d001      	beq.n	8010b5c <phhalHw_Pn5180_Lpcd+0x18c>
 8010b58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b5a:	e025      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>
            PH_ON,
            PH_OFF,
            dwIrqWaitFor,
            &dwIrqReg));

        if(0U != (dwIrqReg & IRQ_STATUS_LPCD_IRQ_MASK))
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d002      	beq.n	8010b6c <phhalHw_Pn5180_Lpcd+0x19c>
        {
            status = PH_ERR_SUCCESS;
 8010b66:	2300      	movs	r3, #0
 8010b68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
        }
        break;
 8010b6a:	e00d      	b.n	8010b88 <phhalHw_Pn5180_Lpcd+0x1b8>
        else if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d002      	beq.n	8010b7c <phhalHw_Pn5180_Lpcd+0x1ac>
            status = PH_ERR_INVALID_PARAMETER;
 8010b76:	2321      	movs	r3, #33	@ 0x21
 8010b78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010b7a:	e005      	b.n	8010b88 <phhalHw_Pn5180_Lpcd+0x1b8>
            status = PH_ERR_IO_TIMEOUT;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        break;
 8010b80:	e002      	b.n	8010b88 <phhalHw_Pn5180_Lpcd+0x1b8>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8010b82:	f240 2321 	movw	r3, #545	@ 0x221
 8010b86:	e00f      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8010b88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00b      	beq.n	8010ba6 <phhalHw_Pn5180_Lpcd+0x1d6>
 8010b8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d106      	bne.n	8010ba6 <phhalHw_Pn5180_Lpcd+0x1d6>
 8010b98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	e000      	b.n	8010ba8 <phhalHw_Pn5180_Lpcd+0x1d8>
 8010ba6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3738      	adds	r7, #56	@ 0x38
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <phhalHw_Pn5180_SetListenParameters>:
    uint8_t * pNfcId1,
    uint8_t SelRes,
    uint8_t * pPollingResp,
    uint8_t bNfcId3
    )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b08a      	sub	sp, #40	@ 0x28
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	607a      	str	r2, [r7, #4]
 8010bbc:	70fb      	strb	r3, [r7, #3]
    /* Check all the pointers */
    PH_ASSERT_NULL(pSensRes);
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <phhalHw_Pn5180_SetListenParameters+0x18>
 8010bc4:	2321      	movs	r3, #33	@ 0x21
 8010bc6:	e027      	b.n	8010c18 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pNfcId1);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <phhalHw_Pn5180_SetListenParameters+0x22>
 8010bce:	2321      	movs	r3, #33	@ 0x21
 8010bd0:	e022      	b.n	8010c18 <phhalHw_Pn5180_SetListenParameters+0x68>
    PH_ASSERT_NULL(pPollingResp);
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d101      	bne.n	8010bdc <phhalHw_Pn5180_SetListenParameters+0x2c>
 8010bd8:	2321      	movs	r3, #33	@ 0x21
 8010bda:	e01d      	b.n	8010c18 <phhalHw_Pn5180_SetListenParameters+0x68>
    if(0U != bNfcId3)
    {
        /*Coverity*/;
    }

    (void)memcpy(&aCmd[0], pSensRes, PHHAL_HW_PN5180_SET_LISTEN_SENRES_LEN);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	881b      	ldrh	r3, [r3, #0]
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	823b      	strh	r3, [r7, #16]
    (void)memcpy(&aCmd[2], pNfcId1, PHHAL_HW_PN5180_SET_LISTEN_NFCID1_LEN);
 8010be4:	f107 0310 	add.w	r3, r7, #16
 8010be8:	3302      	adds	r3, #2
 8010bea:	2203      	movs	r2, #3
 8010bec:	6879      	ldr	r1, [r7, #4]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f00e fa19 	bl	801f026 <memcpy>
    (void)memcpy(&aCmd[5], &SelRes, PHHAL_HW_PN5180_SET_LISTEN_SELRES_LEN);
 8010bf4:	78fb      	ldrb	r3, [r7, #3]
 8010bf6:	757b      	strb	r3, [r7, #21]
    (void)memcpy(&aCmd[6], pPollingResp, PHHAL_HW_PN5180_SET_LISTEN_POLLRES_LEN);
 8010bf8:	f107 0310 	add.w	r3, r7, #16
 8010bfc:	3306      	adds	r3, #6
 8010bfe:	2212      	movs	r2, #18
 8010c00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010c02:	4618      	mov	r0, r3
 8010c04:	f00e fa0f 	bl	801f026 <memcpy>

    return phhalHw_Pn5180_Instr_WriteE2Prom(pDataParams, PHHAL_HW_PN5180_SET_LISTEN_E2PROM_ADDR, aCmd, PHHAL_HW_PN5180_SET_LISTEN_LEN);
 8010c08:	f107 0210 	add.w	r2, r7, #16
 8010c0c:	2318      	movs	r3, #24
 8010c0e:	2140      	movs	r1, #64	@ 0x40
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f000 fde5 	bl	80117e0 <phhalHw_Pn5180_Instr_WriteE2Prom>
 8010c16:	4603      	mov	r3, r0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3728      	adds	r7, #40	@ 0x28
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <phhalHw_Pn5180_I18000p3m3Inventory>:
    uint8_t * pBeginRndCmd,             /**< [In] ISO 18000p3m3 BeginRound command frame. This is 17bits i.e., 3 bytes are expected. CRC5 should not be provided. */
    uint8_t bTSprocessing,              /**< [In] TimeSlot processing behavior. */
    uint8_t ** ppRxBuffer,              /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen             /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08e      	sub	sp, #56	@ 0x38
 8010c24:	af02      	add	r7, sp, #8
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	4611      	mov	r1, r2
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	460b      	mov	r3, r1
 8010c30:	71fb      	strb	r3, [r7, #7]
 8010c32:	4613      	mov	r3, r2
 8010c34:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 8010c36:	2300      	movs	r3, #0
 8010c38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint8_t  PH_MEMLOC_REM bTarget = 0U;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    uint8_t  PH_MEMLOC_REM bSession = 0U;
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t PH_MEMLOC_REM dwIrqReg;
    phOsal_EventBits_t PH_MEMLOC_REM dwEventFlags;
    uint8_t    PH_MEMLOC_COUNT bQ = 1;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t    PH_MEMLOC_REM bBuff1, bBuff2;
    uint16_t   PH_MEMLOC_REM index=0;
 8010c50:	2300      	movs	r3, #0
 8010c52:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t    PH_MEMLOC_REM numOfSlots=0;
 8010c54:	2300      	movs	r3, #0
 8010c56:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Check all the pointers */
    PH_ASSERT_NULL(pSelCmd);
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d101      	bne.n	8010c64 <phhalHw_Pn5180_I18000p3m3Inventory+0x44>
 8010c60:	2321      	movs	r3, #33	@ 0x21
 8010c62:	e16b      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(pBeginRndCmd);
 8010c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <phhalHw_Pn5180_I18000p3m3Inventory+0x4e>
 8010c6a:	2321      	movs	r3, #33	@ 0x21
 8010c6c:	e166      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(ppRxBuffer);
 8010c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <phhalHw_Pn5180_I18000p3m3Inventory+0x58>
 8010c74:	2321      	movs	r3, #33	@ 0x21
 8010c76:	e161      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    PH_ASSERT_NULL(wRxBufferLen);
 8010c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d101      	bne.n	8010c82 <phhalHw_Pn5180_I18000p3m3Inventory+0x62>
 8010c7e:	2321      	movs	r3, #33	@ 0x21
 8010c80:	e15c      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if(bSelCmdLen > 0U)
 8010c82:	79fb      	ldrb	r3, [r7, #7]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d02f      	beq.n	8010ce8 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
    {
        bTarget = pSelCmd[0];
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget>> 1U;
 8010c90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c94:	085b      	lsrs	r3, r3, #1
 8010c96:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        bTarget = bTarget&0x07U;
 8010c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c9e:	f003 0307 	and.w	r3, r3, #7
 8010ca2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        bSession = pBeginRndCmd[1]>> 4U;
 8010ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca8:	3301      	adds	r3, #1
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	091b      	lsrs	r3, r3, #4
 8010cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        bSession &= 0x03U;
 8010cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cb6:	f003 0303 	and.w	r3, r3, #3
 8010cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch(bSession)
 8010cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <phhalHw_Pn5180_I18000p3m3Inventory+0xaa>
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	d109      	bne.n	8010cde <phhalHw_Pn5180_I18000p3m3Inventory+0xbe>
        {
        case 0:
        case 2:
        {
            if(bSession != bTarget)
 8010cca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010cce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d007      	beq.n	8010ce6 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
            {
                statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 8010cd6:	f240 2321 	movw	r3, #545	@ 0x221
 8010cda:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 8010cdc:	e003      	b.n	8010ce6 <phhalHw_Pn5180_I18000p3m3Inventory+0xc6>
        }
        default:
            statusTmp = (PH_ERR_INVALID_PARAMETER | PH_COMP_HAL);
 8010cde:	f240 2321 	movw	r3, #545	@ 0x221
 8010ce2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010ce4:	e000      	b.n	8010ce8 <phhalHw_Pn5180_I18000p3m3Inventory+0xc8>
            break;
 8010ce6:	bf00      	nop
        }

    }

    if (pDataParams->bPollGuardTimeFlag == PH_ON)
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d120      	bne.n	8010d34 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
    {
        pDataParams->bPollGuardTimeFlag = PH_OFF;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        /* When there is no errors in preconditions wait till timer expire. */
        if (statusTmp == PH_ERR_SUCCESS)
 8010cfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d110      	bne.n	8010d22 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
        {
            /* Wait for the Poll Guard Time to Expire. */
            (void)phOsal_EventPend(&xEventHandle, (phOsal_EventOpt_t)(E_OS_EVENT_OPT_PEND_SET_ANY | E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT),
 8010d00:	f107 0314 	add.w	r3, r7, #20
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	2322      	movs	r3, #34	@ 0x22
 8010d08:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0c:	2105      	movs	r1, #5
 8010d0e:	488d      	ldr	r0, [pc, #564]	@ (8010f44 <phhalHw_Pn5180_I18000p3m3Inventory+0x324>)
 8010d10:	f008 f912 	bl	8018f38 <phOsal_EventPend>
                    PHOSAL_MAX_DELAY, E_PH_OSAL_EVT_GT_EXP | E_PH_OSAL_EVT_ABORT, &dwEventFlags);
            if(0U != (dwEventFlags & E_PH_OSAL_EVT_ABORT))
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	f003 0320 	and.w	r3, r3, #32
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d001      	beq.n	8010d22 <phhalHw_Pn5180_I18000p3m3Inventory+0x102>
            {
                statusTmp = PH_ERR_ABORTED;
 8010d1e:	2312      	movs	r3, #18
 8010d20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }

        /* Stop Timer */
        PH_CHECK_SUCCESS_FCT(status, phDriver_TimerStop());
 8010d22:	f008 f829 	bl	8018d78 <phDriver_TimerStop>
 8010d26:	4603      	mov	r3, r0
 8010d28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010d2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d001      	beq.n	8010d34 <phhalHw_Pn5180_I18000p3m3Inventory+0x114>
 8010d30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d32:	e103      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    if (statusTmp != PH_ERR_SUCCESS)
 8010d34:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <phhalHw_Pn5180_I18000p3m3Inventory+0x11e>
    {
        return statusTmp;
 8010d3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d3c:	e0fe      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
    }

    dwIrqWaitFor = (IRQ_STATUS_RX_IRQ_MASK | IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8010d3e:	4b82      	ldr	r3, [pc, #520]	@ (8010f48 <phhalHw_Pn5180_I18000p3m3Inventory+0x328>)
 8010d40:	623b      	str	r3, [r7, #32]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, PHHAL_HW_PN5180_IRQ_SET_CLEAR_ALL_MASK));
 8010d42:	4a82      	ldr	r2, [pc, #520]	@ (8010f4c <phhalHw_Pn5180_I18000p3m3Inventory+0x32c>)
 8010d44:	2103      	movs	r1, #3
 8010d46:	68f8      	ldr	r0, [r7, #12]
 8010d48:	f000 fa2e 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010d50:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d001      	beq.n	8010d5a <phhalHw_Pn5180_I18000p3m3Inventory+0x13a>
 8010d56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d58:	e0f0      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Clear the Rf Event. */
    PH_CHECK_SUCCESS_FCT(status, phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL));
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8010d60:	2300      	movs	r3, #0
 8010d62:	2201      	movs	r2, #1
 8010d64:	2100      	movs	r1, #0
 8010d66:	f008 f969 	bl	801903c <phOsal_EventClear>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010d6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d001      	beq.n	8010d78 <phhalHw_Pn5180_I18000p3m3Inventory+0x158>
 8010d74:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d76:	e0e1      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8010d78:	6a3a      	ldr	r2, [r7, #32]
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f000 fa89 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8010d82:	4603      	mov	r3, r0
 8010d84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010d86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <phhalHw_Pn5180_I18000p3m3Inventory+0x170>
 8010d8c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010d8e:	e0d5      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

    if (bTSprocessing == PHHAL_HW_I18000P3M3_GET_MAX_RESPS)
 8010d90:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d101      	bne.n	8010d9c <phhalHw_Pn5180_I18000p3m3Inventory+0x17c>
    {
        bSelCmdLen = 0U;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	71fb      	strb	r3, [r7, #7]
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2Inventory(
 8010d9c:	79b9      	ldrb	r1, [r7, #6]
 8010d9e:	79fa      	ldrb	r2, [r7, #7]
 8010da0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8010da4:	9301      	str	r3, [sp, #4]
 8010da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	460b      	mov	r3, r1
 8010dac:	68b9      	ldr	r1, [r7, #8]
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f000 ff74 	bl	8011c9c <phhalHw_Pn5180_Instr_EpcGen2Inventory>
 8010db4:	4603      	mov	r3, r0
 8010db6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010db8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d001      	beq.n	8010dc2 <phhalHw_Pn5180_I18000p3m3Inventory+0x1a2>
 8010dbe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010dc0:	e0bc      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        pBeginRndCmd,
        bTSprocessing
        ));

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8010dc2:	f107 0318 	add.w	r3, r7, #24
 8010dc6:	9300      	str	r3, [sp, #0]
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	2101      	movs	r1, #1
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f002 fe80 	bl	8013ad4 <phhalHw_Pn5180_WaitIrq>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010dd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <phhalHw_Pn5180_I18000p3m3Inventory+0x1c2>
 8010dde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010de0:	e0ac      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occured */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	f003 0301 	and.w	r3, r3, #1
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f000 8095 	beq.w	8010f18 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f8>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 8010dee:	f107 031c 	add.w	r3, r7, #28
 8010df2:	4619      	mov	r1, r3
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	f000 ffe0 	bl	8011dba <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010dfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d001      	beq.n	8010e08 <phhalHw_Pn5180_I18000p3m3Inventory+0x1e8>
 8010e04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e06:	e099      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 8010e08:	8bbb      	ldrh	r3, [r7, #28]
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e0e:	68f8      	ldr	r0, [r7, #12]
 8010e10:	f001 f829 	bl	8011e66 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 8010e14:	4603      	mov	r3, r0
 8010e16:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010e18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d001      	beq.n	8010e22 <phhalHw_Pn5180_I18000p3m3Inventory+0x202>
 8010e1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e20:	e08c      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>

        *wRxBufferLen = ResultSize;
 8010e22:	8bba      	ldrh	r2, [r7, #28]
 8010e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e26:	801a      	strh	r2, [r3, #0]
        if(ResultSize > 0U)
 8010e28:	8bbb      	ldrh	r3, [r7, #28]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d071      	beq.n	8010f12 <phhalHw_Pn5180_I18000p3m3Inventory+0x2f2>
            /* Response length is 3bytes by default. With 1st byte indicating Response status.
             * If 1st Byte has value '2' it indicates there is no response in any Timeslot,
             * all other values indicate response availability.(As specified in PN5180 Instruction Layer document) */

            /* Extract bQ value from pBeginRndCmd */
            bBuff1 = *(pBeginRndCmd + 1) & (uint8_t)0x7;
 8010e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e30:	3301      	adds	r3, #1
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	f003 0307 	and.w	r3, r3, #7
 8010e38:	77fb      	strb	r3, [r7, #31]
            bBuff2 = *(pBeginRndCmd + 2) & (uint8_t)0x80;
 8010e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e3c:	3302      	adds	r3, #2
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010e44:	77bb      	strb	r3, [r7, #30]

            bQ = (bBuff1 << 1) | (bBuff2 >> 7);
 8010e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	b25a      	sxtb	r2, r3
 8010e4e:	7fbb      	ldrb	r3, [r7, #30]
 8010e50:	09db      	lsrs	r3, r3, #7
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	b25b      	sxtb	r3, r3
 8010e56:	4313      	orrs	r3, r2
 8010e58:	b25b      	sxtb	r3, r3
 8010e5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            index=0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	857b      	strh	r3, [r7, #42]	@ 0x2a
            numOfSlots= 1 << bQ;
 8010e62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010e66:	2201      	movs	r2, #1
 8010e68:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            while(numOfSlots)
 8010e70:	e04a      	b.n	8010f08 <phhalHw_Pn5180_I18000p3m3Inventory+0x2e8>
            {
                if( ( (*ppRxBuffer)[index] == 2 )
 8010e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e78:	4413      	add	r3, r2
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b02      	cmp	r3, #2
 8010e7e:	d112      	bne.n	8010ea6 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8010e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e86:	3301      	adds	r3, #1
 8010e88:	4413      	add	r3, r2
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d10a      	bne.n	8010ea6 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 8010e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e96:	3302      	adds	r3, #2
 8010e98:	4413      	add	r3, r2
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <phhalHw_Pn5180_I18000p3m3Inventory+0x286>
                    )
                {
                    status = PH_ERR_IO_TIMEOUT;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010ea4:	e028      	b.n	8010ef8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                }
                else if( ( (*ppRxBuffer)[index] == 3 )
 8010ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010eac:	4413      	add	r3, r2
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	2b03      	cmp	r3, #3
 8010eb2:	d11e      	bne.n	8010ef2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 1] == 0 )
 8010eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010eba:	3301      	adds	r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d116      	bne.n	8010ef2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    && ( (*ppRxBuffer)[index + 2] == 0 )
 8010ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010eca:	3302      	adds	r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10e      	bne.n	8010ef2 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d2>
                    )
                {
                    status = PH_ERR_COLLISION_ERROR;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    // If TimeSlot behaviour is ONE_TS_ONLY or GET_TAG_HANDLE
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 8010ed8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8010edc:	f003 0301 	and.w	r3, r3, #1
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d11b      	bne.n	8010f1c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                        bTSprocessing & PHHAL_HW_I18000P3M3_GET_TAG_HANDLE)
 8010ee4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8010ee8:	f003 0302 	and.w	r3, r3, #2
                    if(bTSprocessing & PHHAL_HW_I18000P3M3_ONE_TS_ONLY ||
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d115      	bne.n	8010f1c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
 8010ef0:	e002      	b.n	8010ef8 <phhalHw_Pn5180_I18000p3m3Inventory+0x2d8>
                        break;
                    }
                }
                else
                {
                    status = PH_ERR_SUCCESS;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    break;
 8010ef6:	e011      	b.n	8010f1c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
                }
                index=index+3;
 8010ef8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010efa:	3303      	adds	r3, #3
 8010efc:	857b      	strh	r3, [r7, #42]	@ 0x2a
                numOfSlots--;
 8010efe:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010f02:	3b01      	subs	r3, #1
 8010f04:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            while(numOfSlots)
 8010f08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1b0      	bne.n	8010e72 <phhalHw_Pn5180_I18000p3m3Inventory+0x252>
 8010f10:	e004      	b.n	8010f1c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
            }
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 8010f12:	237f      	movs	r3, #127	@ 0x7f
 8010f14:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010f16:	e001      	b.n	8010f1c <phhalHw_Pn5180_I18000p3m3Inventory+0x2fc>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8010f1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00b      	beq.n	8010f3a <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 8010f22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010f24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <phhalHw_Pn5180_I18000p3m3Inventory+0x31a>
 8010f2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	e000      	b.n	8010f3c <phhalHw_Pn5180_I18000p3m3Inventory+0x31c>
 8010f3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3730      	adds	r7, #48	@ 0x30
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	20001870 	.word	0x20001870
 8010f48:	00020001 	.word	0x00020001
 8010f4c:	000fffff 	.word	0x000fffff

08010f50 <phhalHw_Pn5180_18000p3m3ResumeInventory>:
phStatus_t phhalHw_Pn5180_18000p3m3ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams,  /**< [In] Pointer to this layer's parameter structure. */
    uint8_t ** ppRxBuffer,                      /**< [In] Pointer to HAL Rx Buffer containing response from single/multiple tags. */
    uint16_t * wRxBufferLen                     /**< [In] Length of response in hal Rx Buffer. */
    )
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b08a      	sub	sp, #40	@ 0x28
 8010f54:	af02      	add	r7, sp, #8
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	83fb      	strh	r3, [r7, #30]
    uint16_t  PH_MEMLOC_REM ResultSize;
    uint32_t  PH_MEMLOC_REM dwIrqWaitFor;
    uint32_t PH_MEMLOC_REM dwIrqReg;

    /* Check all the pointers */
    PH_ASSERT_NULL(ppRxBuffer);
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d101      	bne.n	8010f6a <phhalHw_Pn5180_18000p3m3ResumeInventory+0x1a>
 8010f66:	2321      	movs	r3, #33	@ 0x21
 8010f68:	e07d      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
    PH_ASSERT_NULL(wRxBufferLen);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d101      	bne.n	8010f74 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x24>
 8010f70:	2321      	movs	r3, #33	@ 0x21
 8010f72:	e078      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    dwIrqWaitFor =  (IRQ_STATUS_RX_IRQ_MASK| IRQ_STATUS_GENERAL_ERROR_IRQ_MASK);
 8010f74:	4b3e      	ldr	r3, [pc, #248]	@ (8011070 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x120>)
 8010f76:	61bb      	str	r3, [r7, #24]

    /* Clear Interrupts  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwIrqWaitFor));
 8010f78:	69ba      	ldr	r2, [r7, #24]
 8010f7a:	2103      	movs	r1, #3
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f000 f913 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8010f82:	4603      	mov	r3, r0
 8010f84:	82fb      	strh	r3, [r7, #22]
 8010f86:	8afb      	ldrh	r3, [r7, #22]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x40>
 8010f8c:	8afb      	ldrh	r3, [r7, #22]
 8010f8e:	e06a      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    (void)phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8010f96:	2300      	movs	r3, #0
 8010f98:	2201      	movs	r2, #1
 8010f9a:	2100      	movs	r1, #0
 8010f9c:	f008 f84e 	bl	801903c <phOsal_EventClear>

    /* Enable IRQ sources */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, IRQ_ENABLE, dwIrqWaitFor));
 8010fa0:	69ba      	ldr	r2, [r7, #24]
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f000 f975 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 8010faa:	4603      	mov	r3, r0
 8010fac:	82fb      	strh	r3, [r7, #22]
 8010fae:	8afb      	ldrh	r3, [r7, #22]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x68>
 8010fb4:	8afb      	ldrh	r3, [r7, #22]
 8010fb6:	e056      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(pDataParams));
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f000 ffb4 	bl	8011f26 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	82fb      	strh	r3, [r7, #22]
 8010fc2:	8afb      	ldrh	r3, [r7, #22]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <phhalHw_Pn5180_18000p3m3ResumeInventory+0x7c>
 8010fc8:	8afb      	ldrh	r3, [r7, #22]
 8010fca:	e04c      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 8010fcc:	f107 0310 	add.w	r3, r7, #16
 8010fd0:	9300      	str	r3, [sp, #0]
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	2101      	movs	r1, #1
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f002 fd7b 	bl	8013ad4 <phhalHw_Pn5180_WaitIrq>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	82fb      	strh	r3, [r7, #22]
 8010fe2:	8afb      	ldrh	r3, [r7, #22]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <phhalHw_Pn5180_18000p3m3ResumeInventory+0x9c>
 8010fe8:	8afb      	ldrh	r3, [r7, #22]
 8010fea:	e03c      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	f003 0301 	and.w	r3, r3, #1
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d025      	beq.n	8011042 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf2>
    {
        /*Retrieve the result size and result*/
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize( pDataParams, &ResultSize));
 8010ff6:	f107 0314 	add.w	r3, r7, #20
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	68f8      	ldr	r0, [r7, #12]
 8010ffe:	f000 fedc 	bl	8011dba <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>
 8011002:	4603      	mov	r3, r0
 8011004:	82fb      	strh	r3, [r7, #22]
 8011006:	8afb      	ldrh	r3, [r7, #22]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xc0>
 801100c:	8afb      	ldrh	r3, [r7, #22]
 801100e:	e02a      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_EpcGen2RetrieveResult( pDataParams, ppRxBuffer, ResultSize));
 8011010:	8abb      	ldrh	r3, [r7, #20]
 8011012:	461a      	mov	r2, r3
 8011014:	68b9      	ldr	r1, [r7, #8]
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f000 ff25 	bl	8011e66 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>
 801101c:	4603      	mov	r3, r0
 801101e:	82fb      	strh	r3, [r7, #22]
 8011020:	8afb      	ldrh	r3, [r7, #22]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d001      	beq.n	801102a <phhalHw_Pn5180_18000p3m3ResumeInventory+0xda>
 8011026:	8afb      	ldrh	r3, [r7, #22]
 8011028:	e01d      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>

        *wRxBufferLen = ResultSize;
 801102a:	8aba      	ldrh	r2, [r7, #20]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	801a      	strh	r2, [r3, #0]

        if(ResultSize>0U)
 8011030:	8abb      	ldrh	r3, [r7, #20]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d002      	beq.n	801103c <phhalHw_Pn5180_18000p3m3ResumeInventory+0xec>
        {
            status = PH_ERR_SUCCESS;
 8011036:	2300      	movs	r3, #0
 8011038:	83fb      	strh	r3, [r7, #30]
 801103a:	e004      	b.n	8011046 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
        else
        {
            status = PH_ERR_INTERNAL_ERROR;
 801103c:	237f      	movs	r3, #127	@ 0x7f
 801103e:	83fb      	strh	r3, [r7, #30]
 8011040:	e001      	b.n	8011046 <phhalHw_Pn5180_18000p3m3ResumeInventory+0xf6>
        }
    }
    else
    {
        status = PH_ERR_IO_TIMEOUT;
 8011042:	2301      	movs	r3, #1
 8011044:	83fb      	strh	r3, [r7, #30]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8011046:	8bfb      	ldrh	r3, [r7, #30]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00b      	beq.n	8011064 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 801104c:	8bfb      	ldrh	r3, [r7, #30]
 801104e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011052:	2b00      	cmp	r3, #0
 8011054:	d106      	bne.n	8011064 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x114>
 8011056:	8bfb      	ldrh	r3, [r7, #30]
 8011058:	b2db      	uxtb	r3, r3
 801105a:	b29b      	uxth	r3, r3
 801105c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011060:	b29b      	uxth	r3, r3
 8011062:	e000      	b.n	8011066 <phhalHw_Pn5180_18000p3m3ResumeInventory+0x116>
 8011064:	8bfb      	ldrh	r3, [r7, #30]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3720      	adds	r7, #32
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	00020001 	.word	0x00020001

08011074 <phhalHw_Pn5180_EventWait>:

phStatus_t phhalHw_Pn5180_EventWait(phhalHw_Pn5180_DataParams_t * pDataParams, uint32_t dwEventTimeout)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af02      	add	r7, sp, #8
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
    return phOsal_EventPend((volatile phOsal_Event_t *)(&pDataParams->HwEventObj.EventHandle), E_OS_EVENT_OPT_PEND_SET_ANY, dwEventTimeout,
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 8011084:	2300      	movs	r3, #0
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	2321      	movs	r3, #33	@ 0x21
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	2101      	movs	r1, #1
 801108e:	f007 ff53 	bl	8018f38 <phOsal_EventPend>
 8011092:	4603      	mov	r3, r0
        (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
}
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <phhalHw_Pn5180_EventConsume>:

phStatus_t phhalHw_Pn5180_EventConsume(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
    return phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, (E_PH_OSAL_EVT_RF | E_PH_OSAL_EVT_ABORT), NULL);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80110aa:	2300      	movs	r3, #0
 80110ac:	2221      	movs	r2, #33	@ 0x21
 80110ae:	2100      	movs	r1, #0
 80110b0:	f007 ffc4 	bl	801903c <phOsal_EventClear>
 80110b4:	4603      	mov	r3, r0
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
	...

080110c0 <phhalHw_Pn5180_Reset>:
    /* Delete event */
    return phOsal_EventDelete(&pDataParams->HwEventObj.EventHandle);
}

static void phhalHw_Pn5180_Reset(void)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	af00      	add	r7, sp, #0
    /* As per current design, phDriver will not be implemented on PC Host side */
#ifndef _WIN32
    /* Send the reset pulse to FE to reset. */
    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 80110c4:	2201      	movs	r2, #1
 80110c6:	2120      	movs	r1, #32
 80110c8:	4810      	ldr	r0, [pc, #64]	@ (801110c <phhalHw_Pn5180_Reset+0x4c>)
 80110ca:	f007 fdf9 	bl	8018cc0 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 80110ce:	2200      	movs	r2, #0
 80110d0:	2102      	movs	r1, #2
 80110d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80110d6:	f007 fe05 	bl	8018ce4 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERDOWN_LEVEL);
 80110da:	2200      	movs	r2, #0
 80110dc:	2120      	movs	r1, #32
 80110de:	480b      	ldr	r0, [pc, #44]	@ (801110c <phhalHw_Pn5180_Reset+0x4c>)
 80110e0:	f007 fdee 	bl	8018cc0 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 80110e4:	2200      	movs	r2, #0
 80110e6:	2102      	movs	r1, #2
 80110e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80110ec:	f007 fdfa 	bl	8018ce4 <phDriver_TimerStart>

    phDriver_PinWrite(PHDRIVER_PIN_RESET, RESET_POWERUP_LEVEL);
 80110f0:	2201      	movs	r2, #1
 80110f2:	2120      	movs	r1, #32
 80110f4:	4805      	ldr	r0, [pc, #20]	@ (801110c <phhalHw_Pn5180_Reset+0x4c>)
 80110f6:	f007 fde3 	bl	8018cc0 <phDriver_PinWrite>
    /* delay of ~2 ms */
    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, PHHAL_HW_PN5180_RESET_DELAY_MILLI_SECS, NULL);
 80110fa:	2200      	movs	r2, #0
 80110fc:	2102      	movs	r1, #2
 80110fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011102:	f007 fdef 	bl	8018ce4 <phDriver_TimerStart>
#endif /*_WIN32*/
}
 8011106:	bf00      	nop
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	48000400 	.word	0x48000400

08011110 <phhalHw_Pn5180_WriteSSEL>:

#ifndef _WIN32
static void phhalHw_Pn5180_WriteSSEL(phbalReg_Type_t *pBalDataParams, uint8_t bValue)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
    if (pBalDataParams->bBalType == PHBAL_REG_TYPE_SPI)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	789b      	ldrb	r3, [r3, #2]
 8011120:	2b01      	cmp	r3, #1
 8011122:	d107      	bne.n	8011134 <phhalHw_Pn5180_WriteSSEL+0x24>
    {
        phDriver_PinWrite(PHDRIVER_PIN_SSEL, bValue);
 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	461a      	mov	r2, r3
 8011128:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801112c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011130:	f007 fdc6 	bl	8018cc0 <phDriver_PinWrite>
    }
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <phhalHw_Pn5180_Instr_GetInstrBuffer>:
static void phhalHw_Pn5180_Instr_GetInstrBuffer(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen
    )
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
    /*Return Instr buffer*/
    *pTxBuffer =pDataParams->pInstrBuffer;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f103 027a 	add.w	r2, r3, #122	@ 0x7a
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	601a      	str	r2, [r3, #0]
    /* Return stored length */
    *pTxBufferLen = INSTR_BUFFER_SIZE;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8011158:	801a      	strh	r2, [r3, #0]
}
 801115a:	bf00      	nop
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
	...

08011168 <phhalHw_Pn5180_Check_Reg_Readonly>:
}

static phStatus_t phhalHw_Pn5180_Check_Reg_Readonly(
    uint8_t bRegister
    )
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	4603      	mov	r3, r0
 8011170:	71fb      	strb	r3, [r7, #7]
    uint8_t     PH_MEMLOC_REM bIndex;

    /* Validate the registers */
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 8011172:	2300      	movs	r3, #0
 8011174:	73fb      	strb	r3, [r7, #15]
 8011176:	e00b      	b.n	8011190 <phhalHw_Pn5180_Check_Reg_Readonly+0x28>
    {
        /* Check if the register is read-only */
        if (bRegister == phhalHw_Pn5180_Instr_RO_Reg_Table[bIndex])
 8011178:	7bfb      	ldrb	r3, [r7, #15]
 801117a:	4a0a      	ldr	r2, [pc, #40]	@ (80111a4 <phhalHw_Pn5180_Check_Reg_Readonly+0x3c>)
 801117c:	5cd3      	ldrb	r3, [r2, r3]
 801117e:	79fa      	ldrb	r2, [r7, #7]
 8011180:	429a      	cmp	r2, r3
 8011182:	d102      	bne.n	801118a <phhalHw_Pn5180_Check_Reg_Readonly+0x22>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_READ_WRITE_ERROR, PH_COMP_HAL);
 8011184:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011188:	e006      	b.n	8011198 <phhalHw_Pn5180_Check_Reg_Readonly+0x30>
    for (bIndex = 0U; bIndex < sizeof(phhalHw_Pn5180_Instr_RO_Reg_Table); bIndex++)
 801118a:	7bfb      	ldrb	r3, [r7, #15]
 801118c:	3301      	adds	r3, #1
 801118e:	73fb      	strb	r3, [r7, #15]
 8011190:	7bfb      	ldrb	r3, [r7, #15]
 8011192:	2b06      	cmp	r3, #6
 8011194:	d9f0      	bls.n	8011178 <phhalHw_Pn5180_Check_Reg_Readonly+0x10>
        }
    }
    return PH_ERR_SUCCESS;
 8011196:	2300      	movs	r3, #0

}
 8011198:	4618      	mov	r0, r3
 801119a:	3714      	adds	r7, #20
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	080220d0 	.word	0x080220d0

080111a8 <phhalHw_Pn5180_Instr_WriteRegister>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwValue
    )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b08a      	sub	sp, #40	@ 0x28
 80111ac:	af02      	add	r7, sp, #8
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	460b      	mov	r3, r1
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d006      	beq.n	80111ca <phhalHw_Pn5180_Instr_WriteRegister+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80111bc:	7afb      	ldrb	r3, [r7, #11]
 80111be:	2b43      	cmp	r3, #67	@ 0x43
 80111c0:	d906      	bls.n	80111d0 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80111c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	db02      	blt.n	80111d0 <phhalHw_Pn5180_Instr_WriteRegister+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80111ca:	f240 2321 	movw	r3, #545	@ 0x221
 80111ce:	e05d      	b.n	801128c <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80111d0:	7afb      	ldrb	r3, [r7, #11]
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff ffc8 	bl	8011168 <phhalHw_Pn5180_Check_Reg_Readonly>
 80111d8:	4603      	mov	r3, r0
 80111da:	83fb      	strh	r3, [r7, #30]
 80111dc:	8bfb      	ldrh	r3, [r7, #30]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <phhalHw_Pn5180_Instr_WriteRegister+0x3e>
 80111e2:	8bfb      	ldrh	r3, [r7, #30]
 80111e4:	e052      	b.n	801128c <phhalHw_Pn5180_Instr_WriteRegister+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80111e6:	2300      	movs	r3, #0
 80111e8:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER;
 80111ea:	7f7b      	ldrb	r3, [r7, #29]
 80111ec:	1c5a      	adds	r2, r3, #1
 80111ee:	777a      	strb	r2, [r7, #29]
 80111f0:	3320      	adds	r3, #32
 80111f2:	443b      	add	r3, r7
 80111f4:	2200      	movs	r2, #0
 80111f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80111fa:	7f7b      	ldrb	r3, [r7, #29]
 80111fc:	1c5a      	adds	r2, r3, #1
 80111fe:	777a      	strb	r2, [r7, #29]
 8011200:	3320      	adds	r3, #32
 8011202:	443b      	add	r3, r7
 8011204:	7afa      	ldrb	r2, [r7, #11]
 8011206:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwValue & 0xFFU);
 801120a:	7f7b      	ldrb	r3, [r7, #29]
 801120c:	1c5a      	adds	r2, r3, #1
 801120e:	777a      	strb	r2, [r7, #29]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	b2d2      	uxtb	r2, r2
 8011214:	3320      	adds	r3, #32
 8011216:	443b      	add	r3, r7
 8011218:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 8U) & 0xFFU);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	0a1a      	lsrs	r2, r3, #8
 8011220:	7f7b      	ldrb	r3, [r7, #29]
 8011222:	1c59      	adds	r1, r3, #1
 8011224:	7779      	strb	r1, [r7, #29]
 8011226:	b2d2      	uxtb	r2, r2
 8011228:	3320      	adds	r3, #32
 801122a:	443b      	add	r3, r7
 801122c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 16U) & 0xFFU);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	0c1a      	lsrs	r2, r3, #16
 8011234:	7f7b      	ldrb	r3, [r7, #29]
 8011236:	1c59      	adds	r1, r3, #1
 8011238:	7779      	strb	r1, [r7, #29]
 801123a:	b2d2      	uxtb	r2, r2
 801123c:	3320      	adds	r3, #32
 801123e:	443b      	add	r3, r7
 8011240:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwValue >> 24U) & 0xFFU);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	0e1a      	lsrs	r2, r3, #24
 8011248:	7f7b      	ldrb	r3, [r7, #29]
 801124a:	1c59      	adds	r1, r3, #1
 801124c:	7779      	strb	r1, [r7, #29]
 801124e:	b2d2      	uxtb	r2, r2
 8011250:	3320      	adds	r3, #32
 8011252:	443b      	add	r3, r7
 8011254:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8011258:	2300      	movs	r3, #0
 801125a:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801125c:	7f7b      	ldrb	r3, [r7, #29]
 801125e:	b29a      	uxth	r2, r3
 8011260:	7f3b      	ldrb	r3, [r7, #28]
 8011262:	b298      	uxth	r0, r3
 8011264:	f107 0114 	add.w	r1, r7, #20
 8011268:	f107 031a 	add.w	r3, r7, #26
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	f107 0310 	add.w	r3, r7, #16
 8011272:	9300      	str	r3, [sp, #0]
 8011274:	4603      	mov	r3, r0
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f7ff f87e 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 801127c:	4603      	mov	r3, r0
 801127e:	83fb      	strh	r3, [r7, #30]
 8011280:	8bfb      	ldrh	r3, [r7, #30]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <phhalHw_Pn5180_Instr_WriteRegister+0xe2>
 8011286:	8bfb      	ldrh	r3, [r7, #30]
 8011288:	e000      	b.n	801128c <phhalHw_Pn5180_Instr_WriteRegister+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	3720      	adds	r7, #32
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterOrMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b08a      	sub	sp, #40	@ 0x28
 8011298:	af02      	add	r7, sp, #8
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	460b      	mov	r3, r1
 801129e:	607a      	str	r2, [r7, #4]
 80112a0:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    * Check if the Register address is invalid
    * */
    if ( (NULL == pDataParams)\
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d006      	beq.n	80112b6 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80112a8:	7afb      	ldrb	r3, [r7, #11]
 80112aa:	2b43      	cmp	r3, #67	@ 0x43
 80112ac:	d906      	bls.n	80112bc <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80112ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	db02      	blt.n	80112bc <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80112b6:	f240 2321 	movw	r3, #545	@ 0x221
 80112ba:	e05d      	b.n	8011378 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80112bc:	7afb      	ldrb	r3, [r7, #11]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7ff ff52 	bl	8011168 <phhalHw_Pn5180_Check_Reg_Readonly>
 80112c4:	4603      	mov	r3, r0
 80112c6:	83fb      	strh	r3, [r7, #30]
 80112c8:	8bfb      	ldrh	r3, [r7, #30]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0x3e>
 80112ce:	8bfb      	ldrh	r3, [r7, #30]
 80112d0:	e052      	b.n	8011378 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80112d2:	2300      	movs	r3, #0
 80112d4:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_OR_MASK;
 80112d6:	7f7b      	ldrb	r3, [r7, #29]
 80112d8:	1c5a      	adds	r2, r3, #1
 80112da:	777a      	strb	r2, [r7, #29]
 80112dc:	3320      	adds	r3, #32
 80112de:	443b      	add	r3, r7
 80112e0:	2201      	movs	r2, #1
 80112e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80112e6:	7f7b      	ldrb	r3, [r7, #29]
 80112e8:	1c5a      	adds	r2, r3, #1
 80112ea:	777a      	strb	r2, [r7, #29]
 80112ec:	3320      	adds	r3, #32
 80112ee:	443b      	add	r3, r7
 80112f0:	7afa      	ldrb	r2, [r7, #11]
 80112f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 80112f6:	7f7b      	ldrb	r3, [r7, #29]
 80112f8:	1c5a      	adds	r2, r3, #1
 80112fa:	777a      	strb	r2, [r7, #29]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	b2d2      	uxtb	r2, r2
 8011300:	3320      	adds	r3, #32
 8011302:	443b      	add	r3, r7
 8011304:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	0a1a      	lsrs	r2, r3, #8
 801130c:	7f7b      	ldrb	r3, [r7, #29]
 801130e:	1c59      	adds	r1, r3, #1
 8011310:	7779      	strb	r1, [r7, #29]
 8011312:	b2d2      	uxtb	r2, r2
 8011314:	3320      	adds	r3, #32
 8011316:	443b      	add	r3, r7
 8011318:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	0c1a      	lsrs	r2, r3, #16
 8011320:	7f7b      	ldrb	r3, [r7, #29]
 8011322:	1c59      	adds	r1, r3, #1
 8011324:	7779      	strb	r1, [r7, #29]
 8011326:	b2d2      	uxtb	r2, r2
 8011328:	3320      	adds	r3, #32
 801132a:	443b      	add	r3, r7
 801132c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	0e1a      	lsrs	r2, r3, #24
 8011334:	7f7b      	ldrb	r3, [r7, #29]
 8011336:	1c59      	adds	r1, r3, #1
 8011338:	7779      	strb	r1, [r7, #29]
 801133a:	b2d2      	uxtb	r2, r2
 801133c:	3320      	adds	r3, #32
 801133e:	443b      	add	r3, r7
 8011340:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8011344:	2300      	movs	r3, #0
 8011346:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011348:	7f7b      	ldrb	r3, [r7, #29]
 801134a:	b29a      	uxth	r2, r3
 801134c:	7f3b      	ldrb	r3, [r7, #28]
 801134e:	b298      	uxth	r0, r3
 8011350:	f107 0114 	add.w	r1, r7, #20
 8011354:	f107 031a 	add.w	r3, r7, #26
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	f107 0310 	add.w	r3, r7, #16
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	4603      	mov	r3, r0
 8011362:	68f8      	ldr	r0, [r7, #12]
 8011364:	f7ff f808 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011368:	4603      	mov	r3, r0
 801136a:	83fb      	strh	r3, [r7, #30]
 801136c:	8bfb      	ldrh	r3, [r7, #30]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d001      	beq.n	8011376 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe2>
 8011372:	8bfb      	ldrh	r3, [r7, #30]
 8011374:	e000      	b.n	8011378 <phhalHw_Pn5180_Instr_WriteRegisterOrMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3720      	adds	r7, #32
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterAndMask(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t dwMask
    )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08a      	sub	sp, #40	@ 0x28
 8011384:	af02      	add	r7, sp, #8
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	460b      	mov	r3, r1
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_REM bDataBuffer[6];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams
    *  Check if the Register address is invalid */
    if ( (NULL == pDataParams)\
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d006      	beq.n	80113a2 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x22>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 8011394:	7afb      	ldrb	r3, [r7, #11]
 8011396:	2b43      	cmp	r3, #67	@ 0x43
 8011398:	d906      	bls.n	80113a8 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 801139a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	db02      	blt.n	80113a8 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80113a2:	f240 2321 	movw	r3, #545	@ 0x221
 80113a6:	e05d      	b.n	8011464 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
    }

    /* Check for read-only registers */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(bRegister));
 80113a8:	7afb      	ldrb	r3, [r7, #11]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ff fedc 	bl	8011168 <phhalHw_Pn5180_Check_Reg_Readonly>
 80113b0:	4603      	mov	r3, r0
 80113b2:	83fb      	strh	r3, [r7, #30]
 80113b4:	8bfb      	ldrh	r3, [r7, #30]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0x3e>
 80113ba:	8bfb      	ldrh	r3, [r7, #30]
 80113bc:	e052      	b.n	8011464 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>

    /* Build the command frame */
    wBufferLength = 0U;
 80113be:	2300      	movs	r3, #0
 80113c0:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_AND_MASK;
 80113c2:	7f7b      	ldrb	r3, [r7, #29]
 80113c4:	1c5a      	adds	r2, r3, #1
 80113c6:	777a      	strb	r2, [r7, #29]
 80113c8:	3320      	adds	r3, #32
 80113ca:	443b      	add	r3, r7
 80113cc:	2202      	movs	r2, #2
 80113ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 80113d2:	7f7b      	ldrb	r3, [r7, #29]
 80113d4:	1c5a      	adds	r2, r3, #1
 80113d6:	777a      	strb	r2, [r7, #29]
 80113d8:	3320      	adds	r3, #32
 80113da:	443b      	add	r3, r7
 80113dc:	7afa      	ldrb	r2, [r7, #11]
 80113de:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)(dwMask & 0xFFU);
 80113e2:	7f7b      	ldrb	r3, [r7, #29]
 80113e4:	1c5a      	adds	r2, r3, #1
 80113e6:	777a      	strb	r2, [r7, #29]
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	b2d2      	uxtb	r2, r2
 80113ec:	3320      	adds	r3, #32
 80113ee:	443b      	add	r3, r7
 80113f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* LSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 8U) & 0xFFU);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	0a1a      	lsrs	r2, r3, #8
 80113f8:	7f7b      	ldrb	r3, [r7, #29]
 80113fa:	1c59      	adds	r1, r3, #1
 80113fc:	7779      	strb	r1, [r7, #29]
 80113fe:	b2d2      	uxtb	r2, r2
 8011400:	3320      	adds	r3, #32
 8011402:	443b      	add	r3, r7
 8011404:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB1 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 16U) & 0xFFU);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	0c1a      	lsrs	r2, r3, #16
 801140c:	7f7b      	ldrb	r3, [r7, #29]
 801140e:	1c59      	adds	r1, r3, #1
 8011410:	7779      	strb	r1, [r7, #29]
 8011412:	b2d2      	uxtb	r2, r2
 8011414:	3320      	adds	r3, #32
 8011416:	443b      	add	r3, r7
 8011418:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* MSB2 */
    bDataBuffer[wBufferLength++] = (uint8_t)((dwMask >> 24U) & 0xFFU);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	0e1a      	lsrs	r2, r3, #24
 8011420:	7f7b      	ldrb	r3, [r7, #29]
 8011422:	1c59      	adds	r1, r3, #1
 8011424:	7779      	strb	r1, [r7, #29]
 8011426:	b2d2      	uxtb	r2, r2
 8011428:	3320      	adds	r3, #32
 801142a:	443b      	add	r3, r7
 801142c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected */
    bNumExpBytes = 0U;
 8011430:	2300      	movs	r3, #0
 8011432:	773b      	strb	r3, [r7, #28]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011434:	7f7b      	ldrb	r3, [r7, #29]
 8011436:	b29a      	uxth	r2, r3
 8011438:	7f3b      	ldrb	r3, [r7, #28]
 801143a:	b298      	uxth	r0, r3
 801143c:	f107 0114 	add.w	r1, r7, #20
 8011440:	f107 031a 	add.w	r3, r7, #26
 8011444:	9301      	str	r3, [sp, #4]
 8011446:	f107 0310 	add.w	r3, r7, #16
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	4603      	mov	r3, r0
 801144e:	68f8      	ldr	r0, [r7, #12]
 8011450:	f7fe ff92 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011454:	4603      	mov	r3, r0
 8011456:	83fb      	strh	r3, [r7, #30]
 8011458:	8bfb      	ldrh	r3, [r7, #30]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d001      	beq.n	8011462 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe2>
 801145e:	8bfb      	ldrh	r3, [r7, #30]
 8011460:	e000      	b.n	8011464 <phhalHw_Pn5180_Instr_WriteRegisterAndMask+0xe4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8011462:	2300      	movs	r3, #0
}
 8011464:	4618      	mov	r0, r3
 8011466:	3720      	adds	r7, #32
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>:
phStatus_t phhalHw_Pn5180_Instr_WriteRegisterMultiple(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegTypeValueSets,
    uint16_t wSizeOfRegTypeValueSets
    )
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08c      	sub	sp, #48	@ 0x30
 8011470:	af02      	add	r7, sp, #8
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	4613      	mov	r3, r2
 8011478:	80fb      	strh	r3, [r7, #6]
    uint8_t     PH_MEMLOC_REM bReg_offset;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 801147e:	2300      	movs	r3, #0
 8011480:	82fb      	strh	r3, [r7, #22]
    * pDataParams
    * pRegTypeValueSets
    * wSizeOfRegTypeValueSets
    * wSizeOfRegTypeValueSets for modulus of 6. One set of write register is of 6 byte*/

    if ((NULL == pDataParams) \
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d016      	beq.n	80114b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (NULL == pRegTypeValueSets) \
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d013      	beq.n	80114b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets > PHHAL_HW_PN5180_MAX_REGISTER_TYPE_VALUE_SET) \
 801148e:	88fb      	ldrh	r3, [r7, #6]
 8011490:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8011494:	d80f      	bhi.n	80114b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || (wSizeOfRegTypeValueSets < PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) \
 8011496:	88fb      	ldrh	r3, [r7, #6]
 8011498:	2b05      	cmp	r3, #5
 801149a:	d90c      	bls.n	80114b6 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x4a>
        || ( (wSizeOfRegTypeValueSets % PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET) != 0U ) \
 801149c:	88fa      	ldrh	r2, [r7, #6]
 801149e:	4b4b      	ldr	r3, [pc, #300]	@ (80115cc <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x160>)
 80114a0:	fba3 1302 	umull	r1, r3, r3, r2
 80114a4:	0899      	lsrs	r1, r3, #2
 80114a6:	460b      	mov	r3, r1
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	440b      	add	r3, r1
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	1ad3      	subs	r3, r2, r3
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d002      	beq.n	80114bc <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x50>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80114b6:	f240 2321 	movw	r3, #545	@ 0x221
 80114ba:	e082      	b.n	80115c2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Validate if the register addresses given in pRegTypeValueSets buffer are not READ only and have valid addresses */
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 80114bc:	2300      	movs	r3, #0
 80114be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114c2:	e038      	b.n	8011536 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xca>
    {
        /* Check for read-only registers */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Check_Reg_Readonly(*(pRegTypeValueSets+bReg_offset)));
 80114c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114c8:	68ba      	ldr	r2, [r7, #8]
 80114ca:	4413      	add	r3, r2
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7ff fe4a 	bl	8011168 <phhalHw_Pn5180_Check_Reg_Readonly>
 80114d4:	4603      	mov	r3, r0
 80114d6:	843b      	strh	r3, [r7, #32]
 80114d8:	8c3b      	ldrh	r3, [r7, #32]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d001      	beq.n	80114e2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x76>
 80114de:	8c3b      	ldrh	r3, [r7, #32]
 80114e0:	e06f      	b.n	80115c2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>

        /* Check if the Register address is invalid */
        if((*(pRegTypeValueSets+bReg_offset) >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80114e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114e6:	68ba      	ldr	r2, [r7, #8]
 80114e8:	4413      	add	r3, r2
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	2b43      	cmp	r3, #67	@ 0x43
 80114ee:	d90a      	bls.n	8011506 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
            && (*(pRegTypeValueSets+bReg_offset) <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80114f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	4413      	add	r3, r2
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	b25b      	sxtb	r3, r3
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	db02      	blt.n	8011506 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x9a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011500:	f240 2321 	movw	r3, #545	@ 0x221
 8011504:	e05d      	b.n	80115c2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        }

        /* Check if the operation TYPE are valid -  Type will be present after register address in every set */
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 8011506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801150a:	3301      	adds	r3, #1
 801150c:	68ba      	ldr	r2, [r7, #8]
 801150e:	4413      	add	r3, r2
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d007      	beq.n	8011526 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xba>
            ( *(pRegTypeValueSets+bReg_offset+1U) >  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK) )
 8011516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801151a:	3301      	adds	r3, #1
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	4413      	add	r3, r2
 8011520:	781b      	ldrb	r3, [r3, #0]
        if ( ( *(pRegTypeValueSets+bReg_offset+1U) <  PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE ) || \
 8011522:	2b03      	cmp	r3, #3
 8011524:	d902      	bls.n	801152c <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xc0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011526:	f240 2321 	movw	r3, #545	@ 0x221
 801152a:	e04a      	b.n	80115c2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    for (bReg_offset = 0U; bReg_offset < wSizeOfRegTypeValueSets; bReg_offset += PHHAL_HW_PN5180_MIN_REGISTER_TYPE_VALUE_SET)
 801152c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011530:	3306      	adds	r3, #6
 8011532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801153a:	b29b      	uxth	r3, r3
 801153c:	88fa      	ldrh	r2, [r7, #6]
 801153e:	429a      	cmp	r2, r3
 8011540:	d8c0      	bhi.n	80114c4 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x58>
        }
    }
    /* Get Buffer */

    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8011542:	f107 0216 	add.w	r2, r7, #22
 8011546:	f107 0318 	add.w	r3, r7, #24
 801154a:	4619      	mov	r1, r3
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	f7ff fdf5 	bl	801113c <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (wSizeOfRegTypeValueSets + 1U))
 8011552:	8afb      	ldrh	r3, [r7, #22]
 8011554:	461a      	mov	r2, r3
 8011556:	88fb      	ldrh	r3, [r7, #6]
 8011558:	3301      	adds	r3, #1
 801155a:	429a      	cmp	r2, r3
 801155c:	d202      	bcs.n	8011564 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0xf8>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801155e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011562:	e02e      	b.n	80115c2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011564:	2300      	movs	r3, #0
 8011566:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_REGISTER_MULTIPLE;
 8011568:	69ba      	ldr	r2, [r7, #24]
 801156a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801156c:	1c59      	adds	r1, r3, #1
 801156e:	84b9      	strh	r1, [r7, #36]	@ 0x24
 8011570:	4413      	add	r3, r2
 8011572:	2203      	movs	r2, #3
 8011574:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pRegTypeValueSets, wSizeOfRegTypeValueSets);
 8011576:	69ba      	ldr	r2, [r7, #24]
 8011578:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801157a:	4413      	add	r3, r2
 801157c:	88fa      	ldrh	r2, [r7, #6]
 801157e:	68b9      	ldr	r1, [r7, #8]
 8011580:	4618      	mov	r0, r3
 8011582:	f00d fd50 	bl	801f026 <memcpy>
    wBufferLength+= wSizeOfRegTypeValueSets;
 8011586:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011588:	88fb      	ldrh	r3, [r7, #6]
 801158a:	4413      	add	r3, r2
 801158c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* No Response expected */
    bNumExpBytes = 0U;
 801158e:	2300      	movs	r3, #0
 8011590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011594:	69b9      	ldr	r1, [r7, #24]
 8011596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801159a:	b298      	uxth	r0, r3
 801159c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801159e:	f107 031e 	add.w	r3, r7, #30
 80115a2:	9301      	str	r3, [sp, #4]
 80115a4:	f107 0314 	add.w	r3, r7, #20
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	4603      	mov	r3, r0
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f7fe fee3 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 80115b2:	4603      	mov	r3, r0
 80115b4:	843b      	strh	r3, [r7, #32]
 80115b6:	8c3b      	ldrh	r3, [r7, #32]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x154>
 80115bc:	8c3b      	ldrh	r3, [r7, #32]
 80115be:	e000      	b.n	80115c2 <phhalHw_Pn5180_Instr_WriteRegisterMultiple+0x156>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3728      	adds	r7, #40	@ 0x28
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	aaaaaaab 	.word	0xaaaaaaab

080115d0 <phhalHw_Pn5180_Instr_ReadRegister>:
phStatus_t phhalHw_Pn5180_Instr_ReadRegister(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRegister,
    uint32_t * pValue
    )
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08c      	sub	sp, #48	@ 0x30
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	460b      	mov	r3, r1
 80115da:	607a      	str	r2, [r7, #4]
 80115dc:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 80115de:	2300      	movs	r3, #0
 80115e0:	843b      	strh	r3, [r7, #32]
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[5];

    /* Validate pDataParams
    * Check if the Register address is invalid*/
    if ( (NULL == pDataParams ) \
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d009      	beq.n	80115fc <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        || (NULL == pValue) \
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d006      	beq.n	80115fc <phhalHw_Pn5180_Instr_ReadRegister+0x2c>
        ||((bRegister >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80115ee:	7afb      	ldrb	r3, [r7, #11]
 80115f0:	2b43      	cmp	r3, #67	@ 0x43
 80115f2:	d906      	bls.n	8011602 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        && (bRegister <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80115f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	db02      	blt.n	8011602 <phhalHw_Pn5180_Instr_ReadRegister+0x32>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80115fc:	f240 2321 	movw	r3, #545	@ 0x221
 8011600:	e050      	b.n	80116a4 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011602:	2300      	movs	r3, #0
 8011604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER;
 8011608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8011612:	3328      	adds	r3, #40	@ 0x28
 8011614:	443b      	add	r3, r7
 8011616:	2204      	movs	r2, #4
 8011618:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRegister;
 801161c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011620:	1c5a      	adds	r2, r3, #1
 8011622:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8011626:	3328      	adds	r3, #40	@ 0x28
 8011628:	443b      	add	r3, r7
 801162a:	7afa      	ldrb	r2, [r7, #11]
 801162c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 4;
 8011630:	2304      	movs	r3, #4
 8011632:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011638:	b29a      	uxth	r2, r3
 801163a:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 801163c:	f107 011c 	add.w	r1, r7, #28
 8011640:	f107 0320 	add.w	r3, r7, #32
 8011644:	9301      	str	r3, [sp, #4]
 8011646:	f107 0314 	add.w	r3, r7, #20
 801164a:	9300      	str	r3, [sp, #0]
 801164c:	4603      	mov	r3, r0
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f7fe fe92 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011654:	4603      	mov	r3, r0
 8011656:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801165a:	2b00      	cmp	r3, #0
 801165c:	d001      	beq.n	8011662 <phhalHw_Pn5180_Instr_ReadRegister+0x92>
 801165e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011660:	e020      	b.n	80116a4 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    if (wTempRxDataLen != bNumExpBytes)
 8011662:	8c3b      	ldrh	r3, [r7, #32]
 8011664:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011666:	429a      	cmp	r2, r3
 8011668:	d002      	beq.n	8011670 <phhalHw_Pn5180_Instr_ReadRegister+0xa0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801166a:	f240 237f 	movw	r3, #639	@ 0x27f
 801166e:	e019      	b.n	80116a4 <phhalHw_Pn5180_Instr_ReadRegister+0xd4>
    }

    /* Pack the data that was received */
    *pValue = bRecBuffer[0];
 8011670:	7d3b      	ldrb	r3, [r7, #20]
 8011672:	461a      	mov	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[1]) << 8U);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	7d7b      	ldrb	r3, [r7, #21]
 801167e:	021b      	lsls	r3, r3, #8
 8011680:	431a      	orrs	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[2]) << 16U);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	7dbb      	ldrb	r3, [r7, #22]
 801168c:	041b      	lsls	r3, r3, #16
 801168e:	431a      	orrs	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	601a      	str	r2, [r3, #0]
    *pValue |= (((uint32_t) bRecBuffer[3]) << 24U);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	7dfb      	ldrb	r3, [r7, #23]
 801169a:	061b      	lsls	r3, r3, #24
 801169c:	431a      	orrs	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3728      	adds	r7, #40	@ 0x28
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <phhalHw_Pn5180_Instr_ReadRegisterMultiple>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t * pRegisters,
    uint8_t bNumOfRegisters,
    uint8_t ** ppValues
    )
{
 80116ac:	b590      	push	{r4, r7, lr}
 80116ae:	b091      	sub	sp, #68	@ 0x44
 80116b0:	af02      	add	r7, sp, #8
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	603b      	str	r3, [r7, #0]
 80116b8:	4613      	mov	r3, r2
 80116ba:	71fb      	strb	r3, [r7, #7]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80116bc:	2300      	movs	r3, #0
 80116be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80116c0:	2300      	movs	r3, #0
 80116c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Validate pDataParams
    * Validate pRegisters
    * Validate ppValues
    * Validate bNumOfRegisters
    * */
    if ( (NULL == pDataParams) || (NULL == pRegisters) || (NULL == ppValues) \
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00b      	beq.n	80116e2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d008      	beq.n	80116e2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d005      	beq.n	80116e2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (0U == bNumOfRegisters) \
 80116d6:	79fb      	ldrb	r3, [r7, #7]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d002      	beq.n	80116e2 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x36>
        || (bNumOfRegisters > PHHAL_HW_PN5180_MAX_REGISTERS_READ_MULTIPLE) \
 80116dc:	79fb      	ldrb	r3, [r7, #7]
 80116de:	2b12      	cmp	r3, #18
 80116e0:	d902      	bls.n	80116e8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80116e2:	f240 2321 	movw	r3, #545	@ 0x221
 80116e6:	e077      	b.n	80117d8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* Check if all the register addresses are valid */
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 80116e8:	2300      	movs	r3, #0
 80116ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80116ee:	e016      	b.n	801171e <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x72>
    {
        /* Check if the Register address is invalid */
        if((pRegisters[regIndex] >= PHHAL_HW_PN5180_INVALID_REG_START_ADDRESS) \
 80116f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	4413      	add	r3, r2
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	2b43      	cmp	r3, #67	@ 0x43
 80116fc:	d90a      	bls.n	8011714 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
            && (pRegisters[regIndex] <= PHHAL_HW_PN5180_INVALID_REG_END_ADDRESS)) \
 80116fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011702:	68ba      	ldr	r2, [r7, #8]
 8011704:	4413      	add	r3, r2
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	b25b      	sxtb	r3, r3
 801170a:	2b00      	cmp	r3, #0
 801170c:	db02      	blt.n	8011714 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x68>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801170e:	f240 2321 	movw	r3, #545	@ 0x221
 8011712:	e061      	b.n	80117d8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    for (regIndex = 0U; regIndex < bNumOfRegisters; regIndex++)
 8011714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011718:	3301      	adds	r3, #1
 801171a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801171e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8011722:	79fb      	ldrb	r3, [r7, #7]
 8011724:	429a      	cmp	r2, r3
 8011726:	d3e3      	bcc.n	80116f0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x44>
        }
    }

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8011728:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 801172c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011730:	4619      	mov	r1, r3
 8011732:	68f8      	ldr	r0, [r7, #12]
 8011734:	f7ff fd02 	bl	801113c <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* total number of expected bytes*/
    bNumExpBytes = (bNumOfRegisters * PHHAL_HW_PN5180_BYTES_PER_REGISTER);
 8011738:	79fb      	ldrb	r3, [r7, #7]
 801173a:	009b      	lsls	r3, r3, #2
 801173c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < bNumExpBytes)
 8011740:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011744:	b29a      	uxth	r2, r3
 8011746:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011748:	429a      	cmp	r2, r3
 801174a:	d902      	bls.n	8011752 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0xa6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 801174c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011750:	e042      	b.n	80117d8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }
    /* Build the command frame */
    wBufferLength = 0U;
 8011752:	2300      	movs	r3, #0
 8011754:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_REGISTER_MULTIPLE;
 8011758:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801175c:	1c5a      	adds	r2, r3, #1
 801175e:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8011762:	3338      	adds	r3, #56	@ 0x38
 8011764:	443b      	add	r3, r7
 8011766:	2205      	movs	r2, #5
 8011768:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&bDataBuffer[wBufferLength], pRegisters, bNumOfRegisters);
 801176c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011770:	f107 0214 	add.w	r2, r7, #20
 8011774:	4413      	add	r3, r2
 8011776:	79fa      	ldrb	r2, [r7, #7]
 8011778:	68b9      	ldr	r1, [r7, #8]
 801177a:	4618      	mov	r0, r3
 801177c:	f00d fc53 	bl	801f026 <memcpy>
    wBufferLength+= bNumOfRegisters;
 8011780:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8011784:	79fb      	ldrb	r3, [r7, #7]
 8011786:	4413      	add	r3, r2
 8011788:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801178c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011790:	b298      	uxth	r0, r3
 8011792:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8011796:	b29c      	uxth	r4, r3
 8011798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801179a:	f107 0114 	add.w	r1, r7, #20
 801179e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80117a2:	9201      	str	r2, [sp, #4]
 80117a4:	9300      	str	r3, [sp, #0]
 80117a6:	4623      	mov	r3, r4
 80117a8:	4602      	mov	r2, r0
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f7fe fde4 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 80117b0:	4603      	mov	r3, r0
 80117b2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80117b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x112>
 80117ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80117bc:	e00c      	b.n	80117d8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
        bNumExpBytes,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response length */
    if (wDataLenTmp  != bNumExpBytes)
 80117be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d002      	beq.n	80117d0 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x124>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80117ca:	f240 237f 	movw	r3, #639	@ 0x27f
 80117ce:	e003      	b.n	80117d8 <phhalHw_Pn5180_Instr_ReadRegisterMultiple+0x12c>
    }

    /* return the pointer to the buffer*/
    *ppValues = pTmpBuffer;
 80117d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80117d6:	2300      	movs	r3, #0
}
 80117d8:	4618      	mov	r0, r3
 80117da:	373c      	adds	r7, #60	@ 0x3c
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd90      	pop	{r4, r7, pc}

080117e0 <phhalHw_Pn5180_Instr_WriteE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pDataToWrite,
    uint8_t bDataLength
    )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b08a      	sub	sp, #40	@ 0x28
 80117e4:	af02      	add	r7, sp, #8
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	607a      	str	r2, [r7, #4]
 80117ea:	461a      	mov	r2, r3
 80117ec:	460b      	mov	r3, r1
 80117ee:	72fb      	strb	r3, [r7, #11]
 80117f0:	4613      	mov	r3, r2
 80117f2:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80117f4:	2300      	movs	r3, #0
 80117f6:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM pReceivedData[1];

    /* Validate pDataParams and pDataToWrite
    * Validate E2PROM address
    * Validate the data length */
    if ( (NULL == pDataParams) || (NULL == pDataToWrite) \
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00b      	beq.n	801181a <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d008      	beq.n	801181a <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 8011808:	7afb      	ldrb	r3, [r7, #11]
 801180a:	2bfd      	cmp	r3, #253	@ 0xfd
 801180c:	d805      	bhi.n	801181a <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (bE2PromAddress < PHHAL_HW_PN5180_E2PROM_MIN_ADDESS) \
 801180e:	7afb      	ldrb	r3, [r7, #11]
 8011810:	2b15      	cmp	r3, #21
 8011812:	d902      	bls.n	801181a <phhalHw_Pn5180_Instr_WriteE2Prom+0x3a>
        || (0U == bDataLength) \
 8011814:	7abb      	ldrb	r3, [r7, #10]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d102      	bne.n	8011820 <phhalHw_Pn5180_Instr_WriteE2Prom+0x40>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801181a:	f240 2321 	movw	r3, #545	@ 0x221
 801181e:	e053      	b.n	80118c8 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Calculate maximum writable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8011820:	7afb      	ldrb	r3, [r7, #11]
 8011822:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8011826:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801182a:	33fe      	adds	r3, #254	@ 0xfe
 801182c:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if (bE2PLength < bDataLength)
 801182e:	7ffa      	ldrb	r2, [r7, #31]
 8011830:	7abb      	ldrb	r3, [r7, #10]
 8011832:	429a      	cmp	r2, r3
 8011834:	d202      	bcs.n	801183c <phhalHw_Pn5180_Instr_WriteE2Prom+0x5c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011836:	f240 2322 	movw	r3, #546	@ 0x222
 801183a:	e045      	b.n	80118c8 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 801183c:	f107 0212 	add.w	r2, r7, #18
 8011840:	f107 0314 	add.w	r3, r7, #20
 8011844:	4619      	mov	r1, r3
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f7ff fc78 	bl	801113c <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < (bDataLength + PHHAL_HW_PN5180_WRITE_E2PROM_FIXED_CMD_BYTES))
 801184c:	8a7b      	ldrh	r3, [r7, #18]
 801184e:	461a      	mov	r2, r3
 8011850:	7abb      	ldrb	r3, [r7, #10]
 8011852:	3303      	adds	r3, #3
 8011854:	429a      	cmp	r2, r3
 8011856:	d202      	bcs.n	801185e <phhalHw_Pn5180_Instr_WriteE2Prom+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011858:	f44f 7301 	mov.w	r3, #516	@ 0x204
 801185c:	e034      	b.n	80118c8 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801185e:	2300      	movs	r3, #0
 8011860:	77bb      	strb	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_WRITE_E2PROM;
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	7fbb      	ldrb	r3, [r7, #30]
 8011866:	1c59      	adds	r1, r3, #1
 8011868:	77b9      	strb	r1, [r7, #30]
 801186a:	4413      	add	r3, r2
 801186c:	2206      	movs	r2, #6
 801186e:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bE2PromAddress;
 8011870:	697a      	ldr	r2, [r7, #20]
 8011872:	7fbb      	ldrb	r3, [r7, #30]
 8011874:	1c59      	adds	r1, r3, #1
 8011876:	77b9      	strb	r1, [r7, #30]
 8011878:	4413      	add	r3, r2
 801187a:	7afa      	ldrb	r2, [r7, #11]
 801187c:	701a      	strb	r2, [r3, #0]

    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pDataToWrite, bDataLength);
 801187e:	697a      	ldr	r2, [r7, #20]
 8011880:	7fbb      	ldrb	r3, [r7, #30]
 8011882:	4413      	add	r3, r2
 8011884:	7aba      	ldrb	r2, [r7, #10]
 8011886:	6879      	ldr	r1, [r7, #4]
 8011888:	4618      	mov	r0, r3
 801188a:	f00d fbcc 	bl	801f026 <memcpy>
    wBufferLength += bDataLength;
 801188e:	7fba      	ldrb	r2, [r7, #30]
 8011890:	7abb      	ldrb	r3, [r7, #10]
 8011892:	4413      	add	r3, r2
 8011894:	77bb      	strb	r3, [r7, #30]

    /* No Response expected*/
    bNumExpBytes = 0U;
 8011896:	2300      	movs	r3, #0
 8011898:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 801189a:	6979      	ldr	r1, [r7, #20]
 801189c:	7fbb      	ldrb	r3, [r7, #30]
 801189e:	b29a      	uxth	r2, r3
 80118a0:	7f7b      	ldrb	r3, [r7, #29]
 80118a2:	b298      	uxth	r0, r3
 80118a4:	f107 0318 	add.w	r3, r7, #24
 80118a8:	9301      	str	r3, [sp, #4]
 80118aa:	f107 0310 	add.w	r3, r7, #16
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	4603      	mov	r3, r0
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	f7fe fd60 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 80118b8:	4603      	mov	r3, r0
 80118ba:	837b      	strh	r3, [r7, #26]
 80118bc:	8b7b      	ldrh	r3, [r7, #26]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe6>
 80118c2:	8b7b      	ldrh	r3, [r7, #26]
 80118c4:	e000      	b.n	80118c8 <phhalHw_Pn5180_Instr_WriteE2Prom+0xe8>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3720      	adds	r7, #32
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <phhalHw_Pn5180_Instr_ReadE2Prom>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bE2PromAddress,
    uint8_t * pReadData,
    uint8_t bDataLength
    )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b08a      	sub	sp, #40	@ 0x28
 80118d4:	af02      	add	r7, sp, #8
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	607a      	str	r2, [r7, #4]
 80118da:	461a      	mov	r2, r3
 80118dc:	460b      	mov	r3, r1
 80118de:	72fb      	strb	r3, [r7, #11]
 80118e0:	4613      	mov	r3, r2
 80118e2:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[3];
    uint8_t     PH_MEMLOC_REM bE2PLength;
    bE2PLength = 0U;
 80118e4:	2300      	movs	r3, #0
 80118e6:	77fb      	strb	r3, [r7, #31]

    /* Validate pDataParams
    * Validate E2PROM maximum address value
    * Validate the datalength*/
    if ( (NULL == pDataParams) || (NULL == pReadData) \
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d008      	beq.n	8011900 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d005      	beq.n	8011900 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) \
 80118f4:	7afb      	ldrb	r3, [r7, #11]
 80118f6:	2bfd      	cmp	r3, #253	@ 0xfd
 80118f8:	d802      	bhi.n	8011900 <phhalHw_Pn5180_Instr_ReadE2Prom+0x30>
        || (0U == bDataLength) \
 80118fa:	7abb      	ldrb	r3, [r7, #10]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d11f      	bne.n	8011940 <phhalHw_Pn5180_Instr_ReadE2Prom+0x70>
        )
    {
    	printf("Error: %s%s%s%s\n",
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d101      	bne.n	801190a <phhalHw_Pn5180_Instr_ReadE2Prom+0x3a>
 8011906:	4934      	ldr	r1, [pc, #208]	@ (80119d8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x108>)
 8011908:	e000      	b.n	801190c <phhalHw_Pn5180_Instr_ReadE2Prom+0x3c>
 801190a:	4934      	ldr	r1, [pc, #208]	@ (80119dc <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <phhalHw_Pn5180_Instr_ReadE2Prom+0x46>
 8011912:	4a33      	ldr	r2, [pc, #204]	@ (80119e0 <phhalHw_Pn5180_Instr_ReadE2Prom+0x110>)
 8011914:	e000      	b.n	8011918 <phhalHw_Pn5180_Instr_ReadE2Prom+0x48>
 8011916:	4a31      	ldr	r2, [pc, #196]	@ (80119dc <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011918:	7afb      	ldrb	r3, [r7, #11]
 801191a:	2bfd      	cmp	r3, #253	@ 0xfd
 801191c:	d901      	bls.n	8011922 <phhalHw_Pn5180_Instr_ReadE2Prom+0x52>
 801191e:	4831      	ldr	r0, [pc, #196]	@ (80119e4 <phhalHw_Pn5180_Instr_ReadE2Prom+0x114>)
 8011920:	e000      	b.n	8011924 <phhalHw_Pn5180_Instr_ReadE2Prom+0x54>
 8011922:	482e      	ldr	r0, [pc, #184]	@ (80119dc <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011924:	7abb      	ldrb	r3, [r7, #10]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d101      	bne.n	801192e <phhalHw_Pn5180_Instr_ReadE2Prom+0x5e>
 801192a:	4b2f      	ldr	r3, [pc, #188]	@ (80119e8 <phhalHw_Pn5180_Instr_ReadE2Prom+0x118>)
 801192c:	e000      	b.n	8011930 <phhalHw_Pn5180_Instr_ReadE2Prom+0x60>
 801192e:	4b2b      	ldr	r3, [pc, #172]	@ (80119dc <phhalHw_Pn5180_Instr_ReadE2Prom+0x10c>)
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	4603      	mov	r3, r0
 8011934:	482d      	ldr	r0, [pc, #180]	@ (80119ec <phhalHw_Pn5180_Instr_ReadE2Prom+0x11c>)
 8011936:	f00d f997 	bl	801ec68 <iprintf>
    	           (NULL == pDataParams) ? "pDataParams=NULL " : "",
    	           (NULL == pReadData) ? "pReadData=NULL " : "",
    	           (bE2PromAddress > PHHAL_HW_PN5180_E2PROM_MAX_ADDESS) ? "E2PromAddr>MAX " : "",
    	           (0U == bDataLength) ? "bDataLength=0 " : ""); //debug printf

        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801193a:	f240 2321 	movw	r3, #545	@ 0x221
 801193e:	e046      	b.n	80119ce <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Calculate maximum readable data from current address*/
    bE2PLength = (PHHAL_HW_PN5180_E2PROM_MAX_ADDESS - bE2PromAddress) + 1U;
 8011940:	7afb      	ldrb	r3, [r7, #11]
 8011942:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8011946:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801194a:	33fe      	adds	r3, #254	@ 0xfe
 801194c:	77fb      	strb	r3, [r7, #31]

    /* Validate The E2PROM minimum payload length of 1 byte */
    if  (bE2PLength < bDataLength)
 801194e:	7ffa      	ldrb	r2, [r7, #31]
 8011950:	7abb      	ldrb	r3, [r7, #10]
 8011952:	429a      	cmp	r2, r3
 8011954:	d202      	bcs.n	801195c <phhalHw_Pn5180_Instr_ReadE2Prom+0x8c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 8011956:	f240 2322 	movw	r3, #546	@ 0x222
 801195a:	e038      	b.n	80119ce <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 801195c:	2300      	movs	r3, #0
 801195e:	77bb      	strb	r3, [r7, #30]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_READ_E2PROM;
 8011960:	7fbb      	ldrb	r3, [r7, #30]
 8011962:	1c5a      	adds	r2, r3, #1
 8011964:	77ba      	strb	r2, [r7, #30]
 8011966:	3320      	adds	r3, #32
 8011968:	443b      	add	r3, r7
 801196a:	2207      	movs	r2, #7
 801196c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bE2PromAddress;
 8011970:	7fbb      	ldrb	r3, [r7, #30]
 8011972:	1c5a      	adds	r2, r3, #1
 8011974:	77ba      	strb	r2, [r7, #30]
 8011976:	3320      	adds	r3, #32
 8011978:	443b      	add	r3, r7
 801197a:	7afa      	ldrb	r2, [r7, #11]
 801197c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bDataLength;
 8011980:	7fbb      	ldrb	r3, [r7, #30]
 8011982:	1c5a      	adds	r2, r3, #1
 8011984:	77ba      	strb	r2, [r7, #30]
 8011986:	3320      	adds	r3, #32
 8011988:	443b      	add	r3, r7
 801198a:	7aba      	ldrb	r2, [r7, #10]
 801198c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011990:	7fbb      	ldrb	r3, [r7, #30]
 8011992:	b29a      	uxth	r2, r3
 8011994:	7abb      	ldrb	r3, [r7, #10]
 8011996:	b298      	uxth	r0, r3
 8011998:	f107 0114 	add.w	r1, r7, #20
 801199c:	f107 031a 	add.w	r3, r7, #26
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	9300      	str	r3, [sp, #0]
 80119a6:	4603      	mov	r3, r0
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f7fe fce5 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 80119ae:	4603      	mov	r3, r0
 80119b0:	83bb      	strh	r3, [r7, #28]
 80119b2:	8bbb      	ldrh	r3, [r7, #28]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d001      	beq.n	80119bc <phhalHw_Pn5180_Instr_ReadE2Prom+0xec>
 80119b8:	8bbb      	ldrh	r3, [r7, #28]
 80119ba:	e008      	b.n	80119ce <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
        bDataLength,
        pReadData,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != bDataLength)
 80119bc:	7abb      	ldrb	r3, [r7, #10]
 80119be:	b29a      	uxth	r2, r3
 80119c0:	8b7b      	ldrh	r3, [r7, #26]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d002      	beq.n	80119cc <phhalHw_Pn5180_Instr_ReadE2Prom+0xfc>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80119c6:	f240 237f 	movw	r3, #639	@ 0x27f
 80119ca:	e000      	b.n	80119ce <phhalHw_Pn5180_Instr_ReadE2Prom+0xfe>
    }

    return PH_ERR_SUCCESS;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3720      	adds	r7, #32
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	08021678 	.word	0x08021678
 80119dc:	0802168c 	.word	0x0802168c
 80119e0:	08021690 	.word	0x08021690
 80119e4:	080216a0 	.word	0x080216a0
 80119e8:	080216b0 	.word	0x080216b0
 80119ec:	080216c0 	.word	0x080216c0

080119f0 <phhalHw_Pn5180_Instr_RetrieveRxData>:
phStatus_t phhalHw_Pn5180_Instr_RetrieveRxData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** pRxBuffer,
    uint16_t wExpectedRxDataLength
    )
{
 80119f0:	b590      	push	{r4, r7, lr}
 80119f2:	b08b      	sub	sp, #44	@ 0x2c
 80119f4:	af02      	add	r7, sp, #8
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	4613      	mov	r3, r2
 80119fc:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80119fe:	2300      	movs	r3, #0
 8011a00:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011a02:	2300      	movs	r3, #0
 8011a04:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams
    * Validate reception buffer length*/
    if ( (NULL == pDataParams) || (NULL == pRxBuffer) )
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <phhalHw_Pn5180_Instr_RetrieveRxData+0x22>
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d102      	bne.n	8011a18 <phhalHw_Pn5180_Instr_RetrieveRxData+0x28>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011a12:	f240 2321 	movw	r3, #545	@ 0x221
 8011a16:	e056      	b.n	8011ac6 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Validate reception buffer length*/
    if ( (wExpectedRxDataLength > PHHAL_HW_PN5180_RX_DATA_MAX_LENGTH) \
 8011a18:	88fb      	ldrh	r3, [r7, #6]
 8011a1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a1e:	d802      	bhi.n	8011a26 <phhalHw_Pn5180_Instr_RetrieveRxData+0x36>
        || (wExpectedRxDataLength < PHHAL_HW_PN5180_RX_DATA_MIN_LENGTH) \
 8011a20:	88fb      	ldrh	r3, [r7, #6]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d102      	bne.n	8011a2c <phhalHw_Pn5180_Instr_RetrieveRxData+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011a26:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011a2a:	e04c      	b.n	8011ac6 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Get Buffer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8011a2c:	f107 0116 	add.w	r1, r7, #22
 8011a30:	f107 0218 	add.w	r2, r7, #24
 8011a34:	f107 0314 	add.w	r3, r7, #20
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	2101      	movs	r1, #1
 8011a3e:	68f8      	ldr	r0, [r7, #12]
 8011a40:	f000 fbbf 	bl	80121c2 <phhalHw_Pn5180_GetRxBuffer>
 8011a44:	4603      	mov	r3, r0
 8011a46:	83fb      	strh	r3, [r7, #30]
 8011a48:	8bfb      	ldrh	r3, [r7, #30]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d001      	beq.n	8011a52 <phhalHw_Pn5180_Instr_RetrieveRxData+0x62>
 8011a4e:	8bfb      	ldrh	r3, [r7, #30]
 8011a50:	e039      	b.n	8011ac6 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferSize < wExpectedRxDataLength)
 8011a52:	8abb      	ldrh	r3, [r7, #20]
 8011a54:	88fa      	ldrh	r2, [r7, #6]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d902      	bls.n	8011a60 <phhalHw_Pn5180_Instr_RetrieveRxData+0x70>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011a5a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011a5e:	e032      	b.n	8011ac6 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011a60:	2300      	movs	r3, #0
 8011a62:	777b      	strb	r3, [r7, #29]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_RETRIEVE_RX_DATA;
 8011a64:	7f7b      	ldrb	r3, [r7, #29]
 8011a66:	1c5a      	adds	r2, r3, #1
 8011a68:	777a      	strb	r2, [r7, #29]
 8011a6a:	3320      	adds	r3, #32
 8011a6c:	443b      	add	r3, r7
 8011a6e:	220a      	movs	r2, #10
 8011a70:	f803 2c10 	strb.w	r2, [r3, #-16]
    /*bDataBuffer[wBufferLength++] = (uint8_t)wExpectedRxDataLength;*/ /* RFU */
    bDataBuffer[wBufferLength++] = 0U; /* RFU */
 8011a74:	7f7b      	ldrb	r3, [r7, #29]
 8011a76:	1c5a      	adds	r2, r3, #1
 8011a78:	777a      	strb	r2, [r7, #29]
 8011a7a:	3320      	adds	r3, #32
 8011a7c:	443b      	add	r3, r7
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011a84:	7f7b      	ldrb	r3, [r7, #29]
 8011a86:	b298      	uxth	r0, r3
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	88fc      	ldrh	r4, [r7, #6]
 8011a8c:	f107 0110 	add.w	r1, r7, #16
 8011a90:	f107 0212 	add.w	r2, r7, #18
 8011a94:	9201      	str	r2, [sp, #4]
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	4623      	mov	r3, r4
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	68f8      	ldr	r0, [r7, #12]
 8011a9e:	f7fe fc6b 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	83fb      	strh	r3, [r7, #30]
 8011aa6:	8bfb      	ldrh	r3, [r7, #30]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <phhalHw_Pn5180_Instr_RetrieveRxData+0xc0>
 8011aac:	8bfb      	ldrh	r3, [r7, #30]
 8011aae:	e00a      	b.n	8011ac6 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
        wExpectedRxDataLength,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wExpectedRxDataLength)
 8011ab0:	8a7b      	ldrh	r3, [r7, #18]
 8011ab2:	88fa      	ldrh	r2, [r7, #6]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d002      	beq.n	8011abe <phhalHw_Pn5180_Instr_RetrieveRxData+0xce>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011ab8:	f240 237f 	movw	r3, #639	@ 0x27f
 8011abc:	e003      	b.n	8011ac6 <phhalHw_Pn5180_Instr_RetrieveRxData+0xd6>
    }

    /* return the pointer to the buffer */
    *pRxBuffer = pTmpBuffer;
 8011abe:	69ba      	ldr	r2, [r7, #24]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3724      	adds	r7, #36	@ 0x24
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd90      	pop	{r4, r7, pc}

08011ace <phhalHw_Pn5180_Instr_SwitchModeLpcd>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeLpcd(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wWakeupCounterInMs
    )
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b088      	sub	sp, #32
 8011ad2:	af02      	add	r7, sp, #8
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	460b      	mov	r3, r1
 8011ad8:	807b      	strh	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate wWakeupCounterInMs
    */
    if ( (NULL == pDataParams) \
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d007      	beq.n	8011af4 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is zero */
        || (wWakeupCounterInMs == 0U) \
 8011ae4:	887b      	ldrh	r3, [r7, #2]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d004      	beq.n	8011af4 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x26>
        /* wWakeupCounterInMs is more than the maximum value */
        || (wWakeupCounterInMs > PHHAL_HW_PN5180_MAX_WAKEUP_COUNTER)    \
 8011aea:	887b      	ldrh	r3, [r7, #2]
 8011aec:	f640 2282 	movw	r2, #2690	@ 0xa82
 8011af0:	4293      	cmp	r3, r2
 8011af2:	d902      	bls.n	8011afa <phhalHw_Pn5180_Instr_SwitchModeLpcd+0x2c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011af4:	f240 2321 	movw	r3, #545	@ 0x221
 8011af8:	e03e      	b.n	8011b78 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011afa:	2300      	movs	r3, #0
 8011afc:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8011afe:	7dfb      	ldrb	r3, [r7, #23]
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	75fa      	strb	r2, [r7, #23]
 8011b04:	3318      	adds	r3, #24
 8011b06:	443b      	add	r3, r7
 8011b08:	220b      	movs	r2, #11
 8011b0a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_LPCD;
 8011b0e:	7dfb      	ldrb	r3, [r7, #23]
 8011b10:	1c5a      	adds	r2, r3, #1
 8011b12:	75fa      	strb	r2, [r7, #23]
 8011b14:	3318      	adds	r3, #24
 8011b16:	443b      	add	r3, r7
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* wWakeupCounterInMs LSB */
    bDataBuffer[wBufferLength++] = (uint8_t)(wWakeupCounterInMs & 0xFFU);
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	1c5a      	adds	r2, r3, #1
 8011b22:	75fa      	strb	r2, [r7, #23]
 8011b24:	887a      	ldrh	r2, [r7, #2]
 8011b26:	b2d2      	uxtb	r2, r2
 8011b28:	3318      	adds	r3, #24
 8011b2a:	443b      	add	r3, r7
 8011b2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* wWakeupCounterInMs MSB */
    bDataBuffer[wBufferLength++] = (uint8_t)((wWakeupCounterInMs >> 8U) & 0xFFU);
 8011b30:	887b      	ldrh	r3, [r7, #2]
 8011b32:	0a1b      	lsrs	r3, r3, #8
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	7dfb      	ldrb	r3, [r7, #23]
 8011b38:	1c59      	adds	r1, r3, #1
 8011b3a:	75f9      	strb	r1, [r7, #23]
 8011b3c:	b2d2      	uxtb	r2, r2
 8011b3e:	3318      	adds	r3, #24
 8011b40:	443b      	add	r3, r7
 8011b42:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011b46:	2300      	movs	r3, #0
 8011b48:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	8ab8      	ldrh	r0, [r7, #20]
 8011b50:	f107 010c 	add.w	r1, r7, #12
 8011b54:	f107 0310 	add.w	r3, r7, #16
 8011b58:	9301      	str	r3, [sp, #4]
 8011b5a:	f107 0308 	add.w	r3, r7, #8
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	4603      	mov	r3, r0
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f7fe fc08 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	827b      	strh	r3, [r7, #18]
 8011b6c:	8a7b      	ldrh	r3, [r7, #18]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d001      	beq.n	8011b76 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xa8>
 8011b72:	8a7b      	ldrh	r3, [r7, #18]
 8011b74:	e000      	b.n	8011b78 <phhalHw_Pn5180_Instr_SwitchModeLpcd+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3718      	adds	r7, #24
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <phhalHw_Pn5180_Instr_SwitchModeAutocoll>:
phStatus_t phhalHw_Pn5180_Instr_SwitchModeAutocoll(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTechnology,
    uint8_t bAutocollMode
    )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b088      	sub	sp, #32
 8011b84:	af02      	add	r7, sp, #8
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	70fb      	strb	r3, [r7, #3]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	70bb      	strb	r3, [r7, #2]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011b90:	2300      	movs	r3, #0
 8011b92:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[4];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    bRfTechnology &= PHHAL_HW_PN5180_AUTOCOLL_RF_TECHNOLOGY_MASK;
 8011b94:	78fb      	ldrb	r3, [r7, #3]
 8011b96:	f003 030f 	and.w	r3, r3, #15
 8011b9a:	70fb      	strb	r3, [r7, #3]
    /* Validate pDataParams
    Validate bRfTechnologyMask
    Validate bAutocollMode
    */
    if ( (NULL == pDataParams)  \
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d005      	beq.n	8011bae <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || (0U == bRfTechnology) \
 8011ba2:	78fb      	ldrb	r3, [r7, #3]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d002      	beq.n	8011bae <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x2e>
        || ( bAutocollMode > 2U) \
 8011ba8:	78bb      	ldrb	r3, [r7, #2]
 8011baa:	2b02      	cmp	r3, #2
 8011bac:	d902      	bls.n	8011bb4 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0x34>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011bae:	f240 2321 	movw	r3, #545	@ 0x221
 8011bb2:	e03a      	b.n	8011c2a <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8011bb8:	7dfb      	ldrb	r3, [r7, #23]
 8011bba:	1c5a      	adds	r2, r3, #1
 8011bbc:	75fa      	strb	r2, [r7, #23]
 8011bbe:	3318      	adds	r3, #24
 8011bc0:	443b      	add	r3, r7
 8011bc2:	220b      	movs	r2, #11
 8011bc4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_AUTOCOLL;
 8011bc8:	7dfb      	ldrb	r3, [r7, #23]
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	75fa      	strb	r2, [r7, #23]
 8011bce:	3318      	adds	r3, #24
 8011bd0:	443b      	add	r3, r7
 8011bd2:	2202      	movs	r2, #2
 8011bd4:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* RF technologies  */
    bDataBuffer[wBufferLength++] = bRfTechnology;
 8011bd8:	7dfb      	ldrb	r3, [r7, #23]
 8011bda:	1c5a      	adds	r2, r3, #1
 8011bdc:	75fa      	strb	r2, [r7, #23]
 8011bde:	3318      	adds	r3, #24
 8011be0:	443b      	add	r3, r7
 8011be2:	78fa      	ldrb	r2, [r7, #3]
 8011be4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    /* mode of autocoll*/
    bDataBuffer[wBufferLength++] = bAutocollMode;
 8011be8:	7dfb      	ldrb	r3, [r7, #23]
 8011bea:	1c5a      	adds	r2, r3, #1
 8011bec:	75fa      	strb	r2, [r7, #23]
 8011bee:	3318      	adds	r3, #24
 8011bf0:	443b      	add	r3, r7
 8011bf2:	78ba      	ldrb	r2, [r7, #2]
 8011bf4:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011bfc:	7dfb      	ldrb	r3, [r7, #23]
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	8ab8      	ldrh	r0, [r7, #20]
 8011c02:	f107 010c 	add.w	r1, r7, #12
 8011c06:	f107 0310 	add.w	r3, r7, #16
 8011c0a:	9301      	str	r3, [sp, #4]
 8011c0c:	f107 0308 	add.w	r3, r7, #8
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	4603      	mov	r3, r0
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7fe fbaf 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	827b      	strh	r3, [r7, #18]
 8011c1e:	8a7b      	ldrh	r3, [r7, #18]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d001      	beq.n	8011c28 <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xa8>
 8011c24:	8a7b      	ldrh	r3, [r7, #18]
 8011c26:	e000      	b.n	8011c2a <phhalHw_Pn5180_Instr_SwitchModeAutocoll+0xaa>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3718      	adds	r7, #24
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <phhalHw_Pn5180_Instr_SwitchModeNormal>:

phStatus_t phhalHw_Pn5180_Instr_SwitchModeNormal(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b088      	sub	sp, #32
 8011c36:	af02      	add	r7, sp, #8
 8011c38:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	817b      	strh	r3, [r7, #10]
    /* Build the command frame */
    wBufferLength = 0U;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_SWITCH_MODE;
 8011c42:	7dfb      	ldrb	r3, [r7, #23]
 8011c44:	1c5a      	adds	r2, r3, #1
 8011c46:	75fa      	strb	r2, [r7, #23]
 8011c48:	3318      	adds	r3, #24
 8011c4a:	443b      	add	r3, r7
 8011c4c:	220b      	movs	r2, #11
 8011c4e:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SWITCH_MODE_NORMAL;
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	1c5a      	adds	r2, r3, #1
 8011c56:	75fa      	strb	r2, [r7, #23]
 8011c58:	3318      	adds	r3, #24
 8011c5a:	443b      	add	r3, r7
 8011c5c:	2203      	movs	r2, #3
 8011c5e:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011c62:	2300      	movs	r3, #0
 8011c64:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011c66:	7dfb      	ldrb	r3, [r7, #23]
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	8ab8      	ldrh	r0, [r7, #20]
 8011c6c:	f107 0110 	add.w	r1, r7, #16
 8011c70:	f107 030a 	add.w	r3, r7, #10
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	f107 030c 	add.w	r3, r7, #12
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7fe fb7a 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011c84:	4603      	mov	r3, r0
 8011c86:	827b      	strh	r3, [r7, #18]
 8011c88:	8a7b      	ldrh	r3, [r7, #18]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x60>
 8011c8e:	8a7b      	ldrh	r3, [r7, #18]
 8011c90:	e000      	b.n	8011c94 <phhalHw_Pn5180_Instr_SwitchModeNormal+0x62>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011c92:	2300      	movs	r3, #0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <phhalHw_Pn5180_Instr_EpcGen2Inventory>:
    uint8_t bSelectCommandLength,
    uint8_t bSelectCommandBitsInLastByte,
    uint8_t * pBeginRoundCommand,
    uint8_t bTimeslotProcessingBehavior
    )
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b08a      	sub	sp, #40	@ 0x28
 8011ca0:	af02      	add	r7, sp, #8
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	461a      	mov	r2, r3
 8011caa:	460b      	mov	r3, r1
 8011cac:	71fb      	strb	r3, [r7, #7]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	71bb      	strb	r3, [r7, #6]

    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wDataLenTmp;
    uint16_t    PH_MEMLOC_REM wBufferLength = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	83fb      	strh	r3, [r7, #30]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;

    uint8_t*    PH_MEMLOC_REM pTmpBuffer;
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	827b      	strh	r3, [r7, #18]

    /* Validate pDataParams
    Validate pBeginRoundCommand
    Validate bTimeslotProcessingBehavior */

    if ( (NULL == pDataParams) \
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d006      	beq.n	8011cce <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (NULL == pBeginRoundCommand)
 8011cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d003      	beq.n	8011cce <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x32>
        || (bTimeslotProcessingBehavior > PHHAL_HW_PN5180_MAX_EPC_GEN2_TIMESLOT)
 8011cc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d902      	bls.n	8011cd4 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x38>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011cce:	f240 2321 	movw	r3, #545	@ 0x221
 8011cd2:	e06e      	b.n	8011db2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Validate the parameters of Select command */
    if (0U != (bSelectCommandLength))
 8011cd4:	79fb      	ldrb	r3, [r7, #7]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d00b      	beq.n	8011cf2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
    {
        /* Validate pSelectCommand
        Validate bSelectCommandLength
        Validate bSelectCommandBitsInLastByte */
        if (                            \
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d005      	beq.n	8011cec <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            (NULL == pSelectCommand)    \
            || (bSelectCommandLength > PHHAL_HW_PN5180_MAX_SELECT_COMMAND_LENGTH)    \
 8011ce0:	79fb      	ldrb	r3, [r7, #7]
 8011ce2:	2b27      	cmp	r3, #39	@ 0x27
 8011ce4:	d802      	bhi.n	8011cec <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x50>
            ||  (bSelectCommandBitsInLastByte > PHHAL_HW_PN5180_MAX_NUM_OF_BITS_FOR_LAST_BYTE) \
 8011ce6:	79bb      	ldrb	r3, [r7, #6]
 8011ce8:	2b07      	cmp	r3, #7
 8011cea:	d902      	bls.n	8011cf2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x56>
            )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011cec:	f240 2321 	movw	r3, #545	@ 0x221
 8011cf0:	e05f      	b.n	8011db2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        }
    }

    /* Get Buffer */
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8011cf2:	f107 0212 	add.w	r2, r7, #18
 8011cf6:	f107 0314 	add.w	r3, r7, #20
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f7ff fa1d 	bl	801113c <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < 46U)
 8011d02:	8a7b      	ldrh	r3, [r7, #18]
 8011d04:	2b2d      	cmp	r3, #45	@ 0x2d
 8011d06:	d802      	bhi.n	8011d0e <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011d08:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011d0c:	e051      	b.n	8011db2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	83fb      	strh	r3, [r7, #30]
    pTmpBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_INVENTORY;
 8011d12:	697a      	ldr	r2, [r7, #20]
 8011d14:	8bfb      	ldrh	r3, [r7, #30]
 8011d16:	1c59      	adds	r1, r3, #1
 8011d18:	83f9      	strh	r1, [r7, #30]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	220d      	movs	r2, #13
 8011d1e:	701a      	strb	r2, [r3, #0]
    pTmpBuffer[wBufferLength++] = bSelectCommandLength;
 8011d20:	697a      	ldr	r2, [r7, #20]
 8011d22:	8bfb      	ldrh	r3, [r7, #30]
 8011d24:	1c59      	adds	r1, r3, #1
 8011d26:	83f9      	strh	r1, [r7, #30]
 8011d28:	4413      	add	r3, r2
 8011d2a:	79fa      	ldrb	r2, [r7, #7]
 8011d2c:	701a      	strb	r2, [r3, #0]

    /*
    No Select command is set prior to BeginRound command.
    'Valid Bits in last Byte' field and 'Select command' field shall not be present.
    */
    if(0U != (bSelectCommandLength))
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d013      	beq.n	8011d5c <phhalHw_Pn5180_Instr_EpcGen2Inventory+0xc0>
    {
        pTmpBuffer[wBufferLength++] = bSelectCommandBitsInLastByte;
 8011d34:	697a      	ldr	r2, [r7, #20]
 8011d36:	8bfb      	ldrh	r3, [r7, #30]
 8011d38:	1c59      	adds	r1, r3, #1
 8011d3a:	83f9      	strh	r1, [r7, #30]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	79ba      	ldrb	r2, [r7, #6]
 8011d40:	701a      	strb	r2, [r3, #0]

        /* Copy the Instruction payload and update the buffer length*/
        (void)memcpy(&pTmpBuffer[wBufferLength], pSelectCommand, bSelectCommandLength);
 8011d42:	697a      	ldr	r2, [r7, #20]
 8011d44:	8bfb      	ldrh	r3, [r7, #30]
 8011d46:	4413      	add	r3, r2
 8011d48:	79fa      	ldrb	r2, [r7, #7]
 8011d4a:	68b9      	ldr	r1, [r7, #8]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f00d f96a 	bl	801f026 <memcpy>
        wBufferLength+= bSelectCommandLength;
 8011d52:	79fb      	ldrb	r3, [r7, #7]
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	8bfb      	ldrh	r3, [r7, #30]
 8011d58:	4413      	add	r3, r2
 8011d5a:	83fb      	strh	r3, [r7, #30]
    }
    /* Copy the Instruction payload and update the buffer length*/
    (void)memcpy(&pTmpBuffer[wBufferLength], pBeginRoundCommand, PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH);
 8011d5c:	697a      	ldr	r2, [r7, #20]
 8011d5e:	8bfb      	ldrh	r3, [r7, #30]
 8011d60:	4413      	add	r3, r2
 8011d62:	2203      	movs	r2, #3
 8011d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011d66:	4618      	mov	r0, r3
 8011d68:	f00d f95d 	bl	801f026 <memcpy>
    wBufferLength+= PHHAL_HW_PN5180_BEGIN_COMMAND_LENGTH;
 8011d6c:	8bfb      	ldrh	r3, [r7, #30]
 8011d6e:	3303      	adds	r3, #3
 8011d70:	83fb      	strh	r3, [r7, #30]

    pTmpBuffer[wBufferLength++] = bTimeslotProcessingBehavior;
 8011d72:	697a      	ldr	r2, [r7, #20]
 8011d74:	8bfb      	ldrh	r3, [r7, #30]
 8011d76:	1c59      	adds	r1, r3, #1
 8011d78:	83f9      	strh	r1, [r7, #30]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011d80:	701a      	strb	r2, [r3, #0]

    /* No Response expected */
    bNumExpBytes = 0U;
 8011d82:	2300      	movs	r3, #0
 8011d84:	777b      	strb	r3, [r7, #29]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011d86:	6979      	ldr	r1, [r7, #20]
 8011d88:	7f7b      	ldrb	r3, [r7, #29]
 8011d8a:	b298      	uxth	r0, r3
 8011d8c:	8bfa      	ldrh	r2, [r7, #30]
 8011d8e:	f107 0318 	add.w	r3, r7, #24
 8011d92:	9301      	str	r3, [sp, #4]
 8011d94:	f107 0310 	add.w	r3, r7, #16
 8011d98:	9300      	str	r3, [sp, #0]
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f7fe faeb 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011da2:	4603      	mov	r3, r0
 8011da4:	837b      	strh	r3, [r7, #26]
 8011da6:	8b7b      	ldrh	r3, [r7, #26]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d001      	beq.n	8011db0 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x114>
 8011dac:	8b7b      	ldrh	r3, [r7, #26]
 8011dae:	e000      	b.n	8011db2 <phhalHw_Pn5180_Instr_EpcGen2Inventory+0x116>
        wBufferLength,
        bNumExpBytes,
        pReceivedData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8011db0:	2300      	movs	r3, #0
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3720      	adds	r7, #32
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}

08011dba <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t * pResultSize
    )
{
 8011dba:	b580      	push	{r7, lr}
 8011dbc:	b088      	sub	sp, #32
 8011dbe:	af02      	add	r7, sp, #8
 8011dc0:	6078      	str	r0, [r7, #4]
 8011dc2:	6039      	str	r1, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	823b      	strh	r3, [r7, #16]

    /*
    Validate pDataParams
    Validate pResultSize
    */
    if ( (NULL == pDataParams)    \
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d002      	beq.n	8011dd4 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x1a>
        || (NULL == pResultSize)    \
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d102      	bne.n	8011dda <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x20>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011dd4:	f240 2321 	movw	r3, #545	@ 0x221
 8011dd8:	e041      	b.n	8011e5e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT_SIZE;
 8011dde:	7dfb      	ldrb	r3, [r7, #23]
 8011de0:	1c5a      	adds	r2, r3, #1
 8011de2:	75fa      	strb	r2, [r7, #23]
 8011de4:	3318      	adds	r3, #24
 8011de6:	443b      	add	r3, r7
 8011de8:	220f      	movs	r2, #15
 8011dea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8011dee:	7dfb      	ldrb	r3, [r7, #23]
 8011df0:	1c5a      	adds	r2, r3, #1
 8011df2:	75fa      	strb	r2, [r7, #23]
 8011df4:	3318      	adds	r3, #24
 8011df6:	443b      	add	r3, r7
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 2;
 8011dfe:	2302      	movs	r3, #2
 8011e00:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	8ab8      	ldrh	r0, [r7, #20]
 8011e08:	f107 010c 	add.w	r1, r7, #12
 8011e0c:	f107 0310 	add.w	r3, r7, #16
 8011e10:	9301      	str	r3, [sp, #4]
 8011e12:	f107 0308 	add.w	r3, r7, #8
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	4603      	mov	r3, r0
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7fe faac 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011e20:	4603      	mov	r3, r0
 8011e22:	827b      	strh	r3, [r7, #18]
 8011e24:	8a7b      	ldrh	r3, [r7, #18]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d001      	beq.n	8011e2e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x74>
 8011e2a:	8a7b      	ldrh	r3, [r7, #18]
 8011e2c:	e017      	b.n	8011e5e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    /* Validate the response, if any */
    if (wTempRxDataLen != bNumExpBytes)
 8011e2e:	8a3b      	ldrh	r3, [r7, #16]
 8011e30:	8aba      	ldrh	r2, [r7, #20]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d002      	beq.n	8011e3c <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011e36:	f240 237f 	movw	r3, #639	@ 0x27f
 8011e3a:	e010      	b.n	8011e5e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResultSize+0xa4>
    }

    /* Pack the data that was received */
    *pResultSize = bRecBuffer[0];
 8011e3c:	7a3b      	ldrb	r3, [r7, #8]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	801a      	strh	r2, [r3, #0]
    *pResultSize |= (((uint16_t) bRecBuffer[1]) << 8U);
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	b21a      	sxth	r2, r3
 8011e4a:	7a7b      	ldrb	r3, [r7, #9]
 8011e4c:	b21b      	sxth	r3, r3
 8011e4e:	021b      	lsls	r3, r3, #8
 8011e50:	b21b      	sxth	r3, r3
 8011e52:	4313      	orrs	r3, r2
 8011e54:	b21b      	sxth	r3, r3
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011e5c:	2300      	movs	r3, #0
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3718      	adds	r7, #24
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult>:
phStatus_t phhalHw_Pn5180_Instr_EpcGen2RetrieveResult(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppInventoryResult,
    uint16_t wResultSize
    )
{
 8011e66:	b590      	push	{r4, r7, lr}
 8011e68:	b08b      	sub	sp, #44	@ 0x2c
 8011e6a:	af02      	add	r7, sp, #8
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	4613      	mov	r3, r2
 8011e72:	80fb      	strh	r3, [r7, #6]
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 8011e74:	2300      	movs	r3, #0
 8011e76:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];

    /* Validate pDataParams */
    /* Validate ppInventoryResult */
    if (                        \
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d002      	beq.n	8011e88 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x22>
        (NULL == pDataParams)   \
        || (NULL == ppInventoryResult)  \
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d102      	bne.n	8011e8e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x28>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e88:	f240 2321 	movw	r3, #545	@ 0x221
 8011e8c:	e047      	b.n	8011f1e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Validate wResultSize */
    if (0x00U == wResultSize)
 8011e8e:	88fb      	ldrh	r3, [r7, #6]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d102      	bne.n	8011e9a <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x34>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011e94:	f240 2321 	movw	r3, #545	@ 0x221
 8011e98:	e041      	b.n	8011f1e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	77fb      	strb	r3, [r7, #31]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_EPC_GEN2_RETRIEVE_INVENTORY_RESULT;
 8011e9e:	7ffb      	ldrb	r3, [r7, #31]
 8011ea0:	1c5a      	adds	r2, r3, #1
 8011ea2:	77fa      	strb	r2, [r7, #31]
 8011ea4:	3320      	adds	r3, #32
 8011ea6:	443b      	add	r3, r7
 8011ea8:	2210      	movs	r2, #16
 8011eaa:	f803 2c10 	strb.w	r2, [r3, #-16]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8011eae:	7ffb      	ldrb	r3, [r7, #31]
 8011eb0:	1c5a      	adds	r2, r3, #1
 8011eb2:	77fa      	strb	r2, [r7, #31]
 8011eb4:	3320      	adds	r3, #32
 8011eb6:	443b      	add	r3, r7
 8011eb8:	2200      	movs	r2, #0
 8011eba:	f803 2c10 	strb.w	r2, [r3, #-16]

    /* Get Buffer*/
    phhalHw_Pn5180_Instr_GetInstrBuffer(pDataParams, &pTmpBuffer, &wTmpBufferLen);
 8011ebe:	f107 0216 	add.w	r2, r7, #22
 8011ec2:	f107 0318 	add.w	r3, r7, #24
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f7ff f937 	bl	801113c <phhalHw_Pn5180_Instr_GetInstrBuffer>

    /* Check if the buffer size is sufficient*/
    if (wTmpBufferLen < wResultSize)
 8011ece:	8afb      	ldrh	r3, [r7, #22]
 8011ed0:	88fa      	ldrh	r2, [r7, #6]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d902      	bls.n	8011edc <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_HAL);
 8011ed6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011eda:	e020      	b.n	8011f1e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011edc:	7ffb      	ldrb	r3, [r7, #31]
 8011ede:	b298      	uxth	r0, r3
 8011ee0:	69bb      	ldr	r3, [r7, #24]
 8011ee2:	88fc      	ldrh	r4, [r7, #6]
 8011ee4:	f107 0110 	add.w	r1, r7, #16
 8011ee8:	f107 0214 	add.w	r2, r7, #20
 8011eec:	9201      	str	r2, [sp, #4]
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	4623      	mov	r3, r4
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f7fe fa3f 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011efa:	4603      	mov	r3, r0
 8011efc:	83bb      	strh	r3, [r7, #28]
 8011efe:	8bbb      	ldrh	r3, [r7, #28]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xa2>
 8011f04:	8bbb      	ldrh	r3, [r7, #28]
 8011f06:	e00a      	b.n	8011f1e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
        wResultSize,
        pTmpBuffer,
        &wDataLenTmp));

    /* Validate the response, if any */
    if (wDataLenTmp  != wResultSize)
 8011f08:	8abb      	ldrh	r3, [r7, #20]
 8011f0a:	88fa      	ldrh	r2, [r7, #6]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d002      	beq.n	8011f16 <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb0>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8011f10:	f240 237f 	movw	r3, #639	@ 0x27f
 8011f14:	e003      	b.n	8011f1e <phhalHw_Pn5180_Instr_EpcGen2RetrieveResult+0xb8>
    }
    /* return the pointer to the buffer*/
    *ppInventoryResult = pTmpBuffer;
 8011f16:	69ba      	ldr	r2, [r7, #24]
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	601a      	str	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8011f1c:	2300      	movs	r3, #0

}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3724      	adds	r7, #36	@ 0x24
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd90      	pop	{r4, r7, pc}

08011f26 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory>:

phStatus_t phhalHw_Pn5180_Instr_EpcGen2ResumeInventory(
    phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b088      	sub	sp, #32
 8011f2a:	af02      	add	r7, sp, #8
 8011f2c:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM wBufferLength;
    uint16_t    PH_MEMLOC_REM wTempRxDataLen = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM bRecBuffer[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d102      	bne.n	8011f3e <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x18>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011f38:	f240 2321 	movw	r3, #545	@ 0x221
 8011f3c:	e02a      	b.n	8011f94 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_EPC_GEN2_RESUME_INVENTORY;
 8011f42:	7dfb      	ldrb	r3, [r7, #23]
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	75fa      	strb	r2, [r7, #23]
 8011f48:	3318      	adds	r3, #24
 8011f4a:	443b      	add	r3, r7
 8011f4c:	220e      	movs	r2, #14
 8011f4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = 0U;   /*RFU*/
 8011f52:	7dfb      	ldrb	r3, [r7, #23]
 8011f54:	1c5a      	adds	r2, r3, #1
 8011f56:	75fa      	strb	r2, [r7, #23]
 8011f58:	3318      	adds	r3, #24
 8011f5a:	443b      	add	r3, r7
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* Expected number of bytes */
    bNumExpBytes = 0U;
 8011f62:	2300      	movs	r3, #0
 8011f64:	82bb      	strh	r3, [r7, #20]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_BalExchange(
 8011f66:	7dfb      	ldrb	r3, [r7, #23]
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	8ab8      	ldrh	r0, [r7, #20]
 8011f6c:	f107 010c 	add.w	r1, r7, #12
 8011f70:	f107 0310 	add.w	r3, r7, #16
 8011f74:	9301      	str	r3, [sp, #4]
 8011f76:	f107 0308 	add.w	r3, r7, #8
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7fe f9fa 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8011f84:	4603      	mov	r3, r0
 8011f86:	827b      	strh	r3, [r7, #18]
 8011f88:	8a7b      	ldrh	r3, [r7, #18]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6c>
 8011f8e:	8a7b      	ldrh	r3, [r7, #18]
 8011f90:	e000      	b.n	8011f94 <phhalHw_Pn5180_Instr_EpcGen2ResumeInventory+0x6e>
        wBufferLength,
        bNumExpBytes,
        bRecBuffer,
        &wTempRxDataLen));

    return PH_ERR_SUCCESS;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3718      	adds	r7, #24
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>:
phStatus_t phhalHw_Pn5180_Instr_LoadRfConfiguration(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfTxConfiguration,
    uint8_t bRfRxConfiguration
    )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b088      	sub	sp, #32
 8011fa0:	af02      	add	r7, sp, #8
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	70fb      	strb	r3, [r7, #3]
 8011fa8:	4613      	mov	r3, r2
 8011faa:	70bb      	strb	r3, [r7, #2]
    * bRfTxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX
    * Validate bRfRxConfiguration
    * bRfRxConfiguration is lesser than the minimum RF RX configuration
    * bRfRxConfiguration is greater than the maximum RF RX configuration
    * and bRfRxConfiguration is not the PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX*/
    if ((NULL == pDataParams) \
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00f      	beq.n	8011fd2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfTxConfiguration > PHHAL_HW_PN5180_MAX_RF_TX_CONFIGURATION_INDEX) \
 8011fb2:	78fb      	ldrb	r3, [r7, #3]
 8011fb4:	2b1c      	cmp	r3, #28
 8011fb6:	d902      	bls.n	8011fbe <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x22>
        && (bRfTxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8011fb8:	78fb      	ldrb	r3, [r7, #3]
 8011fba:	2bff      	cmp	r3, #255	@ 0xff
 8011fbc:	d109      	bne.n	8011fd2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || (bRfRxConfiguration < PHHAL_HW_PN5180_MIN_RF_RX_CONFIGURATION_INDEX) \
 8011fbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	da05      	bge.n	8011fd2 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x36>
        || ((bRfRxConfiguration > PHHAL_HW_PN5180_MAX_RF_RX_CONFIGURATION_INDEX) \
 8011fc6:	78bb      	ldrb	r3, [r7, #2]
 8011fc8:	2b9d      	cmp	r3, #157	@ 0x9d
 8011fca:	d905      	bls.n	8011fd8 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        && (bRfRxConfiguration != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)) \
 8011fcc:	78bb      	ldrb	r3, [r7, #2]
 8011fce:	2bff      	cmp	r3, #255	@ 0xff
 8011fd0:	d002      	beq.n	8011fd8 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x3c>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8011fd2:	f240 2321 	movw	r3, #545	@ 0x221
 8011fd6:	e03b      	b.n	8012050 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }
    /*bRfTxConfiguration == bRfRxConfiguration == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX then no change required*/
    if((bRfTxConfiguration & bRfRxConfiguration) == PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8011fd8:	78fa      	ldrb	r2, [r7, #3]
 8011fda:	78bb      	ldrb	r3, [r7, #2]
 8011fdc:	4013      	ands	r3, r2
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	2bff      	cmp	r3, #255	@ 0xff
 8011fe2:	d101      	bne.n	8011fe8 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0x4c>
    {
        return PH_ERR_SUCCESS;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	e033      	b.n	8012050 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_SET_INSTR_LOAD_RF_CONFIGURATION;
 8011fec:	7dfb      	ldrb	r3, [r7, #23]
 8011fee:	1c5a      	adds	r2, r3, #1
 8011ff0:	75fa      	strb	r2, [r7, #23]
 8011ff2:	3318      	adds	r3, #24
 8011ff4:	443b      	add	r3, r7
 8011ff6:	2211      	movs	r2, #17
 8011ff8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfTxConfiguration;
 8011ffc:	7dfb      	ldrb	r3, [r7, #23]
 8011ffe:	1c5a      	adds	r2, r3, #1
 8012000:	75fa      	strb	r2, [r7, #23]
 8012002:	3318      	adds	r3, #24
 8012004:	443b      	add	r3, r7
 8012006:	78fa      	ldrb	r2, [r7, #3]
 8012008:	f803 2c0c 	strb.w	r2, [r3, #-12]
    bDataBuffer[wBufferLength++] = bRfRxConfiguration;
 801200c:	7dfb      	ldrb	r3, [r7, #23]
 801200e:	1c5a      	adds	r2, r3, #1
 8012010:	75fa      	strb	r2, [r7, #23]
 8012012:	3318      	adds	r3, #24
 8012014:	443b      	add	r3, r7
 8012016:	78ba      	ldrb	r2, [r7, #2]
 8012018:	f803 2c0c 	strb.w	r2, [r3, #-12]

    /* No Response expected*/
    bNumExpBytes = 0U;
 801201c:	2300      	movs	r3, #0
 801201e:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8012020:	7dfb      	ldrb	r3, [r7, #23]
 8012022:	b29a      	uxth	r2, r3
 8012024:	7dbb      	ldrb	r3, [r7, #22]
 8012026:	b298      	uxth	r0, r3
 8012028:	f107 010c 	add.w	r1, r7, #12
 801202c:	f107 0312 	add.w	r3, r7, #18
 8012030:	9301      	str	r3, [sp, #4]
 8012032:	f107 0308 	add.w	r3, r7, #8
 8012036:	9300      	str	r3, [sp, #0]
 8012038:	4603      	mov	r3, r0
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7fe f99c 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8012040:	4603      	mov	r3, r0
 8012042:	82bb      	strh	r3, [r7, #20]
 8012044:	8abb      	ldrh	r3, [r7, #20]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb2>
 801204a:	8abb      	ldrh	r3, [r7, #20]
 801204c:	e000      	b.n	8012050 <phhalHw_Pn5180_Instr_LoadRfConfiguration+0xb4>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3718      	adds	r7, #24
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <phhalHw_Pn5180_Instr_RfOn>:

phStatus_t phhalHw_Pn5180_Instr_RfOn(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t bRfOnConfig
    )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b088      	sub	sp, #32
 801205c:	af02      	add	r7, sp, #8
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	460b      	mov	r3, r1
 8012062:	70fb      	strb	r3, [r7, #3]

    /* Validate pDataParams
    * Validate bRfOnConfig
    *
    * */
    if ( (NULL == pDataParams) \
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d002      	beq.n	8012070 <phhalHw_Pn5180_Instr_RfOn+0x18>
        || (bRfOnConfig > 3U) \
 801206a:	78fb      	ldrb	r3, [r7, #3]
 801206c:	2b03      	cmp	r3, #3
 801206e:	d902      	bls.n	8012076 <phhalHw_Pn5180_Instr_RfOn+0x1e>
        )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012070:	f240 2321 	movw	r3, #545	@ 0x221
 8012074:	e02b      	b.n	80120ce <phhalHw_Pn5180_Instr_RfOn+0x76>
    }

    /* Build the command frame */

    wBufferLength = 0U;
 8012076:	2300      	movs	r3, #0
 8012078:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_ON;
 801207a:	7dfb      	ldrb	r3, [r7, #23]
 801207c:	1c5a      	adds	r2, r3, #1
 801207e:	75fa      	strb	r2, [r7, #23]
 8012080:	3318      	adds	r3, #24
 8012082:	443b      	add	r3, r7
 8012084:	2216      	movs	r2, #22
 8012086:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = bRfOnConfig;
 801208a:	7dfb      	ldrb	r3, [r7, #23]
 801208c:	1c5a      	adds	r2, r3, #1
 801208e:	75fa      	strb	r2, [r7, #23]
 8012090:	3318      	adds	r3, #24
 8012092:	443b      	add	r3, r7
 8012094:	78fa      	ldrb	r2, [r7, #3]
 8012096:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 801209a:	2300      	movs	r3, #0
 801209c:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 801209e:	7dfb      	ldrb	r3, [r7, #23]
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	7dbb      	ldrb	r3, [r7, #22]
 80120a4:	b298      	uxth	r0, r3
 80120a6:	f107 0110 	add.w	r1, r7, #16
 80120aa:	f107 0312 	add.w	r3, r7, #18
 80120ae:	9301      	str	r3, [sp, #4]
 80120b0:	f107 030c 	add.w	r3, r7, #12
 80120b4:	9300      	str	r3, [sp, #0]
 80120b6:	4603      	mov	r3, r0
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7fe f95d 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 80120be:	4603      	mov	r3, r0
 80120c0:	82bb      	strh	r3, [r7, #20]
 80120c2:	8abb      	ldrh	r3, [r7, #20]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <phhalHw_Pn5180_Instr_RfOn+0x74>
 80120c8:	8abb      	ldrh	r3, [r7, #20]
 80120ca:	e000      	b.n	80120ce <phhalHw_Pn5180_Instr_RfOn+0x76>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 80120cc:	2300      	movs	r3, #0

}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3718      	adds	r7, #24
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <phhalHw_Pn5180_Instr_RfOff>:

phStatus_t phhalHw_Pn5180_Instr_RfOff(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b088      	sub	sp, #32
 80120da:	af02      	add	r7, sp, #8
 80120dc:	6078      	str	r0, [r7, #4]
    uint8_t     PH_MEMLOC_REM bNumExpBytes;
    uint8_t     PH_MEMLOC_REM bDataBuffer[2];
    uint8_t     PH_MEMLOC_REM pData[1];

    /* Validate pDataParams */
    if (NULL == pDataParams)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d102      	bne.n	80120ea <phhalHw_Pn5180_Instr_RfOff+0x14>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80120e4:	f240 2321 	movw	r3, #545	@ 0x221
 80120e8:	e02b      	b.n	8012142 <phhalHw_Pn5180_Instr_RfOff+0x6c>
    }

    /* Build the command frame */
    wBufferLength = 0U;
 80120ea:	2300      	movs	r3, #0
 80120ec:	75fb      	strb	r3, [r7, #23]
    bDataBuffer[wBufferLength++] = PHHAL_HW_PN5180_GET_INSTR_FIELD_OFF;
 80120ee:	7dfb      	ldrb	r3, [r7, #23]
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	75fa      	strb	r2, [r7, #23]
 80120f4:	3318      	adds	r3, #24
 80120f6:	443b      	add	r3, r7
 80120f8:	2217      	movs	r2, #23
 80120fa:	f803 2c08 	strb.w	r2, [r3, #-8]
    bDataBuffer[wBufferLength++] = 0U;
 80120fe:	7dfb      	ldrb	r3, [r7, #23]
 8012100:	1c5a      	adds	r2, r3, #1
 8012102:	75fa      	strb	r2, [r7, #23]
 8012104:	3318      	adds	r3, #24
 8012106:	443b      	add	r3, r7
 8012108:	2200      	movs	r2, #0
 801210a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* No Response expected*/
    bNumExpBytes = 0U;
 801210e:	2300      	movs	r3, #0
 8012110:	75bb      	strb	r3, [r7, #22]

    /* Send it to the chip */
    PH_CHECK_SUCCESS_FCT(statusTmp,
 8012112:	7dfb      	ldrb	r3, [r7, #23]
 8012114:	b29a      	uxth	r2, r3
 8012116:	7dbb      	ldrb	r3, [r7, #22]
 8012118:	b298      	uxth	r0, r3
 801211a:	f107 0110 	add.w	r1, r7, #16
 801211e:	f107 0312 	add.w	r3, r7, #18
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	f107 030c 	add.w	r3, r7, #12
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	4603      	mov	r3, r0
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7fe f923 	bl	8010378 <phhalHw_Pn5180_BalExchange>
 8012132:	4603      	mov	r3, r0
 8012134:	82bb      	strh	r3, [r7, #20]
 8012136:	8abb      	ldrh	r3, [r7, #20]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d001      	beq.n	8012140 <phhalHw_Pn5180_Instr_RfOff+0x6a>
 801213c:	8abb      	ldrh	r3, [r7, #20]
 801213e:	e000      	b.n	8012142 <phhalHw_Pn5180_Instr_RfOff+0x6c>
        wBufferLength,
        bNumExpBytes,
        pData,
        &wDataLenTmp));

    return PH_ERR_SUCCESS;
 8012140:	2300      	movs	r3, #0

}
 8012142:	4618      	mov	r0, r3
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <phhalHw_Pn5180_GetTxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pTxBuffer,
    uint16_t * pTxBufferLen,
    uint16_t * pTxBufferSize
    )
{
 801214a:	b580      	push	{r7, lr}
 801214c:	b086      	sub	sp, #24
 801214e:	af02      	add	r7, sp, #8
 8012150:	60f8      	str	r0, [r7, #12]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
 8012156:	460b      	mov	r3, r1
 8012158:	72fb      	strb	r3, [r7, #11]
    /* Exchange command -> RxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 801215a:	7afb      	ldrb	r3, [r7, #11]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d023      	beq.n	80121a8 <phhalHw_Pn5180_GetTxBuffer+0x5e>
    {
        /* We need to watch that we do not overwrite content below the RxStartPos though */
        if (pDataParams->pTxBuffer == pDataParams->pRxBuffer)
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	68da      	ldr	r2, [r3, #12]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	695b      	ldr	r3, [r3, #20]
 8012168:	429a      	cmp	r2, r3
 801216a:	d10f      	bne.n	801218c <phhalHw_Pn5180_GetTxBuffer+0x42>
        {
            *pTxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos];
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	68fa      	ldr	r2, [r7, #12]
 8012172:	8bd2      	ldrh	r2, [r2, #30]
 8012174:	441a      	add	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize - pDataParams->wRxBufStartPos;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	8a1a      	ldrh	r2, [r3, #16]
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	8bdb      	ldrh	r3, [r3, #30]
 8012182:	1ad3      	subs	r3, r2, r3
 8012184:	b29a      	uxth	r2, r3
 8012186:	69bb      	ldr	r3, [r7, #24]
 8012188:	801a      	strh	r2, [r3, #0]
 801218a:	e007      	b.n	801219c <phhalHw_Pn5180_GetTxBuffer+0x52>
        }
        /* Else just return the actual Buffer */
        else
        {
            *pTxBuffer = pDataParams->pTxBuffer;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	68da      	ldr	r2, [r3, #12]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	601a      	str	r2, [r3, #0]
            *pTxBufferSize = pDataParams->wTxBufSize;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	8a1a      	ldrh	r2, [r3, #16]
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	801a      	strh	r2, [r3, #0]
        }

        /* Return stored length */
        *pTxBufferLen = pDataParams->wTxBufLen;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	8a5a      	ldrh	r2, [r3, #18]
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	801a      	strh	r2, [r3, #0]
    {
        /* Redundant code */
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
    }

    return PH_ERR_SUCCESS;
 80121a4:	2300      	movs	r3, #0
 80121a6:	e008      	b.n	80121ba <phhalHw_Pn5180_GetTxBuffer+0x70>
        return phhalHw_Pn5180_GetRxBuffer(pDataParams, bIsExchange, pTxBuffer, pTxBufferLen, pTxBufferSize);
 80121a8:	7af9      	ldrb	r1, [r7, #11]
 80121aa:	69bb      	ldr	r3, [r7, #24]
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f000 f805 	bl	80121c2 <phhalHw_Pn5180_GetRxBuffer>
 80121b8:	4603      	mov	r3, r0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3710      	adds	r7, #16
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <phhalHw_Pn5180_GetRxBuffer>:
    uint8_t bIsExchange,
    uint8_t ** pRxBuffer,
    uint16_t * pRxBufferLen,
    uint16_t * pRxBufferSize
    )
{
 80121c2:	b480      	push	{r7}
 80121c4:	b087      	sub	sp, #28
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	60f8      	str	r0, [r7, #12]
 80121ca:	607a      	str	r2, [r7, #4]
 80121cc:	603b      	str	r3, [r7, #0]
 80121ce:	460b      	mov	r3, r1
 80121d0:	72fb      	strb	r3, [r7, #11]
    uint8_t bOffset = 0U;
 80121d2:	2300      	movs	r3, #0
 80121d4:	75fb      	strb	r3, [r7, #23]

    /* Exchange command -> TxBuffer overwriting is allowed */
    if (bIsExchange != PH_OFF)
 80121d6:	7afb      	ldrb	r3, [r7, #11]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d021      	beq.n	8012220 <phhalHw_Pn5180_GetRxBuffer+0x5e>
    {
#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d101      	bne.n	80121ea <phhalHw_Pn5180_GetRxBuffer+0x28>
        {
            bOffset = 1U;
 80121e6:	2301      	movs	r3, #1
 80121e8:	75fb      	strb	r3, [r7, #23]
        }
#endif
        *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos - bOffset];
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	695b      	ldr	r3, [r3, #20]
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	8bd2      	ldrh	r2, [r2, #30]
 80121f2:	4611      	mov	r1, r2
 80121f4:	7dfa      	ldrb	r2, [r7, #23]
 80121f6:	1a8a      	subs	r2, r1, r2
 80121f8:	441a      	add	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	601a      	str	r2, [r3, #0]
        *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos - bOffset;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	8b1a      	ldrh	r2, [r3, #24]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	8bdb      	ldrh	r3, [r3, #30]
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	b29a      	uxth	r2, r3
 801220a:	7dfb      	ldrb	r3, [r7, #23]
 801220c:	b29b      	uxth	r3, r3
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	b29a      	uxth	r2, r3
 8012212:	6a3b      	ldr	r3, [r7, #32]
 8012214:	801a      	strh	r2, [r3, #0]
        *pRxBufferLen = pDataParams->wRxBufLen;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	8b5a      	ldrh	r2, [r3, #26]
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	801a      	strh	r2, [r3, #0]
 801221e:	e055      	b.n	80122cc <phhalHw_Pn5180_GetRxBuffer+0x10a>
    }
    /* Normal command -> do not overwrite Tx- and Rx-Contents */
    else
    {
        /* Command buffering is NOT supported by this HAL */
        *pRxBufferLen = 0U;
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	2200      	movs	r2, #0
 8012224:	801a      	strh	r2, [r3, #0]

        /* TxBuffer equals RxBuffer */
        /* And the buffer contains something that needs to be preserved */
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	68da      	ldr	r2, [r3, #12]
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	695b      	ldr	r3, [r3, #20]
 801222e:	429a      	cmp	r2, r3
 8012230:	d11f      	bne.n	8012272 <phhalHw_Pn5180_GetRxBuffer+0xb0>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	8a5b      	ldrh	r3, [r3, #18]
        if ((pDataParams->pTxBuffer == pDataParams->pRxBuffer) &&
 8012236:	2b00      	cmp	r3, #0
 8012238:	d103      	bne.n	8012242 <phhalHw_Pn5180_GetRxBuffer+0x80>
            ((pDataParams->wTxBufLen != 0U) || (pDataParams->wRxBufStartPos != 0U)))
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	8bdb      	ldrh	r3, [r3, #30]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d017      	beq.n	8012272 <phhalHw_Pn5180_GetRxBuffer+0xb0>
        {
            /* Start at TxLenght if neccessary */
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wRxBufStartPos + pDataParams->wTxBufLen];
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	68fa      	ldr	r2, [r7, #12]
 8012248:	8bd2      	ldrh	r2, [r2, #30]
 801224a:	4611      	mov	r1, r2
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	8a52      	ldrh	r2, [r2, #18]
 8012250:	440a      	add	r2, r1
 8012252:	441a      	add	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - (pDataParams->wRxBufStartPos + pDataParams->wTxBufLen);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	8a1a      	ldrh	r2, [r3, #16]
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	8bd9      	ldrh	r1, [r3, #30]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	8a5b      	ldrh	r3, [r3, #18]
 8012264:	440b      	add	r3, r1
 8012266:	b29b      	uxth	r3, r3
 8012268:	1ad3      	subs	r3, r2, r3
 801226a:	b29a      	uxth	r2, r3
 801226c:	6a3b      	ldr	r3, [r7, #32]
 801226e:	801a      	strh	r2, [r3, #0]
            if ((pDataParams->wRxBufStartPos + pDataParams->wTxBufLen) >= pDataParams->wRxBufStartPos)
 8012270:	e02c      	b.n	80122cc <phhalHw_Pn5180_GetRxBuffer+0x10a>
        }
        /* Buffers are different */
        else
        {
            /* Use TxBuffer if it has more space than RxBuffer */
            if ((pDataParams->wTxBufSize - pDataParams->wTxBufLen) >= (pDataParams->wRxBufSize - pDataParams->wRxBufStartPos))
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	8a1b      	ldrh	r3, [r3, #16]
 8012276:	461a      	mov	r2, r3
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	8a5b      	ldrh	r3, [r3, #18]
 801227c:	1ad2      	subs	r2, r2, r3
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	8b1b      	ldrh	r3, [r3, #24]
 8012282:	4619      	mov	r1, r3
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	8bdb      	ldrh	r3, [r3, #30]
 8012288:	1acb      	subs	r3, r1, r3
 801228a:	429a      	cmp	r2, r3
 801228c:	db0f      	blt.n	80122ae <phhalHw_Pn5180_GetRxBuffer+0xec>
            {
                *pRxBuffer = &pDataParams->pTxBuffer[pDataParams->wTxBufLen];
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	8a52      	ldrh	r2, [r2, #18]
 8012296:	441a      	add	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wTxBufSize - pDataParams->wTxBufLen;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	8a1a      	ldrh	r2, [r3, #16]
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	8a5b      	ldrh	r3, [r3, #18]
 80122a4:	1ad3      	subs	r3, r2, r3
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	6a3b      	ldr	r3, [r7, #32]
 80122aa:	801a      	strh	r2, [r3, #0]
 80122ac:	e00e      	b.n	80122cc <phhalHw_Pn5180_GetRxBuffer+0x10a>
            }
            /* Else use RxBuffer */
            else
            {
                *pRxBuffer = &pDataParams->pRxBuffer[pDataParams->wRxBufStartPos];
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	695b      	ldr	r3, [r3, #20]
 80122b2:	68fa      	ldr	r2, [r7, #12]
 80122b4:	8bd2      	ldrh	r2, [r2, #30]
 80122b6:	441a      	add	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	601a      	str	r2, [r3, #0]
                *pRxBufferSize = pDataParams->wRxBufSize - pDataParams->wRxBufStartPos;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	8b1a      	ldrh	r2, [r3, #24]
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	8bdb      	ldrh	r3, [r3, #30]
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	6a3b      	ldr	r3, [r7, #32]
 80122ca:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return PH_ERR_SUCCESS;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	371c      	adds	r7, #28
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr

080122da <phhalHw_Pn5180_ReadData>:
phStatus_t phhalHw_Pn5180_ReadData(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint8_t ** ppData,
    uint16_t * pBytesRead
    )
{
 80122da:	b580      	push	{r7, lr}
 80122dc:	b086      	sub	sp, #24
 80122de:	af00      	add	r7, sp, #0
 80122e0:	60f8      	str	r0, [r7, #12]
 80122e2:	60b9      	str	r1, [r7, #8]
 80122e4:	607a      	str	r2, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp = PH_ERR_SUCCESS;
 80122e6:	2300      	movs	r3, #0
 80122e8:	82bb      	strh	r3, [r7, #20]

    uint16_t    PH_MEMLOC_REM wNumExpBytes;
    uint32_t    PH_MEMLOC_REM dwValue;

    /* Read the RX_STATUS */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(
 80122ea:	f107 0310 	add.w	r3, r7, #16
 80122ee:	461a      	mov	r2, r3
 80122f0:	2113      	movs	r1, #19
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	f7fb fb60 	bl	800d9b8 <phhalHw_Pn5180_ReadRegister>
 80122f8:	4603      	mov	r3, r0
 80122fa:	82bb      	strh	r3, [r7, #20]
 80122fc:	8abb      	ldrh	r3, [r7, #20]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d001      	beq.n	8012306 <phhalHw_Pn5180_ReadData+0x2c>
 8012302:	8abb      	ldrh	r3, [r7, #20]
 8012304:	e02d      	b.n	8012362 <phhalHw_Pn5180_ReadData+0x88>
        pDataParams,
        RX_STATUS,
        &dwValue));

    if(pDataParams->bRxMultiple == PH_ON)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801230c:	2b01      	cmp	r3, #1
 801230e:	d10f      	bne.n	8012330 <phhalHw_Pn5180_ReadData+0x56>
    {
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	b29b      	uxth	r3, r3
 8012314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012318:	b29a      	uxth	r2, r3
            (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	0a5b      	lsrs	r3, r3, #9
        wNumExpBytes = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 801231e:	b29b      	uxth	r3, r3
 8012320:	f003 030f 	and.w	r3, r3, #15
 8012324:	b29b      	uxth	r3, r3
 8012326:	015b      	lsls	r3, r3, #5
 8012328:	b29b      	uxth	r3, r3
 801232a:	4313      	orrs	r3, r2
 801232c:	82fb      	strh	r3, [r7, #22]
 801232e:	e004      	b.n	801233a <phhalHw_Pn5180_ReadData+0x60>
            RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
    }
    else
    {
        wNumExpBytes = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	b29b      	uxth	r3, r3
 8012334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012338:	82fb      	strh	r3, [r7, #22]
    }

    if(wNumExpBytes != 0U)
 801233a:	8afb      	ldrh	r3, [r7, #22]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00c      	beq.n	801235a <phhalHw_Pn5180_ReadData+0x80>
    {
        /* Prepare the command for reading the RX FIFO of the Pn5180 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 8012340:	8afb      	ldrh	r3, [r7, #22]
 8012342:	461a      	mov	r2, r3
 8012344:	68b9      	ldr	r1, [r7, #8]
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f7ff fb52 	bl	80119f0 <phhalHw_Pn5180_Instr_RetrieveRxData>
 801234c:	4603      	mov	r3, r0
 801234e:	82bb      	strh	r3, [r7, #20]
 8012350:	8abb      	ldrh	r3, [r7, #20]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <phhalHw_Pn5180_ReadData+0x80>
 8012356:	8abb      	ldrh	r3, [r7, #20]
 8012358:	e003      	b.n	8012362 <phhalHw_Pn5180_ReadData+0x88>
            ppData,
            wNumExpBytes));
    }

    /* Update the actual number of bytes received */
    *pBytesRead = wNumExpBytes;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	8afa      	ldrh	r2, [r7, #22]
 801235e:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8012360:	2300      	movs	r3, #0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3718      	adds	r7, #24
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <phhalHw_Pn5180_TimerStart>:
    uint32_t dwStartCond,
    uint32_t dwStopCond,
    uint32_t wPrescaler,
    uint32_t dwLoadValue
    )
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b08e      	sub	sp, #56	@ 0x38
 801236e:	af00      	add	r7, sp, #0
 8012370:	60f8      	str	r0, [r7, #12]
 8012372:	607a      	str	r2, [r7, #4]
 8012374:	603b      	str	r3, [r7, #0]
 8012376:	460b      	mov	r3, r1
 8012378:	72fb      	strb	r3, [r7, #11]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;

    /* Populate the timer configure and reload registers */

    switch(bTimer)
 801237a:	7afb      	ldrb	r3, [r7, #11]
 801237c:	2b10      	cmp	r3, #16
 801237e:	d018      	beq.n	80123b2 <phhalHw_Pn5180_TimerStart+0x48>
 8012380:	2b10      	cmp	r3, #16
 8012382:	dc1f      	bgt.n	80123c4 <phhalHw_Pn5180_TimerStart+0x5a>
 8012384:	2b0e      	cmp	r3, #14
 8012386:	d002      	beq.n	801238e <phhalHw_Pn5180_TimerStart+0x24>
 8012388:	2b0f      	cmp	r3, #15
 801238a:	d009      	beq.n	80123a0 <phhalHw_Pn5180_TimerStart+0x36>
 801238c:	e01a      	b.n	80123c4 <phhalHw_Pn5180_TimerStart+0x5a>
    {
    case TIMER0_CONFIG:
        bTmrConfigReg = TIMER0_CONFIG;
 801238e:	230e      	movs	r3, #14
 8012390:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER0_RELOAD;
 8012394:	230b      	movs	r3, #11
 8012396:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 801239a:	2301      	movs	r3, #1
 801239c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801239e:	e014      	b.n	80123ca <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER1_CONFIG:
        bTmrConfigReg = TIMER1_CONFIG;
 80123a0:	230f      	movs	r3, #15
 80123a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER1_RELOAD;
 80123a6:	230c      	movs	r3, #12
 80123a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER1_CONFIG_T1_ENABLE_MASK;
 80123ac:	2301      	movs	r3, #1
 80123ae:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80123b0:	e00b      	b.n	80123ca <phhalHw_Pn5180_TimerStart+0x60>

    case TIMER2_CONFIG:
        bTmrConfigReg = TIMER2_CONFIG;
 80123b2:	2310      	movs	r3, #16
 80123b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        bTmrRelaodReg = TIMER2_RELOAD;
 80123b8:	230d      	movs	r3, #13
 80123ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        dwEnableMask = TIMER2_CONFIG_T2_ENABLE_MASK;
 80123be:	2301      	movs	r3, #1
 80123c0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80123c2:	e002      	b.n	80123ca <phhalHw_Pn5180_TimerStart+0x60>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80123c4:	f240 2321 	movw	r3, #545	@ 0x221
 80123c8:	e0bd      	b.n	8012546 <phhalHw_Pn5180_TimerStart+0x1dc>
    }

    /*write 0 to stop timer*/
    wSizeOfRegTypeValueSets = 0U;
 80123ca:	2300      	movs	r3, #0
 80123cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80123ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80123d0:	1c5a      	adds	r2, r3, #1
 80123d2:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80123d4:	3338      	adds	r3, #56	@ 0x38
 80123d6:	443b      	add	r3, r7
 80123d8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80123dc:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80123e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80123e2:	1c5a      	adds	r2, r3, #1
 80123e4:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80123e6:	3338      	adds	r3, #56	@ 0x38
 80123e8:	443b      	add	r3, r7
 80123ea:	2201      	movs	r2, #1
 80123ec:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 80123f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80123f6:	3338      	adds	r3, #56	@ 0x38
 80123f8:	443b      	add	r3, r7
 80123fa:	2200      	movs	r2, #0
 80123fc:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8012400:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012402:	1c5a      	adds	r2, r3, #1
 8012404:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8012406:	3338      	adds	r3, #56	@ 0x38
 8012408:	443b      	add	r3, r7
 801240a:	2200      	movs	r2, #0
 801240c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8012410:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012412:	1c5a      	adds	r2, r3, #1
 8012414:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8012416:	3338      	adds	r3, #56	@ 0x38
 8012418:	443b      	add	r3, r7
 801241a:	2200      	movs	r2, #0
 801241c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 8012420:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012422:	1c5a      	adds	r2, r3, #1
 8012424:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8012426:	3338      	adds	r3, #56	@ 0x38
 8012428:	443b      	add	r3, r7
 801242a:	2200      	movs	r2, #0
 801242c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /*load the timer  reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 8012430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012436:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrRelaodReg;
 8012438:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801243a:	1c5a      	adds	r2, r3, #1
 801243c:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 801243e:	3338      	adds	r3, #56	@ 0x38
 8012440:	443b      	add	r3, r7
 8012442:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8012446:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801244a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8012450:	3338      	adds	r3, #56	@ 0x38
 8012452:	443b      	add	r3, r7
 8012454:	2201      	movs	r2, #1
 8012456:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801245a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801245c:	1c5a      	adds	r2, r3, #1
 801245e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8012460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012462:	b2d2      	uxtb	r2, r2
 8012464:	3338      	adds	r3, #56	@ 0x38
 8012466:	443b      	add	r3, r7
 8012468:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 801246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801246e:	0a1a      	lsrs	r2, r3, #8
 8012470:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012472:	1c59      	adds	r1, r3, #1
 8012474:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8012476:	b2d2      	uxtb	r2, r2
 8012478:	3338      	adds	r3, #56	@ 0x38
 801247a:	443b      	add	r3, r7
 801247c:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8012480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012482:	0c1a      	lsrs	r2, r3, #16
 8012484:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012486:	1c59      	adds	r1, r3, #1
 8012488:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801248a:	b2d2      	uxtb	r2, r2
 801248c:	3338      	adds	r3, #56	@ 0x38
 801248e:	443b      	add	r3, r7
 8012490:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8012494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012496:	0e1a      	lsrs	r2, r3, #24
 8012498:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801249a:	1c59      	adds	r1, r3, #1
 801249c:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801249e:	b2d2      	uxtb	r2, r2
 80124a0:	3338      	adds	r3, #56	@ 0x38
 80124a2:	443b      	add	r3, r7
 80124a4:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Timer MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask );
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	431a      	orrs	r2, r3
 80124ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124b0:	4313      	orrs	r3, r2
 80124b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124b4:	4313      	orrs	r3, r2
 80124b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 80124b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80124ba:	1c5a      	adds	r2, r3, #1
 80124bc:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80124be:	3338      	adds	r3, #56	@ 0x38
 80124c0:	443b      	add	r3, r7
 80124c2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80124c6:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80124ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80124cc:	1c5a      	adds	r2, r3, #1
 80124ce:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80124d0:	3338      	adds	r3, #56	@ 0x38
 80124d2:	443b      	add	r3, r7
 80124d4:	2201      	movs	r2, #1
 80124d6:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80124da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80124dc:	1c5a      	adds	r2, r3, #1
 80124de:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80124e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80124e2:	b2d2      	uxtb	r2, r2
 80124e4:	3338      	adds	r3, #56	@ 0x38
 80124e6:	443b      	add	r3, r7
 80124e8:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>8U);
 80124ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ee:	0a1a      	lsrs	r2, r3, #8
 80124f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80124f2:	1c59      	adds	r1, r3, #1
 80124f4:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80124f6:	b2d2      	uxtb	r2, r2
 80124f8:	3338      	adds	r3, #56	@ 0x38
 80124fa:	443b      	add	r3, r7
 80124fc:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>16U);
 8012500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012502:	0c1a      	lsrs	r2, r3, #16
 8012504:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012506:	1c59      	adds	r1, r3, #1
 8012508:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801250a:	b2d2      	uxtb	r2, r2
 801250c:	3338      	adds	r3, #56	@ 0x38
 801250e:	443b      	add	r3, r7
 8012510:	f803 2c24 	strb.w	r2, [r3, #-36]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>>24U);
 8012514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012516:	0e1a      	lsrs	r2, r3, #24
 8012518:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801251a:	1c59      	adds	r1, r3, #1
 801251c:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801251e:	b2d2      	uxtb	r2, r2
 8012520:	3338      	adds	r3, #56	@ 0x38
 8012522:	443b      	add	r3, r7
 8012524:	f803 2c24 	strb.w	r2, [r3, #-36]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8012528:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801252a:	f107 0314 	add.w	r3, r7, #20
 801252e:	4619      	mov	r1, r3
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7fe ff9b 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8012536:	4603      	mov	r3, r0
 8012538:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801253a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <phhalHw_Pn5180_TimerStart+0x1da>
 8012540:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012542:	e000      	b.n	8012546 <phhalHw_Pn5180_TimerStart+0x1dc>

    return PH_ERR_SUCCESS;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3738      	adds	r7, #56	@ 0x38
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
	...

08012550 <phhalHw_Pn5180_SetConfig_Int>:
phStatus_t phhalHw_Pn5180_SetConfig_Int(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wConfig,
    uint16_t wValue
    )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	807b      	strh	r3, [r7, #2]
 801255c:	4613      	mov	r3, r2
 801255e:	803b      	strh	r3, [r7, #0]
    uint32_t    PH_MEMLOC_REM dwValue;
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    switch(wConfig)
 8012560:	887b      	ldrh	r3, [r7, #2]
 8012562:	2b0c      	cmp	r3, #12
 8012564:	f200 81ad 	bhi.w	80128c2 <phhalHw_Pn5180_SetConfig_Int+0x372>
 8012568:	a201      	add	r2, pc, #4	@ (adr r2, 8012570 <phhalHw_Pn5180_SetConfig_Int+0x20>)
 801256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801256e:	bf00      	nop
 8012570:	080125a5 	.word	0x080125a5
 8012574:	0801261f 	.word	0x0801261f
 8012578:	0801275f 	.word	0x0801275f
 801257c:	080128c3 	.word	0x080128c3
 8012580:	080128c3 	.word	0x080128c3
 8012584:	080128c3 	.word	0x080128c3
 8012588:	080128c3 	.word	0x080128c3
 801258c:	080128c3 	.word	0x080128c3
 8012590:	080128c3 	.word	0x080128c3
 8012594:	080128c3 	.word	0x080128c3
 8012598:	080128c3 	.word	0x080128c3
 801259c:	080128c3 	.word	0x080128c3
 80125a0:	0801289d 	.word	0x0801289d
    {
    case PHHAL_HW_CONFIG_PARITY:

        /* Tx-Parity,  Rx-Parity is OFF */
        if (wValue == PH_OFF)
 80125a4:	883b      	ldrh	r3, [r7, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d11e      	bne.n	80125e8 <phhalHw_Pn5180_SetConfig_Int+0x98>
        {
            dwValue = (uint32_t)~(uint32_t)TX_CONFIG_TX_PARITY_ENABLE_MASK;
 80125aa:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 80125ae:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, TX_CONFIG, dwValue));
 80125b0:	697a      	ldr	r2, [r7, #20]
 80125b2:	2118      	movs	r1, #24
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7fe fee3 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80125ba:	4603      	mov	r3, r0
 80125bc:	837b      	strh	r3, [r7, #26]
 80125be:	8b7b      	ldrh	r3, [r7, #26]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <phhalHw_Pn5180_SetConfig_Int+0x78>
 80125c4:	8b7b      	ldrh	r3, [r7, #26]
 80125c6:	e187      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>

            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK;
 80125c8:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80125cc:	617b      	str	r3, [r7, #20]
            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 80125ce:	697a      	ldr	r2, [r7, #20]
 80125d0:	2112      	movs	r1, #18
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7fe fed4 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80125d8:	4603      	mov	r3, r0
 80125da:	837b      	strh	r3, [r7, #26]
 80125dc:	8b7b      	ldrh	r3, [r7, #26]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f000 8172 	beq.w	80128c8 <phhalHw_Pn5180_SetConfig_Int+0x378>
 80125e4:	8b7b      	ldrh	r3, [r7, #26]
 80125e6:	e177      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {
            /* Turn ON Tx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, TX_CONFIG, TX_CONFIG_TX_PARITY_ENABLE_MASK));
 80125e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80125ec:	2118      	movs	r1, #24
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7fe fe50 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 80125f4:	4603      	mov	r3, r0
 80125f6:	837b      	strh	r3, [r7, #26]
 80125f8:	8b7b      	ldrh	r3, [r7, #26]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d001      	beq.n	8012602 <phhalHw_Pn5180_SetConfig_Int+0xb2>
 80125fe:	8b7b      	ldrh	r3, [r7, #26]
 8012600:	e16a      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>

            /* Turn ON Rx-Parity */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, CRC_RX_CONFIG, CRC_RX_CONFIG_RX_PARITY_ENABLE_MASK));
 8012602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012606:	2112      	movs	r1, #18
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7fe fe43 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 801260e:	4603      	mov	r3, r0
 8012610:	837b      	strh	r3, [r7, #26]
 8012612:	8b7b      	ldrh	r3, [r7, #26]
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 8157 	beq.w	80128c8 <phhalHw_Pn5180_SetConfig_Int+0x378>
 801261a:	8b7b      	ldrh	r3, [r7, #26]
 801261c:	e15c      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>

        break;

    case PHHAL_HW_CONFIG_TXCRC:

        if (wValue == PH_OFF)
 801261e:	883b      	ldrh	r3, [r7, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d10f      	bne.n	8012644 <phhalHw_Pn5180_SetConfig_Int+0xf4>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_TX_CONFIG_TX_CRC_ENABLE_MASK;
 8012624:	f06f 0301 	mvn.w	r3, #1
 8012628:	617b      	str	r3, [r7, #20]

            /* Perform write */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_TX_CONFIG, dwValue));
 801262a:	697a      	ldr	r2, [r7, #20]
 801262c:	2119      	movs	r1, #25
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f7fe fea6 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012634:	4603      	mov	r3, r0
 8012636:	837b      	strh	r3, [r7, #26]
 8012638:	8b7b      	ldrh	r3, [r7, #26]
 801263a:	2b00      	cmp	r3, #0
 801263c:	f000 8146 	beq.w	80128cc <phhalHw_Pn5180_SetConfig_Int+0x37c>
 8012640:	8b7b      	ldrh	r3, [r7, #26]
 8012642:	e149      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8012644:	2300      	movs	r3, #0
 8012646:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits*/
            dwTemp = (uint32_t) ~( CRC_TX_CONFIG_TX_CRC_TYPE_MASK);
 8012648:	f06f 0304 	mvn.w	r3, #4
 801264c:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 801264e:	8b3b      	ldrh	r3, [r7, #24]
 8012650:	1c5a      	adds	r2, r3, #1
 8012652:	833a      	strh	r2, [r7, #24]
 8012654:	3320      	adds	r3, #32
 8012656:	443b      	add	r3, r7
 8012658:	2219      	movs	r2, #25
 801265a:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 801265e:	8b3b      	ldrh	r3, [r7, #24]
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	833a      	strh	r2, [r7, #24]
 8012664:	3320      	adds	r3, #32
 8012666:	443b      	add	r3, r7
 8012668:	2203      	movs	r2, #3
 801266a:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801266e:	8b3b      	ldrh	r3, [r7, #24]
 8012670:	1c5a      	adds	r2, r3, #1
 8012672:	833a      	strh	r2, [r7, #24]
 8012674:	69fa      	ldr	r2, [r7, #28]
 8012676:	b2d2      	uxtb	r2, r2
 8012678:	3320      	adds	r3, #32
 801267a:	443b      	add	r3, r7
 801267c:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	0a1a      	lsrs	r2, r3, #8
 8012684:	8b3b      	ldrh	r3, [r7, #24]
 8012686:	1c59      	adds	r1, r3, #1
 8012688:	8339      	strh	r1, [r7, #24]
 801268a:	b2d2      	uxtb	r2, r2
 801268c:	3320      	adds	r3, #32
 801268e:	443b      	add	r3, r7
 8012690:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	0c1a      	lsrs	r2, r3, #16
 8012698:	8b3b      	ldrh	r3, [r7, #24]
 801269a:	1c59      	adds	r1, r3, #1
 801269c:	8339      	strh	r1, [r7, #24]
 801269e:	b2d2      	uxtb	r2, r2
 80126a0:	3320      	adds	r3, #32
 80126a2:	443b      	add	r3, r7
 80126a4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	0e1a      	lsrs	r2, r3, #24
 80126ac:	8b3b      	ldrh	r3, [r7, #24]
 80126ae:	1c59      	adds	r1, r3, #1
 80126b0:	8339      	strh	r1, [r7, #24]
 80126b2:	b2d2      	uxtb	r2, r2
 80126b4:	3320      	adds	r3, #32
 80126b6:	443b      	add	r3, r7
 80126b8:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)(CRC_TX_CONFIG_TX_CRC_ENABLE_MASK);
 80126bc:	2301      	movs	r3, #1
 80126be:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126c6:	2b06      	cmp	r3, #6
 80126c8:	d103      	bne.n	80126d2 <phhalHw_Pn5180_SetConfig_Int+0x182>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_TX_CONFIG_TX_CRC_TYPE_MASK;
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	f043 0304 	orr.w	r3, r3, #4
 80126d0:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_TX_CONFIG;
 80126d2:	8b3b      	ldrh	r3, [r7, #24]
 80126d4:	1c5a      	adds	r2, r3, #1
 80126d6:	833a      	strh	r2, [r7, #24]
 80126d8:	3320      	adds	r3, #32
 80126da:	443b      	add	r3, r7
 80126dc:	2219      	movs	r2, #25
 80126de:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 80126e2:	8b3b      	ldrh	r3, [r7, #24]
 80126e4:	1c5a      	adds	r2, r3, #1
 80126e6:	833a      	strh	r2, [r7, #24]
 80126e8:	3320      	adds	r3, #32
 80126ea:	443b      	add	r3, r7
 80126ec:	2202      	movs	r2, #2
 80126ee:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80126f2:	8b3b      	ldrh	r3, [r7, #24]
 80126f4:	1c5a      	adds	r2, r3, #1
 80126f6:	833a      	strh	r2, [r7, #24]
 80126f8:	69fa      	ldr	r2, [r7, #28]
 80126fa:	b2d2      	uxtb	r2, r2
 80126fc:	3320      	adds	r3, #32
 80126fe:	443b      	add	r3, r7
 8012700:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	0a1a      	lsrs	r2, r3, #8
 8012708:	8b3b      	ldrh	r3, [r7, #24]
 801270a:	1c59      	adds	r1, r3, #1
 801270c:	8339      	strh	r1, [r7, #24]
 801270e:	b2d2      	uxtb	r2, r2
 8012710:	3320      	adds	r3, #32
 8012712:	443b      	add	r3, r7
 8012714:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	0c1a      	lsrs	r2, r3, #16
 801271c:	8b3b      	ldrh	r3, [r7, #24]
 801271e:	1c59      	adds	r1, r3, #1
 8012720:	8339      	strh	r1, [r7, #24]
 8012722:	b2d2      	uxtb	r2, r2
 8012724:	3320      	adds	r3, #32
 8012726:	443b      	add	r3, r7
 8012728:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	0e1a      	lsrs	r2, r3, #24
 8012730:	8b3b      	ldrh	r3, [r7, #24]
 8012732:	1c59      	adds	r1, r3, #1
 8012734:	8339      	strh	r1, [r7, #24]
 8012736:	b2d2      	uxtb	r2, r2
 8012738:	3320      	adds	r3, #32
 801273a:	443b      	add	r3, r7
 801273c:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8012740:	8b3a      	ldrh	r2, [r7, #24]
 8012742:	f107 0308 	add.w	r3, r7, #8
 8012746:	4619      	mov	r1, r3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7fe fe8f 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 801274e:	4603      	mov	r3, r0
 8012750:	837b      	strh	r3, [r7, #26]
 8012752:	8b7b      	ldrh	r3, [r7, #26]
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 80b9 	beq.w	80128cc <phhalHw_Pn5180_SetConfig_Int+0x37c>
 801275a:	8b7b      	ldrh	r3, [r7, #26]
 801275c:	e0bc      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        break;

    case PHHAL_HW_CONFIG_RXCRC:

        if (wValue == PH_OFF)
 801275e:	883b      	ldrh	r3, [r7, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d10f      	bne.n	8012784 <phhalHw_Pn5180_SetConfig_Int+0x234>
        {
            /* CRC calculator, your services are not required */
            dwValue = (uint32_t)~(uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 8012764:	f06f 0301 	mvn.w	r3, #1
 8012768:	617b      	str	r3, [r7, #20]

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, CRC_RX_CONFIG, dwValue));
 801276a:	697a      	ldr	r2, [r7, #20]
 801276c:	2112      	movs	r1, #18
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7fe fe06 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8012774:	4603      	mov	r3, r0
 8012776:	837b      	strh	r3, [r7, #26]
 8012778:	8b7b      	ldrh	r3, [r7, #26]
 801277a:	2b00      	cmp	r3, #0
 801277c:	f000 80a8 	beq.w	80128d0 <phhalHw_Pn5180_SetConfig_Int+0x380>
 8012780:	8b7b      	ldrh	r3, [r7, #26]
 8012782:	e0a9      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        else
        {

            wSizeOfRegTypeValueSets = 0U;
 8012784:	2300      	movs	r3, #0
 8012786:	833b      	strh	r3, [r7, #24]

            /*Clear the Bits */
            dwTemp = (uint32_t) ~( CRC_RX_CONFIG_RX_CRC_TYPE_MASK);
 8012788:	f06f 0304 	mvn.w	r3, #4
 801278c:	61fb      	str	r3, [r7, #28]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 801278e:	8b3b      	ldrh	r3, [r7, #24]
 8012790:	1c5a      	adds	r2, r3, #1
 8012792:	833a      	strh	r2, [r7, #24]
 8012794:	3320      	adds	r3, #32
 8012796:	443b      	add	r3, r7
 8012798:	2212      	movs	r2, #18
 801279a:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 801279e:	8b3b      	ldrh	r3, [r7, #24]
 80127a0:	1c5a      	adds	r2, r3, #1
 80127a2:	833a      	strh	r2, [r7, #24]
 80127a4:	3320      	adds	r3, #32
 80127a6:	443b      	add	r3, r7
 80127a8:	2203      	movs	r2, #3
 80127aa:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80127ae:	8b3b      	ldrh	r3, [r7, #24]
 80127b0:	1c5a      	adds	r2, r3, #1
 80127b2:	833a      	strh	r2, [r7, #24]
 80127b4:	69fa      	ldr	r2, [r7, #28]
 80127b6:	b2d2      	uxtb	r2, r2
 80127b8:	3320      	adds	r3, #32
 80127ba:	443b      	add	r3, r7
 80127bc:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	0a1a      	lsrs	r2, r3, #8
 80127c4:	8b3b      	ldrh	r3, [r7, #24]
 80127c6:	1c59      	adds	r1, r3, #1
 80127c8:	8339      	strh	r1, [r7, #24]
 80127ca:	b2d2      	uxtb	r2, r2
 80127cc:	3320      	adds	r3, #32
 80127ce:	443b      	add	r3, r7
 80127d0:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	0c1a      	lsrs	r2, r3, #16
 80127d8:	8b3b      	ldrh	r3, [r7, #24]
 80127da:	1c59      	adds	r1, r3, #1
 80127dc:	8339      	strh	r1, [r7, #24]
 80127de:	b2d2      	uxtb	r2, r2
 80127e0:	3320      	adds	r3, #32
 80127e2:	443b      	add	r3, r7
 80127e4:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	0e1a      	lsrs	r2, r3, #24
 80127ec:	8b3b      	ldrh	r3, [r7, #24]
 80127ee:	1c59      	adds	r1, r3, #1
 80127f0:	8339      	strh	r1, [r7, #24]
 80127f2:	b2d2      	uxtb	r2, r2
 80127f4:	3320      	adds	r3, #32
 80127f6:	443b      	add	r3, r7
 80127f8:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Set the new value  */
            dwTemp = (uint32_t)CRC_RX_CONFIG_RX_CRC_ENABLE_MASK;
 80127fc:	2301      	movs	r3, #1
 80127fe:	61fb      	str	r3, [r7, #28]
            /* If the card type is other than I18000p3m3, operate the CRC in 16-bit mode */
            if (pDataParams->bCardType == PHHAL_HW_CARDTYPE_I18000P3M3)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012806:	2b06      	cmp	r3, #6
 8012808:	d103      	bne.n	8012812 <phhalHw_Pn5180_SetConfig_Int+0x2c2>
            {
                /* Just set the bit for 5-bit mode operation */
                dwTemp |= (uint32_t)CRC_RX_CONFIG_RX_CRC_TYPE_MASK;
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	f043 0304 	orr.w	r3, r3, #4
 8012810:	61fb      	str	r3, [r7, #28]
            }

            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = CRC_RX_CONFIG;
 8012812:	8b3b      	ldrh	r3, [r7, #24]
 8012814:	1c5a      	adds	r2, r3, #1
 8012816:	833a      	strh	r2, [r7, #24]
 8012818:	3320      	adds	r3, #32
 801281a:	443b      	add	r3, r7
 801281c:	2212      	movs	r2, #18
 801281e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8012822:	8b3b      	ldrh	r3, [r7, #24]
 8012824:	1c5a      	adds	r2, r3, #1
 8012826:	833a      	strh	r2, [r7, #24]
 8012828:	3320      	adds	r3, #32
 801282a:	443b      	add	r3, r7
 801282c:	2202      	movs	r2, #2
 801282e:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8012832:	8b3b      	ldrh	r3, [r7, #24]
 8012834:	1c5a      	adds	r2, r3, #1
 8012836:	833a      	strh	r2, [r7, #24]
 8012838:	69fa      	ldr	r2, [r7, #28]
 801283a:	b2d2      	uxtb	r2, r2
 801283c:	3320      	adds	r3, #32
 801283e:	443b      	add	r3, r7
 8012840:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8012844:	69fb      	ldr	r3, [r7, #28]
 8012846:	0a1a      	lsrs	r2, r3, #8
 8012848:	8b3b      	ldrh	r3, [r7, #24]
 801284a:	1c59      	adds	r1, r3, #1
 801284c:	8339      	strh	r1, [r7, #24]
 801284e:	b2d2      	uxtb	r2, r2
 8012850:	3320      	adds	r3, #32
 8012852:	443b      	add	r3, r7
 8012854:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	0c1a      	lsrs	r2, r3, #16
 801285c:	8b3b      	ldrh	r3, [r7, #24]
 801285e:	1c59      	adds	r1, r3, #1
 8012860:	8339      	strh	r1, [r7, #24]
 8012862:	b2d2      	uxtb	r2, r2
 8012864:	3320      	adds	r3, #32
 8012866:	443b      	add	r3, r7
 8012868:	f803 2c18 	strb.w	r2, [r3, #-24]
            wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	0e1a      	lsrs	r2, r3, #24
 8012870:	8b3b      	ldrh	r3, [r7, #24]
 8012872:	1c59      	adds	r1, r3, #1
 8012874:	8339      	strh	r1, [r7, #24]
 8012876:	b2d2      	uxtb	r2, r2
 8012878:	3320      	adds	r3, #32
 801287a:	443b      	add	r3, r7
 801287c:	f803 2c18 	strb.w	r2, [r3, #-24]

            /*Send the array to the IC*/
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8012880:	8b3a      	ldrh	r2, [r7, #24]
 8012882:	f107 0308 	add.w	r3, r7, #8
 8012886:	4619      	mov	r1, r3
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f7fe fdef 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 801288e:	4603      	mov	r3, r0
 8012890:	837b      	strh	r3, [r7, #26]
 8012892:	8b7b      	ldrh	r3, [r7, #26]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d01b      	beq.n	80128d0 <phhalHw_Pn5180_SetConfig_Int+0x380>
 8012898:	8b7b      	ldrh	r3, [r7, #26]
 801289a:	e01d      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;

    case PHHAL_HW_CONFIG_ASK100:

        /* switch off 100% ASK */
        if (wValue == PH_OFF)
 801289c:	883b      	ldrh	r3, [r7, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d102      	bne.n	80128a8 <phhalHw_Pn5180_SetConfig_Int+0x358>
        {
            /* ASK 10  is not supported for all the combinations*/;
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 80128a2:	f240 2323 	movw	r3, #547	@ 0x223
 80128a6:	e017      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }
        /* switch on 100% ASK */
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, ANA_RF_CONTROL_TX, ~(uint32_t)ANA_RF_CONTROL_TX_TX_RESIDUAL_CARRIER_MASK));
 80128a8:	f46f 3278 	mvn.w	r2, #253952	@ 0x3e000
 80128ac:	2120      	movs	r1, #32
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f7fe fd66 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80128b4:	4603      	mov	r3, r0
 80128b6:	837b      	strh	r3, [r7, #26]
 80128b8:	8b7b      	ldrh	r3, [r7, #26]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00a      	beq.n	80128d4 <phhalHw_Pn5180_SetConfig_Int+0x384>
 80128be:	8b7b      	ldrh	r3, [r7, #26]
 80128c0:	e00a      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        }

        break;

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 80128c2:	f240 237f 	movw	r3, #639	@ 0x27f
 80128c6:	e007      	b.n	80128d8 <phhalHw_Pn5180_SetConfig_Int+0x388>
        break;
 80128c8:	bf00      	nop
 80128ca:	e004      	b.n	80128d6 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 80128cc:	bf00      	nop
 80128ce:	e002      	b.n	80128d6 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 80128d0:	bf00      	nop
 80128d2:	e000      	b.n	80128d6 <phhalHw_Pn5180_SetConfig_Int+0x386>
        break;
 80128d4:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3720      	adds	r7, #32
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <phhalHw_Pn5180_SetConfig_FelicaEmdReg>:

phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdReg(
    phhalHw_Pn5180_DataParams_t * pDataParams
    )
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
    phStatus_t PH_MEMLOC_REM statusTmp;

    if (pDataParams->bOpeMode != RD_LIB_MODE_FELICA)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80128ee:	2b04      	cmp	r3, #4
 80128f0:	d00f      	beq.n	8012912 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x32>
    {
        /* Clear FeliCa EMD Control Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, (uint32_t)0x0U));
 80128f2:	2200      	movs	r2, #0
 80128f4:	2143      	movs	r1, #67	@ 0x43
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7fe fc56 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 80128fc:	4603      	mov	r3, r0
 80128fe:	81fb      	strh	r3, [r7, #14]
 8012900:	89fb      	ldrh	r3, [r7, #14]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d001      	beq.n	801290a <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x2a>
 8012906:	89fb      	ldrh	r3, [r7, #14]
 8012908:	e013      	b.n	8012932 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Reset shadow register */
        pDataParams->dwFelicaEmdReg = (uint32_t)0x0U;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2200      	movs	r2, #0
 801290e:	655a      	str	r2, [r3, #84]	@ 0x54
 8012910:	e00e      	b.n	8012930 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x50>
    }
    else
    {
        /* Configure FeliCa EMD Control Register with default value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER));
 8012912:	4a0a      	ldr	r2, [pc, #40]	@ (801293c <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 8012914:	2143      	movs	r1, #67	@ 0x43
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f7fe fc46 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 801291c:	4603      	mov	r3, r0
 801291e:	81fb      	strh	r3, [r7, #14]
 8012920:	89fb      	ldrh	r3, [r7, #14]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d001      	beq.n	801292a <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x4a>
 8012926:	89fb      	ldrh	r3, [r7, #14]
 8012928:	e003      	b.n	8012932 <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x52>
        /* Configure shadow register with default value */
        pDataParams->dwFelicaEmdReg = PHHAL_HW_PN5180_DEFAULT_FELICA_EMD_REGISTER;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a03      	ldr	r2, [pc, #12]	@ (801293c <phhalHw_Pn5180_SetConfig_FelicaEmdReg+0x5c>)
 801292e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	00ff0019 	.word	0x00ff0019

08012940 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit>:
phStatus_t phhalHw_Pn5180_SetConfig_FelicaEmdRegBit(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint32_t dwMaskValue
    )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b086      	sub	sp, #24
 8012944:	af00      	add	r7, sp, #0
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	460b      	mov	r3, r1
 801294a:	607a      	str	r2, [r7, #4]
 801294c:	817b      	strh	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM statusTmp;

    if ((wValue != PH_ON) && (wValue != PH_OFF))
 801294e:	897b      	ldrh	r3, [r7, #10]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d005      	beq.n	8012960 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
 8012954:	897b      	ldrh	r3, [r7, #10]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d002      	beq.n	8012960 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 801295a:	f240 2321 	movw	r3, #545	@ 0x221
 801295e:	e037      	b.n	80129d0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
    }

    if(wValue != PH_OFF)
 8012960:	897b      	ldrh	r3, [r7, #10]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d018      	beq.n	8012998 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x58>
    {
        if (!(pDataParams->dwFelicaEmdReg & dwMaskValue))
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	4013      	ands	r3, r2
 801296e:	2b00      	cmp	r3, #0
 8012970:	d12d      	bne.n	80129ce <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	2143      	movs	r1, #67	@ 0x43
 8012976:	68f8      	ldr	r0, [r7, #12]
 8012978:	f7fe fc8c 	bl	8011294 <phhalHw_Pn5180_Instr_WriteRegisterOrMask>
 801297c:	4603      	mov	r3, r0
 801297e:	82fb      	strh	r3, [r7, #22]
 8012980:	8afb      	ldrh	r3, [r7, #22]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d001      	beq.n	801298a <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x4a>
 8012986:	8afb      	ldrh	r3, [r7, #22]
 8012988:	e022      	b.n	80129d0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterOrMask(pDataParams, FELICA_EMD_CONTROL, dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg |= dwMaskValue;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	431a      	orrs	r2, r3
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	655a      	str	r2, [r3, #84]	@ 0x54
 8012996:	e01a      	b.n	80129ce <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        }
    }
    else
    {
        if (pDataParams->dwFelicaEmdReg & dwMaskValue)
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	4013      	ands	r3, r2
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d014      	beq.n	80129ce <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x8e>
        {
            /* Update FELICA_EMD_CONTROL Register */
            PH_CHECK_SUCCESS_FCT(statusTmp,
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	43db      	mvns	r3, r3
 80129a8:	461a      	mov	r2, r3
 80129aa:	2143      	movs	r1, #67	@ 0x43
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	f7fe fce7 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 80129b2:	4603      	mov	r3, r0
 80129b4:	82fb      	strh	r3, [r7, #22]
 80129b6:	8afb      	ldrh	r3, [r7, #22]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d001      	beq.n	80129c0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x80>
 80129bc:	8afb      	ldrh	r3, [r7, #22]
 80129be:	e007      	b.n	80129d0 <phhalHw_Pn5180_SetConfig_FelicaEmdRegBit+0x90>
                phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams, FELICA_EMD_CONTROL, (uint32_t)~dwMaskValue));
            /* Update shadow register */
            pDataParams->dwFelicaEmdReg &= (uint32_t)~dwMaskValue;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	43db      	mvns	r3, r3
 80129c8:	401a      	ands	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    }

    return PH_ERR_SUCCESS;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3718      	adds	r7, #24
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte>:
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wValue,
    uint8_t bBytePos,
    uint32_t dwMaskValue
    )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	607b      	str	r3, [r7, #4]
 80129e2:	460b      	mov	r3, r1
 80129e4:	817b      	strh	r3, [r7, #10]
 80129e6:	4613      	mov	r3, r2
 80129e8:	727b      	strb	r3, [r7, #9]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwValue;

    if (wValue & 0xFF00U)
 80129ea:	897b      	ldrh	r3, [r7, #10]
 80129ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d002      	beq.n	80129fa <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 80129f4:	f240 2321 	movw	r3, #545	@ 0x221
 80129f8:	e028      	b.n	8012a4c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
    }

    if ((uint8_t)(pDataParams->dwFelicaEmdReg >> bBytePos) != (uint8_t)wValue)
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80129fe:	7a7b      	ldrb	r3, [r7, #9]
 8012a00:	fa22 f303 	lsr.w	r3, r2, r3
 8012a04:	b2da      	uxtb	r2, r3
 8012a06:	897b      	ldrh	r3, [r7, #10]
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d01d      	beq.n	8012a4a <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x72>
    {
        dwValue = pDataParams->dwFelicaEmdReg;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a12:	617b      	str	r3, [r7, #20]
        dwValue &= ((uint32_t)~dwMaskValue);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	43db      	mvns	r3, r3
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	617b      	str	r3, [r7, #20]
        dwValue |= ((uint32_t)wValue << bBytePos);
 8012a1e:	897a      	ldrh	r2, [r7, #10]
 8012a20:	7a7b      	ldrb	r3, [r7, #9]
 8012a22:	fa02 f303 	lsl.w	r3, r2, r3
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	617b      	str	r3, [r7, #20]
        /* Update FELICA_EMD_CONTROL Register */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, FELICA_EMD_CONTROL, dwValue));
 8012a2c:	697a      	ldr	r2, [r7, #20]
 8012a2e:	2143      	movs	r1, #67	@ 0x43
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f7fe fbb9 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8012a36:	4603      	mov	r3, r0
 8012a38:	827b      	strh	r3, [r7, #18]
 8012a3a:	8a7b      	ldrh	r3, [r7, #18]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d001      	beq.n	8012a44 <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x6c>
 8012a40:	8a7b      	ldrh	r3, [r7, #18]
 8012a42:	e003      	b.n	8012a4c <phhalHw_Pn5180_SetConfig_FelicaEmdRegByte+0x74>
        /* Update shadow register */
        pDataParams->dwFelicaEmdReg = dwValue;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    return PH_ERR_SUCCESS;
 8012a4a:	2300      	movs	r3, #0
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3718      	adds	r7, #24
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <phhalHw_Pn5180_SetCardMode>:
phStatus_t phhalHw_Pn5180_SetCardMode(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint16_t wTxDataRate,
    uint16_t wRxDataRate,
    uint16_t wSubcarrier )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	4608      	mov	r0, r1
 8012a5e:	4611      	mov	r1, r2
 8012a60:	461a      	mov	r2, r3
 8012a62:	4603      	mov	r3, r0
 8012a64:	817b      	strh	r3, [r7, #10]
 8012a66:	460b      	mov	r3, r1
 8012a68:	813b      	strh	r3, [r7, #8]
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTxConfig = 0U;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	75fb      	strb	r3, [r7, #23]
    uint8_t     PH_MEMLOC_REM bRxConfig = 0U;
 8012a72:	2300      	movs	r3, #0
 8012a74:	75bb      	strb	r3, [r7, #22]

    if(pDataParams->wTargetMode == PH_OFF)
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10f      	bne.n	8012a9e <phhalHw_Pn5180_SetCardMode+0x4a>
    {
        if(wTxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING])
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012a84:	897a      	ldrh	r2, [r7, #10]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d101      	bne.n	8012a8e <phhalHw_Pn5180_SetCardMode+0x3a>
        {
            wTxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8012a8a:	23ff      	movs	r3, #255	@ 0xff
 8012a8c:	817b      	strh	r3, [r7, #10]
        }
        if(wRxDataRate == pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING])
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8012a94:	893a      	ldrh	r2, [r7, #8]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d101      	bne.n	8012a9e <phhalHw_Pn5180_SetCardMode+0x4a>
        {
            wRxDataRate = PHHAL_HW_RF_DATARATE_NO_CHANGE;
 8012a9a:	23ff      	movs	r3, #255	@ 0xff
 8012a9c:	813b      	strh	r3, [r7, #8]
        }
    }

    switch (pDataParams->bCardType)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	2b09      	cmp	r3, #9
 8012aa8:	f200 82a1 	bhi.w	8012fee <phhalHw_Pn5180_SetCardMode+0x59a>
 8012aac:	a201      	add	r2, pc, #4	@ (adr r2, 8012ab4 <phhalHw_Pn5180_SetCardMode+0x60>)
 8012aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab2:	bf00      	nop
 8012ab4:	08012add 	.word	0x08012add
 8012ab8:	08012ca5 	.word	0x08012ca5
 8012abc:	08012d45 	.word	0x08012d45
 8012ac0:	08012e61 	.word	0x08012e61
 8012ac4:	08012fef 	.word	0x08012fef
 8012ac8:	08012ef7 	.word	0x08012ef7
 8012acc:	08012f79 	.word	0x08012f79
 8012ad0:	08012f79 	.word	0x08012f79
 8012ad4:	08012f79 	.word	0x08012f79
 8012ad8:	08012d45 	.word	0x08012d45
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:

        /* Check if Target is activated and perform required change to switch BaudRate. */
        if (pDataParams->wTargetMode != PH_OFF)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f000 808e 	beq.w	8012c02 <phhalHw_Pn5180_SetCardMode+0x1ae>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d14e      	bne.n	8012b8e <phhalHw_Pn5180_SetCardMode+0x13a>
            {
                switch (wTxDataRate)
 8012af0:	897b      	ldrh	r3, [r7, #10]
 8012af2:	2b03      	cmp	r3, #3
 8012af4:	dc0e      	bgt.n	8012b14 <phhalHw_Pn5180_SetCardMode+0xc0>
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	db1e      	blt.n	8012b38 <phhalHw_Pn5180_SetCardMode+0xe4>
 8012afa:	2b03      	cmp	r3, #3
 8012afc:	d81c      	bhi.n	8012b38 <phhalHw_Pn5180_SetCardMode+0xe4>
 8012afe:	a201      	add	r2, pc, #4	@ (adr r2, 8012b04 <phhalHw_Pn5180_SetCardMode+0xb0>)
 8012b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b04:	08012b1b 	.word	0x08012b1b
 8012b08:	08012b21 	.word	0x08012b21
 8012b0c:	08012b27 	.word	0x08012b27
 8012b10:	08012b2d 	.word	0x08012b2d
 8012b14:	2bff      	cmp	r3, #255	@ 0xff
 8012b16:	d00c      	beq.n	8012b32 <phhalHw_Pn5180_SetCardMode+0xde>
 8012b18:	e00e      	b.n	8012b38 <phhalHw_Pn5180_SetCardMode+0xe4>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_106_MANCH_SUBC;
 8012b1a:	2313      	movs	r3, #19
 8012b1c:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8012b1e:	e00e      	b.n	8012b3e <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_212_BPSK;
 8012b20:	2314      	movs	r3, #20
 8012b22:	75fb      	strb	r3, [r7, #23]
                        /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8012b24:	e00b      	b.n	8012b3e <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_424_BPSK;
 8012b26:	2315      	movs	r3, #21
 8012b28:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8012b2a:	e008      	b.n	8012b3e <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_848:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_PICC_848_BPSK;
 8012b2c:	2316      	movs	r3, #22
 8012b2e:	75fb      	strb	r3, [r7, #23]
                        /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8012b30:	e005      	b.n	8012b3e <phhalHw_Pn5180_SetCardMode+0xea>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012b32:	23ff      	movs	r3, #255	@ 0xff
 8012b34:	75fb      	strb	r3, [r7, #23]
                        break;
 8012b36:	e002      	b.n	8012b3e <phhalHw_Pn5180_SetCardMode+0xea>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012b38:	f240 2321 	movw	r3, #545	@ 0x221
 8012b3c:	e27c      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8012b3e:	893b      	ldrh	r3, [r7, #8]
 8012b40:	2b03      	cmp	r3, #3
 8012b42:	dc0f      	bgt.n	8012b64 <phhalHw_Pn5180_SetCardMode+0x110>
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	db1f      	blt.n	8012b88 <phhalHw_Pn5180_SetCardMode+0x134>
 8012b48:	2b03      	cmp	r3, #3
 8012b4a:	d81d      	bhi.n	8012b88 <phhalHw_Pn5180_SetCardMode+0x134>
 8012b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b54 <phhalHw_Pn5180_SetCardMode+0x100>)
 8012b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b52:	bf00      	nop
 8012b54:	08012b6b 	.word	0x08012b6b
 8012b58:	08012b71 	.word	0x08012b71
 8012b5c:	08012b77 	.word	0x08012b77
 8012b60:	08012b7d 	.word	0x08012b7d
 8012b64:	2bff      	cmp	r3, #255	@ 0xff
 8012b66:	d00c      	beq.n	8012b82 <phhalHw_Pn5180_SetCardMode+0x12e>
 8012b68:	e00e      	b.n	8012b88 <phhalHw_Pn5180_SetCardMode+0x134>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_106_MILLER;
 8012b6a:	2393      	movs	r3, #147	@ 0x93
 8012b6c:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                        break;
 8012b6e:	e098      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_212_MILLER;
 8012b70:	2394      	movs	r3, #148	@ 0x94
 8012b72:	75bb      	strb	r3, [r7, #22]
                        /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                        break;
 8012b74:	e095      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_424_MILLER;
 8012b76:	2395      	movs	r3, #149	@ 0x95
 8012b78:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                        break;
 8012b7a:	e092      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_848:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_PICC_848_MILLER;
 8012b7c:	2396      	movs	r3, #150	@ 0x96
 8012b7e:	75bb      	strb	r3, [r7, #22]
                        /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                        break;
 8012b80:	e08f      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012b82:	23ff      	movs	r3, #255	@ 0xff
 8012b84:	75bb      	strb	r3, [r7, #22]
                        break;
 8012b86:	e08c      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012b88:	f240 2321 	movw	r3, #545	@ 0x221
 8012b8c:	e254      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8012b8e:	897b      	ldrh	r3, [r7, #10]
 8012b90:	2bff      	cmp	r3, #255	@ 0xff
 8012b92:	d013      	beq.n	8012bbc <phhalHw_Pn5180_SetCardMode+0x168>
 8012b94:	2bff      	cmp	r3, #255	@ 0xff
 8012b96:	dc14      	bgt.n	8012bc2 <phhalHw_Pn5180_SetCardMode+0x16e>
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d00c      	beq.n	8012bb6 <phhalHw_Pn5180_SetCardMode+0x162>
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	dc10      	bgt.n	8012bc2 <phhalHw_Pn5180_SetCardMode+0x16e>
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <phhalHw_Pn5180_SetCardMode+0x156>
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d003      	beq.n	8012bb0 <phhalHw_Pn5180_SetCardMode+0x15c>
 8012ba8:	e00b      	b.n	8012bc2 <phhalHw_Pn5180_SetCardMode+0x16e>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_106;
 8012baa:	2319      	movs	r3, #25
 8012bac:	75fb      	strb	r3, [r7, #23]
                        break;
 8012bae:	e00b      	b.n	8012bc8 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8012bb0:	231a      	movs	r3, #26
 8012bb2:	75fb      	strb	r3, [r7, #23]
                        break;
 8012bb4:	e008      	b.n	8012bc8 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8012bb6:	231b      	movs	r3, #27
 8012bb8:	75fb      	strb	r3, [r7, #23]
                        break;
 8012bba:	e005      	b.n	8012bc8 <phhalHw_Pn5180_SetCardMode+0x174>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012bbc:	23ff      	movs	r3, #255	@ 0xff
 8012bbe:	75fb      	strb	r3, [r7, #23]
                        break;
 8012bc0:	e002      	b.n	8012bc8 <phhalHw_Pn5180_SetCardMode+0x174>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012bc2:	f240 2321 	movw	r3, #545	@ 0x221
 8012bc6:	e237      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
                switch (wRxDataRate)
 8012bc8:	893b      	ldrh	r3, [r7, #8]
 8012bca:	2bff      	cmp	r3, #255	@ 0xff
 8012bcc:	d013      	beq.n	8012bf6 <phhalHw_Pn5180_SetCardMode+0x1a2>
 8012bce:	2bff      	cmp	r3, #255	@ 0xff
 8012bd0:	dc14      	bgt.n	8012bfc <phhalHw_Pn5180_SetCardMode+0x1a8>
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	d00c      	beq.n	8012bf0 <phhalHw_Pn5180_SetCardMode+0x19c>
 8012bd6:	2b02      	cmp	r3, #2
 8012bd8:	dc10      	bgt.n	8012bfc <phhalHw_Pn5180_SetCardMode+0x1a8>
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d002      	beq.n	8012be4 <phhalHw_Pn5180_SetCardMode+0x190>
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d003      	beq.n	8012bea <phhalHw_Pn5180_SetCardMode+0x196>
 8012be2:	e00b      	b.n	8012bfc <phhalHw_Pn5180_SetCardMode+0x1a8>
                {
                    case PHHAL_HW_RF_DATARATE_106:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_106;
 8012be4:	2399      	movs	r3, #153	@ 0x99
 8012be6:	75bb      	strb	r3, [r7, #22]
                        break;
 8012be8:	e05b      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8012bea:	239a      	movs	r3, #154	@ 0x9a
 8012bec:	75bb      	strb	r3, [r7, #22]
                        break;
 8012bee:	e058      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8012bf0:	239b      	movs	r3, #155	@ 0x9b
 8012bf2:	75bb      	strb	r3, [r7, #22]
                        break;
 8012bf4:	e055      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012bf6:	23ff      	movs	r3, #255	@ 0xff
 8012bf8:	75bb      	strb	r3, [r7, #22]
                        break;
 8012bfa:	e052      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012bfc:	f240 2321 	movw	r3, #545	@ 0x221
 8012c00:	e21a      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        else
        {
            switch (wTxDataRate)
 8012c02:	897b      	ldrh	r3, [r7, #10]
 8012c04:	2b03      	cmp	r3, #3
 8012c06:	dc0f      	bgt.n	8012c28 <phhalHw_Pn5180_SetCardMode+0x1d4>
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	db1f      	blt.n	8012c4c <phhalHw_Pn5180_SetCardMode+0x1f8>
 8012c0c:	2b03      	cmp	r3, #3
 8012c0e:	d81d      	bhi.n	8012c4c <phhalHw_Pn5180_SetCardMode+0x1f8>
 8012c10:	a201      	add	r2, pc, #4	@ (adr r2, 8012c18 <phhalHw_Pn5180_SetCardMode+0x1c4>)
 8012c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c16:	bf00      	nop
 8012c18:	08012c2f 	.word	0x08012c2f
 8012c1c:	08012c35 	.word	0x08012c35
 8012c20:	08012c3b 	.word	0x08012c3b
 8012c24:	08012c41 	.word	0x08012c41
 8012c28:	2bff      	cmp	r3, #255	@ 0xff
 8012c2a:	d00c      	beq.n	8012c46 <phhalHw_Pn5180_SetCardMode+0x1f2>
 8012c2c:	e00e      	b.n	8012c4c <phhalHw_Pn5180_SetCardMode+0x1f8>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_106_MILLER;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8012c32:	e00e      	b.n	8012c52 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_212_MILLER;
 8012c34:	2301      	movs	r3, #1
 8012c36:	75fb      	strb	r3, [r7, #23]
                    /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8012c38:	e00b      	b.n	8012c52 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_424_MILLER;
 8012c3a:	2302      	movs	r3, #2
 8012c3c:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8012c3e:	e008      	b.n	8012c52 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_848:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443A_848_MILLER;
 8012c40:	2303      	movs	r3, #3
 8012c42:	75fb      	strb	r3, [r7, #23]
                    /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8012c44:	e005      	b.n	8012c52 <phhalHw_Pn5180_SetCardMode+0x1fe>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012c46:	23ff      	movs	r3, #255	@ 0xff
 8012c48:	75fb      	strb	r3, [r7, #23]
                    break;
 8012c4a:	e002      	b.n	8012c52 <phhalHw_Pn5180_SetCardMode+0x1fe>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012c4c:	f240 2321 	movw	r3, #545	@ 0x221
 8012c50:	e1f2      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
            switch (wRxDataRate)
 8012c52:	893b      	ldrh	r3, [r7, #8]
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	dc0f      	bgt.n	8012c78 <phhalHw_Pn5180_SetCardMode+0x224>
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	db1f      	blt.n	8012c9c <phhalHw_Pn5180_SetCardMode+0x248>
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d81d      	bhi.n	8012c9c <phhalHw_Pn5180_SetCardMode+0x248>
 8012c60:	a201      	add	r2, pc, #4	@ (adr r2, 8012c68 <phhalHw_Pn5180_SetCardMode+0x214>)
 8012c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c66:	bf00      	nop
 8012c68:	08012c7f 	.word	0x08012c7f
 8012c6c:	08012c85 	.word	0x08012c85
 8012c70:	08012c8b 	.word	0x08012c8b
 8012c74:	08012c91 	.word	0x08012c91
 8012c78:	2bff      	cmp	r3, #255	@ 0xff
 8012c7a:	d00c      	beq.n	8012c96 <phhalHw_Pn5180_SetCardMode+0x242>
 8012c7c:	e00e      	b.n	8012c9c <phhalHw_Pn5180_SetCardMode+0x248>
            {
                case PHHAL_HW_RF_DATARATE_106:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_106_MANCH_SUBC;
 8012c7e:	2380      	movs	r3, #128	@ 0x80
 8012c80:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_106;*/
                    break;
 8012c82:	e00e      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_212_BPSK;
 8012c84:	2381      	movs	r3, #129	@ 0x81
 8012c86:	75bb      	strb	r3, [r7, #22]
                    /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_212;*/
                    break;
 8012c88:	e00b      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_424_BPSK;
 8012c8a:	2382      	movs	r3, #130	@ 0x82
 8012c8c:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_424;*/
                    break;
 8012c8e:	e008      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_848:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443A_848_BPSK;
 8012c90:	2383      	movs	r3, #131	@ 0x83
 8012c92:	75bb      	strb	r3, [r7, #22]
                    /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443A_848;*/
                    break;
 8012c94:	e005      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012c96:	23ff      	movs	r3, #255	@ 0xff
 8012c98:	75bb      	strb	r3, [r7, #22]
                    break;
 8012c9a:	e002      	b.n	8012ca2 <phhalHw_Pn5180_SetCardMode+0x24e>
                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012c9c:	f240 2321 	movw	r3, #545	@ 0x221
 8012ca0:	e1ca      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }
        }
        break;
 8012ca2:	e1a7      	b.n	8012ff4 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO14443B:

        switch (wTxDataRate)
 8012ca4:	897b      	ldrh	r3, [r7, #10]
 8012ca6:	2b03      	cmp	r3, #3
 8012ca8:	dc0e      	bgt.n	8012cc8 <phhalHw_Pn5180_SetCardMode+0x274>
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	db1e      	blt.n	8012cec <phhalHw_Pn5180_SetCardMode+0x298>
 8012cae:	2b03      	cmp	r3, #3
 8012cb0:	d81c      	bhi.n	8012cec <phhalHw_Pn5180_SetCardMode+0x298>
 8012cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8012cb8 <phhalHw_Pn5180_SetCardMode+0x264>)
 8012cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb8:	08012ccf 	.word	0x08012ccf
 8012cbc:	08012cd5 	.word	0x08012cd5
 8012cc0:	08012cdb 	.word	0x08012cdb
 8012cc4:	08012ce1 	.word	0x08012ce1
 8012cc8:	2bff      	cmp	r3, #255	@ 0xff
 8012cca:	d00c      	beq.n	8012ce6 <phhalHw_Pn5180_SetCardMode+0x292>
 8012ccc:	e00e      	b.n	8012cec <phhalHw_Pn5180_SetCardMode+0x298>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_106_NRZ;
 8012cce:	2304      	movs	r3, #4
 8012cd0:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8012cd2:	e00e      	b.n	8012cf2 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_212_NRZ;
 8012cd4:	2305      	movs	r3, #5
 8012cd6:	75fb      	strb	r3, [r7, #23]
                /* pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8012cd8:	e00b      	b.n	8012cf2 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_424_NRZ;
 8012cda:	2306      	movs	r3, #6
 8012cdc:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8012cde:	e008      	b.n	8012cf2 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_848:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO14443B_848_NRZ;
 8012ce0:	2307      	movs	r3, #7
 8012ce2:	75fb      	strb	r3, [r7, #23]
                /*pTxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8012ce4:	e005      	b.n	8012cf2 <phhalHw_Pn5180_SetCardMode+0x29e>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012ce6:	23ff      	movs	r3, #255	@ 0xff
 8012ce8:	75fb      	strb	r3, [r7, #23]
                break;
 8012cea:	e002      	b.n	8012cf2 <phhalHw_Pn5180_SetCardMode+0x29e>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012cec:	f240 2321 	movw	r3, #545	@ 0x221
 8012cf0:	e1a2      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8012cf2:	893b      	ldrh	r3, [r7, #8]
 8012cf4:	2b03      	cmp	r3, #3
 8012cf6:	dc0f      	bgt.n	8012d18 <phhalHw_Pn5180_SetCardMode+0x2c4>
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	db1f      	blt.n	8012d3c <phhalHw_Pn5180_SetCardMode+0x2e8>
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d81d      	bhi.n	8012d3c <phhalHw_Pn5180_SetCardMode+0x2e8>
 8012d00:	a201      	add	r2, pc, #4	@ (adr r2, 8012d08 <phhalHw_Pn5180_SetCardMode+0x2b4>)
 8012d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d06:	bf00      	nop
 8012d08:	08012d1f 	.word	0x08012d1f
 8012d0c:	08012d25 	.word	0x08012d25
 8012d10:	08012d2b 	.word	0x08012d2b
 8012d14:	08012d31 	.word	0x08012d31
 8012d18:	2bff      	cmp	r3, #255	@ 0xff
 8012d1a:	d00c      	beq.n	8012d36 <phhalHw_Pn5180_SetCardMode+0x2e2>
 8012d1c:	e00e      	b.n	8012d3c <phhalHw_Pn5180_SetCardMode+0x2e8>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_106_BPSK;
 8012d1e:	2384      	movs	r3, #132	@ 0x84
 8012d20:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_106;*/
                break;
 8012d22:	e00e      	b.n	8012d42 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_212_BPSK;
 8012d24:	2385      	movs	r3, #133	@ 0x85
 8012d26:	75bb      	strb	r3, [r7, #22]
                /*pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_212;*/
                break;
 8012d28:	e00b      	b.n	8012d42 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_424_BPSK;
 8012d2a:	2386      	movs	r3, #134	@ 0x86
 8012d2c:	75bb      	strb	r3, [r7, #22]
                /* pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_424;*/
                break;
 8012d2e:	e008      	b.n	8012d42 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_848:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO14443B_848_BPSK;
 8012d30:	2387      	movs	r3, #135	@ 0x87
 8012d32:	75bb      	strb	r3, [r7, #22]
                /*  pRxRegisterSet = (const uint8_t*)gkphhalHw_Pn5180_I14443B_848;*/
                break;
 8012d34:	e005      	b.n	8012d42 <phhalHw_Pn5180_SetCardMode+0x2ee>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012d36:	23ff      	movs	r3, #255	@ 0xff
 8012d38:	75bb      	strb	r3, [r7, #22]
                break;
 8012d3a:	e002      	b.n	8012d42 <phhalHw_Pn5180_SetCardMode+0x2ee>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012d3c:	f240 2321 	movw	r3, #545	@ 0x221
 8012d40:	e17a      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8012d42:	e157      	b.n	8012ff4 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:

        if (pDataParams->wTargetMode != PH_OFF)
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d05c      	beq.n	8012e06 <phhalHw_Pn5180_SetCardMode+0x3b2>
        {
            if(pDataParams->bActiveMode == PH_OFF)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d12b      	bne.n	8012dae <phhalHw_Pn5180_SetCardMode+0x35a>
            {
                switch (wTxDataRate)
 8012d56:	897b      	ldrh	r3, [r7, #10]
 8012d58:	2bff      	cmp	r3, #255	@ 0xff
 8012d5a:	d00c      	beq.n	8012d76 <phhalHw_Pn5180_SetCardMode+0x322>
 8012d5c:	2bff      	cmp	r3, #255	@ 0xff
 8012d5e:	dc0d      	bgt.n	8012d7c <phhalHw_Pn5180_SetCardMode+0x328>
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d002      	beq.n	8012d6a <phhalHw_Pn5180_SetCardMode+0x316>
 8012d64:	2b02      	cmp	r3, #2
 8012d66:	d003      	beq.n	8012d70 <phhalHw_Pn5180_SetCardMode+0x31c>
 8012d68:	e008      	b.n	8012d7c <phhalHw_Pn5180_SetCardMode+0x328>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_212;
 8012d6a:	2317      	movs	r3, #23
 8012d6c:	75fb      	strb	r3, [r7, #23]
                        break;
 8012d6e:	e008      	b.n	8012d82 <phhalHw_Pn5180_SetCardMode+0x32e>

                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_PT_424;
 8012d70:	2318      	movs	r3, #24
 8012d72:	75fb      	strb	r3, [r7, #23]
                        break;
 8012d74:	e005      	b.n	8012d82 <phhalHw_Pn5180_SetCardMode+0x32e>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012d76:	23ff      	movs	r3, #255	@ 0xff
 8012d78:	75fb      	strb	r3, [r7, #23]
                        break;
 8012d7a:	e002      	b.n	8012d82 <phhalHw_Pn5180_SetCardMode+0x32e>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012d7c:	f240 2321 	movw	r3, #545	@ 0x221
 8012d80:	e15a      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8012d82:	893b      	ldrh	r3, [r7, #8]
 8012d84:	2bff      	cmp	r3, #255	@ 0xff
 8012d86:	d00c      	beq.n	8012da2 <phhalHw_Pn5180_SetCardMode+0x34e>
 8012d88:	2bff      	cmp	r3, #255	@ 0xff
 8012d8a:	dc0d      	bgt.n	8012da8 <phhalHw_Pn5180_SetCardMode+0x354>
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d002      	beq.n	8012d96 <phhalHw_Pn5180_SetCardMode+0x342>
 8012d90:	2b02      	cmp	r3, #2
 8012d92:	d003      	beq.n	8012d9c <phhalHw_Pn5180_SetCardMode+0x348>
 8012d94:	e008      	b.n	8012da8 <phhalHw_Pn5180_SetCardMode+0x354>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_212;
 8012d96:	2397      	movs	r3, #151	@ 0x97
 8012d98:	75bb      	strb	r3, [r7, #22]
                        break;
 8012d9a:	e060      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>

                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_PT_424;
 8012d9c:	2398      	movs	r3, #152	@ 0x98
 8012d9e:	75bb      	strb	r3, [r7, #22]
                        break;
 8012da0:	e05d      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012da2:	23ff      	movs	r3, #255	@ 0xff
 8012da4:	75bb      	strb	r3, [r7, #22]
                        break;
 8012da6:	e05a      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012da8:	f240 2321 	movw	r3, #545	@ 0x221
 8012dac:	e144      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
            else
            {
                switch (wTxDataRate)
 8012dae:	897b      	ldrh	r3, [r7, #10]
 8012db0:	2bff      	cmp	r3, #255	@ 0xff
 8012db2:	d00c      	beq.n	8012dce <phhalHw_Pn5180_SetCardMode+0x37a>
 8012db4:	2bff      	cmp	r3, #255	@ 0xff
 8012db6:	dc0d      	bgt.n	8012dd4 <phhalHw_Pn5180_SetCardMode+0x380>
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d002      	beq.n	8012dc2 <phhalHw_Pn5180_SetCardMode+0x36e>
 8012dbc:	2b02      	cmp	r3, #2
 8012dbe:	d003      	beq.n	8012dc8 <phhalHw_Pn5180_SetCardMode+0x374>
 8012dc0:	e008      	b.n	8012dd4 <phhalHw_Pn5180_SetCardMode+0x380>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_212;
 8012dc2:	231a      	movs	r3, #26
 8012dc4:	75fb      	strb	r3, [r7, #23]
                        break;
 8012dc6:	e008      	b.n	8012dda <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_424:
                        bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AT_424;
 8012dc8:	231b      	movs	r3, #27
 8012dca:	75fb      	strb	r3, [r7, #23]
                        break;
 8012dcc:	e005      	b.n	8012dda <phhalHw_Pn5180_SetCardMode+0x386>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012dce:	23ff      	movs	r3, #255	@ 0xff
 8012dd0:	75fb      	strb	r3, [r7, #23]
                        break;
 8012dd2:	e002      	b.n	8012dda <phhalHw_Pn5180_SetCardMode+0x386>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012dd4:	f240 2321 	movw	r3, #545	@ 0x221
 8012dd8:	e12e      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                switch (wRxDataRate)
 8012dda:	893b      	ldrh	r3, [r7, #8]
 8012ddc:	2bff      	cmp	r3, #255	@ 0xff
 8012dde:	d00c      	beq.n	8012dfa <phhalHw_Pn5180_SetCardMode+0x3a6>
 8012de0:	2bff      	cmp	r3, #255	@ 0xff
 8012de2:	dc0d      	bgt.n	8012e00 <phhalHw_Pn5180_SetCardMode+0x3ac>
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	d002      	beq.n	8012dee <phhalHw_Pn5180_SetCardMode+0x39a>
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d003      	beq.n	8012df4 <phhalHw_Pn5180_SetCardMode+0x3a0>
 8012dec:	e008      	b.n	8012e00 <phhalHw_Pn5180_SetCardMode+0x3ac>
                {
                    case PHHAL_HW_RF_DATARATE_212:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_212;
 8012dee:	239a      	movs	r3, #154	@ 0x9a
 8012df0:	75bb      	strb	r3, [r7, #22]
                        break;
 8012df2:	e034      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_424:
                        bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AT_424;
 8012df4:	239b      	movs	r3, #155	@ 0x9b
 8012df6:	75bb      	strb	r3, [r7, #22]
                        break;
 8012df8:	e031      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>
                    case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                        bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012dfa:	23ff      	movs	r3, #255	@ 0xff
 8012dfc:	75bb      	strb	r3, [r7, #22]
                        break;
 8012dfe:	e02e      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>
                    default:
                        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e00:	f240 2321 	movw	r3, #545	@ 0x221
 8012e04:	e118      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }
            }
        }
        else
        {
            switch (wTxDataRate)
 8012e06:	897b      	ldrh	r3, [r7, #10]
 8012e08:	2bff      	cmp	r3, #255	@ 0xff
 8012e0a:	d00c      	beq.n	8012e26 <phhalHw_Pn5180_SetCardMode+0x3d2>
 8012e0c:	2bff      	cmp	r3, #255	@ 0xff
 8012e0e:	dc0d      	bgt.n	8012e2c <phhalHw_Pn5180_SetCardMode+0x3d8>
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d002      	beq.n	8012e1a <phhalHw_Pn5180_SetCardMode+0x3c6>
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d003      	beq.n	8012e20 <phhalHw_Pn5180_SetCardMode+0x3cc>
 8012e18:	e008      	b.n	8012e2c <phhalHw_Pn5180_SetCardMode+0x3d8>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_212;
 8012e1a:	2308      	movs	r3, #8
 8012e1c:	75fb      	strb	r3, [r7, #23]
                    break;
 8012e1e:	e008      	b.n	8012e32 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_424:
                    bTxConfig = PHHAL_HW_PN5180_RF_TX_FELICA_424;
 8012e20:	2309      	movs	r3, #9
 8012e22:	75fb      	strb	r3, [r7, #23]
                    break;
 8012e24:	e005      	b.n	8012e32 <phhalHw_Pn5180_SetCardMode+0x3de>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012e26:	23ff      	movs	r3, #255	@ 0xff
 8012e28:	75fb      	strb	r3, [r7, #23]
                    break;
 8012e2a:	e002      	b.n	8012e32 <phhalHw_Pn5180_SetCardMode+0x3de>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e2c:	f240 2321 	movw	r3, #545	@ 0x221
 8012e30:	e102      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

            switch (wRxDataRate)
 8012e32:	893b      	ldrh	r3, [r7, #8]
 8012e34:	2bff      	cmp	r3, #255	@ 0xff
 8012e36:	d00c      	beq.n	8012e52 <phhalHw_Pn5180_SetCardMode+0x3fe>
 8012e38:	2bff      	cmp	r3, #255	@ 0xff
 8012e3a:	dc0d      	bgt.n	8012e58 <phhalHw_Pn5180_SetCardMode+0x404>
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d002      	beq.n	8012e46 <phhalHw_Pn5180_SetCardMode+0x3f2>
 8012e40:	2b02      	cmp	r3, #2
 8012e42:	d003      	beq.n	8012e4c <phhalHw_Pn5180_SetCardMode+0x3f8>
 8012e44:	e008      	b.n	8012e58 <phhalHw_Pn5180_SetCardMode+0x404>
            {
                case PHHAL_HW_RF_DATARATE_212:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_212;
 8012e46:	2388      	movs	r3, #136	@ 0x88
 8012e48:	75bb      	strb	r3, [r7, #22]
                    break;
 8012e4a:	e008      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_424:
                    bRxConfig = PHHAL_HW_PN5180_RF_RX_FELICA_424;
 8012e4c:	2389      	movs	r3, #137	@ 0x89
 8012e4e:	75bb      	strb	r3, [r7, #22]
                    break;
 8012e50:	e005      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>

                case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                    bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012e52:	23ff      	movs	r3, #255	@ 0xff
 8012e54:	75bb      	strb	r3, [r7, #22]
                    break;
 8012e56:	e002      	b.n	8012e5e <phhalHw_Pn5180_SetCardMode+0x40a>

                default:
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e58:	f240 2321 	movw	r3, #545	@ 0x221
 8012e5c:	e0ec      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
            }

        }
        break;
 8012e5e:	e0c9      	b.n	8012ff4 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ISO15693:

        switch (wTxDataRate)
 8012e60:	897b      	ldrh	r3, [r7, #10]
 8012e62:	2b0b      	cmp	r3, #11
 8012e64:	d002      	beq.n	8012e6c <phhalHw_Pn5180_SetCardMode+0x418>
 8012e66:	2bff      	cmp	r3, #255	@ 0xff
 8012e68:	d003      	beq.n	8012e72 <phhalHw_Pn5180_SetCardMode+0x41e>
 8012e6a:	e005      	b.n	8012e78 <phhalHw_Pn5180_SetCardMode+0x424>
        {
            case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO15693_26_1OF4_ASK10;
 8012e6c:	230e      	movs	r3, #14
 8012e6e:	75fb      	strb	r3, [r7, #23]
                break;
 8012e70:	e005      	b.n	8012e7e <phhalHw_Pn5180_SetCardMode+0x42a>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012e72:	23ff      	movs	r3, #255	@ 0xff
 8012e74:	75fb      	strb	r3, [r7, #23]
                break;
 8012e76:	e002      	b.n	8012e7e <phhalHw_Pn5180_SetCardMode+0x42a>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012e78:	f240 2321 	movw	r3, #545	@ 0x221
 8012e7c:	e0dc      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8012e7e:	893b      	ldrh	r3, [r7, #8]
 8012e80:	2b0f      	cmp	r3, #15
 8012e82:	dc25      	bgt.n	8012ed0 <phhalHw_Pn5180_SetCardMode+0x47c>
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	dd32      	ble.n	8012eee <phhalHw_Pn5180_SetCardMode+0x49a>
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	2b0e      	cmp	r3, #14
 8012e8c:	d82f      	bhi.n	8012eee <phhalHw_Pn5180_SetCardMode+0x49a>
 8012e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8012e94 <phhalHw_Pn5180_SetCardMode+0x440>)
 8012e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e94:	08012ee3 	.word	0x08012ee3
 8012e98:	08012eef 	.word	0x08012eef
 8012e9c:	08012eef 	.word	0x08012eef
 8012ea0:	08012eef 	.word	0x08012eef
 8012ea4:	08012eef 	.word	0x08012eef
 8012ea8:	08012eef 	.word	0x08012eef
 8012eac:	08012eef 	.word	0x08012eef
 8012eb0:	08012eef 	.word	0x08012eef
 8012eb4:	08012eef 	.word	0x08012eef
 8012eb8:	08012eef 	.word	0x08012eef
 8012ebc:	08012eef 	.word	0x08012eef
 8012ec0:	08012ee3 	.word	0x08012ee3
 8012ec4:	08012ed7 	.word	0x08012ed7
 8012ec8:	08012ee3 	.word	0x08012ee3
 8012ecc:	08012edd 	.word	0x08012edd
 8012ed0:	2bff      	cmp	r3, #255	@ 0xff
 8012ed2:	d009      	beq.n	8012ee8 <phhalHw_Pn5180_SetCardMode+0x494>
 8012ed4:	e00b      	b.n	8012eee <phhalHw_Pn5180_SetCardMode+0x49a>
        {
            case PHHAL_HW_RF_RX_DATARATE_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_26_1OF4_SC;
 8012ed6:	238d      	movs	r3, #141	@ 0x8d
 8012ed8:	75bb      	strb	r3, [r7, #22]
                break;
 8012eda:	e00b      	b.n	8012ef4 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO15693_53_1OF4_SC;
 8012edc:	238e      	movs	r3, #142	@ 0x8e
 8012ede:	75bb      	strb	r3, [r7, #22]
                break;
 8012ee0:	e008      	b.n	8012ef4 <phhalHw_Pn5180_SetCardMode+0x4a0>

            case PHHAL_HW_RF_RX_DATARATE_LOW:
            case PHHAL_HW_RF_RX_DATARATE_FAST_LOW:
            case PHHAL_HW_RF_DATARATE_212:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_HAL);
 8012ee2:	f240 2323 	movw	r3, #547	@ 0x223
 8012ee6:	e0a7      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012ee8:	23ff      	movs	r3, #255	@ 0xff
 8012eea:	75bb      	strb	r3, [r7, #22]
                break;
 8012eec:	e002      	b.n	8012ef4 <phhalHw_Pn5180_SetCardMode+0x4a0>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012eee:	f240 2321 	movw	r3, #545	@ 0x221
 8012ef2:	e0a1      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8012ef4:	e07e      	b.n	8012ff4 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18000P3M3:

        switch (wTxDataRate)
 8012ef6:	897b      	ldrh	r3, [r7, #10]
 8012ef8:	2b11      	cmp	r3, #17
 8012efa:	d002      	beq.n	8012f02 <phhalHw_Pn5180_SetCardMode+0x4ae>
 8012efc:	2bff      	cmp	r3, #255	@ 0xff
 8012efe:	d00c      	beq.n	8012f1a <phhalHw_Pn5180_SetCardMode+0x4c6>
 8012f00:	e00e      	b.n	8012f20 <phhalHw_Pn5180_SetCardMode+0x4cc>
        {
            case PHHAL_HW_RF_TX_DATARATE_I18000P3M3:
                /* Subcarrier check */
                if ((wSubcarrier != PHHAL_HW_SUBCARRIER_DUAL) &&
 8012f02:	88fb      	ldrh	r3, [r7, #6]
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d005      	beq.n	8012f14 <phhalHw_Pn5180_SetCardMode+0x4c0>
 8012f08:	88fb      	ldrh	r3, [r7, #6]
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	d002      	beq.n	8012f14 <phhalHw_Pn5180_SetCardMode+0x4c0>
                    (wSubcarrier != PHHAL_HW_SUBCARRIER_QUAD))
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012f0e:	f240 2321 	movw	r3, #545	@ 0x221
 8012f12:	e091      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
                }

                bTxConfig = PHHAL_HW_PN5180_RF_TX_ISO180003M3_TARI_9_44_ASK;
 8012f14:	2310      	movs	r3, #16
 8012f16:	75fb      	strb	r3, [r7, #23]
                break;
 8012f18:	e005      	b.n	8012f26 <phhalHw_Pn5180_SetCardMode+0x4d2>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012f1a:	23ff      	movs	r3, #255	@ 0xff
 8012f1c:	75fb      	strb	r3, [r7, #23]
                break;
 8012f1e:	e002      	b.n	8012f26 <phhalHw_Pn5180_SetCardMode+0x4d2>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012f20:	f240 2321 	movw	r3, #545	@ 0x221
 8012f24:	e088      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8012f26:	893b      	ldrh	r3, [r7, #8]
 8012f28:	2b16      	cmp	r3, #22
 8012f2a:	dc0f      	bgt.n	8012f4c <phhalHw_Pn5180_SetCardMode+0x4f8>
 8012f2c:	2b13      	cmp	r3, #19
 8012f2e:	db1f      	blt.n	8012f70 <phhalHw_Pn5180_SetCardMode+0x51c>
 8012f30:	3b13      	subs	r3, #19
 8012f32:	2b03      	cmp	r3, #3
 8012f34:	d81c      	bhi.n	8012f70 <phhalHw_Pn5180_SetCardMode+0x51c>
 8012f36:	a201      	add	r2, pc, #4	@ (adr r2, 8012f3c <phhalHw_Pn5180_SetCardMode+0x4e8>)
 8012f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f3c:	08012f53 	.word	0x08012f53
 8012f40:	08012f5f 	.word	0x08012f5f
 8012f44:	08012f59 	.word	0x08012f59
 8012f48:	08012f65 	.word	0x08012f65
 8012f4c:	2bff      	cmp	r3, #255	@ 0xff
 8012f4e:	d00c      	beq.n	8012f6a <phhalHw_Pn5180_SetCardMode+0x516>
 8012f50:	e00e      	b.n	8012f70 <phhalHw_Pn5180_SetCardMode+0x51c>
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_2_PERIOD;
 8012f52:	2390      	movs	r3, #144	@ 0x90
 8012f54:	75bb      	strb	r3, [r7, #22]
                break;
 8012f56:	e00e      	b.n	8012f76 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH424_4_PERIOD;
 8012f58:	238f      	movs	r3, #143	@ 0x8f
 8012f5a:	75bb      	strb	r3, [r7, #22]
                break;
 8012f5c:	e00b      	b.n	8012f76 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_2_PERIOD;
 8012f5e:	2392      	movs	r3, #146	@ 0x92
 8012f60:	75bb      	strb	r3, [r7, #22]
                break;
 8012f62:	e008      	b.n	8012f76 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_ISO180003M3_MANCH848_4_PERIOD;
 8012f64:	2391      	movs	r3, #145	@ 0x91
 8012f66:	75bb      	strb	r3, [r7, #22]
                break;
 8012f68:	e005      	b.n	8012f76 <phhalHw_Pn5180_SetCardMode+0x522>
            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012f6a:	23ff      	movs	r3, #255	@ 0xff
 8012f6c:	75bb      	strb	r3, [r7, #22]
                break;
 8012f6e:	e002      	b.n	8012f76 <phhalHw_Pn5180_SetCardMode+0x522>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012f70:	f240 2321 	movw	r3, #545	@ 0x221
 8012f74:	e060      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }
        break;
 8012f76:	e03d      	b.n	8012ff4 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_106:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_212:
    case PHHAL_HW_CARDTYPE_I18092M_ACTIVE_424:

        switch (wTxDataRate)
 8012f78:	897b      	ldrh	r3, [r7, #10]
 8012f7a:	2bff      	cmp	r3, #255	@ 0xff
 8012f7c:	d013      	beq.n	8012fa6 <phhalHw_Pn5180_SetCardMode+0x552>
 8012f7e:	2bff      	cmp	r3, #255	@ 0xff
 8012f80:	dc14      	bgt.n	8012fac <phhalHw_Pn5180_SetCardMode+0x558>
 8012f82:	2b02      	cmp	r3, #2
 8012f84:	d00c      	beq.n	8012fa0 <phhalHw_Pn5180_SetCardMode+0x54c>
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	dc10      	bgt.n	8012fac <phhalHw_Pn5180_SetCardMode+0x558>
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d002      	beq.n	8012f94 <phhalHw_Pn5180_SetCardMode+0x540>
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d003      	beq.n	8012f9a <phhalHw_Pn5180_SetCardMode+0x546>
 8012f92:	e00b      	b.n	8012fac <phhalHw_Pn5180_SetCardMode+0x558>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_106_106;
 8012f94:	230a      	movs	r3, #10
 8012f96:	75fb      	strb	r3, [r7, #23]
                break;
 8012f98:	e00b      	b.n	8012fb2 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_212:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_212_212;
 8012f9a:	230b      	movs	r3, #11
 8012f9c:	75fb      	strb	r3, [r7, #23]
            break;
 8012f9e:	e008      	b.n	8012fb2 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_424:
                bTxConfig = PHHAL_HW_PN5180_RF_TX_NFC_AI_424_424;
 8012fa0:	230c      	movs	r3, #12
 8012fa2:	75fb      	strb	r3, [r7, #23]
                break;
 8012fa4:	e005      	b.n	8012fb2 <phhalHw_Pn5180_SetCardMode+0x55e>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bTxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012fa6:	23ff      	movs	r3, #255	@ 0xff
 8012fa8:	75fb      	strb	r3, [r7, #23]
                break;
 8012faa:	e002      	b.n	8012fb2 <phhalHw_Pn5180_SetCardMode+0x55e>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012fac:	f240 2321 	movw	r3, #545	@ 0x221
 8012fb0:	e042      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        switch (wRxDataRate)
 8012fb2:	893b      	ldrh	r3, [r7, #8]
 8012fb4:	2bff      	cmp	r3, #255	@ 0xff
 8012fb6:	d013      	beq.n	8012fe0 <phhalHw_Pn5180_SetCardMode+0x58c>
 8012fb8:	2bff      	cmp	r3, #255	@ 0xff
 8012fba:	dc14      	bgt.n	8012fe6 <phhalHw_Pn5180_SetCardMode+0x592>
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d00c      	beq.n	8012fda <phhalHw_Pn5180_SetCardMode+0x586>
 8012fc0:	2b02      	cmp	r3, #2
 8012fc2:	dc10      	bgt.n	8012fe6 <phhalHw_Pn5180_SetCardMode+0x592>
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d002      	beq.n	8012fce <phhalHw_Pn5180_SetCardMode+0x57a>
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d003      	beq.n	8012fd4 <phhalHw_Pn5180_SetCardMode+0x580>
 8012fcc:	e00b      	b.n	8012fe6 <phhalHw_Pn5180_SetCardMode+0x592>
        {
            case PHHAL_HW_RF_DATARATE_106:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_106;
 8012fce:	238a      	movs	r3, #138	@ 0x8a
 8012fd0:	75bb      	strb	r3, [r7, #22]
                break;
 8012fd2:	e00b      	b.n	8012fec <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_212:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_212;
 8012fd4:	238b      	movs	r3, #139	@ 0x8b
 8012fd6:	75bb      	strb	r3, [r7, #22]
            break;
 8012fd8:	e008      	b.n	8012fec <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_424:
                bRxConfig = PHHAL_HW_PN5180_RF_RX_NFC_AI_424;
 8012fda:	238c      	movs	r3, #140	@ 0x8c
 8012fdc:	75bb      	strb	r3, [r7, #22]
                break;
 8012fde:	e005      	b.n	8012fec <phhalHw_Pn5180_SetCardMode+0x598>

            case PHHAL_HW_RF_DATARATE_NO_CHANGE:
                bRxConfig = PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX;
 8012fe0:	23ff      	movs	r3, #255	@ 0xff
 8012fe2:	75bb      	strb	r3, [r7, #22]
                break;
 8012fe4:	e002      	b.n	8012fec <phhalHw_Pn5180_SetCardMode+0x598>

            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012fe6:	f240 2321 	movw	r3, #545	@ 0x221
 8012fea:	e025      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
        }

        break;
 8012fec:	e002      	b.n	8012ff4 <phhalHw_Pn5180_SetCardMode+0x5a0>

    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8012fee:	f240 2321 	movw	r3, #545	@ 0x221
 8012ff2:	e021      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
    }

    if((PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bTxConfig) || (PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX != bRxConfig))
 8012ff4:	7dfb      	ldrb	r3, [r7, #23]
 8012ff6:	2bff      	cmp	r3, #255	@ 0xff
 8012ff8:	d102      	bne.n	8013000 <phhalHw_Pn5180_SetCardMode+0x5ac>
 8012ffa:	7dbb      	ldrb	r3, [r7, #22]
 8012ffc:	2bff      	cmp	r3, #255	@ 0xff
 8012ffe:	d00c      	beq.n	801301a <phhalHw_Pn5180_SetCardMode+0x5c6>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp,
 8013000:	7dba      	ldrb	r2, [r7, #22]
 8013002:	7dfb      	ldrb	r3, [r7, #23]
 8013004:	4619      	mov	r1, r3
 8013006:	68f8      	ldr	r0, [r7, #12]
 8013008:	f7fe ffc8 	bl	8011f9c <phhalHw_Pn5180_Instr_LoadRfConfiguration>
 801300c:	4603      	mov	r3, r0
 801300e:	82bb      	strh	r3, [r7, #20]
 8013010:	8abb      	ldrh	r3, [r7, #20]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d001      	beq.n	801301a <phhalHw_Pn5180_SetCardMode+0x5c6>
 8013016:	8abb      	ldrh	r3, [r7, #20]
 8013018:	e00e      	b.n	8013038 <phhalHw_Pn5180_SetCardMode+0x5e4>
            (uint8_t) bTxConfig,
            (uint8_t) bRxConfig ));
    }

    /* If Datarate is changed, then Update Data-rate in shadow for parity setting */
    if(wTxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 801301a:	897b      	ldrh	r3, [r7, #10]
 801301c:	2bff      	cmp	r3, #255	@ 0xff
 801301e:	d003      	beq.n	8013028 <phhalHw_Pn5180_SetCardMode+0x5d4>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_TXDATARATE_FRAMING] = wTxDataRate;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	897a      	ldrh	r2, [r7, #10]
 8013024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if(wRxDataRate != PHHAL_HW_PN5180_CURRENT_RF_CONFIGURATION_INDEX)
 8013028:	893b      	ldrh	r3, [r7, #8]
 801302a:	2bff      	cmp	r3, #255	@ 0xff
 801302c:	d003      	beq.n	8013036 <phhalHw_Pn5180_SetCardMode+0x5e2>
    {
        pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING] = wRxDataRate;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	893a      	ldrh	r2, [r7, #8]
 8013032:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    }

    return PH_ERR_SUCCESS;
 8013036:	2300      	movs	r3, #0
}
 8013038:	4618      	mov	r0, r3
 801303a:	3718      	adds	r7, #24
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}

08013040 <phhalHw_Pn5180_SetTmo>:
phStatus_t phhalHw_Pn5180_SetTmo(
    phhalHw_Pn5180_DataParams_t *pDataParams,
    uint16_t wTimeout,
    uint8_t  bUnit
    )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b088      	sub	sp, #32
 8013044:	af02      	add	r7, sp, #8
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	460b      	mov	r3, r1
 801304a:	807b      	strh	r3, [r7, #2]
 801304c:	4613      	mov	r3, r2
 801304e:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM wPrescaler;
    uint32_t    PH_MEMLOC_REM dwLoadValue;
    uint16_t    PH_MEMLOC_REM wUDigitalDelay;

    wUDigitalDelay = 0U;
 8013050:	2300      	movs	r3, #0
 8013052:	81bb      	strh	r3, [r7, #12]
    /* Parameter check */
    if ((bUnit != PHHAL_HW_TIME_MICROSECONDS) && (bUnit != PHHAL_HW_TIME_MILLISECONDS))
 8013054:	787b      	ldrb	r3, [r7, #1]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d005      	beq.n	8013066 <phhalHw_Pn5180_SetTmo+0x26>
 801305a:	787b      	ldrb	r3, [r7, #1]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d002      	beq.n	8013066 <phhalHw_Pn5180_SetTmo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_HAL);
 8013060:	f240 2321 	movw	r3, #545	@ 0x221
 8013064:	e051      	b.n	801310a <phhalHw_Pn5180_SetTmo+0xca>
    }

    if(wTimeout == 0U)
 8013066:	887b      	ldrh	r3, [r7, #2]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d101      	bne.n	8013070 <phhalHw_Pn5180_SetTmo+0x30>
    {
        return PH_ERR_SUCCESS;
 801306c:	2300      	movs	r3, #0
 801306e:	e04c      	b.n	801310a <phhalHw_Pn5180_SetTmo+0xca>
    }

    if (bUnit == PHHAL_HW_TIME_MICROSECONDS)
 8013070:	787b      	ldrb	r3, [r7, #1]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d125      	bne.n	80130c2 <phhalHw_Pn5180_SetTmo+0x82>
    {
        if (pDataParams->wFirmwareVer < 0x308U)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801307c:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8013080:	d20d      	bcs.n	801309e <phhalHw_Pn5180_SetTmo+0x5e>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Int_GetDigiDelay(
 8013082:	f107 030c 	add.w	r3, r7, #12
 8013086:	461a      	mov	r2, r3
 8013088:	2101      	movs	r1, #1
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 f966 	bl	801335c <phhalHw_Pn5180_Int_GetDigiDelay>
 8013090:	4603      	mov	r3, r0
 8013092:	81fb      	strh	r3, [r7, #14]
 8013094:	89fb      	ldrh	r3, [r7, #14]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d001      	beq.n	801309e <phhalHw_Pn5180_SetTmo+0x5e>
 801309a:	89fb      	ldrh	r3, [r7, #14]
 801309c:	e035      	b.n	801310a <phhalHw_Pn5180_SetTmo+0xca>
                PH_ON,
                &wUDigitalDelay));
        }

        /* here wTimeout will be in uS */
        wPrescaler = 0x00U;
 801309e:	2300      	movs	r3, #0
 80130a0:	617b      	str	r3, [r7, #20]
        /*Reducing the division by 2 digits to retain the 2 digit decimal places which were getting wiped out*/
        dwLoadValue =(uint32_t) ( PHHAL_HW_PN5180_MAX_FREQ / (PHHAL_HW_PN5180_CONVERSION_US_SEC/100));
 80130a2:	f240 534c 	movw	r3, #1356	@ 0x54c
 80130a6:	613b      	str	r3, [r7, #16]
        /*Restoring the division done in the earlier step*/
        dwLoadValue =(uint32_t) (((wTimeout + wUDigitalDelay) * dwLoadValue)/100);
 80130a8:	887b      	ldrh	r3, [r7, #2]
 80130aa:	89ba      	ldrh	r2, [r7, #12]
 80130ac:	4413      	add	r3, r2
 80130ae:	461a      	mov	r2, r3
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	fb02 f303 	mul.w	r3, r2, r3
 80130b6:	4a17      	ldr	r2, [pc, #92]	@ (8013114 <phhalHw_Pn5180_SetTmo+0xd4>)
 80130b8:	fba2 2303 	umull	r2, r3, r2, r3
 80130bc:	095b      	lsrs	r3, r3, #5
 80130be:	613b      	str	r3, [r7, #16]
 80130c0:	e00f      	b.n	80130e2 <phhalHw_Pn5180_SetTmo+0xa2>
    }
    else
    {
        wPrescaler = 0x3CU;
 80130c2:	233c      	movs	r3, #60	@ 0x3c
 80130c4:	617b      	str	r3, [r7, #20]
        if(wTimeout <= PHHAL_HW_PN5180_MAX_TIME_DELAY_MS)
 80130c6:	887b      	ldrh	r3, [r7, #2]
 80130c8:	f644 5248 	movw	r2, #19784	@ 0x4d48
 80130cc:	4293      	cmp	r3, r2
 80130ce:	d805      	bhi.n	80130dc <phhalHw_Pn5180_SetTmo+0x9c>
        {
            dwLoadValue =(uint32_t) (  wTimeout * ( PHHAL_HW_PN5180_MIN_FREQ  / PHHAL_HW_PN5180_CONVERSION_MS_SEC) );
 80130d0:	887b      	ldrh	r3, [r7, #2]
 80130d2:	2235      	movs	r2, #53	@ 0x35
 80130d4:	fb02 f303 	mul.w	r3, r2, r3
 80130d8:	613b      	str	r3, [r7, #16]
 80130da:	e002      	b.n	80130e2 <phhalHw_Pn5180_SetTmo+0xa2>
        }
        else
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_HAL);
 80130dc:	f240 2322 	movw	r3, #546	@ 0x222
 80130e0:	e013      	b.n	801310a <phhalHw_Pn5180_SetTmo+0xca>
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp,
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	9301      	str	r3, [sp, #4]
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	9300      	str	r3, [sp, #0]
 80130ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80130ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80130f2:	210f      	movs	r1, #15
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff f938 	bl	801236a <phhalHw_Pn5180_TimerStart>
 80130fa:	4603      	mov	r3, r0
 80130fc:	81fb      	strh	r3, [r7, #14]
 80130fe:	89fb      	ldrh	r3, [r7, #14]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d001      	beq.n	8013108 <phhalHw_Pn5180_SetTmo+0xc8>
 8013104:	89fb      	ldrh	r3, [r7, #14]
 8013106:	e000      	b.n	801310a <phhalHw_Pn5180_SetTmo+0xca>
        TIMER1_CONFIG_T1_STOP_ON_RX_STARTED_MASK,
        wPrescaler,
        dwLoadValue
        ));

    return PH_ERR_SUCCESS;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3718      	adds	r7, #24
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	51eb851f 	.word	0x51eb851f

08013118 <phhalHw_Pn5180_Int_Wait>:

phStatus_t phhalHw_Pn5180_Int_Wait(
    phhalHw_Pn5180_DataParams_t * pDataParams,
    uint32_t dwLoadValue,
    uint32_t wPrescaler)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b094      	sub	sp, #80	@ 0x50
 801311c:	af02      	add	r7, sp, #8
 801311e:	60f8      	str	r0, [r7, #12]
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	607a      	str	r2, [r7, #4]
    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[18];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwIrqStatusReg;

    /* Setting Timer1 & Reload value Registers */
    bTmrConfigReg = TIMER0_CONFIG;
 8013124:	230e      	movs	r3, #14
 8013126:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    bTmrReloadReg = TIMER0_RELOAD;
 801312a:	230b      	movs	r3, #11
 801312c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    dwEnableMask = TIMER0_CONFIG_T0_ENABLE_MASK;
 8013130:	2301      	movs	r3, #1
 8013132:	643b      	str	r3, [r7, #64]	@ 0x40

    /*write 0 to stop timer1*/
    wSizeOfRegTypeValueSets = 0U;
 8013134:	2300      	movs	r3, #0
 8013136:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 8013138:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801313a:	1c5a      	adds	r2, r3, #1
 801313c:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 801313e:	3348      	adds	r3, #72	@ 0x48
 8013140:	443b      	add	r3, r7
 8013142:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8013146:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801314a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801314c:	1c5a      	adds	r2, r3, #1
 801314e:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013150:	3348      	adds	r3, #72	@ 0x48
 8013152:	443b      	add	r3, r7
 8013154:	2201      	movs	r2, #1
 8013156:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801315a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801315c:	1c5a      	adds	r2, r3, #1
 801315e:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013160:	3348      	adds	r3, #72	@ 0x48
 8013162:	443b      	add	r3, r7
 8013164:	2200      	movs	r2, #0
 8013166:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801316a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801316c:	1c5a      	adds	r2, r3, #1
 801316e:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013170:	3348      	adds	r3, #72	@ 0x48
 8013172:	443b      	add	r3, r7
 8013174:	2200      	movs	r2, #0
 8013176:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801317a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801317c:	1c5a      	adds	r2, r3, #1
 801317e:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013180:	3348      	adds	r3, #72	@ 0x48
 8013182:	443b      	add	r3, r7
 8013184:	2200      	movs	r2, #0
 8013186:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = 0x00U;
 801318a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801318c:	1c5a      	adds	r2, r3, #1
 801318e:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013190:	3348      	adds	r3, #72	@ 0x48
 8013192:	443b      	add	r3, r7
 8013194:	2200      	movs	r2, #0
 8013196:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /*load the timer 2 reload value*/
    dwTemp = (dwLoadValue & TMR_RELOAD_VALUE_MASK);
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrReloadReg;
 80131a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131a4:	1c5a      	adds	r2, r3, #1
 80131a6:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80131a8:	3348      	adds	r3, #72	@ 0x48
 80131aa:	443b      	add	r3, r7
 80131ac:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80131b0:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 80131b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131b6:	1c5a      	adds	r2, r3, #1
 80131b8:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80131ba:	3348      	adds	r3, #72	@ 0x48
 80131bc:	443b      	add	r3, r7
 80131be:	2201      	movs	r2, #1
 80131c0:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80131c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131c6:	1c5a      	adds	r2, r3, #1
 80131c8:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 80131ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131cc:	b2d2      	uxtb	r2, r2
 80131ce:	3348      	adds	r3, #72	@ 0x48
 80131d0:	443b      	add	r3, r7
 80131d2:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80131d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d8:	0a1a      	lsrs	r2, r3, #8
 80131da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131dc:	1c59      	adds	r1, r3, #1
 80131de:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80131e0:	b2d2      	uxtb	r2, r2
 80131e2:	3348      	adds	r3, #72	@ 0x48
 80131e4:	443b      	add	r3, r7
 80131e6:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 80131ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ec:	0c1a      	lsrs	r2, r3, #16
 80131ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80131f0:	1c59      	adds	r1, r3, #1
 80131f2:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 80131f4:	b2d2      	uxtb	r2, r2
 80131f6:	3348      	adds	r3, #72	@ 0x48
 80131f8:	443b      	add	r3, r7
 80131fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 80131fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013200:	0e1a      	lsrs	r2, r3, #24
 8013202:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013204:	1c59      	adds	r1, r3, #1
 8013206:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8013208:	b2d2      	uxtb	r2, r2
 801320a:	3348      	adds	r3, #72	@ 0x48
 801320c:	443b      	add	r3, r7
 801320e:	f803 2c2c 	strb.w	r2, [r3, #-44]

    dwStartCond = TIMER0_CONFIG_T0_START_NOW_MASK;
 8013212:	2340      	movs	r3, #64	@ 0x40
 8013214:	637b      	str	r3, [r7, #52]	@ 0x34
    dwStopCond = 0x00U;
 8013216:	2300      	movs	r3, #0
 8013218:	633b      	str	r3, [r7, #48]	@ 0x30

    /* T2_MODE_SEL is defined by ePrescaler, 0x01U enables the timer */
    dwTemp = (dwStartCond | dwStopCond | wPrescaler | dwEnableMask);
 801321a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321e:	431a      	orrs	r2, r3
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4313      	orrs	r3, r2
 8013224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013226:	4313      	orrs	r3, r2
 8013228:	63bb      	str	r3, [r7, #56]	@ 0x38

    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = bTmrConfigReg;
 801322a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801322c:	1c5a      	adds	r2, r3, #1
 801322e:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013230:	3348      	adds	r3, #72	@ 0x48
 8013232:	443b      	add	r3, r7
 8013234:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8013238:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE;
 801323c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801323e:	1c5a      	adds	r2, r3, #1
 8013240:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013242:	3348      	adds	r3, #72	@ 0x48
 8013244:	443b      	add	r3, r7
 8013246:	2201      	movs	r2, #1
 8013248:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 801324c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801324e:	1c5a      	adds	r2, r3, #1
 8013250:	87fa      	strh	r2, [r7, #62]	@ 0x3e
 8013252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013254:	b2d2      	uxtb	r2, r2
 8013256:	3348      	adds	r3, #72	@ 0x48
 8013258:	443b      	add	r3, r7
 801325a:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 801325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013260:	0a1a      	lsrs	r2, r3, #8
 8013262:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013264:	1c59      	adds	r1, r3, #1
 8013266:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8013268:	b2d2      	uxtb	r2, r2
 801326a:	3348      	adds	r3, #72	@ 0x48
 801326c:	443b      	add	r3, r7
 801326e:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013274:	0c1a      	lsrs	r2, r3, #16
 8013276:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013278:	1c59      	adds	r1, r3, #1
 801327a:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 801327c:	b2d2      	uxtb	r2, r2
 801327e:	3348      	adds	r3, #72	@ 0x48
 8013280:	443b      	add	r3, r7
 8013282:	f803 2c2c 	strb.w	r2, [r3, #-44]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013288:	0e1a      	lsrs	r2, r3, #24
 801328a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801328c:	1c59      	adds	r1, r3, #1
 801328e:	87f9      	strh	r1, [r7, #62]	@ 0x3e
 8013290:	b2d2      	uxtb	r2, r2
 8013292:	3348      	adds	r3, #72	@ 0x48
 8013294:	443b      	add	r3, r7
 8013296:	f803 2c2c 	strb.w	r2, [r3, #-44]

    /* Clear Interrupt  */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_TIMER0_IRQ_CLR_MASK));
 801329a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801329e:	2103      	movs	r1, #3
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f7fd ff81 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 80132a6:	4603      	mov	r3, r0
 80132a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80132aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d001      	beq.n	80132b4 <phhalHw_Pn5180_Int_Wait+0x19c>
 80132b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132b2:	e04f      	b.n	8013354 <phhalHw_Pn5180_Int_Wait+0x23c>
    phOsal_EventClear(&pDataParams->HwEventObj.EventHandle, E_OS_EVENT_OPT_NONE, E_PH_OSAL_EVT_RF, NULL);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80132ba:	2300      	movs	r3, #0
 80132bc:	2201      	movs	r2, #1
 80132be:	2100      	movs	r1, #0
 80132c0:	f005 febc 	bl	801903c <phOsal_EventClear>
    /* Enable IRQ source */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_ENABLE, IRQ_ENABLE_TIMER0_IRQ_SET_ENABLE_MASK));
 80132c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80132c8:	2101      	movs	r1, #1
 80132ca:	68f8      	ldr	r0, [r7, #12]
 80132cc:	f7fd ff6c 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 80132d0:	4603      	mov	r3, r0
 80132d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80132d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d001      	beq.n	80132de <phhalHw_Pn5180_Int_Wait+0x1c6>
 80132da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132dc:	e03a      	b.n	8013354 <phhalHw_Pn5180_Int_Wait+0x23c>
    /*Start the timer*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple( pDataParams, wRegTypeValueSets, wSizeOfRegTypeValueSets));
 80132de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80132e0:	f107 031c 	add.w	r3, r7, #28
 80132e4:	4619      	mov	r1, r3
 80132e6:	68f8      	ldr	r0, [r7, #12]
 80132e8:	f7fe f8c0 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 80132ec:	4603      	mov	r3, r0
 80132ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80132f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d001      	beq.n	80132fa <phhalHw_Pn5180_Int_Wait+0x1e2>
 80132f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132f8:	e02c      	b.n	8013354 <phhalHw_Pn5180_Int_Wait+0x23c>

    uint32_t irqEnable;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_ENABLE, &irqEnable);
 80132fa:	f107 0314 	add.w	r3, r7, #20
 80132fe:	461a      	mov	r2, r3
 8013300:	2101      	movs	r1, #1
 8013302:	68f8      	ldr	r0, [r7, #12]
 8013304:	f7fe f964 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>

    uint32_t irqStatus;
    phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &irqStatus);
 8013308:	f107 0310 	add.w	r3, r7, #16
 801330c:	461a      	mov	r2, r3
 801330e:	2102      	movs	r1, #2
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f7fe f95d 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>

    /* Wait for the timer0 to expire. */
    PH_CHECK_SUCCESS_FCT(statusTmp,phhalHw_Pn5180_WaitIrq(pDataParams,PH_ON,PH_OFF,IRQ_STATUS_TIMER0_IRQ_MASK,&dwIrqStatusReg));
 8013316:	f107 0318 	add.w	r3, r7, #24
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013320:	2200      	movs	r2, #0
 8013322:	2101      	movs	r1, #1
 8013324:	68f8      	ldr	r0, [r7, #12]
 8013326:	f000 fbd5 	bl	8013ad4 <phhalHw_Pn5180_WaitIrq>
 801332a:	4603      	mov	r3, r0
 801332c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801332e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013330:	2b00      	cmp	r3, #0
 8013332:	d001      	beq.n	8013338 <phhalHw_Pn5180_Int_Wait+0x220>
 8013334:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013336:	e00d      	b.n	8013354 <phhalHw_Pn5180_Int_Wait+0x23c>

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(pDataParams,TIMER0_CONFIG, (uint32_t)(~TIMER0_CONFIG_T0_ENABLE_MASK)));
 8013338:	f06f 0201 	mvn.w	r2, #1
 801333c:	210e      	movs	r1, #14
 801333e:	68f8      	ldr	r0, [r7, #12]
 8013340:	f7fe f81e 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013344:	4603      	mov	r3, r0
 8013346:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8013348:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801334a:	2b00      	cmp	r3, #0
 801334c:	d001      	beq.n	8013352 <phhalHw_Pn5180_Int_Wait+0x23a>
 801334e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013350:	e000      	b.n	8013354 <phhalHw_Pn5180_Int_Wait+0x23c>
    return PH_ERR_SUCCESS;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3748      	adds	r7, #72	@ 0x48
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <phhalHw_Pn5180_Int_GetDigiDelay>:
phStatus_t phhalHw_Pn5180_Int_GetDigiDelay(
                                      phhalHw_Pn5180_DataParams_t * pDataParams,
                                      uint8_t bIsTimeout,
                                      uint16_t * pDelayUs
                                      )
{
 801335c:	b480      	push	{r7}
 801335e:	b087      	sub	sp, #28
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	460b      	mov	r3, r1
 8013366:	607a      	str	r2, [r7, #4]
 8013368:	72fb      	strb	r3, [r7, #11]
    uint16_t    PH_MEMLOC_REM wDataRate;
    uint8_t     PH_MEMLOC_REM bIndex;

    wDataRate = pDataParams->wCfgShadow[PHHAL_HW_CONFIG_RXDATARATE_FRAMING];
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8013370:	82fb      	strh	r3, [r7, #22]
    bIndex = pDataParams->bCardType - 1U;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013378:	3b01      	subs	r3, #1
 801337a:	757b      	strb	r3, [r7, #21]

    switch (pDataParams->bCardType)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013382:	3b01      	subs	r3, #1
 8013384:	2b09      	cmp	r3, #9
 8013386:	f200 8086 	bhi.w	8013496 <phhalHw_Pn5180_Int_GetDigiDelay+0x13a>
 801338a:	a201      	add	r2, pc, #4	@ (adr r2, 8013390 <phhalHw_Pn5180_Int_GetDigiDelay+0x34>)
 801338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013390:	080133b9 	.word	0x080133b9
 8013394:	080133b9 	.word	0x080133b9
 8013398:	080133f7 	.word	0x080133f7
 801339c:	0801340f 	.word	0x0801340f
 80133a0:	08013425 	.word	0x08013425
 80133a4:	08013433 	.word	0x08013433
 80133a8:	08013497 	.word	0x08013497
 80133ac:	08013497 	.word	0x08013497
 80133b0:	08013497 	.word	0x08013497
 80133b4:	080133f7 	.word	0x080133f7
    {
    case PHHAL_HW_CARDTYPE_ISO14443A:
    case PHHAL_HW_CARDTYPE_ISO14443B:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80133b8:	7d7a      	ldrb	r2, [r7, #21]
 80133ba:	8afb      	ldrh	r3, [r7, #22]
 80133bc:	493b      	ldr	r1, [pc, #236]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 80133be:	0092      	lsls	r2, r2, #2
 80133c0:	4413      	add	r3, r2
 80133c2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	801a      	strh	r2, [r3, #0]
        /* In a timeout case we have to add an additional delay */
        if (bIsTimeout != PH_OFF)
 80133ca:	7afb      	ldrb	r3, [r7, #11]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d005      	beq.n	80133dc <phhalHw_Pn5180_Int_GetDigiDelay+0x80>
        {
            *pDelayUs = *pDelayUs + PHHAL_HW_PN5180_I14443_ADD_DELAY_US;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	881b      	ldrh	r3, [r3, #0]
 80133d4:	330f      	adds	r3, #15
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d15a      	bne.n	801349c <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
        {
            *pDelayUs += 2000U;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	801a      	strh	r2, [r3, #0]
        }
        break;
 80133f4:	e052      	b.n	801349c <phhalHw_Pn5180_Int_GetDigiDelay+0x140>
    case PHHAL_HW_CARDTYPE_FELICA_212:
    case PHHAL_HW_CARDTYPE_FELICA_424:
        bIndex = PHHAL_HW_CARDTYPE_FELICA_212 - 1U;
 80133f6:	2302      	movs	r3, #2
 80133f8:	757b      	strb	r3, [r7, #21]
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate];
 80133fa:	7d7a      	ldrb	r2, [r7, #21]
 80133fc:	8afb      	ldrh	r3, [r7, #22]
 80133fe:	492b      	ldr	r1, [pc, #172]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013400:	0092      	lsls	r2, r2, #2
 8013402:	4413      	add	r3, r2
 8013404:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	801a      	strh	r2, [r3, #0]
        break;
 801340c:	e047      	b.n	801349e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ISO15693:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][wDataRate - PHHAL_HW_RF_RX_DATARATE_LOW];
 801340e:	7d7a      	ldrb	r2, [r7, #21]
 8013410:	8afb      	ldrh	r3, [r7, #22]
 8013412:	3b0c      	subs	r3, #12
 8013414:	4925      	ldr	r1, [pc, #148]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013416:	0092      	lsls	r2, r2, #2
 8013418:	4413      	add	r3, r2
 801341a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	801a      	strh	r2, [r3, #0]
        break;
 8013422:	e03c      	b.n	801349e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_ICODEEPCUID:
        *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8013424:	7d7b      	ldrb	r3, [r7, #21]
 8013426:	4a21      	ldr	r2, [pc, #132]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013428:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	801a      	strh	r2, [r3, #0]
        break;
 8013430:	e035      	b.n	801349e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    case PHHAL_HW_CARDTYPE_I18000P3M3:
        switch (wDataRate)
 8013432:	8afb      	ldrh	r3, [r7, #22]
 8013434:	3b13      	subs	r3, #19
 8013436:	2b03      	cmp	r3, #3
 8013438:	d829      	bhi.n	801348e <phhalHw_Pn5180_Int_GetDigiDelay+0x132>
 801343a:	a201      	add	r2, pc, #4	@ (adr r2, 8013440 <phhalHw_Pn5180_Int_GetDigiDelay+0xe4>)
 801343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013440:	08013451 	.word	0x08013451
 8013444:	0801346f 	.word	0x0801346f
 8013448:	0801345f 	.word	0x0801345f
 801344c:	0801347f 	.word	0x0801347f
        {
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][0];
 8013450:	7d7b      	ldrb	r3, [r7, #21]
 8013452:	4a16      	ldr	r2, [pc, #88]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013454:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	801a      	strh	r2, [r3, #0]
                break;
 801345c:	e01a      	b.n	8013494 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_423_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][1];
 801345e:	7d7b      	ldrb	r3, [r7, #21]
 8013460:	4a12      	ldr	r2, [pc, #72]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013462:	00db      	lsls	r3, r3, #3
 8013464:	4413      	add	r3, r2
 8013466:	885a      	ldrh	r2, [r3, #2]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	801a      	strh	r2, [r3, #0]
                break;
 801346c:	e012      	b.n	8013494 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN2:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][2];
 801346e:	7d7b      	ldrb	r3, [r7, #21]
 8013470:	4a0e      	ldr	r2, [pc, #56]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	4413      	add	r3, r2
 8013476:	889a      	ldrh	r2, [r3, #4]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	801a      	strh	r2, [r3, #0]
                break;
 801347c:	e00a      	b.n	8013494 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            case PHHAL_HW_RX_I18000P3M3_FL_847_MAN4:
                *pDelayUs = gkphhalHw_Pn5180_DigiDelays_Us[bIndex][3];
 801347e:	7d7b      	ldrb	r3, [r7, #21]
 8013480:	4a0a      	ldr	r2, [pc, #40]	@ (80134ac <phhalHw_Pn5180_Int_GetDigiDelay+0x150>)
 8013482:	00db      	lsls	r3, r3, #3
 8013484:	4413      	add	r3, r2
 8013486:	88da      	ldrh	r2, [r3, #6]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	801a      	strh	r2, [r3, #0]
                break;
 801348c:	e002      	b.n	8013494 <phhalHw_Pn5180_Int_GetDigiDelay+0x138>
            default:
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 801348e:	f240 237f 	movw	r3, #639	@ 0x27f
 8013492:	e005      	b.n	80134a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        }
        break;
 8013494:	e003      	b.n	801349e <phhalHw_Pn5180_Int_GetDigiDelay+0x142>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013496:	f240 237f 	movw	r3, #639	@ 0x27f
 801349a:	e001      	b.n	80134a0 <phhalHw_Pn5180_Int_GetDigiDelay+0x144>
        break;
 801349c:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 801349e:	2300      	movs	r3, #0
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	371c      	adds	r7, #28
 80134a4:	46bd      	mov	sp, r7
 80134a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134aa:	4770      	bx	lr
 80134ac:	080220d8 	.word	0x080220d8

080134b0 <phhalHw_Pn5180_Receive_Int>:
                                      uint32_t dwIrqWaitFor,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength,
                                      uint8_t    bIrqEnable
                                      )
{
 80134b0:	b5b0      	push	{r4, r5, r7, lr}
 80134b2:	b094      	sub	sp, #80	@ 0x50
 80134b4:	af04      	add	r7, sp, #16
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	607a      	str	r2, [r7, #4]
 80134bc:	603b      	str	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80134be:	2300      	movs	r3, #0
 80134c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwIrqReg;
    uint8_t *   PH_MEMLOC_REM pTmpBuffer = NULL;
 80134c2:	2300      	movs	r3, #0
 80134c4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t    PH_MEMLOC_REM wTmpBufferLen = 0;
 80134c6:	2300      	movs	r3, #0
 80134c8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t    PH_MEMLOC_REM wTmpBufferSize;
    uint32_t    PH_MEMLOC_REM dwValue;
    uint32_t    PH_MEMLOC_REM dwTemp;
    uint32_t    PH_MEMLOC_REM dwColPos = 0U;
 80134ca:	2300      	movs	r3, #0
 80134cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t    PH_MEMLOC_REM dwRegister;
    uint16_t    PH_MEMLOC_REM wIndex = 0U;
 80134ce:	2300      	movs	r3, #0
 80134d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bBitlen;
    uint8_t     PH_MEMLOC_REM aCrc[2];
    uint8_t     PH_MEMLOC_REM bBackup = 0U;
 80134d2:	2300      	movs	r3, #0
 80134d4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t     PH_MEMLOC_REM bRfActiveErrCause = 0U;
 80134d8:	2300      	movs	r3, #0
 80134da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* Now wait for the IRQ */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_WaitIrq(
 80134de:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 80134e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	2200      	movs	r2, #0
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f000 faf1 	bl	8013ad4 <phhalHw_Pn5180_WaitIrq>
 80134f2:	4603      	mov	r3, r0
 80134f4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80134f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d001      	beq.n	8013500 <phhalHw_Pn5180_Receive_Int+0x50>
 80134fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80134fe:	e233      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
        PH_OFF,
        dwIrqWaitFor,
        &dwIrqReg));

    /* If in active mode, retrieve the content of the RF_STATUS register */
    if (pDataParams->bActiveMode == PH_ON)
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013506:	2b01      	cmp	r3, #1
 8013508:	d10d      	bne.n	8013526 <phhalHw_Pn5180_Receive_Int+0x76>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, RF_STATUS, &dwRegister));
 801350a:	f107 0318 	add.w	r3, r7, #24
 801350e:	461a      	mov	r2, r3
 8013510:	211d      	movs	r1, #29
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7fe f85c 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8013518:	4603      	mov	r3, r0
 801351a:	867b      	strh	r3, [r7, #50]	@ 0x32
 801351c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801351e:	2b00      	cmp	r3, #0
 8013520:	d001      	beq.n	8013526 <phhalHw_Pn5180_Receive_Int+0x76>
 8013522:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013524:	e220      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
    }

    /* Check if an error has occurred */
    if (0U != (dwIrqReg & IRQ_STATUS_GENERAL_ERROR_IRQ_MASK))
 8013526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801352c:	2b00      	cmp	r3, #0
 801352e:	d002      	beq.n	8013536 <phhalHw_Pn5180_Receive_Int+0x86>
    {
        status = PH_ERR_INTERNAL_ERROR;
 8013530:	237f      	movs	r3, #127	@ 0x7f
 8013532:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013534:	e089      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
    }
    else if((pDataParams->bRxMultiple == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))))
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801353c:	2b01      	cmp	r3, #1
 801353e:	d10f      	bne.n	8013560 <phhalHw_Pn5180_Receive_Int+0xb0>
 8013540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00a      	beq.n	8013560 <phhalHw_Pn5180_Receive_Int+0xb0>
    {
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801354c:	f003 0301 	and.w	r3, r3, #1
 8013550:	2b00      	cmp	r3, #0
 8013552:	d002      	beq.n	801355a <phhalHw_Pn5180_Receive_Int+0xaa>
        {
            status = PH_ERR_SUCCESS;
 8013554:	2300      	movs	r3, #0
 8013556:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 8013558:	e077      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else
        {
            status = PH_ERR_IO_TIMEOUT;
 801355a:	2301      	movs	r3, #1
 801355c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if(0U != (dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))
 801355e:	e074      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
        }
    }
    /* Timeout handling */
   else if ((dwIrqReg & IRQ_STATUS_TIMER1_IRQ_MASK))
 8013560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013566:	2b00      	cmp	r3, #0
 8013568:	d02e      	beq.n	80135c8 <phhalHw_Pn5180_Receive_Int+0x118>
   {
        /* Reset after timeout behavior */
        if (pDataParams->bRfResetAfterTo != PH_OFF)
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013570:	2b00      	cmp	r3, #0
 8013572:	d009      	beq.n	8013588 <phhalHw_Pn5180_Receive_Int+0xd8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_FieldReset(pDataParams));
 8013574:	68f8      	ldr	r0, [r7, #12]
 8013576:	f7fa ff73 	bl	800e460 <phhalHw_Pn5180_FieldReset>
 801357a:	4603      	mov	r3, r0
 801357c:	867b      	strh	r3, [r7, #50]	@ 0x32
 801357e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <phhalHw_Pn5180_Receive_Int+0xd8>
 8013584:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013586:	e1ef      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
        }

        status = PH_ERR_IO_TIMEOUT;
 8013588:	2301      	movs	r3, #1
 801358a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        if ((pDataParams->bActiveMode == PH_ON) && (pDataParams->wTargetMode == PH_OFF))
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013592:	2b01      	cmp	r3, #1
 8013594:	d159      	bne.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801359a:	2b00      	cmp	r3, #0
 801359c:	d155      	bne.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            if (0U != (dwRegister & RF_STATUS_TX_RF_STATUS_MASK ))
 801359e:	69bb      	ldr	r3, [r7, #24]
 80135a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d007      	beq.n	80135b8 <phhalHw_Pn5180_Receive_Int+0x108>
            {
                /* If External RF ON Event occurred and Internal Field is ON then Internal Error Should
                 * not be returned, otherwise Internal Error is returned */
                if ((0U == ((dwIrqReg & IRQ_STATUS_RFON_DET_IRQ_MASK))))
 80135a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d14b      	bne.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
                {
                    /* After RWT Timeout if Internal RF is ON (Stuck) then return Internal Error. */
                    status = PH_ERR_INTERNAL_ERROR;
 80135b2:	237f      	movs	r3, #127	@ 0x7f
 80135b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80135b6:	e048      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
                }
            }
            else if (0U != (dwRegister & RF_STATUS_RF_DET_STATUS_MASK))
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d043      	beq.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
            {
                /* If External RF Field is ON after FWT Timeout, then return External RF Error. */
                status = PH_ERR_EXT_RF_ERROR;
 80135c2:	2310      	movs	r3, #16
 80135c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80135c6:	e040      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
                /* Do nothing */
            }
        }
    }
    /* Handle External RF error */
    else if ((pDataParams->bActiveMode == PH_ON) && (0U != ((dwIrqReg & IRQ_STATUS_RF_ACTIVE_ERROR_IRQ_MASK))))
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d123      	bne.n	801361a <phhalHw_Pn5180_Receive_Int+0x16a>
 80135d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d01e      	beq.n	801361a <phhalHw_Pn5180_Receive_Int+0x16a>
    {
        bRfActiveErrCause = (uint8_t)((dwRegister & RF_STATUS_RF_ACTIVE_ERROR_CAUSE_MASK) >> RF_STATUS_RF_ACTIVE_ERROR_CAUSE_POS);
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	0b5b      	lsrs	r3, r3, #13
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	f003 0307 	and.w	r3, r3, #7
 80135e6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (pDataParams->wTargetMode != PH_OFF)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d009      	beq.n	8013606 <phhalHw_Pn5180_Receive_Int+0x156>
        {
            if(bRfActiveErrCause != 4U)
 80135f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80135f6:	2b04      	cmp	r3, #4
 80135f8:	d002      	beq.n	8013600 <phhalHw_Pn5180_Receive_Int+0x150>
            {
                status = PH_ERR_EXT_RF_ERROR;
 80135fa:	2310      	movs	r3, #16
 80135fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 80135fe:	e024      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
            }
            else
            {
                status = PHHAL_HW_PN5180_ACTIVE_ERR_CAUSE4;
 8013600:	2344      	movs	r3, #68	@ 0x44
 8013602:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8013604:	e021      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
        else
        {
            if((bRfActiveErrCause == 4U))
 8013606:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801360a:	2b04      	cmp	r3, #4
 801360c:	d102      	bne.n	8013614 <phhalHw_Pn5180_Receive_Int+0x164>
            {
                status = PH_ERR_IO_TIMEOUT;
 801360e:	2301      	movs	r3, #1
 8013610:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8013612:	e01a      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>

            }
            else
            {
                status = PH_ERR_EXT_RF_ERROR;
 8013614:	2310      	movs	r3, #16
 8013616:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (pDataParams->wTargetMode != PH_OFF)
 8013618:	e017      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
            }
        }
    }
    /* Passive mode */
    else if(0U != (dwIrqReg & IRQ_STATUS_RFOFF_DET_IRQ_MASK))
 801361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013620:	2b00      	cmp	r3, #0
 8013622:	d012      	beq.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
    {
        /* In case External RF OFF also occurred then exit with RF Error. */
        if ((pDataParams->bActiveMode == PH_OFF) && (pDataParams->wTargetMode))
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801362a:	2b00      	cmp	r3, #0
 801362c:	d106      	bne.n	801363c <phhalHw_Pn5180_Receive_Int+0x18c>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013632:	2b00      	cmp	r3, #0
 8013634:	d002      	beq.n	801363c <phhalHw_Pn5180_Receive_Int+0x18c>
        {
            /* Terminate with RF_ERROR*/
            status = PH_ERR_EXT_RF_ERROR;
 8013636:	2310      	movs	r3, #16
 8013638:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801363a:	e006      	b.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
        }
        else if((0U == ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))))
 801363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363e:	f003 0301 	and.w	r3, r3, #1
 8013642:	2b00      	cmp	r3, #0
 8013644:	d101      	bne.n	801364a <phhalHw_Pn5180_Receive_Int+0x19a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 8013646:	2302      	movs	r3, #2
 8013648:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    {
        /*QAC*/
    }

    /* Receive data */
    if ((0U != ((dwIrqReg & IRQ_STATUS_RX_IRQ_MASK))) && (status == PH_ERR_SUCCESS))
 801364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801364c:	f003 0301 	and.w	r3, r3, #1
 8013650:	2b00      	cmp	r3, #0
 8013652:	f000 8174 	beq.w	801393e <phhalHw_Pn5180_Receive_Int+0x48e>
 8013656:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013658:	2b00      	cmp	r3, #0
 801365a:	f040 8170 	bne.w	801393e <phhalHw_Pn5180_Receive_Int+0x48e>
    {
        pDataParams->wRxBufLen = 0U;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	2200      	movs	r2, #0
 8013662:	835a      	strh	r2, [r3, #26]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_GetRxBuffer(pDataParams, PH_ON, &pTmpBuffer, &wTmpBufferLen, &wTmpBufferSize));
 8013664:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8013668:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801366c:	f107 0320 	add.w	r3, r7, #32
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	460b      	mov	r3, r1
 8013674:	2101      	movs	r1, #1
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f7fe fda3 	bl	80121c2 <phhalHw_Pn5180_GetRxBuffer>
 801367c:	4603      	mov	r3, r0
 801367e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8013680:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013682:	2b00      	cmp	r3, #0
 8013684:	d001      	beq.n	801368a <phhalHw_Pn5180_Receive_Int+0x1da>
 8013686:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013688:	e16e      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if (pDataParams->bNfcipMode == PH_ON)
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013690:	2b01      	cmp	r3, #1
 8013692:	d103      	bne.n	801369c <phhalHw_Pn5180_Receive_Int+0x1ec>
        {
            bBackup = pTmpBuffer[0];
 8013694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
        }
#endif
        /* Read the RX_STATUS */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_ReadRegister(pDataParams, RX_STATUS, &dwValue));
 801369c:	f107 031c 	add.w	r3, r7, #28
 80136a0:	461a      	mov	r2, r3
 80136a2:	2113      	movs	r1, #19
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f7fa f987 	bl	800d9b8 <phhalHw_Pn5180_ReadRegister>
 80136aa:	4603      	mov	r3, r0
 80136ac:	867b      	strh	r3, [r7, #50]	@ 0x32
 80136ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d001      	beq.n	80136b8 <phhalHw_Pn5180_Receive_Int+0x208>
 80136b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80136b6:	e157      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>

        if(pDataParams->bRxMultiple == PH_ON)
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d110      	bne.n	80136e4 <phhalHw_Pn5180_Receive_Int+0x234>
        {
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136ca:	b29a      	uxth	r2, r3
                (((dwValue & RX_STATUS_RX_NUM_FRAMES_RECEIVED_MASK) >>
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	0a5b      	lsrs	r3, r3, #9
            wTmpBufferLen = (uint16_t)((dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK) |
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	f003 030f 	and.w	r3, r3, #15
 80136d6:	b29b      	uxth	r3, r3
 80136d8:	015b      	lsls	r3, r3, #5
 80136da:	b29b      	uxth	r3, r3
 80136dc:	4313      	orrs	r3, r2
 80136de:	b29b      	uxth	r3, r3
 80136e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80136e2:	e005      	b.n	80136f0 <phhalHw_Pn5180_Receive_Int+0x240>
                RX_STATUS_RX_NUM_FRAMES_RECEIVED_POS) * 32U));
        }
        else
        {
            wTmpBufferLen = (uint16_t)(dwValue & RX_STATUS_RX_NUM_BYTES_RECEIVED_MASK);
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	847b      	strh	r3, [r7, #34]	@ 0x22
        }

        if(wTmpBufferLen != 0U)
 80136f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d00c      	beq.n	8013710 <phhalHw_Pn5180_Receive_Int+0x260>
        {
            /* Prepare the command for reading the RX FIFO of the Pn5180 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_RetrieveRxData(
 80136f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136f8:	461a      	mov	r2, r3
 80136fa:	6879      	ldr	r1, [r7, #4]
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f7fe f977 	bl	80119f0 <phhalHw_Pn5180_Instr_RetrieveRxData>
 8013702:	4603      	mov	r3, r0
 8013704:	867b      	strh	r3, [r7, #50]	@ 0x32
 8013706:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013708:	2b00      	cmp	r3, #0
 801370a:	d001      	beq.n	8013710 <phhalHw_Pn5180_Receive_Int+0x260>
 801370c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801370e:	e12b      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
                ppRxBuffer,
                wTmpBufferLen));
        }

        /* Extract RX last bits */
        dwTemp = dwValue & RX_STATUS_RX_NUM_LAST_BITS_MASK;
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013716:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dwTemp = dwTemp >> RX_STATUS_RX_NUM_LAST_BITS_POS;
 8013718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371a:	0b5b      	lsrs	r3, r3, #13
 801371c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set RX last bits */
        pDataParams->wAdditionalInfo = (uint16_t)dwTemp;
 801371e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013720:	b29a      	uxth	r2, r3
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	861a      	strh	r2, [r3, #48]	@ 0x30

        if (0U != (dwValue & RX_STATUS_RX_COLLISION_DETECTED_MASK))
 8013726:	69fb      	ldr	r3, [r7, #28]
 8013728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801372c:	2b00      	cmp	r3, #0
 801372e:	d044      	beq.n	80137ba <phhalHw_Pn5180_Receive_Int+0x30a>
        {
            if ((wTmpBufferLen == 0U) && ((dwValue & RX_STATUS_RX_COLL_POS_MASK) == 0U))
 8013730:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013732:	2b00      	cmp	r3, #0
 8013734:	d107      	bne.n	8013746 <phhalHw_Pn5180_Receive_Int+0x296>
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 801373c:	2b00      	cmp	r3, #0
 801373e:	d102      	bne.n	8013746 <phhalHw_Pn5180_Receive_Int+0x296>
            {
                /* No data received */
                status = PH_ERR_IO_TIMEOUT;
 8013740:	2301      	movs	r3, #1
 8013742:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013744:	e051      	b.n	80137ea <phhalHw_Pn5180_Receive_Int+0x33a>
            }
            else
            {
                status = PH_ERR_COLLISION_ERROR;
 8013746:	2303      	movs	r3, #3
 8013748:	87fb      	strh	r3, [r7, #62]	@ 0x3e

                /* Retrieve collision position */
                dwColPos = dwValue & RX_STATUS_RX_COLL_POS_MASK;
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	f003 737e 	and.w	r3, r3, #66584576	@ 0x3f80000
 8013750:	63bb      	str	r3, [r7, #56]	@ 0x38
                dwColPos = dwColPos >> RX_STATUS_RX_COLL_POS_POS;
 8013752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013754:	0cdb      	lsrs	r3, r3, #19
 8013756:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Restore RX buffer size */
                wTmpBufferSize = wTmpBufferSize + wTmpBufferLen;
 8013758:	8c3a      	ldrh	r2, [r7, #32]
 801375a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801375c:	4413      	add	r3, r2
 801375e:	b29b      	uxth	r3, r3
 8013760:	843b      	strh	r3, [r7, #32]
                if (dwColPos > wTmpBufferSize)
 8013762:	8c3b      	ldrh	r3, [r7, #32]
 8013764:	461a      	mov	r2, r3
 8013766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013768:	4293      	cmp	r3, r2
 801376a:	d904      	bls.n	8013776 <phhalHw_Pn5180_Receive_Int+0x2c6>
                {
                    wTmpBufferLen = wTmpBufferSize;
 801376c:	8c3b      	ldrh	r3, [r7, #32]
 801376e:	847b      	strh	r3, [r7, #34]	@ 0x22
                    status = PH_ERR_BUFFER_OVERFLOW;
 8013770:	2304      	movs	r3, #4
 8013772:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013774:	e004      	b.n	8013780 <phhalHw_Pn5180_Receive_Int+0x2d0>
                }
                else
                {
                    wTmpBufferLen = ((uint16_t)dwColPos >> 3U);
 8013776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013778:	b29b      	uxth	r3, r3
 801377a:	08db      	lsrs	r3, r3, #3
 801377c:	b29b      	uxth	r3, r3
 801377e:	847b      	strh	r3, [r7, #34]	@ 0x22
                }

                /* Extracting valid bits from Collision position */
                if(dwColPos >= 8U)
 8013780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013782:	2b07      	cmp	r3, #7
 8013784:	d904      	bls.n	8013790 <phhalHw_Pn5180_Receive_Int+0x2e0>
                {
                    dwValue = dwColPos % 8U ;
 8013786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013788:	f003 0307 	and.w	r3, r3, #7
 801378c:	61fb      	str	r3, [r7, #28]
 801378e:	e001      	b.n	8013794 <phhalHw_Pn5180_Receive_Int+0x2e4>
                }
                else
                {
                    dwValue = dwColPos;
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	61fb      	str	r3, [r7, #28]
                }

                if (0U != (dwValue))
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d00a      	beq.n	80137b0 <phhalHw_Pn5180_Receive_Int+0x300>
                {
                    /* If it is non zero, some valid bits are received */
                    if (wTmpBufferLen == wTmpBufferSize)
 801379a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801379c:	8c3b      	ldrh	r3, [r7, #32]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d102      	bne.n	80137a8 <phhalHw_Pn5180_Receive_Int+0x2f8>
                    {
                        status = PH_ERR_BUFFER_OVERFLOW;
 80137a2:	2304      	movs	r3, #4
 80137a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80137a6:	e003      	b.n	80137b0 <phhalHw_Pn5180_Receive_Int+0x300>
                    }
                    else
                    {
                        ++wTmpBufferLen;
 80137a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137aa:	3301      	adds	r3, #1
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	847b      	strh	r3, [r7, #34]	@ 0x22
                    }
                }

                /* Store valid bits of last byte */
                pDataParams->wAdditionalInfo = (uint16_t)dwValue;
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80137b8:	e017      	b.n	80137ea <phhalHw_Pn5180_Receive_Int+0x33a>
            }
        }
        else if (0U != (dwValue & RX_STATUS_RX_DATA_INTEGRITY_ERROR_MASK))
 80137ba:	69fb      	ldr	r3, [r7, #28]
 80137bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <phhalHw_Pn5180_Receive_Int+0x31a>
        {
            status = PH_ERR_INTEGRITY_ERROR;
 80137c4:	2302      	movs	r3, #2
 80137c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80137c8:	e00f      	b.n	80137ea <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (0U != (dwValue & RX_STATUS_RX_PROTOCOL_ERROR_MASK))
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d002      	beq.n	80137da <phhalHw_Pn5180_Receive_Int+0x32a>
        {
            status = PH_ERR_PROTOCOL_ERROR;
 80137d4:	2306      	movs	r3, #6
 80137d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80137d8:	e007      	b.n	80137ea <phhalHw_Pn5180_Receive_Int+0x33a>
        }
        else if (dwTemp != 0x00U && dwTemp != 0x08U)
 80137da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d004      	beq.n	80137ea <phhalHw_Pn5180_Receive_Int+0x33a>
 80137e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e2:	2b08      	cmp	r3, #8
 80137e4:	d001      	beq.n	80137ea <phhalHw_Pn5180_Receive_Int+0x33a>
        {
            /* Set incomplete byte status if applicable */
            status =  PH_ERR_SUCCESS_INCOMPLETE_BYTE;
 80137e6:	2373      	movs	r3, #115	@ 0x73
 80137e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        {
            /* For QAC */
        }

#ifndef PN5180_P2P_HW_SYNC_BYTE
        if ((pDataParams->bNfcipMode) == PH_ON && (wTmpBufferLen != 0U))
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d117      	bne.n	8013824 <phhalHw_Pn5180_Receive_Int+0x374>
 80137f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d014      	beq.n	8013824 <phhalHw_Pn5180_Receive_Int+0x374>
        {
            if(*ppRxBuffer[0] != 0xF0U)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	2bf0      	cmp	r3, #240	@ 0xf0
 8013802:	d002      	beq.n	801380a <phhalHw_Pn5180_Receive_Int+0x35a>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_IO_TIMEOUT, PH_COMP_HAL);
 8013804:	f240 2301 	movw	r3, #513	@ 0x201
 8013808:	e0ae      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
            }
            pTmpBuffer[0] = bBackup;
 801380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801380c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8013810:	701a      	strb	r2, [r3, #0]
            (*ppRxBuffer)++;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	1c5a      	adds	r2, r3, #1
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	601a      	str	r2, [r3, #0]
            wTmpBufferLen--;
 801381c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801381e:	3b01      	subs	r3, #1
 8013820:	b29b      	uxth	r3, r3
 8013822:	847b      	strh	r3, [r7, #34]	@ 0x22
        }
#endif
        /* Store received data length in dataparams */
        pDataParams->wRxBufLen = pDataParams->wRxBufStartPos + wTmpBufferLen;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	8bda      	ldrh	r2, [r3, #30]
 8013828:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801382a:	4413      	add	r3, r2
 801382c:	b29a      	uxth	r2, r3
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	835a      	strh	r2, [r3, #26]

        if (ppRxBuffer != NULL)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d005      	beq.n	8013844 <phhalHw_Pn5180_Receive_Int+0x394>
        {
            *ppRxBuffer = pDataParams->pRxBuffer  + wIndex;;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	695a      	ldr	r2, [r3, #20]
 801383c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801383e:	441a      	add	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	601a      	str	r2, [r3, #0]
        }

        if (pRxLength != NULL)
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d003      	beq.n	8013852 <phhalHw_Pn5180_Receive_Int+0x3a2>
        {
            *pRxLength = pDataParams->wRxBufLen;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	8b5a      	ldrh	r2, [r3, #26]
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	801a      	strh	r2, [r3, #0]
        }

        if(pDataParams->bJewelActivated == PH_ON && ((status == PH_ERR_SUCCESS) || ( status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE))
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013858:	2b01      	cmp	r3, #1
 801385a:	d169      	bne.n	8013930 <phhalHw_Pn5180_Receive_Int+0x480>
 801385c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801385e:	2b00      	cmp	r3, #0
 8013860:	d003      	beq.n	801386a <phhalHw_Pn5180_Receive_Int+0x3ba>
 8013862:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013864:	b2db      	uxtb	r3, r3
 8013866:	2b73      	cmp	r3, #115	@ 0x73
 8013868:	d162      	bne.n	8013930 <phhalHw_Pn5180_Receive_Int+0x480>
        {
            do
            {
                if ((ppRxBuffer != NULL) && (pRxLength != NULL))
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d025      	beq.n	80138bc <phhalHw_Pn5180_Receive_Int+0x40c>
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d022      	beq.n	80138bc <phhalHw_Pn5180_Receive_Int+0x40c>
                {
                    /*remove parity of the received data-as harware's parity is off*/
                    statusTmp = phTools_DecodeParity(
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6818      	ldr	r0, [r3, #0]
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	881c      	ldrh	r4, [r3, #0]
                        PH_TOOLS_PARITY_OPTION_ODD ,
                        *ppRxBuffer,
                        *pRxLength,
                        (uint8_t)pDataParams->wAdditionalInfo,
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
                    statusTmp = phTools_DecodeParity(
 8013882:	b2dd      	uxtb	r5, r3
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	881b      	ldrh	r3, [r3, #0]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	6812      	ldr	r2, [r2, #0]
 801388c:	f107 0117 	add.w	r1, r7, #23
 8013890:	9103      	str	r1, [sp, #12]
 8013892:	f107 0122 	add.w	r1, r7, #34	@ 0x22
 8013896:	9102      	str	r1, [sp, #8]
 8013898:	9201      	str	r2, [sp, #4]
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	462b      	mov	r3, r5
 801389e:	4622      	mov	r2, r4
 80138a0:	4601      	mov	r1, r0
 80138a2:	2001      	movs	r0, #1
 80138a4:	f7f3 ff1c 	bl	80076e0 <phTools_DecodeParity>
 80138a8:	4603      	mov	r3, r0
 80138aa:	867b      	strh	r3, [r7, #50]	@ 0x32
                        *ppRxBuffer,
                        &wTmpBufferLen,
                        &bBitlen);

                    /* Return error if there is a Parity error */
                    if ((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS)
 80138ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d003      	beq.n	80138bc <phhalHw_Pn5180_Receive_Int+0x40c>
                    {
                        status = statusTmp & PH_ERR_MASK;
 80138b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 80138ba:	e039      	b.n	8013930 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                /* Check for response length
                * For Type 1 tag, valid minimum response length is 4 */
                if((wTmpBufferLen >= 4U) && (ppRxBuffer != NULL) && (pRxLength != NULL))
 80138bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80138be:	2b03      	cmp	r3, #3
 80138c0:	d933      	bls.n	801392a <phhalHw_Pn5180_Receive_Int+0x47a>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d030      	beq.n	801392a <phhalHw_Pn5180_Receive_Int+0x47a>
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d02d      	beq.n	801392a <phhalHw_Pn5180_Receive_Int+0x47a>
                {
                    /*verify Crc_B for the received data*/
                    PH_CHECK_SUCCESS_FCT(statusTmp,phTools_ComputeCrc_B( *ppRxBuffer, wTmpBufferLen-2, aCrc));
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80138d4:	3a02      	subs	r2, #2
 80138d6:	4611      	mov	r1, r2
 80138d8:	f107 0214 	add.w	r2, r7, #20
 80138dc:	4618      	mov	r0, r3
 80138de:	f7f4 f87e 	bl	80079de <phTools_ComputeCrc_B>
 80138e2:	4603      	mov	r3, r0
 80138e4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80138e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d001      	beq.n	80138f0 <phhalHw_Pn5180_Receive_Int+0x440>
 80138ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80138ee:	e03b      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 80138f0:	7d3a      	ldrb	r2, [r7, #20]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6819      	ldr	r1, [r3, #0]
 80138f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80138f8:	3b02      	subs	r3, #2
 80138fa:	440b      	add	r3, r1
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d108      	bne.n	8013914 <phhalHw_Pn5180_Receive_Int+0x464>
 8013902:	7d7a      	ldrb	r2, [r7, #21]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6819      	ldr	r1, [r3, #0]
 8013908:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801390a:	3b01      	subs	r3, #1
 801390c:	440b      	add	r3, r1
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	429a      	cmp	r2, r3
 8013912:	d002      	beq.n	801391a <phhalHw_Pn5180_Receive_Int+0x46a>
                    {
                        status = PH_ERR_INTEGRITY_ERROR;
 8013914:	2302      	movs	r3, #2
 8013916:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        break;
 8013918:	e00a      	b.n	8013930 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                    else
                    {
                        /* subtract CRC from Rx buffer */
                        *pRxLength = wTmpBufferLen - 2U;
 801391a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801391c:	3b02      	subs	r3, #2
 801391e:	b29a      	uxth	r2, r3
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	801a      	strh	r2, [r3, #0]
                        status = PH_ERR_SUCCESS;
 8013924:	2300      	movs	r3, #0
 8013926:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if((aCrc[0] != ((*ppRxBuffer)[wTmpBufferLen - 2U])) || (aCrc[1] != ((*ppRxBuffer)[wTmpBufferLen - 1U])))
 8013928:	e002      	b.n	8013930 <phhalHw_Pn5180_Receive_Int+0x480>
                    }
                }
                else
                {
                    status = PH_ERR_PROTOCOL_ERROR;
 801392a:	2306      	movs	r3, #6
 801392c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    break;
 801392e:	bf00      	nop
                }
            }while (FALSE);
        }

        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 8013930:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013936:	d907      	bls.n	8013948 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_BUFFER_OVERFLOW;
 8013938:	2304      	movs	r3, #4
 801393a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (wTmpBufferLen > PHHAL_HW_PN5180_MAX_FSD)  // Frame Size > FSD
 801393c:	e004      	b.n	8013948 <phhalHw_Pn5180_Receive_Int+0x498>
        }
    }
    else
    {
        if(PH_ERR_SUCCESS == status)
 801393e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013940:	2b00      	cmp	r3, #0
 8013942:	d101      	bne.n	8013948 <phhalHw_Pn5180_Receive_Int+0x498>
        {
            status = PH_ERR_INTERNAL_ERROR;
 8013944:	237f      	movs	r3, #127	@ 0x7f
 8013946:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_HAL);
 8013948:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00b      	beq.n	8013966 <phhalHw_Pn5180_Receive_Int+0x4b6>
 801394e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013950:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013954:	2b00      	cmp	r3, #0
 8013956:	d106      	bne.n	8013966 <phhalHw_Pn5180_Receive_Int+0x4b6>
 8013958:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801395a:	b2db      	uxtb	r3, r3
 801395c:	b29b      	uxth	r3, r3
 801395e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013962:	b29b      	uxth	r3, r3
 8013964:	e000      	b.n	8013968 <phhalHw_Pn5180_Receive_Int+0x4b8>
 8013966:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
}
 8013968:	4618      	mov	r0, r3
 801396a:	3740      	adds	r7, #64	@ 0x40
 801396c:	46bd      	mov	sp, r7
 801396e:	bdb0      	pop	{r4, r5, r7, pc}

08013970 <phhalHw_Pn5180_Int_IdleCommand>:

phStatus_t phhalHw_Pn5180_Int_IdleCommand(phhalHw_Pn5180_DataParams_t * pDataParams)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterAndMask(
 8013978:	f06f 0207 	mvn.w	r2, #7
 801397c:	2100      	movs	r1, #0
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f7fd fcfe 	bl	8011380 <phhalHw_Pn5180_Instr_WriteRegisterAndMask>
 8013984:	4603      	mov	r3, r0
 8013986:	81fb      	strh	r3, [r7, #14]
 8013988:	89fb      	ldrh	r3, [r7, #14]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d001      	beq.n	8013992 <phhalHw_Pn5180_Int_IdleCommand+0x22>
 801398e:	89fb      	ldrh	r3, [r7, #14]
 8013990:	e00c      	b.n	80139ac <phhalHw_Pn5180_Int_IdleCommand+0x3c>
        pDataParams,
        SYSTEM_CONFIG,
        (uint32_t)~(SYSTEM_CONFIG_COMMAND_MASK)));
#ifndef _WIN32
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, IRQ_SET_CLEAR_IDLE_IRQ_CLR_MASK));
 8013992:	2204      	movs	r2, #4
 8013994:	2103      	movs	r1, #3
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7fd fc06 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 801399c:	4603      	mov	r3, r0
 801399e:	81fb      	strh	r3, [r7, #14]
 80139a0:	89fb      	ldrh	r3, [r7, #14]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d001      	beq.n	80139aa <phhalHw_Pn5180_Int_IdleCommand+0x3a>
 80139a6:	89fb      	ldrh	r3, [r7, #14]
 80139a8:	e000      	b.n	80139ac <phhalHw_Pn5180_Int_IdleCommand+0x3c>
#endif

    return PH_ERR_SUCCESS;
 80139aa:	2300      	movs	r3, #0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3710      	adds	r7, #16
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <phhalHw_Pn5180_Int_LoadCommand>:

phStatus_t phhalHw_Pn5180_Int_LoadCommand(phhalHw_Pn5180_DataParams_t * pDataParams, uint8_t bCmd)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b088      	sub	sp, #32
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	460b      	mov	r3, r1
 80139be:	70fb      	strb	r3, [r7, #3]

    uint8_t     PH_MEMLOC_BUF wRegTypeValueSets[12];
    uint16_t    PH_MEMLOC_REM wSizeOfRegTypeValueSets;
    uint32_t    PH_MEMLOC_REM dwTemp;

    wSizeOfRegTypeValueSets = 0U;
 80139c0:	2300      	movs	r3, #0
 80139c2:	83fb      	strh	r3, [r7, #30]

    /*Clear the Bits of TX_CONFIG_TX_STOP_SYMBOL_MASK*/
    dwTemp = (uint32_t) ~( SYSTEM_CONFIG_COMMAND_MASK );
 80139c4:	f06f 0307 	mvn.w	r3, #7
 80139c8:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 80139ca:	8bfb      	ldrh	r3, [r7, #30]
 80139cc:	1c5a      	adds	r2, r3, #1
 80139ce:	83fa      	strh	r2, [r7, #30]
 80139d0:	3320      	adds	r3, #32
 80139d2:	443b      	add	r3, r7
 80139d4:	2200      	movs	r2, #0
 80139d6:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_AND_MASK;
 80139da:	8bfb      	ldrh	r3, [r7, #30]
 80139dc:	1c5a      	adds	r2, r3, #1
 80139de:	83fa      	strh	r2, [r7, #30]
 80139e0:	3320      	adds	r3, #32
 80139e2:	443b      	add	r3, r7
 80139e4:	2203      	movs	r2, #3
 80139e6:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 80139ea:	8bfb      	ldrh	r3, [r7, #30]
 80139ec:	1c5a      	adds	r2, r3, #1
 80139ee:	83fa      	strh	r2, [r7, #30]
 80139f0:	69ba      	ldr	r2, [r7, #24]
 80139f2:	b2d2      	uxtb	r2, r2
 80139f4:	3320      	adds	r3, #32
 80139f6:	443b      	add	r3, r7
 80139f8:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	0a1a      	lsrs	r2, r3, #8
 8013a00:	8bfb      	ldrh	r3, [r7, #30]
 8013a02:	1c59      	adds	r1, r3, #1
 8013a04:	83f9      	strh	r1, [r7, #30]
 8013a06:	b2d2      	uxtb	r2, r2
 8013a08:	3320      	adds	r3, #32
 8013a0a:	443b      	add	r3, r7
 8013a0c:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	0c1a      	lsrs	r2, r3, #16
 8013a14:	8bfb      	ldrh	r3, [r7, #30]
 8013a16:	1c59      	adds	r1, r3, #1
 8013a18:	83f9      	strh	r1, [r7, #30]
 8013a1a:	b2d2      	uxtb	r2, r2
 8013a1c:	3320      	adds	r3, #32
 8013a1e:	443b      	add	r3, r7
 8013a20:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013a24:	69bb      	ldr	r3, [r7, #24]
 8013a26:	0e1a      	lsrs	r2, r3, #24
 8013a28:	8bfb      	ldrh	r3, [r7, #30]
 8013a2a:	1c59      	adds	r1, r3, #1
 8013a2c:	83f9      	strh	r1, [r7, #30]
 8013a2e:	b2d2      	uxtb	r2, r2
 8013a30:	3320      	adds	r3, #32
 8013a32:	443b      	add	r3, r7
 8013a34:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Set the new value  */
    dwTemp = ((uint32_t)bCmd & SYSTEM_CONFIG_COMMAND_MASK);
 8013a38:	78fb      	ldrb	r3, [r7, #3]
 8013a3a:	f003 0307 	and.w	r3, r3, #7
 8013a3e:	61bb      	str	r3, [r7, #24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = SYSTEM_CONFIG;
 8013a40:	8bfb      	ldrh	r3, [r7, #30]
 8013a42:	1c5a      	adds	r2, r3, #1
 8013a44:	83fa      	strh	r2, [r7, #30]
 8013a46:	3320      	adds	r3, #32
 8013a48:	443b      	add	r3, r7
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = PHHAL_HW_PN5180_WRITE_MULTIPLE_TYPE_WRITE_OR_MASK;
 8013a50:	8bfb      	ldrh	r3, [r7, #30]
 8013a52:	1c5a      	adds	r2, r3, #1
 8013a54:	83fa      	strh	r2, [r7, #30]
 8013a56:	3320      	adds	r3, #32
 8013a58:	443b      	add	r3, r7
 8013a5a:	2202      	movs	r2, #2
 8013a5c:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp);
 8013a60:	8bfb      	ldrh	r3, [r7, #30]
 8013a62:	1c5a      	adds	r2, r3, #1
 8013a64:	83fa      	strh	r2, [r7, #30]
 8013a66:	69ba      	ldr	r2, [r7, #24]
 8013a68:	b2d2      	uxtb	r2, r2
 8013a6a:	3320      	adds	r3, #32
 8013a6c:	443b      	add	r3, r7
 8013a6e:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 8U);
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	0a1a      	lsrs	r2, r3, #8
 8013a76:	8bfb      	ldrh	r3, [r7, #30]
 8013a78:	1c59      	adds	r1, r3, #1
 8013a7a:	83f9      	strh	r1, [r7, #30]
 8013a7c:	b2d2      	uxtb	r2, r2
 8013a7e:	3320      	adds	r3, #32
 8013a80:	443b      	add	r3, r7
 8013a82:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 16U);
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	0c1a      	lsrs	r2, r3, #16
 8013a8a:	8bfb      	ldrh	r3, [r7, #30]
 8013a8c:	1c59      	adds	r1, r3, #1
 8013a8e:	83f9      	strh	r1, [r7, #30]
 8013a90:	b2d2      	uxtb	r2, r2
 8013a92:	3320      	adds	r3, #32
 8013a94:	443b      	add	r3, r7
 8013a96:	f803 2c18 	strb.w	r2, [r3, #-24]
    wRegTypeValueSets[wSizeOfRegTypeValueSets++] = (uint8_t)(dwTemp>> 24U);
 8013a9a:	69bb      	ldr	r3, [r7, #24]
 8013a9c:	0e1a      	lsrs	r2, r3, #24
 8013a9e:	8bfb      	ldrh	r3, [r7, #30]
 8013aa0:	1c59      	adds	r1, r3, #1
 8013aa2:	83f9      	strh	r1, [r7, #30]
 8013aa4:	b2d2      	uxtb	r2, r2
 8013aa6:	3320      	adds	r3, #32
 8013aa8:	443b      	add	r3, r7
 8013aaa:	f803 2c18 	strb.w	r2, [r3, #-24]

    /*Send the array to the IC*/
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegisterMultiple(pDataParams,  wRegTypeValueSets, wSizeOfRegTypeValueSets));
 8013aae:	8bfa      	ldrh	r2, [r7, #30]
 8013ab0:	f107 0308 	add.w	r3, r7, #8
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7fd fcd8 	bl	801146c <phhalHw_Pn5180_Instr_WriteRegisterMultiple>
 8013abc:	4603      	mov	r3, r0
 8013abe:	82fb      	strh	r3, [r7, #22]
 8013ac0:	8afb      	ldrh	r3, [r7, #22]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d001      	beq.n	8013aca <phhalHw_Pn5180_Int_LoadCommand+0x116>
 8013ac6:	8afb      	ldrh	r3, [r7, #22]
 8013ac8:	e000      	b.n	8013acc <phhalHw_Pn5180_Int_LoadCommand+0x118>

    return PH_ERR_SUCCESS;
 8013aca:	2300      	movs	r3, #0

}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3720      	adds	r7, #32
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <phhalHw_Pn5180_WaitIrq>:
    uint8_t bEnableIrq,
    uint8_t bWaitUntilPowerUp,
    uint32_t dwIrqWaitFor,
    uint32_t * dwIrqReg
    )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b088      	sub	sp, #32
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	607b      	str	r3, [r7, #4]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	72fb      	strb	r3, [r7, #11]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	72bb      	strb	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint32_t   PH_MEMLOC_REM dwRegister;
    phOsal_EventBits_t PH_MEMLOC_REM tReceivedEvents;

    // debug below----
    printf("WaitIrq: bEnableIrq=0x%02X, dwIrqWaitFor=0x%08lX\n", bEnableIrq, dwIrqWaitFor);
 8013ae6:	7afb      	ldrb	r3, [r7, #11]
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	4619      	mov	r1, r3
 8013aec:	482b      	ldr	r0, [pc, #172]	@ (8013b9c <phhalHw_Pn5180_WaitIrq+0xc8>)
 8013aee:	f00b f8bb 	bl	801ec68 <iprintf>

    // debug top----

    /* Parameter check */
    if (0U == (dwIrqWaitFor))
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d102      	bne.n	8013afe <phhalHw_Pn5180_WaitIrq+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INTERNAL_ERROR, PH_COMP_HAL);
 8013af8:	f240 237f 	movw	r3, #639	@ 0x27f
 8013afc:	e04a      	b.n	8013b94 <phhalHw_Pn5180_WaitIrq+0xc0>
        /* Need to add power up behaviour */
    }

    /* If Test Bus is enabled, we should not relay on IRQ Pin
     * instead poll on IRQ Status register. */
    if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d103      	bne.n	8013b10 <phhalHw_Pn5180_WaitIrq+0x3c>
    {
        /* Test Bus is enabled */
        bEnableIrq &= (uint8_t)~(uint8_t)PHHAL_HW_CHECK_IRQ_PIN_MASK;
 8013b08:	7afb      	ldrb	r3, [r7, #11]
 8013b0a:	f023 0301 	bic.w	r3, r3, #1
 8013b0e:	72fb      	strb	r3, [r7, #11]
        do
        {
#ifndef _WIN32
            /* If Test Bus is enabled, we should avoid polling on registers
             * continuously as we put SPI noise on RF. */
            if ( pDataParams->bIsTestBusEnabled == PH_ON)
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d114      	bne.n	8013b44 <phhalHw_Pn5180_WaitIrq+0x70>
            {
                if (pDataParams->wWaitIRQDelayWithTestBus == 0x00U)
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d106      	bne.n	8013b32 <phhalHw_Pn5180_WaitIrq+0x5e>
                {
                    /* Wait for atleast 1milli sec. */
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, 0x01U, NULL);
 8013b24:	2200      	movs	r2, #0
 8013b26:	2101      	movs	r1, #1
 8013b28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013b2c:	f005 f8da 	bl	8018ce4 <phDriver_TimerStart>
 8013b30:	e008      	b.n	8013b44 <phhalHw_Pn5180_WaitIrq+0x70>
                }
                else
                {
                    phDriver_TimerStart(PH_DRIVER_TIMER_MILLI_SECS, pDataParams->wWaitIRQDelayWithTestBus, NULL);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8013b38:	2200      	movs	r2, #0
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013b40:	f005 f8d0 	bl	8018ce4 <phDriver_TimerStart>
                }
            }
#endif
            /* Read the IRQ register and check if the interrupt has occured */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_ReadRegister(pDataParams, IRQ_STATUS, &dwRegister));
 8013b44:	f107 0318 	add.w	r3, r7, #24
 8013b48:	461a      	mov	r2, r3
 8013b4a:	2102      	movs	r1, #2
 8013b4c:	68f8      	ldr	r0, [r7, #12]
 8013b4e:	f7fd fd3f 	bl	80115d0 <phhalHw_Pn5180_Instr_ReadRegister>
 8013b52:	4603      	mov	r3, r0
 8013b54:	83fb      	strh	r3, [r7, #30]
 8013b56:	8bfb      	ldrh	r3, [r7, #30]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <phhalHw_Pn5180_WaitIrq+0x8c>
 8013b5c:	8bfb      	ldrh	r3, [r7, #30]
 8013b5e:	e019      	b.n	8013b94 <phhalHw_Pn5180_WaitIrq+0xc0>
        }while((0U == ((dwRegister & dwIrqWaitFor))));
 8013b60:	69ba      	ldr	r2, [r7, #24]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4013      	ands	r3, r2
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d0d2      	beq.n	8013b10 <phhalHw_Pn5180_WaitIrq+0x3c>

        /* Store the state of status register */
        *dwIrqReg = dwRegister;
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b6e:	601a      	str	r2, [r3, #0]

        if ((bEnableIrq & PHHAL_HW_DISABLE_IRQ_CLEAR_MASK) == PH_OFF)
 8013b70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	db0c      	blt.n	8013b92 <phhalHw_Pn5180_WaitIrq+0xbe>
        {
            /* Clear all Interrupts for e.g Tx interrupt during receive */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Pn5180_Instr_WriteRegister(pDataParams, IRQ_SET_CLEAR, dwRegister));
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	2103      	movs	r1, #3
 8013b7e:	68f8      	ldr	r0, [r7, #12]
 8013b80:	f7fd fb12 	bl	80111a8 <phhalHw_Pn5180_Instr_WriteRegister>
 8013b84:	4603      	mov	r3, r0
 8013b86:	83fb      	strh	r3, [r7, #30]
 8013b88:	8bfb      	ldrh	r3, [r7, #30]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d001      	beq.n	8013b92 <phhalHw_Pn5180_WaitIrq+0xbe>
 8013b8e:	8bfb      	ldrh	r3, [r7, #30]
 8013b90:	e000      	b.n	8013b94 <phhalHw_Pn5180_WaitIrq+0xc0>
        }
    }

    return PH_ERR_SUCCESS;
 8013b92:	2300      	movs	r3, #0

}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3720      	adds	r7, #32
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	080216d4 	.word	0x080216d4

08013ba0 <phpalFelica_Sw_Init>:
phStatus_t phpalFelica_Sw_Init(
                               phpalFelica_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams
                               )
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	460b      	mov	r3, r1
 8013baa:	607a      	str	r2, [r7, #4]
 8013bac:	817b      	strh	r3, [r7, #10]
    /* parameter structure length check */
    if (sizeof(phpalFelica_Sw_DataParams_t) != wSizeOfDataParams)
 8013bae:	897b      	ldrh	r3, [r7, #10]
 8013bb0:	2b20      	cmp	r3, #32
 8013bb2:	d002      	beq.n	8013bba <phpalFelica_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_FELICA);
 8013bb4:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8013bb8:	e01d      	b.n	8013bf6 <phpalFelica_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <phpalFelica_Sw_Init+0x24>
 8013bc0:	2321      	movs	r3, #33	@ 0x21
 8013bc2:	e018      	b.n	8013bf6 <phpalFelica_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d101      	bne.n	8013bce <phpalFelica_Sw_Init+0x2e>
 8013bca:	2321      	movs	r3, #33	@ 0x21
 8013bcc:	e013      	b.n	8013bf6 <phpalFelica_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_FELICA | PHPAL_FELICA_SW_ID;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f640 0201 	movw	r2, #2049	@ 0x801
 8013bd4:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	605a      	str	r2, [r3, #4]
    pDataParams->bIDmPMmValid   = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2200      	movs	r2, #0
 8013be0:	769a      	strb	r2, [r3, #26]
    pDataParams->bLength        = 0x00;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	2200      	movs	r2, #0
 8013be6:	76da      	strb	r2, [r3, #27]
    pDataParams->bRequestCode   = 0x00;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2200      	movs	r2, #0
 8013bec:	771a      	strb	r2, [r3, #28]
    pDataParams->bPreambleLen   = PHPAL_FELICA_PREAMBLE_LEN_48BITS;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	779a      	strb	r2, [r3, #30]

    return PH_ERR_SUCCESS;
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3714      	adds	r7, #20
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c00:	4770      	bx	lr
	...

08013c04 <phpalFelica_Sw_ReqC>:
                               uint8_t * pSystemCode,
                               uint8_t  bNumTimeSlots,
                               uint8_t ** ppRxBuffer,
                               uint16_t * pRxLength
                               )
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b08c      	sub	sp, #48	@ 0x30
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	60b9      	str	r1, [r7, #8]
 8013c0e:	603b      	str	r3, [r7, #0]
 8013c10:	4613      	mov	r3, r2
 8013c12:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[6];
    uint8_t *   PH_MEMLOC_REM pRxBufferTmp = NULL;
 8013c14:	2300      	movs	r3, #0
 8013c16:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRxLengthTmp = 0;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wTimeOutUs;
    uint16_t    PH_MEMLOC_REM wCardType = 0;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	823b      	strh	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wTR1ValueUs;

    /* Reset IDm, PMm and RD data*/
    (void)memset(pDataParams->aIDmPMm, 0x00, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + PHPAL_FELICA_RD_LENGTH));
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	3308      	adds	r3, #8
 8013c24:	2212      	movs	r2, #18
 8013c26:	2100      	movs	r1, #0
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f00b f97d 	bl	801ef28 <memset>
    /* Reset validity of stored card IDs */
    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_INVALID;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2200      	movs	r2, #0
 8013c32:	769a      	strb	r2, [r3, #26]

    /* Reset received frame count */
    pDataParams->bTotalFrames = 0;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2200      	movs	r2, #0
 8013c38:	775a      	strb	r2, [r3, #29]

    /* parameter check and timeout setting */
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8013c3a:	79fb      	ldrb	r3, [r7, #7]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00e      	beq.n	8013c5e <phpalFelica_Sw_ReqC+0x5a>
 8013c40:	79fb      	ldrb	r3, [r7, #7]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d00b      	beq.n	8013c5e <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_2) ||
 8013c46:	79fb      	ldrb	r3, [r7, #7]
 8013c48:	2b03      	cmp	r3, #3
 8013c4a:	d008      	beq.n	8013c5e <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_4) ||
 8013c4c:	79fb      	ldrb	r3, [r7, #7]
 8013c4e:	2b07      	cmp	r3, #7
 8013c50:	d005      	beq.n	8013c5e <phpalFelica_Sw_ReqC+0x5a>
    if(!((bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_1) ||
 8013c52:	79fb      	ldrb	r3, [r7, #7]
 8013c54:	2b0f      	cmp	r3, #15
 8013c56:	d002      	beq.n	8013c5e <phpalFelica_Sw_ReqC+0x5a>
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_8) ||
        (bNumTimeSlots == PHPAL_FELICA_NUMSLOTS_16))
      )
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8013c58:	f640 0321 	movw	r3, #2081	@ 0x821
 8013c5c:	e0e2      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
    }
    else
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	f107 0210 	add.w	r2, r7, #16
 8013c66:	2121      	movs	r1, #33	@ 0x21
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7fc f883 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013c72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d001      	beq.n	8013c7c <phpalFelica_Sw_ReqC+0x78>
 8013c78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013c7a:	e0d3      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
            PHHAL_HW_CONFIG_CARD_TYPE,
            &wCardType));
        /* NFC Forum Digital Protocol Technical Specification v2.3
         * 8.7.1.3 : wTimeOutUs = FDTF,LISTEN,SENSF_REQ(TSN+1U) - TR1 + (delta)TF,POLL
         * Using TR1 value @212kbps */
        if ((wCardType != PHHAL_HW_CARDTYPE_FELICA_212) && (wCardType != PHHAL_HW_CARDTYPE_FELICA_424))
 8013c7c:	8a3b      	ldrh	r3, [r7, #16]
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d005      	beq.n	8013c8e <phpalFelica_Sw_ReqC+0x8a>
 8013c82:	8a3b      	ldrh	r3, [r7, #16]
 8013c84:	2b0a      	cmp	r3, #10
 8013c86:	d002      	beq.n	8013c8e <phpalFelica_Sw_ReqC+0x8a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_FELICA);
 8013c88:	f640 0325 	movw	r3, #2085	@ 0x825
 8013c8c:	e0ca      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
        }

        if (wCardType == PHHAL_HW_CARDTYPE_FELICA_212)
 8013c8e:	8a3b      	ldrh	r3, [r7, #16]
 8013c90:	2b03      	cmp	r3, #3
 8013c92:	d107      	bne.n	8013ca4 <phpalFelica_Sw_ReqC+0xa0>
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][0];
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	7f9b      	ldrb	r3, [r3, #30]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	4b64      	ldr	r3, [pc, #400]	@ (8013e2c <phpalFelica_Sw_ReqC+0x228>)
 8013c9c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8013ca0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013ca2:	e006      	b.n	8013cb2 <phpalFelica_Sw_ReqC+0xae>
        }
        else
        {
            wTR1ValueUs = aFelica_TR1_Value_Us[pDataParams->bPreambleLen][1];
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	7f9b      	ldrb	r3, [r3, #30]
 8013ca8:	4a60      	ldr	r2, [pc, #384]	@ (8013e2c <phpalFelica_Sw_ReqC+0x228>)
 8013caa:	009b      	lsls	r3, r3, #2
 8013cac:	4413      	add	r3, r2
 8013cae:	885b      	ldrh	r3, [r3, #2]
 8013cb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }

        wTimeOutUs = FDTF_LISTEN_SENSF_REQ((((uint16_t)bNumTimeSlots) + 1U), wTR1ValueUs) - wTR1ValueUs + PHPAL_FELICA_SW_T_DELTA_F_POLL_US;
 8013cb2:	79fb      	ldrb	r3, [r7, #7]
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	0092      	lsls	r2, r2, #2
 8013cba:	441a      	add	r2, r3
 8013cbc:	4611      	mov	r1, r2
 8013cbe:	0109      	lsls	r1, r1, #4
 8013cc0:	1a8a      	subs	r2, r1, r2
 8013cc2:	0052      	lsls	r2, r2, #1
 8013cc4:	4413      	add	r3, r2
 8013cc6:	00db      	lsls	r3, r3, #3
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	f603 632a 	addw	r3, r3, #3626	@ 0xe2a
 8013cce:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* build the command frame */
    aCmd[0] = 6;
 8013cd0:	2306      	movs	r3, #6
 8013cd2:	763b      	strb	r3, [r7, #24]
    aCmd[1] = PHPAL_FELICA_SW_CMD_REQC;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	767b      	strb	r3, [r7, #25]
    aCmd[2] = pSystemCode[0];
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	76bb      	strb	r3, [r7, #26]
    aCmd[3] = pSystemCode[1];
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	785b      	ldrb	r3, [r3, #1]
 8013ce2:	76fb      	strb	r3, [r7, #27]
    aCmd[4] = pDataParams->bRequestCode;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	7f1b      	ldrb	r3, [r3, #28]
 8013ce8:	773b      	strb	r3, [r7, #28]
    aCmd[5] = bNumTimeSlots;
 8013cea:	79fb      	ldrb	r3, [r7, #7]
 8013cec:	777b      	strb	r3, [r7, #29]

    /* Set ReqC timeout according to the number of slots */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013cf4:	210d      	movs	r1, #13
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fa fbee 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013d00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d001      	beq.n	8013d0a <phpalFelica_Sw_ReqC+0x106>
 8013d06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d08:	e08c      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        wTimeOutUs));

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8013d0a:	79fb      	ldrb	r3, [r7, #7]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00d      	beq.n	8013d2c <phpalFelica_Sw_ReqC+0x128>
    {
        /* Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	2201      	movs	r2, #1
 8013d16:	2153      	movs	r1, #83	@ 0x53
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fa fbdd 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013d22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d001      	beq.n	8013d2c <phpalFelica_Sw_ReqC+0x128>
 8013d28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d2a:	e07b      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_ON));
    }

    /* Exchange command */
     status = phhalHw_Exchange(
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	6858      	ldr	r0, [r3, #4]
 8013d30:	f107 0218 	add.w	r2, r7, #24
 8013d34:	f107 0312 	add.w	r3, r7, #18
 8013d38:	9301      	str	r3, [sp, #4]
 8013d3a:	f107 0314 	add.w	r3, r7, #20
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	2306      	movs	r3, #6
 8013d42:	2100      	movs	r1, #0
 8013d44:	f7fa f810 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	843b      	strh	r3, [r7, #32]
        aCmd,
        6,
        &pRxBufferTmp,
        &wRxLengthTmp);

    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8013d4c:	79fb      	ldrb	r3, [r7, #7]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00d      	beq.n	8013d6e <phpalFelica_Sw_ReqC+0x16a>
    {
        /* Re-Set RX Multiple feature of HW */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	2153      	movs	r1, #83	@ 0x53
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fa fbbc 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8013d60:	4603      	mov	r3, r0
 8013d62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013d64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d001      	beq.n	8013d6e <phpalFelica_Sw_ReqC+0x16a>
 8013d6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013d6c:	e05a      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
                PHHAL_HW_CONFIG_RXMULTIPLE,
                PH_OFF));
    }

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8013d6e:	8c3b      	ldrh	r3, [r7, #32]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d001      	beq.n	8013d78 <phpalFelica_Sw_ReqC+0x174>
 8013d74:	8c3b      	ldrh	r3, [r7, #32]
 8013d76:	e055      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>

    /* Check length and update info*/
    if(bNumTimeSlots > PHPAL_FELICA_NUMSLOTS_1)
 8013d78:	79fb      	ldrb	r3, [r7, #7]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d015      	beq.n	8013daa <phpalFelica_Sw_ReqC+0x1a6>
    {
        /* Rx Length should be multiple of response frame size */
        if(0U != (wRxLengthTmp % PHPAL_FELICA_SW_RESP_FRAME_SIZE))
 8013d7e:	8a7b      	ldrh	r3, [r7, #18]
 8013d80:	f003 031f 	and.w	r3, r3, #31
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <phpalFelica_Sw_ReqC+0x18c>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8013d8a:	f640 0306 	movw	r3, #2054	@ 0x806
 8013d8e:	e049      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
        }
        /* assign and update IDm and PMm and length */
        *ppRxBuffer = pRxBufferTmp;
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	601a      	str	r2, [r3, #0]
        *pRxLength = wRxLengthTmp;
 8013d96:	8a7a      	ldrh	r2, [r7, #18]
 8013d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d9a:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = (uint8_t)(wRxLengthTmp / PHPAL_FELICA_SW_RESP_FRAME_SIZE);
 8013d9c:	8a7b      	ldrh	r3, [r7, #18]
 8013d9e:	095b      	lsrs	r3, r3, #5
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	775a      	strb	r2, [r3, #29]
 8013da8:	e038      	b.n	8013e1c <phpalFelica_Sw_ReqC+0x218>
    }
    else
    {
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8013daa:	8a7b      	ldrh	r3, [r7, #18]
 8013dac:	2b12      	cmp	r3, #18
 8013dae:	d002      	beq.n	8013db6 <phpalFelica_Sw_ReqC+0x1b2>
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 8013db0:	8a7b      	ldrh	r3, [r7, #18]
        if (((wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + 1U)) &&
 8013db2:	2b14      	cmp	r3, #20
 8013db4:	d10a      	bne.n	8013dcc <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	461a      	mov	r2, r3
 8013dbc:	8a7b      	ldrh	r3, [r7, #18]
            (wRxLengthTmp != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U))) ||
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d104      	bne.n	8013dcc <phpalFelica_Sw_ReqC+0x1c8>
            (pRxBufferTmp[1] != PHPAL_FELICA_SW_RSP_REQC))
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	781b      	ldrb	r3, [r3, #0]
            (pRxBufferTmp[0] != wRxLengthTmp) ||
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d002      	beq.n	8013dd2 <phpalFelica_Sw_ReqC+0x1ce>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8013dcc:	f640 0306 	movw	r3, #2054	@ 0x806
 8013dd0:	e028      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
        }

        /* RC = 0 and card response with RD information */
        if((wRxLengthTmp == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + 1U)) && (pDataParams->bRequestCode == 0U))
 8013dd2:	8a7b      	ldrh	r3, [r7, #18]
 8013dd4:	2b14      	cmp	r3, #20
 8013dd6:	d106      	bne.n	8013de6 <phpalFelica_Sw_ReqC+0x1e2>
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	7f1b      	ldrb	r3, [r3, #28]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d102      	bne.n	8013de6 <phpalFelica_Sw_ReqC+0x1e2>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8013de0:	f640 0306 	movw	r3, #2054	@ 0x806
 8013de4:	e01e      	b.n	8013e24 <phpalFelica_Sw_ReqC+0x220>
        }
        /* Store IDm and PMm */
        (void)memcpy(pDataParams->aIDmPMm, &pRxBufferTmp[2], (((uint32_t)(pRxBufferTmp[0])) - 2U));
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f103 0008 	add.w	r0, r3, #8
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	1c99      	adds	r1, r3, #2
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	3b02      	subs	r3, #2
 8013df6:	461a      	mov	r2, r3
 8013df8:	f00b f915 	bl	801f026 <memcpy>
        pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2201      	movs	r2, #1
 8013e00:	769a      	strb	r2, [r3, #26]

        /* Remove LEN Byte and Response Byte from response and assign start position of ID */
        *ppRxBuffer = &pRxBufferTmp[PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE];
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	1c9a      	adds	r2, r3, #2
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	601a      	str	r2, [r3, #0]
        *pRxLength = (uint16_t)(((uint16_t)pRxBufferTmp[0]) - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE));
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	3b02      	subs	r3, #2
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e14:	801a      	strh	r2, [r3, #0]

        pDataParams->bTotalFrames = 1;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2201      	movs	r2, #1
 8013e1a:	775a      	strb	r2, [r3, #29]
    }

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	769a      	strb	r2, [r3, #26]

    return PH_ERR_SUCCESS;
 8013e22:	2300      	movs	r3, #0
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3728      	adds	r7, #40	@ 0x28
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	08022110 	.word	0x08022110

08013e30 <phpalFelica_Sw_GetFrameInfo>:
                                        uint8_t * pResponseBuffer,
                                        uint16_t *pwStatus,
                                        uint8_t** ppID,
                                        uint8_t * pLen
                                        )
{
 8013e30:	b480      	push	{r7}
 8013e32:	b087      	sub	sp, #28
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	607a      	str	r2, [r7, #4]
 8013e3a:	603b      	str	r3, [r7, #0]
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM       bError;
    uint8_t PH_MEMLOC_REM       bStartPos;

    /* check frame number */
    if((bFrameNum > pDataParams->bTotalFrames) || (bFrameNum == 0U))
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	7f5b      	ldrb	r3, [r3, #29]
 8013e44:	7afa      	ldrb	r2, [r7, #11]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d802      	bhi.n	8013e50 <phpalFelica_Sw_GetFrameInfo+0x20>
 8013e4a:	7afb      	ldrb	r3, [r7, #11]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d102      	bne.n	8013e56 <phpalFelica_Sw_GetFrameInfo+0x26>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8013e50:	f640 0321 	movw	r3, #2081	@ 0x821
 8013e54:	e06f      	b.n	8013f36 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    *pwStatus = PH_ERR_SUCCESS;
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	801a      	strh	r2, [r3, #0]

    /* get start position of frame */
    bStartPos = (uint8_t)(PHPAL_FELICA_SW_RESP_FRAME_SIZE * (bFrameNum - 1U));
 8013e5c:	7afb      	ldrb	r3, [r7, #11]
 8013e5e:	3b01      	subs	r3, #1
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	015b      	lsls	r3, r3, #5
 8013e64:	75fb      	strb	r3, [r7, #23]

    /* Check length */
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8013e66:	7dfb      	ldrb	r3, [r7, #23]
 8013e68:	331c      	adds	r3, #28
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	2b12      	cmp	r3, #18
 8013e72:	d006      	beq.n	8013e82 <phpalFelica_Sw_GetFrameInfo+0x52>
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8013e74:	7dfb      	ldrb	r3, [r7, #23]
 8013e76:	331c      	adds	r3, #28
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	4413      	add	r3, r2
 8013e7c:	781b      	ldrb	r3, [r3, #0]
    if( ((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) &&
 8013e7e:	2b14      	cmp	r3, #20
 8013e80:	d106      	bne.n	8013e90 <phpalFelica_Sw_GetFrameInfo+0x60>
        (pResponseBuffer[bStartPos + 1U] != PHPAL_FELICA_SW_RSP_REQC))
 8013e82:	7dfb      	ldrb	r3, [r7, #23]
 8013e84:	3301      	adds	r3, #1
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	4413      	add	r3, r2
 8013e8a:	781b      	ldrb	r3, [r3, #0]
        (pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] != (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE))) ||
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d002      	beq.n	8013e96 <phpalFelica_Sw_GetFrameInfo+0x66>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8013e90:	f640 0306 	movw	r3, #2054	@ 0x806
 8013e94:	e04f      	b.n	8013f36 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* RC = 0 and card response with RD information */
    if((pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] == (PHPAL_FELICA_ATQC_LENGTH + PHPAL_FELICA_RD_LENGTH + PHPAL_FELICA_SW_LEN_BYTE_SIZE)) && (pDataParams->bRequestCode == 0U))
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	331c      	adds	r3, #28
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	2b14      	cmp	r3, #20
 8013ea2:	d106      	bne.n	8013eb2 <phpalFelica_Sw_GetFrameInfo+0x82>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	7f1b      	ldrb	r3, [r3, #28]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d102      	bne.n	8013eb2 <phpalFelica_Sw_GetFrameInfo+0x82>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_FELICA);
 8013eac:	f640 0306 	movw	r3, #2054	@ 0x806
 8013eb0:	e041      	b.n	8013f36 <phpalFelica_Sw_GetFrameInfo+0x106>
    }

    /* Extract error from Status byte */
    bError = pResponseBuffer[(bStartPos) + PHHAL_HW_STATUS_FRAME_ERR_BYTE_POS ] & PHHAL_HW_STATUS_FRAME_ERR_MASK;
 8013eb2:	7dfb      	ldrb	r3, [r7, #23]
 8013eb4:	331d      	adds	r3, #29
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	4413      	add	r3, r2
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	f003 031f 	and.w	r3, r3, #31
 8013ec0:	75bb      	strb	r3, [r7, #22]

    if(bError != 0x00U)
 8013ec2:	7dbb      	ldrb	r3, [r7, #22]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d026      	beq.n	8013f16 <phpalFelica_Sw_GetFrameInfo+0xe6>
    {
        /* check for contact less error */
        if(0U != (bError & PHHAL_HW_STATUS_FRAME_CL_ERR_POS))
 8013ec8:	7dbb      	ldrb	r3, [r7, #22]
 8013eca:	f003 0301 	and.w	r3, r3, #1
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d01d      	beq.n	8013f0e <phpalFelica_Sw_GetFrameInfo+0xde>
        {
            /* check for protocol error */
            if(0U != (bError & PHHAL_HW_STATUS_FRAME_PROT_ERR_POS))
 8013ed2:	7dbb      	ldrb	r3, [r7, #22]
 8013ed4:	f003 0304 	and.w	r3, r3, #4
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d003      	beq.n	8013ee4 <phpalFelica_Sw_GetFrameInfo+0xb4>
            {
                *pwStatus = PH_ERR_PROTOCOL_ERROR;
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	2206      	movs	r2, #6
 8013ee0:	801a      	strh	r2, [r3, #0]
 8013ee2:	e027      	b.n	8013f34 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for collision error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_COLL_ERR_POS))
 8013ee4:	7dbb      	ldrb	r3, [r7, #22]
 8013ee6:	f003 0308 	and.w	r3, r3, #8
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d003      	beq.n	8013ef6 <phpalFelica_Sw_GetFrameInfo+0xc6>
            {
                *pwStatus = PH_ERR_COLLISION_ERROR;
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	2203      	movs	r2, #3
 8013ef2:	801a      	strh	r2, [r3, #0]
 8013ef4:	e01e      	b.n	8013f34 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            /* check for Integrity error */
            else if(0U != (bError & PHHAL_HW_STATUS_FRAME_DATA_ERR_POS))
 8013ef6:	7dbb      	ldrb	r3, [r7, #22]
 8013ef8:	f003 0302 	and.w	r3, r3, #2
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d003      	beq.n	8013f08 <phpalFelica_Sw_GetFrameInfo+0xd8>
            {
                *pwStatus = PH_ERR_INTEGRITY_ERROR;
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	2202      	movs	r2, #2
 8013f04:	801a      	strh	r2, [r3, #0]
 8013f06:	e015      	b.n	8013f34 <phpalFelica_Sw_GetFrameInfo+0x104>
            }
            else
            {
                /* If CL Error is set and no Protocol, Collision, Integrity flag is set */
                return (PH_ERR_PROTOCOL_ERROR | PH_COMP_PAL_FELICA);
 8013f08:	f640 0306 	movw	r3, #2054	@ 0x806
 8013f0c:	e013      	b.n	8013f36 <phpalFelica_Sw_GetFrameInfo+0x106>
            }
        }
        else
        {   /* Length error */
            *pwStatus = PH_ERR_LENGTH_ERROR;
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	220c      	movs	r2, #12
 8013f12:	801a      	strh	r2, [r3, #0]
 8013f14:	e00e      	b.n	8013f34 <phpalFelica_Sw_GetFrameInfo+0x104>

    }
    else
    {
      /* Remove LEN Byte and Response Byte (0x01) from response and assign start position of ID */
      *ppID = &pResponseBuffer[bStartPos + (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE)];
 8013f16:	7dfb      	ldrb	r3, [r7, #23]
 8013f18:	3302      	adds	r3, #2
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	441a      	add	r2, r3
 8013f1e:	6a3b      	ldr	r3, [r7, #32]
 8013f20:	601a      	str	r2, [r3, #0]
      *pLen = pResponseBuffer[bStartPos + PHHAL_HW_STATUS_FRAME_LEN_BYTE_POS] - (PHPAL_FELICA_SW_LEN_BYTE_SIZE + PHPAL_FELICA_SW_RESP_REQC_SIZE);
 8013f22:	7dfb      	ldrb	r3, [r7, #23]
 8013f24:	331c      	adds	r3, #28
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	4413      	add	r3, r2
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	3b02      	subs	r3, #2
 8013f2e:	b2da      	uxtb	r2, r3
 8013f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f32:	701a      	strb	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	371c      	adds	r7, #28
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr

08013f42 <phpalFelica_Sw_SetSerialNo>:

phStatus_t phpalFelica_Sw_SetSerialNo(
                                      phpalFelica_Sw_DataParams_t * pDataParams,
                                      uint8_t * pIDmPMm
                                      )
{
 8013f42:	b580      	push	{r7, lr}
 8013f44:	b082      	sub	sp, #8
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
 8013f4a:	6039      	str	r1, [r7, #0]

    pDataParams->bIDmPMmValid = PHPAL_FELICA_SW_IDMPMM_VALID;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2201      	movs	r2, #1
 8013f50:	769a      	strb	r2, [r3, #26]
    /* copy IDm and PMm */
    (void)memcpy(pDataParams->aIDmPMm, pIDmPMm, (PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH));
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	3308      	adds	r3, #8
 8013f56:	2210      	movs	r2, #16
 8013f58:	6839      	ldr	r1, [r7, #0]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f00b f863 	bl	801f026 <memcpy>

    return PH_ERR_SUCCESS;
 8013f60:	2300      	movs	r3, #0

}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}

08013f6a <phpalFelica_Sw_SetConfig>:
phStatus_t phpalFelica_Sw_SetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t wValue
                                    )
{
 8013f6a:	b480      	push	{r7}
 8013f6c:	b083      	sub	sp, #12
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	6078      	str	r0, [r7, #4]
 8013f72:	460b      	mov	r3, r1
 8013f74:	807b      	strh	r3, [r7, #2]
 8013f76:	4613      	mov	r3, r2
 8013f78:	803b      	strh	r3, [r7, #0]
    switch(wConfig)
 8013f7a:	887b      	ldrh	r3, [r7, #2]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d002      	beq.n	8013f86 <phpalFelica_Sw_SetConfig+0x1c>
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d00c      	beq.n	8013f9e <phpalFelica_Sw_SetConfig+0x34>
 8013f84:	e01f      	b.n	8013fc6 <phpalFelica_Sw_SetConfig+0x5c>
    {
    case PHPAL_FELICA_CONFIG_RC:
        if ((uint8_t)wValue > 0x02U)
 8013f86:	883b      	ldrh	r3, [r7, #0]
 8013f88:	b2db      	uxtb	r3, r3
 8013f8a:	2b02      	cmp	r3, #2
 8013f8c:	d902      	bls.n	8013f94 <phpalFelica_Sw_SetConfig+0x2a>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8013f8e:	f640 0321 	movw	r3, #2081	@ 0x821
 8013f92:	e01c      	b.n	8013fce <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bRequestCode = (uint8_t)(wValue);
 8013f94:	883b      	ldrh	r3, [r7, #0]
 8013f96:	b2da      	uxtb	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	771a      	strb	r2, [r3, #28]
        break;
 8013f9c:	e016      	b.n	8013fcc <phpalFelica_Sw_SetConfig+0x62>

    case PHPAL_FELICA_PREAMBLE_LENGTH:
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8013f9e:	883b      	ldrh	r3, [r7, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d00b      	beq.n	8013fbc <phpalFelica_Sw_SetConfig+0x52>
 8013fa4:	883b      	ldrh	r3, [r7, #0]
 8013fa6:	2b02      	cmp	r3, #2
 8013fa8:	d008      	beq.n	8013fbc <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_56BITS) ||
 8013faa:	883b      	ldrh	r3, [r7, #0]
 8013fac:	2b03      	cmp	r3, #3
 8013fae:	d005      	beq.n	8013fbc <phpalFelica_Sw_SetConfig+0x52>
        if(!((wValue == PHPAL_FELICA_PREAMBLE_LEN_48BITS) ||
 8013fb0:	883b      	ldrh	r3, [r7, #0]
 8013fb2:	2b04      	cmp	r3, #4
 8013fb4:	d002      	beq.n	8013fbc <phpalFelica_Sw_SetConfig+0x52>
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_64BITS) ||
            (wValue == PHPAL_FELICA_PREAMBLE_LEN_72BITS))
          )
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_FELICA);
 8013fb6:	f640 0321 	movw	r3, #2081	@ 0x821
 8013fba:	e008      	b.n	8013fce <phpalFelica_Sw_SetConfig+0x64>
        }
        pDataParams->bPreambleLen = (uint8_t)(wValue);
 8013fbc:	883b      	ldrh	r3, [r7, #0]
 8013fbe:	b2da      	uxtb	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	779a      	strb	r2, [r3, #30]
        break;
 8013fc4:	e002      	b.n	8013fcc <phpalFelica_Sw_SetConfig+0x62>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8013fc6:	f640 0323 	movw	r3, #2083	@ 0x823
 8013fca:	e000      	b.n	8013fce <phpalFelica_Sw_SetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	370c      	adds	r7, #12
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <phpalFelica_Sw_GetConfig>:
phStatus_t phpalFelica_Sw_GetConfig(
                                    phpalFelica_Sw_DataParams_t* pDataParams,
                                    uint16_t wConfig,
                                    uint16_t * pValue
                                    )
{
 8013fda:	b480      	push	{r7}
 8013fdc:	b085      	sub	sp, #20
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	60f8      	str	r0, [r7, #12]
 8013fe2:	460b      	mov	r3, r1
 8013fe4:	607a      	str	r2, [r7, #4]
 8013fe6:	817b      	strh	r3, [r7, #10]
    switch(wConfig)
 8013fe8:	897b      	ldrh	r3, [r7, #10]
 8013fea:	2b03      	cmp	r3, #3
 8013fec:	d012      	beq.n	8014014 <phpalFelica_Sw_GetConfig+0x3a>
 8013fee:	2b03      	cmp	r3, #3
 8013ff0:	dc26      	bgt.n	8014040 <phpalFelica_Sw_GetConfig+0x66>
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d002      	beq.n	8013ffc <phpalFelica_Sw_GetConfig+0x22>
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d006      	beq.n	8014008 <phpalFelica_Sw_GetConfig+0x2e>
 8013ffa:	e021      	b.n	8014040 <phpalFelica_Sw_GetConfig+0x66>
    {
    case PHPAL_FELICA_CONFIG_RC:
        *pValue = (uint16_t)pDataParams->bRequestCode;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	7f1b      	ldrb	r3, [r3, #28]
 8014000:	461a      	mov	r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	801a      	strh	r2, [r3, #0]
        break;
 8014006:	e01e      	b.n	8014046 <phpalFelica_Sw_GetConfig+0x6c>

    case PH_PALFELICA_CONFIG_NUM_RESPONSE_FRAMES:
        *pValue = (uint16_t)pDataParams->bTotalFrames;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	7f5b      	ldrb	r3, [r3, #29]
 801400c:	461a      	mov	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	801a      	strh	r2, [r3, #0]
        break;
 8014012:	e018      	b.n	8014046 <phpalFelica_Sw_GetConfig+0x6c>

    case PHPAL_FELICA_RD:
        if(pDataParams->bIDmPMmValid == PHPAL_FELICA_SW_IDMPMM_VALID)
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	7e9b      	ldrb	r3, [r3, #26]
 8014018:	2b01      	cmp	r3, #1
 801401a:	d10d      	bne.n	8014038 <phpalFelica_Sw_GetConfig+0x5e>
        {
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	7e1b      	ldrb	r3, [r3, #24]
 8014020:	b21b      	sxth	r3, r3
 8014022:	021b      	lsls	r3, r3, #8
 8014024:	b21a      	sxth	r2, r3
                       ((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH + 1U]));
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	7e5b      	ldrb	r3, [r3, #25]
 801402a:	b21b      	sxth	r3, r3
            *pValue = (((uint16_t)pDataParams->aIDmPMm[PHPAL_FELICA_IDM_LENGTH + PHPAL_FELICA_PMM_LENGTH ] << 8U) |
 801402c:	4313      	orrs	r3, r2
 801402e:	b21b      	sxth	r3, r3
 8014030:	b29a      	uxth	r2, r3
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            *pValue = 0;
        }
        break;
 8014036:	e006      	b.n	8014046 <phpalFelica_Sw_GetConfig+0x6c>
            *pValue = 0;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2200      	movs	r2, #0
 801403c:	801a      	strh	r2, [r3, #0]
        break;
 801403e:	e002      	b.n	8014046 <phpalFelica_Sw_GetConfig+0x6c>

    default:
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_FELICA);
 8014040:	f640 0323 	movw	r3, #2083	@ 0x823
 8014044:	e000      	b.n	8014048 <phpalFelica_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8014046:	2300      	movs	r3, #0
}
 8014048:	4618      	mov	r0, r3
 801404a:	3714      	adds	r7, #20
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr

08014054 <phpalI14443p3a_Sw_Init>:
phStatus_t phpalI14443p3a_Sw_Init(
                                  phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8014054:	b480      	push	{r7}
 8014056:	b085      	sub	sp, #20
 8014058:	af00      	add	r7, sp, #0
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	460b      	mov	r3, r1
 801405e:	607a      	str	r2, [r7, #4]
 8014060:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3a_Sw_DataParams_t) != wSizeOfDataParams)
 8014062:	897b      	ldrh	r3, [r7, #10]
 8014064:	2b18      	cmp	r3, #24
 8014066:	d002      	beq.n	801406e <phpalI14443p3a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3A);
 8014068:	f44f 7348 	mov.w	r3, #800	@ 0x320
 801406c:	e01d      	b.n	80140aa <phpalI14443p3a_Sw_Init+0x56>
    }
    PH_ASSERT_NULL (pDataParams);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d101      	bne.n	8014078 <phpalI14443p3a_Sw_Init+0x24>
 8014074:	2321      	movs	r3, #33	@ 0x21
 8014076:	e018      	b.n	80140aa <phpalI14443p3a_Sw_Init+0x56>
    PH_ASSERT_NULL (pHalDataParams);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d101      	bne.n	8014082 <phpalI14443p3a_Sw_Init+0x2e>
 801407e:	2321      	movs	r3, #33	@ 0x21
 8014080:	e013      	b.n	80140aa <phpalI14443p3a_Sw_Init+0x56>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P3A | PHPAL_I14443P3A_SW_ID;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f240 3201 	movw	r2, #769	@ 0x301
 8014088:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	687a      	ldr	r2, [r7, #4]
 801408e:	605a      	str	r2, [r3, #4]
    pDataParams->bUidLength     = 0;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2200      	movs	r2, #0
 8014094:	749a      	strb	r2, [r3, #18]
    pDataParams->bUidComplete   = 0;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2200      	movs	r2, #0
 801409a:	74da      	strb	r2, [r3, #19]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2202      	movs	r2, #2
 80140a0:	751a      	strb	r2, [r3, #20]
    pDataParams->bPollCmd       = PHPAL_I14443P3A_USE_REQA;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2200      	movs	r2, #0
 80140a6:	755a      	strb	r2, [r3, #21]
    return PH_ERR_SUCCESS;
 80140a8:	2300      	movs	r3, #0
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3714      	adds	r7, #20
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <phpalI14443p3a_Sw_SetConfig>:
phStatus_t phpalI14443p3a_Sw_SetConfig(
                                       phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	b084      	sub	sp, #16
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
 80140be:	460b      	mov	r3, r1
 80140c0:	807b      	strh	r3, [r7, #2]
 80140c2:	4613      	mov	r3, r2
 80140c4:	803b      	strh	r3, [r7, #0]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 80140c6:	887b      	ldrh	r3, [r7, #2]
 80140c8:	2b03      	cmp	r3, #3
 80140ca:	d010      	beq.n	80140ee <phpalI14443p3a_Sw_SetConfig+0x38>
 80140cc:	2b03      	cmp	r3, #3
 80140ce:	dc1c      	bgt.n	801410a <phpalI14443p3a_Sw_SetConfig+0x54>
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d002      	beq.n	80140da <phpalI14443p3a_Sw_SetConfig+0x24>
 80140d4:	2b02      	cmp	r3, #2
 80140d6:	d005      	beq.n	80140e4 <phpalI14443p3a_Sw_SetConfig+0x2e>
 80140d8:	e017      	b.n	801410a <phpalI14443p3a_Sw_SetConfig+0x54>
    {
    /* Emvco: To Define Running Mode for RdLib: Either Nfc, EMVCO, ISO */
    case PHPAL_I14443P3A_CONFIG_OPE_MODE:
    {
       pDataParams->bOpeMode = (uint8_t)wValue;
 80140da:	883b      	ldrh	r3, [r7, #0]
 80140dc:	b2da      	uxtb	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	751a      	strb	r2, [r3, #20]
       break;
 80140e2:	e016      	b.n	8014112 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_POLL_CMD:
    {
       pDataParams->bPollCmd = (uint8_t)wValue;
 80140e4:	883b      	ldrh	r3, [r7, #0]
 80140e6:	b2da      	uxtb	r2, r3
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	755a      	strb	r2, [r3, #21]
       break;
 80140ec:	e011      	b.n	8014112 <phpalI14443p3a_Sw_SetConfig+0x5c>
    }

    case PHPAL_I14443P3A_CONFIG_TIMEOUT_VALUE_US:
    {
       PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	883a      	ldrh	r2, [r7, #0]
 80140f4:	210d      	movs	r1, #13
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7fa f9ee 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80140fc:	4603      	mov	r3, r0
 80140fe:	81fb      	strh	r3, [r7, #14]
 8014100:	89fb      	ldrh	r3, [r7, #14]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d004      	beq.n	8014110 <phpalI14443p3a_Sw_SetConfig+0x5a>
 8014106:	89fb      	ldrh	r3, [r7, #14]
 8014108:	e004      	b.n	8014114 <phpalI14443p3a_Sw_SetConfig+0x5e>
                   wValue));
       break;
    }

    default:
       return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 801410a:	f240 3323 	movw	r3, #803	@ 0x323
 801410e:	e001      	b.n	8014114 <phpalI14443p3a_Sw_SetConfig+0x5e>
       break;
 8014110:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8014112:	2300      	movs	r3, #0

}
 8014114:	4618      	mov	r0, r3
 8014116:	3710      	adds	r7, #16
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <phpalI14443p3a_Sw_RequestA>:

phStatus_t phpalI14443p3a_Sw_RequestA(
                                      phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                      uint8_t * pAtqa
                                      )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_REQUEST_CMD, pAtqa);
 8014126:	683a      	ldr	r2, [r7, #0]
 8014128:	2126      	movs	r1, #38	@ 0x26
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 fc89 	bl	8014a42 <phpalI14443p3a_Sw_RequestAEx>
 8014130:	4603      	mov	r3, r0
}
 8014132:	4618      	mov	r0, r3
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <phpalI14443p3a_Sw_WakeUpA>:

phStatus_t phpalI14443p3a_Sw_WakeUpA(
                                     phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                     uint8_t * pAtqa
                                     )
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b082      	sub	sp, #8
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	6039      	str	r1, [r7, #0]
    return phpalI14443p3a_Sw_RequestAEx(pDataParams, PHPAL_I14443P3A_WAKEUP_CMD, pAtqa);
 8014144:	683a      	ldr	r2, [r7, #0]
 8014146:	2152      	movs	r1, #82	@ 0x52
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f000 fc7a 	bl	8014a42 <phpalI14443p3a_Sw_RequestAEx>
 801414e:	4603      	mov	r3, r0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <phpalI14443p3a_Sw_HaltA>:

phStatus_t phpalI14443p3a_Sw_HaltA(
                                   phpalI14443p3a_Sw_DataParams_t * pDataParams
                                   )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b088      	sub	sp, #32
 801415c:	af02      	add	r7, sp, #8
 801415e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014160:	2300      	movs	r3, #0
 8014162:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014164:	2300      	movs	r3, #0
 8014166:	817b      	strh	r3, [r7, #10]

    /* Set halt timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8014170:	210d      	movs	r1, #13
 8014172:	4618      	mov	r0, r3
 8014174:	f7fa f9b0 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014178:	4603      	mov	r3, r0
 801417a:	82fb      	strh	r3, [r7, #22]
 801417c:	8afb      	ldrh	r3, [r7, #22]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d001      	beq.n	8014186 <phpalI14443p3a_Sw_HaltA+0x2e>
 8014182:	8afb      	ldrh	r3, [r7, #22]
 8014184:	e03b      	b.n	80141fe <phpalI14443p3a_Sw_HaltA+0xa6>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_HALT_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	2201      	movs	r2, #1
 801418c:	2101      	movs	r1, #1
 801418e:	4618      	mov	r0, r3
 8014190:	f7fa f9a2 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014194:	4603      	mov	r3, r0
 8014196:	82fb      	strh	r3, [r7, #22]
 8014198:	8afb      	ldrh	r3, [r7, #22]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d001      	beq.n	80141a2 <phpalI14443p3a_Sw_HaltA+0x4a>
 801419e:	8afb      	ldrh	r3, [r7, #22]
 80141a0:	e02d      	b.n	80141fe <phpalI14443p3a_Sw_HaltA+0xa6>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	685b      	ldr	r3, [r3, #4]
 80141a6:	2201      	movs	r2, #1
 80141a8:	2102      	movs	r1, #2
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7fa f994 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80141b0:	4603      	mov	r3, r0
 80141b2:	82fb      	strh	r3, [r7, #22]
 80141b4:	8afb      	ldrh	r3, [r7, #22]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d001      	beq.n	80141be <phpalI14443p3a_Sw_HaltA+0x66>
 80141ba:	8afb      	ldrh	r3, [r7, #22]
 80141bc:	e01f      	b.n	80141fe <phpalI14443p3a_Sw_HaltA+0xa6>

    /* Send HltA command */
    cmd[0] = PHPAL_I14443P3A_HALT_CMD;
 80141be:	2350      	movs	r3, #80	@ 0x50
 80141c0:	743b      	strb	r3, [r7, #16]
    cmd[1] = 0x00;
 80141c2:	2300      	movs	r3, #0
 80141c4:	747b      	strb	r3, [r7, #17]

    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 2, &pResp, &wRespLength);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6858      	ldr	r0, [r3, #4]
 80141ca:	f107 0210 	add.w	r2, r7, #16
 80141ce:	f107 030a 	add.w	r3, r7, #10
 80141d2:	9301      	str	r3, [sp, #4]
 80141d4:	f107 030c 	add.w	r3, r7, #12
 80141d8:	9300      	str	r3, [sp, #0]
 80141da:	2302      	movs	r3, #2
 80141dc:	2100      	movs	r1, #0
 80141de:	f7f9 fdc3 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 80141e2:	4603      	mov	r3, r0
 80141e4:	82bb      	strh	r3, [r7, #20]

    switch (status & PH_ERR_MASK)
 80141e6:	8abb      	ldrh	r3, [r7, #20]
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d003      	beq.n	80141f6 <phpalI14443p3a_Sw_HaltA+0x9e>
 80141ee:	2b01      	cmp	r3, #1
 80141f0:	d104      	bne.n	80141fc <phpalI14443p3a_Sw_HaltA+0xa4>
    {
        /* HltA command should timeout -> success */
    case PH_ERR_IO_TIMEOUT:
        return PH_ERR_SUCCESS;
 80141f2:	2300      	movs	r3, #0
 80141f4:	e003      	b.n	80141fe <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return protocol error */
    case PH_ERR_SUCCESS:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80141f6:	f240 3306 	movw	r3, #774	@ 0x306
 80141fa:	e000      	b.n	80141fe <phpalI14443p3a_Sw_HaltA+0xa6>
        /* Return other errors */
    default:
        return status;
 80141fc:	8abb      	ldrh	r3, [r7, #20]
    }
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3718      	adds	r7, #24
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <phpalI14443p3a_Sw_Anticollision>:
    uint8_t * pUidIn,
    uint8_t bNvbUidIn,
    uint8_t * pUidOut,
    uint8_t * pNvbUidOut
    )
{
 8014206:	b580      	push	{r7, lr}
 8014208:	b08e      	sub	sp, #56	@ 0x38
 801420a:	af02      	add	r7, sp, #8
 801420c:	60f8      	str	r0, [r7, #12]
 801420e:	607a      	str	r2, [r7, #4]
 8014210:	461a      	mov	r2, r3
 8014212:	460b      	mov	r3, r1
 8014214:	72fb      	strb	r3, [r7, #11]
 8014216:	4613      	mov	r3, r2
 8014218:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bIsSelect;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[10];
    uint8_t *   PH_MEMLOC_REM pRcvBuffer = NULL;
 801421a:	2300      	movs	r3, #0
 801421c:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wSndBytes;
    uint16_t    PH_MEMLOC_REM wRcvBytes = 0;
 801421e:	2300      	movs	r3, #0
 8014220:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRcvBits = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	823b      	strh	r3, [r7, #16]
    uint8_t     PH_MEMLOC_REM bUidStartIndex;
    uint8_t     PH_MEMLOC_REM bBitCount;

    /* Check for invalid bNvbUidIn parameter */
    if ((bNvbUidIn > 0x40U) || ((bNvbUidIn & 0x0FU) > 0x07U))
 8014226:	7abb      	ldrb	r3, [r7, #10]
 8014228:	2b40      	cmp	r3, #64	@ 0x40
 801422a:	d804      	bhi.n	8014236 <phpalI14443p3a_Sw_Anticollision+0x30>
 801422c:	7abb      	ldrb	r3, [r7, #10]
 801422e:	f003 0308 	and.w	r3, r3, #8
 8014232:	2b00      	cmp	r3, #0
 8014234:	d002      	beq.n	801423c <phpalI14443p3a_Sw_Anticollision+0x36>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8014236:	f240 3321 	movw	r3, #801	@ 0x321
 801423a:	e217      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Check for invalid bCascadeIndex parameter */
    switch (bCascadeLevel)
 801423c:	7afb      	ldrb	r3, [r7, #11]
 801423e:	2b97      	cmp	r3, #151	@ 0x97
 8014240:	d00d      	beq.n	801425e <phpalI14443p3a_Sw_Anticollision+0x58>
 8014242:	2b97      	cmp	r3, #151	@ 0x97
 8014244:	dc08      	bgt.n	8014258 <phpalI14443p3a_Sw_Anticollision+0x52>
 8014246:	2b93      	cmp	r3, #147	@ 0x93
 8014248:	d002      	beq.n	8014250 <phpalI14443p3a_Sw_Anticollision+0x4a>
 801424a:	2b95      	cmp	r3, #149	@ 0x95
 801424c:	d007      	beq.n	801425e <phpalI14443p3a_Sw_Anticollision+0x58>
 801424e:	e003      	b.n	8014258 <phpalI14443p3a_Sw_Anticollision+0x52>
    {
    case PHPAL_I14443P3A_CASCADE_LEVEL_1:
        /* Reset UID length */
        pDataParams->bUidLength = 0;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2200      	movs	r2, #0
 8014254:	749a      	strb	r2, [r3, #18]
    case PHPAL_I14443P3A_CASCADE_LEVEL_2:
    case PHPAL_I14443P3A_CASCADE_LEVEL_3:
        break;
 8014256:	e002      	b.n	801425e <phpalI14443p3a_Sw_Anticollision+0x58>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 8014258:	f240 3321 	movw	r3, #801	@ 0x321
 801425c:	e206      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        break;
 801425e:	bf00      	nop
    }

    /* Reset UID complete flag */
    pDataParams->bUidComplete = 0;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	2200      	movs	r2, #0
 8014264:	74da      	strb	r2, [r3, #19]

    /* ANTICOLLISION: Disable CRC */
    if (bNvbUidIn != 0x40U)
 8014266:	7abb      	ldrb	r3, [r7, #10]
 8014268:	2b40      	cmp	r3, #64	@ 0x40
 801426a:	d01e      	beq.n	80142aa <phpalI14443p3a_Sw_Anticollision+0xa4>
    {
        bIsSelect = 0;
 801426c:	2300      	movs	r3, #0
 801426e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	2200      	movs	r2, #0
 8014278:	2101      	movs	r1, #1
 801427a:	4618      	mov	r0, r3
 801427c:	f7fa f92c 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014280:	4603      	mov	r3, r0
 8014282:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014284:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014286:	2b00      	cmp	r3, #0
 8014288:	d001      	beq.n	801428e <phpalI14443p3a_Sw_Anticollision+0x88>
 801428a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801428c:	e1ee      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	2200      	movs	r2, #0
 8014294:	2102      	movs	r1, #2
 8014296:	4618      	mov	r0, r3
 8014298:	f7fa f91e 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801429c:	4603      	mov	r3, r0
 801429e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80142a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d020      	beq.n	80142e8 <phpalI14443p3a_Sw_Anticollision+0xe2>
 80142a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142a8:	e1e0      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    /* SELECT: Enable CRC */
    else
    {
        bIsSelect = 1;
 80142aa:	2301      	movs	r3, #1
 80142ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_ON));
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	2201      	movs	r2, #1
 80142b6:	2101      	movs	r1, #1
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fa f90d 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80142be:	4603      	mov	r3, r0
 80142c0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80142c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d001      	beq.n	80142cc <phpalI14443p3a_Sw_Anticollision+0xc6>
 80142c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142ca:	e1cf      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_ON));
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	2201      	movs	r2, #1
 80142d2:	2102      	movs	r1, #2
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fa f8ff 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80142da:	4603      	mov	r3, r0
 80142dc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80142de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d001      	beq.n	80142e8 <phpalI14443p3a_Sw_Anticollision+0xe2>
 80142e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80142e6:	e1c1      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
    }

    /* Init. command buffer */
    bCmdBuffer[0] = bCascadeLevel;
 80142e8:	7afb      	ldrb	r3, [r7, #11]
 80142ea:	763b      	strb	r3, [r7, #24]
    (void)memset(&bCmdBuffer[2], 0x00, 5);
 80142ec:	f107 0318 	add.w	r3, r7, #24
 80142f0:	3302      	adds	r3, #2
 80142f2:	2205      	movs	r2, #5
 80142f4:	2100      	movs	r1, #0
 80142f6:	4618      	mov	r0, r3
 80142f8:	f00a fe16 	bl	801ef28 <memset>

    /* Copy valid UID bits */
    wSndBytes = (uint16_t)(((((uint16_t)bNvbUidIn) & 0xF0U) >> 4U) + (((bNvbUidIn & 0x0FU) != 0U) ? 1U : 0U));
 80142fc:	7abb      	ldrb	r3, [r7, #10]
 80142fe:	091b      	lsrs	r3, r3, #4
 8014300:	b2db      	uxtb	r3, r3
 8014302:	461a      	mov	r2, r3
 8014304:	7abb      	ldrb	r3, [r7, #10]
 8014306:	f003 030f 	and.w	r3, r3, #15
 801430a:	2b00      	cmp	r3, #0
 801430c:	d001      	beq.n	8014312 <phpalI14443p3a_Sw_Anticollision+0x10c>
 801430e:	2301      	movs	r3, #1
 8014310:	e000      	b.n	8014314 <phpalI14443p3a_Sw_Anticollision+0x10e>
 8014312:	2300      	movs	r3, #0
 8014314:	4413      	add	r3, r2
 8014316:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    (void)memcpy(&bCmdBuffer[2], pUidIn, (size_t)wSndBytes);
 8014318:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801431a:	f107 0318 	add.w	r3, r7, #24
 801431e:	3302      	adds	r3, #2
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	f00a fe7f 	bl	801f026 <memcpy>
    wSndBytes += 2U;
 8014328:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801432a:	3302      	adds	r3, #2
 801432c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /* SELECT: Add BCC */
    if (0U != (bIsSelect))
 801432e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014332:	2b00      	cmp	r3, #0
 8014334:	d016      	beq.n	8014364 <phpalI14443p3a_Sw_Anticollision+0x15e>
    {
        bNvbUidIn = 0x50;
 8014336:	2350      	movs	r3, #80	@ 0x50
 8014338:	72bb      	strb	r3, [r7, #10]
        bCmdBuffer[6] = pUidIn[0] ^ pUidIn[1] ^ pUidIn[2] ^ pUidIn[3];
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	781a      	ldrb	r2, [r3, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3301      	adds	r3, #1
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	4053      	eors	r3, r2
 8014346:	b2da      	uxtb	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	3302      	adds	r3, #2
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	4053      	eors	r3, r2
 8014350:	b2da      	uxtb	r2, r3
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	3303      	adds	r3, #3
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	4053      	eors	r3, r2
 801435a:	b2db      	uxtb	r3, r3
 801435c:	77bb      	strb	r3, [r7, #30]
        ++wSndBytes;
 801435e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014360:	3301      	adds	r3, #1
 8014362:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /* Encode NVB */
    bCmdBuffer[1] = bNvbUidIn + 0x20U;
 8014364:	7abb      	ldrb	r3, [r7, #10]
 8014366:	3320      	adds	r3, #32
 8014368:	b2db      	uxtb	r3, r3
 801436a:	767b      	strb	r3, [r7, #25]

    /* Adjust Rx-Align */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, (((uint16_t)bNvbUidIn) & 0x07U)));
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	6858      	ldr	r0, [r3, #4]
 8014370:	7abb      	ldrb	r3, [r7, #10]
 8014372:	b29b      	uxth	r3, r3
 8014374:	f003 0307 	and.w	r3, r3, #7
 8014378:	b29b      	uxth	r3, r3
 801437a:	461a      	mov	r2, r3
 801437c:	2105      	movs	r1, #5
 801437e:	f7fa f8ab 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014382:	4603      	mov	r3, r0
 8014384:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014386:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014388:	2b00      	cmp	r3, #0
 801438a:	d001      	beq.n	8014390 <phpalI14443p3a_Sw_Anticollision+0x18a>
 801438c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801438e:	e16d      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Adjust TxBits */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, (((uint16_t)bNvbUidIn) & 0x07U)));
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	6858      	ldr	r0, [r3, #4]
 8014394:	7abb      	ldrb	r3, [r7, #10]
 8014396:	b29b      	uxth	r3, r3
 8014398:	f003 0307 	and.w	r3, r3, #7
 801439c:	b29b      	uxth	r3, r3
 801439e:	461a      	mov	r2, r3
 80143a0:	2103      	movs	r1, #3
 80143a2:	f7fa f899 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80143a6:	4603      	mov	r3, r0
 80143a8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80143aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d001      	beq.n	80143b4 <phpalI14443p3a_Sw_Anticollision+0x1ae>
 80143b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80143b2:	e15b      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Send the ANTICOLLISION command */
    status = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, bCmdBuffer, wSndBytes, &pRcvBuffer, &wRcvBytes);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	6858      	ldr	r0, [r3, #4]
 80143b8:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80143ba:	f107 0218 	add.w	r2, r7, #24
 80143be:	f107 0312 	add.w	r3, r7, #18
 80143c2:	9301      	str	r3, [sp, #4]
 80143c4:	f107 0314 	add.w	r3, r7, #20
 80143c8:	9300      	str	r3, [sp, #0]
 80143ca:	460b      	mov	r3, r1
 80143cc:	2100      	movs	r1, #0
 80143ce:	f7f9 fccb 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 80143d2:	4603      	mov	r3, r0
 80143d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset RxAlignment */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXALIGN, 0));
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	2105      	movs	r1, #5
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fa f87a 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80143e4:	4603      	mov	r3, r0
 80143e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80143e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d001      	beq.n	80143f2 <phpalI14443p3a_Sw_Anticollision+0x1ec>
 80143ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80143f0:	e13c      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>

    /* Check status, Collision is allowed for anti-collision command. */
    if ((bIsSelect == 0U) && ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR))
 80143f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d112      	bne.n	8014420 <phpalI14443p3a_Sw_Anticollision+0x21a>
 80143fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	2b03      	cmp	r3, #3
 8014400:	d10e      	bne.n	8014420 <phpalI14443p3a_Sw_Anticollision+0x21a>
    {
        /* Retrieve number of valid bits of last byte */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXLASTBITS, &wRcvBits));
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	f107 0210 	add.w	r2, r7, #16
 801440a:	2104      	movs	r1, #4
 801440c:	4618      	mov	r0, r3
 801440e:	f7fb fcb1 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8014412:	4603      	mov	r3, r0
 8014414:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014416:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014418:	2b00      	cmp	r3, #0
 801441a:	d00f      	beq.n	801443c <phpalI14443p3a_Sw_Anticollision+0x236>
 801441c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801441e:	e125      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
    }
    else
    {
        /* Check for protocol error */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8014420:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014422:	b2db      	uxtb	r3, r3
 8014424:	2b73      	cmp	r3, #115	@ 0x73
 8014426:	d102      	bne.n	801442e <phpalI14443p3a_Sw_Anticollision+0x228>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014428:	f240 3306 	movw	r3, #774	@ 0x306
 801442c:	e11e      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        }
        /* Return on other errors */
        else
        {
            PH_CHECK_SUCCESS(status);
 801442e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014430:	2b00      	cmp	r3, #0
 8014432:	d001      	beq.n	8014438 <phpalI14443p3a_Sw_Anticollision+0x232>
 8014434:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014436:	e119      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* whole byte valid */
        wRcvBits = 0;
 8014438:	2300      	movs	r3, #0
 801443a:	823b      	strh	r3, [r7, #16]
    }

    /* Add received data to UID */
    if (bIsSelect == 0U)
 801443c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014440:	2b00      	cmp	r3, #0
 8014442:	f040 80ae 	bne.w	80145a2 <phpalI14443p3a_Sw_Anticollision+0x39c>
    {
        /* Retrieve byte-starting-index of received Uid */
        bUidStartIndex = (uint8_t)((bNvbUidIn & 0xF0U) >> 4U);
 8014446:	7abb      	ldrb	r3, [r7, #10]
 8014448:	091b      	lsrs	r3, r3, #4
 801444a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        /* Add new bitcount */
        bBitCount = (uint8_t)(((((uint16_t)bNvbUidIn) >> 4U) << 3U) + (wRcvBytes << 3U) + wRcvBits);
 801444e:	7abb      	ldrb	r3, [r7, #10]
 8014450:	091b      	lsrs	r3, r3, #4
 8014452:	b2da      	uxtb	r2, r3
 8014454:	8a7b      	ldrh	r3, [r7, #18]
 8014456:	b2db      	uxtb	r3, r3
 8014458:	4413      	add	r3, r2
 801445a:	b2db      	uxtb	r3, r3
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	b2da      	uxtb	r2, r3
 8014460:	8a3b      	ldrh	r3, [r7, #16]
 8014462:	b2db      	uxtb	r3, r3
 8014464:	4413      	add	r3, r2
 8014466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* Last incomplete byte is added to wRcvBytes, so remove that again */
        if (wRcvBits > 0U)
 801446a:	8a3b      	ldrh	r3, [r7, #16]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d004      	beq.n	801447a <phpalI14443p3a_Sw_Anticollision+0x274>
        {
            bBitCount -= 8U;
 8014470:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014474:	3b08      	subs	r3, #8
 8014476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Convert bitcount to NVB format */
        *pNvbUidOut = (uint8_t)(((bBitCount >> 3U) << 4U) + (bBitCount & 0x07U));
 801447a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801447e:	08db      	lsrs	r3, r3, #3
 8014480:	b2db      	uxtb	r3, r3
 8014482:	011b      	lsls	r3, r3, #4
 8014484:	b2da      	uxtb	r2, r3
 8014486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801448a:	f003 0307 	and.w	r3, r3, #7
 801448e:	b2db      	uxtb	r3, r3
 8014490:	4413      	add	r3, r2
 8014492:	b2da      	uxtb	r2, r3
 8014494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014496:	701a      	strb	r2, [r3, #0]

        /* We do not tolerate more than (5u * 8 =)40 bits because it would lead to buffer overflows */
        if (*pNvbUidOut > 0x50U)
 8014498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	2b50      	cmp	r3, #80	@ 0x50
 801449e:	d902      	bls.n	80144a6 <phpalI14443p3a_Sw_Anticollision+0x2a0>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80144a0:	f240 3306 	movw	r3, #774	@ 0x306
 80144a4:	e0e2      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* After successfull reception, the UID must be exact 40 bits */
        if (((status & PH_ERR_MASK) == PH_ERR_SUCCESS) && (*pNvbUidOut != 0x50U))
 80144a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d106      	bne.n	80144bc <phpalI14443p3a_Sw_Anticollision+0x2b6>
 80144ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	2b50      	cmp	r3, #80	@ 0x50
 80144b4:	d002      	beq.n	80144bc <phpalI14443p3a_Sw_Anticollision+0x2b6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80144b6:	f240 3306 	movw	r3, #774	@ 0x306
 80144ba:	e0d7      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Copy received bytes to uid */
        if (wRcvBytes > 0U)
 80144bc:	8a7b      	ldrh	r3, [r7, #18]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d041      	beq.n	8014546 <phpalI14443p3a_Sw_Anticollision+0x340>
        {
            /* Incomplete byte sent: Merge Rx-Aligned first byte */
            if (0U != (bNvbUidIn & 0x07U))
 80144c2:	7abb      	ldrb	r3, [r7, #10]
 80144c4:	f003 0307 	and.w	r3, r3, #7
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d026      	beq.n	801451a <phpalI14443p3a_Sw_Anticollision+0x314>
            {
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 80144cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80144d0:	3302      	adds	r3, #2
 80144d2:	3330      	adds	r3, #48	@ 0x30
 80144d4:	443b      	add	r3, r7
 80144d6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80144da:	7abb      	ldrb	r3, [r7, #10]
 80144dc:	f003 0307 	and.w	r3, r3, #7
 80144e0:	2101      	movs	r1, #1
 80144e2:	fa01 f303 	lsl.w	r3, r1, r3
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	3b01      	subs	r3, #1
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	4013      	ands	r3, r2
 80144ee:	b2d9      	uxtb	r1, r3
                                                 (pRcvBuffer[0] & (uint8_t)(0xFFU << (bNvbUidIn & 0x07U)));
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	781a      	ldrb	r2, [r3, #0]
 80144f4:	7abb      	ldrb	r3, [r7, #10]
 80144f6:	f003 0307 	and.w	r3, r3, #7
 80144fa:	20ff      	movs	r0, #255	@ 0xff
 80144fc:	fa00 f303 	lsl.w	r3, r0, r3
 8014500:	b2db      	uxtb	r3, r3
                bCmdBuffer[2U + bUidStartIndex] = (bCmdBuffer[2U + bUidStartIndex] & (uint8_t)((1U << (bNvbUidIn & 0x07U)) - 1U)) |
 8014502:	4013      	ands	r3, r2
 8014504:	b2da      	uxtb	r2, r3
 8014506:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801450a:	3302      	adds	r3, #2
 801450c:	430a      	orrs	r2, r1
 801450e:	b2d2      	uxtb	r2, r2
 8014510:	3330      	adds	r3, #48	@ 0x30
 8014512:	443b      	add	r3, r7
 8014514:	f803 2c18 	strb.w	r2, [r3, #-24]
 8014518:	e008      	b.n	801452c <phpalI14443p3a_Sw_Anticollision+0x326>
            }
            /* Else just copy the first byte */
            else
            {
                bCmdBuffer[2U + bUidStartIndex] = pRcvBuffer[0];
 801451a:	697a      	ldr	r2, [r7, #20]
 801451c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014520:	3302      	adds	r3, #2
 8014522:	7812      	ldrb	r2, [r2, #0]
 8014524:	3330      	adds	r3, #48	@ 0x30
 8014526:	443b      	add	r3, r7
 8014528:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            /* Add the rest of the uid bytes */
            (void)memcpy(&bCmdBuffer[2U + bUidStartIndex + 1U], &pRcvBuffer[1], (size_t)(((uint32_t)wRcvBytes) - 1u));
 801452c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014530:	3303      	adds	r3, #3
 8014532:	f107 0218 	add.w	r2, r7, #24
 8014536:	18d0      	adds	r0, r2, r3
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	3301      	adds	r3, #1
 801453c:	8a7a      	ldrh	r2, [r7, #18]
 801453e:	3a01      	subs	r2, #1
 8014540:	4619      	mov	r1, r3
 8014542:	f00a fd70 	bl	801f026 <memcpy>
        }

        /* Anticollision finished */
        if (*pNvbUidOut > 0x40U)
 8014546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	2b40      	cmp	r3, #64	@ 0x40
 801454c:	d91d      	bls.n	801458a <phpalI14443p3a_Sw_Anticollision+0x384>
        {
            /* Collision in BCC byte can never happen */
            if (*pNvbUidOut < 0x50U)
 801454e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	2b4f      	cmp	r3, #79	@ 0x4f
 8014554:	d802      	bhi.n	801455c <phpalI14443p3a_Sw_Anticollision+0x356>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014556:	f240 3305 	movw	r3, #773	@ 0x305
 801455a:	e087      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Remove BCC from NvbUidOut */
            *pNvbUidOut = 0x40;
 801455c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801455e:	2240      	movs	r2, #64	@ 0x40
 8014560:	701a      	strb	r2, [r3, #0]
            --wRcvBytes;
 8014562:	8a7b      	ldrh	r3, [r7, #18]
 8014564:	3b01      	subs	r3, #1
 8014566:	b29b      	uxth	r3, r3
 8014568:	827b      	strh	r3, [r7, #18]

            /* BCC Check */
            if ((bCmdBuffer[2] ^ bCmdBuffer[3] ^ bCmdBuffer[4] ^ bCmdBuffer[5]) != bCmdBuffer[6])
 801456a:	7eba      	ldrb	r2, [r7, #26]
 801456c:	7efb      	ldrb	r3, [r7, #27]
 801456e:	4053      	eors	r3, r2
 8014570:	b2da      	uxtb	r2, r3
 8014572:	7f3b      	ldrb	r3, [r7, #28]
 8014574:	4053      	eors	r3, r2
 8014576:	b2da      	uxtb	r2, r3
 8014578:	7f7b      	ldrb	r3, [r7, #29]
 801457a:	4053      	eors	r3, r2
 801457c:	b2da      	uxtb	r2, r3
 801457e:	7fbb      	ldrb	r3, [r7, #30]
 8014580:	429a      	cmp	r2, r3
 8014582:	d002      	beq.n	801458a <phpalI14443p3a_Sw_Anticollision+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_FRAMING_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014584:	f240 3305 	movw	r3, #773	@ 0x305
 8014588:	e070      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
            }
        }

        /* Copy UID */
        (void)memcpy(pUidOut, &bCmdBuffer[2], (size_t)(bUidStartIndex + ((uint32_t)wRcvBytes)));
 801458a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801458e:	8a7a      	ldrh	r2, [r7, #18]
 8014590:	441a      	add	r2, r3
 8014592:	f107 0318 	add.w	r3, r7, #24
 8014596:	3302      	adds	r3, #2
 8014598:	4619      	mov	r1, r3
 801459a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801459c:	f00a fd43 	bl	801f026 <memcpy>
 80145a0:	e054      	b.n	801464c <phpalI14443p3a_Sw_Anticollision+0x446>
    }
    /* Return SAK instead of the UID */
    else
    {
        /* only one byte allowed */
        if (wRcvBytes != 1U)
 80145a2:	8a7b      	ldrh	r3, [r7, #18]
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	d002      	beq.n	80145ae <phpalI14443p3a_Sw_Anticollision+0x3a8>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80145a8:	f240 3306 	movw	r3, #774	@ 0x306
 80145ac:	e05e      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
        }

        /* Cascade Bit is set */
        if (0U != (pRcvBuffer[0] & 0x04U))
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	f003 0304 	and.w	r3, r3, #4
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d01e      	beq.n	80145f8 <phpalI14443p3a_Sw_Anticollision+0x3f2>
        {
            /* If additional cascade levels are impossible -> protocol error */
            if (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_3)
 80145ba:	7afb      	ldrb	r3, [r7, #11]
 80145bc:	2b97      	cmp	r3, #151	@ 0x97
 80145be:	d102      	bne.n	80145c6 <phpalI14443p3a_Sw_Anticollision+0x3c0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80145c0:	f240 3306 	movw	r3, #774	@ 0x306
 80145c4:	e052      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] != PHPAL_I14443P3A_CASCADE_TAG)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	781b      	ldrb	r3, [r3, #0]
 80145ca:	2b88      	cmp	r3, #136	@ 0x88
 80145cc:	d002      	beq.n	80145d4 <phpalI14443p3a_Sw_Anticollision+0x3ce>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 80145ce:	f240 3306 	movw	r3, #774	@ 0x306
 80145d2:	e04b      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Ignore Cascade Tag */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[1], 3);
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	7c9b      	ldrb	r3, [r3, #18]
 80145d8:	3308      	adds	r3, #8
 80145da:	68fa      	ldr	r2, [r7, #12]
 80145dc:	18d0      	adds	r0, r2, r3
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	3301      	adds	r3, #1
 80145e2:	2203      	movs	r2, #3
 80145e4:	4619      	mov	r1, r3
 80145e6:	f00a fd1e 	bl	801f026 <memcpy>

            /* Increment Uid length */
            pDataParams->bUidLength += 3U;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	7c9b      	ldrb	r3, [r3, #18]
 80145ee:	3303      	adds	r3, #3
 80145f0:	b2da      	uxtb	r2, r3
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	749a      	strb	r2, [r3, #18]
 80145f6:	e025      	b.n	8014644 <phpalI14443p3a_Sw_Anticollision+0x43e>
        }
        /* Cascade Bit is cleared -> no further cascade levels */
        else
        {
            /* Cascade tag does not match -> protocol error */
            if (pUidIn[0] == PHPAL_I14443P3A_CASCADE_TAG)
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b88      	cmp	r3, #136	@ 0x88
 80145fe:	d102      	bne.n	8014606 <phpalI14443p3a_Sw_Anticollision+0x400>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014600:	f240 3306 	movw	r3, #774	@ 0x306
 8014604:	e032      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
            }

            /* Copy all uid bytes except BCC */
            (void)memcpy(&pDataParams->abUid[pDataParams->bUidLength], &pUidIn[0], 4);
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	7c9b      	ldrb	r3, [r3, #18]
 801460a:	3308      	adds	r3, #8
 801460c:	68fa      	ldr	r2, [r7, #12]
 801460e:	4413      	add	r3, r2
 8014610:	687a      	ldr	r2, [r7, #4]
 8014612:	6812      	ldr	r2, [r2, #0]
 8014614:	601a      	str	r2, [r3, #0]

            /* Increment Uid length */
            pDataParams->bUidLength += 4U;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	7c9b      	ldrb	r3, [r3, #18]
 801461a:	3304      	adds	r3, #4
 801461c:	b2da      	uxtb	r2, r3
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	749a      	strb	r2, [r3, #18]

            /* Set UID complete flag */
            pDataParams->bUidComplete = 1;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	2201      	movs	r2, #1
 8014626:	74da      	strb	r2, [r3, #19]

            /* set default card timeout */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	220a      	movs	r2, #10
 801462e:	210e      	movs	r1, #14
 8014630:	4618      	mov	r0, r3
 8014632:	f7f9 ff51 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014636:	4603      	mov	r3, r0
 8014638:	853b      	strh	r3, [r7, #40]	@ 0x28
 801463a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801463c:	2b00      	cmp	r3, #0
 801463e:	d001      	beq.n	8014644 <phpalI14443p3a_Sw_Anticollision+0x43e>
 8014640:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014642:	e013      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                PHPAL_I14443P3A_TIMEOUT_DEFAULT_MS));
        }

        /* Copy SAK */
        pUidOut[0] = pRcvBuffer[0];
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	781a      	ldrb	r2, [r3, #0]
 8014648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801464a:	701a      	strb	r2, [r3, #0]
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P3A);
 801464c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00b      	beq.n	801466a <phpalI14443p3a_Sw_Anticollision+0x464>
 8014652:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014654:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014658:	2b00      	cmp	r3, #0
 801465a:	d106      	bne.n	801466a <phpalI14443p3a_Sw_Anticollision+0x464>
 801465c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801465e:	b2db      	uxtb	r3, r3
 8014660:	b29b      	uxth	r3, r3
 8014662:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8014666:	b29b      	uxth	r3, r3
 8014668:	e000      	b.n	801466c <phpalI14443p3a_Sw_Anticollision+0x466>
 801466a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 801466c:	4618      	mov	r0, r3
 801466e:	3730      	adds	r7, #48	@ 0x30
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <phpalI14443p3a_Sw_Select>:
                                    phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                    uint8_t bCascadeLevel,
                                    uint8_t * pUidIn,
                                    uint8_t * pSak
                                    )
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b088      	sub	sp, #32
 8014678:	af02      	add	r7, sp, #8
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	607a      	str	r2, [r7, #4]
 801467e:	603b      	str	r3, [r7, #0]
 8014680:	460b      	mov	r3, r1
 8014682:	72fb      	strb	r3, [r7, #11]
    uint8_t PH_MEMLOC_REM bDummy;
    return phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, pUidIn, 0x40, pSak, &bDummy);
 8014684:	7af9      	ldrb	r1, [r7, #11]
 8014686:	f107 0317 	add.w	r3, r7, #23
 801468a:	9301      	str	r3, [sp, #4]
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	9300      	str	r3, [sp, #0]
 8014690:	2340      	movs	r3, #64	@ 0x40
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f7ff fdb6 	bl	8014206 <phpalI14443p3a_Sw_Anticollision>
 801469a:	4603      	mov	r3, r0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3718      	adds	r7, #24
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <phpalI14443p3a_Sw_ActivateCard>:
    uint8_t * pUidOut,
    uint8_t * pLenUidOut,
    uint8_t * pSak,
    uint8_t * pMoreCardsAvailable
    )
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08a      	sub	sp, #40	@ 0x28
 80146a8:	af02      	add	r7, sp, #8
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	60b9      	str	r1, [r7, #8]
 80146ae:	603b      	str	r3, [r7, #0]
 80146b0:	4613      	mov	r3, r2
 80146b2:	71fb      	strb	r3, [r7, #7]
    phStatus_t  PH_MEMLOC_REM status = PH_ERR_SUCCESS;
 80146b4:	2300      	movs	r3, #0
 80146b6:	83fb      	strh	r3, [r7, #30]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCascadeLevel;
    uint8_t     PH_MEMLOC_COUNT bCascadeIndex;
    uint8_t     PH_MEMLOC_REM bUidIndex;
    uint8_t     PH_MEMLOC_REM bNvbUid;
    uint8_t     PH_MEMLOC_REM bAtqa[2] = {0};
 80146b8:	2300      	movs	r3, #0
 80146ba:	82bb      	strh	r3, [r7, #20]
    uint8_t     PH_MEMLOC_REM bUid[4];
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bCollDetected = PH_OFF;
 80146bc:	2300      	movs	r3, #0
 80146be:	75fb      	strb	r3, [r7, #23]

    bRetryCount = 0;
 80146c0:	2300      	movs	r3, #0
 80146c2:	763b      	strb	r3, [r7, #24]

    /* Parameter check */
    if ((bLenUidIn != 0U) &&
 80146c4:	79fb      	ldrb	r3, [r7, #7]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d00f      	beq.n	80146ea <phpalI14443p3a_Sw_ActivateCard+0x46>
 80146ca:	79fb      	ldrb	r3, [r7, #7]
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d00c      	beq.n	80146ea <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 4U) &&
 80146d0:	79fb      	ldrb	r3, [r7, #7]
 80146d2:	2b07      	cmp	r3, #7
 80146d4:	d009      	beq.n	80146ea <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 7U) &&
 80146d6:	79fb      	ldrb	r3, [r7, #7]
 80146d8:	2b0a      	cmp	r3, #10
 80146da:	d006      	beq.n	80146ea <phpalI14443p3a_Sw_ActivateCard+0x46>
        (bLenUidIn != 10U)&&
        (pDataParams->bPollCmd != PHPAL_I14443P3A_USE_WUPA))
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	7d5b      	ldrb	r3, [r3, #21]
        (bLenUidIn != 10U)&&
 80146e0:	2b01      	cmp	r3, #1
 80146e2:	d002      	beq.n	80146ea <phpalI14443p3a_Sw_ActivateCard+0x46>
    {
        /* Given UID length is invalid, return error */
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3A);
 80146e4:	f240 3321 	movw	r3, #801	@ 0x321
 80146e8:	e18c      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }
    /* initialise to zero, for VS studio warning */
    bCascadeLevel = 0;
 80146ea:	2300      	movs	r3, #0
 80146ec:	76fb      	strb	r3, [r7, #27]
    /* Clear Uid */
    (void)memset(bUid, 0x00, 4);
 80146ee:	f107 0310 	add.w	r3, r7, #16
 80146f2:	2204      	movs	r2, #4
 80146f4:	2100      	movs	r1, #0
 80146f6:	4618      	mov	r0, r3
 80146f8:	f00a fc16 	bl	801ef28 <memset>

    /* Clear Uid lengths */
    bUidIndex = 0;
 80146fc:	2300      	movs	r3, #0
 80146fe:	767b      	strb	r3, [r7, #25]
    *pLenUidOut = 0;
 8014700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014702:	2200      	movs	r2, #0
 8014704:	701a      	strb	r2, [r3, #0]

    /* Clear the more cards available flag */
    *pMoreCardsAvailable = PH_OFF;
 8014706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014708:	2200      	movs	r2, #0
 801470a:	701a      	strb	r2, [r3, #0]

    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	7d1b      	ldrb	r3, [r3, #20]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d12a      	bne.n	801476a <phpalI14443p3a_Sw_ActivateCard+0xc6>
    {
        status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 8014714:	f107 0314 	add.w	r3, r7, #20
 8014718:	4619      	mov	r1, r3
 801471a:	68f8      	ldr	r0, [r7, #12]
 801471c:	f7ff fd0d 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 8014720:	4603      	mov	r3, r0
 8014722:	83fb      	strh	r3, [r7, #30]
        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014724:	e019      	b.n	801475a <phpalI14443p3a_Sw_ActivateCard+0xb6>
        {
            bRetryCount++;
 8014726:	7e3b      	ldrb	r3, [r7, #24]
 8014728:	3301      	adds	r3, #1
 801472a:	763b      	strb	r3, [r7, #24]
            /* Wait for at least Tmin retransmission delay. */
            PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014734:	2100      	movs	r1, #0
 8014736:	4618      	mov	r0, r3
 8014738:	f7f9 fe12 	bl	800e360 <phhalHw_Pn5180_Wait>
 801473c:	4603      	mov	r3, r0
 801473e:	83fb      	strh	r3, [r7, #30]
 8014740:	8bfb      	ldrh	r3, [r7, #30]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d001      	beq.n	801474a <phpalI14443p3a_Sw_ActivateCard+0xa6>
 8014746:	8bfb      	ldrh	r3, [r7, #30]
 8014748:	e15c      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
                pDataParams->pHalDataParams,
                PHHAL_HW_TIME_MICROSECONDS,
                PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801474a:	f107 0314 	add.w	r3, r7, #20
 801474e:	4619      	mov	r1, r3
 8014750:	68f8      	ldr	r0, [r7, #12]
 8014752:	f7ff fcf2 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 8014756:	4603      	mov	r3, r0
 8014758:	83fb      	strh	r3, [r7, #30]
        while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801475a:	8bfb      	ldrh	r3, [r7, #30]
 801475c:	b2db      	uxtb	r3, r3
 801475e:	2b01      	cmp	r3, #1
 8014760:	d128      	bne.n	80147b4 <phpalI14443p3a_Sw_ActivateCard+0x110>
 8014762:	7e3b      	ldrb	r3, [r7, #24]
 8014764:	2b01      	cmp	r3, #1
 8014766:	d9de      	bls.n	8014726 <phpalI14443p3a_Sw_ActivateCard+0x82>
 8014768:	e024      	b.n	80147b4 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
    }
    else
    {
        if( (pDataParams->bOpeMode == RD_LIB_MODE_ISO) && (pDataParams->bPollCmd == PHPAL_I14443P3A_USE_WUPA))
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	7d1b      	ldrb	r3, [r3, #20]
 801476e:	2b03      	cmp	r3, #3
 8014770:	d10c      	bne.n	801478c <phpalI14443p3a_Sw_ActivateCard+0xe8>
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	7d5b      	ldrb	r3, [r3, #21]
 8014776:	2b01      	cmp	r3, #1
 8014778:	d108      	bne.n	801478c <phpalI14443p3a_Sw_ActivateCard+0xe8>
        {
            status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 801477a:	f107 0314 	add.w	r3, r7, #20
 801477e:	4619      	mov	r1, r3
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	f7ff fcda 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 8014786:	4603      	mov	r3, r0
 8014788:	83fb      	strh	r3, [r7, #30]
 801478a:	e013      	b.n	80147b4 <phpalI14443p3a_Sw_ActivateCard+0x110>
        }
        else
        {
            if (bLenUidIn == 0U)
 801478c:	79fb      	ldrb	r3, [r7, #7]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d108      	bne.n	80147a4 <phpalI14443p3a_Sw_ActivateCard+0x100>
            {
                status = phpalI14443p3a_Sw_RequestA(pDataParams, bAtqa);
 8014792:	f107 0314 	add.w	r3, r7, #20
 8014796:	4619      	mov	r1, r3
 8014798:	68f8      	ldr	r0, [r7, #12]
 801479a:	f7ff fcbf 	bl	801411c <phpalI14443p3a_Sw_RequestA>
 801479e:	4603      	mov	r3, r0
 80147a0:	83fb      	strh	r3, [r7, #30]
 80147a2:	e007      	b.n	80147b4 <phpalI14443p3a_Sw_ActivateCard+0x110>
            }
            /* UidIn is given -> WupA */
            else
            {
                status = phpalI14443p3a_Sw_WakeUpA(pDataParams, bAtqa);
 80147a4:	f107 0314 	add.w	r3, r7, #20
 80147a8:	4619      	mov	r1, r3
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f7ff fcc5 	bl	801413a <phpalI14443p3a_Sw_WakeUpA>
 80147b0:	4603      	mov	r3, r0
 80147b2:	83fb      	strh	r3, [r7, #30]
            }
        }
    }

    /* Collision error may happen */
    if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80147b4:	8bfb      	ldrh	r3, [r7, #30]
 80147b6:	b2db      	uxtb	r3, r3
 80147b8:	2b03      	cmp	r3, #3
 80147ba:	d10b      	bne.n	80147d4 <phpalI14443p3a_Sw_ActivateCard+0x130>
    {
        /* Emvco: case_id TA304_XY */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	7d1b      	ldrb	r3, [r3, #20]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d101      	bne.n	80147c8 <phpalI14443p3a_Sw_ActivateCard+0x124>
        {
            return status;
 80147c4:	8bfb      	ldrh	r3, [r7, #30]
 80147c6:	e11d      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
        }
        bCollDetected = PH_ON;
 80147c8:	2301      	movs	r3, #1
 80147ca:	75fb      	strb	r3, [r7, #23]

        /* Set the more cards available flag */
        *pMoreCardsAvailable = PH_ON;
 80147cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ce:	2201      	movs	r2, #1
 80147d0:	701a      	strb	r2, [r3, #0]
 80147d2:	e004      	b.n	80147de <phpalI14443p3a_Sw_ActivateCard+0x13a>
    }
    /* Status check */
    else
    {
        PH_CHECK_SUCCESS(status);
 80147d4:	8bfb      	ldrh	r3, [r7, #30]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d001      	beq.n	80147de <phpalI14443p3a_Sw_ActivateCard+0x13a>
 80147da:	8bfb      	ldrh	r3, [r7, #30]
 80147dc:	e112      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
    }

    /* Go through all cascade levels */
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80147de:	2300      	movs	r3, #0
 80147e0:	76bb      	strb	r3, [r7, #26]
 80147e2:	e0fb      	b.n	80149dc <phpalI14443p3a_Sw_ActivateCard+0x338>
    {
        /* Set cascade level tags */
        switch (bCascadeIndex)
 80147e4:	7ebb      	ldrb	r3, [r7, #26]
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d00c      	beq.n	8014804 <phpalI14443p3a_Sw_ActivateCard+0x160>
 80147ea:	2b02      	cmp	r3, #2
 80147ec:	dc0d      	bgt.n	801480a <phpalI14443p3a_Sw_ActivateCard+0x166>
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d002      	beq.n	80147f8 <phpalI14443p3a_Sw_ActivateCard+0x154>
 80147f2:	2b01      	cmp	r3, #1
 80147f4:	d003      	beq.n	80147fe <phpalI14443p3a_Sw_ActivateCard+0x15a>
 80147f6:	e008      	b.n	801480a <phpalI14443p3a_Sw_ActivateCard+0x166>
        {
        case 0:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_1;
 80147f8:	2393      	movs	r3, #147	@ 0x93
 80147fa:	76fb      	strb	r3, [r7, #27]
            break;
 80147fc:	e005      	b.n	801480a <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 1:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_2;
 80147fe:	2395      	movs	r3, #149	@ 0x95
 8014800:	76fb      	strb	r3, [r7, #27]
            break;
 8014802:	e002      	b.n	801480a <phpalI14443p3a_Sw_ActivateCard+0x166>
        case 2:
            bCascadeLevel = PHPAL_I14443P3A_CASCADE_LEVEL_3;
 8014804:	2397      	movs	r3, #151	@ 0x97
 8014806:	76fb      	strb	r3, [r7, #27]
            break;
 8014808:	bf00      	nop
        /* Default Case is not required as it will be a Dead Code due to the condition in for() loop statement. */
        } /* PRQA S 2002 */

        /* Copy know Uid part if neccessary */
        if (bLenUidIn == (bUidIndex + 4U))
 801480a:	79fa      	ldrb	r2, [r7, #7]
 801480c:	7e7b      	ldrb	r3, [r7, #25]
 801480e:	3304      	adds	r3, #4
 8014810:	429a      	cmp	r2, r3
 8014812:	d107      	bne.n	8014824 <phpalI14443p3a_Sw_ActivateCard+0x180>
        {
            /* Copy whole Uid if this is the only cascade level */
            (void)memcpy(&bUid[0], &pUidIn[bUidIndex], 4);
 8014814:	7e7b      	ldrb	r3, [r7, #25]
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	4413      	add	r3, r2
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	613b      	str	r3, [r7, #16]

            /* [Incrementing Uid index would have no effect] */

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 801481e:	2340      	movs	r3, #64	@ 0x40
 8014820:	75bb      	strb	r3, [r7, #22]
 8014822:	e097      	b.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else if (bLenUidIn > (bUidIndex + /* */ 4U))
 8014824:	79fa      	ldrb	r2, [r7, #7]
 8014826:	7e7b      	ldrb	r3, [r7, #25]
 8014828:	3304      	adds	r3, #4
 801482a:	429a      	cmp	r2, r3
 801482c:	d911      	bls.n	8014852 <phpalI14443p3a_Sw_ActivateCard+0x1ae>
        {
            /* Prepend cascade tag if we expect more cascade levels*/
            bUid[0] = PHPAL_I14443P3A_CASCADE_TAG;
 801482e:	2388      	movs	r3, #136	@ 0x88
 8014830:	743b      	strb	r3, [r7, #16]

            /* Only three more uid bytes are valid for this level */
            (void)memcpy(&bUid[1], &pUidIn[bUidIndex], 3);
 8014832:	7e7b      	ldrb	r3, [r7, #25]
 8014834:	68ba      	ldr	r2, [r7, #8]
 8014836:	18d1      	adds	r1, r2, r3
 8014838:	f107 0310 	add.w	r3, r7, #16
 801483c:	3301      	adds	r3, #1
 801483e:	2203      	movs	r2, #3
 8014840:	4618      	mov	r0, r3
 8014842:	f00a fbf0 	bl	801f026 <memcpy>

            /* Increment Uid index */
            bUidIndex += 3U;
 8014846:	7e7b      	ldrb	r3, [r7, #25]
 8014848:	3303      	adds	r3, #3
 801484a:	767b      	strb	r3, [r7, #25]

            /* All bits except BCC are valid */
            bNvbUid = 0x40;
 801484c:	2340      	movs	r3, #64	@ 0x40
 801484e:	75bb      	strb	r3, [r7, #22]
 8014850:	e080      	b.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        }
        else
        {
            /* No Uid given */
            bNvbUid = 0;
 8014852:	2300      	movs	r3, #0
 8014854:	75bb      	strb	r3, [r7, #22]
        }

        /* Anticollision Loop */
        while (bNvbUid != 0x40U)
 8014856:	e07d      	b.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
        {
            /* Perform single anticollision command */
            status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 8014858:	7db8      	ldrb	r0, [r7, #22]
 801485a:	f107 0210 	add.w	r2, r7, #16
 801485e:	7ef9      	ldrb	r1, [r7, #27]
 8014860:	f107 0316 	add.w	r3, r7, #22
 8014864:	9301      	str	r3, [sp, #4]
 8014866:	f107 0310 	add.w	r3, r7, #16
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	4603      	mov	r3, r0
 801486e:	68f8      	ldr	r0, [r7, #12]
 8014870:	f7ff fcc9 	bl	8014206 <phpalI14443p3a_Sw_Anticollision>
 8014874:	4603      	mov	r3, r0
 8014876:	83fb      	strh	r3, [r7, #30]

            /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
            if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	7d1b      	ldrb	r3, [r3, #20]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d12b      	bne.n	80148d8 <phpalI14443p3a_Sw_ActivateCard+0x234>
            {
                bRetryCount = 0;
 8014880:	2300      	movs	r3, #0
 8014882:	763b      	strb	r3, [r7, #24]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 8014884:	e021      	b.n	80148ca <phpalI14443p3a_Sw_ActivateCard+0x226>
                {
                    bRetryCount++;
 8014886:	7e3b      	ldrb	r3, [r7, #24]
 8014888:	3301      	adds	r3, #1
 801488a:	763b      	strb	r3, [r7, #24]
                    /* Wait for at least Tmin retransmission delay. */
                    PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	685b      	ldr	r3, [r3, #4]
 8014890:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8014894:	2100      	movs	r1, #0
 8014896:	4618      	mov	r0, r3
 8014898:	f7f9 fd62 	bl	800e360 <phhalHw_Pn5180_Wait>
 801489c:	4603      	mov	r3, r0
 801489e:	83fb      	strh	r3, [r7, #30]
 80148a0:	8bfb      	ldrh	r3, [r7, #30]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d001      	beq.n	80148aa <phpalI14443p3a_Sw_ActivateCard+0x206>
 80148a6:	8bfb      	ldrh	r3, [r7, #30]
 80148a8:	e0ac      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
                        pDataParams->pHalDataParams,
                        PHHAL_HW_TIME_MICROSECONDS,
                        PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                    status = phpalI14443p3a_Sw_Anticollision(pDataParams, bCascadeLevel, bUid, bNvbUid, bUid, &bNvbUid);
 80148aa:	7db8      	ldrb	r0, [r7, #22]
 80148ac:	f107 0210 	add.w	r2, r7, #16
 80148b0:	7ef9      	ldrb	r1, [r7, #27]
 80148b2:	f107 0316 	add.w	r3, r7, #22
 80148b6:	9301      	str	r3, [sp, #4]
 80148b8:	f107 0310 	add.w	r3, r7, #16
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4603      	mov	r3, r0
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ff fca0 	bl	8014206 <phpalI14443p3a_Sw_Anticollision>
 80148c6:	4603      	mov	r3, r0
 80148c8:	83fb      	strh	r3, [r7, #30]
                while (((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80148ca:	8bfb      	ldrh	r3, [r7, #30]
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	2b01      	cmp	r3, #1
 80148d0:	d102      	bne.n	80148d8 <phpalI14443p3a_Sw_ActivateCard+0x234>
 80148d2:	7e3b      	ldrb	r3, [r7, #24]
 80148d4:	2b01      	cmp	r3, #1
 80148d6:	d9d6      	bls.n	8014886 <phpalI14443p3a_Sw_ActivateCard+0x1e2>
                }
            }
            /* Collision error occured, add one (zero-)bit to Uid */
            if ((status & PH_ERR_MASK) == PH_ERR_COLLISION_ERROR)
 80148d8:	8bfb      	ldrh	r3, [r7, #30]
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	2b03      	cmp	r3, #3
 80148de:	d11b      	bne.n	8014918 <phpalI14443p3a_Sw_ActivateCard+0x274>
            {
                /* Emvco: case_id TA302_00 */
                if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	7d1b      	ldrb	r3, [r3, #20]
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d101      	bne.n	80148ec <phpalI14443p3a_Sw_ActivateCard+0x248>
                {
                    /* Report Error to Application and Application will perform PICC Reset */
                    return status;
 80148e8:	8bfb      	ldrh	r3, [r7, #30]
 80148ea:	e08b      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
                }

                /* Set the more cards available flag */
                *pMoreCardsAvailable = PH_ON;
 80148ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148ee:	2201      	movs	r2, #1
 80148f0:	701a      	strb	r2, [r3, #0]

                /* Increment NvbUid by one bit */
                if ((bNvbUid & 0x07U) < 7U)
 80148f2:	7dbb      	ldrb	r3, [r7, #22]
 80148f4:	f003 0307 	and.w	r3, r3, #7
 80148f8:	2b06      	cmp	r3, #6
 80148fa:	d804      	bhi.n	8014906 <phpalI14443p3a_Sw_ActivateCard+0x262>
                {
                    bNvbUid++;
 80148fc:	7dbb      	ldrb	r3, [r7, #22]
 80148fe:	3301      	adds	r3, #1
 8014900:	b2db      	uxtb	r3, r3
 8014902:	75bb      	strb	r3, [r7, #22]
 8014904:	e00d      	b.n	8014922 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
                /* This is more difficult if we have to increment the bytecount */
                else
                {
                    bNvbUid = (uint8_t)((((bNvbUid & 0xF0U) >> 4U) + 1U) << 4U);
 8014906:	7dbb      	ldrb	r3, [r7, #22]
 8014908:	091b      	lsrs	r3, r3, #4
 801490a:	b2db      	uxtb	r3, r3
 801490c:	3301      	adds	r3, #1
 801490e:	b2db      	uxtb	r3, r3
 8014910:	011b      	lsls	r3, r3, #4
 8014912:	b2db      	uxtb	r3, r3
 8014914:	75bb      	strb	r3, [r7, #22]
 8014916:	e004      	b.n	8014922 <phpalI14443p3a_Sw_ActivateCard+0x27e>
                }
            }
            else
            {
                /* Check success */
                PH_CHECK_SUCCESS(status);
 8014918:	8bfb      	ldrh	r3, [r7, #30]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <phpalI14443p3a_Sw_ActivateCard+0x27e>
 801491e:	8bfb      	ldrh	r3, [r7, #30]
 8014920:	e070      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
            }

            if(bCollDetected == PH_OFF)
 8014922:	7dfb      	ldrb	r3, [r7, #23]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d115      	bne.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                 * EMVCo article 5.4.2
                 * So For Single UID Size The NFC Forum Device MUST set nfcid10 of a single-size NFCID1 and nfcid13
                 * of a double-size NFCID1 to a value different from 88h.
                 */
                if(
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8014928:	7d3b      	ldrb	r3, [r7, #20]
 801492a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                if(
 801492e:	2b00      	cmp	r3, #0
 8014930:	d102      	bne.n	8014938 <phpalI14443p3a_Sw_ActivateCard+0x294>
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 8014932:	7efb      	ldrb	r3, [r7, #27]
 8014934:	2b93      	cmp	r3, #147	@ 0x93
 8014936:	d007      	beq.n	8014948 <phpalI14443p3a_Sw_ActivateCard+0x2a4>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8014938:	7d3b      	ldrb	r3, [r7, #20]
 801493a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                    ( (((bAtqa[0] & 0xC0U) == 0x00U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_1))||
 801493e:	2b40      	cmp	r3, #64	@ 0x40
 8014940:	d108      	bne.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 8014942:	7efb      	ldrb	r3, [r7, #27]
 8014944:	2b95      	cmp	r3, #149	@ 0x95
 8014946:	d105      	bne.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                      (bUid[0] == PHPAL_I14443P3A_CASCADE_TAG)
 8014948:	7c3b      	ldrb	r3, [r7, #16]
                      (((bAtqa[0] & 0xC0U) == 0x40U) && (bCascadeLevel == PHPAL_I14443P3A_CASCADE_LEVEL_2)) ) &&
 801494a:	2b88      	cmp	r3, #136	@ 0x88
 801494c:	d102      	bne.n	8014954 <phpalI14443p3a_Sw_ActivateCard+0x2b0>
                  )
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 801494e:	f240 3306 	movw	r3, #774	@ 0x306
 8014952:	e057      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
        while (bNvbUid != 0x40U)
 8014954:	7dbb      	ldrb	r3, [r7, #22]
 8014956:	2b40      	cmp	r3, #64	@ 0x40
 8014958:	f47f af7e 	bne.w	8014858 <phpalI14443p3a_Sw_ActivateCard+0x1b4>
                }
            }
        }

        statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 801495c:	f107 0210 	add.w	r2, r7, #16
 8014960:	7ef9      	ldrb	r1, [r7, #27]
 8014962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014964:	68f8      	ldr	r0, [r7, #12]
 8014966:	f7ff fe85 	bl	8014674 <phpalI14443p3a_Sw_Select>
 801496a:	4603      	mov	r3, r0
 801496c:	83bb      	strh	r3, [r7, #28]

        /* As per EMVCo 2.6 req 9.6.1.3, wait for at least Tmin retransmission in case of timeout error. */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	7d1b      	ldrb	r3, [r3, #20]
 8014972:	2b01      	cmp	r3, #1
 8014974:	d124      	bne.n	80149c0 <phpalI14443p3a_Sw_ActivateCard+0x31c>
        {
            bRetryCount = 0;
 8014976:	2300      	movs	r3, #0
 8014978:	763b      	strb	r3, [r7, #24]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 801497a:	e01a      	b.n	80149b2 <phpalI14443p3a_Sw_ActivateCard+0x30e>
            {
                bRetryCount++;
 801497c:	7e3b      	ldrb	r3, [r7, #24]
 801497e:	3301      	adds	r3, #1
 8014980:	763b      	strb	r3, [r7, #24]
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801498a:	2100      	movs	r1, #0
 801498c:	4618      	mov	r0, r3
 801498e:	f7f9 fce7 	bl	800e360 <phhalHw_Pn5180_Wait>
 8014992:	4603      	mov	r3, r0
 8014994:	83fb      	strh	r3, [r7, #30]
 8014996:	8bfb      	ldrh	r3, [r7, #30]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d001      	beq.n	80149a0 <phpalI14443p3a_Sw_ActivateCard+0x2fc>
 801499c:	8bfb      	ldrh	r3, [r7, #30]
 801499e:	e031      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));

                statusTmp = phpalI14443p3a_Sw_Select(pDataParams, bCascadeLevel, bUid, pSak);
 80149a0:	f107 0210 	add.w	r2, r7, #16
 80149a4:	7ef9      	ldrb	r1, [r7, #27]
 80149a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f7ff fe63 	bl	8014674 <phpalI14443p3a_Sw_Select>
 80149ae:	4603      	mov	r3, r0
 80149b0:	83bb      	strh	r3, [r7, #28]
            while (((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) && (bRetryCount < PH_NXPNFCRDLIB_CONFIG_EMVCO_RETRYCOUNT))
 80149b2:	8bbb      	ldrh	r3, [r7, #28]
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d102      	bne.n	80149c0 <phpalI14443p3a_Sw_ActivateCard+0x31c>
 80149ba:	7e3b      	ldrb	r3, [r7, #24]
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d9dd      	bls.n	801497c <phpalI14443p3a_Sw_ActivateCard+0x2d8>
            }
        }

        /* Emvco: Case_id TA305. EMVCo Req. 9.6.1.2 */
        PH_CHECK_SUCCESS(statusTmp);
 80149c0:	8bbb      	ldrh	r3, [r7, #28]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d001      	beq.n	80149ca <phpalI14443p3a_Sw_ActivateCard+0x326>
 80149c6:	8bbb      	ldrh	r3, [r7, #28]
 80149c8:	e01c      	b.n	8014a04 <phpalI14443p3a_Sw_ActivateCard+0x360>

        /* Cascade Bit is cleared -> no further cascade levels */
        if ((pSak[0] & 0x04U) == 0U)
 80149ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	f003 0304 	and.w	r3, r3, #4
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d007      	beq.n	80149e6 <phpalI14443p3a_Sw_ActivateCard+0x342>
    for (bCascadeIndex = 0; bCascadeIndex < 3U; bCascadeIndex++)
 80149d6:	7ebb      	ldrb	r3, [r7, #26]
 80149d8:	3301      	adds	r3, #1
 80149da:	76bb      	strb	r3, [r7, #26]
 80149dc:	7ebb      	ldrb	r3, [r7, #26]
 80149de:	2b02      	cmp	r3, #2
 80149e0:	f67f af00 	bls.w	80147e4 <phpalI14443p3a_Sw_ActivateCard+0x140>
 80149e4:	e000      	b.n	80149e8 <phpalI14443p3a_Sw_ActivateCard+0x344>
        {
            break;
 80149e6:	bf00      	nop
        }
    }

    /* Return UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	f103 0108 	add.w	r1, r3, #8
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	7c9b      	ldrb	r3, [r3, #18]
 80149f2:	461a      	mov	r2, r3
 80149f4:	6838      	ldr	r0, [r7, #0]
 80149f6:	f00a fb16 	bl	801f026 <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	7c9a      	ldrb	r2, [r3, #18]
 80149fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a00:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3720      	adds	r7, #32
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <phpalI14443p3a_Sw_Exchange>:
                                      uint8_t * pTxBuffer,
                                      uint16_t wTxLength,
                                      uint8_t ** ppRxBuffer,
                                      uint16_t * pRxLength
                                      )
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b086      	sub	sp, #24
 8014a10:	af02      	add	r7, sp, #8
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	607a      	str	r2, [r7, #4]
 8014a16:	461a      	mov	r2, r3
 8014a18:	460b      	mov	r3, r1
 8014a1a:	817b      	strh	r3, [r7, #10]
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	813b      	strh	r3, [r7, #8]
    /* direct mapping of HAL exchange function */
    return phhalHw_Exchange(
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	6858      	ldr	r0, [r3, #4]
 8014a24:	893a      	ldrh	r2, [r7, #8]
 8014a26:	8979      	ldrh	r1, [r7, #10]
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	9301      	str	r3, [sp, #4]
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	4613      	mov	r3, r2
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	f7f9 f998 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8014a38:	4603      	mov	r3, r0
        wOption,
        pTxBuffer,
        wTxLength,
        ppRxBuffer,
        pRxLength);
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}

08014a42 <phpalI14443p3a_Sw_RequestAEx>:
phStatus_t phpalI14443p3a_Sw_RequestAEx(
                                        phpalI14443p3a_Sw_DataParams_t * pDataParams,
                                        uint8_t bReqCode,
                                        uint8_t * pAtqa
                                        )
{
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b08a      	sub	sp, #40	@ 0x28
 8014a46:	af02      	add	r7, sp, #8
 8014a48:	60f8      	str	r0, [r7, #12]
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	607a      	str	r2, [r7, #4]
 8014a4e:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM Status;
    uint8_t     PH_MEMLOC_REM cmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014a50:	2300      	movs	r3, #0
 8014a52:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014a54:	2300      	movs	r3, #0
 8014a56:	827b      	strh	r3, [r7, #18]
    uint16_t    PH_MEMLOC_REM wRegister;

    /* Disable MIFARE Classic contactless IC Crypto1 */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	2201      	movs	r2, #1
 8014a5e:	212e      	movs	r1, #46	@ 0x2e
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7f9 fd39 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014a66:	4603      	mov	r3, r0
 8014a68:	83fb      	strh	r3, [r7, #30]
 8014a6a:	8bfb      	ldrh	r3, [r7, #30]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d001      	beq.n	8014a74 <phpalI14443p3a_Sw_RequestAEx+0x32>
 8014a70:	8bfb      	ldrh	r3, [r7, #30]
 8014a72:	e0cc      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_DISABLE_MF_CRYPTO1,
        PH_ON));

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	2109      	movs	r1, #9
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7f9 fd2b 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014a82:	4603      	mov	r3, r0
 8014a84:	83fb      	strh	r3, [r7, #30]
 8014a86:	8bfb      	ldrh	r3, [r7, #30]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d001      	beq.n	8014a90 <phpalI14443p3a_Sw_RequestAEx+0x4e>
 8014a8c:	8bfb      	ldrh	r3, [r7, #30]
 8014a8e:	e0be      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	2200      	movs	r2, #0
 8014a96:	210a      	movs	r1, #10
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f9 fd1d 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	83fb      	strh	r3, [r7, #30]
 8014aa2:	8bfb      	ldrh	r3, [r7, #30]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d001      	beq.n	8014aac <phpalI14443p3a_Sw_RequestAEx+0x6a>
 8014aa8:	8bfb      	ldrh	r3, [r7, #30]
 8014aaa:	e0b0      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set selection timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	685b      	ldr	r3, [r3, #4]
 8014ab0:	2291      	movs	r2, #145	@ 0x91
 8014ab2:	210d      	movs	r1, #13
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7f9 fd0f 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014aba:	4603      	mov	r3, r0
 8014abc:	83fb      	strh	r3, [r7, #30]
 8014abe:	8bfb      	ldrh	r3, [r7, #30]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <phpalI14443p3a_Sw_RequestAEx+0x86>
 8014ac4:	8bfb      	ldrh	r3, [r7, #30]
 8014ac6:	e0a2      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3A_SELECTION_TIME_US + PHPAL_I14443P3A_EXT_TIME_US));

    /* Retrieve RxWaitTime */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, &wRegister));
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	f107 0210 	add.w	r2, r7, #16
 8014ad0:	2106      	movs	r1, #6
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fb f94e 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	83fb      	strh	r3, [r7, #30]
 8014adc:	8bfb      	ldrh	r3, [r7, #30]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d001      	beq.n	8014ae6 <phpalI14443p3a_Sw_RequestAEx+0xa4>
 8014ae2:	8bfb      	ldrh	r3, [r7, #30]
 8014ae4:	e093      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Set RxWaitTime to 76 microseconds equivalent to 8 Bits. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, 76));
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	224c      	movs	r2, #76	@ 0x4c
 8014aec:	2106      	movs	r1, #6
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7f9 fcf2 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014af4:	4603      	mov	r3, r0
 8014af6:	83fb      	strh	r3, [r7, #30]
 8014af8:	8bfb      	ldrh	r3, [r7, #30]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d001      	beq.n	8014b02 <phpalI14443p3a_Sw_RequestAEx+0xc0>
 8014afe:	8bfb      	ldrh	r3, [r7, #30]
 8014b00:	e085      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Switch off CRC */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXCRC, PH_OFF));
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	2200      	movs	r2, #0
 8014b08:	2101      	movs	r1, #1
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7f9 fce4 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014b10:	4603      	mov	r3, r0
 8014b12:	83fb      	strh	r3, [r7, #30]
 8014b14:	8bfb      	ldrh	r3, [r7, #30]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d001      	beq.n	8014b1e <phpalI14443p3a_Sw_RequestAEx+0xdc>
 8014b1a:	8bfb      	ldrh	r3, [r7, #30]
 8014b1c:	e077      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXCRC, PH_OFF));
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	685b      	ldr	r3, [r3, #4]
 8014b22:	2200      	movs	r2, #0
 8014b24:	2102      	movs	r1, #2
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7f9 fcd6 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	83fb      	strh	r3, [r7, #30]
 8014b30:	8bfb      	ldrh	r3, [r7, #30]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <phpalI14443p3a_Sw_RequestAEx+0xf8>
 8014b36:	8bfb      	ldrh	r3, [r7, #30]
 8014b38:	e069      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Only 7 bits are valid */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXLASTBITS, 7));
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	2207      	movs	r2, #7
 8014b40:	2103      	movs	r1, #3
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7f9 fcc8 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	83fb      	strh	r3, [r7, #30]
 8014b4c:	8bfb      	ldrh	r3, [r7, #30]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d001      	beq.n	8014b56 <phpalI14443p3a_Sw_RequestAEx+0x114>
 8014b52:	8bfb      	ldrh	r3, [r7, #30]
 8014b54:	e05b      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    /* Send ReqA command */
    cmd[0] = bReqCode;
 8014b56:	7afb      	ldrb	r3, [r7, #11]
 8014b58:	763b      	strb	r3, [r7, #24]
    statusTmp = phhalHw_Exchange(pDataParams->pHalDataParams, PH_EXCHANGE_DEFAULT, cmd, 1, &pResp, &wRespLength);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6858      	ldr	r0, [r3, #4]
 8014b5e:	f107 0218 	add.w	r2, r7, #24
 8014b62:	f107 0312 	add.w	r3, r7, #18
 8014b66:	9301      	str	r3, [sp, #4]
 8014b68:	f107 0314 	add.w	r3, r7, #20
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	2301      	movs	r3, #1
 8014b70:	2100      	movs	r1, #0
 8014b72:	f7f9 f8f9 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8014b76:	4603      	mov	r3, r0
 8014b78:	83fb      	strh	r3, [r7, #30]

    /* Restore previous RxWaitTime */
    PH_CHECK_SUCCESS_FCT(Status, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXWAIT_US, wRegister));
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	685b      	ldr	r3, [r3, #4]
 8014b7e:	8a3a      	ldrh	r2, [r7, #16]
 8014b80:	2106      	movs	r1, #6
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7f9 fca8 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	83bb      	strh	r3, [r7, #28]
 8014b8c:	8bbb      	ldrh	r3, [r7, #28]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d001      	beq.n	8014b96 <phpalI14443p3a_Sw_RequestAEx+0x154>
 8014b92:	8bbb      	ldrh	r3, [r7, #28]
 8014b94:	e03b      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>

    PH_CHECK_SUCCESS(statusTmp);
 8014b96:	8bfb      	ldrh	r3, [r7, #30]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d001      	beq.n	8014ba0 <phpalI14443p3a_Sw_RequestAEx+0x15e>
 8014b9c:	8bfb      	ldrh	r3, [r7, #30]
 8014b9e:	e036      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    /* Check and copy ATQA */
    if (wRespLength == PHPAL_I14443P3A_ATQA_LENGTH)
 8014ba0:	8a7b      	ldrh	r3, [r7, #18]
 8014ba2:	2b02      	cmp	r3, #2
 8014ba4:	d12f      	bne.n	8014c06 <phpalI14443p3a_Sw_RequestAEx+0x1c4>
    {
        (void)memcpy(pAtqa, pResp, PHPAL_I14443P3A_ATQA_LENGTH);
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	881b      	ldrh	r3, [r3, #0]
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	801a      	strh	r2, [r3, #0]
        /* Emvco: case_id: TA304_10, TA304_11, TA304_12 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	7d1b      	ldrb	r3, [r3, #20]
 8014bb4:	2b01      	cmp	r3, #1
 8014bb6:	d109      	bne.n	8014bcc <phpalI14443p3a_Sw_RequestAEx+0x18a>
        {
            /*5.3.2*/
            if(0U != (pAtqa[1] & 0xF0U))    /* Most significant nibble of byte 2 must be 0 */
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d022      	beq.n	8014c0c <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014bc6:	f240 3306 	movw	r3, #774	@ 0x306
 8014bca:	e020      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
        else
        {
            /* NFCForum-TS-DigitalProtocol-1.0, Requirement 18, Section 4.6.3.3 */
            if((((pAtqa[0] & 0x1FU) == 0x00U) && ((pAtqa[1] & 0x0FU) != 0x0CU)) || (((pAtqa[1] & 0x0FU) == 0x0CU) && ((pAtqa[0] & 0x1FU) != 0x00U)))
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	f003 031f 	and.w	r3, r3, #31
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d106      	bne.n	8014be6 <phpalI14443p3a_Sw_RequestAEx+0x1a4>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	3301      	adds	r3, #1
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	f003 030f 	and.w	r3, r3, #15
 8014be2:	2b0c      	cmp	r3, #12
 8014be4:	d10c      	bne.n	8014c00 <phpalI14443p3a_Sw_RequestAEx+0x1be>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	3301      	adds	r3, #1
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	f003 030f 	and.w	r3, r3, #15
 8014bf0:	2b0c      	cmp	r3, #12
 8014bf2:	d10b      	bne.n	8014c0c <phpalI14443p3a_Sw_RequestAEx+0x1ca>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	f003 031f 	and.w	r3, r3, #31
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d005      	beq.n	8014c0c <phpalI14443p3a_Sw_RequestAEx+0x1ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014c00:	f240 3306 	movw	r3, #774	@ 0x306
 8014c04:	e003      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
            }
        }
    }
    else
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3A);
 8014c06:	f240 3306 	movw	r3, #774	@ 0x306
 8014c0a:	e000      	b.n	8014c0e <phpalI14443p3a_Sw_RequestAEx+0x1cc>
    }

    return PH_ERR_SUCCESS;
 8014c0c:	2300      	movs	r3, #0
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3720      	adds	r7, #32
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}

08014c16 <phpalI14443p3a_Sw_GetSerialNo>:
phStatus_t phpalI14443p3a_Sw_GetSerialNo(
    phpalI14443p3a_Sw_DataParams_t * pDataParams,
    uint8_t * pUidOut,
    uint8_t * pLenUidOut
    )
{
 8014c16:	b580      	push	{r7, lr}
 8014c18:	b084      	sub	sp, #16
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	60f8      	str	r0, [r7, #12]
 8014c1e:	60b9      	str	r1, [r7, #8]
 8014c20:	607a      	str	r2, [r7, #4]
    /* Return an error if UID is not complete */
    if (0U == (pDataParams->bUidComplete))
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	7cdb      	ldrb	r3, [r3, #19]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d102      	bne.n	8014c30 <phpalI14443p3a_Sw_GetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_ISO14443P3A);
 8014c2a:	f240 3325 	movw	r3, #805	@ 0x325
 8014c2e:	e00d      	b.n	8014c4c <phpalI14443p3a_Sw_GetSerialNo+0x36>
    }

    /* Copy UID */
    (void)memcpy(pUidOut, pDataParams->abUid, pDataParams->bUidLength);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f103 0108 	add.w	r1, r3, #8
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	7c9b      	ldrb	r3, [r3, #18]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	68b8      	ldr	r0, [r7, #8]
 8014c3e:	f00a f9f2 	bl	801f026 <memcpy>
    *pLenUidOut = pDataParams->bUidLength;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	7c9a      	ldrb	r2, [r3, #18]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8014c4a:	2300      	movs	r3, #0
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3710      	adds	r7, #16
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <phpalI14443p3b_Sw_Init>:
phStatus_t phpalI14443p3b_Sw_Init(
                                  phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8014c54:	b480      	push	{r7}
 8014c56:	b085      	sub	sp, #20
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	460b      	mov	r3, r1
 8014c5e:	607a      	str	r2, [r7, #4]
 8014c60:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p3b_Sw_DataParams_t) != wSizeOfDataParams)
 8014c62:	897b      	ldrh	r3, [r7, #10]
 8014c64:	2b2c      	cmp	r3, #44	@ 0x2c
 8014c66:	d002      	beq.n	8014c6e <phpalI14443p3b_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P3B);
 8014c68:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8014c6c:	e051      	b.n	8014d12 <phpalI14443p3b_Sw_Init+0xbe>
    }
    PH_ASSERT_NULL (pDataParams);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d101      	bne.n	8014c78 <phpalI14443p3b_Sw_Init+0x24>
 8014c74:	2321      	movs	r3, #33	@ 0x21
 8014c76:	e04c      	b.n	8014d12 <phpalI14443p3b_Sw_Init+0xbe>
    PH_ASSERT_NULL (pHalDataParams);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d101      	bne.n	8014c82 <phpalI14443p3b_Sw_Init+0x2e>
 8014c7e:	2321      	movs	r3, #33	@ 0x21
 8014c80:	e047      	b.n	8014d12 <phpalI14443p3b_Sw_Init+0xbe>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_ISO14443P3B | PHPAL_I14443P3B_SW_ID;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	f240 4201 	movw	r2, #1025	@ 0x401
 8014c88:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	605a      	str	r2, [r3, #4]
    pDataParams->bExtAtqb               = PH_OFF;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2200      	movs	r2, #0
 8014c94:	721a      	strb	r2, [r3, #8]
    pDataParams->bPupiValid             = PH_OFF;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	735a      	strb	r2, [r3, #13]
    pDataParams->bCidSupported          = 0;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	739a      	strb	r2, [r3, #14]
    pDataParams->bNadSupported          = 0;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	73da      	strb	r2, [r3, #15]
    pDataParams->bCid                   = 0;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2200      	movs	r2, #0
 8014cac:	741a      	strb	r2, [r3, #16]
    pDataParams->bFwi                   = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2204      	movs	r2, #4
 8014cb2:	745a      	strb	r2, [r3, #17]
    pDataParams->bFsci                  = PHPAL_I14443P3B_SW_FSCI_DEFAULT;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2202      	movs	r2, #2
 8014cb8:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi                  = 0;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri                   = 0;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi                   = 0;
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	755a      	strb	r2, [r3, #21]
    pDataParams->bAttribParam1          = PHPAL_I14443P3B_SW_ATTRIB_PARAM1_DEFAULT;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	759a      	strb	r2, [r3, #22]
    pDataParams->pHigherLayerInf        = NULL;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	619a      	str	r2, [r3, #24]
    pDataParams->wTxWait                = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014cde:	839a      	strh	r2, [r3, #28]
    pDataParams->wHigherLayerInfLen     = 0;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	83da      	strh	r2, [r3, #30]
    pDataParams->pHigherLayerResp       = NULL;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	621a      	str	r2, [r3, #32]
    pDataParams->wHigherLayerRespSize   = 0;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	849a      	strh	r2, [r3, #36]	@ 0x24
    pDataParams->wHigherLayerRespLen    = 0;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    pDataParams->bOpeMode               = RD_LIB_MODE_NFC;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	2202      	movs	r2, #2
 8014cfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bPollCmd               = PHPAL_I14443P3B_USE_REQB;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2200      	movs	r2, #0
 8014d04:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bRetryCount            = PHPAL_I14443P3B_ATTRIB_RETRY_MAX;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    return PH_ERR_SUCCESS;
 8014d10:	2300      	movs	r3, #0
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3714      	adds	r7, #20
 8014d16:	46bd      	mov	sp, r7
 8014d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1c:	4770      	bx	lr
	...

08014d20 <phpalI14443p3b_Sw_SetConfig>:
phStatus_t phpalI14443p3b_Sw_SetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                       )
{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	460b      	mov	r3, r1
 8014d2a:	807b      	strh	r3, [r7, #2]
 8014d2c:	4613      	mov	r3, r2
 8014d2e:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8014d30:	887b      	ldrh	r3, [r7, #2]
 8014d32:	2b03      	cmp	r3, #3
 8014d34:	d82c      	bhi.n	8014d90 <phpalI14443p3b_Sw_SetConfig+0x70>
 8014d36:	a201      	add	r2, pc, #4	@ (adr r2, 8014d3c <phpalI14443p3b_Sw_SetConfig+0x1c>)
 8014d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d3c:	08014d4d 	.word	0x08014d4d
 8014d40:	08014d57 	.word	0x08014d57
 8014d44:	08014d63 	.word	0x08014d63
 8014d48:	08014d6f 	.word	0x08014d6f
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        pDataParams->bAttribParam1 = (uint8_t)wValue;
 8014d4c:	883b      	ldrh	r3, [r7, #0]
 8014d4e:	b2da      	uxtb	r2, r3
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	759a      	strb	r2, [r3, #22]
        break;
 8014d54:	e01f      	b.n	8014d96 <phpalI14443p3b_Sw_SetConfig+0x76>

    /* Emvco: To Define Running Mode for RdLib: Either Normal, EMVCO, ISO */
    case PHPAL_I14443P3B_CONFIG_OPE_MODE:
      {
         pDataParams->bOpeMode = (uint8_t)wValue;
 8014d56:	883b      	ldrh	r3, [r7, #0]
 8014d58:	b2da      	uxtb	r2, r3
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         break;
 8014d60:	e019      	b.n	8014d96 <phpalI14443p3b_Sw_SetConfig+0x76>
      }

    case PHPAL_I14443P3B_CONFIG_POLL_CMD:
    {
        pDataParams->bPollCmd = (uint8_t)wValue;
 8014d62:	883b      	ldrh	r3, [r7, #0]
 8014d64:	b2da      	uxtb	r2, r3
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        break;
 8014d6c:	e013      	b.n	8014d96 <phpalI14443p3b_Sw_SetConfig+0x76>
    }

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
    {
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8014d6e:	883b      	ldrh	r3, [r7, #0]
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d006      	beq.n	8014d84 <phpalI14443p3b_Sw_SetConfig+0x64>
             ((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MAX)))
 8014d76:	883b      	ldrh	r3, [r7, #0]
 8014d78:	b2db      	uxtb	r3, r3
        if(!(((wValue & 0xFFU) == PHPAL_I14443P3B_ATTRIB_RETRY_MIN) ||
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d002      	beq.n	8014d84 <phpalI14443p3b_Sw_SetConfig+0x64>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014d7e:	f240 4321 	movw	r3, #1057	@ 0x421
 8014d82:	e009      	b.n	8014d98 <phpalI14443p3b_Sw_SetConfig+0x78>
        }

        pDataParams->bRetryCount = (uint8_t)wValue;
 8014d84:	883b      	ldrh	r3, [r7, #0]
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        break;
 8014d8e:	e002      	b.n	8014d96 <phpalI14443p3b_Sw_SetConfig+0x76>
    }
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014d90:	f240 4323 	movw	r3, #1059	@ 0x423
 8014d94:	e000      	b.n	8014d98 <phpalI14443p3b_Sw_SetConfig+0x78>
    }

    return PH_ERR_SUCCESS;
 8014d96:	2300      	movs	r3, #0
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	370c      	adds	r7, #12
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr

08014da4 <phpalI14443p3b_Sw_GetConfig>:
phStatus_t phpalI14443p3b_Sw_GetConfig(
                                       phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t* pValue
                                       )
{
 8014da4:	b480      	push	{r7}
 8014da6:	b085      	sub	sp, #20
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	460b      	mov	r3, r1
 8014dae:	607a      	str	r2, [r7, #4]
 8014db0:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8014db2:	897b      	ldrh	r3, [r7, #10]
 8014db4:	2b05      	cmp	r3, #5
 8014db6:	d828      	bhi.n	8014e0a <phpalI14443p3b_Sw_GetConfig+0x66>
 8014db8:	a201      	add	r2, pc, #4	@ (adr r2, 8014dc0 <phpalI14443p3b_Sw_GetConfig+0x1c>)
 8014dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dbe:	bf00      	nop
 8014dc0:	08014dd9 	.word	0x08014dd9
 8014dc4:	08014e0b 	.word	0x08014e0b
 8014dc8:	08014e0b 	.word	0x08014e0b
 8014dcc:	08014de5 	.word	0x08014de5
 8014dd0:	08014df3 	.word	0x08014df3
 8014dd4:	08014dff 	.word	0x08014dff
    {
    case PHPAL_I14443P3B_CONFIG_ATTRIB_PARAM1:
        *pValue = (uint16_t)pDataParams->bAttribParam1;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	7d9b      	ldrb	r3, [r3, #22]
 8014ddc:	461a      	mov	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	801a      	strh	r2, [r3, #0]
        break;
 8014de2:	e015      	b.n	8014e10 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_ATTRIB_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8014dea:	461a      	mov	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	801a      	strh	r2, [r3, #0]
        break;
 8014df0:	e00e      	b.n	8014e10 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	7d1b      	ldrb	r3, [r3, #20]
 8014df6:	461a      	mov	r2, r3
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	801a      	strh	r2, [r3, #0]
        break;
 8014dfc:	e008      	b.n	8014e10 <phpalI14443p3b_Sw_GetConfig+0x6c>

    case PHPAL_I14443P3B_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	7d5b      	ldrb	r3, [r3, #21]
 8014e02:	461a      	mov	r2, r3
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	801a      	strh	r2, [r3, #0]
        break;
 8014e08:	e002      	b.n	8014e10 <phpalI14443p3b_Sw_GetConfig+0x6c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014e0a:	f240 4323 	movw	r3, #1059	@ 0x423
 8014e0e:	e000      	b.n	8014e12 <phpalI14443p3b_Sw_GetConfig+0x6e>
    }

    return PH_ERR_SUCCESS;
 8014e10:	2300      	movs	r3, #0
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3714      	adds	r7, #20
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr
 8014e1e:	bf00      	nop

08014e20 <phpalI14443p3b_Sw_RequestB>:
                                      uint8_t bAfi,
                                      uint8_t bExtAtqb,
                                      uint8_t * pAtqb,
                                      uint8_t * pAtqbLen
                                      )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b086      	sub	sp, #24
 8014e24:	af04      	add	r7, sp, #16
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	4608      	mov	r0, r1
 8014e2a:	4611      	mov	r1, r2
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	4603      	mov	r3, r0
 8014e30:	70fb      	strb	r3, [r7, #3]
 8014e32:	460b      	mov	r3, r1
 8014e34:	70bb      	strb	r3, [r7, #2]
 8014e36:	4613      	mov	r3, r2
 8014e38:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 0, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8014e3a:	78b9      	ldrb	r1, [r7, #2]
 8014e3c:	78fa      	ldrb	r2, [r7, #3]
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	9302      	str	r3, [sp, #8]
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	9301      	str	r3, [sp, #4]
 8014e46:	787b      	ldrb	r3, [r7, #1]
 8014e48:	9300      	str	r3, [sp, #0]
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 fc52 	bl	80156f8 <phpalI14443p3b_Sw_RequestBEx>
 8014e54:	4603      	mov	r3, r0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <phpalI14443p3b_Sw_WakeUpB>:
                                     uint8_t bAfi,
                                     uint8_t bExtAtqb,
                                     uint8_t * pAtqb,
                                     uint8_t * pAtqbLen
                                     )
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b086      	sub	sp, #24
 8014e62:	af04      	add	r7, sp, #16
 8014e64:	6078      	str	r0, [r7, #4]
 8014e66:	4608      	mov	r0, r1
 8014e68:	4611      	mov	r1, r2
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	70fb      	strb	r3, [r7, #3]
 8014e70:	460b      	mov	r3, r1
 8014e72:	70bb      	strb	r3, [r7, #2]
 8014e74:	4613      	mov	r3, r2
 8014e76:	707b      	strb	r3, [r7, #1]
    return phpalI14443p3b_Sw_RequestBEx(pDataParams, 1, bNumSlots, bAfi, bExtAtqb, pAtqb, pAtqbLen);
 8014e78:	78b9      	ldrb	r1, [r7, #2]
 8014e7a:	78fa      	ldrb	r2, [r7, #3]
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	9302      	str	r3, [sp, #8]
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	9301      	str	r3, [sp, #4]
 8014e84:	787b      	ldrb	r3, [r7, #1]
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	460b      	mov	r3, r1
 8014e8a:	2101      	movs	r1, #1
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f000 fc33 	bl	80156f8 <phpalI14443p3b_Sw_RequestBEx>
 8014e92:	4603      	mov	r3, r0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <phpalI14443p3b_Sw_SlotMarker>:
                                        phpalI14443p3b_Sw_DataParams_t * pDataParams,
                                        uint8_t bSlotNumber,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b08a      	sub	sp, #40	@ 0x28
 8014ea0:	af02      	add	r7, sp, #8
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	607a      	str	r2, [r7, #4]
 8014ea6:	603b      	str	r3, [r7, #0]
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	82fb      	strh	r3, [r7, #22]

    /* Parameter check */
    if ((bSlotNumber < 2U) || (bSlotNumber > 16U))
 8014eb4:	7afb      	ldrb	r3, [r7, #11]
 8014eb6:	2b01      	cmp	r3, #1
 8014eb8:	d902      	bls.n	8014ec0 <phpalI14443p3b_Sw_SlotMarker+0x24>
 8014eba:	7afb      	ldrb	r3, [r7, #11]
 8014ebc:	2b10      	cmp	r3, #16
 8014ebe:	d902      	bls.n	8014ec6 <phpalI14443p3b_Sw_SlotMarker+0x2a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014ec0:	f240 4321 	movw	r3, #1057	@ 0x421
 8014ec4:	e026      	b.n	8014f14 <phpalI14443p3b_Sw_SlotMarker+0x78>

    /* Note: No need to set time out and RxDeafTime since this is done in RequestB,
    which must be the previous command. */

    /* Build the command */
    aCmd[0] = (uint8_t)(((uint8_t)(bSlotNumber-1U) & 0x0FU) << 4U) | 0x05U;
 8014ec6:	7afb      	ldrb	r3, [r7, #11]
 8014ec8:	3b01      	subs	r3, #1
 8014eca:	b2db      	uxtb	r3, r3
 8014ecc:	011b      	lsls	r3, r3, #4
 8014ece:	b2db      	uxtb	r3, r3
 8014ed0:	f043 0305 	orr.w	r3, r3, #5
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	773b      	strb	r3, [r7, #28]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	6858      	ldr	r0, [r3, #4]
 8014edc:	f107 021c 	add.w	r2, r7, #28
 8014ee0:	f107 0316 	add.w	r3, r7, #22
 8014ee4:	9301      	str	r3, [sp, #4]
 8014ee6:	f107 0318 	add.w	r3, r7, #24
 8014eea:	9300      	str	r3, [sp, #0]
 8014eec:	2301      	movs	r3, #1
 8014eee:	2100      	movs	r1, #0
 8014ef0:	f7f8 ff3a 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	83fb      	strh	r3, [r7, #30]
 8014ef8:	8bfb      	ldrh	r3, [r7, #30]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d001      	beq.n	8014f02 <phpalI14443p3b_Sw_SlotMarker+0x66>
 8014efe:	8bfb      	ldrh	r3, [r7, #30]
 8014f00:	e008      	b.n	8014f14 <phpalI14443p3b_Sw_SlotMarker+0x78>
        aCmd,
        1,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8014f02:	69b9      	ldr	r1, [r7, #24]
 8014f04:	8afa      	ldrh	r2, [r7, #22]
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	9300      	str	r3, [sp, #0]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 fb2f 	bl	8015570 <phpalI14443p3b_Sw_CheckATQBEx>
 8014f12:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3720      	adds	r7, #32
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <phpalI14443p3b_Sw_HaltB>:

phStatus_t phpalI14443p3b_Sw_HaltB(
                                   phpalI14443p3b_Sw_DataParams_t * pDataParams
                                   )
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b088      	sub	sp, #32
 8014f20:	af02      	add	r7, sp, #8
 8014f22:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[5];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014f24:	2300      	movs	r3, #0
 8014f26:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	817b      	strh	r3, [r7, #10]

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8014f34:	210d      	movs	r1, #13
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7f9 face 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	82fb      	strh	r3, [r7, #22]
 8014f40:	8afb      	ldrh	r3, [r7, #22]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d001      	beq.n	8014f4a <phpalI14443p3b_Sw_HaltB+0x2e>
 8014f46:	8afb      	ldrh	r3, [r7, #22]
 8014f48:	e029      	b.n	8014f9e <phpalI14443p3b_Sw_HaltB+0x82>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_HALT_CMD;
 8014f4a:	2350      	movs	r3, #80	@ 0x50
 8014f4c:	743b      	strb	r3, [r7, #16]
    (void)memcpy(&aCmd[1], pDataParams->pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	3309      	adds	r3, #9
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f8c7 3011 	str.w	r3, [r7, #17]

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6858      	ldr	r0, [r3, #4]
 8014f5c:	f107 0210 	add.w	r2, r7, #16
 8014f60:	f107 030a 	add.w	r3, r7, #10
 8014f64:	9301      	str	r3, [sp, #4]
 8014f66:	f107 030c 	add.w	r3, r7, #12
 8014f6a:	9300      	str	r3, [sp, #0]
 8014f6c:	2305      	movs	r3, #5
 8014f6e:	2100      	movs	r1, #0
 8014f70:	f7f8 fefa 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8014f74:	4603      	mov	r3, r0
 8014f76:	82fb      	strh	r3, [r7, #22]
 8014f78:	8afb      	ldrh	r3, [r7, #22]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d001      	beq.n	8014f82 <phpalI14443p3b_Sw_HaltB+0x66>
 8014f7e:	8afb      	ldrh	r3, [r7, #22]
 8014f80:	e00d      	b.n	8014f9e <phpalI14443p3b_Sw_HaltB+0x82>
        5,
        &pResp,
        &wRespLength));

    /* Response check */
    if ((wRespLength != 1U) || (pResp[0] != PHPAL_I14443P3B_SW_HALT_RESP))
 8014f82:	897b      	ldrh	r3, [r7, #10]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d103      	bne.n	8014f90 <phpalI14443p3b_Sw_HaltB+0x74>
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d002      	beq.n	8014f96 <phpalI14443p3b_Sw_HaltB+0x7a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8014f90:	f240 4306 	movw	r3, #1030	@ 0x406
 8014f94:	e003      	b.n	8014f9e <phpalI14443p3b_Sw_HaltB+0x82>
    }

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 8014f9c:	2300      	movs	r3, #0
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3718      	adds	r7, #24
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
	...

08014fa8 <phpalI14443p3b_Sw_Attrib>:
                                    uint8_t bCid,
                                    uint8_t bDri,
                                    uint8_t bDsi,
                                    uint8_t * pMbli
                                    )
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b090      	sub	sp, #64	@ 0x40
 8014fac:	af02      	add	r7, sp, #8
 8014fae:	60f8      	str	r0, [r7, #12]
 8014fb0:	60b9      	str	r1, [r7, #8]
 8014fb2:	4611      	mov	r1, r2
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	460b      	mov	r3, r1
 8014fb8:	71fb      	strb	r3, [r7, #7]
 8014fba:	4613      	mov	r3, r2
 8014fbc:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[9];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bTemp = 0;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint32_t    PH_MEMLOC_REM dwSfgt = 0;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t    PH_MEMLOC_REM dwFwt = 0;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t   PH_MEMLOC_REM fFwt = 0;
 8014fd4:	f04f 0300 	mov.w	r3, #0
 8014fd8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* parameter check */
    /* ATQB length */
    if ((bAtqbLen != 12U) && (bAtqbLen != 13U))
 8014fda:	79fb      	ldrb	r3, [r7, #7]
 8014fdc:	2b0c      	cmp	r3, #12
 8014fde:	d005      	beq.n	8014fec <phpalI14443p3b_Sw_Attrib+0x44>
 8014fe0:	79fb      	ldrb	r3, [r7, #7]
 8014fe2:	2b0d      	cmp	r3, #13
 8014fe4:	d002      	beq.n	8014fec <phpalI14443p3b_Sw_Attrib+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8014fe6:	f240 4321 	movw	r3, #1057	@ 0x421
 8014fea:	e295      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* check given DSI, DRI, FSDI */
    if ((bFsdi > PHPAL_I14443P3B_FRAMESIZE_MAX) || (bDri > 0x03U) || (bDsi > 0x03U))
 8014fec:	79bb      	ldrb	r3, [r7, #6]
 8014fee:	2b0c      	cmp	r3, #12
 8014ff0:	d807      	bhi.n	8015002 <phpalI14443p3b_Sw_Attrib+0x5a>
 8014ff2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8014ff6:	2b03      	cmp	r3, #3
 8014ff8:	d803      	bhi.n	8015002 <phpalI14443p3b_Sw_Attrib+0x5a>
 8014ffa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8014ffe:	2b03      	cmp	r3, #3
 8015000:	d902      	bls.n	8015008 <phpalI14443p3b_Sw_Attrib+0x60>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015002:	f240 4321 	movw	r3, #1057	@ 0x421
 8015006:	e287      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    if ((bFsdi < PHPAL_I14443P3B_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8015008:	79bb      	ldrb	r3, [r7, #6]
 801500a:	2b07      	cmp	r3, #7
 801500c:	d807      	bhi.n	801501e <phpalI14443p3b_Sw_Attrib+0x76>
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015014:	2b01      	cmp	r3, #1
 8015016:	d102      	bne.n	801501e <phpalI14443p3b_Sw_Attrib+0x76>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015018:	f240 4321 	movw	r3, #1057	@ 0x421
 801501c:	e27c      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* build the command frame */
    aCmd[0] = PHPAL_I14443P3B_SW_ATTRIB_CMD;
 801501e:	231d      	movs	r3, #29
 8015020:	773b      	strb	r3, [r7, #28]

    /* copy PUPI to command frame */
    (void)memcpy(&aCmd[1], &pAtqb[1], 4);
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	3301      	adds	r3, #1
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	f8c7 301d 	str.w	r3, [r7, #29]

    /* Param1: TR0, TR1, SOF/EOF suppression */
    aCmd[5] = pDataParams->bAttribParam1;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	7d9b      	ldrb	r3, [r3, #22]
 8015030:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    /* Param2: Dsi, Dri, FSDI */
    aCmd[6] = (bDsi << 6U) | (bDri << 4U) | bFsdi;
 8015034:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8015038:	019b      	lsls	r3, r3, #6
 801503a:	b25a      	sxtb	r2, r3
 801503c:	f997 3044 	ldrsb.w	r3, [r7, #68]	@ 0x44
 8015040:	011b      	lsls	r3, r3, #4
 8015042:	b25b      	sxtb	r3, r3
 8015044:	4313      	orrs	r3, r2
 8015046:	b25a      	sxtb	r2, r3
 8015048:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801504c:	4313      	orrs	r3, r2
 801504e:	b25b      	sxtb	r3, r3
 8015050:	b2db      	uxtb	r3, r3
 8015052:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    /* Emvco: case_id TB107_X
     * PCD shall disregards the value of bits b4-b2 of Protocol_Type
     */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801505c:	2b01      	cmp	r3, #1
 801505e:	d108      	bne.n	8015072 <phpalI14443p3b_Sw_Attrib+0xca>
    {
        aCmd[7] = pAtqb[10] & 0x01U;
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	330a      	adds	r3, #10
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	f003 0301 	and.w	r3, r3, #1
 801506a:	b2db      	uxtb	r3, r3
 801506c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015070:	e007      	b.n	8015082 <phpalI14443p3b_Sw_Attrib+0xda>
    }
    else
    {
        /* Param3: confirmation of protocol info byte 2 (protocol type and minimum TR2) */
        aCmd[7] = pAtqb[10] & 0x07U;
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	330a      	adds	r3, #10
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	f003 0307 	and.w	r3, r3, #7
 801507c:	b2db      	uxtb	r3, r3
 801507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    /* Param4: Cid */
    /* check if supported by PICC, check given value for < 0x0F */
    if (0U != (pAtqb[11] & 0x01U))
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	330b      	adds	r3, #11
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	f003 0301 	and.w	r3, r3, #1
 801508c:	2b00      	cmp	r3, #0
 801508e:	d006      	beq.n	801509e <phpalI14443p3b_Sw_Attrib+0xf6>
    {
        if (bCid > 0x0EU)
 8015090:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015094:	2b0e      	cmp	r3, #14
 8015096:	d905      	bls.n	80150a4 <phpalI14443p3b_Sw_Attrib+0xfc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015098:	f240 4321 	movw	r3, #1057	@ 0x421
 801509c:	e23c      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }
    else
    {
        bCid = 0x00;
 801509e:	2300      	movs	r3, #0
 80150a0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    }
    aCmd[8] = bCid;
 80150a4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80150a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    /* Calculate FWT timeout */
    /* get the Fwt, because we need it for the timeout. */
    pDataParams->bFwi = (uint8_t)(pAtqb[11] >> 4U);
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	330b      	adds	r3, #11
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	091b      	lsrs	r3, r3, #4
 80150b4:	b2da      	uxtb	r2, r3
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	745a      	strb	r2, [r3, #17]
    if (pDataParams->bFwi == 0x0FU)
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	7c5b      	ldrb	r3, [r3, #17]
 80150be:	2b0f      	cmp	r3, #15
 80150c0:	d102      	bne.n	80150c8 <phpalI14443p3b_Sw_Attrib+0x120>
    {
        pDataParams->bFwi = PHPAL_I14443P3B_SW_FWI_DEFAULT;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2204      	movs	r2, #4
 80150c6:	745a      	strb	r2, [r3, #17]
    }

    /* Calculate FWT timeout */
    fFwt = (PHPAL_I14443P3B_SW_FWT_MIN_US * ((uint32_t)1U << pDataParams->bFwi));
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	7c5b      	ldrb	r3, [r3, #17]
 80150cc:	461a      	mov	r2, r3
 80150ce:	2301      	movs	r3, #1
 80150d0:	4093      	lsls	r3, r2
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7eb fa16 	bl	8000504 <__aeabi_ui2d>
 80150d8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8015388 <phpalI14443p3b_Sw_Attrib+0x3e0>)
 80150da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150de:	f7eb fa8b 	bl	80005f8 <__aeabi_dmul>
 80150e2:	4602      	mov	r2, r0
 80150e4:	460b      	mov	r3, r1
 80150e6:	4610      	mov	r0, r2
 80150e8:	4619      	mov	r1, r3
 80150ea:	f7eb fd5d 	bl	8000ba8 <__aeabi_d2f>
 80150ee:	4603      	mov	r3, r0
 80150f0:	633b      	str	r3, [r7, #48]	@ 0x30
    if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80150f8:	2b03      	cmp	r3, #3
 80150fa:	d108      	bne.n	801510e <phpalI14443p3b_Sw_Attrib+0x166>
    {
        /* Add extension time */
        fFwt += PHPAL_I14443P3B_SW_EXT_TIME_US;
 80150fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015100:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8015378 <phpalI14443p3b_Sw_Attrib+0x3d0>
 8015104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015108:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 801510c:	e014      	b.n	8015138 <phpalI14443p3b_Sw_Attrib+0x190>
    }
    else
    {
        /* As per Digital Spec V1.1 req 7.9.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTB for a Response */
        fFwt += PHPAL_I14443P3B_SW_DELTA_FWT_US;
 801510e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015112:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801537c <phpalI14443p3b_Sw_Attrib+0x3d4>
 8015116:	ee77 7a87 	vadd.f32	s15, s15, s14
 801511a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015124:	2b01      	cmp	r3, #1
 8015126:	d107      	bne.n	8015138 <phpalI14443p3b_Sw_Attrib+0x190>
            /* As per EMVCo, add delta Tpcd time along with delta FWT time */
            fFwt += PHPAL_I14443P3B_SW_DELTA_TPCD_US;
 8015128:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801512c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8015380 <phpalI14443p3b_Sw_Attrib+0x3d8>
 8015130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015134:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        }
    }
    dwFwt = (uint32_t)fFwt;
 8015138:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801513c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015140:	ee17 3a90 	vmov	r3, s15
 8015144:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* ISO IEC 14443-3, 7.9.4.3 FWI:
    In case of extended ATQB ...
    ... FWT applies after the Answer to ATTRIB and
    ... the waiting time for the Answer to ATTRIB is fixed to ~4,8 ms */

    if (bAtqbLen == 13U)
 8015146:	79fb      	ldrb	r3, [r7, #7]
 8015148:	2b0d      	cmp	r3, #13
 801514a:	d10e      	bne.n	801516a <phpalI14443p3b_Sw_Attrib+0x1c2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	685b      	ldr	r3, [r3, #4]
 8015150:	f241 22ff 	movw	r2, #4863	@ 0x12ff
 8015154:	210d      	movs	r1, #13
 8015156:	4618      	mov	r0, r3
 8015158:	f7f9 f9be 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801515c:	4603      	mov	r3, r0
 801515e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015160:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015162:	2b00      	cmp	r3, #0
 8015164:	d029      	beq.n	80151ba <phpalI14443p3b_Sw_Attrib+0x212>
 8015166:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015168:	e1d6      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
            PHPAL_I14443P3B_SW_ATTRIB_TIME_US + PHPAL_I14443P3B_SW_EXT_TIME_US));
    }
    else
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801516c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015170:	d314      	bcc.n	801519c <phpalI14443p3b_Sw_Attrib+0x1f4>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	6858      	ldr	r0, [r3, #4]
 8015176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015178:	4a82      	ldr	r2, [pc, #520]	@ (8015384 <phpalI14443p3b_Sw_Attrib+0x3dc>)
 801517a:	fba2 2303 	umull	r2, r3, r2, r3
 801517e:	099b      	lsrs	r3, r3, #6
 8015180:	b29b      	uxth	r3, r3
 8015182:	3301      	adds	r3, #1
 8015184:	b29b      	uxth	r3, r3
 8015186:	461a      	mov	r2, r3
 8015188:	210e      	movs	r1, #14
 801518a:	f7f9 f9a5 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801518e:	4603      	mov	r3, r0
 8015190:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015192:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015194:	2b00      	cmp	r3, #0
 8015196:	d010      	beq.n	80151ba <phpalI14443p3b_Sw_Attrib+0x212>
 8015198:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801519a:	e1bd      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80151a2:	b292      	uxth	r2, r2
 80151a4:	210d      	movs	r1, #13
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7f9 f996 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80151ac:	4603      	mov	r3, r0
 80151ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80151b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d001      	beq.n	80151ba <phpalI14443p3b_Sw_Attrib+0x212>
 80151b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80151b8:	e1ae      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>

        }
    }

    /* Exchange command */
    wRespLength = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	82fb      	strh	r3, [r7, #22]
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	6858      	ldr	r0, [r3, #4]
 80151c2:	f107 021c 	add.w	r2, r7, #28
 80151c6:	f107 0316 	add.w	r3, r7, #22
 80151ca:	9301      	str	r3, [sp, #4]
 80151cc:	f107 0318 	add.w	r3, r7, #24
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	2309      	movs	r3, #9
 80151d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80151d8:	f7f8 fdc6 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 80151dc:	4603      	mov	r3, r0
 80151de:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80151e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d001      	beq.n	80151ea <phpalI14443p3b_Sw_Attrib+0x242>
 80151e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80151e8:	e196      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
        9,
        &pResp,
        &wRespLength));

    /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
    statusTmp = phhalHw_Exchange(
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	6858      	ldr	r0, [r3, #4]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	699a      	ldr	r2, [r3, #24]
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	8bd9      	ldrh	r1, [r3, #30]
 80151f6:	f107 0316 	add.w	r3, r7, #22
 80151fa:	9301      	str	r3, [sp, #4]
 80151fc:	f107 0318 	add.w	r3, r7, #24
 8015200:	9300      	str	r3, [sp, #0]
 8015202:	460b      	mov	r3, r1
 8015204:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8015208:	f7f8 fdae 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 801520c:	4603      	mov	r3, r0
 801520e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        pDataParams->pHigherLayerInf,
        pDataParams->wHigherLayerInfLen,
        &pResp,
        &wRespLength);

    bTemp = pDataParams->bRetryCount;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8015216:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    /* check and perform re-transmission of ATTRIB in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 14.7.1.1
     */
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 801521a:	e04d      	b.n	80152b8 <phpalI14443p3b_Sw_Attrib+0x310>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015222:	2b01      	cmp	r3, #1
 8015224:	d118      	bne.n	8015258 <phpalI14443p3b_Sw_Attrib+0x2b0>
        {
            if((((statusTmp & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((statusTmp & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8015226:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015228:	b2db      	uxtb	r3, r3
 801522a:	2b01      	cmp	r3, #1
 801522c:	d003      	beq.n	8015236 <phpalI14443p3b_Sw_Attrib+0x28e>
 801522e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015230:	b2db      	uxtb	r3, r3
 8015232:	2b11      	cmp	r3, #17
 8015234:	d10e      	bne.n	8015254 <phpalI14443p3b_Sw_Attrib+0x2ac>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801523e:	2100      	movs	r1, #0
 8015240:	4618      	mov	r0, r3
 8015242:	f7f9 f88d 	bl	800e360 <phhalHw_Pn5180_Wait>
 8015246:	4603      	mov	r3, r0
 8015248:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801524a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801524c:	2b00      	cmp	r3, #0
 801524e:	d003      	beq.n	8015258 <phpalI14443p3b_Sw_Attrib+0x2b0>
 8015250:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015252:	e161      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return statusTmp;
 8015254:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015256:	e15f      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
            }
        }

         /* Emvco:  case_id TB305_X  TB312_X and Req. 9.6.1.3 */
        wRespLength = 0;
 8015258:	2300      	movs	r3, #0
 801525a:	82fb      	strh	r3, [r7, #22]

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	6858      	ldr	r0, [r3, #4]
 8015260:	f107 021c 	add.w	r2, r7, #28
 8015264:	f107 0316 	add.w	r3, r7, #22
 8015268:	9301      	str	r3, [sp, #4]
 801526a:	f107 0318 	add.w	r3, r7, #24
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	2309      	movs	r3, #9
 8015272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015276:	f7f8 fd77 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 801527a:	4603      	mov	r3, r0
 801527c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801527e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015280:	2b00      	cmp	r3, #0
 8015282:	d001      	beq.n	8015288 <phpalI14443p3b_Sw_Attrib+0x2e0>
 8015284:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015286:	e147      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
            9,
            &pResp,
            &wRespLength));

        /* the remaining part of the ATTRIB command frame holds the Higher Layer INF */
        statusTmp = phhalHw_Exchange(
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	6858      	ldr	r0, [r3, #4]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	699a      	ldr	r2, [r3, #24]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	8bd9      	ldrh	r1, [r3, #30]
 8015294:	f107 0316 	add.w	r3, r7, #22
 8015298:	9301      	str	r3, [sp, #4]
 801529a:	f107 0318 	add.w	r3, r7, #24
 801529e:	9300      	str	r3, [sp, #0]
 80152a0:	460b      	mov	r3, r1
 80152a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80152a6:	f7f8 fd5f 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 80152aa:	4603      	mov	r3, r0
 80152ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
            pDataParams->pHigherLayerInf,
            pDataParams->wHigherLayerInfLen,
            &pResp,
            &wRespLength);

        bTemp--;
 80152ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80152b2:	3b01      	subs	r3, #1
 80152b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    while((bTemp > 0U) && (PH_ERR_SUCCESS != (statusTmp & PH_ERR_MASK)))
 80152b8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d003      	beq.n	80152c8 <phpalI14443p3b_Sw_Attrib+0x320>
 80152c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d1a9      	bne.n	801521c <phpalI14443p3b_Sw_Attrib+0x274>
    }

    PH_CHECK_SUCCESS(statusTmp);
 80152c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d001      	beq.n	80152d2 <phpalI14443p3b_Sw_Attrib+0x32a>
 80152ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80152d0:	e122      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>

    /* we hopefully received at least one byte */
    if (wRespLength < 1U)
 80152d2:	8afb      	ldrh	r3, [r7, #22]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <phpalI14443p3b_Sw_Attrib+0x336>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80152d8:	f240 4306 	movw	r3, #1030	@ 0x406
 80152dc:	e11c      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* we receive MBLI and CID in the first byte: */
    /* check the received cid: */
    if (((pAtqb[11] & 0x01U) != 0U) && ((pResp[0] & 0x0FU) != bCid))
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	330b      	adds	r3, #11
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	f003 0301 	and.w	r3, r3, #1
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d00a      	beq.n	8015302 <phpalI14443p3b_Sw_Attrib+0x35a>
 80152ec:	69bb      	ldr	r3, [r7, #24]
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	f003 020f 	and.w	r2, r3, #15
 80152f4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d002      	beq.n	8015302 <phpalI14443p3b_Sw_Attrib+0x35a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 80152fc:	f240 4306 	movw	r3, #1030	@ 0x406
 8015300:	e10a      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* If the CID is not supported, PICC SHALL set the CID to 0 */
    /* PCD SHALL treat a CID field with a different value as Protocol Error */
    /* Digital Protocol 1.1, Requirements 166 and EMVCo 2.6, Requirements 6.24, 6.4.1.10 */
    if ((pDataParams->bOpeMode != RD_LIB_MODE_ISO) && (((pAtqb[11] & 0x01U) == 0U) && ((pResp[0] & 0x0FU) != 0x0U)))
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015308:	2b03      	cmp	r3, #3
 801530a:	d00f      	beq.n	801532c <phpalI14443p3b_Sw_Attrib+0x384>
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	330b      	adds	r3, #11
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	f003 0301 	and.w	r3, r3, #1
 8015316:	2b00      	cmp	r3, #0
 8015318:	d108      	bne.n	801532c <phpalI14443p3b_Sw_Attrib+0x384>
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	f003 030f 	and.w	r3, r3, #15
 8015322:	2b00      	cmp	r3, #0
 8015324:	d002      	beq.n	801532c <phpalI14443p3b_Sw_Attrib+0x384>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8015326:	f240 4306 	movw	r3, #1030	@ 0x406
 801532a:	e0f5      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
    }

    /* Note: ISO14443-3 7.11: The MBLI (maximum buffer size) gives information about
    the PICCs internal buffer */
    *pMbli = (uint8_t)(pResp[0] >> 4U);
 801532c:	69bb      	ldr	r3, [r7, #24]
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	091b      	lsrs	r3, r3, #4
 8015332:	b2da      	uxtb	r2, r3
 8015334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015336:	701a      	strb	r2, [r3, #0]

    if (1U < wRespLength)
 8015338:	8afb      	ldrh	r3, [r7, #22]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d931      	bls.n	80153a2 <phpalI14443p3b_Sw_Attrib+0x3fa>
    {
        /* we received some Higher Layer INF bytes:
        ISO14443-3 TypeB, 7.11 Higher Response (optional 0 or "more" bytes) --> see page 46. */
        pDataParams->wHigherLayerRespLen = wRespLength - 1u;
 801533e:	8afb      	ldrh	r3, [r7, #22]
 8015340:	3b01      	subs	r3, #1
 8015342:	b29a      	uxth	r2, r3
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* should we have received it? */
        if ( pDataParams->wHigherLayerInfLen == 0U )
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	8bdb      	ldrh	r3, [r3, #30]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d105      	bne.n	801535c <phpalI14443p3b_Sw_Attrib+0x3b4>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2200      	movs	r2, #0
 8015354:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8015356:	f240 4306 	movw	r3, #1030	@ 0x406
 801535a:	e0dd      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
        }

        if (pDataParams->wHigherLayerRespLen > pDataParams->wHigherLayerRespSize)
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015364:	429a      	cmp	r2, r3
 8015366:	d913      	bls.n	8015390 <phpalI14443p3b_Sw_Attrib+0x3e8>
        {
            pDataParams->wHigherLayerRespLen = 0;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2200      	movs	r2, #0
 801536c:	84da      	strh	r2, [r3, #38]	@ 0x26
            return PH_ADD_COMPCODE_FIXED(PH_ERR_BUFFER_OVERFLOW, PH_COMP_PAL_ISO14443P3B);
 801536e:	f240 4304 	movw	r3, #1028	@ 0x404
 8015372:	e0d1      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
 8015374:	f3af 8000 	nop.w
 8015378:	427c0000 	.word	0x427c0000
 801537c:	4566a000 	.word	0x4566a000
 8015380:	447a0000 	.word	0x447a0000
 8015384:	10624dd3 	.word	0x10624dd3
 8015388:	d12e109d 	.word	0xd12e109d
 801538c:	4072e109 	.word	0x4072e109
        }
        (void)memcpy( pDataParams->pHigherLayerResp, &pResp[1], pDataParams->wHigherLayerRespLen );
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	6a18      	ldr	r0, [r3, #32]
 8015394:	69bb      	ldr	r3, [r7, #24]
 8015396:	1c59      	adds	r1, r3, #1
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801539c:	461a      	mov	r2, r3
 801539e:	f009 fe42 	bl	801f026 <memcpy>
    }

    /* Now, that the PICC accepted our protocol settings, we can store them in the structure */
    if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153a8:	2b03      	cmp	r3, #3
 80153aa:	d006      	beq.n	80153ba <phpalI14443p3b_Sw_Attrib+0x412>
    {
        pDataParams->bCidSupported = 0x00;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2200      	movs	r2, #0
 80153b0:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = 0x00;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	2200      	movs	r2, #0
 80153b6:	73da      	strb	r2, [r3, #15]
 80153b8:	e011      	b.n	80153de <phpalI14443p3b_Sw_Attrib+0x436>
    }
    else
    {
        pDataParams->bCidSupported = pAtqb[11] & 0x01U;
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	330b      	adds	r3, #11
 80153be:	781b      	ldrb	r3, [r3, #0]
 80153c0:	f003 0301 	and.w	r3, r3, #1
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	739a      	strb	r2, [r3, #14]
        pDataParams->bNadSupported = (pAtqb[11] & 0x02U) >> 1U;
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	330b      	adds	r3, #11
 80153ce:	781b      	ldrb	r3, [r3, #0]
 80153d0:	085b      	lsrs	r3, r3, #1
 80153d2:	b2db      	uxtb	r3, r3
 80153d4:	f003 0301 	and.w	r3, r3, #1
 80153d8:	b2da      	uxtb	r2, r3
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	73da      	strb	r2, [r3, #15]
    }
    pDataParams->bCid = pResp[0] & 0x0FU;
 80153de:	69bb      	ldr	r3, [r7, #24]
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	f003 030f 	and.w	r3, r3, #15
 80153e6:	b2da      	uxtb	r2, r3
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	741a      	strb	r2, [r3, #16]
    pDataParams->bFsci = (uint8_t)(pAtqb[10] >> 4U);
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	330a      	adds	r3, #10
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	091b      	lsrs	r3, r3, #4
 80153f4:	b2da      	uxtb	r2, r3
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	749a      	strb	r2, [r3, #18]
    pDataParams->bFsdi = bFsdi;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	79ba      	ldrb	r2, [r7, #6]
 80153fe:	74da      	strb	r2, [r3, #19]
    pDataParams->bDri = bDri;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8015406:	751a      	strb	r2, [r3, #20]
    pDataParams->bDsi = bDsi;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 801540e:	755a      	strb	r2, [r3, #21]

    bTemp = 0;
 8015410:	2300      	movs	r3, #0
 8015412:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* If we had an extended ATQB, the timeout was set for the reception
    of the ATTRIB command (see line 280). */
    if (bAtqbLen == 13U)
 8015416:	79fb      	ldrb	r3, [r7, #7]
 8015418:	2b0d      	cmp	r3, #13
 801541a:	d125      	bne.n	8015468 <phpalI14443p3b_Sw_Attrib+0x4c0>
    {
        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801541e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015422:	d312      	bcc.n	801544a <phpalI14443p3b_Sw_Attrib+0x4a2>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	6858      	ldr	r0, [r3, #4]
 8015428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801542a:	4a3d      	ldr	r2, [pc, #244]	@ (8015520 <phpalI14443p3b_Sw_Attrib+0x578>)
 801542c:	fba2 2303 	umull	r2, r3, r2, r3
 8015430:	099b      	lsrs	r3, r3, #6
 8015432:	b29b      	uxth	r3, r3
 8015434:	461a      	mov	r2, r3
 8015436:	210e      	movs	r1, #14
 8015438:	f7f9 f84e 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801543c:	4603      	mov	r3, r0
 801543e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015440:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015442:	2b00      	cmp	r3, #0
 8015444:	d010      	beq.n	8015468 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8015446:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015448:	e066      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)(dwFwt / 1000U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015450:	b292      	uxth	r2, r2
 8015452:	210d      	movs	r1, #13
 8015454:	4618      	mov	r0, r3
 8015456:	f7f9 f83f 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801545a:	4603      	mov	r3, r0
 801545c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801545e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015460:	2b00      	cmp	r3, #0
 8015462:	d001      	beq.n	8015468 <phpalI14443p3b_Sw_Attrib+0x4c0>
 8015464:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015466:	e057      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
                (uint16_t)dwFwt));
        }
    }

    /* Set baud rate on Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p3b_Sw_SetReaderBaudRateEx(pDataParams));
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f000 f9ef 	bl	801584c <phpalI14443p3b_Sw_SetReaderBaudRateEx>
 801546e:	4603      	mov	r3, r0
 8015470:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015472:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015474:	2b00      	cmp	r3, #0
 8015476:	d001      	beq.n	801547c <phpalI14443p3b_Sw_Attrib+0x4d4>
 8015478:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801547a:	e04d      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>

    /* Applying Tx Wait saved according to the TR value of ATQb as setreaderbaudrateEx restores default */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	6858      	ldr	r0, [r3, #4]
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	8b9b      	ldrh	r3, [r3, #28]
 8015484:	461a      	mov	r2, r3
 8015486:	2107      	movs	r1, #7
 8015488:	f7f9 f826 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801548c:	4603      	mov	r3, r0
 801548e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015490:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <phpalI14443p3b_Sw_Attrib+0x4f2>
 8015496:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015498:	e03e      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
        PHHAL_HW_CONFIG_TXWAIT_US,
        pDataParams->wTxWait));

    /* If we have had received an extended ATQB with an SFGT (startup frame guard time)
    we need to wait this time here. */
    if (bAtqbLen == 13U)
 801549a:	79fb      	ldrb	r3, [r7, #7]
 801549c:	2b0d      	cmp	r3, #13
 801549e:	d13a      	bne.n	8015516 <phpalI14443p3b_Sw_Attrib+0x56e>
    {
        /* fetch sfgi value from response */
        bTemp = (uint8_t)(pAtqb[12] >> 4U);
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	330c      	adds	r3, #12
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	091b      	lsrs	r3, r3, #4
 80154a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

        if (bTemp == 0x0FU)
 80154ac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80154b0:	2b0f      	cmp	r3, #15
 80154b2:	d102      	bne.n	80154ba <phpalI14443p3b_Sw_Attrib+0x512>
        {
            bTemp = PHPAL_I14443P3B_SW_SFGI_DEFAULT;
 80154b4:	2300      	movs	r3, #0
 80154b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        /* Calculate SFGT in Microseconds */
        dwSfgt = ((uint32_t)(PHPAL_I14443P3B_SW_FWT_MIN_US) * ((uint32_t)1U << bTemp)) + PHPAL_I14443P3B_SW_EXT_TIME_US;
 80154ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80154be:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80154c2:	fa02 f303 	lsl.w	r3, r2, r3
 80154c6:	333f      	adds	r3, #63	@ 0x3f
 80154c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 80154ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80154d0:	d312      	bcc.n	80154f8 <phpalI14443p3b_Sw_Attrib+0x550>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MILLISECONDS, (uint16_t)(dwSfgt / 1000U)));
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	6858      	ldr	r0, [r3, #4]
 80154d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d8:	4a11      	ldr	r2, [pc, #68]	@ (8015520 <phpalI14443p3b_Sw_Attrib+0x578>)
 80154da:	fba2 2303 	umull	r2, r3, r2, r3
 80154de:	099b      	lsrs	r3, r3, #6
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	461a      	mov	r2, r3
 80154e4:	2101      	movs	r1, #1
 80154e6:	f7f8 ff3b 	bl	800e360 <phhalHw_Pn5180_Wait>
 80154ea:	4603      	mov	r3, r0
 80154ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80154ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d010      	beq.n	8015516 <phpalI14443p3b_Sw_Attrib+0x56e>
 80154f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80154f6:	e00f      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(pDataParams->pHalDataParams, PHHAL_HW_TIME_MICROSECONDS, (uint16_t)dwSfgt));
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154fe:	b292      	uxth	r2, r2
 8015500:	2100      	movs	r1, #0
 8015502:	4618      	mov	r0, r3
 8015504:	f7f8 ff2c 	bl	800e360 <phhalHw_Pn5180_Wait>
 8015508:	4603      	mov	r3, r0
 801550a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801550c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801550e:	2b00      	cmp	r3, #0
 8015510:	d001      	beq.n	8015516 <phpalI14443p3b_Sw_Attrib+0x56e>
 8015512:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015514:	e000      	b.n	8015518 <phpalI14443p3b_Sw_Attrib+0x570>
        }
    }

    return PH_ERR_SUCCESS;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	3738      	adds	r7, #56	@ 0x38
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	10624dd3 	.word	0x10624dd3

08015524 <phpalI14443p3b_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8015524:	b480      	push	{r7}
 8015526:	b085      	sub	sp, #20
 8015528:	af00      	add	r7, sp, #0
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	7b9a      	ldrb	r2, [r3, #14]
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	7c1a      	ldrb	r2, [r3, #16]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	7bda      	ldrb	r2, [r3, #15]
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	7c5a      	ldrb	r2, [r3, #17]
 801554e:	69bb      	ldr	r3, [r7, #24]
 8015550:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	7cda      	ldrb	r2, [r3, #19]
 8015556:	69fb      	ldr	r3, [r7, #28]
 8015558:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	7c9a      	ldrb	r2, [r3, #18]
 801555e:	6a3b      	ldr	r3, [r7, #32]
 8015560:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8015562:	2300      	movs	r3, #0
}
 8015564:	4618      	mov	r0, r3
 8015566:	3714      	adds	r7, #20
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <phpalI14443p3b_Sw_CheckATQBEx>:
    uint8_t * pResp,
    uint16_t wRespLength,
    uint8_t * pAtqb,
    uint8_t * pAtqbLen
    )
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b086      	sub	sp, #24
 8015574:	af00      	add	r7, sp, #0
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	60b9      	str	r1, [r7, #8]
 801557a:	603b      	str	r3, [r7, #0]
 801557c:	4613      	mov	r3, r2
 801557e:	80fb      	strh	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bTR2;

    /* Response check */
    /* Digital Protocol Requirement 49, Section 5.6.1.5 */
    if ((wRespLength != 12U) && (wRespLength != 13U))
 8015580:	88fb      	ldrh	r3, [r7, #6]
 8015582:	2b0c      	cmp	r3, #12
 8015584:	d005      	beq.n	8015592 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
 8015586:	88fb      	ldrh	r3, [r7, #6]
 8015588:	2b0d      	cmp	r3, #13
 801558a:	d002      	beq.n	8015592 <phpalI14443p3b_Sw_CheckATQBEx+0x22>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801558c:	f240 4306 	movw	r3, #1030	@ 0x406
 8015590:	e0ae      	b.n	80156f0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* The ATQB should look like the following (see ISO14443-3 7.9.1): */
    /* [0x50][PUPI0][PUPI1][PUPI2][PUPI3][PInfo0][PInfo1][PInfo2]([PInfo3])[CRC][CRC] */

    if ( pResp[0] != 0x50U )    /* ATQB byte */
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	2b50      	cmp	r3, #80	@ 0x50
 8015598:	d002      	beq.n	80155a0 <phpalI14443p3b_Sw_CheckATQBEx+0x30>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 801559a:	f240 4306 	movw	r3, #1030	@ 0x406
 801559e:	e0a7      	b.n	80156f0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
    }

    /* Copy received AtqB */
    (void)memcpy(pAtqb, pResp, wRespLength);
 80155a0:	88fb      	ldrh	r3, [r7, #6]
 80155a2:	461a      	mov	r2, r3
 80155a4:	68b9      	ldr	r1, [r7, #8]
 80155a6:	6838      	ldr	r0, [r7, #0]
 80155a8:	f009 fd3d 	bl	801f026 <memcpy>
    *pAtqbLen = (uint8_t)wRespLength;
 80155ac:	88fb      	ldrh	r3, [r7, #6]
 80155ae:	b2da      	uxtb	r2, r3
 80155b0:	6a3b      	ldr	r3, [r7, #32]
 80155b2:	701a      	strb	r2, [r3, #0]

    if (pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80155ba:	2b02      	cmp	r3, #2
 80155bc:	d013      	beq.n	80155e6 <phpalI14443p3b_Sw_CheckATQBEx+0x76>
    {
        /* Max allowed frame size integer for ISO and EMVCo(v3.0) mode is less than or equals to 0x0C (4096 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0xC0U)
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	330a      	adds	r3, #10
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80155c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80155ca:	d91f      	bls.n	801560c <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0xC0U;
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	330a      	adds	r3, #10
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	f003 030f 	and.w	r3, r3, #15
 80155d6:	b2da      	uxtb	r2, r3
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	330a      	adds	r3, #10
 80155dc:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80155e0:	b2d2      	uxtb	r2, r2
 80155e2:	701a      	strb	r2, [r3, #0]
 80155e4:	e012      	b.n	801560c <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        }
    }
    else
    {
        /* Max allowed frame size integer for NFC(DP 1.1, Requirements 64) mode is less than or equals to 0x08 (256 bytes) */
        if ((uint8_t)(pAtqb[10] & 0xF0U) > 0x80U)
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	330a      	adds	r3, #10
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80155f0:	2b80      	cmp	r3, #128	@ 0x80
 80155f2:	d90b      	bls.n	801560c <phpalI14443p3b_Sw_CheckATQBEx+0x9c>
        {
            pAtqb[10] = (pAtqb[10] & 0x0FU) | 0x80U;
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	330a      	adds	r3, #10
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	f003 030f 	and.w	r3, r3, #15
 80155fe:	b2da      	uxtb	r2, r3
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	330a      	adds	r3, #10
 8015604:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8015608:	b2d2      	uxtb	r2, r2
 801560a:	701a      	strb	r2, [r3, #0]
/* Emvco: case_id 304_14
 * Conflict with TC304_14(added in 2.3.1a) and TC107_04
 * As per 6.3.2.8a in EMV Contactless Communication Protocol Specification Book D
 * Reset if b4 of Protocol Type set to (1)b
*/
    if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015612:	2b01      	cmp	r3, #1
 8015614:	d109      	bne.n	801562a <phpalI14443p3b_Sw_CheckATQBEx+0xba>
    {
        if((uint8_t)(pAtqb[10]& 0x08U) ==0x08U)
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	330a      	adds	r3, #10
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	f003 0308 	and.w	r3, r3, #8
 8015620:	2b00      	cmp	r3, #0
 8015622:	d002      	beq.n	801562a <phpalI14443p3b_Sw_CheckATQBEx+0xba>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P3B);
 8015624:	f240 4306 	movw	r3, #1030	@ 0x406
 8015628:	e062      	b.n	80156f0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
        }
    }

    if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015630:	2b03      	cmp	r3, #3
 8015632:	d132      	bne.n	801569a <phpalI14443p3b_Sw_CheckATQBEx+0x12a>
    {
        /* Check TR2 value received in Atqb and set relevant TxWait as per ISO-IEC 14443-3. */
        bTR2 = (uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS);
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	330a      	adds	r3, #10
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	085b      	lsrs	r3, r3, #1
 801563c:	b2db      	uxtb	r3, r3
 801563e:	f003 0303 	and.w	r3, r3, #3
 8015642:	757b      	strb	r3, [r7, #21]
        switch(bTR2)
 8015644:	7d7b      	ldrb	r3, [r7, #21]
 8015646:	2b02      	cmp	r3, #2
 8015648:	d00e      	beq.n	8015668 <phpalI14443p3b_Sw_CheckATQBEx+0xf8>
 801564a:	2b02      	cmp	r3, #2
 801564c:	dc11      	bgt.n	8015672 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
 801564e:	2b00      	cmp	r3, #0
 8015650:	d002      	beq.n	8015658 <phpalI14443p3b_Sw_CheckATQBEx+0xe8>
 8015652:	2b01      	cmp	r3, #1
 8015654:	d004      	beq.n	8015660 <phpalI14443p3b_Sw_CheckATQBEx+0xf0>
 8015656:	e00c      	b.n	8015672 <phpalI14443p3b_Sw_CheckATQBEx+0x102>
        {
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_0:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_0;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	2285      	movs	r2, #133	@ 0x85
 801565c:	839a      	strh	r2, [r3, #28]
            break;
 801565e:	e00d      	b.n	801567c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_1:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_1;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	22f6      	movs	r2, #246	@ 0xf6
 8015664:	839a      	strh	r2, [r3, #28]
            break;
 8015666:	e009      	b.n	801567c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        case PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_2:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_2;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	f240 128d 	movw	r2, #397	@ 0x18d
 801566e:	839a      	strh	r2, [r3, #28]
            break;
 8015670:	e004      	b.n	801567c <phpalI14443p3b_Sw_CheckATQBEx+0x10c>
        default:
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	f240 22bb 	movw	r2, #699	@ 0x2bb
 8015678:	839a      	strh	r2, [r3, #28]
            break;
 801567a:	bf00      	nop
        }

        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	6858      	ldr	r0, [r3, #4]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	8b9b      	ldrh	r3, [r3, #28]
 8015684:	461a      	mov	r2, r3
 8015686:	2107      	movs	r1, #7
 8015688:	f7f8 ff26 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801568c:	4603      	mov	r3, r0
 801568e:	82fb      	strh	r3, [r7, #22]
 8015690:	8afb      	ldrh	r3, [r7, #22]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d022      	beq.n	80156dc <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 8015696:	8afb      	ldrh	r3, [r7, #22]
 8015698:	e02a      	b.n	80156f0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
            pDataParams->wTxWait));
    }
    else
    {
        /* If the TR2 value is (11)b then the default TxWait of 500us (6780/fc) has to changed to 699us (9472/fc). */
        if ((uint8_t)((pAtqb[10] & PHPAL_I14443P3B_SW_MINIMUM_TR2_MASK) >> PHPAL_I14443P3B_SW_MINIMUM_TR2_POS)
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	330a      	adds	r3, #10
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	085b      	lsrs	r3, r3, #1
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f003 0303 	and.w	r3, r3, #3
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	2b03      	cmp	r3, #3
 80156ac:	d112      	bne.n	80156d4 <phpalI14443p3b_Sw_CheckATQBEx+0x164>
            == PHPAL_I14443P3B_SW_MINIMUM_TR2_VALUE_3)
        {
            pDataParams->wTxWait = (uint16_t)PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80156b4:	839a      	strh	r2, [r3, #28]
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	f240 22bb 	movw	r2, #699	@ 0x2bb
 80156be:	2107      	movs	r1, #7
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7f8 ff09 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80156c6:	4603      	mov	r3, r0
 80156c8:	82fb      	strh	r3, [r7, #22]
 80156ca:	8afb      	ldrh	r3, [r7, #22]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d005      	beq.n	80156dc <phpalI14443p3b_Sw_CheckATQBEx+0x16c>
 80156d0:	8afb      	ldrh	r3, [r7, #22]
 80156d2:	e00d      	b.n	80156f0 <phpalI14443p3b_Sw_CheckATQBEx+0x180>
                PHHAL_HW_CONFIG_TXWAIT_US,
                PHPAL_I14443P3B_SW_TXWAIT_US_TR2_3));
        }
        else
        {
            pDataParams->wTxWait = PHPAL_I14443P3B_SW_TXWAIT_US_DEFAULT;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80156da:	839a      	strh	r2, [r3, #28]
        }
    }

    /* and also copy the PUPI into the protocol params structure to be available
    for a possible following HaltB command */
    (void)memcpy( pDataParams->pPupi, &pAtqb[1], (uint32_t)(sizeof(pDataParams->pPupi)) );
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	3309      	adds	r3, #9
 80156e0:	683a      	ldr	r2, [r7, #0]
 80156e2:	3201      	adds	r2, #1
 80156e4:	6812      	ldr	r2, [r2, #0]
 80156e6:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	2201      	movs	r2, #1
 80156ec:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 80156ee:	2300      	movs	r3, #0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3718      	adds	r7, #24
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <phpalI14443p3b_Sw_RequestBEx>:
                                        uint8_t bAfi,
                                        uint8_t bExtAtqb,
                                        uint8_t * pAtqb,
                                        uint8_t * pAtqbLen
                                        )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b088      	sub	sp, #32
 80156fc:	af02      	add	r7, sp, #8
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	4608      	mov	r0, r1
 8015702:	4611      	mov	r1, r2
 8015704:	461a      	mov	r2, r3
 8015706:	4603      	mov	r3, r0
 8015708:	70fb      	strb	r3, [r7, #3]
 801570a:	460b      	mov	r3, r1
 801570c:	70bb      	strb	r3, [r7, #2]
 801570e:	4613      	mov	r3, r2
 8015710:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015712:	2300      	movs	r3, #0
 8015714:	60fb      	str	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015716:	2300      	movs	r3, #0
 8015718:	817b      	strh	r3, [r7, #10]

    /* parameter check */
    if (bNumSlots > 4U)
 801571a:	78bb      	ldrb	r3, [r7, #2]
 801571c:	2b04      	cmp	r3, #4
 801571e:	d902      	bls.n	8015726 <phpalI14443p3b_Sw_RequestBEx+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 8015720:	f240 4321 	movw	r3, #1057	@ 0x421
 8015724:	e08d      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    }

    /* Build the command */
    aCmd[0] = PHPAL_I14443P3B_SW_APF;
 8015726:	2305      	movs	r3, #5
 8015728:	743b      	strb	r3, [r7, #16]
    aCmd[1] = bAfi;
 801572a:	787b      	ldrb	r3, [r7, #1]
 801572c:	747b      	strb	r3, [r7, #17]
    aCmd[2] = bNumSlots;    /* N = 2^bNumSlots*/
 801572e:	78bb      	ldrb	r3, [r7, #2]
 8015730:	74bb      	strb	r3, [r7, #18]

    /* Set wakeup bit if necessary */
    if (0U != (bIsWakeUp))
 8015732:	78fb      	ldrb	r3, [r7, #3]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d004      	beq.n	8015742 <phpalI14443p3b_Sw_RequestBEx+0x4a>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_WUP_BIT;
 8015738:	7cbb      	ldrb	r3, [r7, #18]
 801573a:	f043 0308 	orr.w	r3, r3, #8
 801573e:	b2db      	uxtb	r3, r3
 8015740:	74bb      	strb	r3, [r7, #18]
    }

    /* Enable Extended ATQB if necessary */
    if (bExtAtqb != PH_OFF)
 8015742:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d004      	beq.n	8015754 <phpalI14443p3b_Sw_RequestBEx+0x5c>
    {
        aCmd[2] |= PHPAL_I14443P3B_SW_PARAM_EXTATQB_BIT;
 801574a:	7cbb      	ldrb	r3, [r7, #18]
 801574c:	f043 0310 	orr.w	r3, r3, #16
 8015750:	b2db      	uxtb	r3, r3
 8015752:	74bb      	strb	r3, [r7, #18]
    }

    /* Store usage of Extended ATQB */
    pDataParams->bExtAtqb = bExtAtqb;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f897 2020 	ldrb.w	r2, [r7, #32]
 801575a:	721a      	strb	r2, [r3, #8]

    /* PUPI is invalid */
    pDataParams->bPupiValid = PH_OFF;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2200      	movs	r2, #0
 8015760:	735a      	strb	r2, [r3, #13]

    /* Reset default data rates */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	2109      	movs	r1, #9
 801576a:	4618      	mov	r0, r3
 801576c:	f7f8 feb4 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8015770:	4603      	mov	r3, r0
 8015772:	82fb      	strh	r3, [r7, #22]
 8015774:	8afb      	ldrh	r3, [r7, #22]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d001      	beq.n	801577e <phpalI14443p3b_Sw_RequestBEx+0x86>
 801577a:	8afb      	ldrh	r3, [r7, #22]
 801577c:	e061      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	210a      	movs	r1, #10
 8015786:	4618      	mov	r0, r3
 8015788:	f7f8 fea6 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801578c:	4603      	mov	r3, r0
 801578e:	82fb      	strh	r3, [r7, #22]
 8015790:	8afb      	ldrh	r3, [r7, #22]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d001      	beq.n	801579a <phpalI14443p3b_Sw_RequestBEx+0xa2>
 8015796:	8afb      	ldrh	r3, [r7, #22]
 8015798:	e053      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
        PHHAL_HW_RF_DATARATE_106));

    /* Set RequestB timeout */
    if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d10e      	bne.n	80157c2 <phpalI14443p3b_Sw_RequestBEx+0xca>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	685b      	ldr	r3, [r3, #4]
 80157a8:	f240 22d6 	movw	r2, #726	@ 0x2d6
 80157ac:	210d      	movs	r1, #13
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f8 fe92 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80157b4:	4603      	mov	r3, r0
 80157b6:	82fb      	strh	r3, [r7, #22]
 80157b8:	8afb      	ldrh	r3, [r7, #22]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d023      	beq.n	8015806 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80157be:	8afb      	ldrh	r3, [r7, #22]
 80157c0:	e03f      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            PHPAL_I14443P3B_SW_ATQB_TIME_US + (PHPAL_I14443P3B_SW_EXT_TIME_US * 2U)));
    }
    else if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80157c8:	2b03      	cmp	r3, #3
 80157ca:	d10e      	bne.n	80157ea <phpalI14443p3b_Sw_RequestBEx+0xf2>
    {
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	f240 2297 	movw	r2, #663	@ 0x297
 80157d4:	210d      	movs	r1, #13
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7f8 fe7e 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80157dc:	4603      	mov	r3, r0
 80157de:	82fb      	strh	r3, [r7, #22]
 80157e0:	8afb      	ldrh	r3, [r7, #22]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d00f      	beq.n	8015806 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 80157e6:	8afb      	ldrh	r3, [r7, #22]
 80157e8:	e02b      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
    else
    {
        /* As per Digital Protocol Ver1.1 Article 7.9.1.5
         * PCD should wait ~17ms (FWT(B,SENSB) + T(B,POLL)) * (566us + 16.4ms = ~17ms)
         */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	2211      	movs	r2, #17
 80157f0:	210e      	movs	r1, #14
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7f8 fe70 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80157f8:	4603      	mov	r3, r0
 80157fa:	82fb      	strh	r3, [r7, #22]
 80157fc:	8afb      	ldrh	r3, [r7, #22]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <phpalI14443p3b_Sw_RequestBEx+0x10e>
 8015802:	8afb      	ldrh	r3, [r7, #22]
 8015804:	e01d      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                    PHPAL_I14443P3B_SW_DELTA_POLL));
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6858      	ldr	r0, [r3, #4]
 801580a:	f107 0210 	add.w	r2, r7, #16
 801580e:	f107 030a 	add.w	r3, r7, #10
 8015812:	9301      	str	r3, [sp, #4]
 8015814:	f107 030c 	add.w	r3, r7, #12
 8015818:	9300      	str	r3, [sp, #0]
 801581a:	2303      	movs	r3, #3
 801581c:	2100      	movs	r1, #0
 801581e:	f7f8 faa3 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8015822:	4603      	mov	r3, r0
 8015824:	82fb      	strh	r3, [r7, #22]
 8015826:	8afb      	ldrh	r3, [r7, #22]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d001      	beq.n	8015830 <phpalI14443p3b_Sw_RequestBEx+0x138>
 801582c:	8afb      	ldrh	r3, [r7, #22]
 801582e:	e008      	b.n	8015842 <phpalI14443p3b_Sw_RequestBEx+0x14a>
        aCmd,
        3,
        &pResp,
        &wRespLength));

    return phpalI14443p3b_Sw_CheckATQBEx( pDataParams,
 8015830:	68f9      	ldr	r1, [r7, #12]
 8015832:	897a      	ldrh	r2, [r7, #10]
 8015834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015836:	9300      	str	r3, [sp, #0]
 8015838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f7ff fe98 	bl	8015570 <phpalI14443p3b_Sw_CheckATQBEx>
 8015840:	4603      	mov	r3, r0
        pResp,
        wRespLength,
        pAtqb,
        pAtqbLen
        );
}
 8015842:	4618      	mov	r0, r3
 8015844:	3718      	adds	r7, #24
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
	...

0801584c <phpalI14443p3b_Sw_SetReaderBaudRateEx>:

phStatus_t phpalI14443p3b_Sw_SetReaderBaudRateEx( phpalI14443p3b_Sw_DataParams_t * pDataParams )
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b084      	sub	sp, #16
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (pDataParams->bDri)
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	7d1b      	ldrb	r3, [r3, #20]
 8015858:	2b03      	cmp	r3, #3
 801585a:	d817      	bhi.n	801588c <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x40>
 801585c:	a201      	add	r2, pc, #4	@ (adr r2, 8015864 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x18>)
 801585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015862:	bf00      	nop
 8015864:	08015875 	.word	0x08015875
 8015868:	0801587b 	.word	0x0801587b
 801586c:	08015881 	.word	0x08015881
 8015870:	08015887 	.word	0x08015887
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 8015874:	2300      	movs	r3, #0
 8015876:	81fb      	strh	r3, [r7, #14]
        break;
 8015878:	e00b      	b.n	8015892 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 801587a:	2301      	movs	r3, #1
 801587c:	81fb      	strh	r3, [r7, #14]
        break;
 801587e:	e008      	b.n	8015892 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 8015880:	2302      	movs	r3, #2
 8015882:	81fb      	strh	r3, [r7, #14]
        break;
 8015884:	e005      	b.n	8015892 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    case PHPAL_I14443P3B_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8015886:	2303      	movs	r3, #3
 8015888:	81fb      	strh	r3, [r7, #14]
        break;
 801588a:	e002      	b.n	8015892 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x46>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 801588c:	f240 4321 	movw	r3, #1057	@ 0x421
 8015890:	e03a      	b.n	8015908 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Check and convert Dsi value */
    switch (pDataParams->bDsi)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	7d5b      	ldrb	r3, [r3, #21]
 8015896:	2b03      	cmp	r3, #3
 8015898:	d816      	bhi.n	80158c8 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x7c>
 801589a:	a201      	add	r2, pc, #4	@ (adr r2, 80158a0 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x54>)
 801589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158a0:	080158b1 	.word	0x080158b1
 80158a4:	080158b7 	.word	0x080158b7
 80158a8:	080158bd 	.word	0x080158bd
 80158ac:	080158c3 	.word	0x080158c3
    {
    case PHPAL_I14443P3B_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 80158b0:	2300      	movs	r3, #0
 80158b2:	81bb      	strh	r3, [r7, #12]
        break;
 80158b4:	e00b      	b.n	80158ce <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 80158b6:	2301      	movs	r3, #1
 80158b8:	81bb      	strh	r3, [r7, #12]
        break;
 80158ba:	e008      	b.n	80158ce <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 80158bc:	2302      	movs	r3, #2
 80158be:	81bb      	strh	r3, [r7, #12]
        break;
 80158c0:	e005      	b.n	80158ce <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    case PHPAL_I14443P3B_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 80158c2:	2303      	movs	r3, #3
 80158c4:	81bb      	strh	r3, [r7, #12]
        break;
 80158c6:	e002      	b.n	80158ce <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x82>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P3B);
 80158c8:	f240 4321 	movw	r3, #1057	@ 0x421
 80158cc:	e01c      	b.n	8015908 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    }

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	89fa      	ldrh	r2, [r7, #14]
 80158d4:	2109      	movs	r1, #9
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7f8 fdfe 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80158dc:	4603      	mov	r3, r0
 80158de:	817b      	strh	r3, [r7, #10]
 80158e0:	897b      	ldrh	r3, [r7, #10]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <phpalI14443p3b_Sw_SetReaderBaudRateEx+0x9e>
 80158e6:	897b      	ldrh	r3, [r7, #10]
 80158e8:	e00e      	b.n	8015908 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	89ba      	ldrh	r2, [r7, #12]
 80158f0:	210a      	movs	r1, #10
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7f8 fdf0 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80158f8:	4603      	mov	r3, r0
 80158fa:	817b      	strh	r3, [r7, #10]
 80158fc:	897b      	ldrh	r3, [r7, #10]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d001      	beq.n	8015906 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xba>
 8015902:	897b      	ldrh	r3, [r7, #10]
 8015904:	e000      	b.n	8015908 <phpalI14443p3b_Sw_SetReaderBaudRateEx+0xbc>

    return PH_ERR_SUCCESS;
 8015906:	2300      	movs	r3, #0

}
 8015908:	4618      	mov	r0, r3
 801590a:	3710      	adds	r7, #16
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <phpalI14443p3b_Sw_SetSerialNo>:

    return PH_ERR_SUCCESS;
}

phStatus_t phpalI14443p3b_Sw_SetSerialNo(phpalI14443p3b_Sw_DataParams_t * pDataParams, uint8_t *pPupi)
{
 8015910:	b480      	push	{r7}
 8015912:	b083      	sub	sp, #12
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
    (void)memcpy(pDataParams->pPupi, pPupi, (uint32_t)(sizeof(pDataParams->pPupi)));
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	3309      	adds	r3, #9
 801591e:	683a      	ldr	r2, [r7, #0]
 8015920:	6812      	ldr	r2, [r2, #0]
 8015922:	601a      	str	r2, [r3, #0]
    pDataParams->bPupiValid = PH_ON;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2201      	movs	r2, #1
 8015928:	735a      	strb	r2, [r3, #13]

    return PH_ERR_SUCCESS;
 801592a:	2300      	movs	r3, #0
}
 801592c:	4618      	mov	r0, r3
 801592e:	370c      	adds	r7, #12
 8015930:	46bd      	mov	sp, r7
 8015932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015936:	4770      	bx	lr

08015938 <phpalI14443p4_Sw_Init>:
phStatus_t phpalI14443p4_Sw_Init(
                                 phpalI14443p4_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	460b      	mov	r3, r1
 8015942:	607a      	str	r2, [r7, #4]
 8015944:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4_Sw_DataParams_t) != wSizeOfDataParams)
 8015946:	897b      	ldrh	r3, [r7, #10]
 8015948:	2b14      	cmp	r3, #20
 801594a:	d002      	beq.n	8015952 <phpalI14443p4_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4);
 801594c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8015950:	e017      	b.n	8015982 <phpalI14443p4_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d101      	bne.n	801595c <phpalI14443p4_Sw_Init+0x24>
 8015958:	2321      	movs	r3, #33	@ 0x21
 801595a:	e012      	b.n	8015982 <phpalI14443p4_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d101      	bne.n	8015966 <phpalI14443p4_Sw_Init+0x2e>
 8015962:	2321      	movs	r3, #33	@ 0x21
 8015964:	e00d      	b.n	8015982 <phpalI14443p4_Sw_Init+0x4a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4 | PHPAL_I14443P4_SW_ID;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	f240 6201 	movw	r2, #1537	@ 0x601
 801596c:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	687a      	ldr	r2, [r7, #4]
 8015972:	605a      	str	r2, [r3, #4]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	2202      	movs	r2, #2
 8015978:	749a      	strb	r2, [r3, #18]

    /* Reset protocol to defaults */
    return phpalI14443p4_Sw_ResetProtocol(pDataParams);
 801597a:	68f8      	ldr	r0, [r7, #12]
 801597c:	f000 f840 	bl	8015a00 <phpalI14443p4_Sw_ResetProtocol>
 8015980:	4603      	mov	r3, r0
}
 8015982:	4618      	mov	r0, r3
 8015984:	3710      	adds	r7, #16
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}

0801598a <phpalI14443p4_Sw_SetProtocol>:
                                        uint8_t   bNad,
                                        uint8_t   bFwi,
                                        uint8_t   bFsdi,
                                        uint8_t   bFsci
                                        )
{
 801598a:	b480      	push	{r7}
 801598c:	b083      	sub	sp, #12
 801598e:	af00      	add	r7, sp, #0
 8015990:	6078      	str	r0, [r7, #4]
 8015992:	4608      	mov	r0, r1
 8015994:	4611      	mov	r1, r2
 8015996:	461a      	mov	r2, r3
 8015998:	4603      	mov	r3, r0
 801599a:	70fb      	strb	r3, [r7, #3]
 801599c:	460b      	mov	r3, r1
 801599e:	70bb      	strb	r3, [r7, #2]
 80159a0:	4613      	mov	r3, r2
 80159a2:	707b      	strb	r3, [r7, #1]
    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2200      	movs	r2, #0
 80159a8:	741a      	strb	r2, [r3, #16]

    /* Check parameters */
    if ((bCid > PHPAL_I14443P4_CID_MAX) ||
 80159aa:	78bb      	ldrb	r3, [r7, #2]
 80159ac:	2b0e      	cmp	r3, #14
 80159ae:	d808      	bhi.n	80159c2 <phpalI14443p4_Sw_SetProtocol+0x38>
 80159b0:	7d3b      	ldrb	r3, [r7, #20]
 80159b2:	2b0e      	cmp	r3, #14
 80159b4:	d805      	bhi.n	80159c2 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFwi > PHPAL_I14443P4_FWI_MAX) ||
 80159b6:	7e3b      	ldrb	r3, [r7, #24]
 80159b8:	2b0c      	cmp	r3, #12
 80159ba:	d802      	bhi.n	80159c2 <phpalI14443p4_Sw_SetProtocol+0x38>
        (bFsdi > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 80159bc:	7f3b      	ldrb	r3, [r7, #28]
 80159be:	2b0c      	cmp	r3, #12
 80159c0:	d902      	bls.n	80159c8 <phpalI14443p4_Sw_SetProtocol+0x3e>
        (bFsci > PHPAL_I14443P4_FRAMESIZE_MAX))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 80159c2:	f240 6321 	movw	r3, #1569	@ 0x621
 80159c6:	e015      	b.n	80159f4 <phpalI14443p4_Sw_SetProtocol+0x6a>
    }

    /* Apply parameters */
    pDataParams->bCidEnabled = bCidEnable;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	78fa      	ldrb	r2, [r7, #3]
 80159cc:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid = bCid;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	78ba      	ldrb	r2, [r7, #2]
 80159d2:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled = bNadEnable;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	787a      	ldrb	r2, [r7, #1]
 80159d8:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad = bNad;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	7c3a      	ldrb	r2, [r7, #16]
 80159de:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi = bFwi;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	7d3a      	ldrb	r2, [r7, #20]
 80159e4:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi = bFsdi;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	7e3a      	ldrb	r2, [r7, #24]
 80159ea:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci = bFsci;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	7f3a      	ldrb	r2, [r7, #28]
 80159f0:	73da      	strb	r2, [r3, #15]

    return PH_ERR_SUCCESS;
 80159f2:	2300      	movs	r3, #0
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	370c      	adds	r7, #12
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <phpalI14443p4_Sw_ResetProtocol>:

phStatus_t phpalI14443p4_Sw_ResetProtocol(
    phpalI14443p4_Sw_DataParams_t * pDataParams
    )
{
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
    /* Set default state */
    pDataParams->bStateNow = PHPAL_I14443P4_SW_STATE_I_BLOCK_TX;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	721a      	strb	r2, [r3, #8]

    /* Rule A, ISO/IEC 14443-4:2008(E), init. Blocknumber to zero */
    pDataParams->bPcbBlockNum = 0;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2200      	movs	r2, #0
 8015a12:	741a      	strb	r2, [r3, #16]

    /* Apply default parameters */
    pDataParams->bCidEnabled        = 0x00;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2200      	movs	r2, #0
 8015a18:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid               = 0x00;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	729a      	strb	r2, [r3, #10]
    pDataParams->bNadEnabled        = 0x00;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2200      	movs	r2, #0
 8015a24:	72da      	strb	r2, [r3, #11]
    pDataParams->bNad               = 0x00;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	731a      	strb	r2, [r3, #12]
    pDataParams->bFwi               = PHPAL_I14443P4_SW_FWI_DEFAULT;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2204      	movs	r2, #4
 8015a30:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi              = 0x00;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2200      	movs	r2, #0
 8015a36:	739a      	strb	r2, [r3, #14]
    pDataParams->bFsci              = PHPAL_I14443P4_SW_FSCI_DEFAULT;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2202      	movs	r2, #2
 8015a3c:	73da      	strb	r2, [r3, #15]
    pDataParams->bMaxRetryCount     = PHPAL_I14443P4_SW_MAX_RETRIES_DEFAULT;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2202      	movs	r2, #2
 8015a42:	745a      	strb	r2, [r3, #17]

    return PH_ERR_SUCCESS;
 8015a44:	2300      	movs	r3, #0
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	370c      	adds	r7, #12
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
	...

08015a54 <phpalI14443p4_Sw_SetConfig>:
phStatus_t phpalI14443p4_Sw_SetConfig(
                                      phpalI14443p4_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8015a54:	b480      	push	{r7}
 8015a56:	b083      	sub	sp, #12
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	807b      	strh	r3, [r7, #2]
 8015a60:	4613      	mov	r3, r2
 8015a62:	803b      	strh	r3, [r7, #0]
    switch (wConfig)
 8015a64:	887b      	ldrh	r3, [r7, #2]
 8015a66:	2b06      	cmp	r3, #6
 8015a68:	d876      	bhi.n	8015b58 <phpalI14443p4_Sw_SetConfig+0x104>
 8015a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8015a70 <phpalI14443p4_Sw_SetConfig+0x1c>)
 8015a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a70:	08015a97 	.word	0x08015a97
 8015a74:	08015aad 	.word	0x08015aad
 8015a78:	08015ae3 	.word	0x08015ae3
 8015a7c:	08015b0b 	.word	0x08015b0b
 8015a80:	08015b21 	.word	0x08015b21
 8015a84:	08015b4f 	.word	0x08015b4f
 8015a88:	08015a8d 	.word	0x08015a8d
    {
    case PHPAL_I14443P4_CONFIG_OPE_MODE:
        {
            pDataParams->bOpeMode = (uint8_t)wValue;
 8015a8c:	883b      	ldrh	r3, [r7, #0]
 8015a8e:	b2da      	uxtb	r2, r3
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	749a      	strb	r2, [r3, #18]
            break;
 8015a94:	e063      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_BLOCKNO:
        {
            if (wValue == 0U)
 8015a96:	883b      	ldrh	r3, [r7, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d103      	bne.n	8015aa4 <phpalI14443p4_Sw_SetConfig+0x50>
            {
                pDataParams->bPcbBlockNum = 0;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	741a      	strb	r2, [r3, #16]
            else
            {
                pDataParams->bPcbBlockNum = 1;
            }

            break;
 8015aa2:	e05c      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bPcbBlockNum = 1;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	741a      	strb	r2, [r3, #16]
            break;
 8015aaa:	e058      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_CID:
        {
            if (0U != (wValue & 0xFF00U))
 8015aac:	883b      	ldrh	r3, [r7, #0]
 8015aae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d00e      	beq.n	8015ad4 <phpalI14443p4_Sw_SetConfig+0x80>
            {
                if ((wValue & 0x00FFU) > PHPAL_I14443P4_CID_MAX)
 8015ab6:	883b      	ldrh	r3, [r7, #0]
 8015ab8:	b2db      	uxtb	r3, r3
 8015aba:	2b0e      	cmp	r3, #14
 8015abc:	d902      	bls.n	8015ac4 <phpalI14443p4_Sw_SetConfig+0x70>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8015abe:	f240 6321 	movw	r3, #1569	@ 0x621
 8015ac2:	e04d      	b.n	8015b60 <phpalI14443p4_Sw_SetConfig+0x10c>
                }
                pDataParams->bCidEnabled = 1;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = (uint8_t)(wValue);
 8015aca:	883b      	ldrh	r3, [r7, #0]
 8015acc:	b2da      	uxtb	r2, r3
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	729a      	strb	r2, [r3, #10]
            {
                pDataParams->bCidEnabled = 0;
                pDataParams->bCid = 0;
            }

            break;
 8015ad2:	e044      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bCidEnabled = 0;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	725a      	strb	r2, [r3, #9]
                pDataParams->bCid = 0;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	729a      	strb	r2, [r3, #10]
            break;
 8015ae0:	e03d      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_NAD:
        {
            if (0U != (wValue & 0xFF00U))
 8015ae2:	883b      	ldrh	r3, [r7, #0]
 8015ae4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d007      	beq.n	8015afc <phpalI14443p4_Sw_SetConfig+0xa8>
            {
                pDataParams->bNadEnabled = 1;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2201      	movs	r2, #1
 8015af0:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = (uint8_t)(wValue);
 8015af2:	883b      	ldrh	r3, [r7, #0]
 8015af4:	b2da      	uxtb	r2, r3
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	731a      	strb	r2, [r3, #12]
            {
                pDataParams->bNadEnabled = 0;
                pDataParams->bNad = 0;
            }

            break;
 8015afa:	e030      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
                pDataParams->bNadEnabled = 0;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2200      	movs	r2, #0
 8015b00:	72da      	strb	r2, [r3, #11]
                pDataParams->bNad = 0;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2200      	movs	r2, #0
 8015b06:	731a      	strb	r2, [r3, #12]
            break;
 8015b08:	e029      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FWI:
        {
            if (wValue > PHPAL_I14443P4_FWI_MAX)
 8015b0a:	883b      	ldrh	r3, [r7, #0]
 8015b0c:	2b0e      	cmp	r3, #14
 8015b0e:	d902      	bls.n	8015b16 <phpalI14443p4_Sw_SetConfig+0xc2>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8015b10:	f240 6321 	movw	r3, #1569	@ 0x621
 8015b14:	e024      	b.n	8015b60 <phpalI14443p4_Sw_SetConfig+0x10c>
            }
            pDataParams->bFwi = (uint8_t)(wValue);
 8015b16:	883b      	ldrh	r3, [r7, #0]
 8015b18:	b2da      	uxtb	r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	735a      	strb	r2, [r3, #13]
            break;
 8015b1e:	e01e      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_FSI:
        {
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8015b20:	883b      	ldrh	r3, [r7, #0]
 8015b22:	0a1b      	lsrs	r3, r3, #8
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	2b0c      	cmp	r3, #12
 8015b28:	d803      	bhi.n	8015b32 <phpalI14443p4_Sw_SetConfig+0xde>
                ((wValue & 0xFFU) > PHPAL_I14443P4_FRAMESIZE_MAX))
 8015b2a:	883b      	ldrh	r3, [r7, #0]
 8015b2c:	b2db      	uxtb	r3, r3
            if (((wValue >> 8U) > PHPAL_I14443P4_FRAMESIZE_MAX) ||
 8015b2e:	2b0c      	cmp	r3, #12
 8015b30:	d902      	bls.n	8015b38 <phpalI14443p4_Sw_SetConfig+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8015b32:	f240 6321 	movw	r3, #1569	@ 0x621
 8015b36:	e013      	b.n	8015b60 <phpalI14443p4_Sw_SetConfig+0x10c>
            }

            pDataParams->bFsdi = (uint8_t)(wValue >> 8U);
 8015b38:	883b      	ldrh	r3, [r7, #0]
 8015b3a:	0a1b      	lsrs	r3, r3, #8
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	b2da      	uxtb	r2, r3
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	739a      	strb	r2, [r3, #14]
            pDataParams->bFsci = (uint8_t)(wValue);
 8015b44:	883b      	ldrh	r3, [r7, #0]
 8015b46:	b2da      	uxtb	r2, r3
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	73da      	strb	r2, [r3, #15]
            break;
 8015b4c:	e007      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    case PHPAL_I14443P4_CONFIG_MAXRETRYCOUNT:
        {
            pDataParams->bMaxRetryCount = (uint8_t)(wValue);
 8015b4e:	883b      	ldrh	r3, [r7, #0]
 8015b50:	b2da      	uxtb	r2, r3
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	745a      	strb	r2, [r3, #17]
            break;
 8015b56:	e002      	b.n	8015b5e <phpalI14443p4_Sw_SetConfig+0x10a>
        }
    default:
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4);
 8015b58:	f240 6323 	movw	r3, #1571	@ 0x623
 8015b5c:	e000      	b.n	8015b60 <phpalI14443p4_Sw_SetConfig+0x10c>
        }
    }

    return PH_ERR_SUCCESS;
 8015b5e:	2300      	movs	r3, #0
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <phpalI14443p4a_Sw_Init>:
phStatus_t phpalI14443p4a_Sw_Init(
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	b085      	sub	sp, #20
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	60f8      	str	r0, [r7, #12]
 8015b74:	460b      	mov	r3, r1
 8015b76:	607a      	str	r2, [r7, #4]
 8015b78:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI14443p4a_Sw_DataParams_t) != wSizeOfDataParams)
 8015b7a:	897b      	ldrh	r3, [r7, #10]
 8015b7c:	2b14      	cmp	r3, #20
 8015b7e:	d002      	beq.n	8015b86 <phpalI14443p4a_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_ISO14443P4A);
 8015b80:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8015b84:	e032      	b.n	8015bec <phpalI14443p4a_Sw_Init+0x80>
    }
    PH_ASSERT_NULL (pDataParams);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d101      	bne.n	8015b90 <phpalI14443p4a_Sw_Init+0x24>
 8015b8c:	2321      	movs	r3, #33	@ 0x21
 8015b8e:	e02d      	b.n	8015bec <phpalI14443p4a_Sw_Init+0x80>
    PH_ASSERT_NULL (pHalDataParams);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d101      	bne.n	8015b9a <phpalI14443p4a_Sw_Init+0x2e>
 8015b96:	2321      	movs	r3, #33	@ 0x21
 8015b98:	e028      	b.n	8015bec <phpalI14443p4a_Sw_Init+0x80>

    /* init private data */
    pDataParams->wId            = PH_COMP_PAL_ISO14443P4A | PHPAL_I14443P4A_SW_ID;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	f240 5201 	movw	r2, #1281	@ 0x501
 8015ba0:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	687a      	ldr	r2, [r7, #4]
 8015ba6:	605a      	str	r2, [r3, #4]
    pDataParams->bCidSupported  = PH_OFF;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	2200      	movs	r2, #0
 8015bac:	721a      	strb	r2, [r3, #8]
    pDataParams->bNadSupported  = PH_OFF;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	725a      	strb	r2, [r3, #9]
    pDataParams->bCid           = 0x00;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	729a      	strb	r2, [r3, #10]
    pDataParams->bBitRateCaps   = 0x00;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	72da      	strb	r2, [r3, #11]
    pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	2204      	movs	r2, #4
 8015bc4:	731a      	strb	r2, [r3, #12]
    pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	2202      	movs	r2, #2
 8015bca:	735a      	strb	r2, [r3, #13]
    pDataParams->bFsdi          = 0x00;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	739a      	strb	r2, [r3, #14]
    pDataParams->bDri           = 0x00;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi           = 0x00;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	741a      	strb	r2, [r3, #16]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2202      	movs	r2, #2
 8015be2:	745a      	strb	r2, [r3, #17]
    pDataParams->bRetryCount    = PHPAL_I14443P4A_RATS_RETRY_MAX;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2201      	movs	r2, #1
 8015be8:	749a      	strb	r2, [r3, #18]

    return PH_ERR_SUCCESS;
 8015bea:	2300      	movs	r3, #0
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3714      	adds	r7, #20
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr

08015bf8 <phpalI14443p4a_Sw_SetConfig>:
phStatus_t phpalI14443p4a_Sw_SetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t wValue
                                     )
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	460b      	mov	r3, r1
 8015c02:	807b      	strh	r3, [r7, #2]
 8015c04:	4613      	mov	r3, r2
 8015c06:	803b      	strh	r3, [r7, #0]
   switch (wConfig)
 8015c08:	887b      	ldrh	r3, [r7, #2]
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d002      	beq.n	8015c14 <phpalI14443p4a_Sw_SetConfig+0x1c>
 8015c0e:	2b02      	cmp	r3, #2
 8015c10:	d005      	beq.n	8015c1e <phpalI14443p4a_Sw_SetConfig+0x26>
 8015c12:	e014      	b.n	8015c3e <phpalI14443p4a_Sw_SetConfig+0x46>
   {
   /* Emvco: To Define Running Mode for RdLib: Either NFC, EMVCO or ISO */
   case PHPAL_I14443P4A_CONFIG_OPE_MODE:
   {
      pDataParams->bOpeMode = (uint8_t)wValue;
 8015c14:	883b      	ldrh	r3, [r7, #0]
 8015c16:	b2da      	uxtb	r2, r3
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	745a      	strb	r2, [r3, #17]
      break;
 8015c1c:	e012      	b.n	8015c44 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
   {
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8015c1e:	883b      	ldrh	r3, [r7, #0]
 8015c20:	b2db      	uxtb	r3, r3
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d006      	beq.n	8015c34 <phpalI14443p4a_Sw_SetConfig+0x3c>
                  ((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MAX)))
 8015c26:	883b      	ldrh	r3, [r7, #0]
 8015c28:	b2db      	uxtb	r3, r3
      if(!(((wValue & 0xFFU) == PHPAL_I14443P4A_RATS_RETRY_MIN) ||
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d002      	beq.n	8015c34 <phpalI14443p4a_Sw_SetConfig+0x3c>
      {
         return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015c2e:	f240 5321 	movw	r3, #1313	@ 0x521
 8015c32:	e008      	b.n	8015c46 <phpalI14443p4a_Sw_SetConfig+0x4e>
      }

      pDataParams->bRetryCount = (uint8_t)wValue;
 8015c34:	883b      	ldrh	r3, [r7, #0]
 8015c36:	b2da      	uxtb	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	749a      	strb	r2, [r3, #18]
      break;
 8015c3c:	e002      	b.n	8015c44 <phpalI14443p4a_Sw_SetConfig+0x4c>
   }

   default:
      return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015c3e:	f240 5323 	movw	r3, #1315	@ 0x523
 8015c42:	e000      	b.n	8015c46 <phpalI14443p4a_Sw_SetConfig+0x4e>
   }

   return PH_ERR_SUCCESS;
 8015c44:	2300      	movs	r3, #0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	370c      	adds	r7, #12
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c50:	4770      	bx	lr
	...

08015c54 <phpalI14443p4a_Sw_GetConfig>:
phStatus_t phpalI14443p4a_Sw_GetConfig(
                                       phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                       uint16_t wConfig,
                                       uint16_t *pValue
                                     )
{
 8015c54:	b480      	push	{r7}
 8015c56:	b085      	sub	sp, #20
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	60f8      	str	r0, [r7, #12]
 8015c5c:	460b      	mov	r3, r1
 8015c5e:	607a      	str	r2, [r7, #4]
 8015c60:	817b      	strh	r3, [r7, #10]
    switch (wConfig)
 8015c62:	897b      	ldrh	r3, [r7, #10]
 8015c64:	3b01      	subs	r3, #1
 8015c66:	2b03      	cmp	r3, #3
 8015c68:	d822      	bhi.n	8015cb0 <phpalI14443p4a_Sw_GetConfig+0x5c>
 8015c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8015c70 <phpalI14443p4a_Sw_GetConfig+0x1c>)
 8015c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c70:	08015c81 	.word	0x08015c81
 8015c74:	08015c8d 	.word	0x08015c8d
 8015c78:	08015c99 	.word	0x08015c99
 8015c7c:	08015ca5 	.word	0x08015ca5
    {
    case PHPAL_I14443P4A_CONFIG_OPE_MODE:
        *pValue = (uint16_t)pDataParams->bOpeMode;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	7c5b      	ldrb	r3, [r3, #17]
 8015c84:	461a      	mov	r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	801a      	strh	r2, [r3, #0]
        break;
 8015c8a:	e014      	b.n	8015cb6 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_RATS_RETRY_COUNT:
        *pValue = (uint16_t)pDataParams->bRetryCount;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	7c9b      	ldrb	r3, [r3, #18]
 8015c90:	461a      	mov	r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	801a      	strh	r2, [r3, #0]
        break;
 8015c96:	e00e      	b.n	8015cb6 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DRI:
        *pValue = (uint16_t)pDataParams->bDri;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	7bdb      	ldrb	r3, [r3, #15]
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	801a      	strh	r2, [r3, #0]
        break;
 8015ca2:	e008      	b.n	8015cb6 <phpalI14443p4a_Sw_GetConfig+0x62>

    case PHPAL_I14443P4A_CONFIG_DSI:
        *pValue = (uint16_t)pDataParams->bDsi;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	7c1b      	ldrb	r3, [r3, #16]
 8015ca8:	461a      	mov	r2, r3
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	801a      	strh	r2, [r3, #0]
        break;
 8015cae:	e002      	b.n	8015cb6 <phpalI14443p4a_Sw_GetConfig+0x62>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015cb0:	f240 5323 	movw	r3, #1315	@ 0x523
 8015cb4:	e000      	b.n	8015cb8 <phpalI14443p4a_Sw_GetConfig+0x64>
    }

    return PH_ERR_SUCCESS;
 8015cb6:	2300      	movs	r3, #0
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3714      	adds	r7, #20
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr
 8015cc4:	0000      	movs	r0, r0
	...

08015cc8 <phpalI14443p4a_Sw_Rats>:
                                  phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                  uint8_t bFsdi,
                                  uint8_t bCid,
                                  uint8_t * pAts
                                  )
{
 8015cc8:	b5b0      	push	{r4, r5, r7, lr}
 8015cca:	b08e      	sub	sp, #56	@ 0x38
 8015ccc:	af02      	add	r7, sp, #8
 8015cce:	60f8      	str	r0, [r7, #12]
 8015cd0:	607b      	str	r3, [r7, #4]
 8015cd2:	460b      	mov	r3, r1
 8015cd4:	72fb      	strb	r3, [r7, #11]
 8015cd6:	4613      	mov	r3, r2
 8015cd8:	72bb      	strb	r3, [r7, #10]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[2];
    uint16_t    PH_MEMLOC_REM wCmdLength = 0;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t     PH_MEMLOC_REM bAtsIndex;
    uint8_t     PH_MEMLOC_REM bSfgi;
    uint32_t    PH_MEMLOC_REM dwSfgt;
    uint32_t    PH_MEMLOC_REM dwFwt;
    float32_t   PH_MEMLOC_REM fDelay;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	827b      	strh	r3, [r7, #18]

    /* Parameter check */
    if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	7c5b      	ldrb	r3, [r3, #17]
 8015cea:	2b02      	cmp	r3, #2
 8015cec:	d012      	beq.n	8015d14 <phpalI14443p4a_Sw_Rats+0x4c>
    {
        if ((bFsdi > PHPAL_I14443P4A_FRAMESIZE_MAX) || (bCid > 14U))
 8015cee:	7afb      	ldrb	r3, [r7, #11]
 8015cf0:	2b0c      	cmp	r3, #12
 8015cf2:	d802      	bhi.n	8015cfa <phpalI14443p4a_Sw_Rats+0x32>
 8015cf4:	7abb      	ldrb	r3, [r7, #10]
 8015cf6:	2b0e      	cmp	r3, #14
 8015cf8:	d902      	bls.n	8015d00 <phpalI14443p4a_Sw_Rats+0x38>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015cfa:	f240 5321 	movw	r3, #1313	@ 0x521
 8015cfe:	e2c5      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        if ((bFsdi < PHPAL_I14443P4A_EMVCO_FRAMESIZE_MIN) && (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO))
 8015d00:	7afb      	ldrb	r3, [r7, #11]
 8015d02:	2b07      	cmp	r3, #7
 8015d04:	d80f      	bhi.n	8015d26 <phpalI14443p4a_Sw_Rats+0x5e>
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	7c5b      	ldrb	r3, [r3, #17]
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d10b      	bne.n	8015d26 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015d0e:	f240 5321 	movw	r3, #1313	@ 0x521
 8015d12:	e2bb      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }
    else
    {
        if ((bFsdi > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX) || (bCid > 14U))
 8015d14:	7afb      	ldrb	r3, [r7, #11]
 8015d16:	2b08      	cmp	r3, #8
 8015d18:	d802      	bhi.n	8015d20 <phpalI14443p4a_Sw_Rats+0x58>
 8015d1a:	7abb      	ldrb	r3, [r7, #10]
 8015d1c:	2b0e      	cmp	r3, #14
 8015d1e:	d902      	bls.n	8015d26 <phpalI14443p4a_Sw_Rats+0x5e>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8015d20:	f240 5321 	movw	r3, #1313	@ 0x521
 8015d24:	e2b2      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	f241 42e2 	movw	r2, #5346	@ 0x14e2
 8015d2e:	210d      	movs	r1, #13
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7f8 fbd1 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8015d36:	4603      	mov	r3, r0
 8015d38:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8015d3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d001      	beq.n	8015d44 <phpalI14443p4a_Sw_Rats+0x7c>
 8015d40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015d42:	e2a3      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
        PHPAL_I14443P4A_SW_FWT_ACTIVATION_US + PHPAL_I14443P4A_SW_EXT_TIME_US));

    /* Send Rats command */
    cmd[0] = PHPAL_I14443P4A_SW_RATS;
 8015d44:	23e0      	movs	r3, #224	@ 0xe0
 8015d46:	763b      	strb	r3, [r7, #24]
    cmd[1] = (uint8_t)(((bFsdi << 4U) & 0xF0U) | (bCid & 0x0FU));
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	011b      	lsls	r3, r3, #4
 8015d4c:	b2da      	uxtb	r2, r3
 8015d4e:	7abb      	ldrb	r3, [r7, #10]
 8015d50:	f003 030f 	and.w	r3, r3, #15
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	4313      	orrs	r3, r2
 8015d58:	b2db      	uxtb	r3, r3
 8015d5a:	767b      	strb	r3, [r7, #25]

    status = phhalHw_Exchange(
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	6858      	ldr	r0, [r3, #4]
 8015d60:	f107 0218 	add.w	r2, r7, #24
 8015d64:	f107 0312 	add.w	r3, r7, #18
 8015d68:	9301      	str	r3, [sp, #4]
 8015d6a:	f107 0314 	add.w	r3, r7, #20
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	2302      	movs	r3, #2
 8015d72:	2100      	movs	r1, #0
 8015d74:	f7f7 fff8 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        &wRespLength);

    /* check and perform re-transmission of RATS in case of Transmission or Timeout error
     * Nfc Digital Specification ver 1.1, Req 13.7.1.1
     */
    bAtsIndex = pDataParams->bRetryCount;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	7c9b      	ldrb	r3, [r3, #18]
 8015d80:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8015d84:	e031      	b.n	8015dea <phpalI14443p4a_Sw_Rats+0x122>
    {
        /* Return error other than Timeout or Noise Error */
        if (pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	7c5b      	ldrb	r3, [r3, #17]
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	d118      	bne.n	8015dc0 <phpalI14443p4a_Sw_Rats+0xf8>
        {
            if((((status & PH_ERR_MASK) == PH_ERR_IO_TIMEOUT) || ((status & PH_ERR_MASK) == PH_ERR_NOISE_ERROR)))
 8015d8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	2b01      	cmp	r3, #1
 8015d94:	d003      	beq.n	8015d9e <phpalI14443p4a_Sw_Rats+0xd6>
 8015d96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	2b11      	cmp	r3, #17
 8015d9c:	d10e      	bne.n	8015dbc <phpalI14443p4a_Sw_Rats+0xf4>
            {
                /* Wait for at least Tmin retransmission delay. */
                PH_CHECK_SUCCESS_FCT(status, phhalHw_Wait(
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8015da6:	2100      	movs	r1, #0
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7f8 fad9 	bl	800e360 <phhalHw_Pn5180_Wait>
 8015dae:	4603      	mov	r3, r0
 8015db0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8015db2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d003      	beq.n	8015dc0 <phpalI14443p4a_Sw_Rats+0xf8>
 8015db8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015dba:	e267      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    PH_NXPNFCRDLIB_CONFIG_EMVCO_DEFAULT_RETRANSMISSION));
            }
            else
            {
                return status;
 8015dbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015dbe:	e265      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
            }
        }

        /* Emvco: case_id TA313, TA307_X, TA306_10-15, TA340_1 */
        status = phhalHw_Exchange(
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	6858      	ldr	r0, [r3, #4]
 8015dc4:	f107 0218 	add.w	r2, r7, #24
 8015dc8:	f107 0312 	add.w	r3, r7, #18
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	f107 0314 	add.w	r3, r7, #20
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	2302      	movs	r3, #2
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	f7f7 ffc6 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            cmd,
            2,
            &pResp,
            &wRespLength);

        bAtsIndex--;
 8015de0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015de4:	3b01      	subs	r3, #1
 8015de6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while((bAtsIndex > 0U) && (PH_ERR_SUCCESS != (status & PH_ERR_MASK)))
 8015dea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d003      	beq.n	8015dfa <phpalI14443p4a_Sw_Rats+0x132>
 8015df2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1c5      	bne.n	8015d86 <phpalI14443p4a_Sw_Rats+0xbe>
    }

    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8015dfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	f040 81c5 	bne.w	801618e <phpalI14443p4a_Sw_Rats+0x4c6>
    {
        /* Check for protocol error */
        if (((uint8_t)wRespLength != pResp[0]) || (wRespLength < 1U))
 8015e04:	8a7b      	ldrh	r3, [r7, #18]
 8015e06:	b2da      	uxtb	r2, r3
 8015e08:	697b      	ldr	r3, [r7, #20]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d102      	bne.n	8015e16 <phpalI14443p4a_Sw_Rats+0x14e>
 8015e10:	8a7b      	ldrh	r3, [r7, #18]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d102      	bne.n	8015e1c <phpalI14443p4a_Sw_Rats+0x154>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8015e16:	f240 5306 	movw	r3, #1286	@ 0x506
 8015e1a:	e237      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
        }

        /* Copy ATS buffer */
        (void)memcpy(pAts, pResp, wRespLength);
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	8a7a      	ldrh	r2, [r7, #18]
 8015e20:	4619      	mov	r1, r3
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f009 f8ff 	bl	801f026 <memcpy>

        /* Set default values */
        if (pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	7c5b      	ldrb	r3, [r3, #17]
 8015e2c:	2b03      	cmp	r3, #3
 8015e2e:	d006      	beq.n	8015e3e <phpalI14443p4a_Sw_Rats+0x176>
        {
            pDataParams->bCidSupported = PH_OFF;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2200      	movs	r2, #0
 8015e34:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid          = 0x00;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	729a      	strb	r2, [r3, #10]
 8015e3c:	e005      	b.n	8015e4a <phpalI14443p4a_Sw_Rats+0x182>
        }
        else
        {
            pDataParams->bCidSupported  = PH_ON;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2201      	movs	r2, #1
 8015e42:	721a      	strb	r2, [r3, #8]
            pDataParams->bCid           = bCid;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	7aba      	ldrb	r2, [r7, #10]
 8015e48:	729a      	strb	r2, [r3, #10]
        }
        pDataParams->bNadSupported  = PH_OFF;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	725a      	strb	r2, [r3, #9]
        pDataParams->bBitRateCaps   = 0x00;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2200      	movs	r2, #0
 8015e54:	72da      	strb	r2, [r3, #11]
        pDataParams->bFwi           = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	2204      	movs	r2, #4
 8015e5a:	731a      	strb	r2, [r3, #12]
        pDataParams->bFsdi          = bFsdi;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	7afa      	ldrb	r2, [r7, #11]
 8015e60:	739a      	strb	r2, [r3, #14]
        pDataParams->bFsci          = PHPAL_I14443P4A_SW_FSCI_DEFAULT;
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	2202      	movs	r2, #2
 8015e66:	735a      	strb	r2, [r3, #13]
        pDataParams->bDri           = 0x00;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	73da      	strb	r2, [r3, #15]
        pDataParams->bDsi           = 0x00;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	2200      	movs	r2, #0
 8015e72:	741a      	strb	r2, [r3, #16]
        bSfgi                       = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8015e74:	2300      	movs	r3, #0
 8015e76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Retrieve ATS information */
        /* Start parsing with T0 byte */
        bAtsIndex = PHPAL_I14443P4A_SW_ATS_T0;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        /* Parse T0/TA/TB/TC */
        if (wRespLength > 1U)
 8015e80:	8a7b      	ldrh	r3, [r7, #18]
 8015e82:	2b01      	cmp	r3, #1
 8015e84:	f240 80ba 	bls.w	8015ffc <phpalI14443p4a_Sw_Rats+0x334>
        {
            /* Parse T0 */
            pDataParams->bFsci = pAts[bAtsIndex] & 0x0FU;
 8015e88:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	4413      	add	r3, r2
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	f003 030f 	and.w	r3, r3, #15
 8015e96:	b2da      	uxtb	r2, r3
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	735a      	strb	r2, [r3, #13]
            if(pDataParams->bOpeMode != RD_LIB_MODE_NFC)
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	7c5b      	ldrb	r3, [r3, #17]
 8015ea0:	2b02      	cmp	r3, #2
 8015ea2:	d007      	beq.n	8015eb4 <phpalI14443p4a_Sw_Rats+0x1ec>
            {
                if (pDataParams->bFsci > PHPAL_I14443P4A_FRAMESIZE_MAX)
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	7b5b      	ldrb	r3, [r3, #13]
 8015ea8:	2b0c      	cmp	r3, #12
 8015eaa:	d90a      	bls.n	8015ec2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_FRAMESIZE_MAX;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	220c      	movs	r2, #12
 8015eb0:	735a      	strb	r2, [r3, #13]
 8015eb2:	e006      	b.n	8015ec2 <phpalI14443p4a_Sw_Rats+0x1fa>
                }
            }
            else
            {   /* Nfc: Digital Specification Ver 1.1 Table 59 */
                if (pDataParams->bFsci > PHPAL_I14443P4A_NFC_FRAMESIZE_MAX)
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	7b5b      	ldrb	r3, [r3, #13]
 8015eb8:	2b08      	cmp	r3, #8
 8015eba:	d902      	bls.n	8015ec2 <phpalI14443p4a_Sw_Rats+0x1fa>
                {
                    pDataParams->bFsci = PHPAL_I14443P4A_NFC_FRAMESIZE_MAX;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	2208      	movs	r2, #8
 8015ec0:	735a      	strb	r2, [r3, #13]
                }
            }

            bAtsIndex++;
 8015ec2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            /* Parse TA(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TA1_PRESENT))
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	781b      	ldrb	r3, [r3, #0]
 8015ed2:	f003 0310 	and.w	r3, r3, #16
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d021      	beq.n	8015f1e <phpalI14443p4a_Sw_Rats+0x256>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8015eda:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015ede:	b29a      	uxth	r2, r3
 8015ee0:	8a7b      	ldrh	r3, [r7, #18]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d302      	bcc.n	8015eec <phpalI14443p4a_Sw_Rats+0x224>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8015ee6:	f240 5306 	movw	r3, #1286	@ 0x506
 8015eea:	e1cf      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                }

                /* Check for RFU bit b4 (b4 shall be 0; 1 is RFU) */
                if(0U != (pAts[bAtsIndex] & 0x08U))
 8015eec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015ef0:	687a      	ldr	r2, [r7, #4]
 8015ef2:	4413      	add	r3, r2
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	f003 0308 	and.w	r3, r3, #8
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d003      	beq.n	8015f06 <phpalI14443p4a_Sw_Rats+0x23e>
                {
                    /* Only 106 kbps in both direction */
                    pDataParams->bBitRateCaps = 0x00;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	2200      	movs	r2, #0
 8015f02:	72da      	strb	r2, [r3, #11]
 8015f04:	e006      	b.n	8015f14 <phpalI14443p4a_Sw_Rats+0x24c>
                }
                else
                {
                    /* Store Bit rate capabilities */
                    pDataParams->bBitRateCaps = pAts[bAtsIndex];
 8015f06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	781a      	ldrb	r2, [r3, #0]
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	72da      	strb	r2, [r3, #11]
                }

                bAtsIndex++;
 8015f14:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f18:	3301      	adds	r3, #1
 8015f1a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }

            /* Parse TB(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TB1_PRESENT))
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	3301      	adds	r3, #1
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	f003 0320 	and.w	r3, r3, #32
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d02d      	beq.n	8015f88 <phpalI14443p4a_Sw_Rats+0x2c0>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8015f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f30:	b29a      	uxth	r2, r3
 8015f32:	8a7b      	ldrh	r3, [r7, #18]
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d302      	bcc.n	8015f3e <phpalI14443p4a_Sw_Rats+0x276>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8015f38:	f240 5306 	movw	r3, #1286	@ 0x506
 8015f3c:	e1a6      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* Store Sfgi */
                    bSfgi = pAts[bAtsIndex] & 0x0FU;
 8015f3e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	4413      	add	r3, r2
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	f003 030f 	and.w	r3, r3, #15
 8015f4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    if (bSfgi == 0x0FU)
 8015f50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015f54:	2b0f      	cmp	r3, #15
 8015f56:	d102      	bne.n	8015f5e <phpalI14443p4a_Sw_Rats+0x296>
                    {
                        bSfgi = PHPAL_I14443P4A_SW_SFGI_DEFAULT;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    }

                    /* Store Fwi */
                    pDataParams->bFwi = (pAts[bAtsIndex] >> 4U) & 0x0FU;
 8015f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	4413      	add	r3, r2
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	091b      	lsrs	r3, r3, #4
 8015f6a:	b2da      	uxtb	r2, r3
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	731a      	strb	r2, [r3, #12]
                    if (pDataParams->bFwi == 0x0FU)
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	7b1b      	ldrb	r3, [r3, #12]
 8015f74:	2b0f      	cmp	r3, #15
 8015f76:	d102      	bne.n	8015f7e <phpalI14443p4a_Sw_Rats+0x2b6>
                    {
                        pDataParams->bFwi = PHPAL_I14443P4A_SW_FWI_DEFAULT;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2204      	movs	r2, #4
 8015f7c:	731a      	strb	r2, [r3, #12]
                    }

                    bAtsIndex++;
 8015f7e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f82:	3301      	adds	r3, #1
 8015f84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                }
            }

            /* Parse TC(1) */
            if (0U != (pAts[PHPAL_I14443P4A_SW_ATS_T0] & PHPAL_I14443P4A_SW_ATS_TC1_PRESENT))
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	3301      	adds	r3, #1
 8015f8c:	781b      	ldrb	r3, [r3, #0]
 8015f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d032      	beq.n	8015ffc <phpalI14443p4a_Sw_Rats+0x334>
            {
                /* Check for protocol error */
                if (wRespLength <= bAtsIndex)
 8015f96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	8a7b      	ldrh	r3, [r7, #18]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d302      	bcc.n	8015fa8 <phpalI14443p4a_Sw_Rats+0x2e0>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 8015fa2:	f240 5306 	movw	r3, #1286	@ 0x506
 8015fa6:	e171      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                }
                else
                {
                    /* CID/NAD is not supported by EMVCo 2.5v specification. */
                    if (pDataParams->bOpeMode != RD_LIB_MODE_EMVCO)
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	7c5b      	ldrb	r3, [r3, #17]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d025      	beq.n	8015ffc <phpalI14443p4a_Sw_Rats+0x334>
                    {
                        /* NAD is supported only in ISO/IEC 14443-4 specification. */
                        if (pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	7c5b      	ldrb	r3, [r3, #17]
 8015fb4:	2b03      	cmp	r3, #3
 8015fb6:	d10b      	bne.n	8015fd0 <phpalI14443p4a_Sw_Rats+0x308>
                        {
                            /* Check NAD Support */
                            if (0U != (pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_NAD_SUPPORT))
 8015fb8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	781b      	ldrb	r3, [r3, #0]
 8015fc2:	f003 0301 	and.w	r3, r3, #1
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d002      	beq.n	8015fd0 <phpalI14443p4a_Sw_Rats+0x308>
                            {
                                pDataParams->bNadSupported = PH_ON;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2201      	movs	r2, #1
 8015fce:	725a      	strb	r2, [r3, #9]
                            }
                        }

                        /* Check CID Support */
                        if ((pAts[bAtsIndex] & PHPAL_I14443P4A_SW_ATS_TC1_CID_SUPPORT) == 0U)
 8015fd0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015fd4:	687a      	ldr	r2, [r7, #4]
 8015fd6:	4413      	add	r3, r2
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	f003 0302 	and.w	r3, r3, #2
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d106      	bne.n	8015ff0 <phpalI14443p4a_Sw_Rats+0x328>
                        {
                            pDataParams->bCidSupported = PH_OFF;
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid = 0x00;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2200      	movs	r2, #0
 8015fec:	729a      	strb	r2, [r3, #10]
 8015fee:	e005      	b.n	8015ffc <phpalI14443p4a_Sw_Rats+0x334>
                        }
                        else
                        {
                            pDataParams->bCidSupported = PH_ON;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	721a      	strb	r2, [r3, #8]
                            pDataParams->bCid          = bCid;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	7aba      	ldrb	r2, [r7, #10]
 8015ffa:	729a      	strb	r2, [r3, #10]
                }
            }
        }

        /* Calculate SFGT in Microseconds */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US * ((uint32_t)1U << bSfgi);
 8015ffc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016000:	2201      	movs	r2, #1
 8016002:	fa02 f303 	lsl.w	r3, r2, r3
 8016006:	4618      	mov	r0, r3
 8016008:	f7ea fa7c 	bl	8000504 <__aeabi_ui2d>
 801600c:	a3a7      	add	r3, pc, #668	@ (adr r3, 80162ac <phpalI14443p4a_Sw_Rats+0x5e4>)
 801600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016012:	f7ea faf1 	bl	80005f8 <__aeabi_dmul>
 8016016:	4602      	mov	r2, r0
 8016018:	460b      	mov	r3, r1
 801601a:	4610      	mov	r0, r2
 801601c:	4619      	mov	r1, r3
 801601e:	f7ea fdc3 	bl	8000ba8 <__aeabi_d2f>
 8016022:	4603      	mov	r3, r0
 8016024:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(pDataParams->bOpeMode != RD_LIB_MODE_ISO)
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	7c5b      	ldrb	r3, [r3, #17]
 801602a:	2b03      	cmp	r3, #3
 801602c:	d01f      	beq.n	801606e <phpalI14443p4a_Sw_Rats+0x3a6>
        {
            fDelay += (PHPAL_I14443P4A_DELTA_SFGT_US) * ((uint32_t)1U << bSfgi);
 801602e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016030:	f7ea fa8a 	bl	8000548 <__aeabi_f2d>
 8016034:	4604      	mov	r4, r0
 8016036:	460d      	mov	r5, r1
 8016038:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801603c:	2201      	movs	r2, #1
 801603e:	fa02 f303 	lsl.w	r3, r2, r3
 8016042:	4618      	mov	r0, r3
 8016044:	f7ea fa5e 	bl	8000504 <__aeabi_ui2d>
 8016048:	a39a      	add	r3, pc, #616	@ (adr r3, 80162b4 <phpalI14443p4a_Sw_Rats+0x5ec>)
 801604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801604e:	f7ea fad3 	bl	80005f8 <__aeabi_dmul>
 8016052:	4602      	mov	r2, r0
 8016054:	460b      	mov	r3, r1
 8016056:	4620      	mov	r0, r4
 8016058:	4629      	mov	r1, r5
 801605a:	f7ea f917 	bl	800028c <__adddf3>
 801605e:	4602      	mov	r2, r0
 8016060:	460b      	mov	r3, r1
 8016062:	4610      	mov	r0, r2
 8016064:	4619      	mov	r1, r3
 8016066:	f7ea fd9f 	bl	8000ba8 <__aeabi_d2f>
 801606a:	4603      	mov	r3, r0
 801606c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        dwSfgt = (uint32_t)fDelay;
 801606e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8016072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016076:	ee17 3a90 	vmov	r3, s15
 801607a:	623b      	str	r3, [r7, #32]
        /* Perform SFGT Wait */
        if (dwSfgt > 0xFFFFU)
 801607c:	6a3b      	ldr	r3, [r7, #32]
 801607e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016082:	d314      	bcc.n	80160ae <phpalI14443p4a_Sw_Rats+0x3e6>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	6858      	ldr	r0, [r3, #4]
 8016088:	6a3b      	ldr	r3, [r7, #32]
 801608a:	4a83      	ldr	r2, [pc, #524]	@ (8016298 <phpalI14443p4a_Sw_Rats+0x5d0>)
 801608c:	fba2 2303 	umull	r2, r3, r2, r3
 8016090:	099b      	lsrs	r3, r3, #6
 8016092:	b29b      	uxth	r3, r3
 8016094:	3301      	adds	r3, #1
 8016096:	b29b      	uxth	r3, r3
 8016098:	461a      	mov	r2, r3
 801609a:	2101      	movs	r1, #1
 801609c:	f7f8 f960 	bl	800e360 <phhalHw_Pn5180_Wait>
 80160a0:	4603      	mov	r3, r0
 80160a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80160a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d010      	beq.n	80160cc <phpalI14443p4a_Sw_Rats+0x404>
 80160aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160ac:	e0ee      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MILLISECONDS,
                (uint16_t)((dwSfgt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	685b      	ldr	r3, [r3, #4]
 80160b2:	6a3a      	ldr	r2, [r7, #32]
 80160b4:	b292      	uxth	r2, r2
 80160b6:	2100      	movs	r1, #0
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7f8 f951 	bl	800e360 <phhalHw_Pn5180_Wait>
 80160be:	4603      	mov	r3, r0
 80160c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80160c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d001      	beq.n	80160cc <phpalI14443p4a_Sw_Rats+0x404>
 80160c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80160ca:	e0df      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_TIME_MICROSECONDS,
                (uint16_t)dwSfgt));
        }

        /* Calculate FWT timeout */
        fDelay = PHPAL_I14443P4A_SW_FWT_MIN_US;
 80160cc:	4b73      	ldr	r3, [pc, #460]	@ (801629c <phpalI14443p4a_Sw_Rats+0x5d4>)
 80160ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        fDelay = (fDelay * ((uint32_t)1U << pDataParams->bFwi));
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	7b1b      	ldrb	r3, [r3, #12]
 80160d4:	461a      	mov	r2, r3
 80160d6:	2301      	movs	r3, #1
 80160d8:	4093      	lsls	r3, r2
 80160da:	ee07 3a90 	vmov	s15, r3
 80160de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80160e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160ea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if(pDataParams->bOpeMode == RD_LIB_MODE_ISO)
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	7c5b      	ldrb	r3, [r3, #17]
 80160f2:	2b03      	cmp	r3, #3
 80160f4:	d108      	bne.n	8016108 <phpalI14443p4a_Sw_Rats+0x440>
        {
            /* Add extension time */
            fDelay = fDelay + PHPAL_I14443P4A_SW_EXT_TIME_US;
 80160f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80160fa:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80162a0 <phpalI14443p4a_Sw_Rats+0x5d8>
 80160fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016102:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8016106:	e013      	b.n	8016130 <phpalI14443p4a_Sw_Rats+0x468>
        }
        else
        {
            /* As per Digital Spec V1.1 req 13.8.1.3, NFC Forum Device SHALL wait at least FWT + delta FWTT4AT for a Response */
            fDelay = fDelay + PHPAL_I14443P4A_SW_DELTA_FWT_US;
 8016108:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801610c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80162a4 <phpalI14443p4a_Sw_Rats+0x5dc>
 8016110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016114:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

            if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO) {
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	7c5b      	ldrb	r3, [r3, #17]
 801611c:	2b01      	cmp	r3, #1
 801611e:	d107      	bne.n	8016130 <phpalI14443p4a_Sw_Rats+0x468>
                /* As per EMVCo, add delta Tpcd time along with delta FWT time */
                fDelay += PHPAL_I14443P4A_SW_DELTA_TPCD_US;
 8016120:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8016124:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80162a8 <phpalI14443p4a_Sw_Rats+0x5e0>
 8016128:	ee77 7a87 	vadd.f32	s15, s15, s14
 801612c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            }
        }
        dwFwt = (uint32_t)fDelay;
 8016130:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8016134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016138:	ee17 3a90 	vmov	r3, s15
 801613c:	61fb      	str	r3, [r7, #28]

        /* Set FWT timeout */
        if (dwFwt > 0xFFFFU)
 801613e:	69fb      	ldr	r3, [r7, #28]
 8016140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016144:	d314      	bcc.n	8016170 <phpalI14443p4a_Sw_Rats+0x4a8>
        {
            /* +1 is added to the timeout in millisecond to compensate the
             * fractional microseconds lost in division by 1000 */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	6858      	ldr	r0, [r3, #4]
 801614a:	69fb      	ldr	r3, [r7, #28]
 801614c:	4a52      	ldr	r2, [pc, #328]	@ (8016298 <phpalI14443p4a_Sw_Rats+0x5d0>)
 801614e:	fba2 2303 	umull	r2, r3, r2, r3
 8016152:	099b      	lsrs	r3, r3, #6
 8016154:	b29b      	uxth	r3, r3
 8016156:	3301      	adds	r3, #1
 8016158:	b29b      	uxth	r3, r3
 801615a:	461a      	mov	r2, r3
 801615c:	210e      	movs	r1, #14
 801615e:	f7f8 f9bb 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016162:	4603      	mov	r3, r0
 8016164:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8016166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016168:	2b00      	cmp	r3, #0
 801616a:	d07f      	beq.n	801626c <phpalI14443p4a_Sw_Rats+0x5a4>
 801616c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801616e:	e08d      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
                (uint16_t)((dwFwt / 1000U) + 1U)));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	69fa      	ldr	r2, [r7, #28]
 8016176:	b292      	uxth	r2, r2
 8016178:	210d      	movs	r1, #13
 801617a:	4618      	mov	r0, r3
 801617c:	f7f8 f9ac 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016180:	4603      	mov	r3, r0
 8016182:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8016184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016186:	2b00      	cmp	r3, #0
 8016188:	d070      	beq.n	801626c <phpalI14443p4a_Sw_Rats+0x5a4>
 801618a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801618c:	e07e      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
    }
    /* Perform protocol error handling */
    else
    {
        /* Emvco: case_id TA306_XY and TA307 */
        if(pDataParams->bOpeMode == RD_LIB_MODE_EMVCO)
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	7c5b      	ldrb	r3, [r3, #17]
 8016192:	2b01      	cmp	r3, #1
 8016194:	d101      	bne.n	801619a <phpalI14443p4a_Sw_Rats+0x4d2>
        {
            return status;
 8016196:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016198:	e078      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
        }
        else
        {
            if (I14443P4A_SW_IS_INVALID_BLOCK_STATUS(status) == 0U)
 801619a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801619c:	b2db      	uxtb	r3, r3
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d00d      	beq.n	80161be <phpalI14443p4a_Sw_Rats+0x4f6>
 80161a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80161a4:	b2db      	uxtb	r3, r3
 80161a6:	2b02      	cmp	r3, #2
 80161a8:	d009      	beq.n	80161be <phpalI14443p4a_Sw_Rats+0x4f6>
 80161aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	2b05      	cmp	r3, #5
 80161b0:	d005      	beq.n	80161be <phpalI14443p4a_Sw_Rats+0x4f6>
 80161b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80161b4:	b2db      	uxtb	r3, r3
 80161b6:	2b03      	cmp	r3, #3
 80161b8:	d001      	beq.n	80161be <phpalI14443p4a_Sw_Rats+0x4f6>
            {
                return status;
 80161ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80161bc:	e066      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
            }

            /* Wait FWTmin after RATS */
            if ((status & PH_ERR_MASK) != PH_ERR_IO_TIMEOUT)
 80161be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b01      	cmp	r3, #1
 80161c4:	d00e      	beq.n	80161e4 <phpalI14443p4a_Sw_Rats+0x51c>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	685b      	ldr	r3, [r3, #4]
 80161ca:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80161ce:	2100      	movs	r1, #0
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7f8 f8c5 	bl	800e360 <phhalHw_Pn5180_Wait>
 80161d6:	4603      	mov	r3, r0
 80161d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80161da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d001      	beq.n	80161e4 <phpalI14443p4a_Sw_Rats+0x51c>
 80161e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80161e2:	e053      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                    PHHAL_HW_TIME_MICROSECONDS,
                    (uint16_t)(PHPAL_I14443P4A_SW_FWT_MIN_US) + PHPAL_I14443P4A_SW_EXT_TIME_US));
            }

            /* Send S(DESELECT) command */
            cmd[0] = PHPAL_I14443P4A_SW_S_BLOCK | PHPAL_I14443P4A_SW_S_BLOCK_RFU_BITS | PHPAL_I14443P4A_SW_PCB_DESELECT;
 80161e4:	23c2      	movs	r3, #194	@ 0xc2
 80161e6:	763b      	strb	r3, [r7, #24]
            wCmdLength = 1;
 80161e8:	2301      	movs	r3, #1
 80161ea:	84fb      	strh	r3, [r7, #38]	@ 0x26

            statusTmp = phhalHw_Exchange(
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	6858      	ldr	r0, [r3, #4]
 80161f0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80161f2:	f107 0218 	add.w	r2, r7, #24
 80161f6:	f107 0312 	add.w	r3, r7, #18
 80161fa:	9301      	str	r3, [sp, #4]
 80161fc:	f107 0314 	add.w	r3, r7, #20
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	460b      	mov	r3, r1
 8016204:	2100      	movs	r1, #0
 8016206:	f7f7 fdaf 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 801620a:	4603      	mov	r3, r0
 801620c:	84bb      	strh	r3, [r7, #36]	@ 0x24
                wCmdLength,
                &pResp,
                &wRespLength);

            /* S(DESELECT) failure */
            if (((statusTmp & PH_ERR_MASK) != PH_ERR_SUCCESS) || (wRespLength != 1U) || (pResp[0] != cmd[0]))
 801620e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016210:	b2db      	uxtb	r3, r3
 8016212:	2b00      	cmp	r3, #0
 8016214:	d107      	bne.n	8016226 <phpalI14443p4a_Sw_Rats+0x55e>
 8016216:	8a7b      	ldrh	r3, [r7, #18]
 8016218:	2b01      	cmp	r3, #1
 801621a:	d104      	bne.n	8016226 <phpalI14443p4a_Sw_Rats+0x55e>
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	781a      	ldrb	r2, [r3, #0]
 8016220:	7e3b      	ldrb	r3, [r7, #24]
 8016222:	429a      	cmp	r2, r3
 8016224:	d022      	beq.n	801626c <phpalI14443p4a_Sw_Rats+0x5a4>
            {
                /* Set HLTA timeout */
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	f240 424c 	movw	r2, #1100	@ 0x44c
 801622e:	210d      	movs	r1, #13
 8016230:	4618      	mov	r0, r3
 8016232:	f7f8 f951 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016236:	4603      	mov	r3, r0
 8016238:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801623a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801623c:	2b00      	cmp	r3, #0
 801623e:	d001      	beq.n	8016244 <phpalI14443p4a_Sw_Rats+0x57c>
 8016240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016242:	e023      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
                    pDataParams->pHalDataParams,
                    PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
                    PHPAL_I14443P4A_SW_HALT_TIME_US));

                /* Send HLTA */
                cmd[0] = PHPAL_I14443P4A_SW_HALT_CMD;
 8016244:	2350      	movs	r3, #80	@ 0x50
 8016246:	763b      	strb	r3, [r7, #24]
                cmd[1] = 0x00;
 8016248:	2300      	movs	r3, #0
 801624a:	767b      	strb	r3, [r7, #25]

                statusTmp = phhalHw_Exchange(
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	6858      	ldr	r0, [r3, #4]
 8016250:	f107 0218 	add.w	r2, r7, #24
 8016254:	f107 0312 	add.w	r3, r7, #18
 8016258:	9301      	str	r3, [sp, #4]
 801625a:	f107 0314 	add.w	r3, r7, #20
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	2302      	movs	r3, #2
 8016262:	2100      	movs	r1, #0
 8016264:	f7f7 fd80 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8016268:	4603      	mov	r3, r0
 801626a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                    &wRespLength);
            }
        }
    }

    return PH_ADD_COMPCODE(status, PH_COMP_PAL_ISO14443P4A);
 801626c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801626e:	2b00      	cmp	r3, #0
 8016270:	d00b      	beq.n	801628a <phpalI14443p4a_Sw_Rats+0x5c2>
 8016272:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016274:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016278:	2b00      	cmp	r3, #0
 801627a:	d106      	bne.n	801628a <phpalI14443p4a_Sw_Rats+0x5c2>
 801627c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801627e:	b2db      	uxtb	r3, r3
 8016280:	b29b      	uxth	r3, r3
 8016282:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8016286:	b29b      	uxth	r3, r3
 8016288:	e000      	b.n	801628c <phpalI14443p4a_Sw_Rats+0x5c4>
 801628a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 801628c:	4618      	mov	r0, r3
 801628e:	3730      	adds	r7, #48	@ 0x30
 8016290:	46bd      	mov	sp, r7
 8016292:	bdb0      	pop	{r4, r5, r7, pc}
 8016294:	f3af 8000 	nop.w
 8016298:	10624dd3 	.word	0x10624dd3
 801629c:	4397084f 	.word	0x4397084f
 80162a0:	42700000 	.word	0x42700000
 80162a4:	45638000 	.word	0x45638000
 80162a8:	447a0000 	.word	0x447a0000
 80162ac:	d12e109d 	.word	0xd12e109d
 80162b0:	4072e109 	.word	0x4072e109
 80162b4:	b9c518eb 	.word	0xb9c518eb
 80162b8:	403c518e 	.word	0x403c518e

080162bc <phpalI14443p4a_Sw_Pps>:
phStatus_t phpalI14443p4a_Sw_Pps(
                                 phpalI14443p4a_Sw_DataParams_t * pDataParams,
                                 uint8_t bDri,
                                 uint8_t bDsi
                                 )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b08a      	sub	sp, #40	@ 0x28
 80162c0:	af02      	add	r7, sp, #8
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	460b      	mov	r3, r1
 80162c6:	70fb      	strb	r3, [r7, #3]
 80162c8:	4613      	mov	r3, r2
 80162ca:	70bb      	strb	r3, [r7, #2]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM cmd[3];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80162cc:	2300      	movs	r3, #0
 80162ce:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80162d0:	2300      	movs	r3, #0
 80162d2:	81fb      	strh	r3, [r7, #14]
    uint16_t    PH_MEMLOC_REM wTxDataRate;
    uint16_t    PH_MEMLOC_REM wRxDataRate;

    /* Check and convert Dri value */
    switch (bDri)
 80162d4:	78fb      	ldrb	r3, [r7, #3]
 80162d6:	2b03      	cmp	r3, #3
 80162d8:	d816      	bhi.n	8016308 <phpalI14443p4a_Sw_Pps+0x4c>
 80162da:	a201      	add	r2, pc, #4	@ (adr r2, 80162e0 <phpalI14443p4a_Sw_Pps+0x24>)
 80162dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162e0:	080162f1 	.word	0x080162f1
 80162e4:	080162f7 	.word	0x080162f7
 80162e8:	080162fd 	.word	0x080162fd
 80162ec:	08016303 	.word	0x08016303
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wTxDataRate = PHHAL_HW_RF_DATARATE_106;
 80162f0:	2300      	movs	r3, #0
 80162f2:	83fb      	strh	r3, [r7, #30]
        break;
 80162f4:	e00b      	b.n	801630e <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_212:
        wTxDataRate = PHHAL_HW_RF_DATARATE_212;
 80162f6:	2301      	movs	r3, #1
 80162f8:	83fb      	strh	r3, [r7, #30]
        break;
 80162fa:	e008      	b.n	801630e <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_424:
        wTxDataRate = PHHAL_HW_RF_DATARATE_424;
 80162fc:	2302      	movs	r3, #2
 80162fe:	83fb      	strh	r3, [r7, #30]
        break;
 8016300:	e005      	b.n	801630e <phpalI14443p4a_Sw_Pps+0x52>
    case PHPAL_I14443P4A_DATARATE_848:
        wTxDataRate = PHHAL_HW_RF_DATARATE_848;
 8016302:	2303      	movs	r3, #3
 8016304:	83fb      	strh	r3, [r7, #30]
        break;
 8016306:	e002      	b.n	801630e <phpalI14443p4a_Sw_Pps+0x52>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8016308:	f240 5321 	movw	r3, #1313	@ 0x521
 801630c:	e080      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Check and convert Dsi value */
    switch (bDsi)
 801630e:	78bb      	ldrb	r3, [r7, #2]
 8016310:	2b03      	cmp	r3, #3
 8016312:	d817      	bhi.n	8016344 <phpalI14443p4a_Sw_Pps+0x88>
 8016314:	a201      	add	r2, pc, #4	@ (adr r2, 801631c <phpalI14443p4a_Sw_Pps+0x60>)
 8016316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801631a:	bf00      	nop
 801631c:	0801632d 	.word	0x0801632d
 8016320:	08016333 	.word	0x08016333
 8016324:	08016339 	.word	0x08016339
 8016328:	0801633f 	.word	0x0801633f
    {
    case PHPAL_I14443P4A_DATARATE_106:
        wRxDataRate = PHHAL_HW_RF_DATARATE_106;
 801632c:	2300      	movs	r3, #0
 801632e:	83bb      	strh	r3, [r7, #28]
        break;
 8016330:	e00b      	b.n	801634a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_212:
        wRxDataRate = PHHAL_HW_RF_DATARATE_212;
 8016332:	2301      	movs	r3, #1
 8016334:	83bb      	strh	r3, [r7, #28]
        break;
 8016336:	e008      	b.n	801634a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_424:
        wRxDataRate = PHHAL_HW_RF_DATARATE_424;
 8016338:	2302      	movs	r3, #2
 801633a:	83bb      	strh	r3, [r7, #28]
        break;
 801633c:	e005      	b.n	801634a <phpalI14443p4a_Sw_Pps+0x8e>
    case PHPAL_I14443P4A_DATARATE_848:
        wRxDataRate = PHHAL_HW_RF_DATARATE_848;
 801633e:	2303      	movs	r3, #3
 8016340:	83bb      	strh	r3, [r7, #28]
        break;
 8016342:	e002      	b.n	801634a <phpalI14443p4a_Sw_Pps+0x8e>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8016344:	f240 5321 	movw	r3, #1313	@ 0x521
 8016348:	e062      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Send Pps command */
    cmd[0] = PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	7a9b      	ldrb	r3, [r3, #10]
 801634e:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 8016352:	b2db      	uxtb	r3, r3
 8016354:	753b      	strb	r3, [r7, #20]
    cmd[1] = PHPAL_I14443P4A_SW_PPS0;
 8016356:	2311      	movs	r3, #17
 8016358:	757b      	strb	r3, [r7, #21]
    cmd[2] = ((bDsi << 2U) & 0x0CU) | (bDri & 0x03U);
 801635a:	78bb      	ldrb	r3, [r7, #2]
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	b2db      	uxtb	r3, r3
 8016360:	f003 030c 	and.w	r3, r3, #12
 8016364:	b2da      	uxtb	r2, r3
 8016366:	78fb      	ldrb	r3, [r7, #3]
 8016368:	f003 0303 	and.w	r3, r3, #3
 801636c:	b2db      	uxtb	r3, r3
 801636e:	4313      	orrs	r3, r2
 8016370:	b2db      	uxtb	r3, r3
 8016372:	75bb      	strb	r3, [r7, #22]
    status = phhalHw_Exchange(
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	6858      	ldr	r0, [r3, #4]
 8016378:	f107 0214 	add.w	r2, r7, #20
 801637c:	f107 030e 	add.w	r3, r7, #14
 8016380:	9301      	str	r3, [sp, #4]
 8016382:	f107 0310 	add.w	r3, r7, #16
 8016386:	9300      	str	r3, [sp, #0]
 8016388:	2303      	movs	r3, #3
 801638a:	2100      	movs	r1, #0
 801638c:	f7f7 fcec 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8016390:	4603      	mov	r3, r0
 8016392:	837b      	strh	r3, [r7, #26]
        3,
        &pResp,
        &wRespLength);

    /* NAK means protocol error */
    if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS_INCOMPLETE_BYTE)
 8016394:	8b7b      	ldrh	r3, [r7, #26]
 8016396:	b2db      	uxtb	r3, r3
 8016398:	2b73      	cmp	r3, #115	@ 0x73
 801639a:	d102      	bne.n	80163a2 <phpalI14443p4a_Sw_Pps+0xe6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 801639c:	f240 5306 	movw	r3, #1286	@ 0x506
 80163a0:	e036      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Success check */
    PH_CHECK_SUCCESS(status);
 80163a2:	8b7b      	ldrh	r3, [r7, #26]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d001      	beq.n	80163ac <phpalI14443p4a_Sw_Pps+0xf0>
 80163a8:	8b7b      	ldrh	r3, [r7, #26]
 80163aa:	e031      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>

    /* Check length and start byte of PPS */
    if ((wRespLength != 1U) || (pResp[0] != (PHPAL_I14443P4A_SW_PPSS | pDataParams->bCid)))
 80163ac:	89fb      	ldrh	r3, [r7, #14]
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d108      	bne.n	80163c4 <phpalI14443p4a_Sw_Pps+0x108>
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	781a      	ldrb	r2, [r3, #0]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	7a9b      	ldrb	r3, [r3, #10]
 80163ba:	f063 032f 	orn	r3, r3, #47	@ 0x2f
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d002      	beq.n	80163ca <phpalI14443p4a_Sw_Pps+0x10e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_ISO14443P4A);
 80163c4:	f240 5306 	movw	r3, #1286	@ 0x506
 80163c8:	e022      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>
    }

    /* Store data rates */
    pDataParams->bDri = bDri;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	78fa      	ldrb	r2, [r7, #3]
 80163ce:	73da      	strb	r2, [r3, #15]
    pDataParams->bDsi = bDsi;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	78ba      	ldrb	r2, [r7, #2]
 80163d4:	741a      	strb	r2, [r3, #16]

    /* Apply new data rates to Pcd */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, wTxDataRate));
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	8bfa      	ldrh	r2, [r7, #30]
 80163dc:	2109      	movs	r1, #9
 80163de:	4618      	mov	r0, r3
 80163e0:	f7f8 f87a 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80163e4:	4603      	mov	r3, r0
 80163e6:	833b      	strh	r3, [r7, #24]
 80163e8:	8b3b      	ldrh	r3, [r7, #24]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d001      	beq.n	80163f2 <phpalI14443p4a_Sw_Pps+0x136>
 80163ee:	8b3b      	ldrh	r3, [r7, #24]
 80163f0:	e00e      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, wRxDataRate));
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	685b      	ldr	r3, [r3, #4]
 80163f6:	8bba      	ldrh	r2, [r7, #28]
 80163f8:	210a      	movs	r1, #10
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7f8 f86c 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016400:	4603      	mov	r3, r0
 8016402:	833b      	strh	r3, [r7, #24]
 8016404:	8b3b      	ldrh	r3, [r7, #24]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d001      	beq.n	801640e <phpalI14443p4a_Sw_Pps+0x152>
 801640a:	8b3b      	ldrh	r3, [r7, #24]
 801640c:	e000      	b.n	8016410 <phpalI14443p4a_Sw_Pps+0x154>

    return PH_ERR_SUCCESS;
 801640e:	2300      	movs	r3, #0
}
 8016410:	4618      	mov	r0, r3
 8016412:	3720      	adds	r7, #32
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <phpalI14443p4a_Sw_ActivateCard>:
    uint8_t bCid,
    uint8_t bDri,
    uint8_t bDsi,
    uint8_t * pAts
    )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	4608      	mov	r0, r1
 8016422:	4611      	mov	r1, r2
 8016424:	461a      	mov	r2, r3
 8016426:	4603      	mov	r3, r0
 8016428:	70fb      	strb	r3, [r7, #3]
 801642a:	460b      	mov	r3, r1
 801642c:	70bb      	strb	r3, [r7, #2]
 801642e:	4613      	mov	r3, r2
 8016430:	707b      	strb	r3, [r7, #1]
    phStatus_t PH_MEMLOC_REM statusTmp;
    uint8_t PH_MEMLOC_REM bAts_Dsi;
    uint8_t PH_MEMLOC_REM bAts_Dri;

    /* Check Dri value */
    switch (bDri)
 8016432:	787b      	ldrb	r3, [r7, #1]
 8016434:	2b03      	cmp	r3, #3
 8016436:	d902      	bls.n	801643e <phpalI14443p4a_Sw_ActivateCard+0x26>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8016438:	f240 5321 	movw	r3, #1313	@ 0x521
 801643c:	e0a0      	b.n	8016580 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 801643e:	bf00      	nop
    }

    /* Check Dri value */
    switch (bDsi)
 8016440:	7e3b      	ldrb	r3, [r7, #24]
 8016442:	2b03      	cmp	r3, #3
 8016444:	d902      	bls.n	801644c <phpalI14443p4a_Sw_ActivateCard+0x34>
    case PHPAL_I14443P4A_DATARATE_424:
        /* fall through */
    case PHPAL_I14443P4A_DATARATE_848:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_ISO14443P4A);
 8016446:	f240 5321 	movw	r3, #1313	@ 0x521
 801644a:	e099      	b.n	8016580 <phpalI14443p4a_Sw_ActivateCard+0x168>
        break;
 801644c:	bf00      	nop
    }

    /* Perform RATS */
    statusTmp = phpalI14443p4a_Sw_Rats(pDataParams, bFsdi, bCid, pAts);
 801644e:	78ba      	ldrb	r2, [r7, #2]
 8016450:	78f9      	ldrb	r1, [r7, #3]
 8016452:	69fb      	ldr	r3, [r7, #28]
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7ff fc37 	bl	8015cc8 <phpalI14443p4a_Sw_Rats>
 801645a:	4603      	mov	r3, r0
 801645c:	81fb      	strh	r3, [r7, #14]
    if ((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801645e:	89fb      	ldrh	r3, [r7, #14]
 8016460:	b2db      	uxtb	r3, r3
 8016462:	2b00      	cmp	r3, #0
 8016464:	d17c      	bne.n	8016560 <phpalI14443p4a_Sw_ActivateCard+0x148>
    {
        /* Check user parameter change request versus Card bit rate capabilities and send PPS if required. */
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8016466:	787b      	ldrb	r3, [r7, #1]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d102      	bne.n	8016472 <phpalI14443p4a_Sw_ActivateCard+0x5a>
 801646c:	7e3b      	ldrb	r3, [r7, #24]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d076      	beq.n	8016560 <phpalI14443p4a_Sw_ActivateCard+0x148>
            (pDataParams->bBitRateCaps != 0x00))
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	7adb      	ldrb	r3, [r3, #11]
        if (((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106)) &&
 8016476:	2b00      	cmp	r3, #0
 8016478:	d072      	beq.n	8016560 <phpalI14443p4a_Sw_ActivateCard+0x148>
        {
            if (pDataParams->bBitRateCaps & 0x40U)
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	7adb      	ldrb	r3, [r3, #11]
 801647e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016482:	2b00      	cmp	r3, #0
 8016484:	d002      	beq.n	801648c <phpalI14443p4a_Sw_ActivateCard+0x74>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_848;
 8016486:	2303      	movs	r3, #3
 8016488:	737b      	strb	r3, [r7, #13]
 801648a:	e013      	b.n	80164b4 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x20U)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	7adb      	ldrb	r3, [r3, #11]
 8016490:	f003 0320 	and.w	r3, r3, #32
 8016494:	2b00      	cmp	r3, #0
 8016496:	d002      	beq.n	801649e <phpalI14443p4a_Sw_ActivateCard+0x86>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_424;
 8016498:	2302      	movs	r3, #2
 801649a:	737b      	strb	r3, [r7, #13]
 801649c:	e00a      	b.n	80164b4 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else if (pDataParams->bBitRateCaps & 0x10U)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	7adb      	ldrb	r3, [r3, #11]
 80164a2:	f003 0310 	and.w	r3, r3, #16
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d002      	beq.n	80164b0 <phpalI14443p4a_Sw_ActivateCard+0x98>
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_212;
 80164aa:	2301      	movs	r3, #1
 80164ac:	737b      	strb	r3, [r7, #13]
 80164ae:	e001      	b.n	80164b4 <phpalI14443p4a_Sw_ActivateCard+0x9c>
            }
            else
            {
                bAts_Dsi = PHPAL_I14443P4A_DATARATE_106;
 80164b0:	2300      	movs	r3, #0
 80164b2:	737b      	strb	r3, [r7, #13]
            }

            if (pDataParams->bBitRateCaps & 0x04U)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	7adb      	ldrb	r3, [r3, #11]
 80164b8:	f003 0304 	and.w	r3, r3, #4
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d002      	beq.n	80164c6 <phpalI14443p4a_Sw_ActivateCard+0xae>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_848;
 80164c0:	2303      	movs	r3, #3
 80164c2:	733b      	strb	r3, [r7, #12]
 80164c4:	e013      	b.n	80164ee <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x02U)
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	7adb      	ldrb	r3, [r3, #11]
 80164ca:	f003 0302 	and.w	r3, r3, #2
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d002      	beq.n	80164d8 <phpalI14443p4a_Sw_ActivateCard+0xc0>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_424;
 80164d2:	2302      	movs	r3, #2
 80164d4:	733b      	strb	r3, [r7, #12]
 80164d6:	e00a      	b.n	80164ee <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else if (pDataParams->bBitRateCaps & 0x01U)
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	7adb      	ldrb	r3, [r3, #11]
 80164dc:	f003 0301 	and.w	r3, r3, #1
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d002      	beq.n	80164ea <phpalI14443p4a_Sw_ActivateCard+0xd2>
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_212;
 80164e4:	2301      	movs	r3, #1
 80164e6:	733b      	strb	r3, [r7, #12]
 80164e8:	e001      	b.n	80164ee <phpalI14443p4a_Sw_ActivateCard+0xd6>
            }
            else
            {
                bAts_Dri = PHPAL_I14443P4A_DATARATE_106;
 80164ea:	2300      	movs	r3, #0
 80164ec:	733b      	strb	r3, [r7, #12]
            }

            if ((bDsi != bAts_Dsi) && (bDsi > bAts_Dsi))
 80164ee:	7e3a      	ldrb	r2, [r7, #24]
 80164f0:	7b7b      	ldrb	r3, [r7, #13]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d005      	beq.n	8016502 <phpalI14443p4a_Sw_ActivateCard+0xea>
 80164f6:	7e3a      	ldrb	r2, [r7, #24]
 80164f8:	7b7b      	ldrb	r3, [r7, #13]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d901      	bls.n	8016502 <phpalI14443p4a_Sw_ActivateCard+0xea>
            {
                bDsi = bAts_Dsi;
 80164fe:	7b7b      	ldrb	r3, [r7, #13]
 8016500:	763b      	strb	r3, [r7, #24]
            }

            if ((bDri != bAts_Dri) && (bDri > bAts_Dri))
 8016502:	787a      	ldrb	r2, [r7, #1]
 8016504:	7b3b      	ldrb	r3, [r7, #12]
 8016506:	429a      	cmp	r2, r3
 8016508:	d005      	beq.n	8016516 <phpalI14443p4a_Sw_ActivateCard+0xfe>
 801650a:	787a      	ldrb	r2, [r7, #1]
 801650c:	7b3b      	ldrb	r3, [r7, #12]
 801650e:	429a      	cmp	r2, r3
 8016510:	d901      	bls.n	8016516 <phpalI14443p4a_Sw_ActivateCard+0xfe>
            {
                bDri = bAts_Dri;
 8016512:	7b3b      	ldrb	r3, [r7, #12]
 8016514:	707b      	strb	r3, [r7, #1]
            }

            if (pDataParams->bBitRateCaps & 0x80U)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	7adb      	ldrb	r3, [r3, #11]
 801651a:	b25b      	sxtb	r3, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	da0c      	bge.n	801653a <phpalI14443p4a_Sw_ActivateCard+0x122>
            {
                /* Only same bit rate allowed in both directions. */
                if (bDsi != bDri)
 8016520:	7e3a      	ldrb	r2, [r7, #24]
 8016522:	787b      	ldrb	r3, [r7, #1]
 8016524:	429a      	cmp	r2, r3
 8016526:	d008      	beq.n	801653a <phpalI14443p4a_Sw_ActivateCard+0x122>
                {
                    (bDsi < bDri) ? (bDri = bDsi) : (bDsi = bDri);
 8016528:	7e3a      	ldrb	r2, [r7, #24]
 801652a:	787b      	ldrb	r3, [r7, #1]
 801652c:	429a      	cmp	r2, r3
 801652e:	d202      	bcs.n	8016536 <phpalI14443p4a_Sw_ActivateCard+0x11e>
 8016530:	7e3b      	ldrb	r3, [r7, #24]
 8016532:	707b      	strb	r3, [r7, #1]
 8016534:	e001      	b.n	801653a <phpalI14443p4a_Sw_ActivateCard+0x122>
 8016536:	787b      	ldrb	r3, [r7, #1]
 8016538:	763b      	strb	r3, [r7, #24]
                }
            }

            if ((bDri != PHPAL_I14443P4A_DATARATE_106) || (bDsi != PHPAL_I14443P4A_DATARATE_106))
 801653a:	787b      	ldrb	r3, [r7, #1]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d102      	bne.n	8016546 <phpalI14443p4a_Sw_ActivateCard+0x12e>
 8016540:	7e3b      	ldrb	r3, [r7, #24]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00c      	beq.n	8016560 <phpalI14443p4a_Sw_ActivateCard+0x148>
            {
                /* Perform PPS */
                PH_CHECK_SUCCESS_FCT(statusTmp, phpalI14443p4a_Sw_Pps(pDataParams, bDri, bDsi));
 8016546:	7e3a      	ldrb	r2, [r7, #24]
 8016548:	787b      	ldrb	r3, [r7, #1]
 801654a:	4619      	mov	r1, r3
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f7ff feb5 	bl	80162bc <phpalI14443p4a_Sw_Pps>
 8016552:	4603      	mov	r3, r0
 8016554:	81fb      	strh	r3, [r7, #14]
 8016556:	89fb      	ldrh	r3, [r7, #14]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d001      	beq.n	8016560 <phpalI14443p4a_Sw_ActivateCard+0x148>
 801655c:	89fb      	ldrh	r3, [r7, #14]
 801655e:	e00f      	b.n	8016580 <phpalI14443p4a_Sw_ActivateCard+0x168>
            }
        }
    }

    return PH_ADD_COMPCODE(statusTmp, PH_COMP_PAL_ISO14443P4A);
 8016560:	89fb      	ldrh	r3, [r7, #14]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d00b      	beq.n	801657e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8016566:	89fb      	ldrh	r3, [r7, #14]
 8016568:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801656c:	2b00      	cmp	r3, #0
 801656e:	d106      	bne.n	801657e <phpalI14443p4a_Sw_ActivateCard+0x166>
 8016570:	89fb      	ldrh	r3, [r7, #14]
 8016572:	b2db      	uxtb	r3, r3
 8016574:	b29b      	uxth	r3, r3
 8016576:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 801657a:	b29b      	uxth	r3, r3
 801657c:	e000      	b.n	8016580 <phpalI14443p4a_Sw_ActivateCard+0x168>
 801657e:	89fb      	ldrh	r3, [r7, #14]
}
 8016580:	4618      	mov	r0, r3
 8016582:	3710      	adds	r7, #16
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}

08016588 <phpalI14443p4a_Sw_GetProtocolParams>:
    uint8_t * pNadSupported,
    uint8_t * pFwi,
    uint8_t * pFsdi,
    uint8_t * pFsci
    )
{
 8016588:	b480      	push	{r7}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	60f8      	str	r0, [r7, #12]
 8016590:	60b9      	str	r1, [r7, #8]
 8016592:	607a      	str	r2, [r7, #4]
 8016594:	603b      	str	r3, [r7, #0]
    *pCidEnabled    = pDataParams->bCidSupported;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	7a1a      	ldrb	r2, [r3, #8]
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	701a      	strb	r2, [r3, #0]
    *pCid           = pDataParams->bCid;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	7a9a      	ldrb	r2, [r3, #10]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	701a      	strb	r2, [r3, #0]
    *pNadSupported  = pDataParams->bNadSupported;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	7a5a      	ldrb	r2, [r3, #9]
 80165aa:	683b      	ldr	r3, [r7, #0]
 80165ac:	701a      	strb	r2, [r3, #0]
    *pFwi           = pDataParams->bFwi;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	7b1a      	ldrb	r2, [r3, #12]
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	701a      	strb	r2, [r3, #0]
    *pFsdi          = pDataParams->bFsdi;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	7b9a      	ldrb	r2, [r3, #14]
 80165ba:	69fb      	ldr	r3, [r7, #28]
 80165bc:	701a      	strb	r2, [r3, #0]
    *pFsci          = pDataParams->bFsci;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	7b5a      	ldrb	r2, [r3, #13]
 80165c2:	6a3b      	ldr	r3, [r7, #32]
 80165c4:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 80165c6:	2300      	movs	r3, #0
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3714      	adds	r7, #20
 80165cc:	46bd      	mov	sp, r7
 80165ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d2:	4770      	bx	lr

080165d4 <phpalI14443p4mC_Sw_Init>:
                                   phpalI14443p4mC_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams,
                                   pWtxTimerCallback pWtxCallback
                                   )
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b086      	sub	sp, #24
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	607a      	str	r2, [r7, #4]
 80165de:	603b      	str	r3, [r7, #0]
 80165e0:	460b      	mov	r3, r1
 80165e2:	817b      	strh	r3, [r7, #10]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 80165e4:	2300      	movs	r3, #0
 80165e6:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI14443p4mC_Sw_DataParams_t) != wSizeOfDataParams)
 80165e8:	897b      	ldrh	r3, [r7, #10]
 80165ea:	2b34      	cmp	r3, #52	@ 0x34
 80165ec:	d002      	beq.n	80165f4 <phpalI14443p4mC_Sw_Init+0x20>
    {
        return (PH_ERR_INVALID_DATA_PARAMS | PH_COMP_PAL_I14443P4MC);
 80165ee:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80165f2:	e039      	b.n	8016668 <phpalI14443p4mC_Sw_Init+0x94>
    }
    PH_ASSERT_NULL (pDataParams);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d101      	bne.n	80165fe <phpalI14443p4mC_Sw_Init+0x2a>
 80165fa:	2321      	movs	r3, #33	@ 0x21
 80165fc:	e034      	b.n	8016668 <phpalI14443p4mC_Sw_Init+0x94>
    PH_ASSERT_NULL (pHalDataParams);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d101      	bne.n	8016608 <phpalI14443p4mC_Sw_Init+0x34>
 8016604:	2321      	movs	r3, #33	@ 0x21
 8016606:	e02f      	b.n	8016668 <phpalI14443p4mC_Sw_Init+0x94>

    /* Initialize data parameters */
    pDataParams->wId                = PH_COMP_PAL_I14443P4MC | PHPAL_I14443P4MC_SW_ID;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	f640 7201 	movw	r2, #3841	@ 0xf01
 801660e:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	605a      	str	r2, [r3, #4]
    pDataParams->pWtxTimerCallback  = pWtxCallback;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	683a      	ldr	r2, [r7, #0]
 801661a:	631a      	str	r2, [r3, #48]	@ 0x30

    pDataParams->bWtx               = PHPAL_I14443P4MC_SW_MIN_WTX_VALUE;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	2201      	movs	r2, #1
 8016620:	765a      	strb	r2, [r3, #25]
    pDataParams->bDisableWtx        = PH_OFF;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2200      	movs	r2, #0
 8016626:	761a      	strb	r2, [r3, #24]
    /* Default operating mode is NFC */
    pDataParams->bOpMode            = RD_LIB_MODE_NFC;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2202      	movs	r2, #2
 801662c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    /* By default delta time to be subtracted from WTX timer time is set to 0 */
    pDataParams->wWtDelta           = 0;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2200      	movs	r2, #0
 8016634:	859a      	strh	r2, [r3, #44]	@ 0x2c
    /* Default percentage of actual time to be used in WTX timer is set to 75% */
    pDataParams->bWtPercentage      = 75;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	224b      	movs	r2, #75	@ 0x4b
 801663a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Reset protocol to defaults */
    (void)phpalI14443p4mC_Sw_ResetProtocol(pDataParams);
 801663e:	68f8      	ldr	r0, [r7, #12]
 8016640:	f000 f818 	bl	8016674 <phpalI14443p4mC_Sw_ResetProtocol>

    /* check whether event is already created. */
    pDataParams->mcEventObj.intialValue = 0;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	2200      	movs	r2, #0
 8016648:	611a      	str	r2, [r3, #16]
    pDataParams->mcEventObj.pEvtName = (uint8_t *)bmcEventName;
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	4a08      	ldr	r2, [pc, #32]	@ (8016670 <phpalI14443p4mC_Sw_Init+0x9c>)
 801664e:	60da      	str	r2, [r3, #12]
    wStatus = phOsal_EventCreate(&pDataParams->mcEventObj.EventHandle, &pDataParams->mcEventObj);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	f103 0208 	add.w	r2, r3, #8
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	3308      	adds	r3, #8
 801665a:	4619      	mov	r1, r3
 801665c:	4610      	mov	r0, r2
 801665e:	f002 fc1f 	bl	8018ea0 <phOsal_EventCreate>
 8016662:	4603      	mov	r3, r0
 8016664:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8016666:	8afb      	ldrh	r3, [r7, #22]
}
 8016668:	4618      	mov	r0, r3
 801666a:	3718      	adds	r7, #24
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	08022120 	.word	0x08022120

08016674 <phpalI14443p4mC_Sw_ResetProtocol>:
}

phStatus_t phpalI14443p4mC_Sw_ResetProtocol(
                                            phpalI14443p4mC_Sw_DataParams_t * pDataParams
                                            )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
    phStatus_t wStatus = PH_ERR_SUCCESS;
 801667c:	2300      	movs	r3, #0
 801667e:	81fb      	strh	r3, [r7, #14]
    pDataParams->bStateNow        = PHPAL_I14443P4MC_STATE_NONE;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2200      	movs	r2, #0
 8016684:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* Default block number is 1. ISO14443-4 7.5.3.2. Rule C */
    pDataParams->bBlockNr         = 1;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2201      	movs	r2, #1
 801668c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bFsdi            = 0;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2200      	movs	r2, #0
 8016694:	769a      	strb	r2, [r3, #26]
    /* Default FSCI value is 2 */
    pDataParams->bFsci            = PHPALI14443P4MC_FSCI_DEFAULT;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2202      	movs	r2, #2
 801669a:	76da      	strb	r2, [r3, #27]
    pDataParams->bDr              = PHPAL_I14443P4MC_106;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2200      	movs	r2, #0
 80166a0:	771a      	strb	r2, [r3, #28]
    pDataParams->bDs              = PHPAL_I14443P4MC_106;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	775a      	strb	r2, [r3, #29]
    pDataParams->bSameDSupport    = 0;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2200      	movs	r2, #0
 80166ac:	779a      	strb	r2, [r3, #30]
    pDataParams->bFwi             = PHPALI14443P4MC_FWI_DEFAULT;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2204      	movs	r2, #4
 80166b2:	77da      	strb	r2, [r3, #31]
    pDataParams->bSfgi            = PHPALI14443P4MC_SFGI_DEFAULT;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2200      	movs	r2, #0
 80166b8:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bCid             = 0;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2200      	movs	r2, #0
 80166c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    pDataParams->bNad             = 0;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2200      	movs	r2, #0
 80166c8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bChainingRx      = 0;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2200      	movs	r2, #0
 80166d0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bChainingTx      = 0;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2200      	movs	r2, #0
 80166d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    /* Default CID supported ISO14443-4 5.2.6 */
    pDataParams->bCidEnable       = PH_ON;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	2201      	movs	r2, #1
 80166e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    /* Default NAD not supported ISO14443-4 5.2.6 */
    pDataParams->bNadEnable       = PH_OFF;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2200      	movs	r2, #0
 80166e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pDataParams->bCidPresence     = FALSE;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2200      	movs	r2, #0
 80166f0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    pDataParams->bNadPresence     = FALSE;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2200      	movs	r2, #0
 80166f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Reset the position in case the PICC stopped abruptly due to RF OFF during chaining */
    PH_CHECK_SUCCESS_FCT(wStatus, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXBUFFER_STARTPOS, 0));
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	2200      	movs	r2, #0
 8016702:	2130      	movs	r1, #48	@ 0x30
 8016704:	4618      	mov	r0, r3
 8016706:	f7f7 fee7 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801670a:	4603      	mov	r3, r0
 801670c:	81fb      	strh	r3, [r7, #14]
 801670e:	89fb      	ldrh	r3, [r7, #14]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d001      	beq.n	8016718 <phpalI14443p4mC_Sw_ResetProtocol+0xa4>
 8016714:	89fb      	ldrh	r3, [r7, #14]
 8016716:	e000      	b.n	801671a <phpalI14443p4mC_Sw_ResetProtocol+0xa6>

    return wStatus;
 8016718:	89fb      	ldrh	r3, [r7, #14]
}
 801671a:	4618      	mov	r0, r3
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}

08016722 <phpalI18000p3m3_Sw_Init>:
phStatus_t phpalI18000p3m3_Sw_Init(
                                   phpalI18000p3m3_Sw_DataParams_t * pDataParams,
                                   uint16_t wSizeOfDataParams,
                                   void * pHalDataParams
                                   )
{
 8016722:	b480      	push	{r7}
 8016724:	b085      	sub	sp, #20
 8016726:	af00      	add	r7, sp, #0
 8016728:	60f8      	str	r0, [r7, #12]
 801672a:	460b      	mov	r3, r1
 801672c:	607a      	str	r2, [r7, #4]
 801672e:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18000p3m3_Sw_DataParams_t) != wSizeOfDataParams)
 8016730:	897b      	ldrh	r3, [r7, #10]
 8016732:	2b0c      	cmp	r3, #12
 8016734:	d002      	beq.n	801673c <phpalI18000p3m3_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18000P3M3);
 8016736:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 801673a:	e017      	b.n	801676c <phpalI18000p3m3_Sw_Init+0x4a>
    }
    PH_ASSERT_NULL (pDataParams);
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d101      	bne.n	8016746 <phpalI18000p3m3_Sw_Init+0x24>
 8016742:	2321      	movs	r3, #33	@ 0x21
 8016744:	e012      	b.n	801676c <phpalI18000p3m3_Sw_Init+0x4a>
    PH_ASSERT_NULL (pHalDataParams);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d101      	bne.n	8016750 <phpalI18000p3m3_Sw_Init+0x2e>
 801674c:	2321      	movs	r3, #33	@ 0x21
 801674e:	e00d      	b.n	801676c <phpalI18000p3m3_Sw_Init+0x4a>

    pDataParams->wId                = PH_COMP_PAL_I18000P3M3 | PHPAL_I18000P3M3_SW_ID;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	f640 3201 	movw	r2, #2817	@ 0xb01
 8016756:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	605a      	str	r2, [r3, #4]
    pDataParams->bSession           = PHPAL_I18000P3M3_SESSION_S0;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	2200      	movs	r2, #0
 8016762:	721a      	strb	r2, [r3, #8]
    pDataParams->bStoredCRCValid    = PH_OFF;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2200      	movs	r2, #0
 8016768:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 801676a:	2300      	movs	r3, #0
}
 801676c:	4618      	mov	r0, r3
 801676e:	3714      	adds	r7, #20
 8016770:	46bd      	mov	sp, r7
 8016772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016776:	4770      	bx	lr

08016778 <phpalI18000p3m3_Sw_CreateSelectCmd>:
                                         uint8_t bTruncate,
                                         uint8_t * pSelectCmd,
                                         uint8_t * bLen,
                                         uint8_t * bValidBits
                                        )
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	4608      	mov	r0, r1
 8016782:	4611      	mov	r1, r2
 8016784:	461a      	mov	r2, r3
 8016786:	4603      	mov	r3, r0
 8016788:	70fb      	strb	r3, [r7, #3]
 801678a:	460b      	mov	r3, r1
 801678c:	70bb      	strb	r3, [r7, #2]
 801678e:	4613      	mov	r3, r2
 8016790:	707b      	strb	r3, [r7, #1]
    uint8_t     PH_MEMLOC_COUNT bIndex;
    uint8_t     PH_MEMLOC_REM bCmdLength;
    uint8_t     PH_MEMLOC_REM bTmp;
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint16_t    PH_MEMLOC_REM wCmdBitLength = 0;
 8016792:	2300      	movs	r3, #0
 8016794:	817b      	strh	r3, [r7, #10]
    PH_UNUSED_VARIABLE(pDataParams);
    /* Parameter check */
    if ((bTarget > 0x07U) || (bAction > 0x07U) || (bMemBank > 0x03U) || (bPointerLength > 3U) || (bTruncate > 1U))
 8016796:	78fb      	ldrb	r3, [r7, #3]
 8016798:	2b07      	cmp	r3, #7
 801679a:	d80c      	bhi.n	80167b6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 801679c:	78bb      	ldrb	r3, [r7, #2]
 801679e:	2b07      	cmp	r3, #7
 80167a0:	d809      	bhi.n	80167b6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80167a2:	787b      	ldrb	r3, [r7, #1]
 80167a4:	2b03      	cmp	r3, #3
 80167a6:	d806      	bhi.n	80167b6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80167a8:	7f3b      	ldrb	r3, [r7, #28]
 80167aa:	2b03      	cmp	r3, #3
 80167ac:	d803      	bhi.n	80167b6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x3e>
 80167ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80167b2:	2b01      	cmp	r3, #1
 80167b4:	d902      	bls.n	80167bc <phpalI18000p3m3_Sw_CreateSelectCmd+0x44>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80167b6:	f640 3321 	movw	r3, #2849	@ 0xb21
 80167ba:	e0f0      	b.n	801699e <phpalI18000p3m3_Sw_CreateSelectCmd+0x226>
    }

    /* Build Command frame */
    bCmdLength = 0;
 80167bc:	2300      	movs	r3, #0
 80167be:	73bb      	strb	r3, [r7, #14]
    *(pSelectCmd + bCmdLength++) = (PHPAL_I18000P3M3_CMD_SELECT << 4U) | (bTarget << 1U) | (bAction >> 2U);  /* 0 bits left */
 80167c0:	78fb      	ldrb	r3, [r7, #3]
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	b2da      	uxtb	r2, r3
 80167c6:	78bb      	ldrb	r3, [r7, #2]
 80167c8:	089b      	lsrs	r3, r3, #2
 80167ca:	b2db      	uxtb	r3, r3
 80167cc:	4313      	orrs	r3, r2
 80167ce:	b2da      	uxtb	r2, r3
 80167d0:	7bbb      	ldrb	r3, [r7, #14]
 80167d2:	1c59      	adds	r1, r3, #1
 80167d4:	73b9      	strb	r1, [r7, #14]
 80167d6:	4619      	mov	r1, r3
 80167d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167da:	440b      	add	r3, r1
 80167dc:	f062 025f 	orn	r2, r2, #95	@ 0x5f
 80167e0:	b2d2      	uxtb	r2, r2
 80167e2:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)   = (bAction << 6U) | (bMemBank <<  4U) | (bPointerLength << 2U);             /* 2 bits left */
 80167e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80167e8:	019b      	lsls	r3, r3, #6
 80167ea:	b25a      	sxtb	r2, r3
 80167ec:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80167f0:	011b      	lsls	r3, r3, #4
 80167f2:	b25b      	sxtb	r3, r3
 80167f4:	4313      	orrs	r3, r2
 80167f6:	b25a      	sxtb	r2, r3
 80167f8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	b25b      	sxtb	r3, r3
 8016800:	4313      	orrs	r3, r2
 8016802:	b259      	sxtb	r1, r3
 8016804:	7bbb      	ldrb	r3, [r7, #14]
 8016806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016808:	4413      	add	r3, r2
 801680a:	b2ca      	uxtb	r2, r1
 801680c:	701a      	strb	r2, [r3, #0]

    /* append pointer */
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 801680e:	2300      	movs	r3, #0
 8016810:	73fb      	strb	r3, [r7, #15]
 8016812:	e01f      	b.n	8016854 <phpalI18000p3m3_Sw_CreateSelectCmd+0xdc>
    {
        *(pSelectCmd + bCmdLength++) |= (pPointer[bIndex]) >> 6U;
 8016814:	7bbb      	ldrb	r3, [r7, #14]
 8016816:	1c5a      	adds	r2, r3, #1
 8016818:	73ba      	strb	r2, [r7, #14]
 801681a:	4619      	mov	r1, r3
 801681c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801681e:	440a      	add	r2, r1
 8016820:	7811      	ldrb	r1, [r2, #0]
 8016822:	7bfa      	ldrb	r2, [r7, #15]
 8016824:	69b8      	ldr	r0, [r7, #24]
 8016826:	4402      	add	r2, r0
 8016828:	7812      	ldrb	r2, [r2, #0]
 801682a:	0992      	lsrs	r2, r2, #6
 801682c:	b2d2      	uxtb	r2, r2
 801682e:	4618      	mov	r0, r3
 8016830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016832:	4403      	add	r3, r0
 8016834:	430a      	orrs	r2, r1
 8016836:	b2d2      	uxtb	r2, r2
 8016838:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = (pPointer[bIndex]) << 2U;
 801683a:	7bfb      	ldrb	r3, [r7, #15]
 801683c:	69ba      	ldr	r2, [r7, #24]
 801683e:	4413      	add	r3, r2
 8016840:	781a      	ldrb	r2, [r3, #0]
 8016842:	7bbb      	ldrb	r3, [r7, #14]
 8016844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016846:	440b      	add	r3, r1
 8016848:	0092      	lsls	r2, r2, #2
 801684a:	b2d2      	uxtb	r2, r2
 801684c:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < (bPointerLength + /* */ 1U); ++bIndex)
 801684e:	7bfb      	ldrb	r3, [r7, #15]
 8016850:	3301      	adds	r3, #1
 8016852:	73fb      	strb	r3, [r7, #15]
 8016854:	7bfa      	ldrb	r2, [r7, #15]
 8016856:	7f3b      	ldrb	r3, [r7, #28]
 8016858:	3301      	adds	r3, #1
 801685a:	429a      	cmp	r2, r3
 801685c:	d3da      	bcc.n	8016814 <phpalI18000p3m3_Sw_CreateSelectCmd+0x9c>
    }
    /* 2 bits left */

    *(pSelectCmd + bCmdLength++) |= bMaskBitLength >> 6U;
 801685e:	7bbb      	ldrb	r3, [r7, #14]
 8016860:	1c5a      	adds	r2, r3, #1
 8016862:	73ba      	strb	r2, [r7, #14]
 8016864:	4619      	mov	r1, r3
 8016866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016868:	440a      	add	r2, r1
 801686a:	7811      	ldrb	r1, [r2, #0]
 801686c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8016870:	0992      	lsrs	r2, r2, #6
 8016872:	b2d2      	uxtb	r2, r2
 8016874:	4618      	mov	r0, r3
 8016876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016878:	4403      	add	r3, r0
 801687a:	430a      	orrs	r2, r1
 801687c:	b2d2      	uxtb	r2, r2
 801687e:	701a      	strb	r2, [r3, #0]
    *(pSelectCmd + bCmdLength)    = bMaskBitLength << 2U;  /* 2 bits left */
 8016880:	7bbb      	ldrb	r3, [r7, #14]
 8016882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016884:	4413      	add	r3, r2
 8016886:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 801688a:	0092      	lsls	r2, r2, #2
 801688c:	b2d2      	uxtb	r2, r2
 801688e:	701a      	strb	r2, [r3, #0]

    /* calculate intermediate bitlength */
    wCmdBitLength = ((uint16_t)bCmdLength << 3U) + 6U;
 8016890:	7bbb      	ldrb	r3, [r7, #14]
 8016892:	b29b      	uxth	r3, r3
 8016894:	00db      	lsls	r3, r3, #3
 8016896:	b29b      	uxth	r3, r3
 8016898:	3306      	adds	r3, #6
 801689a:	817b      	strh	r3, [r7, #10]

    /* get byte-length of mask */
    bMaskByteLength = bMaskBitLength >> 3U;
 801689c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80168a0:	08db      	lsrs	r3, r3, #3
 80168a2:	733b      	strb	r3, [r7, #12]
    if (0U != (bMaskBitLength & 0x07U))
 80168a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80168a8:	f003 0307 	and.w	r3, r3, #7
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d002      	beq.n	80168b6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x13e>
    {
        ++bMaskByteLength;
 80168b0:	7b3b      	ldrb	r3, [r7, #12]
 80168b2:	3301      	adds	r3, #1
 80168b4:	733b      	strb	r3, [r7, #12]
    }

    /* append mask value */
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 80168b6:	2300      	movs	r3, #0
 80168b8:	73fb      	strb	r3, [r7, #15]
 80168ba:	e036      	b.n	801692a <phpalI18000p3m3_Sw_CreateSelectCmd+0x1b2>
    {
        bTmp = pMask[bIndex];
 80168bc:	7bfb      	ldrb	r3, [r7, #15]
 80168be:	6a3a      	ldr	r2, [r7, #32]
 80168c0:	4413      	add	r3, r2
 80168c2:	781b      	ldrb	r3, [r3, #0]
 80168c4:	737b      	strb	r3, [r7, #13]

        /* Mask out invalid bits of last byte */
        if ((bIndex == (bMaskByteLength - 1U)) && ((bMaskBitLength & 0x07U) > 0U))
 80168c6:	7bfa      	ldrb	r2, [r7, #15]
 80168c8:	7b3b      	ldrb	r3, [r7, #12]
 80168ca:	3b01      	subs	r3, #1
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d112      	bne.n	80168f6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
 80168d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80168d4:	f003 0307 	and.w	r3, r3, #7
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00c      	beq.n	80168f6 <phpalI18000p3m3_Sw_CreateSelectCmd+0x17e>
        {
            bTmp &= (uint8_t)(0xFFU << (8U - (bMaskBitLength & 0x07U)));
 80168dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80168e0:	f003 0307 	and.w	r3, r3, #7
 80168e4:	f1c3 0308 	rsb	r3, r3, #8
 80168e8:	22ff      	movs	r2, #255	@ 0xff
 80168ea:	fa02 f303 	lsl.w	r3, r2, r3
 80168ee:	b2da      	uxtb	r2, r3
 80168f0:	7b7b      	ldrb	r3, [r7, #13]
 80168f2:	4013      	ands	r3, r2
 80168f4:	737b      	strb	r3, [r7, #13]
        }

        /* Append mask value */
        *(pSelectCmd + bCmdLength++) |= bTmp >> 6U;
 80168f6:	7bbb      	ldrb	r3, [r7, #14]
 80168f8:	1c5a      	adds	r2, r3, #1
 80168fa:	73ba      	strb	r2, [r7, #14]
 80168fc:	4619      	mov	r1, r3
 80168fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016900:	440a      	add	r2, r1
 8016902:	7811      	ldrb	r1, [r2, #0]
 8016904:	7b7a      	ldrb	r2, [r7, #13]
 8016906:	0992      	lsrs	r2, r2, #6
 8016908:	b2d2      	uxtb	r2, r2
 801690a:	4618      	mov	r0, r3
 801690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801690e:	4403      	add	r3, r0
 8016910:	430a      	orrs	r2, r1
 8016912:	b2d2      	uxtb	r2, r2
 8016914:	701a      	strb	r2, [r3, #0]
        *(pSelectCmd + bCmdLength)    = bTmp << 2U;
 8016916:	7bbb      	ldrb	r3, [r7, #14]
 8016918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801691a:	4413      	add	r3, r2
 801691c:	7b7a      	ldrb	r2, [r7, #13]
 801691e:	0092      	lsls	r2, r2, #2
 8016920:	b2d2      	uxtb	r2, r2
 8016922:	701a      	strb	r2, [r3, #0]
    for (bIndex = 0; bIndex < bMaskByteLength; ++bIndex)
 8016924:	7bfb      	ldrb	r3, [r7, #15]
 8016926:	3301      	adds	r3, #1
 8016928:	73fb      	strb	r3, [r7, #15]
 801692a:	7bfa      	ldrb	r2, [r7, #15]
 801692c:	7b3b      	ldrb	r3, [r7, #12]
 801692e:	429a      	cmp	r2, r3
 8016930:	d3c4      	bcc.n	80168bc <phpalI18000p3m3_Sw_CreateSelectCmd+0x144>
    }
    /* calculate new bit length */
    wCmdBitLength = wCmdBitLength + bMaskBitLength;
 8016932:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016936:	b29a      	uxth	r2, r3
 8016938:	897b      	ldrh	r3, [r7, #10]
 801693a:	4413      	add	r3, r2
 801693c:	817b      	strh	r3, [r7, #10]

    /* decrement length if we incremented too much */
    if ((wCmdBitLength >> 3U) != bCmdLength)
 801693e:	897b      	ldrh	r3, [r7, #10]
 8016940:	08db      	lsrs	r3, r3, #3
 8016942:	b29a      	uxth	r2, r3
 8016944:	7bbb      	ldrb	r3, [r7, #14]
 8016946:	b29b      	uxth	r3, r3
 8016948:	429a      	cmp	r2, r3
 801694a:	d002      	beq.n	8016952 <phpalI18000p3m3_Sw_CreateSelectCmd+0x1da>
    {
        --bCmdLength;
 801694c:	7bbb      	ldrb	r3, [r7, #14]
 801694e:	3b01      	subs	r3, #1
 8016950:	73bb      	strb	r3, [r7, #14]
    }

    /* append truncate bit */
    if (bTruncate != PH_OFF)
 8016952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016956:	2b00      	cmp	r3, #0
 8016958:	d010      	beq.n	801697c <phpalI18000p3m3_Sw_CreateSelectCmd+0x204>
    {
        *(pSelectCmd + bCmdLength) |= (uint8_t)(0x80U >> (wCmdBitLength & 0x07U));
 801695a:	7bbb      	ldrb	r3, [r7, #14]
 801695c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801695e:	4413      	add	r3, r2
 8016960:	7819      	ldrb	r1, [r3, #0]
 8016962:	897b      	ldrh	r3, [r7, #10]
 8016964:	f003 0307 	and.w	r3, r3, #7
 8016968:	2280      	movs	r2, #128	@ 0x80
 801696a:	fa22 f303 	lsr.w	r3, r2, r3
 801696e:	b2da      	uxtb	r2, r3
 8016970:	7bbb      	ldrb	r3, [r7, #14]
 8016972:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016974:	4403      	add	r3, r0
 8016976:	430a      	orrs	r2, r1
 8016978:	b2d2      	uxtb	r2, r2
 801697a:	701a      	strb	r2, [r3, #0]
    }
    ++bCmdLength;
 801697c:	7bbb      	ldrb	r3, [r7, #14]
 801697e:	3301      	adds	r3, #1
 8016980:	73bb      	strb	r3, [r7, #14]
    ++wCmdBitLength;
 8016982:	897b      	ldrh	r3, [r7, #10]
 8016984:	3301      	adds	r3, #1
 8016986:	817b      	strh	r3, [r7, #10]
    *bLen = bCmdLength;
 8016988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801698a:	7bba      	ldrb	r2, [r7, #14]
 801698c:	701a      	strb	r2, [r3, #0]
    *bValidBits = (uint8_t)(wCmdBitLength & 0x07U);
 801698e:	897b      	ldrh	r3, [r7, #10]
 8016990:	b2db      	uxtb	r3, r3
 8016992:	f003 0307 	and.w	r3, r3, #7
 8016996:	b2da      	uxtb	r2, r3
 8016998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801699a:	701a      	strb	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 801699c:	2300      	movs	r3, #0
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3714      	adds	r7, #20
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr

080169aa <phpalI18000p3m3_Sw_CreateBeginRoundCmd>:
    uint8_t bSession,
    uint8_t bRfu,
    uint8_t bQ,
    uint8_t * pBeginRnd
    )
{
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b084      	sub	sp, #16
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
 80169b2:	4608      	mov	r0, r1
 80169b4:	4611      	mov	r1, r2
 80169b6:	461a      	mov	r2, r3
 80169b8:	4603      	mov	r3, r0
 80169ba:	70fb      	strb	r3, [r7, #3]
 80169bc:	460b      	mov	r3, r1
 80169be:	70bb      	strb	r3, [r7, #2]
 80169c0:	4613      	mov	r3, r2
 80169c2:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t PH_MEMLOC_REM wValue = 0;
 80169c4:	2300      	movs	r3, #0
 80169c6:	81fb      	strh	r3, [r7, #14]
    /* Parameter check */
    if ((bDr > 0x01U) || (bM < 0x02U) || (bM > 0x03U) || (bTRext > 1U) || (bSel > 0x03U) || (bSession > 0x03U) || (bRfu > 0x01U) || (bQ > 0x0FU))
 80169c8:	78fb      	ldrb	r3, [r7, #3]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d816      	bhi.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169ce:	78bb      	ldrb	r3, [r7, #2]
 80169d0:	2b01      	cmp	r3, #1
 80169d2:	d913      	bls.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169d4:	78bb      	ldrb	r3, [r7, #2]
 80169d6:	2b03      	cmp	r3, #3
 80169d8:	d810      	bhi.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169da:	787b      	ldrb	r3, [r7, #1]
 80169dc:	2b01      	cmp	r3, #1
 80169de:	d80d      	bhi.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169e0:	7e3b      	ldrb	r3, [r7, #24]
 80169e2:	2b03      	cmp	r3, #3
 80169e4:	d80a      	bhi.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169e6:	7f3b      	ldrb	r3, [r7, #28]
 80169e8:	2b03      	cmp	r3, #3
 80169ea:	d807      	bhi.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80169f0:	2b01      	cmp	r3, #1
 80169f2:	d803      	bhi.n	80169fc <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x52>
 80169f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80169f8:	2b0f      	cmp	r3, #15
 80169fa:	d902      	bls.n	8016a02 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x58>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18000P3M3);
 80169fc:	f640 3321 	movw	r3, #2849	@ 0xb21
 8016a00:	e072      	b.n	8016ae8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
    }

    /* Store new session parameter */
   pDataParams->bSession = bSession;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	7f3a      	ldrb	r2, [r7, #28]
 8016a06:	721a      	strb	r2, [r3, #8]

    /* Map TRext to 0 or 1 */
    if (bTRext != PH_OFF)
 8016a08:	787b      	ldrb	r3, [r7, #1]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d002      	beq.n	8016a14 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6a>
    {
        bTRext = 1;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	707b      	strb	r3, [r7, #1]
 8016a12:	e001      	b.n	8016a18 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x6e>
    }
    else
    {
        bTRext = 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	707b      	strb	r3, [r7, #1]
    }

    /* Build Command frame */
    *pBeginRnd = (PHPAL_I18000P3M3_CMD_BEGIN_ROUND << 4U) | (bDr << 3U) | (bM << 1U) | (bTRext);  /* 0 bits left */
 8016a18:	78fb      	ldrb	r3, [r7, #3]
 8016a1a:	00db      	lsls	r3, r3, #3
 8016a1c:	b2da      	uxtb	r2, r3
 8016a1e:	78bb      	ldrb	r3, [r7, #2]
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	b2db      	uxtb	r3, r3
 8016a24:	4313      	orrs	r3, r2
 8016a26:	b2da      	uxtb	r2, r3
 8016a28:	787b      	ldrb	r3, [r7, #1]
 8016a2a:	4313      	orrs	r3, r2
 8016a2c:	b2db      	uxtb	r3, r3
 8016a2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016a32:	b2da      	uxtb	r2, r3
 8016a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a36:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+1U) = (bSel << 6U) | (bSession << 4U) | (bRfu << 3U) | (bQ >> 1U);                      /* 0 bits left */
 8016a38:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8016a3c:	019b      	lsls	r3, r3, #6
 8016a3e:	b25a      	sxtb	r2, r3
 8016a40:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8016a44:	011b      	lsls	r3, r3, #4
 8016a46:	b25b      	sxtb	r3, r3
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	b25a      	sxtb	r2, r3
 8016a4c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8016a50:	00db      	lsls	r3, r3, #3
 8016a52:	b25b      	sxtb	r3, r3
 8016a54:	4313      	orrs	r3, r2
 8016a56:	b25a      	sxtb	r2, r3
 8016a58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016a5c:	085b      	lsrs	r3, r3, #1
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	b25b      	sxtb	r3, r3
 8016a62:	4313      	orrs	r3, r2
 8016a64:	b25a      	sxtb	r2, r3
 8016a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a68:	3301      	adds	r3, #1
 8016a6a:	b2d2      	uxtb	r2, r2
 8016a6c:	701a      	strb	r2, [r3, #0]
    *(pBeginRnd+2U) = (bQ << 7U);                                                                    /* 7 bits left */
 8016a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a70:	3302      	adds	r3, #2
 8016a72:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8016a76:	01d2      	lsls	r2, r2, #7
 8016a78:	b2d2      	uxtb	r2, r2
 8016a7a:	701a      	strb	r2, [r3, #0]

    if(bDr == 0U)
 8016a7c:	78fb      	ldrb	r3, [r7, #3]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d108      	bne.n	8016a94 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xea>
    {
        if(bM == 2U)
 8016a82:	78bb      	ldrb	r3, [r7, #2]
 8016a84:	2b02      	cmp	r3, #2
 8016a86:	d102      	bne.n	8016a8e <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xe4>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN2;
 8016a88:	2313      	movs	r3, #19
 8016a8a:	81fb      	strh	r3, [r7, #14]
 8016a8c:	e00a      	b.n	8016aa4 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_423_MAN4;
 8016a8e:	2315      	movs	r3, #21
 8016a90:	81fb      	strh	r3, [r7, #14]
 8016a92:	e007      	b.n	8016aa4 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
    }
    else
    {
        if(bM == 2U)
 8016a94:	78bb      	ldrb	r3, [r7, #2]
 8016a96:	2b02      	cmp	r3, #2
 8016a98:	d102      	bne.n	8016aa0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xf6>
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN2;
 8016a9a:	2314      	movs	r3, #20
 8016a9c:	81fb      	strh	r3, [r7, #14]
 8016a9e:	e001      	b.n	8016aa4 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0xfa>
        }
        else
        {
            wValue = PHHAL_HW_RX_I18000P3M3_FL_847_MAN4;
 8016aa0:	2316      	movs	r3, #22
 8016aa2:	81fb      	strh	r3, [r7, #14]
        }
    }

    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	89fa      	ldrh	r2, [r7, #14]
 8016aaa:	210a      	movs	r1, #10
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7f7 fd13 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	81bb      	strh	r3, [r7, #12]
 8016ab6:	89bb      	ldrh	r3, [r7, #12]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d001      	beq.n	8016ac0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x116>
 8016abc:	89bb      	ldrh	r3, [r7, #12]
 8016abe:	e013      	b.n	8016ae8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                wValue));

    /* Set Subcarrier */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	6858      	ldr	r0, [r3, #4]
 8016ac4:	78fb      	ldrb	r3, [r7, #3]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d101      	bne.n	8016ace <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x124>
 8016aca:	2301      	movs	r3, #1
 8016acc:	e000      	b.n	8016ad0 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x126>
 8016ace:	2302      	movs	r3, #2
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	210f      	movs	r1, #15
 8016ad4:	f7f7 fd00 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	81bb      	strh	r3, [r7, #12]
 8016adc:	89bb      	ldrh	r3, [r7, #12]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d001      	beq.n	8016ae6 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13c>
 8016ae2:	89bb      	ldrh	r3, [r7, #12]
 8016ae4:	e000      	b.n	8016ae8 <phpalI18000p3m3_Sw_CreateBeginRoundCmd+0x13e>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SUBCARRIER,
        (bDr == 0U) ? PHHAL_HW_SUBCARRIER_DUAL : PHHAL_HW_SUBCARRIER_QUAD));

    return PH_ERR_SUCCESS;
 8016ae6:	2300      	movs	r3, #0
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	3710      	adds	r7, #16
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <phpalI18092mPI_Sw_Init>:
phStatus_t phpalI18092mPI_Sw_Init(
                                  phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                  uint16_t wSizeOfDataParams,
                                  void * pHalDataParams
                                  )
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	460b      	mov	r3, r1
 8016afa:	607a      	str	r2, [r7, #4]
 8016afc:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalI18092mPI_Sw_DataParams_t) != wSizeOfDataParams)
 8016afe:	897b      	ldrh	r3, [r7, #10]
 8016b00:	2b24      	cmp	r3, #36	@ 0x24
 8016b02:	d002      	beq.n	8016b0a <phpalI18092mPI_Sw_Init+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MPI);
 8016b04:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8016b08:	e014      	b.n	8016b34 <phpalI18092mPI_Sw_Init+0x44>
    }
    PH_ASSERT_NULL (pDataParams);
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d101      	bne.n	8016b14 <phpalI18092mPI_Sw_Init+0x24>
 8016b10:	2321      	movs	r3, #33	@ 0x21
 8016b12:	e00f      	b.n	8016b34 <phpalI18092mPI_Sw_Init+0x44>
    PH_ASSERT_NULL (pHalDataParams);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d101      	bne.n	8016b1e <phpalI18092mPI_Sw_Init+0x2e>
 8016b1a:	2321      	movs	r3, #33	@ 0x21
 8016b1c:	e00a      	b.n	8016b34 <phpalI18092mPI_Sw_Init+0x44>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MPI | PHPAL_I18092MPI_SW_ID;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	f640 4201 	movw	r2, #3073	@ 0xc01
 8016b24:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	687a      	ldr	r2, [r7, #4]
 8016b2a:	605a      	str	r2, [r3, #4]

    /* Reset protocol to defaults */
    return phpalI18092mPI_Sw_ResetProtocol(pDataParams);
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	f000 f805 	bl	8016b3c <phpalI18092mPI_Sw_ResetProtocol>
 8016b32:	4603      	mov	r3, r0
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <phpalI18092mPI_Sw_ResetProtocol>:

phStatus_t phpalI18092mPI_Sw_ResetProtocol(
    phpalI18092mPI_Sw_DataParams_t * pDataParams
    )
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b083      	sub	sp, #12
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bNfcIdValid    = PH_OFF;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2200      	movs	r2, #0
 8016b48:	721a      	strb	r2, [r3, #8]
    pDataParams->bStateNow      = PHPAL_I18092MPI_SW_STATE_INFORMATION_PDU_TX;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	74da      	strb	r2, [r3, #19]
    pDataParams->bDid           = 0;    /* set DID to 0, i.e. disable usage of DID */
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2200      	movs	r2, #0
 8016b54:	751a      	strb	r2, [r3, #20]
    pDataParams->bNadEnabled    = PH_OFF;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	755a      	strb	r2, [r3, #21]
    pDataParams->bNad           = 0;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2200      	movs	r2, #0
 8016b60:	759a      	strb	r2, [r3, #22]
    pDataParams->bWt            = PHPAL_I18092MPI_WT_MAX;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	220e      	movs	r2, #14
 8016b66:	75da      	strb	r2, [r3, #23]
    pDataParams->bFsl           = PHPAL_I18092MPI_FRAMESIZE_64;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	761a      	strb	r2, [r3, #24]
    pDataParams->bLri           = PHPAL_I18092MPI_FRAMESIZE_64;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2200      	movs	r2, #0
 8016b72:	771a      	strb	r2, [r3, #28]
    pDataParams->bLrt           = PHPAL_I18092MPI_FRAMESIZE_64;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2200      	movs	r2, #0
 8016b78:	775a      	strb	r2, [r3, #29]
    pDataParams->bPni           = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	765a      	strb	r2, [r3, #25]
    pDataParams->bDsi           = 0;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2200      	movs	r2, #0
 8016b84:	769a      	strb	r2, [r3, #26]
    pDataParams->bDri           = 0;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	76da      	strb	r2, [r3, #27]
    pDataParams->bMaxRetryCount = PHPAL_I18092MPI_SW_RETRIES_DEFAULT;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2202      	movs	r2, #2
 8016b90:	779a      	strb	r2, [r3, #30]
    pDataParams->bAtnDisabled   = 0;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2200      	movs	r2, #0
 8016b96:	77da      	strb	r2, [r3, #31]
    pDataParams->bActiveMode    = 0;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	f883 2020 	strb.w	r2, [r3, #32]
    pDataParams->bOpeMode       = RD_LIB_MODE_NFC;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2202      	movs	r2, #2
 8016ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    pDataParams->bPropPSLMode   = PH_OFF;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2200      	movs	r2, #0
 8016bac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    return PH_ERR_SUCCESS;
 8016bb0:	2300      	movs	r3, #0
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	370c      	adds	r7, #12
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbc:	4770      	bx	lr
	...

08016bc0 <phpalI18092mPI_Sw_Atr>:
                                 uint8_t * pGi,
                                 uint8_t bGiLength,
                                 uint8_t * pAtrRes,
                                 uint8_t * pAtrResLength
                                 )
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b098      	sub	sp, #96	@ 0x60
 8016bc4:	af04      	add	r7, sp, #16
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	4611      	mov	r1, r2
 8016bcc:	461a      	mov	r2, r3
 8016bce:	460b      	mov	r3, r1
 8016bd0:	71fb      	strb	r3, [r7, #7]
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	71bb      	strb	r3, [r7, #6]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    phStatus_t  PH_MEMLOC_REM wPreviousStatus;
    uint8_t     PH_MEMLOC_REM aCmd[14];
    uint8_t     PH_MEMLOC_REM bCmdLen;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 8016bde:	2300      	movs	r3, #0
 8016be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 8016be2:	2300      	movs	r3, #0
 8016be4:	623b      	str	r3, [r7, #32]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 8016be6:	2300      	movs	r3, #0
 8016be8:	61fb      	str	r3, [r7, #28]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 8016bea:	2300      	movs	r3, #0
 8016bec:	837b      	strh	r3, [r7, #26]
    uint16_t    PH_MEMLOC_REM wActiveMode;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint8_t     PH_MEMLOC_COUNT bRetryCount;
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bTo;
    uint16_t    PH_MEMLOC_REM wDsi = 0;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	82fb      	strh	r3, [r7, #22]
    uint16_t    PH_MEMLOC_REM wDri;
    uint32_t    PH_MEMLOC_REM dwRwt;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	647b      	str	r3, [r7, #68]	@ 0x44

    wPreviousStatus = 0;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    bRetryCount = 0;
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    /* Parameter check */
    if ((bDid > PHPAL_I18092MPI_DID_MAX) ||
 8016c02:	79fb      	ldrb	r3, [r7, #7]
 8016c04:	2b0e      	cmp	r3, #14
 8016c06:	d806      	bhi.n	8016c16 <phpalI18092mPI_Sw_Atr+0x56>
 8016c08:	79bb      	ldrb	r3, [r7, #6]
 8016c0a:	2b03      	cmp	r3, #3
 8016c0c:	d803      	bhi.n	8016c16 <phpalI18092mPI_Sw_Atr+0x56>
        (bLri > PHPAL_I18092MPI_FRAMESIZE_254) ||
 8016c0e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8016c12:	2b30      	cmp	r3, #48	@ 0x30
 8016c14:	d902      	bls.n	8016c1c <phpalI18092mPI_Sw_Atr+0x5c>
        (bGiLength > PHPAL_I18092MPI_MAX_GI_LENGTH))
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_I18092MPI);
 8016c16:	f640 4321 	movw	r3, #3105	@ 0xc21
 8016c1a:	e29f      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	721a      	strb	r2, [r3, #8]

    /* Set new DID */
    pDataParams->bDid = bDid;
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	79fa      	ldrb	r2, [r7, #7]
 8016c26:	751a      	strb	r2, [r3, #20]

    /* Build up frame data. */
    (void)memcpy(aCmd, pNfcid3i, PHPAL_I18092MPI_NFCID3_LENGTH);
 8016c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016c2c:	220a      	movs	r2, #10
 8016c2e:	68b9      	ldr	r1, [r7, #8]
 8016c30:	4618      	mov	r0, r3
 8016c32:	f008 f9f8 	bl	801f026 <memcpy>
    bCmdLen = PHPAL_I18092MPI_NFCID3_LENGTH;
 8016c36:	230a      	movs	r3, #10
 8016c38:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    aCmd[bCmdLen++] = bDid;
 8016c3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016c40:	1c5a      	adds	r2, r3, #1
 8016c42:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8016c46:	3350      	adds	r3, #80	@ 0x50
 8016c48:	443b      	add	r3, r7
 8016c4a:	79fa      	ldrb	r2, [r7, #7]
 8016c4c:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Next two fields (BSi and BRi) only used for active mode, so set them to 0. */
    aCmd[bCmdLen++] = 0x00;
 8016c50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016c54:	1c5a      	adds	r2, r3, #1
 8016c56:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8016c5a:	3350      	adds	r3, #80	@ 0x50
 8016c5c:	443b      	add	r3, r7
 8016c5e:	2200      	movs	r2, #0
 8016c60:	f803 2c24 	strb.w	r2, [r3, #-36]
    aCmd[bCmdLen++] = 0x00;
 8016c64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016c68:	1c5a      	adds	r2, r3, #1
 8016c6a:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8016c6e:	3350      	adds	r3, #80	@ 0x50
 8016c70:	443b      	add	r3, r7
 8016c72:	2200      	movs	r2, #0
 8016c74:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Configure PPi field */
    aCmd[bCmdLen++] = (bLri << PHPAL_I18092MPI_SW_ATR_PPI_LRI_BIT);
 8016c78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016c7c:	1c5a      	adds	r2, r3, #1
 8016c7e:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 8016c82:	4619      	mov	r1, r3
 8016c84:	79bb      	ldrb	r3, [r7, #6]
 8016c86:	011b      	lsls	r3, r3, #4
 8016c88:	b2da      	uxtb	r2, r3
 8016c8a:	f101 0350 	add.w	r3, r1, #80	@ 0x50
 8016c8e:	443b      	add	r3, r7
 8016c90:	f803 2c24 	strb.w	r2, [r3, #-36]
    if (0U != (bNadEnabled))
 8016c94:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d010      	beq.n	8016cbe <phpalI18092mPI_Sw_Atr+0xfe>
    {
        aCmd[bCmdLen - 1U] |= 0x01U;
 8016c9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016ca0:	3b01      	subs	r3, #1
 8016ca2:	3350      	adds	r3, #80	@ 0x50
 8016ca4:	443b      	add	r3, r7
 8016ca6:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8016caa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	f042 0201 	orr.w	r2, r2, #1
 8016cb4:	b2d2      	uxtb	r2, r2
 8016cb6:	3350      	adds	r3, #80	@ 0x50
 8016cb8:	443b      	add	r3, r7
 8016cba:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get initial set data rate from HAL since NFC allows starting at different data rates. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_TXDATARATE_FRAMING, &wDsi));
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	f107 0216 	add.w	r2, r7, #22
 8016cc6:	2109      	movs	r1, #9
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7f9 f853 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016cd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d002      	beq.n	8016ce2 <phpalI18092mPI_Sw_Atr+0x122>
 8016cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016ce0:	e23c      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDsi, &pDataParams->bDsi));
 8016ce2:	8afa      	ldrh	r2, [r7, #22]
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	331a      	adds	r3, #26
 8016ce8:	4619      	mov	r1, r3
 8016cea:	4610      	mov	r0, r2
 8016cec:	f000 fc5e 	bl	80175ac <phpalI18092mPI_Sw_ConvertDatarate>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016cf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d002      	beq.n	8016d04 <phpalI18092mPI_Sw_Atr+0x144>
 8016cfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d02:	e22b      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_RXDATARATE_FRAMING, &wDri));
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	f107 0214 	add.w	r2, r7, #20
 8016d0c:	210a      	movs	r1, #10
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7f9 f830 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8016d14:	4603      	mov	r3, r0
 8016d16:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016d1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d002      	beq.n	8016d28 <phpalI18092mPI_Sw_Atr+0x168>
 8016d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d26:	e219      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ConvertDatarate(wDri, &pDataParams->bDri));
 8016d28:	8aba      	ldrh	r2, [r7, #20]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	331b      	adds	r3, #27
 8016d2e:	4619      	mov	r1, r3
 8016d30:	4610      	mov	r0, r2
 8016d32:	f000 fc3b 	bl	80175ac <phpalI18092mPI_Sw_ConvertDatarate>
 8016d36:	4603      	mov	r3, r0
 8016d38:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016d3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d002      	beq.n	8016d4a <phpalI18092mPI_Sw_Atr+0x18a>
 8016d44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d48:	e208      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>

    /* Configure HAL for handling StartByte in case Transmit datarate is 106kbps. */
    if (pDataParams->bDsi == PHHAL_HW_RF_DATARATE_106)
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	7e9b      	ldrb	r3, [r3, #26]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d110      	bne.n	8016d74 <phpalI18092mPI_Sw_Atr+0x1b4>
    {
        /* Configure HAL for NFCIP to enable handling StartByte at 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_ON));
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	685b      	ldr	r3, [r3, #4]
 8016d56:	2201      	movs	r2, #1
 8016d58:	215c      	movs	r1, #92	@ 0x5c
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7f7 fbbc 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016d60:	4603      	mov	r3, r0
 8016d62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d013      	beq.n	8016d96 <phpalI18092mPI_Sw_Atr+0x1d6>
 8016d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d72:	e1f3      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    }
    else
    {
        /* Disabled handling of StartByte if datarate is other than 106kbps. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(pDataParams->pHalDataParams, PHHAL_HW_CONFIG_NFCIP_STARTBYTE, PH_OFF));
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	685b      	ldr	r3, [r3, #4]
 8016d78:	2200      	movs	r2, #0
 8016d7a:	215c      	movs	r1, #92	@ 0x5c
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7f7 fbab 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016d82:	4603      	mov	r3, r0
 8016d84:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016d88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d002      	beq.n	8016d96 <phpalI18092mPI_Sw_Atr+0x1d6>
 8016d90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016d94:	e1e2      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    }

    /* Set Activation timeout */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	f240 523b 	movw	r2, #1339	@ 0x53b
 8016d9e:	210e      	movs	r1, #14
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f7 fb99 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8016da6:	4603      	mov	r3, r0
 8016da8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d002      	beq.n	8016dba <phpalI18092mPI_Sw_Atr+0x1fa>
 8016db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016db8:	e1d0      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        PHPAL_I18092MPI_SW_RWT_ACTIVATION_MS + PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS));

    /* Reset response received flag */
    bResponseReceived = 0;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

        /* Write frame header. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams, PH_EXCHANGE_BUFFER_FIRST, PHPAL_I18092MPI_SW_CMD_ATR_REQ, (bCmdLen + bGiLength)));
 8016dc6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8016dca:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8016dce:	4413      	add	r3, r2
 8016dd0:	b2db      	uxtb	r3, r3
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016dd8:	68f8      	ldr	r0, [r7, #12]
 8016dda:	f000 fab5 	bl	8017348 <phpalI18092mPI_Sw_WriteFrameHeader>
 8016dde:	4603      	mov	r3, r0
 8016de0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016de4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d002      	beq.n	8016df2 <phpalI18092mPI_Sw_Atr+0x232>
 8016dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016df0:	e1b4      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>

        /* Append general bytes if present */
        if (bGiLength > 0U)
 8016df2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d03e      	beq.n	8016e78 <phpalI18092mPI_Sw_Atr+0x2b8>
        {
            /* Mark that general bytes are present */
            aCmd[bCmdLen - 1U] |= PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE;
 8016dfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016dfe:	3b01      	subs	r3, #1
 8016e00:	3350      	adds	r3, #80	@ 0x50
 8016e02:	443b      	add	r3, r7
 8016e04:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8016e08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016e0c:	3b01      	subs	r3, #1
 8016e0e:	f042 0202 	orr.w	r2, r2, #2
 8016e12:	b2d2      	uxtb	r2, r2
 8016e14:	3350      	adds	r3, #80	@ 0x50
 8016e16:	443b      	add	r3, r7
 8016e18:	f803 2c24 	strb.w	r2, [r3, #-36]

            /* Write data to internal buffer. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	6858      	ldr	r0, [r3, #4]
 8016e20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016e2a:	2100      	movs	r1, #0
 8016e2c:	9101      	str	r1, [sp, #4]
 8016e2e:	2100      	movs	r1, #0
 8016e30:	9100      	str	r1, [sp, #0]
 8016e32:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8016e36:	f7f6 ff97 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d002      	beq.n	8016e4e <phpalI18092mPI_Sw_Atr+0x28e>
 8016e48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016e4c:	e186      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)bCmdLen,
                NULL,
                NULL));

            /* Write general bytes, transmit the whole buffer and receive response. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	6858      	ldr	r0, [r3, #4]
 8016e52:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8016e56:	b29a      	uxth	r2, r3
 8016e58:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8016e5c:	9301      	str	r3, [sp, #4]
 8016e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016e62:	9300      	str	r3, [sp, #0]
 8016e64:	4613      	mov	r3, r2
 8016e66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016e68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016e6c:	f7f6 ff7c 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8016e70:	4603      	mov	r3, r0
 8016e72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016e76:	e014      	b.n	8016ea2 <phpalI18092mPI_Sw_Atr+0x2e2>
                &wResponseLength);
        }
        else
        {
            /* No additional general bytes to be sent so transmit the buffer now. */
            status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	6858      	ldr	r0, [r3, #4]
 8016e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016e80:	b299      	uxth	r1, r3
 8016e82:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016e86:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8016e8a:	9301      	str	r3, [sp, #4]
 8016e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016e90:	9300      	str	r3, [sp, #0]
 8016e92:	460b      	mov	r3, r1
 8016e94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016e98:	f7f6 ff66 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                &pResp,
                &wResponseLength);
        }

        /* Get the state of activation mode status either indication active/passive mode. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	685b      	ldr	r3, [r3, #4]
 8016ea6:	f107 0218 	add.w	r2, r7, #24
 8016eaa:	2154      	movs	r1, #84	@ 0x54
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7f8 ff61 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016eb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d002      	beq.n	8016ec6 <phpalI18092mPI_Sw_Atr+0x306>
 8016ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016ec4:	e14a      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_ACTIVEMODE,
            &wActiveMode));
        pDataParams->bActiveMode = (uint8_t)wActiveMode;
 8016ec6:	8b3b      	ldrh	r3, [r7, #24]
 8016ec8:	b2da      	uxtb	r2, r3
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	f883 2020 	strb.w	r2, [r3, #32]

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8016ed0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d102      	bne.n	8016ee0 <phpalI18092mPI_Sw_Atr+0x320>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 8016eda:	2301      	movs	r3, #1
 8016edc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        }

        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8016ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	f040 80d0 	bne.w	801708c <phpalI18092mPI_Sw_Atr+0x4cc>
        {
            /* Check for valid response frame and remove start byte if present. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 8016eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016eee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016ef0:	f107 031a 	add.w	r3, r7, #26
 8016ef4:	9303      	str	r3, [sp, #12]
 8016ef6:	f107 031c 	add.w	r3, r7, #28
 8016efa:	9302      	str	r3, [sp, #8]
 8016efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016f00:	9301      	str	r3, [sp, #4]
 8016f02:	f107 0320 	add.w	r3, r7, #32
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	2301      	movs	r3, #1
 8016f0a:	68f8      	ldr	r0, [r7, #12]
 8016f0c:	f000 fa60 	bl	80173d0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 8016f10:	4603      	mov	r3, r0
 8016f12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016f16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d002      	beq.n	8016f24 <phpalI18092mPI_Sw_Atr+0x364>
 8016f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016f22:	e11b      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Ignore length byte */
            ++pFrame;
 8016f24:	6a3b      	ldr	r3, [r7, #32]
 8016f26:	3301      	adds	r3, #1
 8016f28:	623b      	str	r3, [r7, #32]
            --wFrameLength;
 8016f2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016f2c:	3b01      	subs	r3, #1
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Check for minimum and maximum frame size. NFCForum-TS-DigitalProtocol-1.0 section 14.6.1.3. */
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 8016f32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016f34:	2b40      	cmp	r3, #64	@ 0x40
 8016f36:	d802      	bhi.n	8016f3e <phpalI18092mPI_Sw_Atr+0x37e>
                (wFrameLength < PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH))
 8016f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
            if ((wFrameLength > PHPAL_I18092MPI_SW_MAX_ACTIVATION_FRAME_LENGTH) ||
 8016f3a:	2b10      	cmp	r3, #16
 8016f3c:	d802      	bhi.n	8016f44 <phpalI18092mPI_Sw_Atr+0x384>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8016f3e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8016f42:	e10b      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check Gt presence / absence */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_GT_AVAILABLE))
 8016f44:	6a3b      	ldr	r3, [r7, #32]
 8016f46:	3310      	adds	r3, #16
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	f003 0302 	and.w	r3, r3, #2
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d005      	beq.n	8016f5e <phpalI18092mPI_Sw_Atr+0x39e>
            {
                /* Gt should be present */
                if (wFrameLength <= PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 8016f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016f54:	2b11      	cmp	r3, #17
 8016f56:	d808      	bhi.n	8016f6a <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8016f58:	f640 4306 	movw	r3, #3078	@ 0xc06
 8016f5c:	e0fe      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }
            else
            {
                /* Gt should be absent */
                if (wFrameLength > PHPAL_I18092MPI_SW_MIN_ACTIVATION_FRAME_LENGTH)
 8016f5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016f60:	2b11      	cmp	r3, #17
 8016f62:	d902      	bls.n	8016f6a <phpalI18092mPI_Sw_Atr+0x3aa>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8016f64:	f640 4306 	movw	r3, #3078	@ 0xc06
 8016f68:	e0f8      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                }
            }

            /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.2. */
            if (pFrame[PHPAL_I18092MPI_SW_ATR_RES_DID_POS] != bDid)
 8016f6a:	6a3b      	ldr	r3, [r7, #32]
 8016f6c:	330c      	adds	r3, #12
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	79fa      	ldrb	r2, [r7, #7]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d002      	beq.n	8016f7c <phpalI18092mPI_Sw_Atr+0x3bc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8016f76:	f640 4306 	movw	r3, #3078	@ 0xc06
 8016f7a:	e0ef      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
            }

            /* Check NadUsed bit */
            if (0U != (pFrame[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] & PHPAL_I18092MPI_SW_ATR_RES_PPT_NAD_USED))
 8016f7c:	6a3b      	ldr	r3, [r7, #32]
 8016f7e:	3310      	adds	r3, #16
 8016f80:	781b      	ldrb	r3, [r3, #0]
 8016f82:	f003 0301 	and.w	r3, r3, #1
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d00e      	beq.n	8016fa8 <phpalI18092mPI_Sw_Atr+0x3e8>
            {
                /* Protocol error if NAD use is requested to be disabled */
                if (bNadEnabled == PH_OFF)
 8016f8a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d102      	bne.n	8016f98 <phpalI18092mPI_Sw_Atr+0x3d8>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8016f92:	f640 4306 	movw	r3, #3078	@ 0xc06
 8016f96:	e0e1      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                }

                pDataParams->bNad = bNad;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8016f9e:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_ON;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	2201      	movs	r2, #1
 8016fa4:	755a      	strb	r2, [r3, #21]
 8016fa6:	e005      	b.n	8016fb4 <phpalI18092mPI_Sw_Atr+0x3f4>
            }
            else
            {
                pDataParams->bNad = 0x00;
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2200      	movs	r2, #0
 8016fac:	759a      	strb	r2, [r3, #22]
                pDataParams->bNadEnabled = PH_OFF;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	755a      	strb	r2, [r3, #21]
            }

            /* Copy ATR_RES to response buffer. */
            (void)memcpy(pAtrRes, pFrame, wFrameLength);
 8016fb4:	6a3b      	ldr	r3, [r7, #32]
 8016fb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016fb8:	4619      	mov	r1, r3
 8016fba:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8016fbc:	f008 f833 	bl	801f026 <memcpy>
            *pAtrResLength = (uint8_t)wFrameLength;
 8016fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016fc2:	b2da      	uxtb	r2, r3
 8016fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016fc6:	701a      	strb	r2, [r3, #0]

            /* Update LRi */
            pDataParams->bLri = bLri;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	79ba      	ldrb	r2, [r7, #6]
 8016fcc:	771a      	strb	r2, [r3, #28]

            /* Retrieve TO */
            bTo = pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_TO_POS] & 0xFU;
 8016fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016fd0:	330f      	adds	r3, #15
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	f003 030f 	and.w	r3, r3, #15
 8016fd8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

            /* Adjust timeout field if necessary. NFCForum-TS-DigitalProtocol-1.0 section 14.6.3.8. */
            if (bTo > PHPAL_I18092MPI_WT_MAX)
 8016fdc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8016fe0:	2b0e      	cmp	r3, #14
 8016fe2:	d902      	bls.n	8016fea <phpalI18092mPI_Sw_Atr+0x42a>
            {
                bTo = PHPAL_I18092MPI_WT_MAX;
 8016fe4:	230e      	movs	r3, #14
 8016fe6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            }

            /* Parse the response to see what frame size the target supports. */
            pDataParams->bLrt = (pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_PPT_POS] >> 4U) & 0x3U;
 8016fea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016fec:	3310      	adds	r3, #16
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	091b      	lsrs	r3, r3, #4
 8016ff2:	b2db      	uxtb	r3, r3
 8016ff4:	f003 0303 	and.w	r3, r3, #3
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	775a      	strb	r2, [r3, #29]

            /* Set FSL to the lowest frame size (lowest of LRi and LRt) */
            pDataParams->bFsl = (pDataParams->bLrt < pDataParams->bLri) ? pDataParams->bLrt : pDataParams->bLri;
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	7f1a      	ldrb	r2, [r3, #28]
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	7f5b      	ldrb	r3, [r3, #29]
 8017006:	4293      	cmp	r3, r2
 8017008:	bf28      	it	cs
 801700a:	4613      	movcs	r3, r2
 801700c:	b2da      	uxtb	r2, r3
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	761a      	strb	r2, [r3, #24]

            /* Store TO */
            pDataParams->bWt = bTo;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8017018:	75da      	strb	r2, [r3, #23]

            /* NfcID is now valid */
            pDataParams->bNfcIdValid = PH_ON;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2201      	movs	r2, #1
 801701e:	721a      	strb	r2, [r3, #8]
            (void)memcpy(pDataParams->aNfcid3i, &pAtrRes[PHPAL_I18092MPI_SW_ATR_RES_NFCID3_POS], PHPAL_I18092MPI_NFCID3_LENGTH);
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f103 0009 	add.w	r0, r3, #9
 8017026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017028:	3302      	adds	r3, #2
 801702a:	220a      	movs	r2, #10
 801702c:	4619      	mov	r1, r3
 801702e:	f007 fffa 	bl	801f026 <memcpy>

            /* Calculate Response Waiting Time. */
            dwShift = 1U;
 8017032:	2301      	movs	r3, #1
 8017034:	647b      	str	r3, [r7, #68]	@ 0x44
            dwRwt = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((dwShift << bTo)));
 8017036:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801703a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801703c:	fa02 f303 	lsl.w	r3, r2, r3
 8017040:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8017044:	fb02 f303 	mul.w	r3, r2, r3
 8017048:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 801704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801704c:	3302      	adds	r3, #2
 801704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt /= 1000U;
 8017050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017052:	4a44      	ldr	r2, [pc, #272]	@ (8017164 <phpalI18092mPI_Sw_Atr+0x5a4>)
 8017054:	fba2 2303 	umull	r2, r3, r2, r3
 8017058:	099b      	lsrs	r3, r3, #6
 801705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += 1U;
 801705c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801705e:	3301      	adds	r3, #1
 8017060:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dwRwt += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 8017062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017064:	3364      	adds	r3, #100	@ 0x64
 8017066:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Set Response Waiting Time. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	685b      	ldr	r3, [r3, #4]
 801706c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801706e:	b292      	uxth	r2, r2
 8017070:	210e      	movs	r1, #14
 8017072:	4618      	mov	r0, r3
 8017074:	f7f7 fa30 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8017078:	4603      	mov	r3, r0
 801707a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801707e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017082:	2b00      	cmp	r3, #0
 8017084:	d058      	beq.n	8017138 <phpalI18092mPI_Sw_Atr+0x578>
 8017086:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801708a:	e067      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                (uint16_t)dwRwt));
        }
        else
        {
            /* If HAL returned Integrity Error first time then save and return this status at the end of Retry. */
            if (((status & PH_ERR_MASK) == PH_ERR_INTEGRITY_ERROR) && (bRetryCount == 0U))
 801708c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017090:	b2db      	uxtb	r3, r3
 8017092:	2b02      	cmp	r3, #2
 8017094:	d107      	bne.n	80170a6 <phpalI18092mPI_Sw_Atr+0x4e6>
 8017096:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801709a:	2b00      	cmp	r3, #0
 801709c:	d103      	bne.n	80170a6 <phpalI18092mPI_Sw_Atr+0x4e6>
            {
                wPreviousStatus = status;
 801709e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80170a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
            }

            /* Retransmit in case of timeout or receive error, ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
            if (0u != (PHPAL_I18092MPI_SW_IS_INVALID_BLOCK_STATUS(status)))
 80170a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80170aa:	b2db      	uxtb	r3, r3
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d00e      	beq.n	80170ce <phpalI18092mPI_Sw_Atr+0x50e>
 80170b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80170b4:	b2db      	uxtb	r3, r3
 80170b6:	2b02      	cmp	r3, #2
 80170b8:	d009      	beq.n	80170ce <phpalI18092mPI_Sw_Atr+0x50e>
 80170ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80170be:	b2db      	uxtb	r3, r3
 80170c0:	2b05      	cmp	r3, #5
 80170c2:	d004      	beq.n	80170ce <phpalI18092mPI_Sw_Atr+0x50e>
 80170c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80170c8:	b2db      	uxtb	r3, r3
 80170ca:	2b03      	cmp	r3, #3
 80170cc:	d134      	bne.n	8017138 <phpalI18092mPI_Sw_Atr+0x578>
            {
                /* Check if we shall perform another retry. */
                if (bRetryCount < pDataParams->bMaxRetryCount)
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	7f9b      	ldrb	r3, [r3, #30]
 80170d2:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d21b      	bcs.n	8017112 <phpalI18092mPI_Sw_Atr+0x552>
                {
                    ++bRetryCount;
 80170da:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80170de:	3301      	adds	r3, #1
 80170e0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    bRetry = PH_ON;
 80170e4:	2301      	movs	r3, #1
 80170e6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

                    if (wActiveMode == PH_ON)
 80170ea:	8b3b      	ldrh	r3, [r7, #24]
 80170ec:	2b01      	cmp	r3, #1
 80170ee:	d123      	bne.n	8017138 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        /* Wait for T_IRFG (Initial RF guard time) before ATR retry. */
                        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	2205      	movs	r2, #5
 80170f6:	2101      	movs	r1, #1
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7f7 f931 	bl	800e360 <phhalHw_Pn5180_Wait>
 80170fe:	4603      	mov	r3, r0
 8017100:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017108:	2b00      	cmp	r3, #0
 801710a:	d015      	beq.n	8017138 <phpalI18092mPI_Sw_Atr+0x578>
 801710c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017110:	e024      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
                    }
                }
                else
                {
                    /* Deselect target ISO/IEC 18092:2004(E) section 12.5.1.3.1. */
                    statusTmp = phpalI18092mPI_Sw_Deselect(pDataParams, PHPAL_I18092MPI_DESELECT_RLS);
 8017112:	210a      	movs	r1, #10
 8017114:	68f8      	ldr	r0, [r7, #12]
 8017116:	f000 f827 	bl	8017168 <phpalI18092mPI_Sw_Deselect>
 801711a:	4603      	mov	r3, r0
 801711c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

                    /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                    if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	7f9b      	ldrb	r3, [r3, #30]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d007      	beq.n	8017138 <phpalI18092mPI_Sw_Atr+0x578>
 8017128:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 801712c:	2b00      	cmp	r3, #0
 801712e:	d003      	beq.n	8017138 <phpalI18092mPI_Sw_Atr+0x578>
                    {
                        status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 8017130:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8017134:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 8017138:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801713c:	2b00      	cmp	r3, #0
 801713e:	f47f ae3f 	bne.w	8016dc0 <phpalI18092mPI_Sw_Atr+0x200>

    if ((wPreviousStatus != 0U) && (status != PH_ERR_SUCCESS))
 8017142:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8017146:	2b00      	cmp	r3, #0
 8017148:	d006      	beq.n	8017158 <phpalI18092mPI_Sw_Atr+0x598>
 801714a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801714e:	2b00      	cmp	r3, #0
 8017150:	d002      	beq.n	8017158 <phpalI18092mPI_Sw_Atr+0x598>
    {
        return wPreviousStatus;
 8017152:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8017156:	e001      	b.n	801715c <phpalI18092mPI_Sw_Atr+0x59c>
    }
    return status;
 8017158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
}
 801715c:	4618      	mov	r0, r3
 801715e:	3750      	adds	r7, #80	@ 0x50
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}
 8017164:	10624dd3 	.word	0x10624dd3

08017168 <phpalI18092mPI_Sw_Deselect>:

phStatus_t phpalI18092mPI_Sw_Deselect(
                                      phpalI18092mPI_Sw_DataParams_t * pDataParams,
                                      uint8_t bDeselectCommand
                                      )
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b092      	sub	sp, #72	@ 0x48
 801716c:	af04      	add	r7, sp, #16
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	460b      	mov	r3, r1
 8017172:	70fb      	strb	r3, [r7, #3]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint32_t    PH_MEMLOC_REM dwTimeout;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t     PH_MEMLOC_REM bCmdLen = 0;
 8017174:	2300      	movs	r3, #0
 8017176:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t     PH_MEMLOC_REM bExpectedResponse;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 801717a:	2300      	movs	r3, #0
 801717c:	623b      	str	r3, [r7, #32]
    uint16_t    PH_MEMLOC_REM wResponseLength = 0;
 801717e:	2300      	movs	r3, #0
 8017180:	83fb      	strh	r3, [r7, #30]
    uint8_t *   PH_MEMLOC_REM pFrame = NULL;
 8017182:	2300      	movs	r3, #0
 8017184:	61bb      	str	r3, [r7, #24]
    uint16_t    PH_MEMLOC_REM wFrameLength = 0;
 8017186:	2300      	movs	r3, #0
 8017188:	82fb      	strh	r3, [r7, #22]
    uint8_t *   PH_MEMLOC_REM pPayload = NULL;
 801718a:	2300      	movs	r3, #0
 801718c:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wPayloadLength = 0;
 801718e:	2300      	movs	r3, #0
 8017190:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_COUNT bRetryCount = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t     PH_MEMLOC_REM bResponseReceived;
    uint8_t     PH_MEMLOC_REM bRetry;
    uint32_t    PH_MEMLOC_REM dwShift = 1U;
 8017198:	2301      	movs	r3, #1
 801719a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Make NfcID invalid */
    pDataParams->bNfcIdValid = PH_OFF;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2200      	movs	r2, #0
 80171a0:	721a      	strb	r2, [r3, #8]

    /* Calculate Response Waiting Time. */
    dwShift = 1U;
 80171a2:	2301      	movs	r3, #1
 80171a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dwTimeout = (uint32_t)(PHPAL_I18092MPI_SW_RWT_MIN_US * ((uint32_t)(dwShift << pDataParams->bWt)));
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	7ddb      	ldrb	r3, [r3, #23]
 80171aa:	461a      	mov	r2, r3
 80171ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171ae:	4093      	lsls	r3, r2
 80171b0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80171b4:	fb02 f303 	mul.w	r3, r2, r3
 80171b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_RWT_US;
 80171ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171bc:	3302      	adds	r3, #2
 80171be:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout /= 1000U;
 80171c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171c2:	4a60      	ldr	r2, [pc, #384]	@ (8017344 <phpalI18092mPI_Sw_Deselect+0x1dc>)
 80171c4:	fba2 2303 	umull	r2, r3, r2, r3
 80171c8:	099b      	lsrs	r3, r3, #6
 80171ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += 1U;
 80171cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171ce:	3301      	adds	r3, #1
 80171d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    dwTimeout += PHPAL_I18092MPI_SW_DELTA_T_INITIATOR_MS;
 80171d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171d4:	3364      	adds	r3, #100	@ 0x64
 80171d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Set Response Waiting Time as per NFCForum-TS-DigitalProtocol-1.1 section 16.11.2.3. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	685b      	ldr	r3, [r3, #4]
 80171dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80171de:	b292      	uxth	r2, r2
 80171e0:	210e      	movs	r1, #14
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7f7 f978 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80171e8:	4603      	mov	r3, r0
 80171ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80171ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d001      	beq.n	80171f6 <phpalI18092mPI_Sw_Deselect+0x8e>
 80171f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80171f4:	e0a1      	b.n	801733a <phpalI18092mPI_Sw_Deselect+0x1d2>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
        (uint16_t)dwTimeout));

    /* Append DID if enabled */
    if (pDataParams->bDid > 0U)
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	7d1b      	ldrb	r3, [r3, #20]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d00c      	beq.n	8017218 <phpalI18092mPI_Sw_Deselect+0xb0>
    {
        aCmd[bCmdLen++] = pDataParams->bDid;
 80171fe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8017202:	1c5a      	adds	r2, r3, #1
 8017204:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8017208:	4619      	mov	r1, r3
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	7d1a      	ldrb	r2, [r3, #20]
 801720e:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8017212:	443b      	add	r3, r7
 8017214:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    /* Reset response received flag */
    bResponseReceived = 0;
 8017218:	2300      	movs	r3, #0
 801721a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    /* Retry loop */
    do
    {
        /* Reset retry flag */
        bRetry = PH_OFF;
 801721e:	2300      	movs	r3, #0
 8017220:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

        /* Write frame header and update length field. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_WriteFrameHeader(pDataParams,PH_EXCHANGE_BUFFER_FIRST, bDeselectCommand, bCmdLen));
 8017224:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8017228:	78fa      	ldrb	r2, [r7, #3]
 801722a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 f88a 	bl	8017348 <phpalI18092mPI_Sw_WriteFrameHeader>
 8017234:	4603      	mov	r3, r0
 8017236:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801723a:	2b00      	cmp	r3, #0
 801723c:	d001      	beq.n	8017242 <phpalI18092mPI_Sw_Deselect+0xda>
 801723e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017240:	e07b      	b.n	801733a <phpalI18092mPI_Sw_Deselect+0x1d2>

        /* Start transmission. */
        status = phhalHw_Exchange(pDataParams->pHalDataParams,
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	6858      	ldr	r0, [r3, #4]
 8017246:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801724a:	b299      	uxth	r1, r3
 801724c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017250:	f107 031e 	add.w	r3, r7, #30
 8017254:	9301      	str	r3, [sp, #4]
 8017256:	f107 0320 	add.w	r3, r7, #32
 801725a:	9300      	str	r3, [sp, #0]
 801725c:	460b      	mov	r3, r1
 801725e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8017262:	f7f6 fd81 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8017266:	4603      	mov	r3, r0
 8017268:	86fb      	strh	r3, [r7, #54]	@ 0x36
            (uint16_t)bCmdLen,
            &pResp,
            &wResponseLength);

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 801726a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801726c:	b2db      	uxtb	r3, r3
 801726e:	2b00      	cmp	r3, #0
 8017270:	d102      	bne.n	8017278 <phpalI18092mPI_Sw_Deselect+0x110>
        {
            /* Signal that we've received something */
            bResponseReceived = 1;
 8017272:	2301      	movs	r3, #1
 8017274:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        /* Exchange was successful */
        if ((status & PH_ERR_MASK) == PH_ERR_SUCCESS)
 8017278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801727a:	b2db      	uxtb	r3, r3
 801727c:	2b00      	cmp	r3, #0
 801727e:	d13c      	bne.n	80172fa <phpalI18092mPI_Sw_Deselect+0x192>
        {
            if (bDeselectCommand == PHPAL_I18092MPI_DESELECT_DSL)
 8017280:	78fb      	ldrb	r3, [r7, #3]
 8017282:	2b08      	cmp	r3, #8
 8017284:	d103      	bne.n	801728e <phpalI18092mPI_Sw_Deselect+0x126>
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_DSL_RES;
 8017286:	2309      	movs	r3, #9
 8017288:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 801728c:	e002      	b.n	8017294 <phpalI18092mPI_Sw_Deselect+0x12c>
            }
            else
            {
                bExpectedResponse = PHPAL_I18092MPI_SW_CMD_RLS_RES;
 801728e:	230b      	movs	r3, #11
 8017290:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            }

            /* Check for valid response frame. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame(
 8017294:	6a39      	ldr	r1, [r7, #32]
 8017296:	8bfa      	ldrh	r2, [r7, #30]
 8017298:	f897 0034 	ldrb.w	r0, [r7, #52]	@ 0x34
 801729c:	f107 030e 	add.w	r3, r7, #14
 80172a0:	9303      	str	r3, [sp, #12]
 80172a2:	f107 0310 	add.w	r3, r7, #16
 80172a6:	9302      	str	r3, [sp, #8]
 80172a8:	f107 0316 	add.w	r3, r7, #22
 80172ac:	9301      	str	r3, [sp, #4]
 80172ae:	f107 0318 	add.w	r3, r7, #24
 80172b2:	9300      	str	r3, [sp, #0]
 80172b4:	4603      	mov	r3, r0
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f000 f88a 	bl	80173d0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>
 80172bc:	4603      	mov	r3, r0
 80172be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80172c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d001      	beq.n	80172ca <phpalI18092mPI_Sw_Deselect+0x162>
 80172c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80172c8:	e037      	b.n	801733a <phpalI18092mPI_Sw_Deselect+0x1d2>
                &wFrameLength,
                &pPayload,
                &wPayloadLength));

            /* Check DID */
            if (pDataParams->bDid > 0U)
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	7d1b      	ldrb	r3, [r3, #20]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d00c      	beq.n	80172ec <phpalI18092mPI_Sw_Deselect+0x184>
            {
                /* Protocol error in case DID is not the same. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if ((wPayloadLength != 1U) || (pPayload[0] != pDataParams->bDid))
 80172d2:	89fb      	ldrh	r3, [r7, #14]
 80172d4:	2b01      	cmp	r3, #1
 80172d6:	d105      	bne.n	80172e4 <phpalI18092mPI_Sw_Deselect+0x17c>
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	781a      	ldrb	r2, [r3, #0]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	7d1b      	ldrb	r3, [r3, #20]
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d024      	beq.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80172e4:	f640 4306 	movw	r3, #3078	@ 0xc06
 80172e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80172ea:	e020      	b.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
                }
            }
            else
            {
                /* DID must not be present in response. NFCForum-TS-DigitalProtocol-1.0 section 14.9.2.1. */
                if (wPayloadLength != 0U)
 80172ec:	89fb      	ldrh	r3, [r7, #14]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d01d      	beq.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80172f2:	f640 4306 	movw	r3, #3078	@ 0xc06
 80172f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80172f8:	e019      	b.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
        }
        else
        {
            /* Check if we shall perform a(nother) retry. */
            if (bRetryCount < pDataParams->bMaxRetryCount)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	7f9b      	ldrb	r3, [r3, #30]
 80172fe:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8017302:	429a      	cmp	r2, r3
 8017304:	d208      	bcs.n	8017318 <phpalI18092mPI_Sw_Deselect+0x1b0>
            {
                ++bRetryCount;
 8017306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801730a:	3301      	adds	r3, #1
 801730c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                bRetry = PH_ON;
 8017310:	2301      	movs	r3, #1
 8017312:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8017316:	e00a      	b.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
            }
            else
            {
                /* Return ERR_RECOVERY_FAILED if some response has been received before (bMaxRetryCount = 0 suppresses the retry behaviour) */
                if ((pDataParams->bMaxRetryCount > 0U) && (0u != bResponseReceived))
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	7f9b      	ldrb	r3, [r3, #30]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d006      	beq.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
 8017320:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8017324:	2b00      	cmp	r3, #0
 8017326:	d002      	beq.n	801732e <phpalI18092mPI_Sw_Deselect+0x1c6>
                {
                    status = PH_ADD_COMPCODE_FIXED(PHPAL_I18092MPI_ERR_RECOVERY_FAILED, PH_COMP_PAL_I18092MPI);
 8017328:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 801732c:	86fb      	strh	r3, [r7, #54]	@ 0x36
                }
            }
        }
    }
    /* Retry loop */
    while (bRetry != PH_OFF);
 801732e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8017332:	2b00      	cmp	r3, #0
 8017334:	f47f af73 	bne.w	801721e <phpalI18092mPI_Sw_Deselect+0xb6>

    return status;
 8017338:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 801733a:	4618      	mov	r0, r3
 801733c:	3738      	adds	r7, #56	@ 0x38
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}
 8017342:	bf00      	nop
 8017344:	10624dd3 	.word	0x10624dd3

08017348 <phpalI18092mPI_Sw_WriteFrameHeader>:
        phpalI18092mPI_Sw_DataParams_t * pDataParams,
        uint16_t wOption,
        uint8_t bCommandCode,
        uint8_t bDataLength
)
{
 8017348:	b590      	push	{r4, r7, lr}
 801734a:	b087      	sub	sp, #28
 801734c:	af02      	add	r7, sp, #8
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	4608      	mov	r0, r1
 8017352:	4611      	mov	r1, r2
 8017354:	461a      	mov	r2, r3
 8017356:	4603      	mov	r3, r0
 8017358:	807b      	strh	r3, [r7, #2]
 801735a:	460b      	mov	r3, r1
 801735c:	707b      	strb	r3, [r7, #1]
 801735e:	4613      	mov	r3, r2
 8017360:	703b      	strb	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM status;
    uint8_t     PH_MEMLOC_REM aHeader[4];
    uint8_t     PH_MEMLOC_REM bLength = 0;
 8017362:	2300      	movs	r3, #0
 8017364:	73fb      	strb	r3, [r7, #15]

    /* Set LEN byte (includes the length itself). */
    aHeader[bLength++] = bDataLength + 3U;
 8017366:	7bfb      	ldrb	r3, [r7, #15]
 8017368:	1c5a      	adds	r2, r3, #1
 801736a:	73fa      	strb	r2, [r7, #15]
 801736c:	4619      	mov	r1, r3
 801736e:	783b      	ldrb	r3, [r7, #0]
 8017370:	3303      	adds	r3, #3
 8017372:	b2da      	uxtb	r2, r3
 8017374:	f101 0310 	add.w	r3, r1, #16
 8017378:	443b      	add	r3, r7
 801737a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Only NFC initiator mode is supported so only requests are sent. */
    aHeader[bLength++] = PHPAL_I18092MPI_SW_CMD_REQUEST;
 801737e:	7bfb      	ldrb	r3, [r7, #15]
 8017380:	1c5a      	adds	r2, r3, #1
 8017382:	73fa      	strb	r2, [r7, #15]
 8017384:	3310      	adds	r3, #16
 8017386:	443b      	add	r3, r7
 8017388:	22d4      	movs	r2, #212	@ 0xd4
 801738a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Set the command code. */
    aHeader[bLength++] = bCommandCode;
 801738e:	7bfb      	ldrb	r3, [r7, #15]
 8017390:	1c5a      	adds	r2, r3, #1
 8017392:	73fa      	strb	r2, [r7, #15]
 8017394:	3310      	adds	r3, #16
 8017396:	443b      	add	r3, r7
 8017398:	787a      	ldrb	r2, [r7, #1]
 801739a:	f803 2c08 	strb.w	r2, [r3, #-8]

    PH_CHECK_SUCCESS_FCT(status, phhalHw_Exchange(
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6858      	ldr	r0, [r3, #4]
 80173a2:	7bfb      	ldrb	r3, [r7, #15]
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	f107 0208 	add.w	r2, r7, #8
 80173aa:	8879      	ldrh	r1, [r7, #2]
 80173ac:	2400      	movs	r4, #0
 80173ae:	9401      	str	r4, [sp, #4]
 80173b0:	2400      	movs	r4, #0
 80173b2:	9400      	str	r4, [sp, #0]
 80173b4:	f7f6 fcd8 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 80173b8:	4603      	mov	r3, r0
 80173ba:	81bb      	strh	r3, [r7, #12]
 80173bc:	89bb      	ldrh	r3, [r7, #12]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d001      	beq.n	80173c6 <phpalI18092mPI_Sw_WriteFrameHeader+0x7e>
 80173c2:	89bb      	ldrh	r3, [r7, #12]
 80173c4:	e000      	b.n	80173c8 <phpalI18092mPI_Sw_WriteFrameHeader+0x80>
        aHeader,
        (uint16_t)bLength,
        NULL,
        NULL));

    return PH_ERR_SUCCESS;
 80173c6:	2300      	movs	r3, #0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3714      	adds	r7, #20
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd90      	pop	{r4, r7, pc}

080173d0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame>:
    uint8_t ** ppValidatedFrame,
    uint16_t * pValidatedFrameLength,
    uint8_t ** ppPayload,
    uint16_t * pPayloadLength
    )
{
 80173d0:	b480      	push	{r7}
 80173d2:	b087      	sub	sp, #28
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	60f8      	str	r0, [r7, #12]
 80173d8:	60b9      	str	r1, [r7, #8]
 80173da:	4611      	mov	r1, r2
 80173dc:	461a      	mov	r2, r3
 80173de:	460b      	mov	r3, r1
 80173e0:	80fb      	strh	r3, [r7, #6]
 80173e2:	4613      	mov	r3, r2
 80173e4:	717b      	strb	r3, [r7, #5]
    phStatus_t  PH_MEMLOC_REM bOffset = 0;
 80173e6:	2300      	movs	r3, #0
 80173e8:	82fb      	strh	r3, [r7, #22]
    uint8_t     PH_MEMLOC_REM bPfb;

    /* Check maximum frame length */
    if (wFrameLength > aI18092_mPI_FsTable[pDataParams->bLri])
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	7f1b      	ldrb	r3, [r3, #28]
 80173ee:	461a      	mov	r2, r3
 80173f0:	4b6d      	ldr	r3, [pc, #436]	@ (80175a8 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1d8>)
 80173f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80173f6:	88fa      	ldrh	r2, [r7, #6]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d902      	bls.n	8017402 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x32>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80173fc:	f640 4306 	movw	r3, #3078	@ 0xc06
 8017400:	e0cb      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check minimum frame length */
    if (wFrameLength < PHPAL_I18092MPI_SW_MIN_FRAMESIZE)
 8017402:	88fb      	ldrh	r3, [r7, #6]
 8017404:	2b02      	cmp	r3, #2
 8017406:	d802      	bhi.n	801740e <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x3e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017408:	f640 4306 	movw	r3, #3078	@ 0xc06
 801740c:	e0c5      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Remove Startbyte if present */
    *ppValidatedFrame = &pFrame[bOffset];
 801740e:	8afb      	ldrh	r3, [r7, #22]
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	441a      	add	r2, r3
 8017414:	6a3b      	ldr	r3, [r7, #32]
 8017416:	601a      	str	r2, [r3, #0]
    *pValidatedFrameLength = wFrameLength - (uint16_t)bOffset;
 8017418:	88fa      	ldrh	r2, [r7, #6]
 801741a:	8afb      	ldrh	r3, [r7, #22]
 801741c:	1ad3      	subs	r3, r2, r3
 801741e:	b29a      	uxth	r2, r3
 8017420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017422:	801a      	strh	r2, [r3, #0]

    /* Compare length field with frame length. */
    if (pFrame[bOffset++] != (uint8_t)*pValidatedFrameLength)
 8017424:	8afb      	ldrh	r3, [r7, #22]
 8017426:	1c5a      	adds	r2, r3, #1
 8017428:	82fa      	strh	r2, [r7, #22]
 801742a:	461a      	mov	r2, r3
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	4413      	add	r3, r2
 8017430:	781a      	ldrb	r2, [r3, #0]
 8017432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017434:	881b      	ldrh	r3, [r3, #0]
 8017436:	b2db      	uxtb	r3, r3
 8017438:	429a      	cmp	r2, r3
 801743a:	d002      	beq.n	8017442 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x72>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801743c:	f640 4306 	movw	r3, #3078	@ 0xc06
 8017440:	e0ab      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if the received frame is a reponse frame. */
    if (pFrame[bOffset++] != PHPAL_I18092MPI_SW_CMD_RESPONSE)
 8017442:	8afb      	ldrh	r3, [r7, #22]
 8017444:	1c5a      	adds	r2, r3, #1
 8017446:	82fa      	strh	r2, [r7, #22]
 8017448:	461a      	mov	r2, r3
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	4413      	add	r3, r2
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	2bd5      	cmp	r3, #213	@ 0xd5
 8017452:	d002      	beq.n	801745a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x8a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017454:	f640 4306 	movw	r3, #3078	@ 0xc06
 8017458:	e09f      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* Check if expected response code matches the received response code. */
    if (pFrame[bOffset++] != bExpectedResponseCode)
 801745a:	8afb      	ldrh	r3, [r7, #22]
 801745c:	1c5a      	adds	r2, r3, #1
 801745e:	82fa      	strh	r2, [r7, #22]
 8017460:	461a      	mov	r2, r3
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	4413      	add	r3, r2
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	797a      	ldrb	r2, [r7, #5]
 801746a:	429a      	cmp	r2, r3
 801746c:	d002      	beq.n	8017474 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xa4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 801746e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8017472:	e092      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
    }

    /* In case the response is a DEP PDU also check for presence of DID, NAD and PNI. */
    if (bExpectedResponseCode == PHPAL_I18092MPI_SW_CMD_DEP_RES)
 8017474:	797b      	ldrb	r3, [r7, #5]
 8017476:	2b07      	cmp	r3, #7
 8017478:	f040 8083 	bne.w	8017582 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
    {
        /* PFB should be present in frame. */
        if (wFrameLength < (bOffset + /* */ 1U))
 801747c:	88fa      	ldrh	r2, [r7, #6]
 801747e:	8afb      	ldrh	r3, [r7, #22]
 8017480:	3301      	adds	r3, #1
 8017482:	429a      	cmp	r2, r3
 8017484:	d202      	bcs.n	801748c <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xbc>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017486:	f640 4306 	movw	r3, #3078	@ 0xc06
 801748a:	e086      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }

        /* Retrieve PFB */
        bPfb = pFrame[bOffset++];
 801748c:	8afb      	ldrh	r3, [r7, #22]
 801748e:	1c5a      	adds	r2, r3, #1
 8017490:	82fa      	strh	r2, [r7, #22]
 8017492:	461a      	mov	r2, r3
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	4413      	add	r3, r2
 8017498:	781b      	ldrb	r3, [r3, #0]
 801749a:	757b      	strb	r3, [r7, #21]

        /* DID enabled */
        if (pDataParams->bDid > 0U)
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	7d1b      	ldrb	r3, [r3, #20]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d01d      	beq.n	80174e0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x110>
        {
            /* DID presence should be indicated. */
            if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))))
 80174a4:	7d7b      	ldrb	r3, [r7, #21]
 80174a6:	f003 0304 	and.w	r3, r3, #4
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d102      	bne.n	80174b4 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xe4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80174ae:	f640 4306 	movw	r3, #3078	@ 0xc06
 80174b2:	e072      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should be present in frame. */
            if (wFrameLength < (bOffset + /* */ 1U))
 80174b4:	88fa      	ldrh	r2, [r7, #6]
 80174b6:	8afb      	ldrh	r3, [r7, #22]
 80174b8:	3301      	adds	r3, #1
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d202      	bcs.n	80174c4 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0xf4>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80174be:	f640 4306 	movw	r3, #3078	@ 0xc06
 80174c2:	e06a      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* DID should match. */
            if (pFrame[bOffset++] != pDataParams->bDid)
 80174c4:	8afb      	ldrh	r3, [r7, #22]
 80174c6:	1c5a      	adds	r2, r3, #1
 80174c8:	82fa      	strh	r2, [r7, #22]
 80174ca:	461a      	mov	r2, r3
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	4413      	add	r3, r2
 80174d0:	781a      	ldrb	r2, [r3, #0]
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	7d1b      	ldrb	r3, [r3, #20]
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d00a      	beq.n	80174f0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80174da:	f640 4306 	movw	r3, #3078	@ 0xc06
 80174de:	e05c      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
        }
        /* DID disabled */
        else
        {
            /* DID presence should not be indicated. */
            if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_DID_MASK))
 80174e0:	7d7b      	ldrb	r3, [r7, #21]
 80174e2:	f003 0304 	and.w	r3, r3, #4
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d002      	beq.n	80174f0 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x120>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 80174ea:	f640 4306 	movw	r3, #3078	@ 0xc06
 80174ee:	e054      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
        }

        /* Check NAD only for first PDU frames. */
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	7cdb      	ldrb	r3, [r3, #19]
 80174f4:	f003 0320 	and.w	r3, r3, #32
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d12e      	bne.n	801755a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
            (0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_LAST_BIT))))
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	7cdb      	ldrb	r3, [r3, #19]
 8017500:	b25b      	sxtb	r3, r3
        if ((0U == ((pDataParams->bStateNow & PHPAL_I18092MPI_SW_STATE_CHAINING_BIT))) &&
 8017502:	2b00      	cmp	r3, #0
 8017504:	db29      	blt.n	801755a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
        {
            /* NAD enabled */
            if (0U != (pDataParams->bNadEnabled))
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	7d5b      	ldrb	r3, [r3, #21]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d01d      	beq.n	801754a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x17a>
            {
                /* NAD presence should be indicated. */
                if ((0U == ((bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))))
 801750e:	7d7b      	ldrb	r3, [r7, #21]
 8017510:	f003 0308 	and.w	r3, r3, #8
 8017514:	2b00      	cmp	r3, #0
 8017516:	d102      	bne.n	801751e <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x14e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017518:	f640 4306 	movw	r3, #3078	@ 0xc06
 801751c:	e03d      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should be present in frame. */
                if (wFrameLength < (bOffset + /* */ 1U))
 801751e:	88fa      	ldrh	r2, [r7, #6]
 8017520:	8afb      	ldrh	r3, [r7, #22]
 8017522:	3301      	adds	r3, #1
 8017524:	429a      	cmp	r2, r3
 8017526:	d202      	bcs.n	801752e <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x15e>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017528:	f640 4306 	movw	r3, #3078	@ 0xc06
 801752c:	e035      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
                /* NAD should match. */
                if (pFrame[bOffset++] != pDataParams->bNad)
 801752e:	8afb      	ldrh	r3, [r7, #22]
 8017530:	1c5a      	adds	r2, r3, #1
 8017532:	82fa      	strh	r2, [r7, #22]
 8017534:	461a      	mov	r2, r3
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	4413      	add	r3, r2
 801753a:	781a      	ldrb	r2, [r3, #0]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	7d9b      	ldrb	r3, [r3, #22]
 8017540:	429a      	cmp	r2, r3
 8017542:	d00a      	beq.n	801755a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017544:	f640 4306 	movw	r3, #3078	@ 0xc06
 8017548:	e027      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            /* NAD disabled */
            else
            {
                /* NAD presence should not be indicated. */
                if (0U != (bPfb & PHPAL_I18092MPI_SW_PFB_NAD_MASK))
 801754a:	7d7b      	ldrb	r3, [r7, #21]
 801754c:	f003 0308 	and.w	r3, r3, #8
 8017550:	2b00      	cmp	r3, #0
 8017552:	d002      	beq.n	801755a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x18a>
                {
                    return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017554:	f640 4306 	movw	r3, #3078	@ 0xc06
 8017558:	e01f      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
                }
            }
        }

        /* For information or ACK PDU also check for PNI. */
        switch (bPfb & PHPAL_I18092MPI_SW_PFB_PDU_TYPE_MASK)
 801755a:	7d7b      	ldrb	r3, [r7, #21]
 801755c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8017560:	2b00      	cmp	r3, #0
 8017562:	d001      	beq.n	8017568 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x198>
 8017564:	2b40      	cmp	r3, #64	@ 0x40
 8017566:	d109      	bne.n	801757c <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ac>
        {
        case PHPAL_I18092MPI_SW_PFB_INFORMATION_PDU_MASK:
        case PHPAL_I18092MPI_SW_PFB_ACK_PDU_MASK:
            if ((bPfb & PHPAL_I18092MPI_SW_PFB_PNI_MASK) != pDataParams->bPni)
 8017568:	7d7b      	ldrb	r3, [r7, #21]
 801756a:	f003 0303 	and.w	r3, r3, #3
 801756e:	68fa      	ldr	r2, [r7, #12]
 8017570:	7e52      	ldrb	r2, [r2, #25]
 8017572:	4293      	cmp	r3, r2
 8017574:	d004      	beq.n	8017580 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b0>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_I18092MPI);
 8017576:	f640 4306 	movw	r3, #3078	@ 0xc06
 801757a:	e00e      	b.n	801759a <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1ca>
            }
            break;

        default:
            /* nothing. */
            break;
 801757c:	bf00      	nop
 801757e:	e000      	b.n	8017582 <phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame+0x1b2>
            break;
 8017580:	bf00      	nop
        }
    }

    /* Return Payload. */
    *ppPayload = &pFrame[bOffset];
 8017582:	8afb      	ldrh	r3, [r7, #22]
 8017584:	68ba      	ldr	r2, [r7, #8]
 8017586:	441a      	add	r2, r3
 8017588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801758a:	601a      	str	r2, [r3, #0]
    *pPayloadLength = wFrameLength - bOffset;
 801758c:	88fa      	ldrh	r2, [r7, #6]
 801758e:	8afb      	ldrh	r3, [r7, #22]
 8017590:	1ad3      	subs	r3, r2, r3
 8017592:	b29a      	uxth	r2, r3
 8017594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017596:	801a      	strh	r2, [r3, #0]

    return PH_ERR_SUCCESS;
 8017598:	2300      	movs	r3, #0
}
 801759a:	4618      	mov	r0, r3
 801759c:	371c      	adds	r7, #28
 801759e:	46bd      	mov	sp, r7
 80175a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a4:	4770      	bx	lr
 80175a6:	bf00      	nop
 80175a8:	08022128 	.word	0x08022128

080175ac <phpalI18092mPI_Sw_ConvertDatarate>:

phStatus_t phpalI18092mPI_Sw_ConvertDatarate(
    uint16_t wHalDatarate,
    uint8_t * pI18092Datarate
    )
{
 80175ac:	b480      	push	{r7}
 80175ae:	b083      	sub	sp, #12
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	4603      	mov	r3, r0
 80175b4:	6039      	str	r1, [r7, #0]
 80175b6:	80fb      	strh	r3, [r7, #6]
    wHalDatarate = wHalDatarate & PHHAL_HW_RF_DATARATE_OPTION_MASK;
 80175b8:	88fb      	ldrh	r3, [r7, #6]
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	80fb      	strh	r3, [r7, #6]
    switch (wHalDatarate)
 80175be:	88fb      	ldrh	r3, [r7, #6]
 80175c0:	2b02      	cmp	r3, #2
 80175c2:	d00e      	beq.n	80175e2 <phpalI18092mPI_Sw_ConvertDatarate+0x36>
 80175c4:	2b02      	cmp	r3, #2
 80175c6:	dc10      	bgt.n	80175ea <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d002      	beq.n	80175d2 <phpalI18092mPI_Sw_ConvertDatarate+0x26>
 80175cc:	2b01      	cmp	r3, #1
 80175ce:	d004      	beq.n	80175da <phpalI18092mPI_Sw_ConvertDatarate+0x2e>
 80175d0:	e00b      	b.n	80175ea <phpalI18092mPI_Sw_ConvertDatarate+0x3e>
    {
    case PHHAL_HW_RF_DATARATE_106:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_106;
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	2200      	movs	r2, #0
 80175d6:	701a      	strb	r2, [r3, #0]
        break;
 80175d8:	e00a      	b.n	80175f0 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_212:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_212;
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	2201      	movs	r2, #1
 80175de:	701a      	strb	r2, [r3, #0]
        break;
 80175e0:	e006      	b.n	80175f0 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    case PHHAL_HW_RF_DATARATE_424:
        *pI18092Datarate = PHPAL_I18092MPI_DATARATE_424;
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	2202      	movs	r2, #2
 80175e6:	701a      	strb	r2, [r3, #0]
        break;
 80175e8:	e002      	b.n	80175f0 <phpalI18092mPI_Sw_ConvertDatarate+0x44>
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_I18092MPI);
 80175ea:	f640 4325 	movw	r3, #3109	@ 0xc25
 80175ee:	e000      	b.n	80175f2 <phpalI18092mPI_Sw_ConvertDatarate+0x46>
    }

    return PH_ERR_SUCCESS;
 80175f0:	2300      	movs	r3, #0
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	370c      	adds	r7, #12
 80175f6:	46bd      	mov	sp, r7
 80175f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fc:	4770      	bx	lr
	...

08017600 <phpalI18092mT_Sw_Init>:
    phpalI18092mT_Sw_DataParams_t * pDataParams,
    uint16_t wSizeOfDataParams,
    void * pHalDataParams,
    pRtoxTimerCallback pRtoxCallback
    )
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b086      	sub	sp, #24
 8017604:	af00      	add	r7, sp, #0
 8017606:	60f8      	str	r0, [r7, #12]
 8017608:	607a      	str	r2, [r7, #4]
 801760a:	603b      	str	r3, [r7, #0]
 801760c:	460b      	mov	r3, r1
 801760e:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM wStatus = PH_ERR_SUCCESS;
 8017610:	2300      	movs	r3, #0
 8017612:	82fb      	strh	r3, [r7, #22]

    if (sizeof(phpalI18092mT_Sw_DataParams_t) != wSizeOfDataParams)
 8017614:	897b      	ldrh	r3, [r7, #10]
 8017616:	2b4c      	cmp	r3, #76	@ 0x4c
 8017618:	d002      	beq.n	8017620 <phpalI18092mT_Sw_Init+0x20>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_I18092MT);
 801761a:	f44f 6352 	mov.w	r3, #3360	@ 0xd20
 801761e:	e02c      	b.n	801767a <phpalI18092mT_Sw_Init+0x7a>
    }
    PH_ASSERT_NULL (pDataParams);
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d101      	bne.n	801762a <phpalI18092mT_Sw_Init+0x2a>
 8017626:	2321      	movs	r3, #33	@ 0x21
 8017628:	e027      	b.n	801767a <phpalI18092mT_Sw_Init+0x7a>
    PH_ASSERT_NULL (pHalDataParams);
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d101      	bne.n	8017634 <phpalI18092mT_Sw_Init+0x34>
 8017630:	2321      	movs	r3, #33	@ 0x21
 8017632:	e022      	b.n	801767a <phpalI18092mT_Sw_Init+0x7a>

    /* Init private data */
    pDataParams->wId            = PH_COMP_PAL_I18092MT | PHPAL_I18092MT_SW_ID;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	f640 5201 	movw	r2, #3329	@ 0xd01
 801763a:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams = pHalDataParams;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	605a      	str	r2, [r3, #4]
    pDataParams->pRtoxCallback  = pRtoxCallback;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	683a      	ldr	r2, [r7, #0]
 8017646:	60da      	str	r2, [r3, #12]
    pDataParams->bCmdtype       = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	220a      	movs	r2, #10
 801764c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

    /* Reset protocol to defaults */
    (void)phpalI18092mT_Sw_ResetProtocol(pDataParams);
 8017650:	68f8      	ldr	r0, [r7, #12]
 8017652:	f000 f819 	bl	8017688 <phpalI18092mT_Sw_ResetProtocol>

    /* Check whether event is already created. */
    pDataParams->Pal18092mTEventObj.pEvtName = (uint8_t *)bmtEventName;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	4a0a      	ldr	r2, [pc, #40]	@ (8017684 <phpalI18092mT_Sw_Init+0x84>)
 801765a:	641a      	str	r2, [r3, #64]	@ 0x40
    pDataParams->Pal18092mTEventObj.intialValue = 0;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2200      	movs	r2, #0
 8017660:	645a      	str	r2, [r3, #68]	@ 0x44
    wStatus = phOsal_EventCreate(&pDataParams->Pal18092mTEventObj.EventHandle, &pDataParams->Pal18092mTEventObj);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	333c      	adds	r3, #60	@ 0x3c
 801766c:	4619      	mov	r1, r3
 801766e:	4610      	mov	r0, r2
 8017670:	f001 fc16 	bl	8018ea0 <phOsal_EventCreate>
 8017674:	4603      	mov	r3, r0
 8017676:	82fb      	strh	r3, [r7, #22]

    return wStatus;
 8017678:	8afb      	ldrh	r3, [r7, #22]
}
 801767a:	4618      	mov	r0, r3
 801767c:	3718      	adds	r7, #24
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	08022130 	.word	0x08022130

08017688 <phpalI18092mT_Sw_ResetProtocol>:
}

phStatus_t phpalI18092mT_Sw_ResetProtocol(
    phpalI18092mT_Sw_DataParams_t * pDataParams
    )
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
    /* Apply default parameters */
    pDataParams->bStateNow          = PHPAL_I18092MT_SW_STATE_INFORMATION_PDU_TX;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2200      	movs	r2, #0
 8017694:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pDataParams->bDid               = 0;    /* set DID to 0, i.e. disable usage of DID */
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	2200      	movs	r2, #0
 801769c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    pDataParams->bNadEnabled        = PH_OFF;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	2200      	movs	r2, #0
 80176a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pDataParams->bNadVal            = 0;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	2200      	movs	r2, #0
 80176ac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    pDataParams->bFsl               = PHPAL_I18092MT_FRAMESIZE_64;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2200      	movs	r2, #0
 80176b4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    pDataParams->bPni               = 0;    /* NFCForum-TS-DigitalProtocol-1.0 section 14.12.3.1 */
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2200      	movs	r2, #0
 80176bc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    pDataParams->bDst               = PHPAL_I18092MT_DATARATE_106;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2200      	movs	r2, #0
 80176c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    pDataParams->bDrt               = PHPAL_I18092MT_DATARATE_106;
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2200      	movs	r2, #0
 80176cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    pDataParams->bBsi               = 0;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2200      	movs	r2, #0
 80176d4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    pDataParams->bBri               = 0;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2200      	movs	r2, #0
 80176dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    pDataParams->bLri               = PHPAL_I18092MT_FRAMESIZE_64;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2200      	movs	r2, #0
 80176e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pDataParams->bBst               = 0;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2200      	movs	r2, #0
 80176ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    pDataParams->bBrt               = 0;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2200      	movs	r2, #0
 80176f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    pDataParams->bLrt               = PHPAL_I18092MT_FRAMESIZE_64;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2200      	movs	r2, #0
 80176fc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pDataParams->bTo                = 0;
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2200      	movs	r2, #0
 8017704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pDataParams->bRtoxDisabled      = PH_OFF;
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2200      	movs	r2, #0
 801770c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    pDataParams->ovrTask            = NULL;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	2200      	movs	r2, #0
 8017714:	609a      	str	r2, [r3, #8]
    pDataParams->bCmdtype           = PHPAL_I18092MT_SW_CMD_RLS_REQ;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	220a      	movs	r2, #10
 801771a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    pDataParams->bRtoxExtnVal       = PHPAL_I18092MT_SW_MIN_RTOX_VALUE;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2201      	movs	r2, #1
 8017722:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    pDataParams->wLastTxLen         = 0;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2200      	movs	r2, #0
 801772a:	821a      	strh	r2, [r3, #16]
    pDataParams->bOpeMode           = RD_LIB_MODE_NFC;
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	2202      	movs	r2, #2
 8017730:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pDataParams->bPropPSLMode       = PH_OFF;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	2200      	movs	r2, #0
 8017738:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    (void)memset(pDataParams->aNfcid3i, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	3312      	adds	r3, #18
 8017740:	220a      	movs	r2, #10
 8017742:	2100      	movs	r1, #0
 8017744:	4618      	mov	r0, r3
 8017746:	f007 fbef 	bl	801ef28 <memset>
    (void)memset(pDataParams->aNfcid3t, 0, PHPAL_I18092MT_NFCID3_LENGTH);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	331c      	adds	r3, #28
 801774e:	220a      	movs	r2, #10
 8017750:	2100      	movs	r1, #0
 8017752:	4618      	mov	r0, r3
 8017754:	f007 fbe8 	bl	801ef28 <memset>

    return PH_ERR_SUCCESS;
 8017758:	2300      	movs	r3, #0
}
 801775a:	4618      	mov	r0, r3
 801775c:	3708      	adds	r7, #8
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <phpalMifare_Sw_Init>:
                               phpalMifare_Sw_DataParams_t * pDataParams,
                               uint16_t wSizeOfDataParams,
                               void * pHalDataParams,
                               void * pPalI14443p4DataParams
                               )
{
 8017762:	b480      	push	{r7}
 8017764:	b085      	sub	sp, #20
 8017766:	af00      	add	r7, sp, #0
 8017768:	60f8      	str	r0, [r7, #12]
 801776a:	607a      	str	r2, [r7, #4]
 801776c:	603b      	str	r3, [r7, #0]
 801776e:	460b      	mov	r3, r1
 8017770:	817b      	strh	r3, [r7, #10]
    if (sizeof(phpalMifare_Sw_DataParams_t) != wSizeOfDataParams)
 8017772:	897b      	ldrh	r3, [r7, #10]
 8017774:	2b0c      	cmp	r3, #12
 8017776:	d002      	beq.n	801777e <phpalMifare_Sw_Init+0x1c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_MIFARE);
 8017778:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 801777c:	e014      	b.n	80177a8 <phpalMifare_Sw_Init+0x46>
    }
    PH_ASSERT_NULL (pDataParams);
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d101      	bne.n	8017788 <phpalMifare_Sw_Init+0x26>
 8017784:	2321      	movs	r3, #33	@ 0x21
 8017786:	e00f      	b.n	80177a8 <phpalMifare_Sw_Init+0x46>
    PH_ASSERT_NULL (pHalDataParams);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d101      	bne.n	8017792 <phpalMifare_Sw_Init+0x30>
 801778e:	2321      	movs	r3, #33	@ 0x21
 8017790:	e00a      	b.n	80177a8 <phpalMifare_Sw_Init+0x46>

    /* init private data */
    pDataParams->wId                    = PH_COMP_PAL_MIFARE | PHPAL_MIFARE_SW_ID;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	f240 7202 	movw	r2, #1794	@ 0x702
 8017798:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams         = pHalDataParams;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	687a      	ldr	r2, [r7, #4]
 801779e:	605a      	str	r2, [r3, #4]
    pDataParams->pPalI14443p4DataParams = pPalI14443p4DataParams;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	683a      	ldr	r2, [r7, #0]
 80177a4:	609a      	str	r2, [r3, #8]
    return PH_ERR_SUCCESS;
 80177a6:	2300      	movs	r3, #0
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3714      	adds	r7, #20
 80177ac:	46bd      	mov	sp, r7
 80177ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b2:	4770      	bx	lr

080177b4 <phpalSli15693_Sw_Init>:
phStatus_t phpalSli15693_Sw_Init(
                                 phpalSli15693_Sw_DataParams_t * pDataParams,
                                 uint16_t wSizeOfDataParams,
                                 void * pHalDataParams
                                 )
{
 80177b4:	b480      	push	{r7}
 80177b6:	b085      	sub	sp, #20
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	60f8      	str	r0, [r7, #12]
 80177bc:	460b      	mov	r3, r1
 80177be:	607a      	str	r2, [r7, #4]
 80177c0:	817b      	strh	r3, [r7, #10]
    PH_ASSERT_NULL (pDataParams);
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d101      	bne.n	80177cc <phpalSli15693_Sw_Init+0x18>
 80177c8:	2321      	movs	r3, #33	@ 0x21
 80177ca:	e02d      	b.n	8017828 <phpalSli15693_Sw_Init+0x74>
    PH_ASSERT_NULL (pHalDataParams);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d101      	bne.n	80177d6 <phpalSli15693_Sw_Init+0x22>
 80177d2:	2321      	movs	r3, #33	@ 0x21
 80177d4:	e028      	b.n	8017828 <phpalSli15693_Sw_Init+0x74>

    /* parameter structure length check */
    if (sizeof(phpalSli15693_Sw_DataParams_t) != wSizeOfDataParams)
 80177d6:	897b      	ldrh	r3, [r7, #10]
 80177d8:	2b1c      	cmp	r3, #28
 80177da:	d002      	beq.n	80177e2 <phpalSli15693_Sw_Init+0x2e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_DATA_PARAMS, PH_COMP_PAL_SLI15693);
 80177dc:	f44f 6322 	mov.w	r3, #2592	@ 0xa20
 80177e0:	e022      	b.n	8017828 <phpalSli15693_Sw_Init+0x74>
    }

    /* init private data */
    pDataParams->wId                = PH_COMP_PAL_SLI15693 | PHPAL_SLI15693_SW_ID;
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	f640 2201 	movw	r2, #2561	@ 0xa01
 80177e8:	801a      	strh	r2, [r3, #0]
    pDataParams->pHalDataParams     = pHalDataParams;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	687a      	ldr	r2, [r7, #4]
 80177ee:	605a      	str	r2, [r3, #4]
    pDataParams->wAdditionalInfo    = 0;
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	2200      	movs	r2, #0
 80177f4:	811a      	strh	r2, [r3, #8]
    pDataParams->bFlags             = PHPAL_SLI15693_SW_FLAGS_DEFAULT;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	2206      	movs	r2, #6
 80177fa:	729a      	strb	r2, [r3, #10]
    pDataParams->bUidBitLength      = 0;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	2200      	movs	r2, #0
 8017800:	751a      	strb	r2, [r3, #20]
    pDataParams->bExplicitlyAddressed = 0;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	2200      	movs	r2, #0
 8017806:	755a      	strb	r2, [r3, #21]
    pDataParams->bOpeMode           = RD_LIB_MODE_ISO; /* Default Mode is ISO */
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2203      	movs	r2, #3
 801780c:	759a      	strb	r2, [r3, #22]
    pDataParams->bBuffering         = 0;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2200      	movs	r2, #0
 8017812:	75da      	strb	r2, [r3, #23]
    pDataParams->bMaxRetryCount     = PHPAL_SLI15693_SW_RETRYCOUNT_DEFAULT;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	2202      	movs	r2, #2
 8017818:	761a      	strb	r2, [r3, #24]
    pDataParams->bIcMfgCode         = PHPAL_SLI15693_SW_NXP_MFG_CODE;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	2204      	movs	r2, #4
 801781e:	765a      	strb	r2, [r3, #25]
    pDataParams->bResFlags          = 0;
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	2200      	movs	r2, #0
 8017824:	72da      	strb	r2, [r3, #11]

    return PH_ERR_SUCCESS;
 8017826:	2300      	movs	r3, #0
}
 8017828:	4618      	mov	r0, r3
 801782a:	3714      	adds	r7, #20
 801782c:	46bd      	mov	sp, r7
 801782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017832:	4770      	bx	lr

08017834 <phpalSli15693_Sw_Inventory>:
                                      uint8_t * pMask,
                                      uint8_t bMaskBitLength,
                                      uint8_t * pDsfid,
                                      uint8_t * pUid
                                      )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b08e      	sub	sp, #56	@ 0x38
 8017838:	af08      	add	r7, sp, #32
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	607b      	str	r3, [r7, #4]
 801783e:	460b      	mov	r3, r1
 8017840:	72fb      	strb	r3, [r7, #11]
 8017842:	4613      	mov	r3, r2
 8017844:	72bb      	strb	r3, [r7, #10]
    uint8_t     PH_MEMLOC_REM bUidLength;
    uint16_t    PH_MEMLOC_REM wDataLength = 0;
 8017846:	2300      	movs	r3, #0
 8017848:	82bb      	strh	r3, [r7, #20]

    return phpalSli15693_Sw_InventoryEx(
 801784a:	7ab9      	ldrb	r1, [r7, #10]
 801784c:	7afa      	ldrb	r2, [r7, #11]
 801784e:	f107 0314 	add.w	r3, r7, #20
 8017852:	9307      	str	r3, [sp, #28]
 8017854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017856:	9306      	str	r3, [sp, #24]
 8017858:	f107 0317 	add.w	r3, r7, #23
 801785c:	9305      	str	r3, [sp, #20]
 801785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017860:	9304      	str	r3, [sp, #16]
 8017862:	2300      	movs	r3, #0
 8017864:	9303      	str	r3, [sp, #12]
 8017866:	2300      	movs	r3, #0
 8017868:	9302      	str	r3, [sp, #8]
 801786a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801786e:	9301      	str	r3, [sp, #4]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	9300      	str	r3, [sp, #0]
 8017874:	460b      	mov	r3, r1
 8017876:	2101      	movs	r1, #1
 8017878:	68f8      	ldr	r0, [r7, #12]
 801787a:	f000 fe63 	bl	8018544 <phpalSli15693_Sw_InventoryEx>
 801787e:	4603      	mov	r3, r0
        0,
        pUid,
        &bUidLength,
        pDsfid,
        &wDataLength);
}
 8017880:	4618      	mov	r0, r3
 8017882:	3718      	adds	r7, #24
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}

08017888 <phpalSli15693_Sw_SendEof>:
                                    uint8_t * pUid,
                                    uint8_t * pUidLength,
                                    uint8_t * pData,
                                    uint16_t * pDataLength
                                    )
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b08a      	sub	sp, #40	@ 0x28
 801788c:	af02      	add	r7, sp, #8
 801788e:	60f8      	str	r0, [r7, #12]
 8017890:	607a      	str	r2, [r7, #4]
 8017892:	603b      	str	r3, [r7, #0]
 8017894:	460b      	mov	r3, r1
 8017896:	72fb      	strb	r3, [r7, #11]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8017898:	2300      	movs	r3, #0
 801789a:	617b      	str	r3, [r7, #20]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 801789c:	2300      	movs	r3, #0
 801789e:	827b      	strh	r3, [r7, #18]
    uint8_t     PH_MEMLOC_REM bStoredUidLength;
    uint16_t    PH_MEMLOC_REM wAsk;
    uint16_t    PH_MEMLOC_REM wTimeout;

    /* Check bOption */
    switch (bOption)
 80178a0:	7afb      	ldrb	r3, [r7, #11]
 80178a2:	2b03      	cmp	r3, #3
 80178a4:	d902      	bls.n	80178ac <phpalSli15693_Sw_SendEof+0x24>
    case PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE:
    case PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT:
        break;
    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80178a6:	f640 2321 	movw	r3, #2593	@ 0xa21
 80178aa:	e1c1      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        break;
 80178ac:	bf00      	nop
    }

    /* Reset UID and data lengths */
    *pDsfid = 0;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	2200      	movs	r2, #0
 80178b2:	701a      	strb	r2, [r3, #0]
    *pUidLength = 0;
 80178b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178b6:	2200      	movs	r2, #0
 80178b8:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 80178ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178bc:	2200      	movs	r2, #0
 80178be:	801a      	strh	r2, [r3, #0]

    /* if requested, wait ~20ms upon sending EOF */
    if (bOption == PHPAL_SLI15693_EOF_WRITE_ALIKE_WITH_WAIT)
 80178c0:	7afb      	ldrb	r3, [r7, #11]
 80178c2:	2b03      	cmp	r3, #3
 80178c4:	d10e      	bne.n	80178e4 <phpalSli15693_Sw_SendEof+0x5c>
    {
        /* in case of write alike commands wait 20 ms. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	685b      	ldr	r3, [r3, #4]
 80178ca:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80178ce:	2100      	movs	r1, #0
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7f6 fd45 	bl	800e360 <phhalHw_Pn5180_Wait>
 80178d6:	4603      	mov	r3, r0
 80178d8:	83bb      	strh	r3, [r7, #28]
 80178da:	8bbb      	ldrh	r3, [r7, #28]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d001      	beq.n	80178e4 <phpalSli15693_Sw_SendEof+0x5c>
 80178e0:	8bbb      	ldrh	r3, [r7, #28]
 80178e2:	e1a5      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_TIMEOUT_LONG_US));
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	685b      	ldr	r3, [r3, #4]
 80178e8:	f107 0210 	add.w	r2, r7, #16
 80178ec:	210c      	movs	r1, #12
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7f8 fa40 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80178f4:	4603      	mov	r3, r0
 80178f6:	83bb      	strh	r3, [r7, #28]
 80178f8:	8bbb      	ldrh	r3, [r7, #28]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d001      	beq.n	8017902 <phpalSli15693_Sw_SendEof+0x7a>
 80178fe:	8bbb      	ldrh	r3, [r7, #28]
 8017900:	e196      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8017902:	7afb      	ldrb	r3, [r7, #11]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d12a      	bne.n	801795e <phpalSli15693_Sw_SendEof+0xd6>
    {
        if(0U != (wAsk))
 8017908:	8a3b      	ldrh	r3, [r7, #16]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00d      	beq.n	801792a <phpalSli15693_Sw_SendEof+0xa2>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	7a9b      	ldrb	r3, [r3, #10]
 8017912:	f003 0302 	and.w	r3, r3, #2
 8017916:	2b00      	cmp	r3, #0
 8017918:	d003      	beq.n	8017922 <phpalSli15693_Sw_SendEof+0x9a>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 801791a:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801791e:	83fb      	strh	r3, [r7, #30]
 8017920:	e010      	b.n	8017944 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 8017922:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8017926:	83fb      	strh	r3, [r7, #30]
 8017928:	e00c      	b.n	8017944 <phpalSli15693_Sw_SendEof+0xbc>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	7a9b      	ldrb	r3, [r3, #10]
 801792e:	f003 0302 	and.w	r3, r3, #2
 8017932:	2b00      	cmp	r3, #0
 8017934:	d003      	beq.n	801793e <phpalSli15693_Sw_SendEof+0xb6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 8017936:	f241 039c 	movw	r3, #4252	@ 0x109c
 801793a:	83fb      	strh	r3, [r7, #30]
 801793c:	e002      	b.n	8017944 <phpalSli15693_Sw_SendEof+0xbc>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 801793e:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8017942:	83fb      	strh	r3, [r7, #30]
            }
        }
        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8017944:	8bfb      	ldrh	r3, [r7, #30]
 8017946:	461a      	mov	r2, r3
 8017948:	2102      	movs	r1, #2
 801794a:	68f8      	ldr	r0, [r7, #12]
 801794c:	f000 faf8 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 8017950:	4603      	mov	r3, r0
 8017952:	83bb      	strh	r3, [r7, #28]
 8017954:	8bbb      	ldrh	r3, [r7, #28]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d04b      	beq.n	80179f2 <phpalSli15693_Sw_SendEof+0x16a>
 801795a:	8bbb      	ldrh	r3, [r7, #28]
 801795c:	e168      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams,
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else if(bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 801795e:	7afb      	ldrb	r3, [r7, #11]
 8017960:	2b01      	cmp	r3, #1
 8017962:	d12a      	bne.n	80179ba <phpalSli15693_Sw_SendEof+0x132>
    {
        if(0U != (wAsk))
 8017964:	8a3b      	ldrh	r3, [r7, #16]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d00d      	beq.n	8017986 <phpalSli15693_Sw_SendEof+0xfe>
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	7a9b      	ldrb	r3, [r3, #10]
 801796e:	f003 0302 	and.w	r3, r3, #2
 8017972:	2b00      	cmp	r3, #0
 8017974:	d003      	beq.n	801797e <phpalSli15693_Sw_SendEof+0xf6>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 8017976:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801797a:	83fb      	strh	r3, [r7, #30]
 801797c:	e010      	b.n	80179a0 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 801797e:	f240 2373 	movw	r3, #627	@ 0x273
 8017982:	83fb      	strh	r3, [r7, #30]
 8017984:	e00c      	b.n	80179a0 <phpalSli15693_Sw_SendEof+0x118>
            }
        }
        else
        {
            if(0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	7a9b      	ldrb	r3, [r3, #10]
 801798a:	f003 0302 	and.w	r3, r3, #2
 801798e:	2b00      	cmp	r3, #0
 8017990:	d003      	beq.n	801799a <phpalSli15693_Sw_SendEof+0x112>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8017992:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8017996:	83fb      	strh	r3, [r7, #30]
 8017998:	e002      	b.n	80179a0 <phpalSli15693_Sw_SendEof+0x118>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801799a:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801799e:	83fb      	strh	r3, [r7, #30]
            }
        }

        /* Set  timeout. */
        PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80179a0:	8bfb      	ldrh	r3, [r7, #30]
 80179a2:	461a      	mov	r2, r3
 80179a4:	2102      	movs	r1, #2
 80179a6:	68f8      	ldr	r0, [r7, #12]
 80179a8:	f000 faca 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 80179ac:	4603      	mov	r3, r0
 80179ae:	83bb      	strh	r3, [r7, #28]
 80179b0:	8bbb      	ldrh	r3, [r7, #28]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d01d      	beq.n	80179f2 <phpalSli15693_Sw_SendEof+0x16a>
 80179b6:	8bbb      	ldrh	r3, [r7, #28]
 80179b8:	e13a      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_CONFIG_TIMEOUT_US,
            wTimeout));
    }
    else
    {
        if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	7d9b      	ldrb	r3, [r3, #22]
 80179be:	2b02      	cmp	r3, #2
 80179c0:	d10b      	bne.n	80179da <phpalSli15693_Sw_SendEof+0x152>
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout(50ms). */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80179c2:	2246      	movs	r2, #70	@ 0x46
 80179c4:	2103      	movs	r1, #3
 80179c6:	68f8      	ldr	r0, [r7, #12]
 80179c8:	f000 faba 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 80179cc:	4603      	mov	r3, r0
 80179ce:	83bb      	strh	r3, [r7, #28]
 80179d0:	8bbb      	ldrh	r3, [r7, #28]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d00d      	beq.n	80179f2 <phpalSli15693_Sw_SendEof+0x16a>
 80179d6:	8bbb      	ldrh	r3, [r7, #28]
 80179d8:	e12a      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_NFC_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
        else
        {
            /* Set FDT time max2(19.95ms) + Tolerance(Delta) Timeout. */
            PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80179da:	2214      	movs	r2, #20
 80179dc:	2103      	movs	r1, #3
 80179de:	68f8      	ldr	r0, [r7, #12]
 80179e0:	f000 faae 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 80179e4:	4603      	mov	r3, r0
 80179e6:	83bb      	strh	r3, [r7, #28]
 80179e8:	8bbb      	ldrh	r3, [r7, #28]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d001      	beq.n	80179f2 <phpalSli15693_Sw_SendEof+0x16a>
 80179ee:	8bbb      	ldrh	r3, [r7, #28]
 80179f0:	e11e      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
                (((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) / 1000) + ((((PHPAL_SLI15693_TIMEOUT_MAX2_US + PHPAL_SLI15693_ISO_MODE_TIMEOUT_DELTA_US) % 1000) > 500) ? 1 : 0))));
        }
    }

    /* Disable SOF, so only EOF is sent */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	685b      	ldr	r3, [r3, #4]
 80179f6:	2200      	movs	r2, #0
 80179f8:	2115      	movs	r1, #21
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7f6 fd6c 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8017a00:	4603      	mov	r3, r0
 8017a02:	83bb      	strh	r3, [r7, #28]
 8017a04:	8bbb      	ldrh	r3, [r7, #28]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d001      	beq.n	8017a0e <phpalSli15693_Sw_SendEof+0x186>
 8017a0a:	8bbb      	ldrh	r3, [r7, #28]
 8017a0c:	e110      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PH_OFF));

    /* Exchange command */
    status = phhalHw_Exchange(
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6858      	ldr	r0, [r3, #4]
 8017a12:	f107 0312 	add.w	r3, r7, #18
 8017a16:	9301      	str	r3, [sp, #4]
 8017a18:	f107 0314 	add.w	r3, r7, #20
 8017a1c:	9300      	str	r3, [sp, #0]
 8017a1e:	2300      	movs	r3, #0
 8017a20:	2200      	movs	r2, #0
 8017a22:	2100      	movs	r1, #0
 8017a24:	f7f6 f9a0 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	837b      	strh	r3, [r7, #26]
        0,
        &pResp,
        &wRespLength);

    /* Reset HAL to send SOF and EOF */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	685b      	ldr	r3, [r3, #4]
 8017a30:	2205      	movs	r2, #5
 8017a32:	2115      	movs	r1, #21
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7f6 fd4f 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	83bb      	strh	r3, [r7, #28]
 8017a3e:	8bbb      	ldrh	r3, [r7, #28]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d001      	beq.n	8017a48 <phpalSli15693_Sw_SendEof+0x1c0>
 8017a44:	8bbb      	ldrh	r3, [r7, #28]
 8017a46:	e0f3      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_SYMBOL_START,
        PHHAL_HW_SYMBOL_I15693_SOF));

    /* Check Success */
    PH_CHECK_SUCCESS(status);
 8017a48:	8b7b      	ldrh	r3, [r7, #26]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d001      	beq.n	8017a52 <phpalSli15693_Sw_SendEof+0x1ca>
 8017a4e:	8b7b      	ldrh	r3, [r7, #26]
 8017a50:	e0ee      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>

    /* Check RespLength */
    if (wRespLength == 0U)
 8017a52:	8a7b      	ldrh	r3, [r7, #18]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d102      	bne.n	8017a5e <phpalSli15693_Sw_SendEof+0x1d6>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017a58:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017a5c:	e0e8      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    /* check error flag */
    if (0U != (pResp[0] & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8017a5e:	697b      	ldr	r3, [r7, #20]
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	f003 0301 	and.w	r3, r3, #1
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d00e      	beq.n	8017a88 <phpalSli15693_Sw_SendEof+0x200>
    {
        /* check the length in case of error */
        if (wRespLength != 2U)
 8017a6a:	8a7b      	ldrh	r3, [r7, #18]
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	d002      	beq.n	8017a76 <phpalSli15693_Sw_SendEof+0x1ee>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017a70:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017a74:	e0dc      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        pDataParams->wAdditionalInfo = pResp[1];
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	811a      	strh	r2, [r3, #8]
        return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8017a82:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8017a86:	e0d3      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
    }

    if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT)
 8017a88:	7afb      	ldrb	r3, [r7, #11]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d13d      	bne.n	8017b0a <phpalSli15693_Sw_SendEof+0x282>
    {
        /* ignore flag byte */
        ++pResp;
 8017a8e:	697b      	ldr	r3, [r7, #20]
 8017a90:	3301      	adds	r3, #1
 8017a92:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8017a94:	8a7b      	ldrh	r3, [r7, #18]
 8017a96:	3b01      	subs	r3, #1
 8017a98:	b29b      	uxth	r3, r3
 8017a9a:	827b      	strh	r3, [r7, #18]

        /* the UID is only returned on a next slot command. */
        if (wRespLength != (1u + PHPAL_SLI15693_UID_LENGTH))
 8017a9c:	8a7b      	ldrh	r3, [r7, #18]
 8017a9e:	2b09      	cmp	r3, #9
 8017aa0:	d002      	beq.n	8017aa8 <phpalSli15693_Sw_SendEof+0x220>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017aa2:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017aa6:	e0c3      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        }

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	685b      	ldr	r3, [r3, #4]
 8017aac:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8017ab0:	2100      	movs	r1, #0
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7f6 fc54 	bl	800e360 <phhalHw_Pn5180_Wait>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	83bb      	strh	r3, [r7, #28]
 8017abc:	8bbb      	ldrh	r3, [r7, #28]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d001      	beq.n	8017ac6 <phpalSli15693_Sw_SendEof+0x23e>
 8017ac2:	8bbb      	ldrh	r3, [r7, #28]
 8017ac4:	e0b4      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
            pDataParams->pHalDataParams,
            PHHAL_HW_TIME_MICROSECONDS,
            PHPAL_SLI15693_SW_T2_WAITING_TIME));

        /* Copy the DSFID to the data buffer */
        *pDsfid = pResp[0];
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	781a      	ldrb	r2, [r3, #0]
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	701a      	strb	r2, [r3, #0]

        /* retrieve the UID */
        (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	f103 000c 	add.w	r0, r3, #12
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	2208      	movs	r2, #8
 8017ada:	4619      	mov	r1, r3
 8017adc:	f007 faa3 	bl	801f026 <memcpy>
        pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	2240      	movs	r2, #64	@ 0x40
 8017ae4:	751a      	strb	r2, [r3, #20]

        /* return the UID */
        (void)memcpy(pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8017ae6:	697b      	ldr	r3, [r7, #20]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	2208      	movs	r2, #8
 8017aec:	4619      	mov	r1, r3
 8017aee:	6838      	ldr	r0, [r7, #0]
 8017af0:	f007 fa99 	bl	801f026 <memcpy>
        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8017af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017af6:	2208      	movs	r2, #8
 8017af8:	701a      	strb	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	7a9b      	ldrb	r3, [r3, #10]
 8017afe:	f043 0320 	orr.w	r3, r3, #32
 8017b02:	b2da      	uxtb	r2, r3
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	729a      	strb	r2, [r3, #10]
 8017b08:	e091      	b.n	8017c2e <phpalSli15693_Sw_SendEof+0x3a6>
    }
    else if (bOption == PHPAL_SLI15693_EOF_NEXT_SLOT_INV_READ)
 8017b0a:	7afb      	ldrb	r3, [r7, #11]
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	f040 8088 	bne.w	8017c22 <phpalSli15693_Sw_SendEof+0x39a>
    {
        /* ignore flag byte */
        ++pResp;
 8017b12:	697b      	ldr	r3, [r7, #20]
 8017b14:	3301      	adds	r3, #1
 8017b16:	617b      	str	r3, [r7, #20]
        --wRespLength;
 8017b18:	8a7b      	ldrh	r3, [r7, #18]
 8017b1a:	3b01      	subs	r3, #1
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	827b      	strh	r3, [r7, #18]

        /* Option flag is set -> we also received (partial) UID */
        if (0U != (pDataParams->bFlags & PHPAL_SLI15693_FLAG_OPTION))
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	7a9b      	ldrb	r3, [r3, #10]
 8017b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d05b      	beq.n	8017be4 <phpalSli15693_Sw_SendEof+0x35c>
        {
            /* The response length should not be less than the remaining UID */
            bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	7d1b      	ldrb	r3, [r3, #20]
 8017b30:	08db      	lsrs	r3, r3, #3
 8017b32:	767b      	strb	r3, [r7, #25]
            *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8017b34:	7e7b      	ldrb	r3, [r7, #25]
 8017b36:	f1c3 0308 	rsb	r3, r3, #8
 8017b3a:	b2da      	uxtb	r2, r3
 8017b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b3e:	701a      	strb	r2, [r3, #0]
            if (wRespLength < *pUidLength)
 8017b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b42:	781b      	ldrb	r3, [r3, #0]
 8017b44:	461a      	mov	r2, r3
 8017b46:	8a7b      	ldrh	r3, [r7, #18]
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d902      	bls.n	8017b52 <phpalSli15693_Sw_SendEof+0x2ca>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017b4c:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017b50:	e06e      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
            }

            if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8017b52:	7e7b      	ldrb	r3, [r7, #25]
 8017b54:	2b07      	cmp	r3, #7
 8017b56:	d837      	bhi.n	8017bc8 <phpalSli15693_Sw_SendEof+0x340>
            {
                /* We need to merge the contents of the mask buffer and the received data */
                if (0U != (pDataParams->bUidBitLength % 8U))
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	7d1b      	ldrb	r3, [r3, #20]
 8017b5c:	f003 0307 	and.w	r3, r3, #7
 8017b60:	b2db      	uxtb	r3, r3
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d01e      	beq.n	8017ba4 <phpalSli15693_Sw_SendEof+0x31c>
                {
                    if (bStoredUidLength < 7U)
 8017b66:	7e7b      	ldrb	r3, [r7, #25]
 8017b68:	2b06      	cmp	r3, #6
 8017b6a:	d80d      	bhi.n	8017b88 <phpalSli15693_Sw_SendEof+0x300>
                    {
                        /* copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], ((uint32_t)(*pUidLength)-1U));
 8017b6c:	7e7b      	ldrb	r3, [r7, #25]
 8017b6e:	3301      	adds	r3, #1
 8017b70:	3308      	adds	r3, #8
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	4413      	add	r3, r2
 8017b76:	1d18      	adds	r0, r3, #4
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	1c59      	adds	r1, r3, #1
 8017b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	3b01      	subs	r3, #1
 8017b82:	461a      	mov	r2, r3
 8017b84:	f007 fa4f 	bl	801f026 <memcpy>
                    }

                    /* merge mask-bits with received bits */
                    pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8017b88:	7e7b      	ldrb	r3, [r7, #25]
 8017b8a:	68fa      	ldr	r2, [r7, #12]
 8017b8c:	4413      	add	r3, r2
 8017b8e:	7b19      	ldrb	r1, [r3, #12]
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	781a      	ldrb	r2, [r3, #0]
 8017b94:	7e7b      	ldrb	r3, [r7, #25]
 8017b96:	430a      	orrs	r2, r1
 8017b98:	b2d1      	uxtb	r1, r2
 8017b9a:	68fa      	ldr	r2, [r7, #12]
 8017b9c:	4413      	add	r3, r2
 8017b9e:	460a      	mov	r2, r1
 8017ba0:	731a      	strb	r2, [r3, #12]
 8017ba2:	e00a      	b.n	8017bba <phpalSli15693_Sw_SendEof+0x332>
                }
                else
                {
                    /* copy the UID bytes we received from the card */
                    (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8017ba4:	7e7b      	ldrb	r3, [r7, #25]
 8017ba6:	3308      	adds	r3, #8
 8017ba8:	68fa      	ldr	r2, [r7, #12]
 8017baa:	4413      	add	r3, r2
 8017bac:	1d18      	adds	r0, r3, #4
 8017bae:	6979      	ldr	r1, [r7, #20]
 8017bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bb2:	781b      	ldrb	r3, [r3, #0]
 8017bb4:	461a      	mov	r2, r3
 8017bb6:	f007 fa36 	bl	801f026 <memcpy>
                }

                /* Return the received (partial) UID */
                (void)memcpy(pUid, pResp, *pUidLength);
 8017bba:	6979      	ldr	r1, [r7, #20]
 8017bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bbe:	781b      	ldrb	r3, [r3, #0]
 8017bc0:	461a      	mov	r2, r3
 8017bc2:	6838      	ldr	r0, [r7, #0]
 8017bc4:	f007 fa2f 	bl	801f026 <memcpy>
            }

            /* UID is now complete */
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	2240      	movs	r2, #64	@ 0x40
 8017bcc:	751a      	strb	r2, [r3, #20]

            /* shift pointer and length */
            pResp += *pUidLength;
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017bd2:	7812      	ldrb	r2, [r2, #0]
 8017bd4:	4413      	add	r3, r2
 8017bd6:	617b      	str	r3, [r7, #20]
            wRespLength = wRespLength - *pUidLength;
 8017bd8:	8a7b      	ldrh	r3, [r7, #18]
 8017bda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017bdc:	7812      	ldrb	r2, [r2, #0]
 8017bde:	1a9b      	subs	r3, r3, r2
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	827b      	strh	r3, [r7, #18]
        }

        /* copy the received data to the provided buffer */
        (void)memcpy(pData, pResp, wRespLength);
 8017be4:	697b      	ldr	r3, [r7, #20]
 8017be6:	8a7a      	ldrh	r2, [r7, #18]
 8017be8:	4619      	mov	r1, r3
 8017bea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017bec:	f007 fa1b 	bl	801f026 <memcpy>

        /* the remaining bytes of the response are the data bytes */
        *pDataLength = wRespLength;
 8017bf0:	8a7a      	ldrh	r2, [r7, #18]
 8017bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bf4:	801a      	strh	r2, [r3, #0]

        /* set addressed flag */
        pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	7a9b      	ldrb	r3, [r3, #10]
 8017bfa:	f043 0320 	orr.w	r3, r3, #32
 8017bfe:	b2da      	uxtb	r2, r3
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	729a      	strb	r2, [r3, #10]

        /* wait T2 */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Wait(
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8017c0c:	2100      	movs	r1, #0
 8017c0e:	4618      	mov	r0, r3
 8017c10:	f7f6 fba6 	bl	800e360 <phhalHw_Pn5180_Wait>
 8017c14:	4603      	mov	r3, r0
 8017c16:	83bb      	strh	r3, [r7, #28]
 8017c18:	8bbb      	ldrh	r3, [r7, #28]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d007      	beq.n	8017c2e <phpalSli15693_Sw_SendEof+0x3a6>
 8017c1e:	8bbb      	ldrh	r3, [r7, #28]
 8017c20:	e006      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
            PHPAL_SLI15693_SW_T2_WAITING_TIME));
    }
    else
    {
        /* 1 byte is only returned on a eof for a write alike command. */
        if (wRespLength != 1U)
 8017c22:	8a7b      	ldrh	r3, [r7, #18]
 8017c24:	2b01      	cmp	r3, #1
 8017c26:	d002      	beq.n	8017c2e <phpalSli15693_Sw_SendEof+0x3a6>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017c28:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017c2c:	e000      	b.n	8017c30 <phpalSli15693_Sw_SendEof+0x3a8>
        }
    }

    return PH_ERR_SUCCESS;
 8017c2e:	2300      	movs	r3, #0
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3720      	adds	r7, #32
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}

08017c38 <phpalSli15693_Sw_Select>:
}

phStatus_t phpalSli15693_Sw_Select(
                                   phpalSli15693_Sw_DataParams_t * pDataParams
                                   )
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b088      	sub	sp, #32
 8017c3c:	af02      	add	r7, sp, #8
 8017c3e:	6078      	str	r0, [r7, #4]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM aCmd[1];
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 8017c40:	2300      	movs	r3, #0
 8017c42:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 8017c44:	2300      	movs	r3, #0
 8017c46:	81fb      	strh	r3, [r7, #14]

    /* clear selected flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_SELECTED;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	7a9b      	ldrb	r3, [r3, #10]
 8017c4c:	f023 0310 	bic.w	r3, r3, #16
 8017c50:	b2da      	uxtb	r2, r3
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	729a      	strb	r2, [r3, #10]

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	7a9b      	ldrb	r3, [r3, #10]
 8017c5a:	f043 0320 	orr.w	r3, r3, #32
 8017c5e:	b2da      	uxtb	r2, r3
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	729a      	strb	r2, [r3, #10]

    /* reset to ready command */
    aCmd[0] = PHPAL_SLI15693_SW_CMD_SELECT;
 8017c64:	2325      	movs	r3, #37	@ 0x25
 8017c66:	753b      	strb	r3, [r7, #20]

    /* Set short timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 8017c68:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8017c6c:	2102      	movs	r1, #2
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f000 f966 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 8017c74:	4603      	mov	r3, r0
 8017c76:	82fb      	strh	r3, [r7, #22]
 8017c78:	8afb      	ldrh	r3, [r7, #22]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d001      	beq.n	8017c82 <phpalSli15693_Sw_Select+0x4a>
 8017c7e:	8afb      	ldrh	r3, [r7, #22]
 8017c80:	e028      	b.n	8017cd4 <phpalSli15693_Sw_Select+0x9c>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        PHPAL_SLI15693_TIMEOUT_SHORT_US));

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_Exchange(
 8017c82:	f107 0214 	add.w	r2, r7, #20
 8017c86:	f107 030e 	add.w	r3, r7, #14
 8017c8a:	9301      	str	r3, [sp, #4]
 8017c8c:	f107 0310 	add.w	r3, r7, #16
 8017c90:	9300      	str	r3, [sp, #0]
 8017c92:	2301      	movs	r3, #1
 8017c94:	2100      	movs	r1, #0
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f000 f820 	bl	8017cdc <phpalSli15693_Sw_Exchange>
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	82fb      	strh	r3, [r7, #22]
 8017ca0:	8afb      	ldrh	r3, [r7, #22]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <phpalSli15693_Sw_Select+0x72>
 8017ca6:	8afb      	ldrh	r3, [r7, #22]
 8017ca8:	e014      	b.n	8017cd4 <phpalSli15693_Sw_Select+0x9c>
        1,
        &pResp,
        &wRespLength));

    /* We shall not receive any data */
    if (wRespLength != 0U)
 8017caa:	89fb      	ldrh	r3, [r7, #14]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d002      	beq.n	8017cb6 <phpalSli15693_Sw_Select+0x7e>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017cb0:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017cb4:	e00e      	b.n	8017cd4 <phpalSli15693_Sw_Select+0x9c>
    }

    /* clear addressed flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)PHPAL_SLI15693_FLAG_ADDRESSED;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	7a9b      	ldrb	r3, [r3, #10]
 8017cba:	f023 0320 	bic.w	r3, r3, #32
 8017cbe:	b2da      	uxtb	r2, r3
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	729a      	strb	r2, [r3, #10]

    /* set selected flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_SELECTED;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	7a9b      	ldrb	r3, [r3, #10]
 8017cc8:	f043 0310 	orr.w	r3, r3, #16
 8017ccc:	b2da      	uxtb	r2, r3
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8017cd2:	2300      	movs	r3, #0
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3718      	adds	r7, #24
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <phpalSli15693_Sw_Exchange>:
                                     uint8_t * pTxBuffer,
                                     uint16_t wTxLength,
                                     uint8_t ** ppRxBuffer,
                                     uint16_t * pRxLength
                                     )
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b08a      	sub	sp, #40	@ 0x28
 8017ce0:	af02      	add	r7, sp, #8
 8017ce2:	60f8      	str	r0, [r7, #12]
 8017ce4:	607a      	str	r2, [r7, #4]
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	460b      	mov	r3, r1
 8017cea:	817b      	strh	r3, [r7, #10]
 8017cec:	4613      	mov	r3, r2
 8017cee:	813b      	strh	r3, [r7, #8]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bFirstBlock[3];
    uint16_t    PH_MEMLOC_REM wTransmitLength = 0;
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	83fb      	strh	r3, [r7, #30]
    uint16_t    PH_MEMLOC_REM RxLength;
    uint8_t *   PH_MEMLOC_REM pRxBuffer = NULL;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	613b      	str	r3, [r7, #16]
    /* the frame to exchange looks like the following:
    {optional} [one byte]
    [flags][CMD]{[MFC]}{[UID0] .. [UID3]}[CMDParam(0)] .. [CMDParam(N)] */

    /* Check for valid UID in addressed mode */
    if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	7a9b      	ldrb	r3, [r3, #10]
 8017cfc:	f003 0304 	and.w	r3, r3, #4
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d10c      	bne.n	8017d1e <phpalSli15693_Sw_Exchange+0x42>
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	7a9b      	ldrb	r3, [r3, #10]
 8017d08:	f003 0320 	and.w	r3, r3, #32
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d006      	beq.n	8017d1e <phpalSli15693_Sw_Exchange+0x42>
    {
        /* Return an error if UID is not valid */
        if (pDataParams->bUidBitLength != PHPAL_SLI15693_SW_UID_COMPLETE)
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	7d1b      	ldrb	r3, [r3, #20]
 8017d14:	2b40      	cmp	r3, #64	@ 0x40
 8017d16:	d002      	beq.n	8017d1e <phpalSli15693_Sw_Exchange+0x42>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_USE_CONDITION, PH_COMP_PAL_SLI15693);
 8017d18:	f640 2325 	movw	r3, #2597	@ 0xa25
 8017d1c:	e0f0      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>
        }
    }

    /* Check if caller has provided valid RxBuffer */
    if (ppRxBuffer == NULL)
 8017d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d102      	bne.n	8017d2a <phpalSli15693_Sw_Exchange+0x4e>
    {
        ppRxBuffer = &pRxBuffer;
 8017d24:	f107 0310 	add.w	r3, r7, #16
 8017d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (pRxLength == NULL)
 8017d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d102      	bne.n	8017d36 <phpalSli15693_Sw_Exchange+0x5a>
    {
        pRxLength = &RxLength;
 8017d30:	f107 0316 	add.w	r3, r7, #22
 8017d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if ((0U == ((wOption & PH_EXCHANGE_LEAVE_BUFFER_BIT))))
 8017d36:	897b      	ldrh	r3, [r7, #10]
 8017d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	f040 8086 	bne.w	8017e4e <phpalSli15693_Sw_Exchange+0x172>
    {
        /* This is the first chunk of a command frame. Add the Flags byte and ... */
        bFirstBlock[wTransmitLength++] = pDataParams->bFlags;
 8017d42:	8bfb      	ldrh	r3, [r7, #30]
 8017d44:	1c5a      	adds	r2, r3, #1
 8017d46:	83fa      	strh	r2, [r7, #30]
 8017d48:	4619      	mov	r1, r3
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	7a9a      	ldrb	r2, [r3, #10]
 8017d4e:	f101 0320 	add.w	r3, r1, #32
 8017d52:	443b      	add	r3, r7
 8017d54:	f803 2c08 	strb.w	r2, [r3, #-8]
        bFirstBlock[wTransmitLength++] = pTxBuffer[0];
 8017d58:	8bfb      	ldrh	r3, [r7, #30]
 8017d5a:	1c5a      	adds	r2, r3, #1
 8017d5c:	83fa      	strh	r2, [r7, #30]
 8017d5e:	4619      	mov	r1, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	781a      	ldrb	r2, [r3, #0]
 8017d64:	f101 0320 	add.w	r3, r1, #32
 8017d68:	443b      	add	r3, r7
 8017d6a:	f803 2c08 	strb.w	r2, [r3, #-8]

        /* add MFC byte for custom commands */
        if ((pTxBuffer[0] > PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_BEGIN) && (pTxBuffer[0] < PHPAL_SLI15693_SW_CUSTOM_CMD_CODE_END))
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	781b      	ldrb	r3, [r3, #0]
 8017d72:	2b9f      	cmp	r3, #159	@ 0x9f
 8017d74:	d90f      	bls.n	8017d96 <phpalSli15693_Sw_Exchange+0xba>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	2bdf      	cmp	r3, #223	@ 0xdf
 8017d7c:	d80b      	bhi.n	8017d96 <phpalSli15693_Sw_Exchange+0xba>
        {
            /* if no serial number is valid we assume that we use only NXP tags. */
            bFirstBlock[wTransmitLength++] = pDataParams->bIcMfgCode;
 8017d7e:	8bfb      	ldrh	r3, [r7, #30]
 8017d80:	1c5a      	adds	r2, r3, #1
 8017d82:	83fa      	strh	r2, [r7, #30]
 8017d84:	4619      	mov	r1, r3
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	7e5a      	ldrb	r2, [r3, #25]
 8017d8a:	f101 0320 	add.w	r3, r1, #32
 8017d8e:	443b      	add	r3, r7
 8017d90:	f803 2c08 	strb.w	r2, [r3, #-8]
 8017d94:	e017      	b.n	8017dc6 <phpalSli15693_Sw_Exchange+0xea>
        }
        else
        {
            if((pTxBuffer[0] == PHPAL_SLI15693_SW_CMD_EXTENDED_GET_SYSTEM_INFORMATION)
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	781b      	ldrb	r3, [r3, #0]
 8017d9a:	2b3b      	cmp	r3, #59	@ 0x3b
 8017d9c:	d113      	bne.n	8017dc6 <phpalSli15693_Sw_Exchange+0xea>
               && (wTxLength > 1U))
 8017d9e:	893b      	ldrh	r3, [r7, #8]
 8017da0:	2b01      	cmp	r3, #1
 8017da2:	d910      	bls.n	8017dc6 <phpalSli15693_Sw_Exchange+0xea>
                *  UID from 3rd Byte whereas rest other commands take UID from 2nd Byte
                *  SOF + FLAGS + COMMAND CODE +  INFO FLAGS  + UID  + CRC + EOF.
                */

               /* Copy Info Flags */
               bFirstBlock[wTransmitLength++] = pTxBuffer[1];
 8017da4:	8bfb      	ldrh	r3, [r7, #30]
 8017da6:	1c5a      	adds	r2, r3, #1
 8017da8:	83fa      	strh	r2, [r7, #30]
 8017daa:	4619      	mov	r1, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	785a      	ldrb	r2, [r3, #1]
 8017db0:	f101 0320 	add.w	r3, r1, #32
 8017db4:	443b      	add	r3, r7
 8017db6:	f803 2c08 	strb.w	r2, [r3, #-8]

               /* First byte was the command byte */
               ++pTxBuffer;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	607b      	str	r3, [r7, #4]
               --wTxLength;
 8017dc0:	893b      	ldrh	r3, [r7, #8]
 8017dc2:	3b01      	subs	r3, #1
 8017dc4:	813b      	strh	r3, [r7, #8]
           }
        }

        /* Exchange command */
        /* clear buffer but do not send */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	6858      	ldr	r0, [r3, #4]
 8017dca:	8bf9      	ldrh	r1, [r7, #30]
 8017dcc:	f107 0218 	add.w	r2, r7, #24
 8017dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dd2:	9301      	str	r3, [sp, #4]
 8017dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dd6:	9300      	str	r3, [sp, #0]
 8017dd8:	460b      	mov	r3, r1
 8017dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8017dde:	f7f5 ffc3 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8017de2:	4603      	mov	r3, r0
 8017de4:	83bb      	strh	r3, [r7, #28]
 8017de6:	8bbb      	ldrh	r3, [r7, #28]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d001      	beq.n	8017df0 <phpalSli15693_Sw_Exchange+0x114>
 8017dec:	8bbb      	ldrh	r3, [r7, #28]
 8017dee:	e087      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>

        /* First set of TxBuffer contains
         *  1. command code + Info Bytes
         *  2. command Code
         */
        ++pTxBuffer;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	3301      	adds	r3, #1
 8017df4:	607b      	str	r3, [r7, #4]
        --wTxLength;
 8017df6:	893b      	ldrh	r3, [r7, #8]
 8017df8:	3b01      	subs	r3, #1
 8017dfa:	813b      	strh	r3, [r7, #8]

        /* If we are not waiting any more we can transmit the UID bytes, if necessary. */
        if ((0U == ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY))) && (0U != ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED))))
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	7a9b      	ldrb	r3, [r3, #10]
 8017e00:	f003 0304 	and.w	r3, r3, #4
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d11e      	bne.n	8017e46 <phpalSli15693_Sw_Exchange+0x16a>
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	7a9b      	ldrb	r3, [r3, #10]
 8017e0c:	f003 0320 	and.w	r3, r3, #32
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d018      	beq.n	8017e46 <phpalSli15693_Sw_Exchange+0x16a>
        {
            if(0U == (pDataParams->bExplicitlyAddressed))
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	7d5b      	ldrb	r3, [r3, #21]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d114      	bne.n	8017e46 <phpalSli15693_Sw_Exchange+0x16a>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	6858      	ldr	r0, [r3, #4]
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	f103 020c 	add.w	r2, r3, #12
 8017e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e28:	9301      	str	r3, [sp, #4]
 8017e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e2c:	9300      	str	r3, [sp, #0]
 8017e2e:	2308      	movs	r3, #8
 8017e30:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8017e34:	f7f5 ff98 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	83bb      	strh	r3, [r7, #28]
 8017e3c:	8bbb      	ldrh	r3, [r7, #28]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d001      	beq.n	8017e46 <phpalSli15693_Sw_Exchange+0x16a>
 8017e42:	8bbb      	ldrh	r3, [r7, #28]
 8017e44:	e05c      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>
                    pRxLength));
            }
        }

        /* Now we need to keep our buffered contents */
        wOption |= PH_EXCHANGE_LEAVE_BUFFER_BIT;
 8017e46:	897b      	ldrh	r3, [r7, #10]
 8017e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017e4c:	817b      	strh	r3, [r7, #10]
    }

    /* Exchange command */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_Exchange(
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	6858      	ldr	r0, [r3, #4]
 8017e52:	893a      	ldrh	r2, [r7, #8]
 8017e54:	8979      	ldrh	r1, [r7, #10]
 8017e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e58:	9301      	str	r3, [sp, #4]
 8017e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e5c:	9300      	str	r3, [sp, #0]
 8017e5e:	4613      	mov	r3, r2
 8017e60:	687a      	ldr	r2, [r7, #4]
 8017e62:	f7f5 ff81 	bl	800dd68 <phhalHw_Pn5180_Exchange>
 8017e66:	4603      	mov	r3, r0
 8017e68:	83bb      	strh	r3, [r7, #28]
 8017e6a:	8bbb      	ldrh	r3, [r7, #28]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d001      	beq.n	8017e74 <phpalSli15693_Sw_Exchange+0x198>
 8017e70:	8bbb      	ldrh	r3, [r7, #28]
 8017e72:	e045      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>
        ppRxBuffer,
        pRxLength));

    /* If this was the last (or only) chunk, we shoult have received a response,
    so we extract the Flags byte and check the status */
    if ((0U == ((wOption & PH_EXCHANGE_BUFFERED_BIT))))
 8017e74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	db40      	blt.n	8017efe <phpalSli15693_Sw_Exchange+0x222>
    {
        /* First Check RespLength*/
        if (*pRxLength == 0U)
 8017e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e7e:	881b      	ldrh	r3, [r3, #0]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d102      	bne.n	8017e8a <phpalSli15693_Sw_Exchange+0x1ae>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017e84:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017e88:	e03a      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>
        }

        /*check error flag*/
        pDataParams->bResFlags = 0;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	72da      	strb	r2, [r3, #11]
        if (0U != ((*ppRxBuffer[0]) & PHPAL_SLI15693_FLAG_RESP_ERROR))
 8017e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	f003 0301 	and.w	r3, r3, #1
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d019      	beq.n	8017ed2 <phpalSli15693_Sw_Exchange+0x1f6>
        {
            pDataParams->bResFlags = PHPAL_SLI15693_FLAG_RESP_ERROR;
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	2201      	movs	r2, #1
 8017ea2:	72da      	strb	r2, [r3, #11]

            /* check the length in case of error */
            if (*pRxLength != 2U)
 8017ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ea6:	881b      	ldrh	r3, [r3, #0]
 8017ea8:	2b02      	cmp	r3, #2
 8017eaa:	d002      	beq.n	8017eb2 <phpalSli15693_Sw_Exchange+0x1d6>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8017eac:	f640 2306 	movw	r3, #2566	@ 0xa06
 8017eb0:	e026      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>
            }

            /* Copy error code to additional info */
            pDataParams->wAdditionalInfo = (*ppRxBuffer)[1];
 8017eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	781b      	ldrb	r3, [r3, #0]
 8017eba:	461a      	mov	r2, r3
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	811a      	strh	r2, [r3, #8]

            /* Return empty receive buffer */
            *ppRxBuffer = NULL;
 8017ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	601a      	str	r2, [r3, #0]
            *pRxLength = 0;
 8017ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ec8:	2200      	movs	r2, #0
 8017eca:	801a      	strh	r2, [r3, #0]

            return PH_ADD_COMPCODE_FIXED(PHPAL_SLI15693_ERR_ISO15693, PH_COMP_PAL_SLI15693);
 8017ecc:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8017ed0:	e016      	b.n	8017f00 <phpalSli15693_Sw_Exchange+0x224>
        }

        /* Copy response flag to additional info */
        pDataParams->wAdditionalInfo = (*ppRxBuffer)[0];
 8017ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	461a      	mov	r2, r3
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	811a      	strh	r2, [r3, #8]
        pDataParams->bResFlags = (*ppRxBuffer)[0];
 8017ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	781a      	ldrb	r2, [r3, #0]
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	72da      	strb	r2, [r3, #11]

        /* adjust pointer and length */
        ++(*ppRxBuffer);
 8017ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	1c5a      	adds	r2, r3, #1
 8017eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef0:	601a      	str	r2, [r3, #0]
        --(*pRxLength);
 8017ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ef4:	881b      	ldrh	r3, [r3, #0]
 8017ef6:	3b01      	subs	r3, #1
 8017ef8:	b29a      	uxth	r2, r3
 8017efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017efc:	801a      	strh	r2, [r3, #0]
    }

    return PH_ERR_SUCCESS;
 8017efe:	2300      	movs	r3, #0
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	3720      	adds	r7, #32
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <phpalSli15693_Sw_SetSerialNo>:
phStatus_t phpalSli15693_Sw_SetSerialNo(
                                        phpalSli15693_Sw_DataParams_t * pDataParams,
                                        uint8_t * pUid,
                                        uint8_t bUidLength
                                        )
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	4613      	mov	r3, r2
 8017f14:	71fb      	strb	r3, [r7, #7]
    /* Check for valid UID length */
    if(bUidLength != PHPAL_SLI15693_UID_LENGTH)
 8017f16:	79fb      	ldrb	r3, [r7, #7]
 8017f18:	2b08      	cmp	r3, #8
 8017f1a:	d002      	beq.n	8017f22 <phpalSli15693_Sw_SetSerialNo+0x1a>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8017f1c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8017f20:	e00a      	b.n	8017f38 <phpalSli15693_Sw_SetSerialNo+0x30>
    }

    /* Copy UID and UID length */
    (void)memcpy(pDataParams->pUid, pUid, PHPAL_SLI15693_UID_LENGTH);
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	330c      	adds	r3, #12
 8017f26:	2208      	movs	r2, #8
 8017f28:	68b9      	ldr	r1, [r7, #8]
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f007 f87b 	bl	801f026 <memcpy>
    pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	2240      	movs	r2, #64	@ 0x40
 8017f34:	751a      	strb	r2, [r3, #20]

    return PH_ERR_SUCCESS;
 8017f36:	2300      	movs	r3, #0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <phpalSli15693_Sw_SetConfig>:
phStatus_t phpalSli15693_Sw_SetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t wValue
                                      )
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	460b      	mov	r3, r1
 8017f4a:	807b      	strh	r3, [r7, #2]
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	803b      	strh	r3, [r7, #0]
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint16_t    PH_MEMLOC_REM wValueOld;

    switch (wConfig)
 8017f50:	887b      	ldrh	r3, [r7, #2]
 8017f52:	2b0a      	cmp	r3, #10
 8017f54:	f200 81b9 	bhi.w	80182ca <phpalSli15693_Sw_SetConfig+0x38a>
 8017f58:	a201      	add	r2, pc, #4	@ (adr r2, 8017f60 <phpalSli15693_Sw_SetConfig+0x20>)
 8017f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f5e:	bf00      	nop
 8017f60:	08017f8d 	.word	0x08017f8d
 8017f64:	080182cb 	.word	0x080182cb
 8017f68:	0801808b 	.word	0x0801808b
 8017f6c:	080180f7 	.word	0x080180f7
 8017f70:	080181c3 	.word	0x080181c3
 8017f74:	08018237 	.word	0x08018237
 8017f78:	0801813d 	.word	0x0801813d
 8017f7c:	080181b9 	.word	0x080181b9
 8017f80:	0801829f 	.word	0x0801829f
 8017f84:	080182b7 	.word	0x080182b7
 8017f88:	080182c1 	.word	0x080182c1
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:

        /* Retrieve current subcarrier setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	f107 020c 	add.w	r2, r7, #12
 8017f94:	210f      	movs	r1, #15
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7f7 feec 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	81fb      	strh	r3, [r7, #14]
 8017fa0:	89fb      	ldrh	r3, [r7, #14]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d001      	beq.n	8017faa <phpalSli15693_Sw_SetConfig+0x6a>
 8017fa6:	89fb      	ldrh	r3, [r7, #14]
 8017fa8:	e19c      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_SUBCARRIER,
            &wValueOld));

        /* Set dual subcarrier if HAL is not already configured for it */
        if (0U != (wValue & PHPAL_SLI15693_FLAG_TWO_SUB_CARRIERS))
 8017faa:	883b      	ldrh	r3, [r7, #0]
 8017fac:	f003 0301 	and.w	r3, r3, #1
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d017      	beq.n	8017fe4 <phpalSli15693_Sw_SetConfig+0xa4>
        {
            /* NFC mode supports only single sub-carrier mode */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	7d9b      	ldrb	r3, [r3, #22]
 8017fb8:	2b02      	cmp	r3, #2
 8017fba:	d102      	bne.n	8017fc2 <phpalSli15693_Sw_SetConfig+0x82>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8017fbc:	f640 2321 	movw	r3, #2593	@ 0xa21
 8017fc0:	e190      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_SUBCARRIER_DUAL)
 8017fc2:	89bb      	ldrh	r3, [r7, #12]
 8017fc4:	2b01      	cmp	r3, #1
 8017fc6:	d01e      	beq.n	8018006 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	685b      	ldr	r3, [r3, #4]
 8017fcc:	2201      	movs	r2, #1
 8017fce:	210f      	movs	r1, #15
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7f6 fa81 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	81fb      	strh	r3, [r7, #14]
 8017fda:	89fb      	ldrh	r3, [r7, #14]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d012      	beq.n	8018006 <phpalSli15693_Sw_SetConfig+0xc6>
 8017fe0:	89fb      	ldrh	r3, [r7, #14]
 8017fe2:	e17f      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
        }
        /* Set single subcarrier if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_SUBCARRIER_SINGLE)
 8017fe4:	89bb      	ldrh	r3, [r7, #12]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00d      	beq.n	8018006 <phpalSli15693_Sw_SetConfig+0xc6>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	685b      	ldr	r3, [r3, #4]
 8017fee:	2200      	movs	r2, #0
 8017ff0:	210f      	movs	r1, #15
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7f6 fa70 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	81fb      	strh	r3, [r7, #14]
 8017ffc:	89fb      	ldrh	r3, [r7, #14]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d001      	beq.n	8018006 <phpalSli15693_Sw_SetConfig+0xc6>
 8018002:	89fb      	ldrh	r3, [r7, #14]
 8018004:	e16e      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_SUBCARRIER_SINGLE));
            }
        }

        /* Retrieve current datarate setting */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	f107 020c 	add.w	r2, r7, #12
 801800e:	210a      	movs	r1, #10
 8018010:	4618      	mov	r0, r3
 8018012:	f7f7 feaf 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8018016:	4603      	mov	r3, r0
 8018018:	81fb      	strh	r3, [r7, #14]
 801801a:	89fb      	ldrh	r3, [r7, #14]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d001      	beq.n	8018024 <phpalSli15693_Sw_SetConfig+0xe4>
 8018020:	89fb      	ldrh	r3, [r7, #14]
 8018022:	e15f      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            &wValueOld));

        /* Set low data rate if HAL is not already configured for it */
        if (0U == (wValue & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018024:	883b      	ldrh	r3, [r7, #0]
 8018026:	f003 0302 	and.w	r3, r3, #2
 801802a:	2b00      	cmp	r3, #0
 801802c:	d117      	bne.n	801805e <phpalSli15693_Sw_SetConfig+0x11e>
        {
            /* NFC mode supports only HIGH Data Rate */
            if(pDataParams->bOpeMode == RD_LIB_MODE_NFC)
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	7d9b      	ldrb	r3, [r3, #22]
 8018032:	2b02      	cmp	r3, #2
 8018034:	d102      	bne.n	801803c <phpalSli15693_Sw_SetConfig+0xfc>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8018036:	f640 2321 	movw	r3, #2593	@ 0xa21
 801803a:	e153      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }

            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_LOW)
 801803c:	89bb      	ldrh	r3, [r7, #12]
 801803e:	2b0c      	cmp	r3, #12
 8018040:	d01e      	beq.n	8018080 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	685b      	ldr	r3, [r3, #4]
 8018046:	220c      	movs	r2, #12
 8018048:	210a      	movs	r1, #10
 801804a:	4618      	mov	r0, r3
 801804c:	f7f6 fa44 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8018050:	4603      	mov	r3, r0
 8018052:	81fb      	strh	r3, [r7, #14]
 8018054:	89fb      	ldrh	r3, [r7, #14]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d012      	beq.n	8018080 <phpalSli15693_Sw_SetConfig+0x140>
 801805a:	89fb      	ldrh	r3, [r7, #14]
 801805c:	e142      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>

        }
        /* Set high data rate if HAL is not already configured for it */
        else
        {
            if (wValueOld != PHHAL_HW_RF_RX_DATARATE_HIGH)
 801805e:	89bb      	ldrh	r3, [r7, #12]
 8018060:	2b0d      	cmp	r3, #13
 8018062:	d00d      	beq.n	8018080 <phpalSli15693_Sw_SetConfig+0x140>
            {
                PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	685b      	ldr	r3, [r3, #4]
 8018068:	220d      	movs	r2, #13
 801806a:	210a      	movs	r1, #10
 801806c:	4618      	mov	r0, r3
 801806e:	f7f6 fa33 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8018072:	4603      	mov	r3, r0
 8018074:	81fb      	strh	r3, [r7, #14]
 8018076:	89fb      	ldrh	r3, [r7, #14]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d001      	beq.n	8018080 <phpalSli15693_Sw_SetConfig+0x140>
 801807c:	89fb      	ldrh	r3, [r7, #14]
 801807e:	e131      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
                    PHHAL_HW_RF_RX_DATARATE_HIGH));
            }
        }

        /* retrieve flags */
        pDataParams->bFlags = (uint8_t)wValue;
 8018080:	883b      	ldrh	r3, [r7, #0]
 8018082:	b2da      	uxtb	r2, r3
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	729a      	strb	r2, [r3, #10]

        break;
 8018088:	e12b      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:

        if (((uint32_t)wValue + PHPAL_SLI15693_SW_EXT_TIME_US) > 0xFFFFU)
 801808a:	883b      	ldrh	r3, [r7, #0]
 801808c:	333c      	adds	r3, #60	@ 0x3c
 801808e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018092:	d302      	bcc.n	801809a <phpalSli15693_Sw_SetConfig+0x15a>
        {
            /* Return error */
            /* Maximum allowed value is 0xFFC3 (0xFFFF - PHPAL_SLI15693_SW_EXT_TIME_US) */
            return PH_ADD_COMPCODE_FIXED(PH_ERR_PARAMETER_OVERFLOW, PH_COMP_PAL_SLI15693);
 8018094:	f640 2322 	movw	r3, #2594	@ 0xa22
 8018098:	e124      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Extend timeout a little */
        wValue += PHPAL_SLI15693_SW_EXT_TIME_US;
 801809a:	883b      	ldrh	r3, [r7, #0]
 801809c:	333c      	adds	r3, #60	@ 0x3c
 801809e:	803b      	strh	r3, [r7, #0]

        /* Retrieve current timeout */
        statusTmp = phhalHw_GetConfig(
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	685b      	ldr	r3, [r3, #4]
 80180a4:	f107 020c 	add.w	r2, r7, #12
 80180a8:	210d      	movs	r1, #13
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7f7 fe62 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80180b0:	4603      	mov	r3, r0
 80180b2:	81fb      	strh	r3, [r7, #14]
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld);

        /* Set the new timeout */
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 80180b4:	89fb      	ldrh	r3, [r7, #14]
 80180b6:	b2db      	uxtb	r3, r3
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d103      	bne.n	80180c4 <phpalSli15693_Sw_SetConfig+0x184>
 80180bc:	89bb      	ldrh	r3, [r7, #12]
 80180be:	883a      	ldrh	r2, [r7, #0]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d103      	bne.n	80180cc <phpalSli15693_Sw_SetConfig+0x18c>
            ((statusTmp & PH_ERR_MASK) == PH_ERR_PARAMETER_OVERFLOW))
 80180c4:	89fb      	ldrh	r3, [r7, #14]
 80180c6:	b2db      	uxtb	r3, r3
        if ((((statusTmp & PH_ERR_MASK) == PH_ERR_SUCCESS) && (wValue != wValueOld)) ||
 80180c8:	2b22      	cmp	r3, #34	@ 0x22
 80180ca:	d10d      	bne.n	80180e8 <phpalSli15693_Sw_SetConfig+0x1a8>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	685b      	ldr	r3, [r3, #4]
 80180d0:	883a      	ldrh	r2, [r7, #0]
 80180d2:	210d      	movs	r1, #13
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7f6 f9ff 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80180da:	4603      	mov	r3, r0
 80180dc:	81fb      	strh	r3, [r7, #14]
 80180de:	89fb      	ldrh	r3, [r7, #14]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d007      	beq.n	80180f4 <phpalSli15693_Sw_SetConfig+0x1b4>
 80180e4:	89fb      	ldrh	r3, [r7, #14]
 80180e6:	e0fd      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        else
        {
            /* Return error if the error is other than PH_ERR_PARAMETER_OVERFLOW */
            PH_CHECK_SUCCESS(statusTmp);
 80180e8:	89fb      	ldrh	r3, [r7, #14]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	f000 80f0 	beq.w	80182d0 <phpalSli15693_Sw_SetConfig+0x390>
 80180f0:	89fb      	ldrh	r3, [r7, #14]
 80180f2:	e0f7      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;
 80180f4:	e0ec      	b.n	80182d0 <phpalSli15693_Sw_SetConfig+0x390>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:

        /* Retrieve current timeout */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	685b      	ldr	r3, [r3, #4]
 80180fa:	f107 020c 	add.w	r2, r7, #12
 80180fe:	210e      	movs	r1, #14
 8018100:	4618      	mov	r0, r3
 8018102:	f7f7 fe37 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8018106:	4603      	mov	r3, r0
 8018108:	81fb      	strh	r3, [r7, #14]
 801810a:	89fb      	ldrh	r3, [r7, #14]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d001      	beq.n	8018114 <phpalSli15693_Sw_SetConfig+0x1d4>
 8018110:	89fb      	ldrh	r3, [r7, #14]
 8018112:	e0e7      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_MS,
            &wValueOld));

        /* Set the new timeout */
        if (wValue != wValueOld)
 8018114:	89bb      	ldrh	r3, [r7, #12]
 8018116:	883a      	ldrh	r2, [r7, #0]
 8018118:	429a      	cmp	r2, r3
 801811a:	f000 80db 	beq.w	80182d4 <phpalSli15693_Sw_SetConfig+0x394>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	883a      	ldrh	r2, [r7, #0]
 8018124:	210e      	movs	r1, #14
 8018126:	4618      	mov	r0, r3
 8018128:	f7f6 f9d6 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801812c:	4603      	mov	r3, r0
 801812e:	81fb      	strh	r3, [r7, #14]
 8018130:	89fb      	ldrh	r3, [r7, #14]
 8018132:	2b00      	cmp	r3, #0
 8018134:	f000 80ce 	beq.w	80182d4 <phpalSli15693_Sw_SetConfig+0x394>
 8018138:	89fb      	ldrh	r3, [r7, #14]
 801813a:	e0d3      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }
        break;

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        if((wValue != PHPAL_SLI15693_TIMEOUT_SHORT_US) && (pDataParams->bOpeMode == RD_LIB_MODE_NFC))
 801813c:	883b      	ldrh	r3, [r7, #0]
 801813e:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8018142:	d006      	beq.n	8018152 <phpalSli15693_Sw_SetConfig+0x212>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	7d9b      	ldrb	r3, [r3, #22]
 8018148:	2b02      	cmp	r3, #2
 801814a:	d102      	bne.n	8018152 <phpalSli15693_Sw_SetConfig+0x212>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801814c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8018150:	e0c8      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	f107 020c 	add.w	r2, r7, #12
 801815a:	210d      	movs	r1, #13
 801815c:	4618      	mov	r0, r3
 801815e:	f7f7 fe09 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8018162:	4603      	mov	r3, r0
 8018164:	81fb      	strh	r3, [r7, #14]
 8018166:	89fb      	ldrh	r3, [r7, #14]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d001      	beq.n	8018170 <phpalSli15693_Sw_SetConfig+0x230>
 801816c:	89fb      	ldrh	r3, [r7, #14]
 801816e:	e0b9      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            &wValueOld));

        /* Set the new T1 Value */
        if (wValue != wValueOld)
 8018170:	89bb      	ldrh	r3, [r7, #12]
 8018172:	883a      	ldrh	r2, [r7, #0]
 8018174:	429a      	cmp	r2, r3
 8018176:	f000 80af 	beq.w	80182d8 <phpalSli15693_Sw_SetConfig+0x398>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6858      	ldr	r0, [r3, #4]
 801817e:	883b      	ldrh	r3, [r7, #0]
 8018180:	3b0a      	subs	r3, #10
 8018182:	b29b      	uxth	r3, r3
 8018184:	461a      	mov	r2, r3
 8018186:	2106      	movs	r1, #6
 8018188:	f7f6 f9a6 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801818c:	4603      	mov	r3, r0
 801818e:	81fb      	strh	r3, [r7, #14]
 8018190:	89fb      	ldrh	r3, [r7, #14]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d001      	beq.n	801819a <phpalSli15693_Sw_SetConfig+0x25a>
 8018196:	89fb      	ldrh	r3, [r7, #14]
 8018198:	e0a4      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
                pDataParams->pHalDataParams,
                PHHAL_HW_CONFIG_RXWAIT_US,
                (wValue - 10U)));

            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	685b      	ldr	r3, [r3, #4]
 801819e:	883a      	ldrh	r2, [r7, #0]
 80181a0:	210d      	movs	r1, #13
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7f6 f998 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 80181a8:	4603      	mov	r3, r0
 80181aa:	81fb      	strh	r3, [r7, #14]
 80181ac:	89fb      	ldrh	r3, [r7, #14]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	f000 8092 	beq.w	80182d8 <phpalSli15693_Sw_SetConfig+0x398>
 80181b4:	89fb      	ldrh	r3, [r7, #14]
 80181b6:	e095      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
                wValue));
        }
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        pDataParams->bBuffering = (uint8_t)wValue;
 80181b8:	883b      	ldrh	r3, [r7, #0]
 80181ba:	b2da      	uxtb	r2, r3
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	75da      	strb	r2, [r3, #23]
        break;
 80181c0:	e08f      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_TXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE ))
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	7d9b      	ldrb	r3, [r3, #22]
 80181c6:	2b02      	cmp	r3, #2
 80181c8:	d105      	bne.n	80181d6 <phpalSli15693_Sw_SetConfig+0x296>
 80181ca:	883b      	ldrh	r3, [r7, #0]
 80181cc:	2b1a      	cmp	r3, #26
 80181ce:	d002      	beq.n	80181d6 <phpalSli15693_Sw_SetConfig+0x296>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80181d0:	f640 2321 	movw	r3, #2593	@ 0xa21
 80181d4:	e086      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        if(wValue > PHPAL_SLI15693_212KBPS_DATARATE)
 80181d6:	883b      	ldrh	r3, [r7, #0]
 80181d8:	2b1d      	cmp	r3, #29
 80181da:	d902      	bls.n	80181e2 <phpalSli15693_Sw_SetConfig+0x2a2>
        {
            return PH_ADD_COMPCODE(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80181dc:	f640 2323 	movw	r3, #2595	@ 0xa23
 80181e0:	e080      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 80181e2:	883b      	ldrh	r3, [r7, #0]
 80181e4:	3b1a      	subs	r3, #26
 80181e6:	2b03      	cmp	r3, #3
 80181e8:	d816      	bhi.n	8018218 <phpalSli15693_Sw_SetConfig+0x2d8>
 80181ea:	a201      	add	r2, pc, #4	@ (adr r2, 80181f0 <phpalSli15693_Sw_SetConfig+0x2b0>)
 80181ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181f0:	08018201 	.word	0x08018201
 80181f4:	08018207 	.word	0x08018207
 80181f8:	0801820d 	.word	0x0801820d
 80181fc:	08018213 	.word	0x08018213
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4;
 8018200:	230b      	movs	r3, #11
 8018202:	803b      	strh	r3, [r7, #0]
            break;
 8018204:	e009      	b.n	801821a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue =  PHHAL_HW_RF_I15693_53KBPS_DATARATE;
 8018206:	231b      	movs	r3, #27
 8018208:	803b      	strh	r3, [r7, #0]
            break;
 801820a:	e006      	b.n	801821a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 801820c:	2300      	movs	r3, #0
 801820e:	803b      	strh	r3, [r7, #0]
            break;
 8018210:	e003      	b.n	801821a <phpalSli15693_Sw_SetConfig+0x2da>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 8018212:	2301      	movs	r3, #1
 8018214:	803b      	strh	r3, [r7, #0]
            break;
 8018216:	e000      	b.n	801821a <phpalSli15693_Sw_SetConfig+0x2da>
        default:
            break;
 8018218:	bf00      	nop
        }

        /* Set the new TX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	685b      	ldr	r3, [r3, #4]
 801821e:	883a      	ldrh	r2, [r7, #0]
 8018220:	2109      	movs	r1, #9
 8018222:	4618      	mov	r0, r3
 8018224:	f7f6 f958 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8018228:	4603      	mov	r3, r0
 801822a:	81fb      	strh	r3, [r7, #14]
 801822c:	89fb      	ldrh	r3, [r7, #14]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d054      	beq.n	80182dc <phpalSli15693_Sw_SetConfig+0x39c>
 8018232:	89fb      	ldrh	r3, [r7, #14]
 8018234:	e056      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>

        break;

    case PHPAL_SLI15693_CONFIG_RXDATARATE:

        if((pDataParams->bOpeMode == RD_LIB_MODE_NFC) && (wValue != PHPAL_SLI15693_26KBPS_DATARATE))
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	7d9b      	ldrb	r3, [r3, #22]
 801823a:	2b02      	cmp	r3, #2
 801823c:	d105      	bne.n	801824a <phpalSli15693_Sw_SetConfig+0x30a>
 801823e:	883b      	ldrh	r3, [r7, #0]
 8018240:	2b1a      	cmp	r3, #26
 8018242:	d002      	beq.n	801824a <phpalSli15693_Sw_SetConfig+0x30a>
        {
            return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8018244:	f640 2321 	movw	r3, #2593	@ 0xa21
 8018248:	e04c      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        }

        switch(wValue)
 801824a:	883b      	ldrh	r3, [r7, #0]
 801824c:	3b1a      	subs	r3, #26
 801824e:	2b03      	cmp	r3, #3
 8018250:	d816      	bhi.n	8018280 <phpalSli15693_Sw_SetConfig+0x340>
 8018252:	a201      	add	r2, pc, #4	@ (adr r2, 8018258 <phpalSli15693_Sw_SetConfig+0x318>)
 8018254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018258:	08018269 	.word	0x08018269
 801825c:	0801826f 	.word	0x0801826f
 8018260:	08018275 	.word	0x08018275
 8018264:	0801827b 	.word	0x0801827b
        {
        case PHPAL_SLI15693_26KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_HIGH;
 8018268:	230d      	movs	r3, #13
 801826a:	803b      	strh	r3, [r7, #0]
            break;
 801826c:	e009      	b.n	8018282 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_53KBPS_DATARATE:
            wValue = PHHAL_HW_RF_RX_DATARATE_FAST_HIGH;
 801826e:	230f      	movs	r3, #15
 8018270:	803b      	strh	r3, [r7, #0]
            break;
 8018272:	e006      	b.n	8018282 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_106KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_106;
 8018274:	2300      	movs	r3, #0
 8018276:	803b      	strh	r3, [r7, #0]
            break;
 8018278:	e003      	b.n	8018282 <phpalSli15693_Sw_SetConfig+0x342>
        case PHPAL_SLI15693_212KBPS_DATARATE:
            wValue = PHHAL_HW_RF_DATARATE_212;
 801827a:	2301      	movs	r3, #1
 801827c:	803b      	strh	r3, [r7, #0]
            break;
 801827e:	e000      	b.n	8018282 <phpalSli15693_Sw_SetConfig+0x342>
        default:
            break;
 8018280:	bf00      	nop
        }

        /* Set the new RX data rate */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	685b      	ldr	r3, [r3, #4]
 8018286:	883a      	ldrh	r2, [r7, #0]
 8018288:	210a      	movs	r1, #10
 801828a:	4618      	mov	r0, r3
 801828c:	f7f6 f924 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8018290:	4603      	mov	r3, r0
 8018292:	81fb      	strh	r3, [r7, #14]
 8018294:	89fb      	ldrh	r3, [r7, #14]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d022      	beq.n	80182e0 <phpalSli15693_Sw_SetConfig+0x3a0>
 801829a:	89fb      	ldrh	r3, [r7, #14]
 801829c:	e022      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            wValue));

        break;

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
            if(pDataParams->bMaxRetryCount > PHPAL_SLI15693_SW_RETRYCOUNT_MAX)
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	7e1b      	ldrb	r3, [r3, #24]
 80182a2:	2b05      	cmp	r3, #5
 80182a4:	d902      	bls.n	80182ac <phpalSli15693_Sw_SetConfig+0x36c>
            {
                return PH_ADD_COMPCODE(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80182a6:	f640 2321 	movw	r3, #2593	@ 0xa21
 80182aa:	e01b      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
            }
            pDataParams->bMaxRetryCount = (uint8_t)wValue;
 80182ac:	883b      	ldrh	r3, [r7, #0]
 80182ae:	b2da      	uxtb	r2, r3
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	761a      	strb	r2, [r3, #24]
            break;
 80182b4:	e015      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
            pDataParams->bIcMfgCode = (uint8_t)wValue;
 80182b6:	883b      	ldrh	r3, [r7, #0]
 80182b8:	b2da      	uxtb	r2, r3
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	765a      	strb	r2, [r3, #25]
            break;
 80182be:	e010      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
            pDataParams->bOpeMode = (uint8_t)wValue;
 80182c0:	883b      	ldrh	r3, [r7, #0]
 80182c2:	b2da      	uxtb	r2, r3
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	759a      	strb	r2, [r3, #22]
            break;
 80182c8:	e00b      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 80182ca:	f640 2323 	movw	r3, #2595	@ 0xa23
 80182ce:	e009      	b.n	80182e4 <phpalSli15693_Sw_SetConfig+0x3a4>
        break;
 80182d0:	bf00      	nop
 80182d2:	e006      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80182d4:	bf00      	nop
 80182d6:	e004      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80182d8:	bf00      	nop
 80182da:	e002      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80182dc:	bf00      	nop
 80182de:	e000      	b.n	80182e2 <phpalSli15693_Sw_SetConfig+0x3a2>
        break;
 80182e0:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 80182e2:	2300      	movs	r3, #0
}
 80182e4:	4618      	mov	r0, r3
 80182e6:	3710      	adds	r7, #16
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}

080182ec <phpalSli15693_Sw_GetConfig>:
phStatus_t phpalSli15693_Sw_GetConfig(
                                      phpalSli15693_Sw_DataParams_t * pDataParams,
                                      uint16_t wConfig,
                                      uint16_t * pValue
                                      )
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b086      	sub	sp, #24
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	60f8      	str	r0, [r7, #12]
 80182f4:	460b      	mov	r3, r1
 80182f6:	607a      	str	r2, [r7, #4]
 80182f8:	817b      	strh	r3, [r7, #10]
    phStatus_t PH_MEMLOC_REM statusTmp;

    switch (wConfig)
 80182fa:	897b      	ldrh	r3, [r7, #10]
 80182fc:	2b0a      	cmp	r3, #10
 80182fe:	f200 8115 	bhi.w	801852c <phpalSli15693_Sw_GetConfig+0x240>
 8018302:	a201      	add	r2, pc, #4	@ (adr r2, 8018308 <phpalSli15693_Sw_GetConfig+0x1c>)
 8018304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018308:	08018335 	.word	0x08018335
 801830c:	08018341 	.word	0x08018341
 8018310:	0801834b 	.word	0x0801834b
 8018314:	08018375 	.word	0x08018375
 8018318:	08018393 	.word	0x08018393
 801831c:	08018451 	.word	0x08018451
 8018320:	080184e1 	.word	0x080184e1
 8018324:	080184fd 	.word	0x080184fd
 8018328:	08018509 	.word	0x08018509
 801832c:	08018515 	.word	0x08018515
 8018330:	08018521 	.word	0x08018521
    {
    case PHPAL_SLI15693_CONFIG_FLAGS:
        *pValue = pDataParams->bFlags;
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	7a9b      	ldrb	r3, [r3, #10]
 8018338:	461a      	mov	r2, r3
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	801a      	strh	r2, [r3, #0]
        break;
 801833e:	e0fb      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ADD_INFO:
        *pValue = pDataParams->wAdditionalInfo;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	891a      	ldrh	r2, [r3, #8]
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	801a      	strh	r2, [r3, #0]
        break;
 8018348:	e0f6      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_US:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	685b      	ldr	r3, [r3, #4]
 801834e:	687a      	ldr	r2, [r7, #4]
 8018350:	210d      	movs	r1, #13
 8018352:	4618      	mov	r0, r3
 8018354:	f7f7 fd0e 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8018358:	4603      	mov	r3, r0
 801835a:	82fb      	strh	r3, [r7, #22]
 801835c:	8afb      	ldrh	r3, [r7, #22]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d001      	beq.n	8018366 <phpalSli15693_Sw_GetConfig+0x7a>
 8018362:	8afb      	ldrh	r3, [r7, #22]
 8018364:	e0e9      	b.n	801853a <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));

        /* Remove timeout extension */
        *pValue -= PHPAL_SLI15693_SW_EXT_TIME_US;
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	881b      	ldrh	r3, [r3, #0]
 801836a:	3b3c      	subs	r3, #60	@ 0x3c
 801836c:	b29a      	uxth	r2, r3
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	801a      	strh	r2, [r3, #0]
        break;
 8018372:	e0e1      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_TIMEOUT_MS:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	685b      	ldr	r3, [r3, #4]
 8018378:	687a      	ldr	r2, [r7, #4]
 801837a:	210e      	movs	r1, #14
 801837c:	4618      	mov	r0, r3
 801837e:	f7f7 fcf9 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 8018382:	4603      	mov	r3, r0
 8018384:	82fb      	strh	r3, [r7, #22]
 8018386:	8afb      	ldrh	r3, [r7, #22]
 8018388:	2b00      	cmp	r3, #0
 801838a:	f000 80d2 	beq.w	8018532 <phpalSli15693_Sw_GetConfig+0x246>
 801838e:	8afb      	ldrh	r3, [r7, #22]
 8018390:	e0d3      	b.n	801853a <phpalSli15693_Sw_GetConfig+0x24e>

        break;

    case PHPAL_SLI15693_CONFIG_TXDATARATE:
        /* Get HAL Tx Data Rate value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	685b      	ldr	r3, [r3, #4]
 8018396:	687a      	ldr	r2, [r7, #4]
 8018398:	2109      	movs	r1, #9
 801839a:	4618      	mov	r0, r3
 801839c:	f7f7 fcea 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80183a0:	4603      	mov	r3, r0
 80183a2:	82fb      	strh	r3, [r7, #22]
 80183a4:	8afb      	ldrh	r3, [r7, #22]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d001      	beq.n	80183ae <phpalSli15693_Sw_GetConfig+0xc2>
 80183aa:	8afb      	ldrh	r3, [r7, #22]
 80183ac:	e0c5      	b.n	801853a <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_TXDATARATE_FRAMING,
            pValue));

        /* Map the HAL TX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	881b      	ldrh	r3, [r3, #0]
 80183b2:	2b1b      	cmp	r3, #27
 80183b4:	d84a      	bhi.n	801844c <phpalSli15693_Sw_GetConfig+0x160>
 80183b6:	a201      	add	r2, pc, #4	@ (adr r2, 80183bc <phpalSli15693_Sw_GetConfig+0xd0>)
 80183b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183bc:	0801843d 	.word	0x0801843d
 80183c0:	08018445 	.word	0x08018445
 80183c4:	0801844d 	.word	0x0801844d
 80183c8:	0801844d 	.word	0x0801844d
 80183cc:	0801844d 	.word	0x0801844d
 80183d0:	0801844d 	.word	0x0801844d
 80183d4:	0801844d 	.word	0x0801844d
 80183d8:	0801844d 	.word	0x0801844d
 80183dc:	0801844d 	.word	0x0801844d
 80183e0:	0801844d 	.word	0x0801844d
 80183e4:	0801844d 	.word	0x0801844d
 80183e8:	0801842d 	.word	0x0801842d
 80183ec:	0801844d 	.word	0x0801844d
 80183f0:	0801844d 	.word	0x0801844d
 80183f4:	0801844d 	.word	0x0801844d
 80183f8:	0801844d 	.word	0x0801844d
 80183fc:	0801844d 	.word	0x0801844d
 8018400:	0801844d 	.word	0x0801844d
 8018404:	0801844d 	.word	0x0801844d
 8018408:	0801844d 	.word	0x0801844d
 801840c:	0801844d 	.word	0x0801844d
 8018410:	0801844d 	.word	0x0801844d
 8018414:	0801844d 	.word	0x0801844d
 8018418:	0801844d 	.word	0x0801844d
 801841c:	0801844d 	.word	0x0801844d
 8018420:	0801844d 	.word	0x0801844d
 8018424:	0801844d 	.word	0x0801844d
 8018428:	08018435 	.word	0x08018435
        {
        case PHHAL_HW_RF_TX_DATARATE_1_OUT_OF_4:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	221a      	movs	r2, #26
 8018430:	801a      	strh	r2, [r3, #0]
            break;
 8018432:	e00c      	b.n	801844e <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_I15693_53KBPS_DATARATE:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	221b      	movs	r2, #27
 8018438:	801a      	strh	r2, [r3, #0]
            break;
 801843a:	e008      	b.n	801844e <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	221c      	movs	r2, #28
 8018440:	801a      	strh	r2, [r3, #0]
            break;
 8018442:	e004      	b.n	801844e <phpalSli15693_Sw_GetConfig+0x162>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	221d      	movs	r2, #29
 8018448:	801a      	strh	r2, [r3, #0]
            break;
 801844a:	e000      	b.n	801844e <phpalSli15693_Sw_GetConfig+0x162>
        default:
            break;
 801844c:	bf00      	nop
        }
        break;
 801844e:	e073      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_RXDATARATE:
        /* Get HAL timeout value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	687a      	ldr	r2, [r7, #4]
 8018456:	210a      	movs	r1, #10
 8018458:	4618      	mov	r0, r3
 801845a:	f7f7 fc8b 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 801845e:	4603      	mov	r3, r0
 8018460:	82fb      	strh	r3, [r7, #22]
 8018462:	8afb      	ldrh	r3, [r7, #22]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d001      	beq.n	801846c <phpalSli15693_Sw_GetConfig+0x180>
 8018468:	8afb      	ldrh	r3, [r7, #22]
 801846a:	e066      	b.n	801853a <phpalSli15693_Sw_GetConfig+0x24e>
            pDataParams->pHalDataParams,
            PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
            pValue));

        /* Map the HAL RX BaudRates to generic 15693 BaudRates */
        switch(*pValue)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	881b      	ldrh	r3, [r3, #0]
 8018470:	2b0f      	cmp	r3, #15
 8018472:	d833      	bhi.n	80184dc <phpalSli15693_Sw_GetConfig+0x1f0>
 8018474:	a201      	add	r2, pc, #4	@ (adr r2, 801847c <phpalSli15693_Sw_GetConfig+0x190>)
 8018476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801847a:	bf00      	nop
 801847c:	080184cd 	.word	0x080184cd
 8018480:	080184d5 	.word	0x080184d5
 8018484:	080184dd 	.word	0x080184dd
 8018488:	080184dd 	.word	0x080184dd
 801848c:	080184dd 	.word	0x080184dd
 8018490:	080184dd 	.word	0x080184dd
 8018494:	080184dd 	.word	0x080184dd
 8018498:	080184dd 	.word	0x080184dd
 801849c:	080184dd 	.word	0x080184dd
 80184a0:	080184dd 	.word	0x080184dd
 80184a4:	080184dd 	.word	0x080184dd
 80184a8:	080184dd 	.word	0x080184dd
 80184ac:	080184dd 	.word	0x080184dd
 80184b0:	080184bd 	.word	0x080184bd
 80184b4:	080184dd 	.word	0x080184dd
 80184b8:	080184c5 	.word	0x080184c5
        {
        case PHHAL_HW_RF_RX_DATARATE_HIGH:
            *pValue = PHPAL_SLI15693_26KBPS_DATARATE;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	221a      	movs	r2, #26
 80184c0:	801a      	strh	r2, [r3, #0]
            break;
 80184c2:	e00c      	b.n	80184de <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_RX_DATARATE_FAST_HIGH:
            *pValue = PHPAL_SLI15693_53KBPS_DATARATE;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	221b      	movs	r2, #27
 80184c8:	801a      	strh	r2, [r3, #0]
            break;
 80184ca:	e008      	b.n	80184de <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_106:
            *pValue = PHPAL_SLI15693_106KBPS_DATARATE;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	221c      	movs	r2, #28
 80184d0:	801a      	strh	r2, [r3, #0]
            break;
 80184d2:	e004      	b.n	80184de <phpalSli15693_Sw_GetConfig+0x1f2>
        case PHHAL_HW_RF_DATARATE_212:
            *pValue = PHPAL_SLI15693_212KBPS_DATARATE;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	221d      	movs	r2, #29
 80184d8:	801a      	strh	r2, [r3, #0]
            break;
 80184da:	e000      	b.n	80184de <phpalSli15693_Sw_GetConfig+0x1f2>
        default:
            break;
 80184dc:	bf00      	nop
        }
        break;
 80184de:	e02b      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_T1_PARAMETER:

        /* Retrieve current T1 Value */
        PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	687a      	ldr	r2, [r7, #4]
 80184e6:	210d      	movs	r1, #13
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7f7 fc43 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80184ee:	4603      	mov	r3, r0
 80184f0:	82fb      	strh	r3, [r7, #22]
 80184f2:	8afb      	ldrh	r3, [r7, #22]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d01e      	beq.n	8018536 <phpalSli15693_Sw_GetConfig+0x24a>
 80184f8:	8afb      	ldrh	r3, [r7, #22]
 80184fa:	e01e      	b.n	801853a <phpalSli15693_Sw_GetConfig+0x24e>
            PHHAL_HW_CONFIG_TIMEOUT_VALUE_US,
            pValue));
        break;

    case PHPAL_SLI15693_CONFIG_ENABLE_BUFFERING:
        *pValue = pDataParams->bBuffering;
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	7ddb      	ldrb	r3, [r3, #23]
 8018500:	461a      	mov	r2, r3
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	801a      	strh	r2, [r3, #0]
        break;
 8018506:	e017      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_MAXRETRYCOUNT:
        *pValue = pDataParams->bMaxRetryCount;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	7e1b      	ldrb	r3, [r3, #24]
 801850c:	461a      	mov	r2, r3
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	801a      	strh	r2, [r3, #0]
        break;
 8018512:	e011      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_ICMFGCODE:
        *pValue = pDataParams->bIcMfgCode;
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	7e5b      	ldrb	r3, [r3, #25]
 8018518:	461a      	mov	r2, r3
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	801a      	strh	r2, [r3, #0]
        break;
 801851e:	e00b      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    case PHPAL_SLI15693_CONFIG_OPE_MODE:
        *pValue = pDataParams->bOpeMode;
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	7d9b      	ldrb	r3, [r3, #22]
 8018524:	461a      	mov	r2, r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	801a      	strh	r2, [r3, #0]
        break;
 801852a:	e005      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>

    default:
        return PH_ADD_COMPCODE_FIXED(PH_ERR_UNSUPPORTED_PARAMETER, PH_COMP_PAL_SLI15693);
 801852c:	f640 2323 	movw	r3, #2595	@ 0xa23
 8018530:	e003      	b.n	801853a <phpalSli15693_Sw_GetConfig+0x24e>
        break;
 8018532:	bf00      	nop
 8018534:	e000      	b.n	8018538 <phpalSli15693_Sw_GetConfig+0x24c>
        break;
 8018536:	bf00      	nop
    }

    return PH_ERR_SUCCESS;
 8018538:	2300      	movs	r3, #0
}
 801853a:	4618      	mov	r0, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop

08018544 <phpalSli15693_Sw_InventoryEx>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b08e      	sub	sp, #56	@ 0x38
 8018548:	af0c      	add	r7, sp, #48	@ 0x30
 801854a:	6078      	str	r0, [r7, #4]
 801854c:	4608      	mov	r0, r1
 801854e:	4611      	mov	r1, r2
 8018550:	461a      	mov	r2, r3
 8018552:	4603      	mov	r3, r0
 8018554:	70fb      	strb	r3, [r7, #3]
 8018556:	460b      	mov	r3, r1
 8018558:	70bb      	strb	r3, [r7, #2]
 801855a:	4613      	mov	r3, r2
 801855c:	707b      	strb	r3, [r7, #1]
        return  phpalSli15693_Sw_InventoryExt(
 801855e:	7878      	ldrb	r0, [r7, #1]
 8018560:	78ba      	ldrb	r2, [r7, #2]
 8018562:	78f9      	ldrb	r1, [r7, #3]
 8018564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018566:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801856a:	930a      	str	r3, [sp, #40]	@ 0x28
 801856c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801856e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018570:	6a3b      	ldr	r3, [r7, #32]
 8018572:	9308      	str	r3, [sp, #32]
 8018574:	2300      	movs	r3, #0
 8018576:	9307      	str	r3, [sp, #28]
 8018578:	8bbb      	ldrh	r3, [r7, #28]
 801857a:	9306      	str	r3, [sp, #24]
 801857c:	7e3b      	ldrb	r3, [r7, #24]
 801857e:	9305      	str	r3, [sp, #20]
 8018580:	7d3b      	ldrb	r3, [r7, #20]
 8018582:	9304      	str	r3, [sp, #16]
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	9303      	str	r3, [sp, #12]
 8018588:	2300      	movs	r3, #0
 801858a:	9302      	str	r3, [sp, #8]
 801858c:	2300      	movs	r3, #0
 801858e:	9301      	str	r3, [sp, #4]
 8018590:	2300      	movs	r3, #0
 8018592:	9300      	str	r3, [sp, #0]
 8018594:	4603      	mov	r3, r0
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f000 f805 	bl	80185a6 <phpalSli15693_Sw_InventoryExt>
 801859c:	4603      	mov	r3, r0
                pUid,
                pUidLength,
                pData,
                pDataLength
                );
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}

080185a6 <phpalSli15693_Sw_InventoryExt>:
                                        uint8_t * pUid,
                                        uint8_t * pUidLength,
                                        uint8_t * pData,
                                        uint16_t * pDataLength
                                        )
{
 80185a6:	b580      	push	{r7, lr}
 80185a8:	b090      	sub	sp, #64	@ 0x40
 80185aa:	af02      	add	r7, sp, #8
 80185ac:	6078      	str	r0, [r7, #4]
 80185ae:	4608      	mov	r0, r1
 80185b0:	4611      	mov	r1, r2
 80185b2:	461a      	mov	r2, r3
 80185b4:	4603      	mov	r3, r0
 80185b6:	70fb      	strb	r3, [r7, #3]
 80185b8:	460b      	mov	r3, r1
 80185ba:	70bb      	strb	r3, [r7, #2]
 80185bc:	4613      	mov	r3, r2
 80185be:	707b      	strb	r3, [r7, #1]
    phStatus_t  PH_MEMLOC_REM status;
    phStatus_t  PH_MEMLOC_REM statusTmp;
    uint8_t     PH_MEMLOC_REM bCmdBuffer[15];
    uint8_t     PH_MEMLOC_REM bCmdBufferLen = 0;
 80185c0:	2300      	movs	r3, #0
 80185c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t     PH_MEMLOC_REM bCmdOffset = 0;
 80185c6:	2300      	movs	r3, #0
 80185c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t     PH_MEMLOC_REM bMaskByteLength;
    uint8_t *   PH_MEMLOC_REM pResp = NULL;
 80185cc:	2300      	movs	r3, #0
 80185ce:	613b      	str	r3, [r7, #16]
    uint16_t    PH_MEMLOC_REM wRespLength = 0;
 80185d0:	2300      	movs	r3, #0
 80185d2:	81fb      	strh	r3, [r7, #14]
    uint8_t     PH_MEMLOC_REM bStoredUidLength = 0;
 80185d4:	2300      	movs	r3, #0
 80185d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint16_t    PH_MEMLOC_REM wAsk = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	81bb      	strh	r3, [r7, #12]
    uint16_t    PH_MEMLOC_REM wTimeout = 0;
 80185de:	2300      	movs	r3, #0
 80185e0:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t    PH_MEMLOC_REM wCurrBlocksToRead = 0;
 80185e2:	2300      	movs	r3, #0
 80185e4:	863b      	strh	r3, [r7, #48]	@ 0x30
    uint16_t    PH_MEMLOC_REM wCurrBlockNo = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t    PH_MEMLOC_REM wMaxNoBlocks = 0;
 80185ea:	2300      	movs	r3, #0
 80185ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t     PH_MEMLOC_REM bAllBlocksRead = 0;
 80185ee:	2300      	movs	r3, #0
 80185f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t     PH_MEMLOC_REM bFirst = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Reset UID and data length */
    pDataParams->bUidBitLength = 0;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2200      	movs	r2, #0
 80185fe:	751a      	strb	r2, [r3, #20]

    if(((pUidLength == NULL) || (pUid == NULL)) || ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA))) && ((pDataLength == NULL) || (pData == NULL))))
 8018600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00e      	beq.n	8018624 <phpalSli15693_Sw_InventoryExt+0x7e>
 8018606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018608:	2b00      	cmp	r3, #0
 801860a:	d00b      	beq.n	8018624 <phpalSli15693_Sw_InventoryExt+0x7e>
 801860c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018610:	f003 0310 	and.w	r3, r3, #16
 8018614:	2b00      	cmp	r3, #0
 8018616:	d008      	beq.n	801862a <phpalSli15693_Sw_InventoryExt+0x84>
 8018618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801861a:	2b00      	cmp	r3, #0
 801861c:	d002      	beq.n	8018624 <phpalSli15693_Sw_InventoryExt+0x7e>
 801861e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018620:	2b00      	cmp	r3, #0
 8018622:	d102      	bne.n	801862a <phpalSli15693_Sw_InventoryExt+0x84>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8018624:	f640 2321 	movw	r3, #2593	@ 0xa21
 8018628:	e334      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* If Extended Option is looking for CID response then CID should not be null */
    if ((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))) && (pCID == NULL))
 801862a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801862e:	f003 0304 	and.w	r3, r3, #4
 8018632:	2b00      	cmp	r3, #0
 8018634:	d005      	beq.n	8018642 <phpalSli15693_Sw_InventoryExt+0x9c>
 8018636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018638:	2b00      	cmp	r3, #0
 801863a:	d102      	bne.n	8018642 <phpalSli15693_Sw_InventoryExt+0x9c>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801863c:	f640 2321 	movw	r3, #2593	@ 0xa21
 8018640:	e328      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }
    /* If Extended Option is looking for CID response then CID should not be null */
    if((0U != ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE))) && (pCIDOut == NULL))
 8018642:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018646:	f003 0308 	and.w	r3, r3, #8
 801864a:	2b00      	cmp	r3, #0
 801864c:	d005      	beq.n	801865a <phpalSli15693_Sw_InventoryExt+0xb4>
 801864e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018650:	2b00      	cmp	r3, #0
 8018652:	d102      	bne.n	801865a <phpalSli15693_Sw_InventoryExt+0xb4>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 8018654:	f640 2321 	movw	r3, #2593	@ 0xa21
 8018658:	e31c      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    *pUidLength = 0;
 801865a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801865c:	2200      	movs	r2, #0
 801865e:	701a      	strb	r2, [r3, #0]
    *pDataLength = 0;
 8018660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018662:	2200      	movs	r2, #0
 8018664:	801a      	strh	r2, [r3, #0]

    /* first of all we check the bMaskBitLength according to ISO/IEC15693, 8.1, assuming
    the inventory flag to be set, si b6 deines the number of slots
    b6 = 1: --> one slot --> mask length = [0 .. 64] bits
    b6 = 0: --> 16 slots --> mask length = [0 .. 60] bits */
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 8018666:	78bb      	ldrb	r3, [r7, #2]
 8018668:	f003 0320 	and.w	r3, r3, #32
 801866c:	2b00      	cmp	r3, #0
 801866e:	d003      	beq.n	8018678 <phpalSli15693_Sw_InventoryExt+0xd2>
 8018670:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018674:	2b40      	cmp	r3, #64	@ 0x40
 8018676:	d808      	bhi.n	801868a <phpalSli15693_Sw_InventoryExt+0xe4>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 8018678:	78bb      	ldrb	r3, [r7, #2]
 801867a:	f003 0320 	and.w	r3, r3, #32
    if (((0U != ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 64U)) ||
 801867e:	2b00      	cmp	r3, #0
 8018680:	d106      	bne.n	8018690 <phpalSli15693_Sw_InventoryExt+0xea>
        ((0U == ((bFlags & PHPAL_SLI15693_FLAG_NBSLOTS))) && (bMaskBitLength > 60U)))
 8018682:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018686:	2b3c      	cmp	r3, #60	@ 0x3c
 8018688:	d902      	bls.n	8018690 <phpalSli15693_Sw_InventoryExt+0xea>
    {
        return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801868a:	f640 2321 	movw	r3, #2593	@ 0xa21
 801868e:	e301      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
    }

    /* Number of Pages/Blocks check */
    if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 8018690:	78fb      	ldrb	r3, [r7, #3]
 8018692:	2b01      	cmp	r3, #1
 8018694:	d010      	beq.n	80186b8 <phpalSli15693_Sw_InventoryExt+0x112>
    {
        /* Number of Pages/Blocks can't be zero */
        if (wNoOfPages_Blocks == 0U)
 8018696:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801869a:	2b00      	cmp	r3, #0
 801869c:	d102      	bne.n	80186a4 <phpalSli15693_Sw_InventoryExt+0xfe>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 801869e:	f640 2321 	movw	r3, #2593	@ 0xa21
 80186a2:	e2f7      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }

        /* check if the block number exceeds the limit */
        if (((uint16_t)bPage_Block_No + wNoOfPages_Blocks) >= PHPAL_SLI15693_SW_MAX_BLOCKS)
 80186a4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80186a8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80186ac:	4413      	add	r3, r2
 80186ae:	2bff      	cmp	r3, #255	@ 0xff
 80186b0:	d902      	bls.n	80186b8 <phpalSli15693_Sw_InventoryExt+0x112>
        {
            return PH_ADD_COMPCODE_FIXED(PH_ERR_INVALID_PARAMETER, PH_COMP_PAL_SLI15693);
 80186b2:	f640 2321 	movw	r3, #2593	@ 0xa21
 80186b6:	e2ed      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
        }
    }

    /* Add command code */
    bCmdBuffer[bCmdBufferLen++] = bCmd;
 80186b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80186bc:	1c5a      	adds	r2, r3, #1
 80186be:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80186c2:	3338      	adds	r3, #56	@ 0x38
 80186c4:	443b      	add	r3, r7
 80186c6:	78fa      	ldrb	r2, [r7, #3]
 80186c8:	f803 2c24 	strb.w	r2, [r3, #-36]

    /* Apply flag settings */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 80186cc:	78bb      	ldrb	r3, [r7, #2]
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	461a      	mov	r2, r3
 80186d2:	2100      	movs	r1, #0
 80186d4:	6878      	ldr	r0, [r7, #4]
 80186d6:	f7ff fc33 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 80186da:	4603      	mov	r3, r0
 80186dc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80186de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d001      	beq.n	80186e8 <phpalSli15693_Sw_InventoryExt+0x142>
 80186e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80186e6:	e2d5      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_FLAGS,
        bFlags));

    /* Overwrite datarate for fast inventory (page-)read */
    if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 80186e8:	78fb      	ldrb	r3, [r7, #3]
 80186ea:	2ba1      	cmp	r3, #161	@ 0xa1
 80186ec:	d002      	beq.n	80186f4 <phpalSli15693_Sw_InventoryExt+0x14e>
 80186ee:	78fb      	ldrb	r3, [r7, #3]
 80186f0:	2bb1      	cmp	r3, #177	@ 0xb1
 80186f2:	d120      	bne.n	8018736 <phpalSli15693_Sw_InventoryExt+0x190>
        (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
    {
        if (0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80186f4:	78bb      	ldrb	r3, [r7, #2]
 80186f6:	f003 0302 	and.w	r3, r3, #2
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d00d      	beq.n	801871a <phpalSli15693_Sw_InventoryExt+0x174>
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	685b      	ldr	r3, [r3, #4]
 8018702:	220f      	movs	r2, #15
 8018704:	210a      	movs	r1, #10
 8018706:	4618      	mov	r0, r3
 8018708:	f7f5 fee6 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 801870c:	4603      	mov	r3, r0
 801870e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8018710:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018712:	2b00      	cmp	r3, #0
 8018714:	d00f      	beq.n	8018736 <phpalSli15693_Sw_InventoryExt+0x190>
 8018716:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018718:	e2bc      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_CONFIG_RXDATARATE_FRAMING,
                PHHAL_HW_RF_RX_DATARATE_FAST_HIGH));
        }
        else
        {
            PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_SetConfig(
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	685b      	ldr	r3, [r3, #4]
 801871e:	220e      	movs	r2, #14
 8018720:	210a      	movs	r1, #10
 8018722:	4618      	mov	r0, r3
 8018724:	f7f5 fed8 	bl	800e4d8 <phhalHw_Pn5180_SetConfig>
 8018728:	4603      	mov	r3, r0
 801872a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801872c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801872e:	2b00      	cmp	r3, #0
 8018730:	d001      	beq.n	8018736 <phpalSli15693_Sw_InventoryExt+0x190>
 8018732:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018734:	e2ae      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
                PHHAL_HW_RF_RX_DATARATE_FAST_LOW));
        }
    }

    /* check if AFI shall be sent: */
    if ((0U != ((bFlags & PHPAL_SLI15693_FLAG_AFI))) && (0U != ((bFlags & PHPAL_SLI15693_FLAG_INVENTORY))))
 8018736:	78bb      	ldrb	r3, [r7, #2]
 8018738:	f003 0310 	and.w	r3, r3, #16
 801873c:	2b00      	cmp	r3, #0
 801873e:	d00e      	beq.n	801875e <phpalSli15693_Sw_InventoryExt+0x1b8>
 8018740:	78bb      	ldrb	r3, [r7, #2]
 8018742:	f003 0304 	and.w	r3, r3, #4
 8018746:	2b00      	cmp	r3, #0
 8018748:	d009      	beq.n	801875e <phpalSli15693_Sw_InventoryExt+0x1b8>
    {
        bCmdBuffer[bCmdBufferLen++] = bAfi;
 801874a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801874e:	1c5a      	adds	r2, r3, #1
 8018750:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8018754:	3338      	adds	r3, #56	@ 0x38
 8018756:	443b      	add	r3, r7
 8018758:	787a      	ldrb	r2, [r7, #1]
 801875a:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Add mask length */
    /* Making the MSB of mask length byte as 1 to show extended mode */
    /* In case of extended mode add the extended option in command */
    if (0U != (bExtended))
 801875e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018762:	2b00      	cmp	r3, #0
 8018764:	d03b      	beq.n	80187de <phpalSli15693_Sw_InventoryExt+0x238>
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength | PHPAL_SLI15693_FLAG_INVENTORY_READ_EXTENSION;
 8018766:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801876a:	1c5a      	adds	r2, r3, #1
 801876c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8018770:	4619      	mov	r1, r3
 8018772:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018776:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801877a:	b2da      	uxtb	r2, r3
 801877c:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8018780:	443b      	add	r3, r7
 8018782:	f803 2c24 	strb.w	r2, [r3, #-36]
        bCmdBuffer[bCmdBufferLen++] = bExtendedOptions;
 8018786:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801878a:	1c5a      	adds	r2, r3, #1
 801878c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8018790:	3338      	adds	r3, #56	@ 0x38
 8018792:	443b      	add	r3, r7
 8018794:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8018798:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (0U != (bExtendedOptions & PHPAL_SLI15693_FLAG_CID_COMPARE))
 801879c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80187a0:	f003 0304 	and.w	r3, r3, #4
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d025      	beq.n	80187f4 <phpalSli15693_Sw_InventoryExt+0x24e>
        {
            bCmdBuffer[bCmdBufferLen++] = pCID[0];
 80187a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80187ac:	1c5a      	adds	r2, r3, #1
 80187ae:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80187b2:	4619      	mov	r1, r3
 80187b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80187b6:	781a      	ldrb	r2, [r3, #0]
 80187b8:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 80187bc:	443b      	add	r3, r7
 80187be:	f803 2c24 	strb.w	r2, [r3, #-36]
            bCmdBuffer[bCmdBufferLen++] = pCID[1];
 80187c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80187c6:	1c5a      	adds	r2, r3, #1
 80187c8:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80187cc:	4619      	mov	r1, r3
 80187ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80187d0:	785a      	ldrb	r2, [r3, #1]
 80187d2:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 80187d6:	443b      	add	r3, r7
 80187d8:	f803 2c24 	strb.w	r2, [r3, #-36]
 80187dc:	e00a      	b.n	80187f4 <phpalSli15693_Sw_InventoryExt+0x24e>
        }
    }
    else
    {
        bCmdBuffer[bCmdBufferLen++] = bMaskBitLength;
 80187de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80187e2:	1c5a      	adds	r2, r3, #1
 80187e4:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 80187e8:	3338      	adds	r3, #56	@ 0x38
 80187ea:	443b      	add	r3, r7
 80187ec:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80187f0:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Retrieve mask byte length */
    bMaskByteLength = ((bMaskBitLength % 8U) != 0U) ? ((bMaskBitLength >> 3U) + 1U) : (bMaskBitLength >> 3U);
 80187f4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80187f8:	f003 0307 	and.w	r3, r3, #7
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d006      	beq.n	8018810 <phpalSli15693_Sw_InventoryExt+0x26a>
 8018802:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018806:	08db      	lsrs	r3, r3, #3
 8018808:	b2db      	uxtb	r3, r3
 801880a:	3301      	adds	r3, #1
 801880c:	b2db      	uxtb	r3, r3
 801880e:	e003      	b.n	8018818 <phpalSli15693_Sw_InventoryExt+0x272>
 8018810:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018814:	08db      	lsrs	r3, r3, #3
 8018816:	b2db      	uxtb	r3, r3
 8018818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* prepare mask in dataparams */
    (void)memcpy(pDataParams->pUid, pMask, bMaskByteLength );
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	330c      	adds	r3, #12
 8018820:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8018824:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8018826:	4618      	mov	r0, r3
 8018828:	f006 fbfd 	bl	801f026 <memcpy>
    pDataParams->bUidBitLength = bMaskBitLength;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8018832:	751a      	strb	r2, [r3, #20]

    /* prepare mask to send */
    (void)memcpy(&bCmdBuffer[bCmdBufferLen], pMask, bMaskByteLength );
 8018834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018838:	f107 0214 	add.w	r2, r7, #20
 801883c:	4413      	add	r3, r2
 801883e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8018842:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8018844:	4618      	mov	r0, r3
 8018846:	f006 fbee 	bl	801f026 <memcpy>
    bCmdBufferLen = bCmdBufferLen + bMaskByteLength;
 801884a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801884e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018852:	4413      	add	r3, r2
 8018854:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* mask out invalid bits */
    if (0U != (bMaskBitLength & 0x07U))
 8018858:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 801885c:	f003 0307 	and.w	r3, r3, #7
 8018860:	2b00      	cmp	r3, #0
 8018862:	d019      	beq.n	8018898 <phpalSli15693_Sw_InventoryExt+0x2f2>
    {
        bCmdBuffer[bCmdBufferLen - 1U] &= (uint8_t)(0xFFU >> (8U - (bMaskBitLength & 0x07U)));
 8018864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018868:	3b01      	subs	r3, #1
 801886a:	3338      	adds	r3, #56	@ 0x38
 801886c:	443b      	add	r3, r7
 801886e:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8018872:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018876:	f003 0307 	and.w	r3, r3, #7
 801887a:	f1c3 0308 	rsb	r3, r3, #8
 801887e:	22ff      	movs	r2, #255	@ 0xff
 8018880:	fa22 f303 	lsr.w	r3, r2, r3
 8018884:	b2da      	uxtb	r2, r3
 8018886:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801888a:	3b01      	subs	r3, #1
 801888c:	400a      	ands	r2, r1
 801888e:	b2d2      	uxtb	r2, r2
 8018890:	3338      	adds	r3, #56	@ 0x38
 8018892:	443b      	add	r3, r7
 8018894:	f803 2c24 	strb.w	r2, [r3, #-36]
    }

    /* Get the ASK 100 Condition */
    PH_CHECK_SUCCESS_FCT(statusTmp, phhalHw_GetConfig(
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	685b      	ldr	r3, [r3, #4]
 801889c:	f107 020c 	add.w	r2, r7, #12
 80188a0:	210c      	movs	r1, #12
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7f7 fa66 	bl	800fd74 <phhalHw_Pn5180_GetConfig>
 80188a8:	4603      	mov	r3, r0
 80188aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80188ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d001      	beq.n	80188b6 <phpalSli15693_Sw_InventoryExt+0x310>
 80188b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80188b4:	e1ee      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams->pHalDataParams,
        PHHAL_HW_CONFIG_ASK100,
        &wAsk));

    /* Calculate Timeout based on ask and baud rate */
    if(wAsk != 0U)
 80188b6:	89bb      	ldrh	r3, [r7, #12]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d01f      	beq.n	80188fc <phpalSli15693_Sw_InventoryExt+0x356>
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 80188bc:	78fb      	ldrb	r3, [r7, #3]
 80188be:	2ba1      	cmp	r3, #161	@ 0xa1
 80188c0:	d002      	beq.n	80188c8 <phpalSli15693_Sw_InventoryExt+0x322>
 80188c2:	78fb      	ldrb	r3, [r7, #3]
 80188c4:	2bb1      	cmp	r3, #177	@ 0xb1
 80188c6:	d10c      	bne.n	80188e2 <phpalSli15693_Sw_InventoryExt+0x33c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80188c8:	78bb      	ldrb	r3, [r7, #2]
 80188ca:	f003 0302 	and.w	r3, r3, #2
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d003      	beq.n	80188da <phpalSli15693_Sw_InventoryExt+0x334>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_SOF_US;
 80188d2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80188d6:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80188d8:	e02f      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_SOF_US;
 80188da:	f240 2373 	movw	r3, #627	@ 0x273
 80188de:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80188e0:	e02b      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 80188e2:	78bb      	ldrb	r3, [r7, #2]
 80188e4:	f003 0302 	and.w	r3, r3, #2
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d003      	beq.n	80188f4 <phpalSli15693_Sw_InventoryExt+0x34e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_SOF_US;
 80188ec:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80188f0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80188f2:	e022      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_SOF_US;
 80188f4:	f240 33a1 	movw	r3, #929	@ 0x3a1
 80188f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80188fa:	e01e      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
    }
    else
    {
        if ((bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_READ) ||
 80188fc:	78fb      	ldrb	r3, [r7, #3]
 80188fe:	2ba1      	cmp	r3, #161	@ 0xa1
 8018900:	d002      	beq.n	8018908 <phpalSli15693_Sw_InventoryExt+0x362>
 8018902:	78fb      	ldrb	r3, [r7, #3]
 8018904:	2bb1      	cmp	r3, #177	@ 0xb1
 8018906:	d10c      	bne.n	8018922 <phpalSli15693_Sw_InventoryExt+0x37c>
            (bCmd == PHPAL_SLI15693_SW_CMD_FAST_INVENTORY_PAGE_READ))
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018908:	78bb      	ldrb	r3, [r7, #2]
 801890a:	f003 0302 	and.w	r3, r3, #2
 801890e:	2b00      	cmp	r3, #0
 8018910:	d003      	beq.n	801891a <phpalSli15693_Sw_InventoryExt+0x374>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTHIGH_NRT_US;
 8018912:	f44f 630f 	mov.w	r3, #2288	@ 0x8f0
 8018916:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018918:	e00f      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_FASTLOW_NRT_US;
 801891a:	f641 73f3 	movw	r3, #8179	@ 0x1ff3
 801891e:	867b      	strh	r3, [r7, #50]	@ 0x32
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018920:	e00b      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
        }
        else
        {
            if(0U != (bFlags & PHPAL_SLI15693_FLAG_DATA_RATE))
 8018922:	78bb      	ldrb	r3, [r7, #2]
 8018924:	f003 0302 	and.w	r3, r3, #2
 8018928:	2b00      	cmp	r3, #0
 801892a:	d003      	beq.n	8018934 <phpalSli15693_Sw_InventoryExt+0x38e>
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_HIGH_NRT_US;
 801892c:	f241 039c 	movw	r3, #4252	@ 0x109c
 8018930:	867b      	strh	r3, [r7, #50]	@ 0x32
 8018932:	e002      	b.n	801893a <phpalSli15693_Sw_InventoryExt+0x394>
            }
            else
            {
                wTimeout = PHPAL_SLI15693_TIMEOUT_SHORT_US + PHPAL_SLI15693_SW_LOW_NRT_US;
 8018934:	f643 63a1 	movw	r3, #16033	@ 0x3ea1
 8018938:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
    }

    /* Set  timeout. */
    PH_CHECK_SUCCESS_FCT(statusTmp, phpalSli15693_SetConfig(
 801893a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801893c:	461a      	mov	r2, r3
 801893e:	2102      	movs	r1, #2
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f7ff fafd 	bl	8017f40 <phpalSli15693_Sw_SetConfig>
 8018946:	4603      	mov	r3, r0
 8018948:	853b      	strh	r3, [r7, #40]	@ 0x28
 801894a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801894c:	2b00      	cmp	r3, #0
 801894e:	d001      	beq.n	8018954 <phpalSli15693_Sw_InventoryExt+0x3ae>
 8018950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018952:	e19f      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
        pDataParams,
        PHPAL_SLI15693_CONFIG_TIMEOUT_US,
        wTimeout));

    /* Update the command offset variable. */
    bCmdOffset = bCmdBufferLen;
 8018954:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018958:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* If buffering is set. */
    if((pDataParams->bBuffering) != 0U)
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	7ddb      	ldrb	r3, [r3, #23]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d016      	beq.n	8018992 <phpalSli15693_Sw_InventoryExt+0x3ec>
    {
        /* Update the maximum number of blocks with respect to Option flag setting. The value for the blocks is fixed to 60 and 40 to avoid multiple
         * handling of different data in response. RD70x can respond with more amount of data but CM1 cannot. So fixing the blocks count to a lower
         * value.
         */
        wMaxNoBlocks = (uint8_t) (((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U) ? 40U : 60U);
 8018964:	78bb      	ldrb	r3, [r7, #2]
 8018966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801896a:	2b00      	cmp	r3, #0
 801896c:	d001      	beq.n	8018972 <phpalSli15693_Sw_InventoryExt+0x3cc>
 801896e:	2328      	movs	r3, #40	@ 0x28
 8018970:	e000      	b.n	8018974 <phpalSli15693_Sw_InventoryExt+0x3ce>
 8018972:	233c      	movs	r3, #60	@ 0x3c
 8018974:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        /* Blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8018976:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018978:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Update the number of blocks to read if its less than the internal required one. */
        if(wNoOfPages_Blocks < wMaxNoBlocks)
 801897a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801897e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018980:	429a      	cmp	r2, r3
 8018982:	d20c      	bcs.n	801899e <phpalSli15693_Sw_InventoryExt+0x3f8>
        {
            wCurrBlocksToRead = wNoOfPages_Blocks;
 8018984:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8018988:	863b      	strh	r3, [r7, #48]	@ 0x30
            bAllBlocksRead = 1U;
 801898a:	2301      	movs	r3, #1
 801898c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8018990:	e005      	b.n	801899e <phpalSli15693_Sw_InventoryExt+0x3f8>
        }
    }
    else
    {
        wCurrBlocksToRead = wNoOfPages_Blocks;
 8018992:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8018996:	863b      	strh	r3, [r7, #48]	@ 0x30
        bAllBlocksRead = 1U;
 8018998:	2301      	movs	r3, #1
 801899a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if((((pDataParams->bFlags & PHPAL_SLI15693_FLAG_INVENTORY) == 0U) && ((pDataParams->bFlags & PHPAL_SLI15693_FLAG_ADDRESSED) != 0U)) != 0U)
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	7a9b      	ldrb	r3, [r3, #10]
 80189a2:	f003 0304 	and.w	r3, r3, #4
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d107      	bne.n	80189ba <phpalSli15693_Sw_InventoryExt+0x414>
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	7a9b      	ldrb	r3, [r3, #10]
 80189ae:	f003 0320 	and.w	r3, r3, #32
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d001      	beq.n	80189ba <phpalSli15693_Sw_InventoryExt+0x414>
 80189b6:	2301      	movs	r3, #1
 80189b8:	e000      	b.n	80189bc <phpalSli15693_Sw_InventoryExt+0x416>
 80189ba:	2300      	movs	r3, #0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d002      	beq.n	80189c6 <phpalSli15693_Sw_InventoryExt+0x420>
    {
        pDataParams->bExplicitlyAddressed = 1U;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2201      	movs	r2, #1
 80189c4:	755a      	strb	r2, [r3, #21]
    }

    /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
    bFirst = PH_ON;
 80189c6:	2301      	movs	r3, #1
 80189c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    /* Exchange the information. */
    do
    {
        /* Page (or block) number and count */
        if (bCmd != PHPAL_SLI15693_SW_CMD_INVENTORY)
 80189cc:	78fb      	ldrb	r3, [r7, #3]
 80189ce:	2b01      	cmp	r3, #1
 80189d0:	d028      	beq.n	8018a24 <phpalSli15693_Sw_InventoryExt+0x47e>
        {
         /* Adjust number of blocks. Adjustment is made because the User or the application will pass
         * the number of blocks starting from 1 to N. But as per Iso15693 specification the number
         * of blocks ranges from 0 - (N - 1).
         */
            --wCurrBlocksToRead;
 80189d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80189d4:	3b01      	subs	r3, #1
 80189d6:	863b      	strh	r3, [r7, #48]	@ 0x30

            if (!((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_SKIP_DATA) != 0U)))
 80189d8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d005      	beq.n	80189ec <phpalSli15693_Sw_InventoryExt+0x446>
 80189e0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80189e4:	f003 0310 	and.w	r3, r3, #16
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d11b      	bne.n	8018a24 <phpalSli15693_Sw_InventoryExt+0x47e>
            {
                bCmdBuffer[bCmdOffset++] = (uint8_t) ((wCurrBlockNo + bPage_Block_No) & 0x00FFU);
 80189ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80189ee:	b2da      	uxtb	r2, r3
 80189f0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80189f4:	1c59      	adds	r1, r3, #1
 80189f6:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 80189fa:	4619      	mov	r1, r3
 80189fc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018a00:	4413      	add	r3, r2
 8018a02:	b2da      	uxtb	r2, r3
 8018a04:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8018a08:	443b      	add	r3, r7
 8018a0a:	f803 2c24 	strb.w	r2, [r3, #-36]
                bCmdBuffer[bCmdOffset++] = (uint8_t) wCurrBlocksToRead;
 8018a0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8018a12:	1c5a      	adds	r2, r3, #1
 8018a14:	f887 2036 	strb.w	r2, [r7, #54]	@ 0x36
 8018a18:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8018a1a:	b2d2      	uxtb	r2, r2
 8018a1c:	3338      	adds	r3, #56	@ 0x38
 8018a1e:	443b      	add	r3, r7
 8018a20:	f803 2c24 	strb.w	r2, [r3, #-36]
            }
        }

        /* Exchange the command information to Hal layer. */
        status = phpalSli15693_Exchange(
 8018a24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8018a28:	b299      	uxth	r1, r3
 8018a2a:	f107 0214 	add.w	r2, r7, #20
 8018a2e:	f107 030e 	add.w	r3, r7, #14
 8018a32:	9301      	str	r3, [sp, #4]
 8018a34:	f107 0310 	add.w	r3, r7, #16
 8018a38:	9300      	str	r3, [sp, #0]
 8018a3a:	460b      	mov	r3, r1
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	6878      	ldr	r0, [r7, #4]
 8018a40:	f7ff f94c 	bl	8017cdc <phpalSli15693_Sw_Exchange>
 8018a44:	4603      	mov	r3, r0
 8018a46:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bCmdOffset,
            &pResp,
            &wRespLength);

        /* Clear INVENTORY, AFI and NBSLOTS flag */
        if((status & PH_ERR_MASK) != PH_ERR_SUCCESS)
 8018a48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018a4a:	b2db      	uxtb	r3, r3
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d006      	beq.n	8018a5e <phpalSli15693_Sw_InventoryExt+0x4b8>
        {
            pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	7a9b      	ldrb	r3, [r3, #10]
 8018a54:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8018a58:	b2da      	uxtb	r2, r3
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	729a      	strb	r2, [r3, #10]
        }

        /* Verify the exchange status. */
        PH_CHECK_SUCCESS(status);
 8018a5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d001      	beq.n	8018a68 <phpalSli15693_Sw_InventoryExt+0x4c2>
 8018a64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018a66:	e115      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>

        /* Extracting  the CID as sent by the VICC. */
        if ((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_CID_RESPONSE) != 0U))
 8018a68:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d011      	beq.n	8018a94 <phpalSli15693_Sw_InventoryExt+0x4ee>
 8018a70:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018a74:	f003 0308 	and.w	r3, r3, #8
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d00b      	beq.n	8018a94 <phpalSli15693_Sw_InventoryExt+0x4ee>
        {
            (void)memcpy(pCIDOut, pResp, 2U);
 8018a7c:	693b      	ldr	r3, [r7, #16]
 8018a7e:	881b      	ldrh	r3, [r3, #0]
 8018a80:	b29a      	uxth	r2, r3
 8018a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a84:	801a      	strh	r2, [r3, #0]

            /* Update the response pointer address and length to Skip CID. */
            pResp += 2U;
 8018a86:	693b      	ldr	r3, [r7, #16]
 8018a88:	3302      	adds	r3, #2
 8018a8a:	613b      	str	r3, [r7, #16]
            wRespLength -= 2U;
 8018a8c:	89fb      	ldrh	r3, [r7, #14]
 8018a8e:	3b02      	subs	r3, #2
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	81fb      	strh	r3, [r7, #14]
        }

        /* Set the length (amount) of expected UID bytes. */
        if (bCmd == PHPAL_SLI15693_SW_CMD_INVENTORY)
 8018a94:	78fb      	ldrb	r3, [r7, #3]
 8018a96:	2b01      	cmp	r3, #1
 8018a98:	d123      	bne.n	8018ae2 <phpalSli15693_Sw_InventoryExt+0x53c>
        {
            /* The response length should be exactly the complete UID */
            if (wRespLength != (1U + PHPAL_SLI15693_UID_LENGTH))
 8018a9a:	89fb      	ldrh	r3, [r7, #14]
 8018a9c:	2b09      	cmp	r3, #9
 8018a9e:	d002      	beq.n	8018aa6 <phpalSli15693_Sw_InventoryExt+0x500>
            {
                return PH_ADD_COMPCODE_FIXED(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8018aa0:	f640 2306 	movw	r3, #2566	@ 0xa06
 8018aa4:	e0f6      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
            }

            /* Copy the DSFID to the data buffer. */
            pData[0] = pResp[0];
 8018aa6:	693b      	ldr	r3, [r7, #16]
 8018aa8:	781a      	ldrb	r2, [r3, #0]
 8018aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018aac:	701a      	strb	r2, [r3, #0]
            *pDataLength = 1U;
 8018aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	801a      	strh	r2, [r3, #0]

            /* Store the UID */
            (void)memcpy(pDataParams->pUid, &pResp[1], PHPAL_SLI15693_UID_LENGTH);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f103 000c 	add.w	r0, r3, #12
 8018aba:	693b      	ldr	r3, [r7, #16]
 8018abc:	3301      	adds	r3, #1
 8018abe:	2208      	movs	r2, #8
 8018ac0:	4619      	mov	r1, r3
 8018ac2:	f006 fab0 	bl	801f026 <memcpy>
            pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2240      	movs	r2, #64	@ 0x40
 8018aca:	751a      	strb	r2, [r3, #20]

            /* Return the UID */
            (void)memcpy(pUid, pDataParams->pUid, PHPAL_SLI15693_UID_LENGTH);
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	330c      	adds	r3, #12
 8018ad0:	2208      	movs	r2, #8
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8018ad6:	f006 faa6 	bl	801f026 <memcpy>
            *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8018ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018adc:	2208      	movs	r2, #8
 8018ade:	701a      	strb	r2, [r3, #0]
 8018ae0:	e099      	b.n	8018c16 <phpalSli15693_Sw_InventoryExt+0x670>
        }
        else
        {
            if ((bFlags & PHPAL_SLI15693_FLAG_OPTION) != 0U)
 8018ae2:	78bb      	ldrb	r3, [r7, #2]
 8018ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	f000 8083 	beq.w	8018bf4 <phpalSli15693_Sw_InventoryExt+0x64e>
            {
                *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8018aee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018af2:	f1c3 0308 	rsb	r3, r3, #8
 8018af6:	b2da      	uxtb	r2, r3
 8018af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018afa:	701a      	strb	r2, [r3, #0]

                /* The response length should not be less than the remaining UID. */
                if(bFirst != 0U)
 8018afc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d018      	beq.n	8018b36 <phpalSli15693_Sw_InventoryExt+0x590>
                {
                    bStoredUidLength = pDataParams->bUidBitLength >> 3U;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	7d1b      	ldrb	r3, [r3, #20]
 8018b08:	08db      	lsrs	r3, r3, #3
 8018b0a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    *pUidLength = PHPAL_SLI15693_UID_LENGTH - bStoredUidLength;
 8018b0e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018b12:	f1c3 0308 	rsb	r3, r3, #8
 8018b16:	b2da      	uxtb	r2, r3
 8018b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b1a:	701a      	strb	r2, [r3, #0]

                    /* Update the UID length if extended. */
                    if((bExtended != 0U) && ((bExtendedOptions & PHPAL_SLI15693_FLAG_UID_MODE) != 0U))
 8018b1c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d008      	beq.n	8018b36 <phpalSli15693_Sw_InventoryExt+0x590>
 8018b24:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018b28:	f003 0302 	and.w	r3, r3, #2
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d002      	beq.n	8018b36 <phpalSli15693_Sw_InventoryExt+0x590>
                    {
                        *pUidLength = PHPAL_SLI15693_UID_LENGTH;
 8018b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b32:	2208      	movs	r2, #8
 8018b34:	701a      	strb	r2, [r3, #0]
                    }
                }
                /* Validate the response length against UID length. */
                if (wRespLength < (*pUidLength))
 8018b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	89fb      	ldrh	r3, [r7, #14]
 8018b3e:	429a      	cmp	r2, r3
 8018b40:	d902      	bls.n	8018b48 <phpalSli15693_Sw_InventoryExt+0x5a2>
                {
                    return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8018b42:	f640 2306 	movw	r3, #2566	@ 0xa06
 8018b46:	e0a5      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
                }

                if (bStoredUidLength < PHPAL_SLI15693_UID_LENGTH)
 8018b48:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018b4c:	2b07      	cmp	r3, #7
 8018b4e:	d843      	bhi.n	8018bd8 <phpalSli15693_Sw_InventoryExt+0x632>
                {
                    if ((*pUidLength) == 0U)
 8018b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d102      	bne.n	8018b5e <phpalSli15693_Sw_InventoryExt+0x5b8>
                    {
                        return PH_ADD_COMPCODE(PH_ERR_PROTOCOL_ERROR, PH_COMP_PAL_SLI15693);
 8018b58:	f640 2306 	movw	r3, #2566	@ 0xa06
 8018b5c:	e09a      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>
                    }
                    /* Return the received (partial) UID */
                    (void)memcpy(pUid, pResp, (size_t)(*pUidLength));
 8018b5e:	6939      	ldr	r1, [r7, #16]
 8018b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	461a      	mov	r2, r3
 8018b66:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8018b68:	f006 fa5d 	bl	801f026 <memcpy>

                    /* We need to merge the contents of the mask buffer and the received data */
                    if ((bMaskBitLength % 8U) != 0u)
 8018b6c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8018b70:	f003 0307 	and.w	r3, r3, #7
 8018b74:	b2db      	uxtb	r3, r3
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d022      	beq.n	8018bc0 <phpalSli15693_Sw_InventoryExt+0x61a>
                    {
                        if (bStoredUidLength < 7U)
 8018b7a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018b7e:	2b06      	cmp	r3, #6
 8018b80:	d80e      	bhi.n	8018ba0 <phpalSli15693_Sw_InventoryExt+0x5fa>
                        {
                            /* copy the UID bytes we received from the card */
                            (void)memcpy(&(pDataParams->pUid[bStoredUidLength + 1U]), &pResp[1], (size_t)(*pUidLength)-1U);
 8018b82:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018b86:	3301      	adds	r3, #1
 8018b88:	3308      	adds	r3, #8
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	4413      	add	r3, r2
 8018b8e:	1d18      	adds	r0, r3, #4
 8018b90:	693b      	ldr	r3, [r7, #16]
 8018b92:	1c59      	adds	r1, r3, #1
 8018b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	3b01      	subs	r3, #1
 8018b9a:	461a      	mov	r2, r3
 8018b9c:	f006 fa43 	bl	801f026 <memcpy>
                        }

                        /* merge mask-bits with received bits */
                        pDataParams->pUid[bStoredUidLength] |= pResp[0];
 8018ba0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018ba4:	687a      	ldr	r2, [r7, #4]
 8018ba6:	4413      	add	r3, r2
 8018ba8:	7b19      	ldrb	r1, [r3, #12]
 8018baa:	693b      	ldr	r3, [r7, #16]
 8018bac:	781a      	ldrb	r2, [r3, #0]
 8018bae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018bb2:	430a      	orrs	r2, r1
 8018bb4:	b2d1      	uxtb	r1, r2
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	4413      	add	r3, r2
 8018bba:	460a      	mov	r2, r1
 8018bbc:	731a      	strb	r2, [r3, #12]
 8018bbe:	e00b      	b.n	8018bd8 <phpalSli15693_Sw_InventoryExt+0x632>
                    }
                    else
                    {
                        /* Copy the UID bytes we received from the card */
                        (void)memcpy(&(pDataParams->pUid[bStoredUidLength]), pResp, *pUidLength);
 8018bc0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8018bc4:	3308      	adds	r3, #8
 8018bc6:	687a      	ldr	r2, [r7, #4]
 8018bc8:	4413      	add	r3, r2
 8018bca:	1d18      	adds	r0, r3, #4
 8018bcc:	6939      	ldr	r1, [r7, #16]
 8018bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	f006 fa27 	bl	801f026 <memcpy>
                    }
                }

                /* Update UID length. */
                pDataParams->bUidBitLength = PHPAL_SLI15693_SW_UID_COMPLETE;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	2240      	movs	r2, #64	@ 0x40
 8018bdc:	751a      	strb	r2, [r3, #20]

                /* Shift pointer and length */
                pResp += *pUidLength;
 8018bde:	693b      	ldr	r3, [r7, #16]
 8018be0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018be2:	7812      	ldrb	r2, [r2, #0]
 8018be4:	4413      	add	r3, r2
 8018be6:	613b      	str	r3, [r7, #16]
                wRespLength = (uint16_t) (wRespLength - *pUidLength);
 8018be8:	89fb      	ldrh	r3, [r7, #14]
 8018bea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018bec:	7812      	ldrb	r2, [r2, #0]
 8018bee:	1a9b      	subs	r3, r3, r2
 8018bf0:	b29b      	uxth	r3, r3
 8018bf2:	81fb      	strh	r3, [r7, #14]
            }
            /* Copy the received data to internal buffer. */
            (void)memcpy(&pData[*pDataLength], pResp, wRespLength);
 8018bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018bf6:	881b      	ldrh	r3, [r3, #0]
 8018bf8:	461a      	mov	r2, r3
 8018bfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018bfc:	4413      	add	r3, r2
 8018bfe:	6939      	ldr	r1, [r7, #16]
 8018c00:	89fa      	ldrh	r2, [r7, #14]
 8018c02:	4618      	mov	r0, r3
 8018c04:	f006 fa0f 	bl	801f026 <memcpy>
            *pDataLength += wRespLength;
 8018c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018c0a:	881a      	ldrh	r2, [r3, #0]
 8018c0c:	89fb      	ldrh	r3, [r7, #14]
 8018c0e:	4413      	add	r3, r2
 8018c10:	b29a      	uxth	r2, r3
 8018c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018c14:	801a      	strh	r2, [r3, #0]
        }

        /* Update the variables to read the remaining data. */
        wCurrBlockNo += wMaxNoBlocks;
 8018c16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018c18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018c1a:	4413      	add	r3, r2
 8018c1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        /* Update the Current blocks to read. */
        wCurrBlocksToRead = wMaxNoBlocks;
 8018c1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018c20:	863b      	strh	r3, [r7, #48]	@ 0x30

        /* Reset the command buffer offset. */
        bCmdOffset = bCmdBufferLen;
 8018c22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018c26:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        /* Set the remaining blocks to read. */
        if((wNoOfPages_Blocks - wCurrBlockNo) < wMaxNoBlocks)
 8018c2a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8018c2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018c30:	1ad2      	subs	r2, r2, r3
 8018c32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018c34:	429a      	cmp	r2, r3
 8018c36:	da04      	bge.n	8018c42 <phpalSli15693_Sw_InventoryExt+0x69c>
        {
            wCurrBlocksToRead = (uint16_t) (wNoOfPages_Blocks - wCurrBlockNo);
 8018c38:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8018c3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018c3e:	1ad3      	subs	r3, r2, r3
 8018c40:	863b      	strh	r3, [r7, #48]	@ 0x30
        }

        /* Set the flag to finish the loop. */
        if((wNoOfPages_Blocks * 4U) == *pDataLength)
 8018c42:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8018c46:	009b      	lsls	r3, r3, #2
 8018c48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018c4a:	8812      	ldrh	r2, [r2, #0]
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	d102      	bne.n	8018c56 <phpalSli15693_Sw_InventoryExt+0x6b0>
        {
            bAllBlocksRead = 1;
 8018c50:	2301      	movs	r3, #1
 8018c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        }

        /* Set First variable. This variable will be used to validate the response only once in case if chaining is enabled. */
        bFirst = PH_OFF;
 8018c56:	2300      	movs	r3, #0
 8018c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    }while(bAllBlocksRead == 0U);
 8018c5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f43f aeb3 	beq.w	80189cc <phpalSli15693_Sw_InventoryExt+0x426>

    /* Clear INVENTORY, AFI and NBSLOTS flag */
    pDataParams->bFlags &= (uint8_t)~(uint8_t)(PHPAL_SLI15693_FLAG_INVENTORY | PHPAL_SLI15693_FLAG_AFI | PHPAL_SLI15693_FLAG_NBSLOTS);
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	7a9b      	ldrb	r3, [r3, #10]
 8018c6a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8018c6e:	b2da      	uxtb	r2, r3
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	729a      	strb	r2, [r3, #10]

    pDataParams->bExplicitlyAddressed = 0;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2200      	movs	r2, #0
 8018c78:	755a      	strb	r2, [r3, #21]

    /* Error check */
    PH_CHECK_SUCCESS(status);
 8018c7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d001      	beq.n	8018c84 <phpalSli15693_Sw_InventoryExt+0x6de>
 8018c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c82:	e007      	b.n	8018c94 <phpalSli15693_Sw_InventoryExt+0x6ee>

    /* set addressed flag */
    pDataParams->bFlags |= PHPAL_SLI15693_FLAG_ADDRESSED;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	7a9b      	ldrb	r3, [r3, #10]
 8018c88:	f043 0320 	orr.w	r3, r3, #32
 8018c8c:	b2da      	uxtb	r2, r3
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	729a      	strb	r2, [r3, #10]

    return PH_ERR_SUCCESS;
 8018c92:	2300      	movs	r3, #0
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3738      	adds	r7, #56	@ 0x38
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}

08018c9c <phDriver_PinRead>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_2：读GPIO引脚状态是高or低电平 */
uint8_t phDriver_PinRead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, phDriver_Pin_Func_t ePinFunc)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
 8018ca4:	460b      	mov	r3, r1
 8018ca6:	807b      	strh	r3, [r7, #2]
 8018ca8:	4613      	mov	r3, r2
 8018caa:	707b      	strb	r3, [r7, #1]
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8018cac:	887b      	ldrh	r3, [r7, #2]
 8018cae:	4619      	mov	r1, r3
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f000 fdd9 	bl	8019868 <HAL_GPIO_ReadPin>
 8018cb6:	4603      	mov	r3, r0
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3708      	adds	r7, #8
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <phDriver_PinWrite>:
    return PH_DRIVER_SUCCESS;
}

/* GPIO FUNC_4：写GPIO引脚 */
void phDriver_PinWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t bValue)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b082      	sub	sp, #8
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
 8018cc8:	460b      	mov	r3, r1
 8018cca:	807b      	strh	r3, [r7, #2]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bValue);
 8018cd0:	787a      	ldrb	r2, [r7, #1]
 8018cd2:	887b      	ldrh	r3, [r7, #2]
 8018cd4:	4619      	mov	r1, r3
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f000 fdde 	bl	8019898 <HAL_GPIO_WritePin>
}
 8018cdc:	bf00      	nop
 8018cde:	3708      	adds	r7, #8
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <phDriver_TimerStart>:
 * PH_DRIVER_TIMER_SECS = 1 (每秒1个单位)
 * PH_DRIVER_TIMER_MILLI_SECS = 1000 (每秒1000个单位)
 * PH_DRIVER_TIMER_MICRO_SECS = 1000000 (每秒1000000个单位)
 */
phStatus_t phDriver_TimerStart(phDriver_Timer_Unit_t eTimerUnit, uint32_t dwTimePeriod, pphDriver_TimerCallBck_t pTimerCallBack)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b084      	sub	sp, #16
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	607a      	str	r2, [r7, #4]
	if(pTimerCallBack == NULL)
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d11d      	bne.n	8018d32 <phDriver_TimerStart+0x4e>
	{
		/* 时间单位都转成微秒 */
	    if(eTimerUnit == PH_DRIVER_TIMER_SECS)
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	2b01      	cmp	r3, #1
 8018cfa:	d108      	bne.n	8018d0e <phDriver_TimerStart+0x2a>
	    {
	    	HAL_Delay(dwTimePeriod * 1000); // s -> ms
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018d02:	fb02 f303 	mul.w	r3, r2, r3
 8018d06:	4618      	mov	r0, r3
 8018d08:	f000 fa80 	bl	801920c <HAL_Delay>
 8018d0c:	e029      	b.n	8018d62 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MILLI_SECS)
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018d14:	d103      	bne.n	8018d1e <phDriver_TimerStart+0x3a>
	    {
	    	HAL_Delay(dwTimePeriod);
 8018d16:	68b8      	ldr	r0, [r7, #8]
 8018d18:	f000 fa78 	bl	801920c <HAL_Delay>
 8018d1c:	e021      	b.n	8018d62 <phDriver_TimerStart+0x7e>
	    }
	    else if(eTimerUnit == PH_DRIVER_TIMER_MICRO_SECS)
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	4a12      	ldr	r2, [pc, #72]	@ (8018d6c <phDriver_TimerStart+0x88>)
 8018d22:	4293      	cmp	r3, r2
 8018d24:	d11d      	bne.n	8018d62 <phDriver_TimerStart+0x7e>
	    {
	    	delay_us(dwTimePeriod);
 8018d26:	68bb      	ldr	r3, [r7, #8]
 8018d28:	b29b      	uxth	r3, r3
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7e8 fd84 	bl	8001838 <delay_us>
 8018d30:	e017      	b.n	8018d62 <phDriver_TimerStart+0x7e>
	    }
	}
    else	/* Call the Timer callback. */
    {
        pTimerIsrCallBack = pTimerCallBack;
 8018d32:	4a0f      	ldr	r2, [pc, #60]	@ (8018d70 <phDriver_TimerStart+0x8c>)
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6013      	str	r3, [r2, #0]

        __HAL_TIM_SET_AUTORELOAD(&htim2, dwTimePeriod-1);   // 替代TIMER_Open的周期设置
 8018d38:	4b0e      	ldr	r3, [pc, #56]	@ (8018d74 <phDriver_TimerStart+0x90>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	68ba      	ldr	r2, [r7, #8]
 8018d3e:	3a01      	subs	r2, #1
 8018d40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	3b01      	subs	r3, #1
 8018d46:	4a0b      	ldr	r2, [pc, #44]	@ (8018d74 <phDriver_TimerStart+0x90>)
 8018d48:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(&htim2, 0);				    // 重置计数器
 8018d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8018d74 <phDriver_TimerStart+0x90>)
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);	 		// 清除中断标志
 8018d52:	4b08      	ldr	r3, [pc, #32]	@ (8018d74 <phDriver_TimerStart+0x90>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	f06f 0201 	mvn.w	r2, #1
 8018d5a:	611a      	str	r2, [r3, #16]

        // 一次性启动定时器并使能中断
        HAL_TIM_Base_Start_IT(&htim2);
 8018d5c:	4805      	ldr	r0, [pc, #20]	@ (8018d74 <phDriver_TimerStart+0x90>)
 8018d5e:	f002 fc4b 	bl	801b5f8 <HAL_TIM_Base_Start_IT>
    }

    return PH_DRIVER_SUCCESS;
 8018d62:	2300      	movs	r3, #0
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	3710      	adds	r7, #16
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	000f4240 	.word	0x000f4240
 8018d70:	20001874 	.word	0x20001874
 8018d74:	200002fc 	.word	0x200002fc

08018d78 <phDriver_TimerStop>:


phStatus_t phDriver_TimerStop(void)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	af00      	add	r7, sp, #0
	 printf("NFC: Timer stop called (HAL_Delay mode - no action needed)\r\n");
 8018d7c:	4802      	ldr	r0, [pc, #8]	@ (8018d88 <phDriver_TimerStop+0x10>)
 8018d7e:	f005 ffe3 	bl	801ed48 <puts>

    return PH_DRIVER_SUCCESS;
 8018d82:	2300      	movs	r3, #0
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	bd80      	pop	{r7, pc}
 8018d88:	08021708 	.word	0x08021708

08018d8c <phbalReg_Init>:
*/
phStatus_t phbalReg_Init(
                                      void * pDataParams,
                                      uint16_t wSizeOfDataParams
                                      )
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	b085      	sub	sp, #20
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	460b      	mov	r3, r1
 8018d96:	807b      	strh	r3, [r7, #2]
	volatile uint32_t delay;

    // 参数检查
    if((pDataParams == NULL) || (sizeof(phbalReg_Type_t) != wSizeOfDataParams))
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d002      	beq.n	8018da4 <phbalReg_Init+0x18>
 8018d9e:	887b      	ldrh	r3, [r7, #2]
 8018da0:	2b04      	cmp	r3, #4
 8018da2:	d002      	beq.n	8018daa <phbalReg_Init+0x1e>
    {
        return (PH_DRIVER_ERROR | PH_COMP_DRIVER);
 8018da4:	f24f 1380 	movw	r3, #61824	@ 0xf180
 8018da8:	e007      	b.n	8018dba <phbalReg_Init+0x2e>
    }

    // 设置BAL层参数:驱动模块的ID和总线是SPI类型
    ((phbalReg_Type_t *)pDataParams)->wId      = PH_COMP_DRIVER | PHBAL_REG_LPCOPEN_SPI_ID;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f24f 120d 	movw	r2, #61709	@ 0xf10d
 8018db0:	801a      	strh	r2, [r3, #0]
    ((phbalReg_Type_t *)pDataParams)->bBalType = PHBAL_REG_TYPE_SPI;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2201      	movs	r2, #1
 8018db6:	709a      	strb	r2, [r3, #2]

    /* Wait Startup time */
    for(delay=0; delay<10000; delay++){}
#endif	// ---NXP原代码

    return PH_DRIVER_SUCCESS;
 8018db8:	2300      	movs	r3, #0
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3714      	adds	r7, #20
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc4:	4770      	bx	lr
	...

08018dc8 <phbalReg_Exchange>:
                                        uint16_t wTxLength,
                                        uint16_t wRxBufSize,
                                        uint8_t * pRxBuffer,
                                        uint16_t * pRxLength
                                        )
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b08a      	sub	sp, #40	@ 0x28
 8018dcc:	af02      	add	r7, sp, #8
 8018dce:	60f8      	str	r0, [r7, #12]
 8018dd0:	607a      	str	r2, [r7, #4]
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	460b      	mov	r3, r1
 8018dd6:	817b      	strh	r3, [r7, #10]
 8018dd8:	4613      	mov	r3, r2
 8018dda:	813b      	strh	r3, [r7, #8]
	uint8_t * pRxBuf = NULL;                    // 实际接收缓存指针
 8018ddc:	2300      	movs	r3, #0
 8018dde:	61fb      	str	r3, [r7, #28]
	uint8_t dummyTxByte = 0xFF;
 8018de0:	23ff      	movs	r3, #255	@ 0xff
 8018de2:	74fb      	strb	r3, [r7, #19]

	/* 只发送不接收 */
	if (pRxBuffer == NULL)
 8018de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d102      	bne.n	8018df0 <phbalReg_Exchange+0x28>
	{
		pRxBuf = NULL;
 8018dea:	2300      	movs	r3, #0
 8018dec:	61fb      	str	r3, [r7, #28]
 8018dee:	e001      	b.n	8018df4 <phbalReg_Exchange+0x2c>
	}
	else /* 接收 */
	{
		pRxBuf = pRxBuffer;
 8018df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018df2:	61fb      	str	r3, [r7, #28]
	}

//1	printf("SPITX>> ");
	for (int i = 0; i < wTxLength; i++)
 8018df4:	2300      	movs	r3, #0
 8018df6:	61bb      	str	r3, [r7, #24]
 8018df8:	e02a      	b.n	8018e50 <phbalReg_Exchange+0x88>
	{
		uint8_t txByte = (pTxBuffer != NULL) ? pTxBuffer[i] : dummyTxByte;	// 发送1字节
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d004      	beq.n	8018e0a <phbalReg_Exchange+0x42>
 8018e00:	69bb      	ldr	r3, [r7, #24]
 8018e02:	687a      	ldr	r2, [r7, #4]
 8018e04:	4413      	add	r3, r2
 8018e06:	781b      	ldrb	r3, [r3, #0]
 8018e08:	e000      	b.n	8018e0c <phbalReg_Exchange+0x44>
 8018e0a:	7cfb      	ldrb	r3, [r7, #19]
 8018e0c:	74bb      	strb	r3, [r7, #18]
		uint8_t rxByte = 0x00;	// 接收1字节
 8018e0e:	2300      	movs	r3, #0
 8018e10:	747b      	strb	r3, [r7, #17]

		// 单字节全双工发送+接收
		if (HAL_SPI_TransmitReceive(&hspi3, &txByte, &rxByte, 1, 100) != HAL_OK)
 8018e12:	f107 0211 	add.w	r2, r7, #17
 8018e16:	f107 0112 	add.w	r1, r7, #18
 8018e1a:	2364      	movs	r3, #100	@ 0x64
 8018e1c:	9300      	str	r3, [sp, #0]
 8018e1e:	2301      	movs	r3, #1
 8018e20:	481e      	ldr	r0, [pc, #120]	@ (8018e9c <phbalReg_Exchange+0xd4>)
 8018e22:	f001 ff9a 	bl	801ad5a <HAL_SPI_TransmitReceive>
 8018e26:	4603      	mov	r3, r0
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d002      	beq.n	8018e32 <phbalReg_Exchange+0x6a>
		{
			return (PH_DRIVER_FAILURE | PH_COMP_DRIVER);
 8018e2c:	f24f 1381 	movw	r3, #61825	@ 0xf181
 8018e30:	e02f      	b.n	8018e92 <phbalReg_Exchange+0xca>
		}

//1		printf("%02X ", txByte);  // 打印发送内容

		if (pRxBuf != NULL && i < wRxBufSize)
 8018e32:	69fb      	ldr	r3, [r7, #28]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d008      	beq.n	8018e4a <phbalReg_Exchange+0x82>
 8018e38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e3a:	69ba      	ldr	r2, [r7, #24]
 8018e3c:	429a      	cmp	r2, r3
 8018e3e:	da04      	bge.n	8018e4a <phbalReg_Exchange+0x82>
		{
			pRxBuf[i] = rxByte;
 8018e40:	69bb      	ldr	r3, [r7, #24]
 8018e42:	69fa      	ldr	r2, [r7, #28]
 8018e44:	4413      	add	r3, r2
 8018e46:	7c7a      	ldrb	r2, [r7, #17]
 8018e48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < wTxLength; i++)
 8018e4a:	69bb      	ldr	r3, [r7, #24]
 8018e4c:	3301      	adds	r3, #1
 8018e4e:	61bb      	str	r3, [r7, #24]
 8018e50:	893b      	ldrh	r3, [r7, #8]
 8018e52:	69ba      	ldr	r2, [r7, #24]
 8018e54:	429a      	cmp	r2, r3
 8018e56:	dbd0      	blt.n	8018dfa <phbalReg_Exchange+0x32>
		}
	}
//1	printf("\n");

	if (pRxBuf != NULL)
 8018e58:	69fb      	ldr	r3, [r7, #28]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d00d      	beq.n	8018e7a <phbalReg_Exchange+0xb2>
	{
//1		printf("SPIRX<< ");
		for (int i = 0; i < wTxLength && i < wRxBufSize; i++)
 8018e5e:	2300      	movs	r3, #0
 8018e60:	617b      	str	r3, [r7, #20]
 8018e62:	e002      	b.n	8018e6a <phbalReg_Exchange+0xa2>
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	3301      	adds	r3, #1
 8018e68:	617b      	str	r3, [r7, #20]
 8018e6a:	893b      	ldrh	r3, [r7, #8]
 8018e6c:	697a      	ldr	r2, [r7, #20]
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	da03      	bge.n	8018e7a <phbalReg_Exchange+0xb2>
 8018e72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e74:	697a      	ldr	r2, [r7, #20]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	dbf4      	blt.n	8018e64 <phbalReg_Exchange+0x9c>
		}
//1		printf("\n");
	}

	// 返回接收到的数据长度
	if (pRxLength != NULL)
 8018e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d007      	beq.n	8018e90 <phbalReg_Exchange+0xc8>
	{
		*pRxLength = (pRxBuf != NULL) ? wTxLength : 0;
 8018e80:	69fb      	ldr	r3, [r7, #28]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d001      	beq.n	8018e8a <phbalReg_Exchange+0xc2>
 8018e86:	893a      	ldrh	r2, [r7, #8]
 8018e88:	e000      	b.n	8018e8c <phbalReg_Exchange+0xc4>
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e8e:	801a      	strh	r2, [r3, #0]
	}

	return PH_DRIVER_SUCCESS;
 8018e90:	2300      	movs	r3, #0
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3720      	adds	r7, #32
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
 8018e9a:	bf00      	nop
 8018e9c:	20000248 	.word	0x20000248

08018ea0 <phOsal_EventCreate>:
//1    return phOsal_InitTickTimer(&phOsal_NullOsSysTickHandler);
    return HAL_InitTick(1);
}

phStatus_t phOsal_EventCreate(phOsal_Event_t *eventHandle, pphOsal_EventObj_t eventObj)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b084      	sub	sp, #16
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	6039      	str	r1, [r7, #0]
    uint32_t bEventIndex = 0;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	60fb      	str	r3, [r7, #12]

    if ((eventHandle == NULL) || (eventObj == NULL))
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d002      	beq.n	8018eba <phOsal_EventCreate+0x1a>
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d102      	bne.n	8018ec0 <phOsal_EventCreate+0x20>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8018eba:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8018ebe:	e033      	b.n	8018f28 <phOsal_EventCreate+0x88>
    }

    PH_OSAL_CHECK_SUCCESS(phOsal_NullOs_GetFreeIndex(&bEventIndex, gdwEventBitMap, PH_OSAL_CONFIG_MAX_NUM_EVENTS));
 8018ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8018f30 <phOsal_EventCreate+0x90>)
 8018ec2:	6819      	ldr	r1, [r3, #0]
 8018ec4:	f107 030c 	add.w	r3, r7, #12
 8018ec8:	2205      	movs	r2, #5
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f000 f8e2 	bl	8019094 <phOsal_NullOs_GetFreeIndex>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d009      	beq.n	8018eea <phOsal_EventCreate+0x4a>
 8018ed6:	4b16      	ldr	r3, [pc, #88]	@ (8018f30 <phOsal_EventCreate+0x90>)
 8018ed8:	6819      	ldr	r1, [r3, #0]
 8018eda:	f107 030c 	add.w	r3, r7, #12
 8018ede:	2205      	movs	r2, #5
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f000 f8d7 	bl	8019094 <phOsal_NullOs_GetFreeIndex>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	e01e      	b.n	8018f28 <phOsal_EventCreate+0x88>

    gdwEvents[bEventIndex] = 0;
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	4a11      	ldr	r2, [pc, #68]	@ (8018f34 <phOsal_EventCreate+0x94>)
 8018eee:	2100      	movs	r1, #0
 8018ef0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    gdwEventBitMap |= (1 << bEventIndex);
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	2201      	movs	r2, #1
 8018ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8018efc:	461a      	mov	r2, r3
 8018efe:	4b0c      	ldr	r3, [pc, #48]	@ (8018f30 <phOsal_EventCreate+0x90>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	4313      	orrs	r3, r2
 8018f04:	4a0a      	ldr	r2, [pc, #40]	@ (8018f30 <phOsal_EventCreate+0x90>)
 8018f06:	6013      	str	r3, [r2, #0]
    *eventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	009b      	lsls	r3, r3, #2
 8018f0c:	4a09      	ldr	r2, [pc, #36]	@ (8018f34 <phOsal_EventCreate+0x94>)
 8018f0e:	441a      	add	r2, r3
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	601a      	str	r2, [r3, #0]
    eventObj->EventHandle = (phOsal_Event_t)(&gdwEvents[bEventIndex]);
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	009b      	lsls	r3, r3, #2
 8018f18:	4a06      	ldr	r2, [pc, #24]	@ (8018f34 <phOsal_EventCreate+0x94>)
 8018f1a:	441a      	add	r2, r3
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	601a      	str	r2, [r3, #0]
    eventObj->dwEventIndex = bEventIndex;
 8018f20:	68fa      	ldr	r2, [r7, #12]
 8018f22:	683b      	ldr	r3, [r7, #0]
 8018f24:	60da      	str	r2, [r3, #12]

    return PH_OSAL_SUCCESS;
 8018f26:	2300      	movs	r3, #0
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	3710      	adds	r7, #16
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	bd80      	pop	{r7, pc}
 8018f30:	20001890 	.word	0x20001890
 8018f34:	2000187c 	.word	0x2000187c

08018f38 <phOsal_EventPend>:

// 事件挂起函数：等待特定事件标志位被设置，类似于RTOS中的事件等待机制
phStatus_t phOsal_EventPend(volatile phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_Ticks_t ticksToWait,
                           phOsal_EventBits_t FlagsToWait, phOsal_EventBits_t *pCurrFlags)
{
 8018f38:	b480      	push	{r7}
 8018f3a:	b087      	sub	sp, #28
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	60f8      	str	r0, [r7, #12]
 8018f40:	607a      	str	r2, [r7, #4]
 8018f42:	603b      	str	r3, [r7, #0]
 8018f44:	460b      	mov	r3, r1
 8018f46:	72fb      	strb	r3, [r7, #11]
	phStatus_t status;

	/* 检查事件句柄是否有效 */
	if((eventHandle == NULL) || ((*eventHandle) == NULL))
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d003      	beq.n	8018f56 <phOsal_EventPend+0x1e>
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d102      	bne.n	8018f5c <phOsal_EventPend+0x24>
	{
	    return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8018f56:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8018f5a:	e02e      	b.n	8018fba <phOsal_EventPend+0x82>
	}

	status = PH_OSAL_IO_TIMEOUT; // 默认设置为超时状态
 8018f5c:	2301      	movs	r3, #1
 8018f5e:	82fb      	strh	r3, [r7, #22]
	    phOsal_Sleep();
	}
	#endif          //1

	//dd1    phOsal_StopTickTimer();
	gbWaitTimedOut = 0;		// 清除超时标志
 8018f60:	4b19      	ldr	r3, [pc, #100]	@ (8018fc8 <phOsal_EventPend+0x90>)
 8018f62:	2200      	movs	r2, #0
 8018f64:	701a      	strb	r2, [r3, #0]

	//dd1    phOsal_EnterCriticalSection();

	/* 返回当前标志位 */
	if (pCurrFlags != NULL)
 8018f66:	6a3b      	ldr	r3, [r7, #32]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d004      	beq.n	8018f76 <phOsal_EventPend+0x3e>
	{
	    *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	681a      	ldr	r2, [r3, #0]
 8018f72:	6a3b      	ldr	r3, [r7, #32]
 8018f74:	601a      	str	r2, [r3, #0]
	}

	/* 清除指定标志位 */
	if (options & E_OS_EVENT_OPT_PEND_CLEAR_ON_EXIT)
 8018f76:	7afb      	ldrb	r3, [r7, #11]
 8018f78:	f003 0304 	and.w	r3, r3, #4
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d00a      	beq.n	8018f96 <phOsal_EventPend+0x5e>
	{
	    (*((uint32_t *)(*eventHandle))) &= (~(FlagsToWait & (*((uint32_t *)(*eventHandle)))));
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	681a      	ldr	r2, [r3, #0]
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	4013      	ands	r3, r2
 8018f8a:	43d9      	mvns	r1, r3
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	400a      	ands	r2, r1
 8018f94:	601a      	str	r2, [r3, #0]
	}
	//dd1    phOsal_ExitCriticalSection();

	return PH_OSAL_ADD_COMPCODE(status, PH_COMP_OSAL);
 8018f96:	8afb      	ldrh	r3, [r7, #22]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d00d      	beq.n	8018fb8 <phOsal_EventPend+0x80>
 8018f9c:	8afb      	ldrh	r3, [r7, #22]
 8018f9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d108      	bne.n	8018fb8 <phOsal_EventPend+0x80>
 8018fa6:	8afb      	ldrh	r3, [r7, #22]
 8018fa8:	b2db      	uxtb	r3, r3
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8018fb0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8018fb4:	b29b      	uxth	r3, r3
 8018fb6:	e000      	b.n	8018fba <phOsal_EventPend+0x82>
 8018fb8:	8afb      	ldrh	r3, [r7, #22]
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	371c      	adds	r7, #28
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc4:	4770      	bx	lr
 8018fc6:	bf00      	nop
 8018fc8:	20001878 	.word	0x20001878

08018fcc <phOsal_EventPost>:

phStatus_t phOsal_EventPost(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToPost,
    phOsal_EventBits_t *pCurrFlags)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	60f8      	str	r0, [r7, #12]
 8018fd4:	607a      	str	r2, [r7, #4]
 8018fd6:	603b      	str	r3, [r7, #0]
 8018fd8:	460b      	mov	r3, r1
 8018fda:	72fb      	strb	r3, [r7, #11]
	printf("POST: 0x%08lX\r\n", FlagsToPost);  // 添加这行
 8018fdc:	6879      	ldr	r1, [r7, #4]
 8018fde:	4815      	ldr	r0, [pc, #84]	@ (8019034 <phOsal_EventPost+0x68>)
 8018fe0:	f005 fe42 	bl	801ec68 <iprintf>

    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d003      	beq.n	8018ff2 <phOsal_EventPost+0x26>
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d105      	bne.n	8018ffe <phOsal_EventPost+0x32>
    {
    	printf("POST NULL\r\n");  // 添加这行
 8018ff2:	4811      	ldr	r0, [pc, #68]	@ (8019038 <phOsal_EventPost+0x6c>)
 8018ff4:	f005 fea8 	bl	801ed48 <puts>
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 8018ff8:	f24f 0327 	movw	r3, #61479	@ 0xf027
 8018ffc:	e016      	b.n	801902c <phOsal_EventPost+0x60>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 8018ffe:	f000 f879 	bl	80190f4 <phOsal_EnterCriticalSection>

    /* Set the events. */
    (*((uint32_t *)(*eventHandle))) |= FlagsToPost;
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	6819      	ldr	r1, [r3, #0]
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	687a      	ldr	r2, [r7, #4]
 801900e:	430a      	orrs	r2, r1
 8019010:	601a      	str	r2, [r3, #0]

    if (pCurrFlags != NULL)
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d004      	beq.n	8019022 <phOsal_EventPost+0x56>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	681a      	ldr	r2, [r3, #0]
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	601a      	str	r2, [r3, #0]
    }

    /* Exit Critical Section */
    phOsal_ExitCriticalSection();
 8019022:	f000 f86f 	bl	8019104 <phOsal_ExitCriticalSection>

    phOsal_WakeUp();
 8019026:	f000 f875 	bl	8019114 <phOsal_WakeUp>

    return PH_OSAL_SUCCESS;
 801902a:	2300      	movs	r3, #0

}
 801902c:	4618      	mov	r0, r3
 801902e:	3710      	adds	r7, #16
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	08021744 	.word	0x08021744
 8019038:	08021754 	.word	0x08021754

0801903c <phOsal_EventClear>:

phStatus_t phOsal_EventClear(phOsal_Event_t * eventHandle, phOsal_EventOpt_t options, phOsal_EventBits_t FlagsToClear,
    phOsal_EventBits_t *pCurrFlags)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	607a      	str	r2, [r7, #4]
 8019046:	603b      	str	r3, [r7, #0]
 8019048:	460b      	mov	r3, r1
 801904a:	72fb      	strb	r3, [r7, #11]
    if((eventHandle == NULL) || ((*eventHandle) == NULL))
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d003      	beq.n	801905a <phOsal_EventClear+0x1e>
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d102      	bne.n	8019060 <phOsal_EventClear+0x24>
    {
        return PH_OSAL_ADD_COMPCODE(PH_OSAL_ERROR, PH_COMP_OSAL);
 801905a:	f24f 0327 	movw	r3, #61479	@ 0xf027
 801905e:	e015      	b.n	801908c <phOsal_EventClear+0x50>
    }

    /* Enter Critical Section */
    phOsal_EnterCriticalSection();
 8019060:	f000 f848 	bl	80190f4 <phOsal_EnterCriticalSection>

    if (pCurrFlags != NULL)
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d004      	beq.n	8019074 <phOsal_EventClear+0x38>
    {
        *pCurrFlags = (*((uint32_t *)(*eventHandle)));
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	681a      	ldr	r2, [r3, #0]
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	601a      	str	r2, [r3, #0]
    }

    (*((uint32_t *)(*eventHandle))) &= (~FlagsToClear);
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	6819      	ldr	r1, [r3, #0]
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	43da      	mvns	r2, r3
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	400a      	ands	r2, r1
 8019084:	601a      	str	r2, [r3, #0]

    /* Exit Critical Section. */
    phOsal_ExitCriticalSection();
 8019086:	f000 f83d 	bl	8019104 <phOsal_ExitCriticalSection>

    return PH_OSAL_SUCCESS;
 801908a:	2300      	movs	r3, #0
}
 801908c:	4618      	mov	r0, r3
 801908e:	3710      	adds	r7, #16
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}

08019094 <phOsal_NullOs_GetFreeIndex>:
{
    return (PH_OSAL_UNSUPPORTED_COMMAND | PH_COMP_OSAL);
}

static phStatus_t phOsal_NullOs_GetFreeIndex(uint32_t * dwFreeIndex, uint32_t dwBitMap, uint32_t dwMaxLimit)
{
 8019094:	b480      	push	{r7}
 8019096:	b087      	sub	sp, #28
 8019098:	af00      	add	r7, sp, #0
 801909a:	60f8      	str	r0, [r7, #12]
 801909c:	60b9      	str	r1, [r7, #8]
 801909e:	607a      	str	r2, [r7, #4]
    phStatus_t status;

    (*dwFreeIndex) = 0;
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	2200      	movs	r2, #0
 80190a4:	601a      	str	r2, [r3, #0]

    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 80190a6:	e004      	b.n	80190b2 <phOsal_NullOs_GetFreeIndex+0x1e>
    {
        (*dwFreeIndex)++;
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	1c5a      	adds	r2, r3, #1
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	601a      	str	r2, [r3, #0]
    while(((1 << (*dwFreeIndex)) & dwBitMap) && ((*dwFreeIndex) < dwMaxLimit))
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	2201      	movs	r2, #1
 80190b8:	fa02 f303 	lsl.w	r3, r2, r3
 80190bc:	461a      	mov	r2, r3
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	4013      	ands	r3, r2
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d004      	beq.n	80190d0 <phOsal_NullOs_GetFreeIndex+0x3c>
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	687a      	ldr	r2, [r7, #4]
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d8eb      	bhi.n	80190a8 <phOsal_NullOs_GetFreeIndex+0x14>
    }

    if (*dwFreeIndex == dwMaxLimit)
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	687a      	ldr	r2, [r7, #4]
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d103      	bne.n	80190e2 <phOsal_NullOs_GetFreeIndex+0x4e>
    {
        status = (PH_OSAL_ERROR | PH_COMP_OSAL);
 80190da:	f24f 0327 	movw	r3, #61479	@ 0xf027
 80190de:	82fb      	strh	r3, [r7, #22]
 80190e0:	e001      	b.n	80190e6 <phOsal_NullOs_GetFreeIndex+0x52>
    }
    else
    {
        status = PH_OSAL_SUCCESS;
 80190e2:	2300      	movs	r3, #0
 80190e4:	82fb      	strh	r3, [r7, #22]
    }

    return status;
 80190e6:	8afb      	ldrh	r3, [r7, #22]
}
 80190e8:	4618      	mov	r0, r3
 80190ea:	371c      	adds	r7, #28
 80190ec:	46bd      	mov	sp, r7
 80190ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f2:	4770      	bx	lr

080190f4 <phOsal_EnterCriticalSection>:

    return PH_OSAL_SUCCESS;
}

void phOsal_EnterCriticalSection(void)
{
 80190f4:	b480      	push	{r7}
 80190f6:	af00      	add	r7, sp, #0
    __DISABLE_IRQ();
 80190f8:	b672      	cpsid	i
}
 80190fa:	bf00      	nop
 80190fc:	46bd      	mov	sp, r7
 80190fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019102:	4770      	bx	lr

08019104 <phOsal_ExitCriticalSection>:

void phOsal_ExitCriticalSection(void)
{
 8019104:	b480      	push	{r7}
 8019106:	af00      	add	r7, sp, #0
    __ENABLE_IRQ();
 8019108:	b662      	cpsie	i
}
 801910a:	bf00      	nop
 801910c:	46bd      	mov	sp, r7
 801910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019112:	4770      	bx	lr

08019114 <phOsal_WakeUp>:
    // __WFE();
    for(volatile int i = 0; i < 1000; i++);
}

void phOsal_WakeUp(void)
{
 8019114:	b480      	push	{r7}
 8019116:	af00      	add	r7, sp, #0
    __SEV();
 8019118:	bf40      	sev
}
 801911a:	bf00      	nop
 801911c:	46bd      	mov	sp, r7
 801911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019122:	4770      	bx	lr

08019124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801912a:	2300      	movs	r3, #0
 801912c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801912e:	2003      	movs	r0, #3
 8019130:	f000 f960 	bl	80193f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8019134:	2001      	movs	r0, #1
 8019136:	f000 f80d 	bl	8019154 <HAL_InitTick>
 801913a:	4603      	mov	r3, r0
 801913c:	2b00      	cmp	r3, #0
 801913e:	d002      	beq.n	8019146 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8019140:	2301      	movs	r3, #1
 8019142:	71fb      	strb	r3, [r7, #7]
 8019144:	e001      	b.n	801914a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8019146:	f7e8 f895 	bl	8001274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801914a:	79fb      	ldrb	r3, [r7, #7]
}
 801914c:	4618      	mov	r0, r3
 801914e:	3708      	adds	r7, #8
 8019150:	46bd      	mov	sp, r7
 8019152:	bd80      	pop	{r7, pc}

08019154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b084      	sub	sp, #16
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801915c:	2300      	movs	r3, #0
 801915e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8019160:	4b17      	ldr	r3, [pc, #92]	@ (80191c0 <HAL_InitTick+0x6c>)
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d023      	beq.n	80191b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8019168:	4b16      	ldr	r3, [pc, #88]	@ (80191c4 <HAL_InitTick+0x70>)
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	4b14      	ldr	r3, [pc, #80]	@ (80191c0 <HAL_InitTick+0x6c>)
 801916e:	781b      	ldrb	r3, [r3, #0]
 8019170:	4619      	mov	r1, r3
 8019172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019176:	fbb3 f3f1 	udiv	r3, r3, r1
 801917a:	fbb2 f3f3 	udiv	r3, r2, r3
 801917e:	4618      	mov	r0, r3
 8019180:	f000 f96d 	bl	801945e <HAL_SYSTICK_Config>
 8019184:	4603      	mov	r3, r0
 8019186:	2b00      	cmp	r3, #0
 8019188:	d10f      	bne.n	80191aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2b0f      	cmp	r3, #15
 801918e:	d809      	bhi.n	80191a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019190:	2200      	movs	r2, #0
 8019192:	6879      	ldr	r1, [r7, #4]
 8019194:	f04f 30ff 	mov.w	r0, #4294967295
 8019198:	f000 f937 	bl	801940a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801919c:	4a0a      	ldr	r2, [pc, #40]	@ (80191c8 <HAL_InitTick+0x74>)
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	6013      	str	r3, [r2, #0]
 80191a2:	e007      	b.n	80191b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80191a4:	2301      	movs	r3, #1
 80191a6:	73fb      	strb	r3, [r7, #15]
 80191a8:	e004      	b.n	80191b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80191aa:	2301      	movs	r3, #1
 80191ac:	73fb      	strb	r3, [r7, #15]
 80191ae:	e001      	b.n	80191b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80191b0:	2301      	movs	r3, #1
 80191b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80191b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80191b6:	4618      	mov	r0, r3
 80191b8:	3710      	adds	r7, #16
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop
 80191c0:	20000060 	.word	0x20000060
 80191c4:	20000000 	.word	0x20000000
 80191c8:	2000005c 	.word	0x2000005c

080191cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80191cc:	b480      	push	{r7}
 80191ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80191d0:	4b06      	ldr	r3, [pc, #24]	@ (80191ec <HAL_IncTick+0x20>)
 80191d2:	781b      	ldrb	r3, [r3, #0]
 80191d4:	461a      	mov	r2, r3
 80191d6:	4b06      	ldr	r3, [pc, #24]	@ (80191f0 <HAL_IncTick+0x24>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	4413      	add	r3, r2
 80191dc:	4a04      	ldr	r2, [pc, #16]	@ (80191f0 <HAL_IncTick+0x24>)
 80191de:	6013      	str	r3, [r2, #0]
}
 80191e0:	bf00      	nop
 80191e2:	46bd      	mov	sp, r7
 80191e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e8:	4770      	bx	lr
 80191ea:	bf00      	nop
 80191ec:	20000060 	.word	0x20000060
 80191f0:	20001894 	.word	0x20001894

080191f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80191f4:	b480      	push	{r7}
 80191f6:	af00      	add	r7, sp, #0
  return uwTick;
 80191f8:	4b03      	ldr	r3, [pc, #12]	@ (8019208 <HAL_GetTick+0x14>)
 80191fa:	681b      	ldr	r3, [r3, #0]
}
 80191fc:	4618      	mov	r0, r3
 80191fe:	46bd      	mov	sp, r7
 8019200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019204:	4770      	bx	lr
 8019206:	bf00      	nop
 8019208:	20001894 	.word	0x20001894

0801920c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019214:	f7ff ffee 	bl	80191f4 <HAL_GetTick>
 8019218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019224:	d005      	beq.n	8019232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8019226:	4b0a      	ldr	r3, [pc, #40]	@ (8019250 <HAL_Delay+0x44>)
 8019228:	781b      	ldrb	r3, [r3, #0]
 801922a:	461a      	mov	r2, r3
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	4413      	add	r3, r2
 8019230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019232:	bf00      	nop
 8019234:	f7ff ffde 	bl	80191f4 <HAL_GetTick>
 8019238:	4602      	mov	r2, r0
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	1ad3      	subs	r3, r2, r3
 801923e:	68fa      	ldr	r2, [r7, #12]
 8019240:	429a      	cmp	r2, r3
 8019242:	d8f7      	bhi.n	8019234 <HAL_Delay+0x28>
  {
  }
}
 8019244:	bf00      	nop
 8019246:	bf00      	nop
 8019248:	3710      	adds	r7, #16
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}
 801924e:	bf00      	nop
 8019250:	20000060 	.word	0x20000060

08019254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019254:	b480      	push	{r7}
 8019256:	b085      	sub	sp, #20
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	f003 0307 	and.w	r3, r3, #7
 8019262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019264:	4b0c      	ldr	r3, [pc, #48]	@ (8019298 <__NVIC_SetPriorityGrouping+0x44>)
 8019266:	68db      	ldr	r3, [r3, #12]
 8019268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801926a:	68ba      	ldr	r2, [r7, #8]
 801926c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019270:	4013      	ands	r3, r2
 8019272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019278:	68bb      	ldr	r3, [r7, #8]
 801927a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801927c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8019280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019286:	4a04      	ldr	r2, [pc, #16]	@ (8019298 <__NVIC_SetPriorityGrouping+0x44>)
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	60d3      	str	r3, [r2, #12]
}
 801928c:	bf00      	nop
 801928e:	3714      	adds	r7, #20
 8019290:	46bd      	mov	sp, r7
 8019292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019296:	4770      	bx	lr
 8019298:	e000ed00 	.word	0xe000ed00

0801929c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801929c:	b480      	push	{r7}
 801929e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80192a0:	4b04      	ldr	r3, [pc, #16]	@ (80192b4 <__NVIC_GetPriorityGrouping+0x18>)
 80192a2:	68db      	ldr	r3, [r3, #12]
 80192a4:	0a1b      	lsrs	r3, r3, #8
 80192a6:	f003 0307 	and.w	r3, r3, #7
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	46bd      	mov	sp, r7
 80192ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b2:	4770      	bx	lr
 80192b4:	e000ed00 	.word	0xe000ed00

080192b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80192b8:	b480      	push	{r7}
 80192ba:	b083      	sub	sp, #12
 80192bc:	af00      	add	r7, sp, #0
 80192be:	4603      	mov	r3, r0
 80192c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80192c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	db0b      	blt.n	80192e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80192ca:	79fb      	ldrb	r3, [r7, #7]
 80192cc:	f003 021f 	and.w	r2, r3, #31
 80192d0:	4907      	ldr	r1, [pc, #28]	@ (80192f0 <__NVIC_EnableIRQ+0x38>)
 80192d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192d6:	095b      	lsrs	r3, r3, #5
 80192d8:	2001      	movs	r0, #1
 80192da:	fa00 f202 	lsl.w	r2, r0, r2
 80192de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80192e2:	bf00      	nop
 80192e4:	370c      	adds	r7, #12
 80192e6:	46bd      	mov	sp, r7
 80192e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ec:	4770      	bx	lr
 80192ee:	bf00      	nop
 80192f0:	e000e100 	.word	0xe000e100

080192f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80192f4:	b480      	push	{r7}
 80192f6:	b083      	sub	sp, #12
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	4603      	mov	r3, r0
 80192fc:	6039      	str	r1, [r7, #0]
 80192fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019304:	2b00      	cmp	r3, #0
 8019306:	db0a      	blt.n	801931e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	b2da      	uxtb	r2, r3
 801930c:	490c      	ldr	r1, [pc, #48]	@ (8019340 <__NVIC_SetPriority+0x4c>)
 801930e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019312:	0112      	lsls	r2, r2, #4
 8019314:	b2d2      	uxtb	r2, r2
 8019316:	440b      	add	r3, r1
 8019318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801931c:	e00a      	b.n	8019334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	b2da      	uxtb	r2, r3
 8019322:	4908      	ldr	r1, [pc, #32]	@ (8019344 <__NVIC_SetPriority+0x50>)
 8019324:	79fb      	ldrb	r3, [r7, #7]
 8019326:	f003 030f 	and.w	r3, r3, #15
 801932a:	3b04      	subs	r3, #4
 801932c:	0112      	lsls	r2, r2, #4
 801932e:	b2d2      	uxtb	r2, r2
 8019330:	440b      	add	r3, r1
 8019332:	761a      	strb	r2, [r3, #24]
}
 8019334:	bf00      	nop
 8019336:	370c      	adds	r7, #12
 8019338:	46bd      	mov	sp, r7
 801933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933e:	4770      	bx	lr
 8019340:	e000e100 	.word	0xe000e100
 8019344:	e000ed00 	.word	0xe000ed00

08019348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019348:	b480      	push	{r7}
 801934a:	b089      	sub	sp, #36	@ 0x24
 801934c:	af00      	add	r7, sp, #0
 801934e:	60f8      	str	r0, [r7, #12]
 8019350:	60b9      	str	r1, [r7, #8]
 8019352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	f003 0307 	and.w	r3, r3, #7
 801935a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801935c:	69fb      	ldr	r3, [r7, #28]
 801935e:	f1c3 0307 	rsb	r3, r3, #7
 8019362:	2b04      	cmp	r3, #4
 8019364:	bf28      	it	cs
 8019366:	2304      	movcs	r3, #4
 8019368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801936a:	69fb      	ldr	r3, [r7, #28]
 801936c:	3304      	adds	r3, #4
 801936e:	2b06      	cmp	r3, #6
 8019370:	d902      	bls.n	8019378 <NVIC_EncodePriority+0x30>
 8019372:	69fb      	ldr	r3, [r7, #28]
 8019374:	3b03      	subs	r3, #3
 8019376:	e000      	b.n	801937a <NVIC_EncodePriority+0x32>
 8019378:	2300      	movs	r3, #0
 801937a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801937c:	f04f 32ff 	mov.w	r2, #4294967295
 8019380:	69bb      	ldr	r3, [r7, #24]
 8019382:	fa02 f303 	lsl.w	r3, r2, r3
 8019386:	43da      	mvns	r2, r3
 8019388:	68bb      	ldr	r3, [r7, #8]
 801938a:	401a      	ands	r2, r3
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019390:	f04f 31ff 	mov.w	r1, #4294967295
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	fa01 f303 	lsl.w	r3, r1, r3
 801939a:	43d9      	mvns	r1, r3
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80193a0:	4313      	orrs	r3, r2
         );
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	3724      	adds	r7, #36	@ 0x24
 80193a6:	46bd      	mov	sp, r7
 80193a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ac:	4770      	bx	lr
	...

080193b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	3b01      	subs	r3, #1
 80193bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80193c0:	d301      	bcc.n	80193c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80193c2:	2301      	movs	r3, #1
 80193c4:	e00f      	b.n	80193e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80193c6:	4a0a      	ldr	r2, [pc, #40]	@ (80193f0 <SysTick_Config+0x40>)
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	3b01      	subs	r3, #1
 80193cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80193ce:	210f      	movs	r1, #15
 80193d0:	f04f 30ff 	mov.w	r0, #4294967295
 80193d4:	f7ff ff8e 	bl	80192f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80193d8:	4b05      	ldr	r3, [pc, #20]	@ (80193f0 <SysTick_Config+0x40>)
 80193da:	2200      	movs	r2, #0
 80193dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80193de:	4b04      	ldr	r3, [pc, #16]	@ (80193f0 <SysTick_Config+0x40>)
 80193e0:	2207      	movs	r2, #7
 80193e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80193e4:	2300      	movs	r3, #0
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	3708      	adds	r7, #8
 80193ea:	46bd      	mov	sp, r7
 80193ec:	bd80      	pop	{r7, pc}
 80193ee:	bf00      	nop
 80193f0:	e000e010 	.word	0xe000e010

080193f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b082      	sub	sp, #8
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80193fc:	6878      	ldr	r0, [r7, #4]
 80193fe:	f7ff ff29 	bl	8019254 <__NVIC_SetPriorityGrouping>
}
 8019402:	bf00      	nop
 8019404:	3708      	adds	r7, #8
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}

0801940a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801940a:	b580      	push	{r7, lr}
 801940c:	b086      	sub	sp, #24
 801940e:	af00      	add	r7, sp, #0
 8019410:	4603      	mov	r3, r0
 8019412:	60b9      	str	r1, [r7, #8]
 8019414:	607a      	str	r2, [r7, #4]
 8019416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8019418:	2300      	movs	r3, #0
 801941a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801941c:	f7ff ff3e 	bl	801929c <__NVIC_GetPriorityGrouping>
 8019420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019422:	687a      	ldr	r2, [r7, #4]
 8019424:	68b9      	ldr	r1, [r7, #8]
 8019426:	6978      	ldr	r0, [r7, #20]
 8019428:	f7ff ff8e 	bl	8019348 <NVIC_EncodePriority>
 801942c:	4602      	mov	r2, r0
 801942e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019432:	4611      	mov	r1, r2
 8019434:	4618      	mov	r0, r3
 8019436:	f7ff ff5d 	bl	80192f4 <__NVIC_SetPriority>
}
 801943a:	bf00      	nop
 801943c:	3718      	adds	r7, #24
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}

08019442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019442:	b580      	push	{r7, lr}
 8019444:	b082      	sub	sp, #8
 8019446:	af00      	add	r7, sp, #0
 8019448:	4603      	mov	r3, r0
 801944a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801944c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019450:	4618      	mov	r0, r3
 8019452:	f7ff ff31 	bl	80192b8 <__NVIC_EnableIRQ>
}
 8019456:	bf00      	nop
 8019458:	3708      	adds	r7, #8
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}

0801945e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801945e:	b580      	push	{r7, lr}
 8019460:	b082      	sub	sp, #8
 8019462:	af00      	add	r7, sp, #0
 8019464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f7ff ffa2 	bl	80193b0 <SysTick_Config>
 801946c:	4603      	mov	r3, r0
}
 801946e:	4618      	mov	r0, r3
 8019470:	3708      	adds	r7, #8
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}

08019476 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8019476:	b480      	push	{r7}
 8019478:	b085      	sub	sp, #20
 801947a:	af00      	add	r7, sp, #0
 801947c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801947e:	2300      	movs	r3, #0
 8019480:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8019488:	b2db      	uxtb	r3, r3
 801948a:	2b02      	cmp	r3, #2
 801948c:	d008      	beq.n	80194a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	2204      	movs	r2, #4
 8019492:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	2200      	movs	r2, #0
 8019498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801949c:	2301      	movs	r3, #1
 801949e:	e022      	b.n	80194e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	681a      	ldr	r2, [r3, #0]
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	f022 020e 	bic.w	r2, r2, #14
 80194ae:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	681a      	ldr	r2, [r3, #0]
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	f022 0201 	bic.w	r2, r2, #1
 80194be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80194c4:	f003 021c 	and.w	r2, r3, #28
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80194cc:	2101      	movs	r1, #1
 80194ce:	fa01 f202 	lsl.w	r2, r1, r2
 80194d2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	2201      	movs	r2, #1
 80194d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	2200      	movs	r2, #0
 80194e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80194e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80194e6:	4618      	mov	r0, r3
 80194e8:	3714      	adds	r7, #20
 80194ea:	46bd      	mov	sp, r7
 80194ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f0:	4770      	bx	lr

080194f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80194f2:	b580      	push	{r7, lr}
 80194f4:	b084      	sub	sp, #16
 80194f6:	af00      	add	r7, sp, #0
 80194f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80194fa:	2300      	movs	r3, #0
 80194fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8019504:	b2db      	uxtb	r3, r3
 8019506:	2b02      	cmp	r3, #2
 8019508:	d005      	beq.n	8019516 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	2204      	movs	r2, #4
 801950e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8019510:	2301      	movs	r3, #1
 8019512:	73fb      	strb	r3, [r7, #15]
 8019514:	e029      	b.n	801956a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	681a      	ldr	r2, [r3, #0]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	f022 020e 	bic.w	r2, r2, #14
 8019524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	681a      	ldr	r2, [r3, #0]
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	f022 0201 	bic.w	r2, r2, #1
 8019534:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801953a:	f003 021c 	and.w	r2, r3, #28
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019542:	2101      	movs	r1, #1
 8019544:	fa01 f202 	lsl.w	r2, r1, r2
 8019548:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	2201      	movs	r2, #1
 801954e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2200      	movs	r2, #0
 8019556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801955e:	2b00      	cmp	r3, #0
 8019560:	d003      	beq.n	801956a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019566:	6878      	ldr	r0, [r7, #4]
 8019568:	4798      	blx	r3
    }
  }
  return status;
 801956a:	7bfb      	ldrb	r3, [r7, #15]
}
 801956c:	4618      	mov	r0, r3
 801956e:	3710      	adds	r7, #16
 8019570:	46bd      	mov	sp, r7
 8019572:	bd80      	pop	{r7, pc}

08019574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019574:	b480      	push	{r7}
 8019576:	b087      	sub	sp, #28
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
 801957c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801957e:	2300      	movs	r3, #0
 8019580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8019582:	e154      	b.n	801982e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	681a      	ldr	r2, [r3, #0]
 8019588:	2101      	movs	r1, #1
 801958a:	697b      	ldr	r3, [r7, #20]
 801958c:	fa01 f303 	lsl.w	r3, r1, r3
 8019590:	4013      	ands	r3, r2
 8019592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	2b00      	cmp	r3, #0
 8019598:	f000 8146 	beq.w	8019828 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	685b      	ldr	r3, [r3, #4]
 80195a0:	f003 0303 	and.w	r3, r3, #3
 80195a4:	2b01      	cmp	r3, #1
 80195a6:	d005      	beq.n	80195b4 <HAL_GPIO_Init+0x40>
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	685b      	ldr	r3, [r3, #4]
 80195ac:	f003 0303 	and.w	r3, r3, #3
 80195b0:	2b02      	cmp	r3, #2
 80195b2:	d130      	bne.n	8019616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	689b      	ldr	r3, [r3, #8]
 80195b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80195ba:	697b      	ldr	r3, [r7, #20]
 80195bc:	005b      	lsls	r3, r3, #1
 80195be:	2203      	movs	r2, #3
 80195c0:	fa02 f303 	lsl.w	r3, r2, r3
 80195c4:	43db      	mvns	r3, r3
 80195c6:	693a      	ldr	r2, [r7, #16]
 80195c8:	4013      	ands	r3, r2
 80195ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	68da      	ldr	r2, [r3, #12]
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	005b      	lsls	r3, r3, #1
 80195d4:	fa02 f303 	lsl.w	r3, r2, r3
 80195d8:	693a      	ldr	r2, [r7, #16]
 80195da:	4313      	orrs	r3, r2
 80195dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	693a      	ldr	r2, [r7, #16]
 80195e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80195ea:	2201      	movs	r2, #1
 80195ec:	697b      	ldr	r3, [r7, #20]
 80195ee:	fa02 f303 	lsl.w	r3, r2, r3
 80195f2:	43db      	mvns	r3, r3
 80195f4:	693a      	ldr	r2, [r7, #16]
 80195f6:	4013      	ands	r3, r2
 80195f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	091b      	lsrs	r3, r3, #4
 8019600:	f003 0201 	and.w	r2, r3, #1
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	fa02 f303 	lsl.w	r3, r2, r3
 801960a:	693a      	ldr	r2, [r7, #16]
 801960c:	4313      	orrs	r3, r2
 801960e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	693a      	ldr	r2, [r7, #16]
 8019614:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	f003 0303 	and.w	r3, r3, #3
 801961e:	2b03      	cmp	r3, #3
 8019620:	d017      	beq.n	8019652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	68db      	ldr	r3, [r3, #12]
 8019626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019628:	697b      	ldr	r3, [r7, #20]
 801962a:	005b      	lsls	r3, r3, #1
 801962c:	2203      	movs	r2, #3
 801962e:	fa02 f303 	lsl.w	r3, r2, r3
 8019632:	43db      	mvns	r3, r3
 8019634:	693a      	ldr	r2, [r7, #16]
 8019636:	4013      	ands	r3, r2
 8019638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	689a      	ldr	r2, [r3, #8]
 801963e:	697b      	ldr	r3, [r7, #20]
 8019640:	005b      	lsls	r3, r3, #1
 8019642:	fa02 f303 	lsl.w	r3, r2, r3
 8019646:	693a      	ldr	r2, [r7, #16]
 8019648:	4313      	orrs	r3, r2
 801964a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	693a      	ldr	r2, [r7, #16]
 8019650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	f003 0303 	and.w	r3, r3, #3
 801965a:	2b02      	cmp	r3, #2
 801965c:	d123      	bne.n	80196a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801965e:	697b      	ldr	r3, [r7, #20]
 8019660:	08da      	lsrs	r2, r3, #3
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	3208      	adds	r2, #8
 8019666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801966a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	f003 0307 	and.w	r3, r3, #7
 8019672:	009b      	lsls	r3, r3, #2
 8019674:	220f      	movs	r2, #15
 8019676:	fa02 f303 	lsl.w	r3, r2, r3
 801967a:	43db      	mvns	r3, r3
 801967c:	693a      	ldr	r2, [r7, #16]
 801967e:	4013      	ands	r3, r2
 8019680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8019682:	683b      	ldr	r3, [r7, #0]
 8019684:	691a      	ldr	r2, [r3, #16]
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	f003 0307 	and.w	r3, r3, #7
 801968c:	009b      	lsls	r3, r3, #2
 801968e:	fa02 f303 	lsl.w	r3, r2, r3
 8019692:	693a      	ldr	r2, [r7, #16]
 8019694:	4313      	orrs	r3, r2
 8019696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8019698:	697b      	ldr	r3, [r7, #20]
 801969a:	08da      	lsrs	r2, r3, #3
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	3208      	adds	r2, #8
 80196a0:	6939      	ldr	r1, [r7, #16]
 80196a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	005b      	lsls	r3, r3, #1
 80196b0:	2203      	movs	r2, #3
 80196b2:	fa02 f303 	lsl.w	r3, r2, r3
 80196b6:	43db      	mvns	r3, r3
 80196b8:	693a      	ldr	r2, [r7, #16]
 80196ba:	4013      	ands	r3, r2
 80196bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	f003 0203 	and.w	r2, r3, #3
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	005b      	lsls	r3, r3, #1
 80196ca:	fa02 f303 	lsl.w	r3, r2, r3
 80196ce:	693a      	ldr	r2, [r7, #16]
 80196d0:	4313      	orrs	r3, r2
 80196d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	693a      	ldr	r2, [r7, #16]
 80196d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	685b      	ldr	r3, [r3, #4]
 80196de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	f000 80a0 	beq.w	8019828 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80196e8:	4b58      	ldr	r3, [pc, #352]	@ (801984c <HAL_GPIO_Init+0x2d8>)
 80196ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80196ec:	4a57      	ldr	r2, [pc, #348]	@ (801984c <HAL_GPIO_Init+0x2d8>)
 80196ee:	f043 0301 	orr.w	r3, r3, #1
 80196f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80196f4:	4b55      	ldr	r3, [pc, #340]	@ (801984c <HAL_GPIO_Init+0x2d8>)
 80196f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80196f8:	f003 0301 	and.w	r3, r3, #1
 80196fc:	60bb      	str	r3, [r7, #8]
 80196fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8019700:	4a53      	ldr	r2, [pc, #332]	@ (8019850 <HAL_GPIO_Init+0x2dc>)
 8019702:	697b      	ldr	r3, [r7, #20]
 8019704:	089b      	lsrs	r3, r3, #2
 8019706:	3302      	adds	r3, #2
 8019708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801970c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	f003 0303 	and.w	r3, r3, #3
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	220f      	movs	r2, #15
 8019718:	fa02 f303 	lsl.w	r3, r2, r3
 801971c:	43db      	mvns	r3, r3
 801971e:	693a      	ldr	r2, [r7, #16]
 8019720:	4013      	ands	r3, r2
 8019722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801972a:	d019      	beq.n	8019760 <HAL_GPIO_Init+0x1ec>
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	4a49      	ldr	r2, [pc, #292]	@ (8019854 <HAL_GPIO_Init+0x2e0>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d013      	beq.n	801975c <HAL_GPIO_Init+0x1e8>
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	4a48      	ldr	r2, [pc, #288]	@ (8019858 <HAL_GPIO_Init+0x2e4>)
 8019738:	4293      	cmp	r3, r2
 801973a:	d00d      	beq.n	8019758 <HAL_GPIO_Init+0x1e4>
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	4a47      	ldr	r2, [pc, #284]	@ (801985c <HAL_GPIO_Init+0x2e8>)
 8019740:	4293      	cmp	r3, r2
 8019742:	d007      	beq.n	8019754 <HAL_GPIO_Init+0x1e0>
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	4a46      	ldr	r2, [pc, #280]	@ (8019860 <HAL_GPIO_Init+0x2ec>)
 8019748:	4293      	cmp	r3, r2
 801974a:	d101      	bne.n	8019750 <HAL_GPIO_Init+0x1dc>
 801974c:	2304      	movs	r3, #4
 801974e:	e008      	b.n	8019762 <HAL_GPIO_Init+0x1ee>
 8019750:	2307      	movs	r3, #7
 8019752:	e006      	b.n	8019762 <HAL_GPIO_Init+0x1ee>
 8019754:	2303      	movs	r3, #3
 8019756:	e004      	b.n	8019762 <HAL_GPIO_Init+0x1ee>
 8019758:	2302      	movs	r3, #2
 801975a:	e002      	b.n	8019762 <HAL_GPIO_Init+0x1ee>
 801975c:	2301      	movs	r3, #1
 801975e:	e000      	b.n	8019762 <HAL_GPIO_Init+0x1ee>
 8019760:	2300      	movs	r3, #0
 8019762:	697a      	ldr	r2, [r7, #20]
 8019764:	f002 0203 	and.w	r2, r2, #3
 8019768:	0092      	lsls	r2, r2, #2
 801976a:	4093      	lsls	r3, r2
 801976c:	693a      	ldr	r2, [r7, #16]
 801976e:	4313      	orrs	r3, r2
 8019770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8019772:	4937      	ldr	r1, [pc, #220]	@ (8019850 <HAL_GPIO_Init+0x2dc>)
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	089b      	lsrs	r3, r3, #2
 8019778:	3302      	adds	r3, #2
 801977a:	693a      	ldr	r2, [r7, #16]
 801977c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8019780:	4b38      	ldr	r3, [pc, #224]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 8019782:	689b      	ldr	r3, [r3, #8]
 8019784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	43db      	mvns	r3, r3
 801978a:	693a      	ldr	r2, [r7, #16]
 801978c:	4013      	ands	r3, r2
 801978e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019798:	2b00      	cmp	r3, #0
 801979a:	d003      	beq.n	80197a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801979c:	693a      	ldr	r2, [r7, #16]
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	4313      	orrs	r3, r2
 80197a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80197a4:	4a2f      	ldr	r2, [pc, #188]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80197aa:	4b2e      	ldr	r3, [pc, #184]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 80197ac:	68db      	ldr	r3, [r3, #12]
 80197ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	43db      	mvns	r3, r3
 80197b4:	693a      	ldr	r2, [r7, #16]
 80197b6:	4013      	ands	r3, r2
 80197b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	685b      	ldr	r3, [r3, #4]
 80197be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d003      	beq.n	80197ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80197c6:	693a      	ldr	r2, [r7, #16]
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	4313      	orrs	r3, r2
 80197cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80197ce:	4a25      	ldr	r2, [pc, #148]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 80197d0:	693b      	ldr	r3, [r7, #16]
 80197d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80197d4:	4b23      	ldr	r3, [pc, #140]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 80197d6:	685b      	ldr	r3, [r3, #4]
 80197d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	43db      	mvns	r3, r3
 80197de:	693a      	ldr	r2, [r7, #16]
 80197e0:	4013      	ands	r3, r2
 80197e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	685b      	ldr	r3, [r3, #4]
 80197e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d003      	beq.n	80197f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80197f0:	693a      	ldr	r2, [r7, #16]
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	4313      	orrs	r3, r2
 80197f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80197f8:	4a1a      	ldr	r2, [pc, #104]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 80197fa:	693b      	ldr	r3, [r7, #16]
 80197fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80197fe:	4b19      	ldr	r3, [pc, #100]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	43db      	mvns	r3, r3
 8019808:	693a      	ldr	r2, [r7, #16]
 801980a:	4013      	ands	r3, r2
 801980c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	685b      	ldr	r3, [r3, #4]
 8019812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019816:	2b00      	cmp	r3, #0
 8019818:	d003      	beq.n	8019822 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801981a:	693a      	ldr	r2, [r7, #16]
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	4313      	orrs	r3, r2
 8019820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8019822:	4a10      	ldr	r2, [pc, #64]	@ (8019864 <HAL_GPIO_Init+0x2f0>)
 8019824:	693b      	ldr	r3, [r7, #16]
 8019826:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	3301      	adds	r3, #1
 801982c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	681a      	ldr	r2, [r3, #0]
 8019832:	697b      	ldr	r3, [r7, #20]
 8019834:	fa22 f303 	lsr.w	r3, r2, r3
 8019838:	2b00      	cmp	r3, #0
 801983a:	f47f aea3 	bne.w	8019584 <HAL_GPIO_Init+0x10>
  }
}
 801983e:	bf00      	nop
 8019840:	bf00      	nop
 8019842:	371c      	adds	r7, #28
 8019844:	46bd      	mov	sp, r7
 8019846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984a:	4770      	bx	lr
 801984c:	40021000 	.word	0x40021000
 8019850:	40010000 	.word	0x40010000
 8019854:	48000400 	.word	0x48000400
 8019858:	48000800 	.word	0x48000800
 801985c:	48000c00 	.word	0x48000c00
 8019860:	48001000 	.word	0x48001000
 8019864:	40010400 	.word	0x40010400

08019868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019868:	b480      	push	{r7}
 801986a:	b085      	sub	sp, #20
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	460b      	mov	r3, r1
 8019872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	691a      	ldr	r2, [r3, #16]
 8019878:	887b      	ldrh	r3, [r7, #2]
 801987a:	4013      	ands	r3, r2
 801987c:	2b00      	cmp	r3, #0
 801987e:	d002      	beq.n	8019886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019880:	2301      	movs	r3, #1
 8019882:	73fb      	strb	r3, [r7, #15]
 8019884:	e001      	b.n	801988a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019886:	2300      	movs	r3, #0
 8019888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801988a:	7bfb      	ldrb	r3, [r7, #15]
}
 801988c:	4618      	mov	r0, r3
 801988e:	3714      	adds	r7, #20
 8019890:	46bd      	mov	sp, r7
 8019892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019896:	4770      	bx	lr

08019898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
 80198a0:	460b      	mov	r3, r1
 80198a2:	807b      	strh	r3, [r7, #2]
 80198a4:	4613      	mov	r3, r2
 80198a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80198a8:	787b      	ldrb	r3, [r7, #1]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d003      	beq.n	80198b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80198ae:	887a      	ldrh	r2, [r7, #2]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80198b4:	e002      	b.n	80198bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80198b6:	887a      	ldrh	r2, [r7, #2]
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80198bc:	bf00      	nop
 80198be:	370c      	adds	r7, #12
 80198c0:	46bd      	mov	sp, r7
 80198c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c6:	4770      	bx	lr

080198c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80198c8:	b480      	push	{r7}
 80198ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80198cc:	4b04      	ldr	r3, [pc, #16]	@ (80198e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	46bd      	mov	sp, r7
 80198d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198dc:	4770      	bx	lr
 80198de:	bf00      	nop
 80198e0:	40007000 	.word	0x40007000

080198e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80198e4:	b480      	push	{r7}
 80198e6:	b085      	sub	sp, #20
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80198f2:	d130      	bne.n	8019956 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80198f4:	4b23      	ldr	r3, [pc, #140]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80198fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019900:	d038      	beq.n	8019974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8019902:	4b20      	ldr	r3, [pc, #128]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801990a:	4a1e      	ldr	r2, [pc, #120]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801990c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019910:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8019912:	4b1d      	ldr	r3, [pc, #116]	@ (8019988 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	2232      	movs	r2, #50	@ 0x32
 8019918:	fb02 f303 	mul.w	r3, r2, r3
 801991c:	4a1b      	ldr	r2, [pc, #108]	@ (801998c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801991e:	fba2 2303 	umull	r2, r3, r2, r3
 8019922:	0c9b      	lsrs	r3, r3, #18
 8019924:	3301      	adds	r3, #1
 8019926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8019928:	e002      	b.n	8019930 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	3b01      	subs	r3, #1
 801992e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8019930:	4b14      	ldr	r3, [pc, #80]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8019932:	695b      	ldr	r3, [r3, #20]
 8019934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801993c:	d102      	bne.n	8019944 <HAL_PWREx_ControlVoltageScaling+0x60>
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d1f2      	bne.n	801992a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8019944:	4b0f      	ldr	r3, [pc, #60]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8019946:	695b      	ldr	r3, [r3, #20]
 8019948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801994c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019950:	d110      	bne.n	8019974 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8019952:	2303      	movs	r3, #3
 8019954:	e00f      	b.n	8019976 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8019956:	4b0b      	ldr	r3, [pc, #44]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801995e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019962:	d007      	beq.n	8019974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8019964:	4b07      	ldr	r3, [pc, #28]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801996c:	4a05      	ldr	r2, [pc, #20]	@ (8019984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801996e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019972:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8019974:	2300      	movs	r3, #0
}
 8019976:	4618      	mov	r0, r3
 8019978:	3714      	adds	r7, #20
 801997a:	46bd      	mov	sp, r7
 801997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019980:	4770      	bx	lr
 8019982:	bf00      	nop
 8019984:	40007000 	.word	0x40007000
 8019988:	20000000 	.word	0x20000000
 801998c:	431bde83 	.word	0x431bde83

08019990 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b088      	sub	sp, #32
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d102      	bne.n	80199a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801999e:	2301      	movs	r3, #1
 80199a0:	f000 bc02 	b.w	801a1a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80199a4:	4b96      	ldr	r3, [pc, #600]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 80199a6:	689b      	ldr	r3, [r3, #8]
 80199a8:	f003 030c 	and.w	r3, r3, #12
 80199ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80199ae:	4b94      	ldr	r3, [pc, #592]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 80199b0:	68db      	ldr	r3, [r3, #12]
 80199b2:	f003 0303 	and.w	r3, r3, #3
 80199b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	f003 0310 	and.w	r3, r3, #16
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	f000 80e4 	beq.w	8019b8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80199c6:	69bb      	ldr	r3, [r7, #24]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d007      	beq.n	80199dc <HAL_RCC_OscConfig+0x4c>
 80199cc:	69bb      	ldr	r3, [r7, #24]
 80199ce:	2b0c      	cmp	r3, #12
 80199d0:	f040 808b 	bne.w	8019aea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	2b01      	cmp	r3, #1
 80199d8:	f040 8087 	bne.w	8019aea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80199dc:	4b88      	ldr	r3, [pc, #544]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	f003 0302 	and.w	r3, r3, #2
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d005      	beq.n	80199f4 <HAL_RCC_OscConfig+0x64>
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	699b      	ldr	r3, [r3, #24]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d101      	bne.n	80199f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80199f0:	2301      	movs	r3, #1
 80199f2:	e3d9      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	6a1a      	ldr	r2, [r3, #32]
 80199f8:	4b81      	ldr	r3, [pc, #516]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f003 0308 	and.w	r3, r3, #8
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d004      	beq.n	8019a0e <HAL_RCC_OscConfig+0x7e>
 8019a04:	4b7e      	ldr	r3, [pc, #504]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019a0c:	e005      	b.n	8019a1a <HAL_RCC_OscConfig+0x8a>
 8019a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019a14:	091b      	lsrs	r3, r3, #4
 8019a16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019a1a:	4293      	cmp	r3, r2
 8019a1c:	d223      	bcs.n	8019a66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	6a1b      	ldr	r3, [r3, #32]
 8019a22:	4618      	mov	r0, r3
 8019a24:	f000 fd8c 	bl	801a540 <RCC_SetFlashLatencyFromMSIRange>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d001      	beq.n	8019a32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8019a2e:	2301      	movs	r3, #1
 8019a30:	e3ba      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019a32:	4b73      	ldr	r3, [pc, #460]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	4a72      	ldr	r2, [pc, #456]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a38:	f043 0308 	orr.w	r3, r3, #8
 8019a3c:	6013      	str	r3, [r2, #0]
 8019a3e:	4b70      	ldr	r3, [pc, #448]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6a1b      	ldr	r3, [r3, #32]
 8019a4a:	496d      	ldr	r1, [pc, #436]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a4c:	4313      	orrs	r3, r2
 8019a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019a50:	4b6b      	ldr	r3, [pc, #428]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a52:	685b      	ldr	r3, [r3, #4]
 8019a54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	69db      	ldr	r3, [r3, #28]
 8019a5c:	021b      	lsls	r3, r3, #8
 8019a5e:	4968      	ldr	r1, [pc, #416]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a60:	4313      	orrs	r3, r2
 8019a62:	604b      	str	r3, [r1, #4]
 8019a64:	e025      	b.n	8019ab2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019a66:	4b66      	ldr	r3, [pc, #408]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	4a65      	ldr	r2, [pc, #404]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a6c:	f043 0308 	orr.w	r3, r3, #8
 8019a70:	6013      	str	r3, [r2, #0]
 8019a72:	4b63      	ldr	r3, [pc, #396]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	6a1b      	ldr	r3, [r3, #32]
 8019a7e:	4960      	ldr	r1, [pc, #384]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a80:	4313      	orrs	r3, r2
 8019a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019a84:	4b5e      	ldr	r3, [pc, #376]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	69db      	ldr	r3, [r3, #28]
 8019a90:	021b      	lsls	r3, r3, #8
 8019a92:	495b      	ldr	r1, [pc, #364]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019a94:	4313      	orrs	r3, r2
 8019a96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d109      	bne.n	8019ab2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6a1b      	ldr	r3, [r3, #32]
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f000 fd4c 	bl	801a540 <RCC_SetFlashLatencyFromMSIRange>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d001      	beq.n	8019ab2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8019aae:	2301      	movs	r3, #1
 8019ab0:	e37a      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8019ab2:	f000 fc81 	bl	801a3b8 <HAL_RCC_GetSysClockFreq>
 8019ab6:	4602      	mov	r2, r0
 8019ab8:	4b51      	ldr	r3, [pc, #324]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019aba:	689b      	ldr	r3, [r3, #8]
 8019abc:	091b      	lsrs	r3, r3, #4
 8019abe:	f003 030f 	and.w	r3, r3, #15
 8019ac2:	4950      	ldr	r1, [pc, #320]	@ (8019c04 <HAL_RCC_OscConfig+0x274>)
 8019ac4:	5ccb      	ldrb	r3, [r1, r3]
 8019ac6:	f003 031f 	and.w	r3, r3, #31
 8019aca:	fa22 f303 	lsr.w	r3, r2, r3
 8019ace:	4a4e      	ldr	r2, [pc, #312]	@ (8019c08 <HAL_RCC_OscConfig+0x278>)
 8019ad0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8019ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8019c0c <HAL_RCC_OscConfig+0x27c>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f7ff fb3c 	bl	8019154 <HAL_InitTick>
 8019adc:	4603      	mov	r3, r0
 8019ade:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8019ae0:	7bfb      	ldrb	r3, [r7, #15]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d052      	beq.n	8019b8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8019ae6:	7bfb      	ldrb	r3, [r7, #15]
 8019ae8:	e35e      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	699b      	ldr	r3, [r3, #24]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d032      	beq.n	8019b58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8019af2:	4b43      	ldr	r3, [pc, #268]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	4a42      	ldr	r2, [pc, #264]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019af8:	f043 0301 	orr.w	r3, r3, #1
 8019afc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8019afe:	f7ff fb79 	bl	80191f4 <HAL_GetTick>
 8019b02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8019b04:	e008      	b.n	8019b18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019b06:	f7ff fb75 	bl	80191f4 <HAL_GetTick>
 8019b0a:	4602      	mov	r2, r0
 8019b0c:	693b      	ldr	r3, [r7, #16]
 8019b0e:	1ad3      	subs	r3, r2, r3
 8019b10:	2b02      	cmp	r3, #2
 8019b12:	d901      	bls.n	8019b18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8019b14:	2303      	movs	r3, #3
 8019b16:	e347      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8019b18:	4b39      	ldr	r3, [pc, #228]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	f003 0302 	and.w	r3, r3, #2
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d0f0      	beq.n	8019b06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019b24:	4b36      	ldr	r3, [pc, #216]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	4a35      	ldr	r2, [pc, #212]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b2a:	f043 0308 	orr.w	r3, r3, #8
 8019b2e:	6013      	str	r3, [r2, #0]
 8019b30:	4b33      	ldr	r3, [pc, #204]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6a1b      	ldr	r3, [r3, #32]
 8019b3c:	4930      	ldr	r1, [pc, #192]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b3e:	4313      	orrs	r3, r2
 8019b40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019b42:	4b2f      	ldr	r3, [pc, #188]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b44:	685b      	ldr	r3, [r3, #4]
 8019b46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	69db      	ldr	r3, [r3, #28]
 8019b4e:	021b      	lsls	r3, r3, #8
 8019b50:	492b      	ldr	r1, [pc, #172]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b52:	4313      	orrs	r3, r2
 8019b54:	604b      	str	r3, [r1, #4]
 8019b56:	e01a      	b.n	8019b8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8019b58:	4b29      	ldr	r3, [pc, #164]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	4a28      	ldr	r2, [pc, #160]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b5e:	f023 0301 	bic.w	r3, r3, #1
 8019b62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8019b64:	f7ff fb46 	bl	80191f4 <HAL_GetTick>
 8019b68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8019b6a:	e008      	b.n	8019b7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019b6c:	f7ff fb42 	bl	80191f4 <HAL_GetTick>
 8019b70:	4602      	mov	r2, r0
 8019b72:	693b      	ldr	r3, [r7, #16]
 8019b74:	1ad3      	subs	r3, r2, r3
 8019b76:	2b02      	cmp	r3, #2
 8019b78:	d901      	bls.n	8019b7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8019b7a:	2303      	movs	r3, #3
 8019b7c:	e314      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8019b7e:	4b20      	ldr	r3, [pc, #128]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	f003 0302 	and.w	r3, r3, #2
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d1f0      	bne.n	8019b6c <HAL_RCC_OscConfig+0x1dc>
 8019b8a:	e000      	b.n	8019b8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8019b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	f003 0301 	and.w	r3, r3, #1
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d073      	beq.n	8019c82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8019b9a:	69bb      	ldr	r3, [r7, #24]
 8019b9c:	2b08      	cmp	r3, #8
 8019b9e:	d005      	beq.n	8019bac <HAL_RCC_OscConfig+0x21c>
 8019ba0:	69bb      	ldr	r3, [r7, #24]
 8019ba2:	2b0c      	cmp	r3, #12
 8019ba4:	d10e      	bne.n	8019bc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	2b03      	cmp	r3, #3
 8019baa:	d10b      	bne.n	8019bc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019bac:	4b14      	ldr	r3, [pc, #80]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d063      	beq.n	8019c80 <HAL_RCC_OscConfig+0x2f0>
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	685b      	ldr	r3, [r3, #4]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d15f      	bne.n	8019c80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8019bc0:	2301      	movs	r3, #1
 8019bc2:	e2f1      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	685b      	ldr	r3, [r3, #4]
 8019bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019bcc:	d106      	bne.n	8019bdc <HAL_RCC_OscConfig+0x24c>
 8019bce:	4b0c      	ldr	r3, [pc, #48]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019bd8:	6013      	str	r3, [r2, #0]
 8019bda:	e025      	b.n	8019c28 <HAL_RCC_OscConfig+0x298>
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8019be4:	d114      	bne.n	8019c10 <HAL_RCC_OscConfig+0x280>
 8019be6:	4b06      	ldr	r3, [pc, #24]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	4a05      	ldr	r2, [pc, #20]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8019bf0:	6013      	str	r3, [r2, #0]
 8019bf2:	4b03      	ldr	r3, [pc, #12]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	4a02      	ldr	r2, [pc, #8]	@ (8019c00 <HAL_RCC_OscConfig+0x270>)
 8019bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019bfc:	6013      	str	r3, [r2, #0]
 8019bfe:	e013      	b.n	8019c28 <HAL_RCC_OscConfig+0x298>
 8019c00:	40021000 	.word	0x40021000
 8019c04:	08021760 	.word	0x08021760
 8019c08:	20000000 	.word	0x20000000
 8019c0c:	2000005c 	.word	0x2000005c
 8019c10:	4ba0      	ldr	r3, [pc, #640]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	4a9f      	ldr	r2, [pc, #636]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019c1a:	6013      	str	r3, [r2, #0]
 8019c1c:	4b9d      	ldr	r3, [pc, #628]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	4a9c      	ldr	r2, [pc, #624]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8019c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	685b      	ldr	r3, [r3, #4]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d013      	beq.n	8019c58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019c30:	f7ff fae0 	bl	80191f4 <HAL_GetTick>
 8019c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8019c36:	e008      	b.n	8019c4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019c38:	f7ff fadc 	bl	80191f4 <HAL_GetTick>
 8019c3c:	4602      	mov	r2, r0
 8019c3e:	693b      	ldr	r3, [r7, #16]
 8019c40:	1ad3      	subs	r3, r2, r3
 8019c42:	2b64      	cmp	r3, #100	@ 0x64
 8019c44:	d901      	bls.n	8019c4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8019c46:	2303      	movs	r3, #3
 8019c48:	e2ae      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8019c4a:	4b92      	ldr	r3, [pc, #584]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d0f0      	beq.n	8019c38 <HAL_RCC_OscConfig+0x2a8>
 8019c56:	e014      	b.n	8019c82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019c58:	f7ff facc 	bl	80191f4 <HAL_GetTick>
 8019c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8019c5e:	e008      	b.n	8019c72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019c60:	f7ff fac8 	bl	80191f4 <HAL_GetTick>
 8019c64:	4602      	mov	r2, r0
 8019c66:	693b      	ldr	r3, [r7, #16]
 8019c68:	1ad3      	subs	r3, r2, r3
 8019c6a:	2b64      	cmp	r3, #100	@ 0x64
 8019c6c:	d901      	bls.n	8019c72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8019c6e:	2303      	movs	r3, #3
 8019c70:	e29a      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8019c72:	4b88      	ldr	r3, [pc, #544]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d1f0      	bne.n	8019c60 <HAL_RCC_OscConfig+0x2d0>
 8019c7e:	e000      	b.n	8019c82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	f003 0302 	and.w	r3, r3, #2
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d060      	beq.n	8019d50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8019c8e:	69bb      	ldr	r3, [r7, #24]
 8019c90:	2b04      	cmp	r3, #4
 8019c92:	d005      	beq.n	8019ca0 <HAL_RCC_OscConfig+0x310>
 8019c94:	69bb      	ldr	r3, [r7, #24]
 8019c96:	2b0c      	cmp	r3, #12
 8019c98:	d119      	bne.n	8019cce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	2b02      	cmp	r3, #2
 8019c9e:	d116      	bne.n	8019cce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8019ca0:	4b7c      	ldr	r3, [pc, #496]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d005      	beq.n	8019cb8 <HAL_RCC_OscConfig+0x328>
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	68db      	ldr	r3, [r3, #12]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d101      	bne.n	8019cb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	e277      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019cb8:	4b76      	ldr	r3, [pc, #472]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019cba:	685b      	ldr	r3, [r3, #4]
 8019cbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	691b      	ldr	r3, [r3, #16]
 8019cc4:	061b      	lsls	r3, r3, #24
 8019cc6:	4973      	ldr	r1, [pc, #460]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019cc8:	4313      	orrs	r3, r2
 8019cca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8019ccc:	e040      	b.n	8019d50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	68db      	ldr	r3, [r3, #12]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d023      	beq.n	8019d1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	4a6e      	ldr	r2, [pc, #440]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019ce2:	f7ff fa87 	bl	80191f4 <HAL_GetTick>
 8019ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019ce8:	e008      	b.n	8019cfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019cea:	f7ff fa83 	bl	80191f4 <HAL_GetTick>
 8019cee:	4602      	mov	r2, r0
 8019cf0:	693b      	ldr	r3, [r7, #16]
 8019cf2:	1ad3      	subs	r3, r2, r3
 8019cf4:	2b02      	cmp	r3, #2
 8019cf6:	d901      	bls.n	8019cfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8019cf8:	2303      	movs	r3, #3
 8019cfa:	e255      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019cfc:	4b65      	ldr	r3, [pc, #404]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d0f0      	beq.n	8019cea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019d08:	4b62      	ldr	r3, [pc, #392]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d0a:	685b      	ldr	r3, [r3, #4]
 8019d0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	691b      	ldr	r3, [r3, #16]
 8019d14:	061b      	lsls	r3, r3, #24
 8019d16:	495f      	ldr	r1, [pc, #380]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d18:	4313      	orrs	r3, r2
 8019d1a:	604b      	str	r3, [r1, #4]
 8019d1c:	e018      	b.n	8019d50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	4a5c      	ldr	r2, [pc, #368]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019d2a:	f7ff fa63 	bl	80191f4 <HAL_GetTick>
 8019d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8019d30:	e008      	b.n	8019d44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019d32:	f7ff fa5f 	bl	80191f4 <HAL_GetTick>
 8019d36:	4602      	mov	r2, r0
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	1ad3      	subs	r3, r2, r3
 8019d3c:	2b02      	cmp	r3, #2
 8019d3e:	d901      	bls.n	8019d44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8019d40:	2303      	movs	r3, #3
 8019d42:	e231      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8019d44:	4b53      	ldr	r3, [pc, #332]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d1f0      	bne.n	8019d32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f003 0308 	and.w	r3, r3, #8
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d03c      	beq.n	8019dd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	695b      	ldr	r3, [r3, #20]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d01c      	beq.n	8019d9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019d64:	4b4b      	ldr	r3, [pc, #300]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d6c:	f043 0301 	orr.w	r3, r3, #1
 8019d70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019d74:	f7ff fa3e 	bl	80191f4 <HAL_GetTick>
 8019d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8019d7a:	e008      	b.n	8019d8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019d7c:	f7ff fa3a 	bl	80191f4 <HAL_GetTick>
 8019d80:	4602      	mov	r2, r0
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	1ad3      	subs	r3, r2, r3
 8019d86:	2b02      	cmp	r3, #2
 8019d88:	d901      	bls.n	8019d8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8019d8a:	2303      	movs	r3, #3
 8019d8c:	e20c      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8019d8e:	4b41      	ldr	r3, [pc, #260]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019d94:	f003 0302 	and.w	r3, r3, #2
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d0ef      	beq.n	8019d7c <HAL_RCC_OscConfig+0x3ec>
 8019d9c:	e01b      	b.n	8019dd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019da4:	4a3b      	ldr	r2, [pc, #236]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019da6:	f023 0301 	bic.w	r3, r3, #1
 8019daa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019dae:	f7ff fa21 	bl	80191f4 <HAL_GetTick>
 8019db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8019db4:	e008      	b.n	8019dc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019db6:	f7ff fa1d 	bl	80191f4 <HAL_GetTick>
 8019dba:	4602      	mov	r2, r0
 8019dbc:	693b      	ldr	r3, [r7, #16]
 8019dbe:	1ad3      	subs	r3, r2, r3
 8019dc0:	2b02      	cmp	r3, #2
 8019dc2:	d901      	bls.n	8019dc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8019dc4:	2303      	movs	r3, #3
 8019dc6:	e1ef      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8019dc8:	4b32      	ldr	r3, [pc, #200]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8019dce:	f003 0302 	and.w	r3, r3, #2
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d1ef      	bne.n	8019db6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	f003 0304 	and.w	r3, r3, #4
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	f000 80a6 	beq.w	8019f30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8019de4:	2300      	movs	r3, #0
 8019de6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8019de8:	4b2a      	ldr	r3, [pc, #168]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d10d      	bne.n	8019e10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019df4:	4b27      	ldr	r3, [pc, #156]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019df8:	4a26      	ldr	r2, [pc, #152]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8019e00:	4b24      	ldr	r3, [pc, #144]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019e08:	60bb      	str	r3, [r7, #8]
 8019e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019e10:	4b21      	ldr	r3, [pc, #132]	@ (8019e98 <HAL_RCC_OscConfig+0x508>)
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d118      	bne.n	8019e4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8019e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8019e98 <HAL_RCC_OscConfig+0x508>)
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	4a1d      	ldr	r2, [pc, #116]	@ (8019e98 <HAL_RCC_OscConfig+0x508>)
 8019e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019e28:	f7ff f9e4 	bl	80191f4 <HAL_GetTick>
 8019e2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019e2e:	e008      	b.n	8019e42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019e30:	f7ff f9e0 	bl	80191f4 <HAL_GetTick>
 8019e34:	4602      	mov	r2, r0
 8019e36:	693b      	ldr	r3, [r7, #16]
 8019e38:	1ad3      	subs	r3, r2, r3
 8019e3a:	2b02      	cmp	r3, #2
 8019e3c:	d901      	bls.n	8019e42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8019e3e:	2303      	movs	r3, #3
 8019e40:	e1b2      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019e42:	4b15      	ldr	r3, [pc, #84]	@ (8019e98 <HAL_RCC_OscConfig+0x508>)
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d0f0      	beq.n	8019e30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	689b      	ldr	r3, [r3, #8]
 8019e52:	2b01      	cmp	r3, #1
 8019e54:	d108      	bne.n	8019e68 <HAL_RCC_OscConfig+0x4d8>
 8019e56:	4b0f      	ldr	r3, [pc, #60]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e5e:	f043 0301 	orr.w	r3, r3, #1
 8019e62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8019e66:	e029      	b.n	8019ebc <HAL_RCC_OscConfig+0x52c>
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	689b      	ldr	r3, [r3, #8]
 8019e6c:	2b05      	cmp	r3, #5
 8019e6e:	d115      	bne.n	8019e9c <HAL_RCC_OscConfig+0x50c>
 8019e70:	4b08      	ldr	r3, [pc, #32]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e76:	4a07      	ldr	r2, [pc, #28]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e78:	f043 0304 	orr.w	r3, r3, #4
 8019e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8019e80:	4b04      	ldr	r3, [pc, #16]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e86:	4a03      	ldr	r2, [pc, #12]	@ (8019e94 <HAL_RCC_OscConfig+0x504>)
 8019e88:	f043 0301 	orr.w	r3, r3, #1
 8019e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8019e90:	e014      	b.n	8019ebc <HAL_RCC_OscConfig+0x52c>
 8019e92:	bf00      	nop
 8019e94:	40021000 	.word	0x40021000
 8019e98:	40007000 	.word	0x40007000
 8019e9c:	4b9a      	ldr	r3, [pc, #616]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ea2:	4a99      	ldr	r2, [pc, #612]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019ea4:	f023 0301 	bic.w	r3, r3, #1
 8019ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8019eac:	4b96      	ldr	r3, [pc, #600]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019eb2:	4a95      	ldr	r2, [pc, #596]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019eb4:	f023 0304 	bic.w	r3, r3, #4
 8019eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	689b      	ldr	r3, [r3, #8]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d016      	beq.n	8019ef2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019ec4:	f7ff f996 	bl	80191f4 <HAL_GetTick>
 8019ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019eca:	e00a      	b.n	8019ee2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019ecc:	f7ff f992 	bl	80191f4 <HAL_GetTick>
 8019ed0:	4602      	mov	r2, r0
 8019ed2:	693b      	ldr	r3, [r7, #16]
 8019ed4:	1ad3      	subs	r3, r2, r3
 8019ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019eda:	4293      	cmp	r3, r2
 8019edc:	d901      	bls.n	8019ee2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8019ede:	2303      	movs	r3, #3
 8019ee0:	e162      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019ee2:	4b89      	ldr	r3, [pc, #548]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019ee8:	f003 0302 	and.w	r3, r3, #2
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d0ed      	beq.n	8019ecc <HAL_RCC_OscConfig+0x53c>
 8019ef0:	e015      	b.n	8019f1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019ef2:	f7ff f97f 	bl	80191f4 <HAL_GetTick>
 8019ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8019ef8:	e00a      	b.n	8019f10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019efa:	f7ff f97b 	bl	80191f4 <HAL_GetTick>
 8019efe:	4602      	mov	r2, r0
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	1ad3      	subs	r3, r2, r3
 8019f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019f08:	4293      	cmp	r3, r2
 8019f0a:	d901      	bls.n	8019f10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8019f0c:	2303      	movs	r3, #3
 8019f0e:	e14b      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8019f10:	4b7d      	ldr	r3, [pc, #500]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f16:	f003 0302 	and.w	r3, r3, #2
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d1ed      	bne.n	8019efa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8019f1e:	7ffb      	ldrb	r3, [r7, #31]
 8019f20:	2b01      	cmp	r3, #1
 8019f22:	d105      	bne.n	8019f30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019f24:	4b78      	ldr	r3, [pc, #480]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f28:	4a77      	ldr	r2, [pc, #476]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019f2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	f003 0320 	and.w	r3, r3, #32
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d03c      	beq.n	8019fb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d01c      	beq.n	8019f7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8019f44:	4b70      	ldr	r3, [pc, #448]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019f4a:	4a6f      	ldr	r2, [pc, #444]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f4c:	f043 0301 	orr.w	r3, r3, #1
 8019f50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019f54:	f7ff f94e 	bl	80191f4 <HAL_GetTick>
 8019f58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8019f5a:	e008      	b.n	8019f6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8019f5c:	f7ff f94a 	bl	80191f4 <HAL_GetTick>
 8019f60:	4602      	mov	r2, r0
 8019f62:	693b      	ldr	r3, [r7, #16]
 8019f64:	1ad3      	subs	r3, r2, r3
 8019f66:	2b02      	cmp	r3, #2
 8019f68:	d901      	bls.n	8019f6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8019f6a:	2303      	movs	r3, #3
 8019f6c:	e11c      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8019f6e:	4b66      	ldr	r3, [pc, #408]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019f74:	f003 0302 	and.w	r3, r3, #2
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d0ef      	beq.n	8019f5c <HAL_RCC_OscConfig+0x5cc>
 8019f7c:	e01b      	b.n	8019fb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8019f7e:	4b62      	ldr	r3, [pc, #392]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019f84:	4a60      	ldr	r2, [pc, #384]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019f86:	f023 0301 	bic.w	r3, r3, #1
 8019f8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019f8e:	f7ff f931 	bl	80191f4 <HAL_GetTick>
 8019f92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8019f94:	e008      	b.n	8019fa8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8019f96:	f7ff f92d 	bl	80191f4 <HAL_GetTick>
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	693b      	ldr	r3, [r7, #16]
 8019f9e:	1ad3      	subs	r3, r2, r3
 8019fa0:	2b02      	cmp	r3, #2
 8019fa2:	d901      	bls.n	8019fa8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8019fa4:	2303      	movs	r3, #3
 8019fa6:	e0ff      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8019fa8:	4b57      	ldr	r3, [pc, #348]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019fae:	f003 0302 	and.w	r3, r3, #2
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d1ef      	bne.n	8019f96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	f000 80f3 	beq.w	801a1a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019fc4:	2b02      	cmp	r3, #2
 8019fc6:	f040 80c9 	bne.w	801a15c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8019fca:	4b4f      	ldr	r3, [pc, #316]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 8019fcc:	68db      	ldr	r3, [r3, #12]
 8019fce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	f003 0203 	and.w	r2, r3, #3
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fda:	429a      	cmp	r2, r3
 8019fdc:	d12c      	bne.n	801a038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019fe8:	3b01      	subs	r3, #1
 8019fea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d123      	bne.n	801a038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019ffa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d11b      	bne.n	801a038 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801a000:	697b      	ldr	r3, [r7, #20]
 801a002:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a00a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d113      	bne.n	801a038 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a01a:	085b      	lsrs	r3, r3, #1
 801a01c:	3b01      	subs	r3, #1
 801a01e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801a020:	429a      	cmp	r2, r3
 801a022:	d109      	bne.n	801a038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a02e:	085b      	lsrs	r3, r3, #1
 801a030:	3b01      	subs	r3, #1
 801a032:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801a034:	429a      	cmp	r2, r3
 801a036:	d06b      	beq.n	801a110 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801a038:	69bb      	ldr	r3, [r7, #24]
 801a03a:	2b0c      	cmp	r3, #12
 801a03c:	d062      	beq.n	801a104 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801a03e:	4b32      	ldr	r3, [pc, #200]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801a046:	2b00      	cmp	r3, #0
 801a048:	d001      	beq.n	801a04e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 801a04a:	2301      	movs	r3, #1
 801a04c:	e0ac      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801a04e:	4b2e      	ldr	r3, [pc, #184]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	4a2d      	ldr	r2, [pc, #180]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a058:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801a05a:	f7ff f8cb 	bl	80191f4 <HAL_GetTick>
 801a05e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a060:	e008      	b.n	801a074 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a062:	f7ff f8c7 	bl	80191f4 <HAL_GetTick>
 801a066:	4602      	mov	r2, r0
 801a068:	693b      	ldr	r3, [r7, #16]
 801a06a:	1ad3      	subs	r3, r2, r3
 801a06c:	2b02      	cmp	r3, #2
 801a06e:	d901      	bls.n	801a074 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 801a070:	2303      	movs	r3, #3
 801a072:	e099      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a074:	4b24      	ldr	r3, [pc, #144]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d1f0      	bne.n	801a062 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801a080:	4b21      	ldr	r3, [pc, #132]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a082:	68da      	ldr	r2, [r3, #12]
 801a084:	4b21      	ldr	r3, [pc, #132]	@ (801a10c <HAL_RCC_OscConfig+0x77c>)
 801a086:	4013      	ands	r3, r2
 801a088:	687a      	ldr	r2, [r7, #4]
 801a08a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 801a08c:	687a      	ldr	r2, [r7, #4]
 801a08e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801a090:	3a01      	subs	r2, #1
 801a092:	0112      	lsls	r2, r2, #4
 801a094:	4311      	orrs	r1, r2
 801a096:	687a      	ldr	r2, [r7, #4]
 801a098:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801a09a:	0212      	lsls	r2, r2, #8
 801a09c:	4311      	orrs	r1, r2
 801a09e:	687a      	ldr	r2, [r7, #4]
 801a0a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801a0a2:	0852      	lsrs	r2, r2, #1
 801a0a4:	3a01      	subs	r2, #1
 801a0a6:	0552      	lsls	r2, r2, #21
 801a0a8:	4311      	orrs	r1, r2
 801a0aa:	687a      	ldr	r2, [r7, #4]
 801a0ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801a0ae:	0852      	lsrs	r2, r2, #1
 801a0b0:	3a01      	subs	r2, #1
 801a0b2:	0652      	lsls	r2, r2, #25
 801a0b4:	4311      	orrs	r1, r2
 801a0b6:	687a      	ldr	r2, [r7, #4]
 801a0b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801a0ba:	06d2      	lsls	r2, r2, #27
 801a0bc:	430a      	orrs	r2, r1
 801a0be:	4912      	ldr	r1, [pc, #72]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a0c0:	4313      	orrs	r3, r2
 801a0c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801a0c4:	4b10      	ldr	r3, [pc, #64]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	4a0f      	ldr	r2, [pc, #60]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a0ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a0ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801a0d0:	4b0d      	ldr	r3, [pc, #52]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	4a0c      	ldr	r2, [pc, #48]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a0d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a0da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801a0dc:	f7ff f88a 	bl	80191f4 <HAL_GetTick>
 801a0e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a0e2:	e008      	b.n	801a0f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a0e4:	f7ff f886 	bl	80191f4 <HAL_GetTick>
 801a0e8:	4602      	mov	r2, r0
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	1ad3      	subs	r3, r2, r3
 801a0ee:	2b02      	cmp	r3, #2
 801a0f0:	d901      	bls.n	801a0f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 801a0f2:	2303      	movs	r3, #3
 801a0f4:	e058      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a0f6:	4b04      	ldr	r3, [pc, #16]	@ (801a108 <HAL_RCC_OscConfig+0x778>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d0f0      	beq.n	801a0e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801a102:	e050      	b.n	801a1a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801a104:	2301      	movs	r3, #1
 801a106:	e04f      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
 801a108:	40021000 	.word	0x40021000
 801a10c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a110:	4b27      	ldr	r3, [pc, #156]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d144      	bne.n	801a1a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801a11c:	4b24      	ldr	r3, [pc, #144]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	4a23      	ldr	r2, [pc, #140]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a126:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801a128:	4b21      	ldr	r3, [pc, #132]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a12a:	68db      	ldr	r3, [r3, #12]
 801a12c:	4a20      	ldr	r2, [pc, #128]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a12e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a132:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801a134:	f7ff f85e 	bl	80191f4 <HAL_GetTick>
 801a138:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a13a:	e008      	b.n	801a14e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a13c:	f7ff f85a 	bl	80191f4 <HAL_GetTick>
 801a140:	4602      	mov	r2, r0
 801a142:	693b      	ldr	r3, [r7, #16]
 801a144:	1ad3      	subs	r3, r2, r3
 801a146:	2b02      	cmp	r3, #2
 801a148:	d901      	bls.n	801a14e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 801a14a:	2303      	movs	r3, #3
 801a14c:	e02c      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a14e:	4b18      	ldr	r3, [pc, #96]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a156:	2b00      	cmp	r3, #0
 801a158:	d0f0      	beq.n	801a13c <HAL_RCC_OscConfig+0x7ac>
 801a15a:	e024      	b.n	801a1a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801a15c:	69bb      	ldr	r3, [r7, #24]
 801a15e:	2b0c      	cmp	r3, #12
 801a160:	d01f      	beq.n	801a1a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a162:	4b13      	ldr	r3, [pc, #76]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4a12      	ldr	r2, [pc, #72]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a16c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a16e:	f7ff f841 	bl	80191f4 <HAL_GetTick>
 801a172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a174:	e008      	b.n	801a188 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a176:	f7ff f83d 	bl	80191f4 <HAL_GetTick>
 801a17a:	4602      	mov	r2, r0
 801a17c:	693b      	ldr	r3, [r7, #16]
 801a17e:	1ad3      	subs	r3, r2, r3
 801a180:	2b02      	cmp	r3, #2
 801a182:	d901      	bls.n	801a188 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 801a184:	2303      	movs	r3, #3
 801a186:	e00f      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801a188:	4b09      	ldr	r3, [pc, #36]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a190:	2b00      	cmp	r3, #0
 801a192:	d1f0      	bne.n	801a176 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 801a194:	4b06      	ldr	r3, [pc, #24]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a196:	68da      	ldr	r2, [r3, #12]
 801a198:	4905      	ldr	r1, [pc, #20]	@ (801a1b0 <HAL_RCC_OscConfig+0x820>)
 801a19a:	4b06      	ldr	r3, [pc, #24]	@ (801a1b4 <HAL_RCC_OscConfig+0x824>)
 801a19c:	4013      	ands	r3, r2
 801a19e:	60cb      	str	r3, [r1, #12]
 801a1a0:	e001      	b.n	801a1a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	e000      	b.n	801a1a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 801a1a6:	2300      	movs	r3, #0
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3720      	adds	r7, #32
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}
 801a1b0:	40021000 	.word	0x40021000
 801a1b4:	feeefffc 	.word	0xfeeefffc

0801a1b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b084      	sub	sp, #16
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
 801a1c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d101      	bne.n	801a1cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a1c8:	2301      	movs	r3, #1
 801a1ca:	e0e7      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a1cc:	4b75      	ldr	r3, [pc, #468]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f003 0307 	and.w	r3, r3, #7
 801a1d4:	683a      	ldr	r2, [r7, #0]
 801a1d6:	429a      	cmp	r2, r3
 801a1d8:	d910      	bls.n	801a1fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a1da:	4b72      	ldr	r3, [pc, #456]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	f023 0207 	bic.w	r2, r3, #7
 801a1e2:	4970      	ldr	r1, [pc, #448]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	4313      	orrs	r3, r2
 801a1e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a1ea:	4b6e      	ldr	r3, [pc, #440]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	f003 0307 	and.w	r3, r3, #7
 801a1f2:	683a      	ldr	r2, [r7, #0]
 801a1f4:	429a      	cmp	r2, r3
 801a1f6:	d001      	beq.n	801a1fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801a1f8:	2301      	movs	r3, #1
 801a1fa:	e0cf      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	f003 0302 	and.w	r3, r3, #2
 801a204:	2b00      	cmp	r3, #0
 801a206:	d010      	beq.n	801a22a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	689a      	ldr	r2, [r3, #8]
 801a20c:	4b66      	ldr	r3, [pc, #408]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a20e:	689b      	ldr	r3, [r3, #8]
 801a210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a214:	429a      	cmp	r2, r3
 801a216:	d908      	bls.n	801a22a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a218:	4b63      	ldr	r3, [pc, #396]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a21a:	689b      	ldr	r3, [r3, #8]
 801a21c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	689b      	ldr	r3, [r3, #8]
 801a224:	4960      	ldr	r1, [pc, #384]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a226:	4313      	orrs	r3, r2
 801a228:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	f003 0301 	and.w	r3, r3, #1
 801a232:	2b00      	cmp	r3, #0
 801a234:	d04c      	beq.n	801a2d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	2b03      	cmp	r3, #3
 801a23c:	d107      	bne.n	801a24e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801a23e:	4b5a      	ldr	r3, [pc, #360]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a246:	2b00      	cmp	r3, #0
 801a248:	d121      	bne.n	801a28e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801a24a:	2301      	movs	r3, #1
 801a24c:	e0a6      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	685b      	ldr	r3, [r3, #4]
 801a252:	2b02      	cmp	r3, #2
 801a254:	d107      	bne.n	801a266 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801a256:	4b54      	ldr	r3, [pc, #336]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d115      	bne.n	801a28e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801a262:	2301      	movs	r3, #1
 801a264:	e09a      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	685b      	ldr	r3, [r3, #4]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d107      	bne.n	801a27e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801a26e:	4b4e      	ldr	r3, [pc, #312]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	f003 0302 	and.w	r3, r3, #2
 801a276:	2b00      	cmp	r3, #0
 801a278:	d109      	bne.n	801a28e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801a27a:	2301      	movs	r3, #1
 801a27c:	e08e      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801a27e:	4b4a      	ldr	r3, [pc, #296]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801a286:	2b00      	cmp	r3, #0
 801a288:	d101      	bne.n	801a28e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801a28a:	2301      	movs	r3, #1
 801a28c:	e086      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801a28e:	4b46      	ldr	r3, [pc, #280]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a290:	689b      	ldr	r3, [r3, #8]
 801a292:	f023 0203 	bic.w	r2, r3, #3
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	685b      	ldr	r3, [r3, #4]
 801a29a:	4943      	ldr	r1, [pc, #268]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a29c:	4313      	orrs	r3, r2
 801a29e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a2a0:	f7fe ffa8 	bl	80191f4 <HAL_GetTick>
 801a2a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a2a6:	e00a      	b.n	801a2be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a2a8:	f7fe ffa4 	bl	80191f4 <HAL_GetTick>
 801a2ac:	4602      	mov	r2, r0
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	1ad3      	subs	r3, r2, r3
 801a2b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a2b6:	4293      	cmp	r3, r2
 801a2b8:	d901      	bls.n	801a2be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801a2ba:	2303      	movs	r3, #3
 801a2bc:	e06e      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a2be:	4b3a      	ldr	r3, [pc, #232]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a2c0:	689b      	ldr	r3, [r3, #8]
 801a2c2:	f003 020c 	and.w	r2, r3, #12
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	685b      	ldr	r3, [r3, #4]
 801a2ca:	009b      	lsls	r3, r3, #2
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	d1eb      	bne.n	801a2a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	f003 0302 	and.w	r3, r3, #2
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d010      	beq.n	801a2fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	689a      	ldr	r2, [r3, #8]
 801a2e0:	4b31      	ldr	r3, [pc, #196]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a2e2:	689b      	ldr	r3, [r3, #8]
 801a2e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d208      	bcs.n	801a2fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a2ec:	4b2e      	ldr	r3, [pc, #184]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a2ee:	689b      	ldr	r3, [r3, #8]
 801a2f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	689b      	ldr	r3, [r3, #8]
 801a2f8:	492b      	ldr	r1, [pc, #172]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a2fa:	4313      	orrs	r3, r2
 801a2fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a2fe:	4b29      	ldr	r3, [pc, #164]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	f003 0307 	and.w	r3, r3, #7
 801a306:	683a      	ldr	r2, [r7, #0]
 801a308:	429a      	cmp	r2, r3
 801a30a:	d210      	bcs.n	801a32e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a30c:	4b25      	ldr	r3, [pc, #148]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	f023 0207 	bic.w	r2, r3, #7
 801a314:	4923      	ldr	r1, [pc, #140]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a316:	683b      	ldr	r3, [r7, #0]
 801a318:	4313      	orrs	r3, r2
 801a31a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a31c:	4b21      	ldr	r3, [pc, #132]	@ (801a3a4 <HAL_RCC_ClockConfig+0x1ec>)
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	f003 0307 	and.w	r3, r3, #7
 801a324:	683a      	ldr	r2, [r7, #0]
 801a326:	429a      	cmp	r2, r3
 801a328:	d001      	beq.n	801a32e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801a32a:	2301      	movs	r3, #1
 801a32c:	e036      	b.n	801a39c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	f003 0304 	and.w	r3, r3, #4
 801a336:	2b00      	cmp	r3, #0
 801a338:	d008      	beq.n	801a34c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a33a:	4b1b      	ldr	r3, [pc, #108]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a33c:	689b      	ldr	r3, [r3, #8]
 801a33e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	68db      	ldr	r3, [r3, #12]
 801a346:	4918      	ldr	r1, [pc, #96]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a348:	4313      	orrs	r3, r2
 801a34a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	f003 0308 	and.w	r3, r3, #8
 801a354:	2b00      	cmp	r3, #0
 801a356:	d009      	beq.n	801a36c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a358:	4b13      	ldr	r3, [pc, #76]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a35a:	689b      	ldr	r3, [r3, #8]
 801a35c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	691b      	ldr	r3, [r3, #16]
 801a364:	00db      	lsls	r3, r3, #3
 801a366:	4910      	ldr	r1, [pc, #64]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a368:	4313      	orrs	r3, r2
 801a36a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801a36c:	f000 f824 	bl	801a3b8 <HAL_RCC_GetSysClockFreq>
 801a370:	4602      	mov	r2, r0
 801a372:	4b0d      	ldr	r3, [pc, #52]	@ (801a3a8 <HAL_RCC_ClockConfig+0x1f0>)
 801a374:	689b      	ldr	r3, [r3, #8]
 801a376:	091b      	lsrs	r3, r3, #4
 801a378:	f003 030f 	and.w	r3, r3, #15
 801a37c:	490b      	ldr	r1, [pc, #44]	@ (801a3ac <HAL_RCC_ClockConfig+0x1f4>)
 801a37e:	5ccb      	ldrb	r3, [r1, r3]
 801a380:	f003 031f 	and.w	r3, r3, #31
 801a384:	fa22 f303 	lsr.w	r3, r2, r3
 801a388:	4a09      	ldr	r2, [pc, #36]	@ (801a3b0 <HAL_RCC_ClockConfig+0x1f8>)
 801a38a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801a38c:	4b09      	ldr	r3, [pc, #36]	@ (801a3b4 <HAL_RCC_ClockConfig+0x1fc>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	4618      	mov	r0, r3
 801a392:	f7fe fedf 	bl	8019154 <HAL_InitTick>
 801a396:	4603      	mov	r3, r0
 801a398:	72fb      	strb	r3, [r7, #11]

  return status;
 801a39a:	7afb      	ldrb	r3, [r7, #11]
}
 801a39c:	4618      	mov	r0, r3
 801a39e:	3710      	adds	r7, #16
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd80      	pop	{r7, pc}
 801a3a4:	40022000 	.word	0x40022000
 801a3a8:	40021000 	.word	0x40021000
 801a3ac:	08021760 	.word	0x08021760
 801a3b0:	20000000 	.word	0x20000000
 801a3b4:	2000005c 	.word	0x2000005c

0801a3b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a3b8:	b480      	push	{r7}
 801a3ba:	b089      	sub	sp, #36	@ 0x24
 801a3bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801a3be:	2300      	movs	r3, #0
 801a3c0:	61fb      	str	r3, [r7, #28]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a3c6:	4b3e      	ldr	r3, [pc, #248]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a3c8:	689b      	ldr	r3, [r3, #8]
 801a3ca:	f003 030c 	and.w	r3, r3, #12
 801a3ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a3d0:	4b3b      	ldr	r3, [pc, #236]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a3d2:	68db      	ldr	r3, [r3, #12]
 801a3d4:	f003 0303 	and.w	r3, r3, #3
 801a3d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801a3da:	693b      	ldr	r3, [r7, #16]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d005      	beq.n	801a3ec <HAL_RCC_GetSysClockFreq+0x34>
 801a3e0:	693b      	ldr	r3, [r7, #16]
 801a3e2:	2b0c      	cmp	r3, #12
 801a3e4:	d121      	bne.n	801a42a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	2b01      	cmp	r3, #1
 801a3ea:	d11e      	bne.n	801a42a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801a3ec:	4b34      	ldr	r3, [pc, #208]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	f003 0308 	and.w	r3, r3, #8
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d107      	bne.n	801a408 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801a3f8:	4b31      	ldr	r3, [pc, #196]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a3fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801a3fe:	0a1b      	lsrs	r3, r3, #8
 801a400:	f003 030f 	and.w	r3, r3, #15
 801a404:	61fb      	str	r3, [r7, #28]
 801a406:	e005      	b.n	801a414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801a408:	4b2d      	ldr	r3, [pc, #180]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	091b      	lsrs	r3, r3, #4
 801a40e:	f003 030f 	and.w	r3, r3, #15
 801a412:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801a414:	4a2b      	ldr	r2, [pc, #172]	@ (801a4c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 801a416:	69fb      	ldr	r3, [r7, #28]
 801a418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a41c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a41e:	693b      	ldr	r3, [r7, #16]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d10d      	bne.n	801a440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801a424:	69fb      	ldr	r3, [r7, #28]
 801a426:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a428:	e00a      	b.n	801a440 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801a42a:	693b      	ldr	r3, [r7, #16]
 801a42c:	2b04      	cmp	r3, #4
 801a42e:	d102      	bne.n	801a436 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801a430:	4b25      	ldr	r3, [pc, #148]	@ (801a4c8 <HAL_RCC_GetSysClockFreq+0x110>)
 801a432:	61bb      	str	r3, [r7, #24]
 801a434:	e004      	b.n	801a440 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801a436:	693b      	ldr	r3, [r7, #16]
 801a438:	2b08      	cmp	r3, #8
 801a43a:	d101      	bne.n	801a440 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801a43c:	4b23      	ldr	r3, [pc, #140]	@ (801a4cc <HAL_RCC_GetSysClockFreq+0x114>)
 801a43e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801a440:	693b      	ldr	r3, [r7, #16]
 801a442:	2b0c      	cmp	r3, #12
 801a444:	d134      	bne.n	801a4b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801a446:	4b1e      	ldr	r3, [pc, #120]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a448:	68db      	ldr	r3, [r3, #12]
 801a44a:	f003 0303 	and.w	r3, r3, #3
 801a44e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801a450:	68bb      	ldr	r3, [r7, #8]
 801a452:	2b02      	cmp	r3, #2
 801a454:	d003      	beq.n	801a45e <HAL_RCC_GetSysClockFreq+0xa6>
 801a456:	68bb      	ldr	r3, [r7, #8]
 801a458:	2b03      	cmp	r3, #3
 801a45a:	d003      	beq.n	801a464 <HAL_RCC_GetSysClockFreq+0xac>
 801a45c:	e005      	b.n	801a46a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801a45e:	4b1a      	ldr	r3, [pc, #104]	@ (801a4c8 <HAL_RCC_GetSysClockFreq+0x110>)
 801a460:	617b      	str	r3, [r7, #20]
      break;
 801a462:	e005      	b.n	801a470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801a464:	4b19      	ldr	r3, [pc, #100]	@ (801a4cc <HAL_RCC_GetSysClockFreq+0x114>)
 801a466:	617b      	str	r3, [r7, #20]
      break;
 801a468:	e002      	b.n	801a470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801a46a:	69fb      	ldr	r3, [r7, #28]
 801a46c:	617b      	str	r3, [r7, #20]
      break;
 801a46e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801a470:	4b13      	ldr	r3, [pc, #76]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a472:	68db      	ldr	r3, [r3, #12]
 801a474:	091b      	lsrs	r3, r3, #4
 801a476:	f003 0307 	and.w	r3, r3, #7
 801a47a:	3301      	adds	r3, #1
 801a47c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801a47e:	4b10      	ldr	r3, [pc, #64]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a480:	68db      	ldr	r3, [r3, #12]
 801a482:	0a1b      	lsrs	r3, r3, #8
 801a484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a488:	697a      	ldr	r2, [r7, #20]
 801a48a:	fb03 f202 	mul.w	r2, r3, r2
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	fbb2 f3f3 	udiv	r3, r2, r3
 801a494:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801a496:	4b0a      	ldr	r3, [pc, #40]	@ (801a4c0 <HAL_RCC_GetSysClockFreq+0x108>)
 801a498:	68db      	ldr	r3, [r3, #12]
 801a49a:	0e5b      	lsrs	r3, r3, #25
 801a49c:	f003 0303 	and.w	r3, r3, #3
 801a4a0:	3301      	adds	r3, #1
 801a4a2:	005b      	lsls	r3, r3, #1
 801a4a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801a4a6:	697a      	ldr	r2, [r7, #20]
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801a4b0:	69bb      	ldr	r3, [r7, #24]
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	3724      	adds	r7, #36	@ 0x24
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4bc:	4770      	bx	lr
 801a4be:	bf00      	nop
 801a4c0:	40021000 	.word	0x40021000
 801a4c4:	08021778 	.word	0x08021778
 801a4c8:	00f42400 	.word	0x00f42400
 801a4cc:	007a1200 	.word	0x007a1200

0801a4d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a4d0:	b480      	push	{r7}
 801a4d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a4d4:	4b03      	ldr	r3, [pc, #12]	@ (801a4e4 <HAL_RCC_GetHCLKFreq+0x14>)
 801a4d6:	681b      	ldr	r3, [r3, #0]
}
 801a4d8:	4618      	mov	r0, r3
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e0:	4770      	bx	lr
 801a4e2:	bf00      	nop
 801a4e4:	20000000 	.word	0x20000000

0801a4e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801a4ec:	f7ff fff0 	bl	801a4d0 <HAL_RCC_GetHCLKFreq>
 801a4f0:	4602      	mov	r2, r0
 801a4f2:	4b06      	ldr	r3, [pc, #24]	@ (801a50c <HAL_RCC_GetPCLK1Freq+0x24>)
 801a4f4:	689b      	ldr	r3, [r3, #8]
 801a4f6:	0a1b      	lsrs	r3, r3, #8
 801a4f8:	f003 0307 	and.w	r3, r3, #7
 801a4fc:	4904      	ldr	r1, [pc, #16]	@ (801a510 <HAL_RCC_GetPCLK1Freq+0x28>)
 801a4fe:	5ccb      	ldrb	r3, [r1, r3]
 801a500:	f003 031f 	and.w	r3, r3, #31
 801a504:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a508:	4618      	mov	r0, r3
 801a50a:	bd80      	pop	{r7, pc}
 801a50c:	40021000 	.word	0x40021000
 801a510:	08021770 	.word	0x08021770

0801a514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801a518:	f7ff ffda 	bl	801a4d0 <HAL_RCC_GetHCLKFreq>
 801a51c:	4602      	mov	r2, r0
 801a51e:	4b06      	ldr	r3, [pc, #24]	@ (801a538 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a520:	689b      	ldr	r3, [r3, #8]
 801a522:	0adb      	lsrs	r3, r3, #11
 801a524:	f003 0307 	and.w	r3, r3, #7
 801a528:	4904      	ldr	r1, [pc, #16]	@ (801a53c <HAL_RCC_GetPCLK2Freq+0x28>)
 801a52a:	5ccb      	ldrb	r3, [r1, r3]
 801a52c:	f003 031f 	and.w	r3, r3, #31
 801a530:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a534:	4618      	mov	r0, r3
 801a536:	bd80      	pop	{r7, pc}
 801a538:	40021000 	.word	0x40021000
 801a53c:	08021770 	.word	0x08021770

0801a540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	b086      	sub	sp, #24
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801a548:	2300      	movs	r3, #0
 801a54a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801a54c:	4b2a      	ldr	r3, [pc, #168]	@ (801a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801a54e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a554:	2b00      	cmp	r3, #0
 801a556:	d003      	beq.n	801a560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801a558:	f7ff f9b6 	bl	80198c8 <HAL_PWREx_GetVoltageRange>
 801a55c:	6178      	str	r0, [r7, #20]
 801a55e:	e014      	b.n	801a58a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801a560:	4b25      	ldr	r3, [pc, #148]	@ (801a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801a562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a564:	4a24      	ldr	r2, [pc, #144]	@ (801a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801a566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801a56a:	6593      	str	r3, [r2, #88]	@ 0x58
 801a56c:	4b22      	ldr	r3, [pc, #136]	@ (801a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801a56e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a574:	60fb      	str	r3, [r7, #12]
 801a576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801a578:	f7ff f9a6 	bl	80198c8 <HAL_PWREx_GetVoltageRange>
 801a57c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801a57e:	4b1e      	ldr	r3, [pc, #120]	@ (801a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801a580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a582:	4a1d      	ldr	r2, [pc, #116]	@ (801a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801a584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a588:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801a58a:	697b      	ldr	r3, [r7, #20]
 801a58c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a590:	d10b      	bne.n	801a5aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	2b80      	cmp	r3, #128	@ 0x80
 801a596:	d919      	bls.n	801a5cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	2ba0      	cmp	r3, #160	@ 0xa0
 801a59c:	d902      	bls.n	801a5a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801a59e:	2302      	movs	r3, #2
 801a5a0:	613b      	str	r3, [r7, #16]
 801a5a2:	e013      	b.n	801a5cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	613b      	str	r3, [r7, #16]
 801a5a8:	e010      	b.n	801a5cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	2b80      	cmp	r3, #128	@ 0x80
 801a5ae:	d902      	bls.n	801a5b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801a5b0:	2303      	movs	r3, #3
 801a5b2:	613b      	str	r3, [r7, #16]
 801a5b4:	e00a      	b.n	801a5cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	2b80      	cmp	r3, #128	@ 0x80
 801a5ba:	d102      	bne.n	801a5c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801a5bc:	2302      	movs	r3, #2
 801a5be:	613b      	str	r3, [r7, #16]
 801a5c0:	e004      	b.n	801a5cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	2b70      	cmp	r3, #112	@ 0x70
 801a5c6:	d101      	bne.n	801a5cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801a5cc:	4b0b      	ldr	r3, [pc, #44]	@ (801a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	f023 0207 	bic.w	r2, r3, #7
 801a5d4:	4909      	ldr	r1, [pc, #36]	@ (801a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801a5d6:	693b      	ldr	r3, [r7, #16]
 801a5d8:	4313      	orrs	r3, r2
 801a5da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801a5dc:	4b07      	ldr	r3, [pc, #28]	@ (801a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	f003 0307 	and.w	r3, r3, #7
 801a5e4:	693a      	ldr	r2, [r7, #16]
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d001      	beq.n	801a5ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801a5ea:	2301      	movs	r3, #1
 801a5ec:	e000      	b.n	801a5f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801a5ee:	2300      	movs	r3, #0
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3718      	adds	r7, #24
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}
 801a5f8:	40021000 	.word	0x40021000
 801a5fc:	40022000 	.word	0x40022000

0801a600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b086      	sub	sp, #24
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801a608:	2300      	movs	r3, #0
 801a60a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801a60c:	2300      	movs	r3, #0
 801a60e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d031      	beq.n	801a680 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a620:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801a624:	d01a      	beq.n	801a65c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 801a626:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801a62a:	d814      	bhi.n	801a656 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d009      	beq.n	801a644 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801a630:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a634:	d10f      	bne.n	801a656 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 801a636:	4b5d      	ldr	r3, [pc, #372]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a638:	68db      	ldr	r3, [r3, #12]
 801a63a:	4a5c      	ldr	r2, [pc, #368]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a63c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a640:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801a642:	e00c      	b.n	801a65e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	3304      	adds	r3, #4
 801a648:	2100      	movs	r1, #0
 801a64a:	4618      	mov	r0, r3
 801a64c:	f000 f9f0 	bl	801aa30 <RCCEx_PLLSAI1_Config>
 801a650:	4603      	mov	r3, r0
 801a652:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801a654:	e003      	b.n	801a65e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801a656:	2301      	movs	r3, #1
 801a658:	74fb      	strb	r3, [r7, #19]
      break;
 801a65a:	e000      	b.n	801a65e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 801a65c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801a65e:	7cfb      	ldrb	r3, [r7, #19]
 801a660:	2b00      	cmp	r3, #0
 801a662:	d10b      	bne.n	801a67c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801a664:	4b51      	ldr	r3, [pc, #324]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a66a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a672:	494e      	ldr	r1, [pc, #312]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a674:	4313      	orrs	r3, r2
 801a676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 801a67a:	e001      	b.n	801a680 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a67c:	7cfb      	ldrb	r3, [r7, #19]
 801a67e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a688:	2b00      	cmp	r3, #0
 801a68a:	f000 809e 	beq.w	801a7ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a68e:	2300      	movs	r3, #0
 801a690:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801a692:	4b46      	ldr	r3, [pc, #280]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d101      	bne.n	801a6a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 801a69e:	2301      	movs	r3, #1
 801a6a0:	e000      	b.n	801a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d00d      	beq.n	801a6c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a6a8:	4b40      	ldr	r3, [pc, #256]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a6aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a6ac:	4a3f      	ldr	r2, [pc, #252]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a6ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801a6b2:	6593      	str	r3, [r2, #88]	@ 0x58
 801a6b4:	4b3d      	ldr	r3, [pc, #244]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a6b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a6b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a6bc:	60bb      	str	r3, [r7, #8]
 801a6be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801a6c4:	4b3a      	ldr	r3, [pc, #232]	@ (801a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	4a39      	ldr	r2, [pc, #228]	@ (801a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801a6ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a6ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801a6d0:	f7fe fd90 	bl	80191f4 <HAL_GetTick>
 801a6d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801a6d6:	e009      	b.n	801a6ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a6d8:	f7fe fd8c 	bl	80191f4 <HAL_GetTick>
 801a6dc:	4602      	mov	r2, r0
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	1ad3      	subs	r3, r2, r3
 801a6e2:	2b02      	cmp	r3, #2
 801a6e4:	d902      	bls.n	801a6ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 801a6e6:	2303      	movs	r3, #3
 801a6e8:	74fb      	strb	r3, [r7, #19]
        break;
 801a6ea:	e005      	b.n	801a6f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801a6ec:	4b30      	ldr	r3, [pc, #192]	@ (801a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d0ef      	beq.n	801a6d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 801a6f8:	7cfb      	ldrb	r3, [r7, #19]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d15a      	bne.n	801a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801a6fe:	4b2b      	ldr	r3, [pc, #172]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801a708:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d01e      	beq.n	801a74e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a714:	697a      	ldr	r2, [r7, #20]
 801a716:	429a      	cmp	r2, r3
 801a718:	d019      	beq.n	801a74e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801a71a:	4b24      	ldr	r3, [pc, #144]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801a724:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801a726:	4b21      	ldr	r3, [pc, #132]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a72c:	4a1f      	ldr	r2, [pc, #124]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a72e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801a736:	4b1d      	ldr	r3, [pc, #116]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a73c:	4a1b      	ldr	r2, [pc, #108]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a73e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801a746:	4a19      	ldr	r2, [pc, #100]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a748:	697b      	ldr	r3, [r7, #20]
 801a74a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	f003 0301 	and.w	r3, r3, #1
 801a754:	2b00      	cmp	r3, #0
 801a756:	d016      	beq.n	801a786 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a758:	f7fe fd4c 	bl	80191f4 <HAL_GetTick>
 801a75c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801a75e:	e00b      	b.n	801a778 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a760:	f7fe fd48 	bl	80191f4 <HAL_GetTick>
 801a764:	4602      	mov	r2, r0
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	1ad3      	subs	r3, r2, r3
 801a76a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a76e:	4293      	cmp	r3, r2
 801a770:	d902      	bls.n	801a778 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801a772:	2303      	movs	r3, #3
 801a774:	74fb      	strb	r3, [r7, #19]
            break;
 801a776:	e006      	b.n	801a786 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801a778:	4b0c      	ldr	r3, [pc, #48]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a77e:	f003 0302 	and.w	r3, r3, #2
 801a782:	2b00      	cmp	r3, #0
 801a784:	d0ec      	beq.n	801a760 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801a786:	7cfb      	ldrb	r3, [r7, #19]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d10b      	bne.n	801a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801a78c:	4b07      	ldr	r3, [pc, #28]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a792:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a79a:	4904      	ldr	r1, [pc, #16]	@ (801a7ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801a79c:	4313      	orrs	r3, r2
 801a79e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 801a7a2:	e009      	b.n	801a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801a7a4:	7cfb      	ldrb	r3, [r7, #19]
 801a7a6:	74bb      	strb	r3, [r7, #18]
 801a7a8:	e006      	b.n	801a7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 801a7aa:	bf00      	nop
 801a7ac:	40021000 	.word	0x40021000
 801a7b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a7b4:	7cfb      	ldrb	r3, [r7, #19]
 801a7b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a7b8:	7c7b      	ldrb	r3, [r7, #17]
 801a7ba:	2b01      	cmp	r3, #1
 801a7bc:	d105      	bne.n	801a7ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a7be:	4b9b      	ldr	r3, [pc, #620]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7c2:	4a9a      	ldr	r2, [pc, #616]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a7c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a7c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	f003 0301 	and.w	r3, r3, #1
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d00a      	beq.n	801a7ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801a7d6:	4b95      	ldr	r3, [pc, #596]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a7dc:	f023 0203 	bic.w	r2, r3, #3
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	6a1b      	ldr	r3, [r3, #32]
 801a7e4:	4991      	ldr	r1, [pc, #580]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a7e6:	4313      	orrs	r3, r2
 801a7e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	f003 0302 	and.w	r3, r3, #2
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d00a      	beq.n	801a80e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801a7f8:	4b8c      	ldr	r3, [pc, #560]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a7fe:	f023 020c 	bic.w	r2, r3, #12
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a806:	4989      	ldr	r1, [pc, #548]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a808:	4313      	orrs	r3, r2
 801a80a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	f003 0304 	and.w	r3, r3, #4
 801a816:	2b00      	cmp	r3, #0
 801a818:	d00a      	beq.n	801a830 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801a81a:	4b84      	ldr	r3, [pc, #528]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a820:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a828:	4980      	ldr	r1, [pc, #512]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a82a:	4313      	orrs	r3, r2
 801a82c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	f003 0320 	and.w	r3, r3, #32
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d00a      	beq.n	801a852 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801a83c:	4b7b      	ldr	r3, [pc, #492]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a842:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a84a:	4978      	ldr	r1, [pc, #480]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a84c:	4313      	orrs	r3, r2
 801a84e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d00a      	beq.n	801a874 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801a85e:	4b73      	ldr	r3, [pc, #460]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a864:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a86c:	496f      	ldr	r1, [pc, #444]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a86e:	4313      	orrs	r3, r2
 801a870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d00a      	beq.n	801a896 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801a880:	4b6a      	ldr	r3, [pc, #424]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a88e:	4967      	ldr	r1, [pc, #412]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a890:	4313      	orrs	r3, r2
 801a892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d00a      	beq.n	801a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801a8a2:	4b62      	ldr	r3, [pc, #392]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a8a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a8b0:	495e      	ldr	r1, [pc, #376]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a8b2:	4313      	orrs	r3, r2
 801a8b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d00a      	beq.n	801a8da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801a8c4:	4b59      	ldr	r3, [pc, #356]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a8ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a8d2:	4956      	ldr	r1, [pc, #344]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a8d4:	4313      	orrs	r3, r2
 801a8d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d00a      	beq.n	801a8fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801a8e6:	4b51      	ldr	r3, [pc, #324]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a8ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a8f4:	494d      	ldr	r1, [pc, #308]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a8f6:	4313      	orrs	r3, r2
 801a8f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a904:	2b00      	cmp	r3, #0
 801a906:	d028      	beq.n	801a95a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801a908:	4b48      	ldr	r3, [pc, #288]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a90e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a916:	4945      	ldr	r1, [pc, #276]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a918:	4313      	orrs	r3, r2
 801a91a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a926:	d106      	bne.n	801a936 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801a928:	4b40      	ldr	r3, [pc, #256]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a92a:	68db      	ldr	r3, [r3, #12]
 801a92c:	4a3f      	ldr	r2, [pc, #252]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a92e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a932:	60d3      	str	r3, [r2, #12]
 801a934:	e011      	b.n	801a95a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a93a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801a93e:	d10c      	bne.n	801a95a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	3304      	adds	r3, #4
 801a944:	2101      	movs	r1, #1
 801a946:	4618      	mov	r0, r3
 801a948:	f000 f872 	bl	801aa30 <RCCEx_PLLSAI1_Config>
 801a94c:	4603      	mov	r3, r0
 801a94e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801a950:	7cfb      	ldrb	r3, [r7, #19]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d001      	beq.n	801a95a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 801a956:	7cfb      	ldrb	r3, [r7, #19]
 801a958:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a962:	2b00      	cmp	r3, #0
 801a964:	d028      	beq.n	801a9b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801a966:	4b31      	ldr	r3, [pc, #196]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a96c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a974:	492d      	ldr	r1, [pc, #180]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a976:	4313      	orrs	r3, r2
 801a978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a980:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a984:	d106      	bne.n	801a994 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801a986:	4b29      	ldr	r3, [pc, #164]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	4a28      	ldr	r2, [pc, #160]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a98c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a990:	60d3      	str	r3, [r2, #12]
 801a992:	e011      	b.n	801a9b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a998:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801a99c:	d10c      	bne.n	801a9b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	3304      	adds	r3, #4
 801a9a2:	2101      	movs	r1, #1
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f000 f843 	bl	801aa30 <RCCEx_PLLSAI1_Config>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801a9ae:	7cfb      	ldrb	r3, [r7, #19]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d001      	beq.n	801a9b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 801a9b4:	7cfb      	ldrb	r3, [r7, #19]
 801a9b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d01c      	beq.n	801a9fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801a9c4:	4b19      	ldr	r3, [pc, #100]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a9ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a9d2:	4916      	ldr	r1, [pc, #88]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801a9d4:	4313      	orrs	r3, r2
 801a9d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a9de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a9e2:	d10c      	bne.n	801a9fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	3304      	adds	r3, #4
 801a9e8:	2102      	movs	r1, #2
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f000 f820 	bl	801aa30 <RCCEx_PLLSAI1_Config>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801a9f4:	7cfb      	ldrb	r3, [r7, #19]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d001      	beq.n	801a9fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 801a9fa:	7cfb      	ldrb	r3, [r7, #19]
 801a9fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d00a      	beq.n	801aa20 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801aa0a:	4b08      	ldr	r3, [pc, #32]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801aa0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801aa10:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa18:	4904      	ldr	r1, [pc, #16]	@ (801aa2c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801aa1a:	4313      	orrs	r3, r2
 801aa1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801aa20:	7cbb      	ldrb	r3, [r7, #18]
}
 801aa22:	4618      	mov	r0, r3
 801aa24:	3718      	adds	r7, #24
 801aa26:	46bd      	mov	sp, r7
 801aa28:	bd80      	pop	{r7, pc}
 801aa2a:	bf00      	nop
 801aa2c:	40021000 	.word	0x40021000

0801aa30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b084      	sub	sp, #16
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801aa3a:	2300      	movs	r3, #0
 801aa3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801aa3e:	4b74      	ldr	r3, [pc, #464]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aa40:	68db      	ldr	r3, [r3, #12]
 801aa42:	f003 0303 	and.w	r3, r3, #3
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d018      	beq.n	801aa7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801aa4a:	4b71      	ldr	r3, [pc, #452]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aa4c:	68db      	ldr	r3, [r3, #12]
 801aa4e:	f003 0203 	and.w	r2, r3, #3
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	429a      	cmp	r2, r3
 801aa58:	d10d      	bne.n	801aa76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
       ||
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d009      	beq.n	801aa76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801aa62:	4b6b      	ldr	r3, [pc, #428]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aa64:	68db      	ldr	r3, [r3, #12]
 801aa66:	091b      	lsrs	r3, r3, #4
 801aa68:	f003 0307 	and.w	r3, r3, #7
 801aa6c:	1c5a      	adds	r2, r3, #1
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	685b      	ldr	r3, [r3, #4]
       ||
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d047      	beq.n	801ab06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801aa76:	2301      	movs	r3, #1
 801aa78:	73fb      	strb	r3, [r7, #15]
 801aa7a:	e044      	b.n	801ab06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2b03      	cmp	r3, #3
 801aa82:	d018      	beq.n	801aab6 <RCCEx_PLLSAI1_Config+0x86>
 801aa84:	2b03      	cmp	r3, #3
 801aa86:	d825      	bhi.n	801aad4 <RCCEx_PLLSAI1_Config+0xa4>
 801aa88:	2b01      	cmp	r3, #1
 801aa8a:	d002      	beq.n	801aa92 <RCCEx_PLLSAI1_Config+0x62>
 801aa8c:	2b02      	cmp	r3, #2
 801aa8e:	d009      	beq.n	801aaa4 <RCCEx_PLLSAI1_Config+0x74>
 801aa90:	e020      	b.n	801aad4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801aa92:	4b5f      	ldr	r3, [pc, #380]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f003 0302 	and.w	r3, r3, #2
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d11d      	bne.n	801aada <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801aaa2:	e01a      	b.n	801aada <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801aaa4:	4b5a      	ldr	r3, [pc, #360]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d116      	bne.n	801aade <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801aab0:	2301      	movs	r3, #1
 801aab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801aab4:	e013      	b.n	801aade <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801aab6:	4b56      	ldr	r3, [pc, #344]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d10f      	bne.n	801aae2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801aac2:	4b53      	ldr	r3, [pc, #332]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d109      	bne.n	801aae2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801aace:	2301      	movs	r3, #1
 801aad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801aad2:	e006      	b.n	801aae2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801aad4:	2301      	movs	r3, #1
 801aad6:	73fb      	strb	r3, [r7, #15]
      break;
 801aad8:	e004      	b.n	801aae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801aada:	bf00      	nop
 801aadc:	e002      	b.n	801aae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801aade:	bf00      	nop
 801aae0:	e000      	b.n	801aae4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801aae2:	bf00      	nop
    }

    if(status == HAL_OK)
 801aae4:	7bfb      	ldrb	r3, [r7, #15]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d10d      	bne.n	801ab06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801aaea:	4b49      	ldr	r3, [pc, #292]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801aaec:	68db      	ldr	r3, [r3, #12]
 801aaee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	6819      	ldr	r1, [r3, #0]
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	685b      	ldr	r3, [r3, #4]
 801aafa:	3b01      	subs	r3, #1
 801aafc:	011b      	lsls	r3, r3, #4
 801aafe:	430b      	orrs	r3, r1
 801ab00:	4943      	ldr	r1, [pc, #268]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab02:	4313      	orrs	r3, r2
 801ab04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801ab06:	7bfb      	ldrb	r3, [r7, #15]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d17c      	bne.n	801ac06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801ab0c:	4b40      	ldr	r3, [pc, #256]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	4a3f      	ldr	r2, [pc, #252]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ab16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ab18:	f7fe fb6c 	bl	80191f4 <HAL_GetTick>
 801ab1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801ab1e:	e009      	b.n	801ab34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801ab20:	f7fe fb68 	bl	80191f4 <HAL_GetTick>
 801ab24:	4602      	mov	r2, r0
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	1ad3      	subs	r3, r2, r3
 801ab2a:	2b02      	cmp	r3, #2
 801ab2c:	d902      	bls.n	801ab34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801ab2e:	2303      	movs	r3, #3
 801ab30:	73fb      	strb	r3, [r7, #15]
        break;
 801ab32:	e005      	b.n	801ab40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801ab34:	4b36      	ldr	r3, [pc, #216]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d1ef      	bne.n	801ab20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801ab40:	7bfb      	ldrb	r3, [r7, #15]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d15f      	bne.n	801ac06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d110      	bne.n	801ab6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801ab4c:	4b30      	ldr	r3, [pc, #192]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab4e:	691b      	ldr	r3, [r3, #16]
 801ab50:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 801ab54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801ab58:	687a      	ldr	r2, [r7, #4]
 801ab5a:	6892      	ldr	r2, [r2, #8]
 801ab5c:	0211      	lsls	r1, r2, #8
 801ab5e:	687a      	ldr	r2, [r7, #4]
 801ab60:	68d2      	ldr	r2, [r2, #12]
 801ab62:	06d2      	lsls	r2, r2, #27
 801ab64:	430a      	orrs	r2, r1
 801ab66:	492a      	ldr	r1, [pc, #168]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab68:	4313      	orrs	r3, r2
 801ab6a:	610b      	str	r3, [r1, #16]
 801ab6c:	e027      	b.n	801abbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	2b01      	cmp	r3, #1
 801ab72:	d112      	bne.n	801ab9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801ab74:	4b26      	ldr	r3, [pc, #152]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab76:	691b      	ldr	r3, [r3, #16]
 801ab78:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801ab7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801ab80:	687a      	ldr	r2, [r7, #4]
 801ab82:	6892      	ldr	r2, [r2, #8]
 801ab84:	0211      	lsls	r1, r2, #8
 801ab86:	687a      	ldr	r2, [r7, #4]
 801ab88:	6912      	ldr	r2, [r2, #16]
 801ab8a:	0852      	lsrs	r2, r2, #1
 801ab8c:	3a01      	subs	r2, #1
 801ab8e:	0552      	lsls	r2, r2, #21
 801ab90:	430a      	orrs	r2, r1
 801ab92:	491f      	ldr	r1, [pc, #124]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab94:	4313      	orrs	r3, r2
 801ab96:	610b      	str	r3, [r1, #16]
 801ab98:	e011      	b.n	801abbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801ab9a:	4b1d      	ldr	r3, [pc, #116]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ab9c:	691b      	ldr	r3, [r3, #16]
 801ab9e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 801aba2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801aba6:	687a      	ldr	r2, [r7, #4]
 801aba8:	6892      	ldr	r2, [r2, #8]
 801abaa:	0211      	lsls	r1, r2, #8
 801abac:	687a      	ldr	r2, [r7, #4]
 801abae:	6952      	ldr	r2, [r2, #20]
 801abb0:	0852      	lsrs	r2, r2, #1
 801abb2:	3a01      	subs	r2, #1
 801abb4:	0652      	lsls	r2, r2, #25
 801abb6:	430a      	orrs	r2, r1
 801abb8:	4915      	ldr	r1, [pc, #84]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801abba:	4313      	orrs	r3, r2
 801abbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801abbe:	4b14      	ldr	r3, [pc, #80]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	4a13      	ldr	r2, [pc, #76]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801abc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801abc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801abca:	f7fe fb13 	bl	80191f4 <HAL_GetTick>
 801abce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801abd0:	e009      	b.n	801abe6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801abd2:	f7fe fb0f 	bl	80191f4 <HAL_GetTick>
 801abd6:	4602      	mov	r2, r0
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	1ad3      	subs	r3, r2, r3
 801abdc:	2b02      	cmp	r3, #2
 801abde:	d902      	bls.n	801abe6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 801abe0:	2303      	movs	r3, #3
 801abe2:	73fb      	strb	r3, [r7, #15]
          break;
 801abe4:	e005      	b.n	801abf2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801abe6:	4b0a      	ldr	r3, [pc, #40]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d0ef      	beq.n	801abd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801abf2:	7bfb      	ldrb	r3, [r7, #15]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d106      	bne.n	801ac06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801abf8:	4b05      	ldr	r3, [pc, #20]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801abfa:	691a      	ldr	r2, [r3, #16]
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	699b      	ldr	r3, [r3, #24]
 801ac00:	4903      	ldr	r1, [pc, #12]	@ (801ac10 <RCCEx_PLLSAI1_Config+0x1e0>)
 801ac02:	4313      	orrs	r3, r2
 801ac04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801ac06:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac08:	4618      	mov	r0, r3
 801ac0a:	3710      	adds	r7, #16
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd80      	pop	{r7, pc}
 801ac10:	40021000 	.word	0x40021000

0801ac14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d101      	bne.n	801ac26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801ac22:	2301      	movs	r3, #1
 801ac24:	e095      	b.n	801ad52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d108      	bne.n	801ac40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	685b      	ldr	r3, [r3, #4]
 801ac32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801ac36:	d009      	beq.n	801ac4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	2200      	movs	r2, #0
 801ac3c:	61da      	str	r2, [r3, #28]
 801ac3e:	e005      	b.n	801ac4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	2200      	movs	r2, #0
 801ac44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2200      	movs	r2, #0
 801ac4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801ac58:	b2db      	uxtb	r3, r3
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d106      	bne.n	801ac6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	2200      	movs	r2, #0
 801ac62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801ac66:	6878      	ldr	r0, [r7, #4]
 801ac68:	f7e6 fac0 	bl	80011ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	2202      	movs	r2, #2
 801ac70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801ac82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	68db      	ldr	r3, [r3, #12]
 801ac88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801ac8c:	d902      	bls.n	801ac94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801ac8e:	2300      	movs	r3, #0
 801ac90:	60fb      	str	r3, [r7, #12]
 801ac92:	e002      	b.n	801ac9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801ac94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801ac98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	68db      	ldr	r3, [r3, #12]
 801ac9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801aca2:	d007      	beq.n	801acb4 <HAL_SPI_Init+0xa0>
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	68db      	ldr	r3, [r3, #12]
 801aca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801acac:	d002      	beq.n	801acb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	2200      	movs	r2, #0
 801acb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	685b      	ldr	r3, [r3, #4]
 801acb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	689b      	ldr	r3, [r3, #8]
 801acc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801acc4:	431a      	orrs	r2, r3
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	691b      	ldr	r3, [r3, #16]
 801acca:	f003 0302 	and.w	r3, r3, #2
 801acce:	431a      	orrs	r2, r3
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	695b      	ldr	r3, [r3, #20]
 801acd4:	f003 0301 	and.w	r3, r3, #1
 801acd8:	431a      	orrs	r2, r3
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	699b      	ldr	r3, [r3, #24]
 801acde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801ace2:	431a      	orrs	r2, r3
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	69db      	ldr	r3, [r3, #28]
 801ace8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801acec:	431a      	orrs	r2, r3
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	6a1b      	ldr	r3, [r3, #32]
 801acf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801acf6:	ea42 0103 	orr.w	r1, r2, r3
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801acfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	430a      	orrs	r2, r1
 801ad08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	699b      	ldr	r3, [r3, #24]
 801ad0e:	0c1b      	lsrs	r3, r3, #16
 801ad10:	f003 0204 	and.w	r2, r3, #4
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad18:	f003 0310 	and.w	r3, r3, #16
 801ad1c:	431a      	orrs	r2, r3
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ad22:	f003 0308 	and.w	r3, r3, #8
 801ad26:	431a      	orrs	r2, r3
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	68db      	ldr	r3, [r3, #12]
 801ad2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801ad30:	ea42 0103 	orr.w	r1, r2, r3
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	430a      	orrs	r2, r1
 801ad40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	2200      	movs	r2, #0
 801ad46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	2201      	movs	r2, #1
 801ad4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801ad50:	2300      	movs	r3, #0
}
 801ad52:	4618      	mov	r0, r3
 801ad54:	3710      	adds	r7, #16
 801ad56:	46bd      	mov	sp, r7
 801ad58:	bd80      	pop	{r7, pc}

0801ad5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801ad5a:	b580      	push	{r7, lr}
 801ad5c:	b08a      	sub	sp, #40	@ 0x28
 801ad5e:	af00      	add	r7, sp, #0
 801ad60:	60f8      	str	r0, [r7, #12]
 801ad62:	60b9      	str	r1, [r7, #8]
 801ad64:	607a      	str	r2, [r7, #4]
 801ad66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801ad68:	2301      	movs	r3, #1
 801ad6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ad6c:	f7fe fa42 	bl	80191f4 <HAL_GetTick>
 801ad70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801ad78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 801ad80:	887b      	ldrh	r3, [r7, #2]
 801ad82:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 801ad84:	887b      	ldrh	r3, [r7, #2]
 801ad86:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ad88:	7ffb      	ldrb	r3, [r7, #31]
 801ad8a:	2b01      	cmp	r3, #1
 801ad8c:	d00c      	beq.n	801ada8 <HAL_SPI_TransmitReceive+0x4e>
 801ad8e:	69bb      	ldr	r3, [r7, #24]
 801ad90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801ad94:	d106      	bne.n	801ada4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	689b      	ldr	r3, [r3, #8]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d102      	bne.n	801ada4 <HAL_SPI_TransmitReceive+0x4a>
 801ad9e:	7ffb      	ldrb	r3, [r7, #31]
 801ada0:	2b04      	cmp	r3, #4
 801ada2:	d001      	beq.n	801ada8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 801ada4:	2302      	movs	r3, #2
 801ada6:	e1f3      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d005      	beq.n	801adba <HAL_SPI_TransmitReceive+0x60>
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d002      	beq.n	801adba <HAL_SPI_TransmitReceive+0x60>
 801adb4:	887b      	ldrh	r3, [r7, #2]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d101      	bne.n	801adbe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 801adba:	2301      	movs	r3, #1
 801adbc:	e1e8      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801adc4:	2b01      	cmp	r3, #1
 801adc6:	d101      	bne.n	801adcc <HAL_SPI_TransmitReceive+0x72>
 801adc8:	2302      	movs	r3, #2
 801adca:	e1e1      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	2201      	movs	r2, #1
 801add0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801adda:	b2db      	uxtb	r3, r3
 801addc:	2b04      	cmp	r3, #4
 801adde:	d003      	beq.n	801ade8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	2205      	movs	r2, #5
 801ade4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	2200      	movs	r2, #0
 801adec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	687a      	ldr	r2, [r7, #4]
 801adf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	887a      	ldrh	r2, [r7, #2]
 801adf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	887a      	ldrh	r2, [r7, #2]
 801ae00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	68ba      	ldr	r2, [r7, #8]
 801ae08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	887a      	ldrh	r2, [r7, #2]
 801ae0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	887a      	ldrh	r2, [r7, #2]
 801ae14:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	2200      	movs	r2, #0
 801ae1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	2200      	movs	r2, #0
 801ae20:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	68db      	ldr	r3, [r3, #12]
 801ae26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801ae2a:	d802      	bhi.n	801ae32 <HAL_SPI_TransmitReceive+0xd8>
 801ae2c:	8abb      	ldrh	r3, [r7, #20]
 801ae2e:	2b01      	cmp	r3, #1
 801ae30:	d908      	bls.n	801ae44 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	685a      	ldr	r2, [r3, #4]
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801ae40:	605a      	str	r2, [r3, #4]
 801ae42:	e007      	b.n	801ae54 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	685a      	ldr	r2, [r3, #4]
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801ae52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ae5e:	2b40      	cmp	r3, #64	@ 0x40
 801ae60:	d007      	beq.n	801ae72 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	681a      	ldr	r2, [r3, #0]
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ae70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	68db      	ldr	r3, [r3, #12]
 801ae76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801ae7a:	f240 8083 	bls.w	801af84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	685b      	ldr	r3, [r3, #4]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d002      	beq.n	801ae8c <HAL_SPI_TransmitReceive+0x132>
 801ae86:	8afb      	ldrh	r3, [r7, #22]
 801ae88:	2b01      	cmp	r3, #1
 801ae8a:	d16f      	bne.n	801af6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae90:	881a      	ldrh	r2, [r3, #0]
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae9c:	1c9a      	adds	r2, r3, #2
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	3b01      	subs	r3, #1
 801aeaa:	b29a      	uxth	r2, r3
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aeb0:	e05c      	b.n	801af6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	689b      	ldr	r3, [r3, #8]
 801aeb8:	f003 0302 	and.w	r3, r3, #2
 801aebc:	2b02      	cmp	r3, #2
 801aebe:	d11b      	bne.n	801aef8 <HAL_SPI_TransmitReceive+0x19e>
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801aec4:	b29b      	uxth	r3, r3
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d016      	beq.n	801aef8 <HAL_SPI_TransmitReceive+0x19e>
 801aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aecc:	2b01      	cmp	r3, #1
 801aece:	d113      	bne.n	801aef8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aed4:	881a      	ldrh	r2, [r3, #0]
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aee0:	1c9a      	adds	r2, r3, #2
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	3b01      	subs	r3, #1
 801aeee:	b29a      	uxth	r2, r3
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801aef4:	2300      	movs	r3, #0
 801aef6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	689b      	ldr	r3, [r3, #8]
 801aefe:	f003 0301 	and.w	r3, r3, #1
 801af02:	2b01      	cmp	r3, #1
 801af04:	d11c      	bne.n	801af40 <HAL_SPI_TransmitReceive+0x1e6>
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801af0c:	b29b      	uxth	r3, r3
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d016      	beq.n	801af40 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	68da      	ldr	r2, [r3, #12]
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af1c:	b292      	uxth	r2, r2
 801af1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af24:	1c9a      	adds	r2, r3, #2
 801af26:	68fb      	ldr	r3, [r7, #12]
 801af28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801af30:	b29b      	uxth	r3, r3
 801af32:	3b01      	subs	r3, #1
 801af34:	b29a      	uxth	r2, r3
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801af3c:	2301      	movs	r3, #1
 801af3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801af40:	f7fe f958 	bl	80191f4 <HAL_GetTick>
 801af44:	4602      	mov	r2, r0
 801af46:	6a3b      	ldr	r3, [r7, #32]
 801af48:	1ad3      	subs	r3, r2, r3
 801af4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af4c:	429a      	cmp	r2, r3
 801af4e:	d80d      	bhi.n	801af6c <HAL_SPI_TransmitReceive+0x212>
 801af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af56:	d009      	beq.n	801af6c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	2201      	movs	r2, #1
 801af5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	2200      	movs	r2, #0
 801af64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801af68:	2303      	movs	r3, #3
 801af6a:	e111      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801af70:	b29b      	uxth	r3, r3
 801af72:	2b00      	cmp	r3, #0
 801af74:	d19d      	bne.n	801aeb2 <HAL_SPI_TransmitReceive+0x158>
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801af7c:	b29b      	uxth	r3, r3
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d197      	bne.n	801aeb2 <HAL_SPI_TransmitReceive+0x158>
 801af82:	e0e5      	b.n	801b150 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	685b      	ldr	r3, [r3, #4]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d003      	beq.n	801af94 <HAL_SPI_TransmitReceive+0x23a>
 801af8c:	8afb      	ldrh	r3, [r7, #22]
 801af8e:	2b01      	cmp	r3, #1
 801af90:	f040 80d1 	bne.w	801b136 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801af98:	b29b      	uxth	r3, r3
 801af9a:	2b01      	cmp	r3, #1
 801af9c:	d912      	bls.n	801afc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801afa2:	881a      	ldrh	r2, [r3, #0]
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801afae:	1c9a      	adds	r2, r3, #2
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801afb8:	b29b      	uxth	r3, r3
 801afba:	3b02      	subs	r3, #2
 801afbc:	b29a      	uxth	r2, r3
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801afc2:	e0b8      	b.n	801b136 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	330c      	adds	r3, #12
 801afce:	7812      	ldrb	r2, [r2, #0]
 801afd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801afd6:	1c5a      	adds	r2, r3, #1
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801afe0:	b29b      	uxth	r3, r3
 801afe2:	3b01      	subs	r3, #1
 801afe4:	b29a      	uxth	r2, r3
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801afea:	e0a4      	b.n	801b136 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	689b      	ldr	r3, [r3, #8]
 801aff2:	f003 0302 	and.w	r3, r3, #2
 801aff6:	2b02      	cmp	r3, #2
 801aff8:	d134      	bne.n	801b064 <HAL_SPI_TransmitReceive+0x30a>
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801affe:	b29b      	uxth	r3, r3
 801b000:	2b00      	cmp	r3, #0
 801b002:	d02f      	beq.n	801b064 <HAL_SPI_TransmitReceive+0x30a>
 801b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b006:	2b01      	cmp	r3, #1
 801b008:	d12c      	bne.n	801b064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801b00e:	b29b      	uxth	r3, r3
 801b010:	2b01      	cmp	r3, #1
 801b012:	d912      	bls.n	801b03a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b018:	881a      	ldrh	r2, [r3, #0]
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b024:	1c9a      	adds	r2, r3, #2
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801b02e:	b29b      	uxth	r3, r3
 801b030:	3b02      	subs	r3, #2
 801b032:	b29a      	uxth	r2, r3
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801b038:	e012      	b.n	801b060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	330c      	adds	r3, #12
 801b044:	7812      	ldrb	r2, [r2, #0]
 801b046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b04c:	1c5a      	adds	r2, r3, #1
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801b056:	b29b      	uxth	r3, r3
 801b058:	3b01      	subs	r3, #1
 801b05a:	b29a      	uxth	r2, r3
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801b060:	2300      	movs	r3, #0
 801b062:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	689b      	ldr	r3, [r3, #8]
 801b06a:	f003 0301 	and.w	r3, r3, #1
 801b06e:	2b01      	cmp	r3, #1
 801b070:	d148      	bne.n	801b104 <HAL_SPI_TransmitReceive+0x3aa>
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801b078:	b29b      	uxth	r3, r3
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d042      	beq.n	801b104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801b084:	b29b      	uxth	r3, r3
 801b086:	2b01      	cmp	r3, #1
 801b088:	d923      	bls.n	801b0d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	68da      	ldr	r2, [r3, #12]
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b094:	b292      	uxth	r2, r2
 801b096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b09c:	1c9a      	adds	r2, r3, #2
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801b0a8:	b29b      	uxth	r3, r3
 801b0aa:	3b02      	subs	r3, #2
 801b0ac:	b29a      	uxth	r2, r3
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801b0ba:	b29b      	uxth	r3, r3
 801b0bc:	2b01      	cmp	r3, #1
 801b0be:	d81f      	bhi.n	801b100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	685a      	ldr	r2, [r3, #4]
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801b0ce:	605a      	str	r2, [r3, #4]
 801b0d0:	e016      	b.n	801b100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	f103 020c 	add.w	r2, r3, #12
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b0de:	7812      	ldrb	r2, [r2, #0]
 801b0e0:	b2d2      	uxtb	r2, r2
 801b0e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b0e8:	1c5a      	adds	r2, r3, #1
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801b0f4:	b29b      	uxth	r3, r3
 801b0f6:	3b01      	subs	r3, #1
 801b0f8:	b29a      	uxth	r2, r3
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801b100:	2301      	movs	r3, #1
 801b102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801b104:	f7fe f876 	bl	80191f4 <HAL_GetTick>
 801b108:	4602      	mov	r2, r0
 801b10a:	6a3b      	ldr	r3, [r7, #32]
 801b10c:	1ad3      	subs	r3, r2, r3
 801b10e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b110:	429a      	cmp	r2, r3
 801b112:	d803      	bhi.n	801b11c <HAL_SPI_TransmitReceive+0x3c2>
 801b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b11a:	d102      	bne.n	801b122 <HAL_SPI_TransmitReceive+0x3c8>
 801b11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d109      	bne.n	801b136 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	2201      	movs	r2, #1
 801b126:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	2200      	movs	r2, #0
 801b12e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801b132:	2303      	movs	r3, #3
 801b134:	e02c      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	f47f af55 	bne.w	801afec <HAL_SPI_TransmitReceive+0x292>
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801b148:	b29b      	uxth	r3, r3
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	f47f af4e 	bne.w	801afec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801b150:	6a3a      	ldr	r2, [r7, #32]
 801b152:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b154:	68f8      	ldr	r0, [r7, #12]
 801b156:	f000 f93d 	bl	801b3d4 <SPI_EndRxTxTransaction>
 801b15a:	4603      	mov	r3, r0
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d008      	beq.n	801b172 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	2220      	movs	r2, #32
 801b164:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	2200      	movs	r2, #0
 801b16a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 801b16e:	2301      	movs	r3, #1
 801b170:	e00e      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	2201      	movs	r2, #1
 801b176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	2200      	movs	r2, #0
 801b17e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b186:	2b00      	cmp	r3, #0
 801b188:	d001      	beq.n	801b18e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 801b18a:	2301      	movs	r3, #1
 801b18c:	e000      	b.n	801b190 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 801b18e:	2300      	movs	r3, #0
  }
}
 801b190:	4618      	mov	r0, r3
 801b192:	3728      	adds	r7, #40	@ 0x28
 801b194:	46bd      	mov	sp, r7
 801b196:	bd80      	pop	{r7, pc}

0801b198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b088      	sub	sp, #32
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	60f8      	str	r0, [r7, #12]
 801b1a0:	60b9      	str	r1, [r7, #8]
 801b1a2:	603b      	str	r3, [r7, #0]
 801b1a4:	4613      	mov	r3, r2
 801b1a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801b1a8:	f7fe f824 	bl	80191f4 <HAL_GetTick>
 801b1ac:	4602      	mov	r2, r0
 801b1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1b0:	1a9b      	subs	r3, r3, r2
 801b1b2:	683a      	ldr	r2, [r7, #0]
 801b1b4:	4413      	add	r3, r2
 801b1b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801b1b8:	f7fe f81c 	bl	80191f4 <HAL_GetTick>
 801b1bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801b1be:	4b39      	ldr	r3, [pc, #228]	@ (801b2a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	015b      	lsls	r3, r3, #5
 801b1c4:	0d1b      	lsrs	r3, r3, #20
 801b1c6:	69fa      	ldr	r2, [r7, #28]
 801b1c8:	fb02 f303 	mul.w	r3, r2, r3
 801b1cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801b1ce:	e054      	b.n	801b27a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b1d6:	d050      	beq.n	801b27a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801b1d8:	f7fe f80c 	bl	80191f4 <HAL_GetTick>
 801b1dc:	4602      	mov	r2, r0
 801b1de:	69bb      	ldr	r3, [r7, #24]
 801b1e0:	1ad3      	subs	r3, r2, r3
 801b1e2:	69fa      	ldr	r2, [r7, #28]
 801b1e4:	429a      	cmp	r2, r3
 801b1e6:	d902      	bls.n	801b1ee <SPI_WaitFlagStateUntilTimeout+0x56>
 801b1e8:	69fb      	ldr	r3, [r7, #28]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d13d      	bne.n	801b26a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	685a      	ldr	r2, [r3, #4]
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801b1fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	685b      	ldr	r3, [r3, #4]
 801b202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801b206:	d111      	bne.n	801b22c <SPI_WaitFlagStateUntilTimeout+0x94>
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	689b      	ldr	r3, [r3, #8]
 801b20c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b210:	d004      	beq.n	801b21c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	689b      	ldr	r3, [r3, #8]
 801b216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b21a:	d107      	bne.n	801b22c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	681a      	ldr	r2, [r3, #0]
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801b22a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b234:	d10f      	bne.n	801b256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	681a      	ldr	r2, [r3, #0]
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801b244:	601a      	str	r2, [r3, #0]
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	681a      	ldr	r2, [r3, #0]
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801b254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	2201      	movs	r2, #1
 801b25a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	2200      	movs	r2, #0
 801b262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801b266:	2303      	movs	r3, #3
 801b268:	e017      	b.n	801b29a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801b26a:	697b      	ldr	r3, [r7, #20]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d101      	bne.n	801b274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801b270:	2300      	movs	r3, #0
 801b272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	3b01      	subs	r3, #1
 801b278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	689a      	ldr	r2, [r3, #8]
 801b280:	68bb      	ldr	r3, [r7, #8]
 801b282:	4013      	ands	r3, r2
 801b284:	68ba      	ldr	r2, [r7, #8]
 801b286:	429a      	cmp	r2, r3
 801b288:	bf0c      	ite	eq
 801b28a:	2301      	moveq	r3, #1
 801b28c:	2300      	movne	r3, #0
 801b28e:	b2db      	uxtb	r3, r3
 801b290:	461a      	mov	r2, r3
 801b292:	79fb      	ldrb	r3, [r7, #7]
 801b294:	429a      	cmp	r2, r3
 801b296:	d19b      	bne.n	801b1d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801b298:	2300      	movs	r3, #0
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3720      	adds	r7, #32
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	20000000 	.word	0x20000000

0801b2a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	b08a      	sub	sp, #40	@ 0x28
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	60f8      	str	r0, [r7, #12]
 801b2b0:	60b9      	str	r1, [r7, #8]
 801b2b2:	607a      	str	r2, [r7, #4]
 801b2b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801b2ba:	f7fd ff9b 	bl	80191f4 <HAL_GetTick>
 801b2be:	4602      	mov	r2, r0
 801b2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b2c2:	1a9b      	subs	r3, r3, r2
 801b2c4:	683a      	ldr	r2, [r7, #0]
 801b2c6:	4413      	add	r3, r2
 801b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 801b2ca:	f7fd ff93 	bl	80191f4 <HAL_GetTick>
 801b2ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	330c      	adds	r3, #12
 801b2d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801b2d8:	4b3d      	ldr	r3, [pc, #244]	@ (801b3d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801b2da:	681a      	ldr	r2, [r3, #0]
 801b2dc:	4613      	mov	r3, r2
 801b2de:	009b      	lsls	r3, r3, #2
 801b2e0:	4413      	add	r3, r2
 801b2e2:	00da      	lsls	r2, r3, #3
 801b2e4:	1ad3      	subs	r3, r2, r3
 801b2e6:	0d1b      	lsrs	r3, r3, #20
 801b2e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b2ea:	fb02 f303 	mul.w	r3, r2, r3
 801b2ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801b2f0:	e060      	b.n	801b3b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801b2f8:	d107      	bne.n	801b30a <SPI_WaitFifoStateUntilTimeout+0x62>
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d104      	bne.n	801b30a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801b300:	69fb      	ldr	r3, [r7, #28]
 801b302:	781b      	ldrb	r3, [r3, #0]
 801b304:	b2db      	uxtb	r3, r3
 801b306:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801b308:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b310:	d050      	beq.n	801b3b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801b312:	f7fd ff6f 	bl	80191f4 <HAL_GetTick>
 801b316:	4602      	mov	r2, r0
 801b318:	6a3b      	ldr	r3, [r7, #32]
 801b31a:	1ad3      	subs	r3, r2, r3
 801b31c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b31e:	429a      	cmp	r2, r3
 801b320:	d902      	bls.n	801b328 <SPI_WaitFifoStateUntilTimeout+0x80>
 801b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b324:	2b00      	cmp	r3, #0
 801b326:	d13d      	bne.n	801b3a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	685a      	ldr	r2, [r3, #4]
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801b336:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	685b      	ldr	r3, [r3, #4]
 801b33c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801b340:	d111      	bne.n	801b366 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	689b      	ldr	r3, [r3, #8]
 801b346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b34a:	d004      	beq.n	801b356 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	689b      	ldr	r3, [r3, #8]
 801b350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b354:	d107      	bne.n	801b366 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	681a      	ldr	r2, [r3, #0]
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801b364:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b36a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b36e:	d10f      	bne.n	801b390 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	681a      	ldr	r2, [r3, #0]
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801b37e:	601a      	str	r2, [r3, #0]
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	681a      	ldr	r2, [r3, #0]
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801b38e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	2201      	movs	r2, #1
 801b394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	2200      	movs	r2, #0
 801b39c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801b3a0:	2303      	movs	r3, #3
 801b3a2:	e010      	b.n	801b3c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801b3a4:	69bb      	ldr	r3, [r7, #24]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d101      	bne.n	801b3ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801b3ae:	69bb      	ldr	r3, [r7, #24]
 801b3b0:	3b01      	subs	r3, #1
 801b3b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	689a      	ldr	r2, [r3, #8]
 801b3ba:	68bb      	ldr	r3, [r7, #8]
 801b3bc:	4013      	ands	r3, r2
 801b3be:	687a      	ldr	r2, [r7, #4]
 801b3c0:	429a      	cmp	r2, r3
 801b3c2:	d196      	bne.n	801b2f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801b3c4:	2300      	movs	r3, #0
}
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	3728      	adds	r7, #40	@ 0x28
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	bd80      	pop	{r7, pc}
 801b3ce:	bf00      	nop
 801b3d0:	20000000 	.word	0x20000000

0801b3d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b086      	sub	sp, #24
 801b3d8:	af02      	add	r7, sp, #8
 801b3da:	60f8      	str	r0, [r7, #12]
 801b3dc:	60b9      	str	r1, [r7, #8]
 801b3de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	9300      	str	r3, [sp, #0]
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801b3ec:	68f8      	ldr	r0, [r7, #12]
 801b3ee:	f7ff ff5b 	bl	801b2a8 <SPI_WaitFifoStateUntilTimeout>
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d007      	beq.n	801b408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b3fc:	f043 0220 	orr.w	r2, r3, #32
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801b404:	2303      	movs	r3, #3
 801b406:	e027      	b.n	801b458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	9300      	str	r3, [sp, #0]
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	2200      	movs	r2, #0
 801b410:	2180      	movs	r1, #128	@ 0x80
 801b412:	68f8      	ldr	r0, [r7, #12]
 801b414:	f7ff fec0 	bl	801b198 <SPI_WaitFlagStateUntilTimeout>
 801b418:	4603      	mov	r3, r0
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d007      	beq.n	801b42e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b422:	f043 0220 	orr.w	r2, r3, #32
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801b42a:	2303      	movs	r3, #3
 801b42c:	e014      	b.n	801b458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	9300      	str	r3, [sp, #0]
 801b432:	68bb      	ldr	r3, [r7, #8]
 801b434:	2200      	movs	r2, #0
 801b436:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801b43a:	68f8      	ldr	r0, [r7, #12]
 801b43c:	f7ff ff34 	bl	801b2a8 <SPI_WaitFifoStateUntilTimeout>
 801b440:	4603      	mov	r3, r0
 801b442:	2b00      	cmp	r3, #0
 801b444:	d007      	beq.n	801b456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b44a:	f043 0220 	orr.w	r2, r3, #32
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801b452:	2303      	movs	r3, #3
 801b454:	e000      	b.n	801b458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801b456:	2300      	movs	r3, #0
}
 801b458:	4618      	mov	r0, r3
 801b45a:	3710      	adds	r7, #16
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}

0801b460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b082      	sub	sp, #8
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d101      	bne.n	801b472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801b46e:	2301      	movs	r3, #1
 801b470:	e049      	b.n	801b506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b478:	b2db      	uxtb	r3, r3
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d106      	bne.n	801b48c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	2200      	movs	r2, #0
 801b482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	f7e6 f966 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	2202      	movs	r2, #2
 801b490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681a      	ldr	r2, [r3, #0]
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	3304      	adds	r3, #4
 801b49c:	4619      	mov	r1, r3
 801b49e:	4610      	mov	r0, r2
 801b4a0:	f000 fdd4 	bl	801c04c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	2201      	movs	r2, #1
 801b4a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	2201      	movs	r2, #1
 801b4b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	2201      	movs	r2, #1
 801b4b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	2201      	movs	r2, #1
 801b4c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2201      	movs	r2, #1
 801b4c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2201      	movs	r2, #1
 801b4d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	2201      	movs	r2, #1
 801b4d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2201      	movs	r2, #1
 801b4e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2201      	movs	r2, #1
 801b4e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	2201      	movs	r2, #1
 801b4f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	2201      	movs	r2, #1
 801b4f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2201      	movs	r2, #1
 801b500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801b504:	2300      	movs	r3, #0
}
 801b506:	4618      	mov	r0, r3
 801b508:	3708      	adds	r7, #8
 801b50a:	46bd      	mov	sp, r7
 801b50c:	bd80      	pop	{r7, pc}
	...

0801b510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801b510:	b480      	push	{r7}
 801b512:	b085      	sub	sp, #20
 801b514:	af00      	add	r7, sp, #0
 801b516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b51e:	b2db      	uxtb	r3, r3
 801b520:	2b01      	cmp	r3, #1
 801b522:	d001      	beq.n	801b528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801b524:	2301      	movs	r3, #1
 801b526:	e033      	b.n	801b590 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	2202      	movs	r2, #2
 801b52c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	4a19      	ldr	r2, [pc, #100]	@ (801b59c <HAL_TIM_Base_Start+0x8c>)
 801b536:	4293      	cmp	r3, r2
 801b538:	d009      	beq.n	801b54e <HAL_TIM_Base_Start+0x3e>
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b542:	d004      	beq.n	801b54e <HAL_TIM_Base_Start+0x3e>
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	4a15      	ldr	r2, [pc, #84]	@ (801b5a0 <HAL_TIM_Base_Start+0x90>)
 801b54a:	4293      	cmp	r3, r2
 801b54c:	d115      	bne.n	801b57a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	689a      	ldr	r2, [r3, #8]
 801b554:	4b13      	ldr	r3, [pc, #76]	@ (801b5a4 <HAL_TIM_Base_Start+0x94>)
 801b556:	4013      	ands	r3, r2
 801b558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	2b06      	cmp	r3, #6
 801b55e:	d015      	beq.n	801b58c <HAL_TIM_Base_Start+0x7c>
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b566:	d011      	beq.n	801b58c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	681a      	ldr	r2, [r3, #0]
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	f042 0201 	orr.w	r2, r2, #1
 801b576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b578:	e008      	b.n	801b58c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	681a      	ldr	r2, [r3, #0]
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	f042 0201 	orr.w	r2, r2, #1
 801b588:	601a      	str	r2, [r3, #0]
 801b58a:	e000      	b.n	801b58e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b58c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801b58e:	2300      	movs	r3, #0
}
 801b590:	4618      	mov	r0, r3
 801b592:	3714      	adds	r7, #20
 801b594:	46bd      	mov	sp, r7
 801b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b59a:	4770      	bx	lr
 801b59c:	40012c00 	.word	0x40012c00
 801b5a0:	40014000 	.word	0x40014000
 801b5a4:	00010007 	.word	0x00010007

0801b5a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b083      	sub	sp, #12
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	6a1a      	ldr	r2, [r3, #32]
 801b5b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 801b5ba:	4013      	ands	r3, r2
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d10f      	bne.n	801b5e0 <HAL_TIM_Base_Stop+0x38>
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	6a1a      	ldr	r2, [r3, #32]
 801b5c6:	f240 4344 	movw	r3, #1092	@ 0x444
 801b5ca:	4013      	ands	r3, r2
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d107      	bne.n	801b5e0 <HAL_TIM_Base_Stop+0x38>
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	681a      	ldr	r2, [r3, #0]
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f022 0201 	bic.w	r2, r2, #1
 801b5de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	2201      	movs	r2, #1
 801b5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 801b5e8:	2300      	movs	r3, #0
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	370c      	adds	r7, #12
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f4:	4770      	bx	lr
	...

0801b5f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801b5f8:	b480      	push	{r7}
 801b5fa:	b085      	sub	sp, #20
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b606:	b2db      	uxtb	r3, r3
 801b608:	2b01      	cmp	r3, #1
 801b60a:	d001      	beq.n	801b610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801b60c:	2301      	movs	r3, #1
 801b60e:	e03b      	b.n	801b688 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	2202      	movs	r2, #2
 801b614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	68da      	ldr	r2, [r3, #12]
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	f042 0201 	orr.w	r2, r2, #1
 801b626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	4a19      	ldr	r2, [pc, #100]	@ (801b694 <HAL_TIM_Base_Start_IT+0x9c>)
 801b62e:	4293      	cmp	r3, r2
 801b630:	d009      	beq.n	801b646 <HAL_TIM_Base_Start_IT+0x4e>
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b63a:	d004      	beq.n	801b646 <HAL_TIM_Base_Start_IT+0x4e>
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	4a15      	ldr	r2, [pc, #84]	@ (801b698 <HAL_TIM_Base_Start_IT+0xa0>)
 801b642:	4293      	cmp	r3, r2
 801b644:	d115      	bne.n	801b672 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	689a      	ldr	r2, [r3, #8]
 801b64c:	4b13      	ldr	r3, [pc, #76]	@ (801b69c <HAL_TIM_Base_Start_IT+0xa4>)
 801b64e:	4013      	ands	r3, r2
 801b650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	2b06      	cmp	r3, #6
 801b656:	d015      	beq.n	801b684 <HAL_TIM_Base_Start_IT+0x8c>
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b65e:	d011      	beq.n	801b684 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	f042 0201 	orr.w	r2, r2, #1
 801b66e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b670:	e008      	b.n	801b684 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	681a      	ldr	r2, [r3, #0]
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	f042 0201 	orr.w	r2, r2, #1
 801b680:	601a      	str	r2, [r3, #0]
 801b682:	e000      	b.n	801b686 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b684:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801b686:	2300      	movs	r3, #0
}
 801b688:	4618      	mov	r0, r3
 801b68a:	3714      	adds	r7, #20
 801b68c:	46bd      	mov	sp, r7
 801b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b692:	4770      	bx	lr
 801b694:	40012c00 	.word	0x40012c00
 801b698:	40014000 	.word	0x40014000
 801b69c:	00010007 	.word	0x00010007

0801b6a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b082      	sub	sp, #8
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d101      	bne.n	801b6b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	e049      	b.n	801b746 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b6b8:	b2db      	uxtb	r3, r3
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d106      	bne.n	801b6cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801b6c6:	6878      	ldr	r0, [r7, #4]
 801b6c8:	f7e6 f826 	bl	8001718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	2202      	movs	r2, #2
 801b6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681a      	ldr	r2, [r3, #0]
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	3304      	adds	r3, #4
 801b6dc:	4619      	mov	r1, r3
 801b6de:	4610      	mov	r0, r2
 801b6e0:	f000 fcb4 	bl	801c04c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	2201      	movs	r2, #1
 801b6e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	2201      	movs	r2, #1
 801b6f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	2201      	movs	r2, #1
 801b6f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	2201      	movs	r2, #1
 801b700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	2201      	movs	r2, #1
 801b708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2201      	movs	r2, #1
 801b710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	2201      	movs	r2, #1
 801b718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	2201      	movs	r2, #1
 801b720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	2201      	movs	r2, #1
 801b728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	2201      	movs	r2, #1
 801b730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	2201      	movs	r2, #1
 801b738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	2201      	movs	r2, #1
 801b740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801b744:	2300      	movs	r3, #0
}
 801b746:	4618      	mov	r0, r3
 801b748:	3708      	adds	r7, #8
 801b74a:	46bd      	mov	sp, r7
 801b74c:	bd80      	pop	{r7, pc}
	...

0801b750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b084      	sub	sp, #16
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801b75a:	683b      	ldr	r3, [r7, #0]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d109      	bne.n	801b774 <HAL_TIM_PWM_Start+0x24>
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801b766:	b2db      	uxtb	r3, r3
 801b768:	2b01      	cmp	r3, #1
 801b76a:	bf14      	ite	ne
 801b76c:	2301      	movne	r3, #1
 801b76e:	2300      	moveq	r3, #0
 801b770:	b2db      	uxtb	r3, r3
 801b772:	e03c      	b.n	801b7ee <HAL_TIM_PWM_Start+0x9e>
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	2b04      	cmp	r3, #4
 801b778:	d109      	bne.n	801b78e <HAL_TIM_PWM_Start+0x3e>
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801b780:	b2db      	uxtb	r3, r3
 801b782:	2b01      	cmp	r3, #1
 801b784:	bf14      	ite	ne
 801b786:	2301      	movne	r3, #1
 801b788:	2300      	moveq	r3, #0
 801b78a:	b2db      	uxtb	r3, r3
 801b78c:	e02f      	b.n	801b7ee <HAL_TIM_PWM_Start+0x9e>
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	2b08      	cmp	r3, #8
 801b792:	d109      	bne.n	801b7a8 <HAL_TIM_PWM_Start+0x58>
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801b79a:	b2db      	uxtb	r3, r3
 801b79c:	2b01      	cmp	r3, #1
 801b79e:	bf14      	ite	ne
 801b7a0:	2301      	movne	r3, #1
 801b7a2:	2300      	moveq	r3, #0
 801b7a4:	b2db      	uxtb	r3, r3
 801b7a6:	e022      	b.n	801b7ee <HAL_TIM_PWM_Start+0x9e>
 801b7a8:	683b      	ldr	r3, [r7, #0]
 801b7aa:	2b0c      	cmp	r3, #12
 801b7ac:	d109      	bne.n	801b7c2 <HAL_TIM_PWM_Start+0x72>
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b7b4:	b2db      	uxtb	r3, r3
 801b7b6:	2b01      	cmp	r3, #1
 801b7b8:	bf14      	ite	ne
 801b7ba:	2301      	movne	r3, #1
 801b7bc:	2300      	moveq	r3, #0
 801b7be:	b2db      	uxtb	r3, r3
 801b7c0:	e015      	b.n	801b7ee <HAL_TIM_PWM_Start+0x9e>
 801b7c2:	683b      	ldr	r3, [r7, #0]
 801b7c4:	2b10      	cmp	r3, #16
 801b7c6:	d109      	bne.n	801b7dc <HAL_TIM_PWM_Start+0x8c>
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b7ce:	b2db      	uxtb	r3, r3
 801b7d0:	2b01      	cmp	r3, #1
 801b7d2:	bf14      	ite	ne
 801b7d4:	2301      	movne	r3, #1
 801b7d6:	2300      	moveq	r3, #0
 801b7d8:	b2db      	uxtb	r3, r3
 801b7da:	e008      	b.n	801b7ee <HAL_TIM_PWM_Start+0x9e>
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801b7e2:	b2db      	uxtb	r3, r3
 801b7e4:	2b01      	cmp	r3, #1
 801b7e6:	bf14      	ite	ne
 801b7e8:	2301      	movne	r3, #1
 801b7ea:	2300      	moveq	r3, #0
 801b7ec:	b2db      	uxtb	r3, r3
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d001      	beq.n	801b7f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801b7f2:	2301      	movs	r3, #1
 801b7f4:	e07e      	b.n	801b8f4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d104      	bne.n	801b806 <HAL_TIM_PWM_Start+0xb6>
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2202      	movs	r2, #2
 801b800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801b804:	e023      	b.n	801b84e <HAL_TIM_PWM_Start+0xfe>
 801b806:	683b      	ldr	r3, [r7, #0]
 801b808:	2b04      	cmp	r3, #4
 801b80a:	d104      	bne.n	801b816 <HAL_TIM_PWM_Start+0xc6>
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	2202      	movs	r2, #2
 801b810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801b814:	e01b      	b.n	801b84e <HAL_TIM_PWM_Start+0xfe>
 801b816:	683b      	ldr	r3, [r7, #0]
 801b818:	2b08      	cmp	r3, #8
 801b81a:	d104      	bne.n	801b826 <HAL_TIM_PWM_Start+0xd6>
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	2202      	movs	r2, #2
 801b820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801b824:	e013      	b.n	801b84e <HAL_TIM_PWM_Start+0xfe>
 801b826:	683b      	ldr	r3, [r7, #0]
 801b828:	2b0c      	cmp	r3, #12
 801b82a:	d104      	bne.n	801b836 <HAL_TIM_PWM_Start+0xe6>
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	2202      	movs	r2, #2
 801b830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801b834:	e00b      	b.n	801b84e <HAL_TIM_PWM_Start+0xfe>
 801b836:	683b      	ldr	r3, [r7, #0]
 801b838:	2b10      	cmp	r3, #16
 801b83a:	d104      	bne.n	801b846 <HAL_TIM_PWM_Start+0xf6>
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	2202      	movs	r2, #2
 801b840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801b844:	e003      	b.n	801b84e <HAL_TIM_PWM_Start+0xfe>
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	2202      	movs	r2, #2
 801b84a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	2201      	movs	r2, #1
 801b854:	6839      	ldr	r1, [r7, #0]
 801b856:	4618      	mov	r0, r3
 801b858:	f000 ff80 	bl	801c75c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	4a26      	ldr	r2, [pc, #152]	@ (801b8fc <HAL_TIM_PWM_Start+0x1ac>)
 801b862:	4293      	cmp	r3, r2
 801b864:	d009      	beq.n	801b87a <HAL_TIM_PWM_Start+0x12a>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	4a25      	ldr	r2, [pc, #148]	@ (801b900 <HAL_TIM_PWM_Start+0x1b0>)
 801b86c:	4293      	cmp	r3, r2
 801b86e:	d004      	beq.n	801b87a <HAL_TIM_PWM_Start+0x12a>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	4a23      	ldr	r2, [pc, #140]	@ (801b904 <HAL_TIM_PWM_Start+0x1b4>)
 801b876:	4293      	cmp	r3, r2
 801b878:	d101      	bne.n	801b87e <HAL_TIM_PWM_Start+0x12e>
 801b87a:	2301      	movs	r3, #1
 801b87c:	e000      	b.n	801b880 <HAL_TIM_PWM_Start+0x130>
 801b87e:	2300      	movs	r3, #0
 801b880:	2b00      	cmp	r3, #0
 801b882:	d007      	beq.n	801b894 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801b892:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	4a18      	ldr	r2, [pc, #96]	@ (801b8fc <HAL_TIM_PWM_Start+0x1ac>)
 801b89a:	4293      	cmp	r3, r2
 801b89c:	d009      	beq.n	801b8b2 <HAL_TIM_PWM_Start+0x162>
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b8a6:	d004      	beq.n	801b8b2 <HAL_TIM_PWM_Start+0x162>
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	4a14      	ldr	r2, [pc, #80]	@ (801b900 <HAL_TIM_PWM_Start+0x1b0>)
 801b8ae:	4293      	cmp	r3, r2
 801b8b0:	d115      	bne.n	801b8de <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	689a      	ldr	r2, [r3, #8]
 801b8b8:	4b13      	ldr	r3, [pc, #76]	@ (801b908 <HAL_TIM_PWM_Start+0x1b8>)
 801b8ba:	4013      	ands	r3, r2
 801b8bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	2b06      	cmp	r3, #6
 801b8c2:	d015      	beq.n	801b8f0 <HAL_TIM_PWM_Start+0x1a0>
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b8ca:	d011      	beq.n	801b8f0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	681a      	ldr	r2, [r3, #0]
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	f042 0201 	orr.w	r2, r2, #1
 801b8da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b8dc:	e008      	b.n	801b8f0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	681a      	ldr	r2, [r3, #0]
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	f042 0201 	orr.w	r2, r2, #1
 801b8ec:	601a      	str	r2, [r3, #0]
 801b8ee:	e000      	b.n	801b8f2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b8f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801b8f2:	2300      	movs	r3, #0
}
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	3710      	adds	r7, #16
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	bd80      	pop	{r7, pc}
 801b8fc:	40012c00 	.word	0x40012c00
 801b900:	40014000 	.word	0x40014000
 801b904:	40014400 	.word	0x40014400
 801b908:	00010007 	.word	0x00010007

0801b90c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b082      	sub	sp, #8
 801b910:	af00      	add	r7, sp, #0
 801b912:	6078      	str	r0, [r7, #4]
 801b914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	2200      	movs	r2, #0
 801b91c:	6839      	ldr	r1, [r7, #0]
 801b91e:	4618      	mov	r0, r3
 801b920:	f000 ff1c 	bl	801c75c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	4a39      	ldr	r2, [pc, #228]	@ (801ba10 <HAL_TIM_PWM_Stop+0x104>)
 801b92a:	4293      	cmp	r3, r2
 801b92c:	d009      	beq.n	801b942 <HAL_TIM_PWM_Stop+0x36>
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	4a38      	ldr	r2, [pc, #224]	@ (801ba14 <HAL_TIM_PWM_Stop+0x108>)
 801b934:	4293      	cmp	r3, r2
 801b936:	d004      	beq.n	801b942 <HAL_TIM_PWM_Stop+0x36>
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	4a36      	ldr	r2, [pc, #216]	@ (801ba18 <HAL_TIM_PWM_Stop+0x10c>)
 801b93e:	4293      	cmp	r3, r2
 801b940:	d101      	bne.n	801b946 <HAL_TIM_PWM_Stop+0x3a>
 801b942:	2301      	movs	r3, #1
 801b944:	e000      	b.n	801b948 <HAL_TIM_PWM_Stop+0x3c>
 801b946:	2300      	movs	r3, #0
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d017      	beq.n	801b97c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	6a1a      	ldr	r2, [r3, #32]
 801b952:	f241 1311 	movw	r3, #4369	@ 0x1111
 801b956:	4013      	ands	r3, r2
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d10f      	bne.n	801b97c <HAL_TIM_PWM_Stop+0x70>
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	6a1a      	ldr	r2, [r3, #32]
 801b962:	f240 4344 	movw	r3, #1092	@ 0x444
 801b966:	4013      	ands	r3, r2
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d107      	bne.n	801b97c <HAL_TIM_PWM_Stop+0x70>
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801b97a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	6a1a      	ldr	r2, [r3, #32]
 801b982:	f241 1311 	movw	r3, #4369	@ 0x1111
 801b986:	4013      	ands	r3, r2
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d10f      	bne.n	801b9ac <HAL_TIM_PWM_Stop+0xa0>
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	6a1a      	ldr	r2, [r3, #32]
 801b992:	f240 4344 	movw	r3, #1092	@ 0x444
 801b996:	4013      	ands	r3, r2
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d107      	bne.n	801b9ac <HAL_TIM_PWM_Stop+0xa0>
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	681a      	ldr	r2, [r3, #0]
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	f022 0201 	bic.w	r2, r2, #1
 801b9aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801b9ac:	683b      	ldr	r3, [r7, #0]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d104      	bne.n	801b9bc <HAL_TIM_PWM_Stop+0xb0>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	2201      	movs	r2, #1
 801b9b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801b9ba:	e023      	b.n	801ba04 <HAL_TIM_PWM_Stop+0xf8>
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	2b04      	cmp	r3, #4
 801b9c0:	d104      	bne.n	801b9cc <HAL_TIM_PWM_Stop+0xc0>
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	2201      	movs	r2, #1
 801b9c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801b9ca:	e01b      	b.n	801ba04 <HAL_TIM_PWM_Stop+0xf8>
 801b9cc:	683b      	ldr	r3, [r7, #0]
 801b9ce:	2b08      	cmp	r3, #8
 801b9d0:	d104      	bne.n	801b9dc <HAL_TIM_PWM_Stop+0xd0>
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	2201      	movs	r2, #1
 801b9d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801b9da:	e013      	b.n	801ba04 <HAL_TIM_PWM_Stop+0xf8>
 801b9dc:	683b      	ldr	r3, [r7, #0]
 801b9de:	2b0c      	cmp	r3, #12
 801b9e0:	d104      	bne.n	801b9ec <HAL_TIM_PWM_Stop+0xe0>
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	2201      	movs	r2, #1
 801b9e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801b9ea:	e00b      	b.n	801ba04 <HAL_TIM_PWM_Stop+0xf8>
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	2b10      	cmp	r3, #16
 801b9f0:	d104      	bne.n	801b9fc <HAL_TIM_PWM_Stop+0xf0>
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	2201      	movs	r2, #1
 801b9f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801b9fa:	e003      	b.n	801ba04 <HAL_TIM_PWM_Stop+0xf8>
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	2201      	movs	r2, #1
 801ba00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 801ba04:	2300      	movs	r3, #0
}
 801ba06:	4618      	mov	r0, r3
 801ba08:	3708      	adds	r7, #8
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}
 801ba0e:	bf00      	nop
 801ba10:	40012c00 	.word	0x40012c00
 801ba14:	40014000 	.word	0x40014000
 801ba18:	40014400 	.word	0x40014400

0801ba1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	b084      	sub	sp, #16
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	68db      	ldr	r3, [r3, #12]
 801ba2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	691b      	ldr	r3, [r3, #16]
 801ba32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	f003 0302 	and.w	r3, r3, #2
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d020      	beq.n	801ba80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	f003 0302 	and.w	r3, r3, #2
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d01b      	beq.n	801ba80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	f06f 0202 	mvn.w	r2, #2
 801ba50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	2201      	movs	r2, #1
 801ba56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	699b      	ldr	r3, [r3, #24]
 801ba5e:	f003 0303 	and.w	r3, r3, #3
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d003      	beq.n	801ba6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f000 fad1 	bl	801c00e <HAL_TIM_IC_CaptureCallback>
 801ba6c:	e005      	b.n	801ba7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ba6e:	6878      	ldr	r0, [r7, #4]
 801ba70:	f000 fac3 	bl	801bffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ba74:	6878      	ldr	r0, [r7, #4]
 801ba76:	f000 fad4 	bl	801c022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	f003 0304 	and.w	r3, r3, #4
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d020      	beq.n	801bacc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	f003 0304 	and.w	r3, r3, #4
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d01b      	beq.n	801bacc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	f06f 0204 	mvn.w	r2, #4
 801ba9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	2202      	movs	r2, #2
 801baa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	699b      	ldr	r3, [r3, #24]
 801baaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d003      	beq.n	801baba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801bab2:	6878      	ldr	r0, [r7, #4]
 801bab4:	f000 faab 	bl	801c00e <HAL_TIM_IC_CaptureCallback>
 801bab8:	e005      	b.n	801bac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801baba:	6878      	ldr	r0, [r7, #4]
 801babc:	f000 fa9d 	bl	801bffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801bac0:	6878      	ldr	r0, [r7, #4]
 801bac2:	f000 faae 	bl	801c022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	2200      	movs	r2, #0
 801baca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801bacc:	68bb      	ldr	r3, [r7, #8]
 801bace:	f003 0308 	and.w	r3, r3, #8
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d020      	beq.n	801bb18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	f003 0308 	and.w	r3, r3, #8
 801badc:	2b00      	cmp	r3, #0
 801bade:	d01b      	beq.n	801bb18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	f06f 0208 	mvn.w	r2, #8
 801bae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	2204      	movs	r2, #4
 801baee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	69db      	ldr	r3, [r3, #28]
 801baf6:	f003 0303 	and.w	r3, r3, #3
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d003      	beq.n	801bb06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801bafe:	6878      	ldr	r0, [r7, #4]
 801bb00:	f000 fa85 	bl	801c00e <HAL_TIM_IC_CaptureCallback>
 801bb04:	e005      	b.n	801bb12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801bb06:	6878      	ldr	r0, [r7, #4]
 801bb08:	f000 fa77 	bl	801bffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801bb0c:	6878      	ldr	r0, [r7, #4]
 801bb0e:	f000 fa88 	bl	801c022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	2200      	movs	r2, #0
 801bb16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	f003 0310 	and.w	r3, r3, #16
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d020      	beq.n	801bb64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	f003 0310 	and.w	r3, r3, #16
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d01b      	beq.n	801bb64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	f06f 0210 	mvn.w	r2, #16
 801bb34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	2208      	movs	r2, #8
 801bb3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	69db      	ldr	r3, [r3, #28]
 801bb42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d003      	beq.n	801bb52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801bb4a:	6878      	ldr	r0, [r7, #4]
 801bb4c:	f000 fa5f 	bl	801c00e <HAL_TIM_IC_CaptureCallback>
 801bb50:	e005      	b.n	801bb5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801bb52:	6878      	ldr	r0, [r7, #4]
 801bb54:	f000 fa51 	bl	801bffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801bb58:	6878      	ldr	r0, [r7, #4]
 801bb5a:	f000 fa62 	bl	801c022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	2200      	movs	r2, #0
 801bb62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801bb64:	68bb      	ldr	r3, [r7, #8]
 801bb66:	f003 0301 	and.w	r3, r3, #1
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d00c      	beq.n	801bb88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	f003 0301 	and.w	r3, r3, #1
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d007      	beq.n	801bb88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	f06f 0201 	mvn.w	r2, #1
 801bb80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801bb82:	6878      	ldr	r0, [r7, #4]
 801bb84:	f000 fa2f 	bl	801bfe6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801bb88:	68bb      	ldr	r3, [r7, #8]
 801bb8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d104      	bne.n	801bb9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801bb92:	68bb      	ldr	r3, [r7, #8]
 801bb94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d00c      	beq.n	801bbb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d007      	beq.n	801bbb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801bbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801bbb0:	6878      	ldr	r0, [r7, #4]
 801bbb2:	f000 fee1 	bl	801c978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d00c      	beq.n	801bbda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d007      	beq.n	801bbda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801bbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f000 fed9 	bl	801c98c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d00c      	beq.n	801bbfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d007      	beq.n	801bbfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801bbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801bbf8:	6878      	ldr	r0, [r7, #4]
 801bbfa:	f000 fa1c 	bl	801c036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801bbfe:	68bb      	ldr	r3, [r7, #8]
 801bc00:	f003 0320 	and.w	r3, r3, #32
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d00c      	beq.n	801bc22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	f003 0320 	and.w	r3, r3, #32
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d007      	beq.n	801bc22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	f06f 0220 	mvn.w	r2, #32
 801bc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801bc1c:	6878      	ldr	r0, [r7, #4]
 801bc1e:	f000 fea1 	bl	801c964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801bc22:	bf00      	nop
 801bc24:	3710      	adds	r7, #16
 801bc26:	46bd      	mov	sp, r7
 801bc28:	bd80      	pop	{r7, pc}
	...

0801bc2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b086      	sub	sp, #24
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	60f8      	str	r0, [r7, #12]
 801bc34:	60b9      	str	r1, [r7, #8]
 801bc36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bc38:	2300      	movs	r3, #0
 801bc3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801bc42:	2b01      	cmp	r3, #1
 801bc44:	d101      	bne.n	801bc4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801bc46:	2302      	movs	r3, #2
 801bc48:	e0ff      	b.n	801be4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	2201      	movs	r2, #1
 801bc4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	2b14      	cmp	r3, #20
 801bc56:	f200 80f0 	bhi.w	801be3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801bc5a:	a201      	add	r2, pc, #4	@ (adr r2, 801bc60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801bc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc60:	0801bcb5 	.word	0x0801bcb5
 801bc64:	0801be3b 	.word	0x0801be3b
 801bc68:	0801be3b 	.word	0x0801be3b
 801bc6c:	0801be3b 	.word	0x0801be3b
 801bc70:	0801bcf5 	.word	0x0801bcf5
 801bc74:	0801be3b 	.word	0x0801be3b
 801bc78:	0801be3b 	.word	0x0801be3b
 801bc7c:	0801be3b 	.word	0x0801be3b
 801bc80:	0801bd37 	.word	0x0801bd37
 801bc84:	0801be3b 	.word	0x0801be3b
 801bc88:	0801be3b 	.word	0x0801be3b
 801bc8c:	0801be3b 	.word	0x0801be3b
 801bc90:	0801bd77 	.word	0x0801bd77
 801bc94:	0801be3b 	.word	0x0801be3b
 801bc98:	0801be3b 	.word	0x0801be3b
 801bc9c:	0801be3b 	.word	0x0801be3b
 801bca0:	0801bdb9 	.word	0x0801bdb9
 801bca4:	0801be3b 	.word	0x0801be3b
 801bca8:	0801be3b 	.word	0x0801be3b
 801bcac:	0801be3b 	.word	0x0801be3b
 801bcb0:	0801bdf9 	.word	0x0801bdf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801bcb4:	68fb      	ldr	r3, [r7, #12]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	68b9      	ldr	r1, [r7, #8]
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f000 fa36 	bl	801c12c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	699a      	ldr	r2, [r3, #24]
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	f042 0208 	orr.w	r2, r2, #8
 801bcce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	699a      	ldr	r2, [r3, #24]
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	f022 0204 	bic.w	r2, r2, #4
 801bcde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	6999      	ldr	r1, [r3, #24]
 801bce6:	68bb      	ldr	r3, [r7, #8]
 801bce8:	691a      	ldr	r2, [r3, #16]
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	430a      	orrs	r2, r1
 801bcf0:	619a      	str	r2, [r3, #24]
      break;
 801bcf2:	e0a5      	b.n	801be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	68b9      	ldr	r1, [r7, #8]
 801bcfa:	4618      	mov	r0, r3
 801bcfc:	f000 fa92 	bl	801c224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	699a      	ldr	r2, [r3, #24]
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801bd0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	699a      	ldr	r2, [r3, #24]
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801bd1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	6999      	ldr	r1, [r3, #24]
 801bd26:	68bb      	ldr	r3, [r7, #8]
 801bd28:	691b      	ldr	r3, [r3, #16]
 801bd2a:	021a      	lsls	r2, r3, #8
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	430a      	orrs	r2, r1
 801bd32:	619a      	str	r2, [r3, #24]
      break;
 801bd34:	e084      	b.n	801be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	68b9      	ldr	r1, [r7, #8]
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f000 faeb 	bl	801c318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	69da      	ldr	r2, [r3, #28]
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	f042 0208 	orr.w	r2, r2, #8
 801bd50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	69da      	ldr	r2, [r3, #28]
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	f022 0204 	bic.w	r2, r2, #4
 801bd60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801bd62:	68fb      	ldr	r3, [r7, #12]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	69d9      	ldr	r1, [r3, #28]
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	691a      	ldr	r2, [r3, #16]
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	430a      	orrs	r2, r1
 801bd72:	61da      	str	r2, [r3, #28]
      break;
 801bd74:	e064      	b.n	801be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	68b9      	ldr	r1, [r7, #8]
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f000 fb43 	bl	801c408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	69da      	ldr	r2, [r3, #28]
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801bd90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	69da      	ldr	r2, [r3, #28]
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801bda0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	69d9      	ldr	r1, [r3, #28]
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	691b      	ldr	r3, [r3, #16]
 801bdac:	021a      	lsls	r2, r3, #8
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	430a      	orrs	r2, r1
 801bdb4:	61da      	str	r2, [r3, #28]
      break;
 801bdb6:	e043      	b.n	801be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	68b9      	ldr	r1, [r7, #8]
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	f000 fb80 	bl	801c4c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	f042 0208 	orr.w	r2, r2, #8
 801bdd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	f022 0204 	bic.w	r2, r2, #4
 801bde2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	691a      	ldr	r2, [r3, #16]
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	430a      	orrs	r2, r1
 801bdf4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801bdf6:	e023      	b.n	801be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	68b9      	ldr	r1, [r7, #8]
 801bdfe:	4618      	mov	r0, r3
 801be00:	f000 fbb8 	bl	801c574 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801be12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801be22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	691b      	ldr	r3, [r3, #16]
 801be2e:	021a      	lsls	r2, r3, #8
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	430a      	orrs	r2, r1
 801be36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801be38:	e002      	b.n	801be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801be3a:	2301      	movs	r3, #1
 801be3c:	75fb      	strb	r3, [r7, #23]
      break;
 801be3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	2200      	movs	r2, #0
 801be44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801be48:	7dfb      	ldrb	r3, [r7, #23]
}
 801be4a:	4618      	mov	r0, r3
 801be4c:	3718      	adds	r7, #24
 801be4e:	46bd      	mov	sp, r7
 801be50:	bd80      	pop	{r7, pc}
 801be52:	bf00      	nop

0801be54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b084      	sub	sp, #16
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
 801be5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801be5e:	2300      	movs	r3, #0
 801be60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801be68:	2b01      	cmp	r3, #1
 801be6a:	d101      	bne.n	801be70 <HAL_TIM_ConfigClockSource+0x1c>
 801be6c:	2302      	movs	r3, #2
 801be6e:	e0b6      	b.n	801bfde <HAL_TIM_ConfigClockSource+0x18a>
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	2201      	movs	r2, #1
 801be74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2202      	movs	r2, #2
 801be7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	689b      	ldr	r3, [r3, #8]
 801be86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801be8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801be92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801be9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	68ba      	ldr	r2, [r7, #8]
 801bea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801bea4:	683b      	ldr	r3, [r7, #0]
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801beac:	d03e      	beq.n	801bf2c <HAL_TIM_ConfigClockSource+0xd8>
 801beae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801beb2:	f200 8087 	bhi.w	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801beb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801beba:	f000 8086 	beq.w	801bfca <HAL_TIM_ConfigClockSource+0x176>
 801bebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bec2:	d87f      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801bec4:	2b70      	cmp	r3, #112	@ 0x70
 801bec6:	d01a      	beq.n	801befe <HAL_TIM_ConfigClockSource+0xaa>
 801bec8:	2b70      	cmp	r3, #112	@ 0x70
 801beca:	d87b      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801becc:	2b60      	cmp	r3, #96	@ 0x60
 801bece:	d050      	beq.n	801bf72 <HAL_TIM_ConfigClockSource+0x11e>
 801bed0:	2b60      	cmp	r3, #96	@ 0x60
 801bed2:	d877      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801bed4:	2b50      	cmp	r3, #80	@ 0x50
 801bed6:	d03c      	beq.n	801bf52 <HAL_TIM_ConfigClockSource+0xfe>
 801bed8:	2b50      	cmp	r3, #80	@ 0x50
 801beda:	d873      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801bedc:	2b40      	cmp	r3, #64	@ 0x40
 801bede:	d058      	beq.n	801bf92 <HAL_TIM_ConfigClockSource+0x13e>
 801bee0:	2b40      	cmp	r3, #64	@ 0x40
 801bee2:	d86f      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801bee4:	2b30      	cmp	r3, #48	@ 0x30
 801bee6:	d064      	beq.n	801bfb2 <HAL_TIM_ConfigClockSource+0x15e>
 801bee8:	2b30      	cmp	r3, #48	@ 0x30
 801beea:	d86b      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801beec:	2b20      	cmp	r3, #32
 801beee:	d060      	beq.n	801bfb2 <HAL_TIM_ConfigClockSource+0x15e>
 801bef0:	2b20      	cmp	r3, #32
 801bef2:	d867      	bhi.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d05c      	beq.n	801bfb2 <HAL_TIM_ConfigClockSource+0x15e>
 801bef8:	2b10      	cmp	r3, #16
 801befa:	d05a      	beq.n	801bfb2 <HAL_TIM_ConfigClockSource+0x15e>
 801befc:	e062      	b.n	801bfc4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801bf02:	683b      	ldr	r3, [r7, #0]
 801bf04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801bf0a:	683b      	ldr	r3, [r7, #0]
 801bf0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801bf0e:	f000 fc05 	bl	801c71c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	689b      	ldr	r3, [r3, #8]
 801bf18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801bf1a:	68bb      	ldr	r3, [r7, #8]
 801bf1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801bf20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	68ba      	ldr	r2, [r7, #8]
 801bf28:	609a      	str	r2, [r3, #8]
      break;
 801bf2a:	e04f      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801bf30:	683b      	ldr	r3, [r7, #0]
 801bf32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801bf34:	683b      	ldr	r3, [r7, #0]
 801bf36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801bf3c:	f000 fbee 	bl	801c71c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	689a      	ldr	r2, [r3, #8]
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801bf4e:	609a      	str	r2, [r3, #8]
      break;
 801bf50:	e03c      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801bf5e:	461a      	mov	r2, r3
 801bf60:	f000 fb62 	bl	801c628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	2150      	movs	r1, #80	@ 0x50
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f000 fbbb 	bl	801c6e6 <TIM_ITRx_SetConfig>
      break;
 801bf70:	e02c      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801bf76:	683b      	ldr	r3, [r7, #0]
 801bf78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801bf7e:	461a      	mov	r2, r3
 801bf80:	f000 fb81 	bl	801c686 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	2160      	movs	r1, #96	@ 0x60
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	f000 fbab 	bl	801c6e6 <TIM_ITRx_SetConfig>
      break;
 801bf90:	e01c      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801bf9a:	683b      	ldr	r3, [r7, #0]
 801bf9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801bf9e:	461a      	mov	r2, r3
 801bfa0:	f000 fb42 	bl	801c628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	2140      	movs	r1, #64	@ 0x40
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f000 fb9b 	bl	801c6e6 <TIM_ITRx_SetConfig>
      break;
 801bfb0:	e00c      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681a      	ldr	r2, [r3, #0]
 801bfb6:	683b      	ldr	r3, [r7, #0]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	4619      	mov	r1, r3
 801bfbc:	4610      	mov	r0, r2
 801bfbe:	f000 fb92 	bl	801c6e6 <TIM_ITRx_SetConfig>
      break;
 801bfc2:	e003      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	73fb      	strb	r3, [r7, #15]
      break;
 801bfc8:	e000      	b.n	801bfcc <HAL_TIM_ConfigClockSource+0x178>
      break;
 801bfca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	2201      	movs	r2, #1
 801bfd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801bfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	3710      	adds	r7, #16
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}

0801bfe6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801bfe6:	b480      	push	{r7}
 801bfe8:	b083      	sub	sp, #12
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801bfee:	bf00      	nop
 801bff0:	370c      	adds	r7, #12
 801bff2:	46bd      	mov	sp, r7
 801bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff8:	4770      	bx	lr

0801bffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801bffa:	b480      	push	{r7}
 801bffc:	b083      	sub	sp, #12
 801bffe:	af00      	add	r7, sp, #0
 801c000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801c002:	bf00      	nop
 801c004:	370c      	adds	r7, #12
 801c006:	46bd      	mov	sp, r7
 801c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c00c:	4770      	bx	lr

0801c00e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801c00e:	b480      	push	{r7}
 801c010:	b083      	sub	sp, #12
 801c012:	af00      	add	r7, sp, #0
 801c014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801c016:	bf00      	nop
 801c018:	370c      	adds	r7, #12
 801c01a:	46bd      	mov	sp, r7
 801c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c020:	4770      	bx	lr

0801c022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801c022:	b480      	push	{r7}
 801c024:	b083      	sub	sp, #12
 801c026:	af00      	add	r7, sp, #0
 801c028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801c02a:	bf00      	nop
 801c02c:	370c      	adds	r7, #12
 801c02e:	46bd      	mov	sp, r7
 801c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c034:	4770      	bx	lr

0801c036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801c036:	b480      	push	{r7}
 801c038:	b083      	sub	sp, #12
 801c03a:	af00      	add	r7, sp, #0
 801c03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801c03e:	bf00      	nop
 801c040:	370c      	adds	r7, #12
 801c042:	46bd      	mov	sp, r7
 801c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c048:	4770      	bx	lr
	...

0801c04c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c04c:	b480      	push	{r7}
 801c04e:	b085      	sub	sp, #20
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	4a30      	ldr	r2, [pc, #192]	@ (801c120 <TIM_Base_SetConfig+0xd4>)
 801c060:	4293      	cmp	r3, r2
 801c062:	d003      	beq.n	801c06c <TIM_Base_SetConfig+0x20>
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c06a:	d108      	bne.n	801c07e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c074:	683b      	ldr	r3, [r7, #0]
 801c076:	685b      	ldr	r3, [r3, #4]
 801c078:	68fa      	ldr	r2, [r7, #12]
 801c07a:	4313      	orrs	r3, r2
 801c07c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	4a27      	ldr	r2, [pc, #156]	@ (801c120 <TIM_Base_SetConfig+0xd4>)
 801c082:	4293      	cmp	r3, r2
 801c084:	d00b      	beq.n	801c09e <TIM_Base_SetConfig+0x52>
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c08c:	d007      	beq.n	801c09e <TIM_Base_SetConfig+0x52>
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	4a24      	ldr	r2, [pc, #144]	@ (801c124 <TIM_Base_SetConfig+0xd8>)
 801c092:	4293      	cmp	r3, r2
 801c094:	d003      	beq.n	801c09e <TIM_Base_SetConfig+0x52>
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	4a23      	ldr	r2, [pc, #140]	@ (801c128 <TIM_Base_SetConfig+0xdc>)
 801c09a:	4293      	cmp	r3, r2
 801c09c:	d108      	bne.n	801c0b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c0a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c0a6:	683b      	ldr	r3, [r7, #0]
 801c0a8:	68db      	ldr	r3, [r3, #12]
 801c0aa:	68fa      	ldr	r2, [r7, #12]
 801c0ac:	4313      	orrs	r3, r2
 801c0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	695b      	ldr	r3, [r3, #20]
 801c0ba:	4313      	orrs	r3, r2
 801c0bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	68fa      	ldr	r2, [r7, #12]
 801c0c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	689a      	ldr	r2, [r3, #8]
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c0cc:	683b      	ldr	r3, [r7, #0]
 801c0ce:	681a      	ldr	r2, [r3, #0]
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	4a12      	ldr	r2, [pc, #72]	@ (801c120 <TIM_Base_SetConfig+0xd4>)
 801c0d8:	4293      	cmp	r3, r2
 801c0da:	d007      	beq.n	801c0ec <TIM_Base_SetConfig+0xa0>
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	4a11      	ldr	r2, [pc, #68]	@ (801c124 <TIM_Base_SetConfig+0xd8>)
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d003      	beq.n	801c0ec <TIM_Base_SetConfig+0xa0>
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	4a10      	ldr	r2, [pc, #64]	@ (801c128 <TIM_Base_SetConfig+0xdc>)
 801c0e8:	4293      	cmp	r3, r2
 801c0ea:	d103      	bne.n	801c0f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	691a      	ldr	r2, [r3, #16]
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	2201      	movs	r2, #1
 801c0f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	691b      	ldr	r3, [r3, #16]
 801c0fe:	f003 0301 	and.w	r3, r3, #1
 801c102:	2b01      	cmp	r3, #1
 801c104:	d105      	bne.n	801c112 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	691b      	ldr	r3, [r3, #16]
 801c10a:	f023 0201 	bic.w	r2, r3, #1
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	611a      	str	r2, [r3, #16]
  }
}
 801c112:	bf00      	nop
 801c114:	3714      	adds	r7, #20
 801c116:	46bd      	mov	sp, r7
 801c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11c:	4770      	bx	lr
 801c11e:	bf00      	nop
 801c120:	40012c00 	.word	0x40012c00
 801c124:	40014000 	.word	0x40014000
 801c128:	40014400 	.word	0x40014400

0801c12c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c12c:	b480      	push	{r7}
 801c12e:	b087      	sub	sp, #28
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
 801c134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	6a1b      	ldr	r3, [r3, #32]
 801c13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	6a1b      	ldr	r3, [r3, #32]
 801c140:	f023 0201 	bic.w	r2, r3, #1
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	685b      	ldr	r3, [r3, #4]
 801c14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	699b      	ldr	r3, [r3, #24]
 801c152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c15a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	f023 0303 	bic.w	r3, r3, #3
 801c166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c168:	683b      	ldr	r3, [r7, #0]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	68fa      	ldr	r2, [r7, #12]
 801c16e:	4313      	orrs	r3, r2
 801c170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	f023 0302 	bic.w	r3, r3, #2
 801c178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c17a:	683b      	ldr	r3, [r7, #0]
 801c17c:	689b      	ldr	r3, [r3, #8]
 801c17e:	697a      	ldr	r2, [r7, #20]
 801c180:	4313      	orrs	r3, r2
 801c182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	4a24      	ldr	r2, [pc, #144]	@ (801c218 <TIM_OC1_SetConfig+0xec>)
 801c188:	4293      	cmp	r3, r2
 801c18a:	d007      	beq.n	801c19c <TIM_OC1_SetConfig+0x70>
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	4a23      	ldr	r2, [pc, #140]	@ (801c21c <TIM_OC1_SetConfig+0xf0>)
 801c190:	4293      	cmp	r3, r2
 801c192:	d003      	beq.n	801c19c <TIM_OC1_SetConfig+0x70>
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	4a22      	ldr	r2, [pc, #136]	@ (801c220 <TIM_OC1_SetConfig+0xf4>)
 801c198:	4293      	cmp	r3, r2
 801c19a:	d10c      	bne.n	801c1b6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801c19c:	697b      	ldr	r3, [r7, #20]
 801c19e:	f023 0308 	bic.w	r3, r3, #8
 801c1a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801c1a4:	683b      	ldr	r3, [r7, #0]
 801c1a6:	68db      	ldr	r3, [r3, #12]
 801c1a8:	697a      	ldr	r2, [r7, #20]
 801c1aa:	4313      	orrs	r3, r2
 801c1ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801c1ae:	697b      	ldr	r3, [r7, #20]
 801c1b0:	f023 0304 	bic.w	r3, r3, #4
 801c1b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	4a17      	ldr	r2, [pc, #92]	@ (801c218 <TIM_OC1_SetConfig+0xec>)
 801c1ba:	4293      	cmp	r3, r2
 801c1bc:	d007      	beq.n	801c1ce <TIM_OC1_SetConfig+0xa2>
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	4a16      	ldr	r2, [pc, #88]	@ (801c21c <TIM_OC1_SetConfig+0xf0>)
 801c1c2:	4293      	cmp	r3, r2
 801c1c4:	d003      	beq.n	801c1ce <TIM_OC1_SetConfig+0xa2>
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	4a15      	ldr	r2, [pc, #84]	@ (801c220 <TIM_OC1_SetConfig+0xf4>)
 801c1ca:	4293      	cmp	r3, r2
 801c1cc:	d111      	bne.n	801c1f2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801c1ce:	693b      	ldr	r3, [r7, #16]
 801c1d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801c1d6:	693b      	ldr	r3, [r7, #16]
 801c1d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801c1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801c1de:	683b      	ldr	r3, [r7, #0]
 801c1e0:	695b      	ldr	r3, [r3, #20]
 801c1e2:	693a      	ldr	r2, [r7, #16]
 801c1e4:	4313      	orrs	r3, r2
 801c1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801c1e8:	683b      	ldr	r3, [r7, #0]
 801c1ea:	699b      	ldr	r3, [r3, #24]
 801c1ec:	693a      	ldr	r2, [r7, #16]
 801c1ee:	4313      	orrs	r3, r2
 801c1f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	693a      	ldr	r2, [r7, #16]
 801c1f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	68fa      	ldr	r2, [r7, #12]
 801c1fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801c1fe:	683b      	ldr	r3, [r7, #0]
 801c200:	685a      	ldr	r2, [r3, #4]
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	697a      	ldr	r2, [r7, #20]
 801c20a:	621a      	str	r2, [r3, #32]
}
 801c20c:	bf00      	nop
 801c20e:	371c      	adds	r7, #28
 801c210:	46bd      	mov	sp, r7
 801c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c216:	4770      	bx	lr
 801c218:	40012c00 	.word	0x40012c00
 801c21c:	40014000 	.word	0x40014000
 801c220:	40014400 	.word	0x40014400

0801c224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c224:	b480      	push	{r7}
 801c226:	b087      	sub	sp, #28
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	6a1b      	ldr	r3, [r3, #32]
 801c232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	6a1b      	ldr	r3, [r3, #32]
 801c238:	f023 0210 	bic.w	r2, r3, #16
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	685b      	ldr	r3, [r3, #4]
 801c244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	699b      	ldr	r3, [r3, #24]
 801c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801c256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c25e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c260:	683b      	ldr	r3, [r7, #0]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	021b      	lsls	r3, r3, #8
 801c266:	68fa      	ldr	r2, [r7, #12]
 801c268:	4313      	orrs	r3, r2
 801c26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801c26c:	697b      	ldr	r3, [r7, #20]
 801c26e:	f023 0320 	bic.w	r3, r3, #32
 801c272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801c274:	683b      	ldr	r3, [r7, #0]
 801c276:	689b      	ldr	r3, [r3, #8]
 801c278:	011b      	lsls	r3, r3, #4
 801c27a:	697a      	ldr	r2, [r7, #20]
 801c27c:	4313      	orrs	r3, r2
 801c27e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	4a22      	ldr	r2, [pc, #136]	@ (801c30c <TIM_OC2_SetConfig+0xe8>)
 801c284:	4293      	cmp	r3, r2
 801c286:	d10d      	bne.n	801c2a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801c288:	697b      	ldr	r3, [r7, #20]
 801c28a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c28e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801c290:	683b      	ldr	r3, [r7, #0]
 801c292:	68db      	ldr	r3, [r3, #12]
 801c294:	011b      	lsls	r3, r3, #4
 801c296:	697a      	ldr	r2, [r7, #20]
 801c298:	4313      	orrs	r3, r2
 801c29a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801c29c:	697b      	ldr	r3, [r7, #20]
 801c29e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c2a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	4a19      	ldr	r2, [pc, #100]	@ (801c30c <TIM_OC2_SetConfig+0xe8>)
 801c2a8:	4293      	cmp	r3, r2
 801c2aa:	d007      	beq.n	801c2bc <TIM_OC2_SetConfig+0x98>
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	4a18      	ldr	r2, [pc, #96]	@ (801c310 <TIM_OC2_SetConfig+0xec>)
 801c2b0:	4293      	cmp	r3, r2
 801c2b2:	d003      	beq.n	801c2bc <TIM_OC2_SetConfig+0x98>
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	4a17      	ldr	r2, [pc, #92]	@ (801c314 <TIM_OC2_SetConfig+0xf0>)
 801c2b8:	4293      	cmp	r3, r2
 801c2ba:	d113      	bne.n	801c2e4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801c2bc:	693b      	ldr	r3, [r7, #16]
 801c2be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c2c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801c2c4:	693b      	ldr	r3, [r7, #16]
 801c2c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801c2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	695b      	ldr	r3, [r3, #20]
 801c2d0:	009b      	lsls	r3, r3, #2
 801c2d2:	693a      	ldr	r2, [r7, #16]
 801c2d4:	4313      	orrs	r3, r2
 801c2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801c2d8:	683b      	ldr	r3, [r7, #0]
 801c2da:	699b      	ldr	r3, [r3, #24]
 801c2dc:	009b      	lsls	r3, r3, #2
 801c2de:	693a      	ldr	r2, [r7, #16]
 801c2e0:	4313      	orrs	r3, r2
 801c2e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	693a      	ldr	r2, [r7, #16]
 801c2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	68fa      	ldr	r2, [r7, #12]
 801c2ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801c2f0:	683b      	ldr	r3, [r7, #0]
 801c2f2:	685a      	ldr	r2, [r3, #4]
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	697a      	ldr	r2, [r7, #20]
 801c2fc:	621a      	str	r2, [r3, #32]
}
 801c2fe:	bf00      	nop
 801c300:	371c      	adds	r7, #28
 801c302:	46bd      	mov	sp, r7
 801c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c308:	4770      	bx	lr
 801c30a:	bf00      	nop
 801c30c:	40012c00 	.word	0x40012c00
 801c310:	40014000 	.word	0x40014000
 801c314:	40014400 	.word	0x40014400

0801c318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c318:	b480      	push	{r7}
 801c31a:	b087      	sub	sp, #28
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	6a1b      	ldr	r3, [r3, #32]
 801c326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6a1b      	ldr	r3, [r3, #32]
 801c32c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	685b      	ldr	r3, [r3, #4]
 801c338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	69db      	ldr	r3, [r3, #28]
 801c33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	f023 0303 	bic.w	r3, r3, #3
 801c352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c354:	683b      	ldr	r3, [r7, #0]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	68fa      	ldr	r2, [r7, #12]
 801c35a:	4313      	orrs	r3, r2
 801c35c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801c35e:	697b      	ldr	r3, [r7, #20]
 801c360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801c364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801c366:	683b      	ldr	r3, [r7, #0]
 801c368:	689b      	ldr	r3, [r3, #8]
 801c36a:	021b      	lsls	r3, r3, #8
 801c36c:	697a      	ldr	r2, [r7, #20]
 801c36e:	4313      	orrs	r3, r2
 801c370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	4a21      	ldr	r2, [pc, #132]	@ (801c3fc <TIM_OC3_SetConfig+0xe4>)
 801c376:	4293      	cmp	r3, r2
 801c378:	d10d      	bne.n	801c396 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801c37a:	697b      	ldr	r3, [r7, #20]
 801c37c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801c380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	68db      	ldr	r3, [r3, #12]
 801c386:	021b      	lsls	r3, r3, #8
 801c388:	697a      	ldr	r2, [r7, #20]
 801c38a:	4313      	orrs	r3, r2
 801c38c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801c38e:	697b      	ldr	r3, [r7, #20]
 801c390:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	4a18      	ldr	r2, [pc, #96]	@ (801c3fc <TIM_OC3_SetConfig+0xe4>)
 801c39a:	4293      	cmp	r3, r2
 801c39c:	d007      	beq.n	801c3ae <TIM_OC3_SetConfig+0x96>
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	4a17      	ldr	r2, [pc, #92]	@ (801c400 <TIM_OC3_SetConfig+0xe8>)
 801c3a2:	4293      	cmp	r3, r2
 801c3a4:	d003      	beq.n	801c3ae <TIM_OC3_SetConfig+0x96>
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	4a16      	ldr	r2, [pc, #88]	@ (801c404 <TIM_OC3_SetConfig+0xec>)
 801c3aa:	4293      	cmp	r3, r2
 801c3ac:	d113      	bne.n	801c3d6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801c3ae:	693b      	ldr	r3, [r7, #16]
 801c3b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c3b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801c3b6:	693b      	ldr	r3, [r7, #16]
 801c3b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801c3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801c3be:	683b      	ldr	r3, [r7, #0]
 801c3c0:	695b      	ldr	r3, [r3, #20]
 801c3c2:	011b      	lsls	r3, r3, #4
 801c3c4:	693a      	ldr	r2, [r7, #16]
 801c3c6:	4313      	orrs	r3, r2
 801c3c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	699b      	ldr	r3, [r3, #24]
 801c3ce:	011b      	lsls	r3, r3, #4
 801c3d0:	693a      	ldr	r2, [r7, #16]
 801c3d2:	4313      	orrs	r3, r2
 801c3d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	693a      	ldr	r2, [r7, #16]
 801c3da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	68fa      	ldr	r2, [r7, #12]
 801c3e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801c3e2:	683b      	ldr	r3, [r7, #0]
 801c3e4:	685a      	ldr	r2, [r3, #4]
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	697a      	ldr	r2, [r7, #20]
 801c3ee:	621a      	str	r2, [r3, #32]
}
 801c3f0:	bf00      	nop
 801c3f2:	371c      	adds	r7, #28
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3fa:	4770      	bx	lr
 801c3fc:	40012c00 	.word	0x40012c00
 801c400:	40014000 	.word	0x40014000
 801c404:	40014400 	.word	0x40014400

0801c408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c408:	b480      	push	{r7}
 801c40a:	b087      	sub	sp, #28
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
 801c410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	6a1b      	ldr	r3, [r3, #32]
 801c416:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	6a1b      	ldr	r3, [r3, #32]
 801c41c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	685b      	ldr	r3, [r3, #4]
 801c428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	69db      	ldr	r3, [r3, #28]
 801c42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801c43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c444:	683b      	ldr	r3, [r7, #0]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	021b      	lsls	r3, r3, #8
 801c44a:	68fa      	ldr	r2, [r7, #12]
 801c44c:	4313      	orrs	r3, r2
 801c44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801c450:	693b      	ldr	r3, [r7, #16]
 801c452:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801c456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	689b      	ldr	r3, [r3, #8]
 801c45c:	031b      	lsls	r3, r3, #12
 801c45e:	693a      	ldr	r2, [r7, #16]
 801c460:	4313      	orrs	r3, r2
 801c462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	4a14      	ldr	r2, [pc, #80]	@ (801c4b8 <TIM_OC4_SetConfig+0xb0>)
 801c468:	4293      	cmp	r3, r2
 801c46a:	d007      	beq.n	801c47c <TIM_OC4_SetConfig+0x74>
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	4a13      	ldr	r2, [pc, #76]	@ (801c4bc <TIM_OC4_SetConfig+0xb4>)
 801c470:	4293      	cmp	r3, r2
 801c472:	d003      	beq.n	801c47c <TIM_OC4_SetConfig+0x74>
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	4a12      	ldr	r2, [pc, #72]	@ (801c4c0 <TIM_OC4_SetConfig+0xb8>)
 801c478:	4293      	cmp	r3, r2
 801c47a:	d109      	bne.n	801c490 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801c47c:	697b      	ldr	r3, [r7, #20]
 801c47e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801c482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801c484:	683b      	ldr	r3, [r7, #0]
 801c486:	695b      	ldr	r3, [r3, #20]
 801c488:	019b      	lsls	r3, r3, #6
 801c48a:	697a      	ldr	r2, [r7, #20]
 801c48c:	4313      	orrs	r3, r2
 801c48e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	697a      	ldr	r2, [r7, #20]
 801c494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	68fa      	ldr	r2, [r7, #12]
 801c49a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801c49c:	683b      	ldr	r3, [r7, #0]
 801c49e:	685a      	ldr	r2, [r3, #4]
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	693a      	ldr	r2, [r7, #16]
 801c4a8:	621a      	str	r2, [r3, #32]
}
 801c4aa:	bf00      	nop
 801c4ac:	371c      	adds	r7, #28
 801c4ae:	46bd      	mov	sp, r7
 801c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b4:	4770      	bx	lr
 801c4b6:	bf00      	nop
 801c4b8:	40012c00 	.word	0x40012c00
 801c4bc:	40014000 	.word	0x40014000
 801c4c0:	40014400 	.word	0x40014400

0801c4c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801c4c4:	b480      	push	{r7}
 801c4c6:	b087      	sub	sp, #28
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	6a1b      	ldr	r3, [r3, #32]
 801c4d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	6a1b      	ldr	r3, [r3, #32]
 801c4d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	685b      	ldr	r3, [r3, #4]
 801c4e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c4f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c4f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c4f8:	683b      	ldr	r3, [r7, #0]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	68fa      	ldr	r2, [r7, #12]
 801c4fe:	4313      	orrs	r3, r2
 801c500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801c502:	693b      	ldr	r3, [r7, #16]
 801c504:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801c508:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	689b      	ldr	r3, [r3, #8]
 801c50e:	041b      	lsls	r3, r3, #16
 801c510:	693a      	ldr	r2, [r7, #16]
 801c512:	4313      	orrs	r3, r2
 801c514:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	4a13      	ldr	r2, [pc, #76]	@ (801c568 <TIM_OC5_SetConfig+0xa4>)
 801c51a:	4293      	cmp	r3, r2
 801c51c:	d007      	beq.n	801c52e <TIM_OC5_SetConfig+0x6a>
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	4a12      	ldr	r2, [pc, #72]	@ (801c56c <TIM_OC5_SetConfig+0xa8>)
 801c522:	4293      	cmp	r3, r2
 801c524:	d003      	beq.n	801c52e <TIM_OC5_SetConfig+0x6a>
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	4a11      	ldr	r2, [pc, #68]	@ (801c570 <TIM_OC5_SetConfig+0xac>)
 801c52a:	4293      	cmp	r3, r2
 801c52c:	d109      	bne.n	801c542 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801c52e:	697b      	ldr	r3, [r7, #20]
 801c530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c534:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	695b      	ldr	r3, [r3, #20]
 801c53a:	021b      	lsls	r3, r3, #8
 801c53c:	697a      	ldr	r2, [r7, #20]
 801c53e:	4313      	orrs	r3, r2
 801c540:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	697a      	ldr	r2, [r7, #20]
 801c546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	68fa      	ldr	r2, [r7, #12]
 801c54c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801c54e:	683b      	ldr	r3, [r7, #0]
 801c550:	685a      	ldr	r2, [r3, #4]
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	693a      	ldr	r2, [r7, #16]
 801c55a:	621a      	str	r2, [r3, #32]
}
 801c55c:	bf00      	nop
 801c55e:	371c      	adds	r7, #28
 801c560:	46bd      	mov	sp, r7
 801c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c566:	4770      	bx	lr
 801c568:	40012c00 	.word	0x40012c00
 801c56c:	40014000 	.word	0x40014000
 801c570:	40014400 	.word	0x40014400

0801c574 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801c574:	b480      	push	{r7}
 801c576:	b087      	sub	sp, #28
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
 801c57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	6a1b      	ldr	r3, [r3, #32]
 801c582:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	6a1b      	ldr	r3, [r3, #32]
 801c588:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	685b      	ldr	r3, [r3, #4]
 801c594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c5a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801c5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c5a8:	683b      	ldr	r3, [r7, #0]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	021b      	lsls	r3, r3, #8
 801c5ae:	68fa      	ldr	r2, [r7, #12]
 801c5b0:	4313      	orrs	r3, r2
 801c5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801c5b4:	693b      	ldr	r3, [r7, #16]
 801c5b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801c5ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801c5bc:	683b      	ldr	r3, [r7, #0]
 801c5be:	689b      	ldr	r3, [r3, #8]
 801c5c0:	051b      	lsls	r3, r3, #20
 801c5c2:	693a      	ldr	r2, [r7, #16]
 801c5c4:	4313      	orrs	r3, r2
 801c5c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	4a14      	ldr	r2, [pc, #80]	@ (801c61c <TIM_OC6_SetConfig+0xa8>)
 801c5cc:	4293      	cmp	r3, r2
 801c5ce:	d007      	beq.n	801c5e0 <TIM_OC6_SetConfig+0x6c>
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	4a13      	ldr	r2, [pc, #76]	@ (801c620 <TIM_OC6_SetConfig+0xac>)
 801c5d4:	4293      	cmp	r3, r2
 801c5d6:	d003      	beq.n	801c5e0 <TIM_OC6_SetConfig+0x6c>
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	4a12      	ldr	r2, [pc, #72]	@ (801c624 <TIM_OC6_SetConfig+0xb0>)
 801c5dc:	4293      	cmp	r3, r2
 801c5de:	d109      	bne.n	801c5f4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801c5e8:	683b      	ldr	r3, [r7, #0]
 801c5ea:	695b      	ldr	r3, [r3, #20]
 801c5ec:	029b      	lsls	r3, r3, #10
 801c5ee:	697a      	ldr	r2, [r7, #20]
 801c5f0:	4313      	orrs	r3, r2
 801c5f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	697a      	ldr	r2, [r7, #20]
 801c5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	68fa      	ldr	r2, [r7, #12]
 801c5fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801c600:	683b      	ldr	r3, [r7, #0]
 801c602:	685a      	ldr	r2, [r3, #4]
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	693a      	ldr	r2, [r7, #16]
 801c60c:	621a      	str	r2, [r3, #32]
}
 801c60e:	bf00      	nop
 801c610:	371c      	adds	r7, #28
 801c612:	46bd      	mov	sp, r7
 801c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c618:	4770      	bx	lr
 801c61a:	bf00      	nop
 801c61c:	40012c00 	.word	0x40012c00
 801c620:	40014000 	.word	0x40014000
 801c624:	40014400 	.word	0x40014400

0801c628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801c628:	b480      	push	{r7}
 801c62a:	b087      	sub	sp, #28
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	60f8      	str	r0, [r7, #12]
 801c630:	60b9      	str	r1, [r7, #8]
 801c632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	6a1b      	ldr	r3, [r3, #32]
 801c638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	6a1b      	ldr	r3, [r3, #32]
 801c63e:	f023 0201 	bic.w	r2, r3, #1
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	699b      	ldr	r3, [r3, #24]
 801c64a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801c64c:	693b      	ldr	r3, [r7, #16]
 801c64e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801c652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	011b      	lsls	r3, r3, #4
 801c658:	693a      	ldr	r2, [r7, #16]
 801c65a:	4313      	orrs	r3, r2
 801c65c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801c65e:	697b      	ldr	r3, [r7, #20]
 801c660:	f023 030a 	bic.w	r3, r3, #10
 801c664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801c666:	697a      	ldr	r2, [r7, #20]
 801c668:	68bb      	ldr	r3, [r7, #8]
 801c66a:	4313      	orrs	r3, r2
 801c66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	693a      	ldr	r2, [r7, #16]
 801c672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	697a      	ldr	r2, [r7, #20]
 801c678:	621a      	str	r2, [r3, #32]
}
 801c67a:	bf00      	nop
 801c67c:	371c      	adds	r7, #28
 801c67e:	46bd      	mov	sp, r7
 801c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c684:	4770      	bx	lr

0801c686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801c686:	b480      	push	{r7}
 801c688:	b087      	sub	sp, #28
 801c68a:	af00      	add	r7, sp, #0
 801c68c:	60f8      	str	r0, [r7, #12]
 801c68e:	60b9      	str	r1, [r7, #8]
 801c690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	6a1b      	ldr	r3, [r3, #32]
 801c696:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	6a1b      	ldr	r3, [r3, #32]
 801c69c:	f023 0210 	bic.w	r2, r3, #16
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	699b      	ldr	r3, [r3, #24]
 801c6a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801c6aa:	693b      	ldr	r3, [r7, #16]
 801c6ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801c6b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	031b      	lsls	r3, r3, #12
 801c6b6:	693a      	ldr	r2, [r7, #16]
 801c6b8:	4313      	orrs	r3, r2
 801c6ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801c6bc:	697b      	ldr	r3, [r7, #20]
 801c6be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801c6c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801c6c4:	68bb      	ldr	r3, [r7, #8]
 801c6c6:	011b      	lsls	r3, r3, #4
 801c6c8:	697a      	ldr	r2, [r7, #20]
 801c6ca:	4313      	orrs	r3, r2
 801c6cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	693a      	ldr	r2, [r7, #16]
 801c6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	697a      	ldr	r2, [r7, #20]
 801c6d8:	621a      	str	r2, [r3, #32]
}
 801c6da:	bf00      	nop
 801c6dc:	371c      	adds	r7, #28
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e4:	4770      	bx	lr

0801c6e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801c6e6:	b480      	push	{r7}
 801c6e8:	b085      	sub	sp, #20
 801c6ea:	af00      	add	r7, sp, #0
 801c6ec:	6078      	str	r0, [r7, #4]
 801c6ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	689b      	ldr	r3, [r3, #8]
 801c6f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c6fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801c6fe:	683a      	ldr	r2, [r7, #0]
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	4313      	orrs	r3, r2
 801c704:	f043 0307 	orr.w	r3, r3, #7
 801c708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	68fa      	ldr	r2, [r7, #12]
 801c70e:	609a      	str	r2, [r3, #8]
}
 801c710:	bf00      	nop
 801c712:	3714      	adds	r7, #20
 801c714:	46bd      	mov	sp, r7
 801c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c71a:	4770      	bx	lr

0801c71c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801c71c:	b480      	push	{r7}
 801c71e:	b087      	sub	sp, #28
 801c720:	af00      	add	r7, sp, #0
 801c722:	60f8      	str	r0, [r7, #12]
 801c724:	60b9      	str	r1, [r7, #8]
 801c726:	607a      	str	r2, [r7, #4]
 801c728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	689b      	ldr	r3, [r3, #8]
 801c72e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801c730:	697b      	ldr	r3, [r7, #20]
 801c732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801c736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801c738:	683b      	ldr	r3, [r7, #0]
 801c73a:	021a      	lsls	r2, r3, #8
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	431a      	orrs	r2, r3
 801c740:	68bb      	ldr	r3, [r7, #8]
 801c742:	4313      	orrs	r3, r2
 801c744:	697a      	ldr	r2, [r7, #20]
 801c746:	4313      	orrs	r3, r2
 801c748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	697a      	ldr	r2, [r7, #20]
 801c74e:	609a      	str	r2, [r3, #8]
}
 801c750:	bf00      	nop
 801c752:	371c      	adds	r7, #28
 801c754:	46bd      	mov	sp, r7
 801c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75a:	4770      	bx	lr

0801c75c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c75c:	b480      	push	{r7}
 801c75e:	b087      	sub	sp, #28
 801c760:	af00      	add	r7, sp, #0
 801c762:	60f8      	str	r0, [r7, #12]
 801c764:	60b9      	str	r1, [r7, #8]
 801c766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c768:	68bb      	ldr	r3, [r7, #8]
 801c76a:	f003 031f 	and.w	r3, r3, #31
 801c76e:	2201      	movs	r2, #1
 801c770:	fa02 f303 	lsl.w	r3, r2, r3
 801c774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	6a1a      	ldr	r2, [r3, #32]
 801c77a:	697b      	ldr	r3, [r7, #20]
 801c77c:	43db      	mvns	r3, r3
 801c77e:	401a      	ands	r2, r3
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	6a1a      	ldr	r2, [r3, #32]
 801c788:	68bb      	ldr	r3, [r7, #8]
 801c78a:	f003 031f 	and.w	r3, r3, #31
 801c78e:	6879      	ldr	r1, [r7, #4]
 801c790:	fa01 f303 	lsl.w	r3, r1, r3
 801c794:	431a      	orrs	r2, r3
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	621a      	str	r2, [r3, #32]
}
 801c79a:	bf00      	nop
 801c79c:	371c      	adds	r7, #28
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7a4:	4770      	bx	lr
	...

0801c7a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c7a8:	b480      	push	{r7}
 801c7aa:	b085      	sub	sp, #20
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	6078      	str	r0, [r7, #4]
 801c7b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801c7b8:	2b01      	cmp	r3, #1
 801c7ba:	d101      	bne.n	801c7c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c7bc:	2302      	movs	r3, #2
 801c7be:	e04f      	b.n	801c860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	2201      	movs	r2, #1
 801c7c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	2202      	movs	r2, #2
 801c7cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	685b      	ldr	r3, [r3, #4]
 801c7d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	689b      	ldr	r3, [r3, #8]
 801c7de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	4a21      	ldr	r2, [pc, #132]	@ (801c86c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801c7e6:	4293      	cmp	r3, r2
 801c7e8:	d108      	bne.n	801c7fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801c7f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	685b      	ldr	r3, [r3, #4]
 801c7f6:	68fa      	ldr	r2, [r7, #12]
 801c7f8:	4313      	orrs	r3, r2
 801c7fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c804:	683b      	ldr	r3, [r7, #0]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	68fa      	ldr	r2, [r7, #12]
 801c80a:	4313      	orrs	r3, r2
 801c80c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	68fa      	ldr	r2, [r7, #12]
 801c814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	4a14      	ldr	r2, [pc, #80]	@ (801c86c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801c81c:	4293      	cmp	r3, r2
 801c81e:	d009      	beq.n	801c834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c828:	d004      	beq.n	801c834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	4a10      	ldr	r2, [pc, #64]	@ (801c870 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801c830:	4293      	cmp	r3, r2
 801c832:	d10c      	bne.n	801c84e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c834:	68bb      	ldr	r3, [r7, #8]
 801c836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c83a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	689b      	ldr	r3, [r3, #8]
 801c840:	68ba      	ldr	r2, [r7, #8]
 801c842:	4313      	orrs	r3, r2
 801c844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	68ba      	ldr	r2, [r7, #8]
 801c84c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	2201      	movs	r2, #1
 801c852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	2200      	movs	r2, #0
 801c85a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801c85e:	2300      	movs	r3, #0
}
 801c860:	4618      	mov	r0, r3
 801c862:	3714      	adds	r7, #20
 801c864:	46bd      	mov	sp, r7
 801c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c86a:	4770      	bx	lr
 801c86c:	40012c00 	.word	0x40012c00
 801c870:	40014000 	.word	0x40014000

0801c874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801c874:	b480      	push	{r7}
 801c876:	b085      	sub	sp, #20
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
 801c87c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801c87e:	2300      	movs	r3, #0
 801c880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801c888:	2b01      	cmp	r3, #1
 801c88a:	d101      	bne.n	801c890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801c88c:	2302      	movs	r3, #2
 801c88e:	e060      	b.n	801c952 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	2201      	movs	r2, #1
 801c894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c89e:	683b      	ldr	r3, [r7, #0]
 801c8a0:	68db      	ldr	r3, [r3, #12]
 801c8a2:	4313      	orrs	r3, r2
 801c8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801c8ac:	683b      	ldr	r3, [r7, #0]
 801c8ae:	689b      	ldr	r3, [r3, #8]
 801c8b0:	4313      	orrs	r3, r2
 801c8b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801c8ba:	683b      	ldr	r3, [r7, #0]
 801c8bc:	685b      	ldr	r3, [r3, #4]
 801c8be:	4313      	orrs	r3, r2
 801c8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801c8c8:	683b      	ldr	r3, [r7, #0]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	4313      	orrs	r3, r2
 801c8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	691b      	ldr	r3, [r3, #16]
 801c8da:	4313      	orrs	r3, r2
 801c8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	695b      	ldr	r3, [r3, #20]
 801c8e8:	4313      	orrs	r3, r2
 801c8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801c8f2:	683b      	ldr	r3, [r7, #0]
 801c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c8f6:	4313      	orrs	r3, r2
 801c8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	699b      	ldr	r3, [r3, #24]
 801c904:	041b      	lsls	r3, r3, #16
 801c906:	4313      	orrs	r3, r2
 801c908:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	4a14      	ldr	r2, [pc, #80]	@ (801c960 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 801c910:	4293      	cmp	r3, r2
 801c912:	d115      	bne.n	801c940 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801c91a:	683b      	ldr	r3, [r7, #0]
 801c91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c91e:	051b      	lsls	r3, r3, #20
 801c920:	4313      	orrs	r3, r2
 801c922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	69db      	ldr	r3, [r3, #28]
 801c92e:	4313      	orrs	r3, r2
 801c930:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801c938:	683b      	ldr	r3, [r7, #0]
 801c93a:	6a1b      	ldr	r3, [r3, #32]
 801c93c:	4313      	orrs	r3, r2
 801c93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	68fa      	ldr	r2, [r7, #12]
 801c946:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	2200      	movs	r2, #0
 801c94c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801c950:	2300      	movs	r3, #0
}
 801c952:	4618      	mov	r0, r3
 801c954:	3714      	adds	r7, #20
 801c956:	46bd      	mov	sp, r7
 801c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c95c:	4770      	bx	lr
 801c95e:	bf00      	nop
 801c960:	40012c00 	.word	0x40012c00

0801c964 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801c964:	b480      	push	{r7}
 801c966:	b083      	sub	sp, #12
 801c968:	af00      	add	r7, sp, #0
 801c96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801c96c:	bf00      	nop
 801c96e:	370c      	adds	r7, #12
 801c970:	46bd      	mov	sp, r7
 801c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c976:	4770      	bx	lr

0801c978 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801c978:	b480      	push	{r7}
 801c97a:	b083      	sub	sp, #12
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801c980:	bf00      	nop
 801c982:	370c      	adds	r7, #12
 801c984:	46bd      	mov	sp, r7
 801c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c98a:	4770      	bx	lr

0801c98c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801c98c:	b480      	push	{r7}
 801c98e:	b083      	sub	sp, #12
 801c990:	af00      	add	r7, sp, #0
 801c992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801c994:	bf00      	nop
 801c996:	370c      	adds	r7, #12
 801c998:	46bd      	mov	sp, r7
 801c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c99e:	4770      	bx	lr

0801c9a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c9a0:	b580      	push	{r7, lr}
 801c9a2:	b082      	sub	sp, #8
 801c9a4:	af00      	add	r7, sp, #0
 801c9a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d101      	bne.n	801c9b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c9ae:	2301      	movs	r3, #1
 801c9b0:	e040      	b.n	801ca34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d106      	bne.n	801c9c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	2200      	movs	r2, #0
 801c9be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801c9c2:	6878      	ldr	r0, [r7, #4]
 801c9c4:	f7e4 ffc6 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	2224      	movs	r2, #36	@ 0x24
 801c9cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	681a      	ldr	r2, [r3, #0]
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	f022 0201 	bic.w	r2, r2, #1
 801c9dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d002      	beq.n	801c9ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801c9e6:	6878      	ldr	r0, [r7, #4]
 801c9e8:	f000 fe7e 	bl	801d6e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c9ec:	6878      	ldr	r0, [r7, #4]
 801c9ee:	f000 fc21 	bl	801d234 <UART_SetConfig>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	2b01      	cmp	r3, #1
 801c9f6:	d101      	bne.n	801c9fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801c9f8:	2301      	movs	r3, #1
 801c9fa:	e01b      	b.n	801ca34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	685a      	ldr	r2, [r3, #4]
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801ca0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	689a      	ldr	r2, [r3, #8]
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801ca1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	681a      	ldr	r2, [r3, #0]
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	f042 0201 	orr.w	r2, r2, #1
 801ca2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ca2c:	6878      	ldr	r0, [r7, #4]
 801ca2e:	f000 fefd 	bl	801d82c <UART_CheckIdleState>
 801ca32:	4603      	mov	r3, r0
}
 801ca34:	4618      	mov	r0, r3
 801ca36:	3708      	adds	r7, #8
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	bd80      	pop	{r7, pc}

0801ca3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b08a      	sub	sp, #40	@ 0x28
 801ca40:	af02      	add	r7, sp, #8
 801ca42:	60f8      	str	r0, [r7, #12]
 801ca44:	60b9      	str	r1, [r7, #8]
 801ca46:	603b      	str	r3, [r7, #0]
 801ca48:	4613      	mov	r3, r2
 801ca4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ca50:	2b20      	cmp	r3, #32
 801ca52:	d177      	bne.n	801cb44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801ca54:	68bb      	ldr	r3, [r7, #8]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d002      	beq.n	801ca60 <HAL_UART_Transmit+0x24>
 801ca5a:	88fb      	ldrh	r3, [r7, #6]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d101      	bne.n	801ca64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801ca60:	2301      	movs	r3, #1
 801ca62:	e070      	b.n	801cb46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	2200      	movs	r2, #0
 801ca68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	2221      	movs	r2, #33	@ 0x21
 801ca70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ca72:	f7fc fbbf 	bl	80191f4 <HAL_GetTick>
 801ca76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	88fa      	ldrh	r2, [r7, #6]
 801ca7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	88fa      	ldrh	r2, [r7, #6]
 801ca84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	689b      	ldr	r3, [r3, #8]
 801ca8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ca90:	d108      	bne.n	801caa4 <HAL_UART_Transmit+0x68>
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	691b      	ldr	r3, [r3, #16]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d104      	bne.n	801caa4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ca9e:	68bb      	ldr	r3, [r7, #8]
 801caa0:	61bb      	str	r3, [r7, #24]
 801caa2:	e003      	b.n	801caac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801caa4:	68bb      	ldr	r3, [r7, #8]
 801caa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801caa8:	2300      	movs	r3, #0
 801caaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801caac:	e02f      	b.n	801cb0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801caae:	683b      	ldr	r3, [r7, #0]
 801cab0:	9300      	str	r3, [sp, #0]
 801cab2:	697b      	ldr	r3, [r7, #20]
 801cab4:	2200      	movs	r2, #0
 801cab6:	2180      	movs	r1, #128	@ 0x80
 801cab8:	68f8      	ldr	r0, [r7, #12]
 801caba:	f000 ff5f 	bl	801d97c <UART_WaitOnFlagUntilTimeout>
 801cabe:	4603      	mov	r3, r0
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d004      	beq.n	801cace <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	2220      	movs	r2, #32
 801cac8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801caca:	2303      	movs	r3, #3
 801cacc:	e03b      	b.n	801cb46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801cace:	69fb      	ldr	r3, [r7, #28]
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d10b      	bne.n	801caec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801cad4:	69bb      	ldr	r3, [r7, #24]
 801cad6:	881a      	ldrh	r2, [r3, #0]
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801cae0:	b292      	uxth	r2, r2
 801cae2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801cae4:	69bb      	ldr	r3, [r7, #24]
 801cae6:	3302      	adds	r3, #2
 801cae8:	61bb      	str	r3, [r7, #24]
 801caea:	e007      	b.n	801cafc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801caec:	69fb      	ldr	r3, [r7, #28]
 801caee:	781a      	ldrb	r2, [r3, #0]
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801caf6:	69fb      	ldr	r3, [r7, #28]
 801caf8:	3301      	adds	r3, #1
 801cafa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801cb02:	b29b      	uxth	r3, r3
 801cb04:	3b01      	subs	r3, #1
 801cb06:	b29a      	uxth	r2, r3
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801cb14:	b29b      	uxth	r3, r3
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d1c9      	bne.n	801caae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801cb1a:	683b      	ldr	r3, [r7, #0]
 801cb1c:	9300      	str	r3, [sp, #0]
 801cb1e:	697b      	ldr	r3, [r7, #20]
 801cb20:	2200      	movs	r2, #0
 801cb22:	2140      	movs	r1, #64	@ 0x40
 801cb24:	68f8      	ldr	r0, [r7, #12]
 801cb26:	f000 ff29 	bl	801d97c <UART_WaitOnFlagUntilTimeout>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d004      	beq.n	801cb3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	2220      	movs	r2, #32
 801cb34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801cb36:	2303      	movs	r3, #3
 801cb38:	e005      	b.n	801cb46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	2220      	movs	r2, #32
 801cb3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801cb40:	2300      	movs	r3, #0
 801cb42:	e000      	b.n	801cb46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801cb44:	2302      	movs	r3, #2
  }
}
 801cb46:	4618      	mov	r0, r3
 801cb48:	3720      	adds	r7, #32
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	bd80      	pop	{r7, pc}
	...

0801cb50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b08a      	sub	sp, #40	@ 0x28
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	60f8      	str	r0, [r7, #12]
 801cb58:	60b9      	str	r1, [r7, #8]
 801cb5a:	4613      	mov	r3, r2
 801cb5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cb64:	2b20      	cmp	r3, #32
 801cb66:	d137      	bne.n	801cbd8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801cb68:	68bb      	ldr	r3, [r7, #8]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d002      	beq.n	801cb74 <HAL_UART_Receive_IT+0x24>
 801cb6e:	88fb      	ldrh	r3, [r7, #6]
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d101      	bne.n	801cb78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801cb74:	2301      	movs	r3, #1
 801cb76:	e030      	b.n	801cbda <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	4a18      	ldr	r2, [pc, #96]	@ (801cbe4 <HAL_UART_Receive_IT+0x94>)
 801cb84:	4293      	cmp	r3, r2
 801cb86:	d01f      	beq.n	801cbc8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	685b      	ldr	r3, [r3, #4]
 801cb8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d018      	beq.n	801cbc8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb9c:	697b      	ldr	r3, [r7, #20]
 801cb9e:	e853 3f00 	ldrex	r3, [r3]
 801cba2:	613b      	str	r3, [r7, #16]
   return(result);
 801cba4:	693b      	ldr	r3, [r7, #16]
 801cba6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801cbaa:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	461a      	mov	r2, r3
 801cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbb4:	623b      	str	r3, [r7, #32]
 801cbb6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cbb8:	69f9      	ldr	r1, [r7, #28]
 801cbba:	6a3a      	ldr	r2, [r7, #32]
 801cbbc:	e841 2300 	strex	r3, r2, [r1]
 801cbc0:	61bb      	str	r3, [r7, #24]
   return(result);
 801cbc2:	69bb      	ldr	r3, [r7, #24]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d1e6      	bne.n	801cb96 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801cbc8:	88fb      	ldrh	r3, [r7, #6]
 801cbca:	461a      	mov	r2, r3
 801cbcc:	68b9      	ldr	r1, [r7, #8]
 801cbce:	68f8      	ldr	r0, [r7, #12]
 801cbd0:	f000 ff42 	bl	801da58 <UART_Start_Receive_IT>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	e000      	b.n	801cbda <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801cbd8:	2302      	movs	r3, #2
  }
}
 801cbda:	4618      	mov	r0, r3
 801cbdc:	3728      	adds	r7, #40	@ 0x28
 801cbde:	46bd      	mov	sp, r7
 801cbe0:	bd80      	pop	{r7, pc}
 801cbe2:	bf00      	nop
 801cbe4:	40008000 	.word	0x40008000

0801cbe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b0ba      	sub	sp, #232	@ 0xe8
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	69db      	ldr	r3, [r3, #28]
 801cbf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	681b      	ldr	r3, [r3, #0]
 801cc00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	689b      	ldr	r3, [r3, #8]
 801cc0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801cc0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801cc12:	f640 030f 	movw	r3, #2063	@ 0x80f
 801cc16:	4013      	ands	r3, r2
 801cc18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801cc1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d115      	bne.n	801cc50 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801cc24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801cc28:	f003 0320 	and.w	r3, r3, #32
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d00f      	beq.n	801cc50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cc30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801cc34:	f003 0320 	and.w	r3, r3, #32
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d009      	beq.n	801cc50 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	f000 82ca 	beq.w	801d1da <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cc4a:	6878      	ldr	r0, [r7, #4]
 801cc4c:	4798      	blx	r3
      }
      return;
 801cc4e:	e2c4      	b.n	801d1da <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801cc50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	f000 8117 	beq.w	801ce88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801cc5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801cc5e:	f003 0301 	and.w	r3, r3, #1
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d106      	bne.n	801cc74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801cc66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801cc6a:	4b85      	ldr	r3, [pc, #532]	@ (801ce80 <HAL_UART_IRQHandler+0x298>)
 801cc6c:	4013      	ands	r3, r2
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	f000 810a 	beq.w	801ce88 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801cc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801cc78:	f003 0301 	and.w	r3, r3, #1
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d011      	beq.n	801cca4 <HAL_UART_IRQHandler+0xbc>
 801cc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801cc84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d00b      	beq.n	801cca4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	2201      	movs	r2, #1
 801cc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cc9a:	f043 0201 	orr.w	r2, r3, #1
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801cca8:	f003 0302 	and.w	r3, r3, #2
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d011      	beq.n	801ccd4 <HAL_UART_IRQHandler+0xec>
 801ccb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ccb4:	f003 0301 	and.w	r3, r3, #1
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d00b      	beq.n	801ccd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	2202      	movs	r2, #2
 801ccc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ccca:	f043 0204 	orr.w	r2, r3, #4
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ccd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ccd8:	f003 0304 	and.w	r3, r3, #4
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d011      	beq.n	801cd04 <HAL_UART_IRQHandler+0x11c>
 801cce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801cce4:	f003 0301 	and.w	r3, r3, #1
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d00b      	beq.n	801cd04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	2204      	movs	r2, #4
 801ccf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ccfa:	f043 0202 	orr.w	r2, r3, #2
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801cd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801cd08:	f003 0308 	and.w	r3, r3, #8
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d017      	beq.n	801cd40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801cd14:	f003 0320 	and.w	r3, r3, #32
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d105      	bne.n	801cd28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801cd1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801cd20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d00b      	beq.n	801cd40 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	2208      	movs	r2, #8
 801cd2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cd36:	f043 0208 	orr.w	r2, r3, #8
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801cd40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801cd44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d012      	beq.n	801cd72 <HAL_UART_IRQHandler+0x18a>
 801cd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801cd50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d00c      	beq.n	801cd72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cd60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cd68:	f043 0220 	orr.w	r2, r3, #32
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	f000 8230 	beq.w	801d1de <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801cd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801cd82:	f003 0320 	and.w	r3, r3, #32
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d00d      	beq.n	801cda6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cd8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801cd8e:	f003 0320 	and.w	r3, r3, #32
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d007      	beq.n	801cda6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d003      	beq.n	801cda6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cda2:	6878      	ldr	r0, [r7, #4]
 801cda4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cdac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	689b      	ldr	r3, [r3, #8]
 801cdb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cdba:	2b40      	cmp	r3, #64	@ 0x40
 801cdbc:	d005      	beq.n	801cdca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801cdbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801cdc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d04f      	beq.n	801ce6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801cdca:	6878      	ldr	r0, [r7, #4]
 801cdcc:	f000 ff0a 	bl	801dbe4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	689b      	ldr	r3, [r3, #8]
 801cdd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cdda:	2b40      	cmp	r3, #64	@ 0x40
 801cddc:	d141      	bne.n	801ce62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	3308      	adds	r3, #8
 801cde4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cde8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cdec:	e853 3f00 	ldrex	r3, [r3]
 801cdf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801cdf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cdf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cdfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	3308      	adds	r3, #8
 801ce06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801ce0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801ce0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ce12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801ce16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801ce1a:	e841 2300 	strex	r3, r2, [r1]
 801ce1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801ce22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d1d9      	bne.n	801cdde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d013      	beq.n	801ce5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce36:	4a13      	ldr	r2, [pc, #76]	@ (801ce84 <HAL_UART_IRQHandler+0x29c>)
 801ce38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce3e:	4618      	mov	r0, r3
 801ce40:	f7fc fb57 	bl	80194f2 <HAL_DMA_Abort_IT>
 801ce44:	4603      	mov	r3, r0
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d017      	beq.n	801ce7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ce50:	687a      	ldr	r2, [r7, #4]
 801ce52:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801ce54:	4610      	mov	r0, r2
 801ce56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ce58:	e00f      	b.n	801ce7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f000 f9d4 	bl	801d208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ce60:	e00b      	b.n	801ce7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801ce62:	6878      	ldr	r0, [r7, #4]
 801ce64:	f000 f9d0 	bl	801d208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ce68:	e007      	b.n	801ce7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801ce6a:	6878      	ldr	r0, [r7, #4]
 801ce6c:	f000 f9cc 	bl	801d208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	2200      	movs	r2, #0
 801ce74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801ce78:	e1b1      	b.n	801d1de <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ce7a:	bf00      	nop
    return;
 801ce7c:	e1af      	b.n	801d1de <HAL_UART_IRQHandler+0x5f6>
 801ce7e:	bf00      	nop
 801ce80:	04000120 	.word	0x04000120
 801ce84:	0801dcad 	.word	0x0801dcad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ce8c:	2b01      	cmp	r3, #1
 801ce8e:	f040 816a 	bne.w	801d166 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801ce92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ce96:	f003 0310 	and.w	r3, r3, #16
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	f000 8163 	beq.w	801d166 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801cea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801cea4:	f003 0310 	and.w	r3, r3, #16
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	f000 815c 	beq.w	801d166 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	2210      	movs	r2, #16
 801ceb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	689b      	ldr	r3, [r3, #8]
 801cebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cec0:	2b40      	cmp	r3, #64	@ 0x40
 801cec2:	f040 80d4 	bne.w	801d06e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	685b      	ldr	r3, [r3, #4]
 801cece:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801ced2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	f000 80ad 	beq.w	801d036 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801cee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801cee6:	429a      	cmp	r2, r3
 801cee8:	f080 80a5 	bcs.w	801d036 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801cef2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	f003 0320 	and.w	r3, r3, #32
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	f040 8086 	bne.w	801d014 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cf14:	e853 3f00 	ldrex	r3, [r3]
 801cf18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801cf1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801cf20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801cf24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	461a      	mov	r2, r3
 801cf2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801cf32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801cf36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801cf3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801cf42:	e841 2300 	strex	r3, r2, [r1]
 801cf46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801cf4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d1da      	bne.n	801cf08 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	3308      	adds	r3, #8
 801cf58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cf5c:	e853 3f00 	ldrex	r3, [r3]
 801cf60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801cf62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf64:	f023 0301 	bic.w	r3, r3, #1
 801cf68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	3308      	adds	r3, #8
 801cf72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801cf76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801cf7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801cf7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801cf82:	e841 2300 	strex	r3, r2, [r1]
 801cf86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801cf88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d1e1      	bne.n	801cf52 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	3308      	adds	r3, #8
 801cf94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cf98:	e853 3f00 	ldrex	r3, [r3]
 801cf9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801cf9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cfa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cfa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	3308      	adds	r3, #8
 801cfae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801cfb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801cfb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cfb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801cfb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801cfba:	e841 2300 	strex	r3, r2, [r1]
 801cfbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801cfc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d1e3      	bne.n	801cf8e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2220      	movs	r2, #32
 801cfca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cfda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cfdc:	e853 3f00 	ldrex	r3, [r3]
 801cfe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801cfe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cfe4:	f023 0310 	bic.w	r3, r3, #16
 801cfe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	461a      	mov	r2, r3
 801cff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801cff6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cff8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cffa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801cffc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801cffe:	e841 2300 	strex	r3, r2, [r1]
 801d002:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801d004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d006:	2b00      	cmp	r3, #0
 801d008:	d1e4      	bne.n	801cfd4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d00e:	4618      	mov	r0, r3
 801d010:	f7fc fa31 	bl	8019476 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	2202      	movs	r2, #2
 801d018:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801d026:	b29b      	uxth	r3, r3
 801d028:	1ad3      	subs	r3, r2, r3
 801d02a:	b29b      	uxth	r3, r3
 801d02c:	4619      	mov	r1, r3
 801d02e:	6878      	ldr	r0, [r7, #4]
 801d030:	f000 f8f4 	bl	801d21c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801d034:	e0d5      	b.n	801d1e2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801d03c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801d040:	429a      	cmp	r2, r3
 801d042:	f040 80ce 	bne.w	801d1e2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	f003 0320 	and.w	r3, r3, #32
 801d052:	2b20      	cmp	r3, #32
 801d054:	f040 80c5 	bne.w	801d1e2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	2202      	movs	r2, #2
 801d05c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801d064:	4619      	mov	r1, r3
 801d066:	6878      	ldr	r0, [r7, #4]
 801d068:	f000 f8d8 	bl	801d21c <HAL_UARTEx_RxEventCallback>
      return;
 801d06c:	e0b9      	b.n	801d1e2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801d07a:	b29b      	uxth	r3, r3
 801d07c:	1ad3      	subs	r3, r2, r3
 801d07e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801d088:	b29b      	uxth	r3, r3
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	f000 80ab 	beq.w	801d1e6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801d090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801d094:	2b00      	cmp	r3, #0
 801d096:	f000 80a6 	beq.w	801d1e6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0a2:	e853 3f00 	ldrex	r3, [r3]
 801d0a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801d0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d0aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801d0ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	461a      	mov	r2, r3
 801d0b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801d0bc:	647b      	str	r3, [r7, #68]	@ 0x44
 801d0be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801d0c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d0c4:	e841 2300 	strex	r3, r2, [r1]
 801d0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801d0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d1e4      	bne.n	801d09a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	3308      	adds	r3, #8
 801d0d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0da:	e853 3f00 	ldrex	r3, [r3]
 801d0de:	623b      	str	r3, [r7, #32]
   return(result);
 801d0e0:	6a3b      	ldr	r3, [r7, #32]
 801d0e2:	f023 0301 	bic.w	r3, r3, #1
 801d0e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	3308      	adds	r3, #8
 801d0f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801d0f4:	633a      	str	r2, [r7, #48]	@ 0x30
 801d0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d0fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d0fc:	e841 2300 	strex	r3, r2, [r1]
 801d100:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801d102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d104:	2b00      	cmp	r3, #0
 801d106:	d1e3      	bne.n	801d0d0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	2220      	movs	r2, #32
 801d10c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	2200      	movs	r2, #0
 801d114:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	2200      	movs	r2, #0
 801d11a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d122:	693b      	ldr	r3, [r7, #16]
 801d124:	e853 3f00 	ldrex	r3, [r3]
 801d128:	60fb      	str	r3, [r7, #12]
   return(result);
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	f023 0310 	bic.w	r3, r3, #16
 801d130:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	461a      	mov	r2, r3
 801d13a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801d13e:	61fb      	str	r3, [r7, #28]
 801d140:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d142:	69b9      	ldr	r1, [r7, #24]
 801d144:	69fa      	ldr	r2, [r7, #28]
 801d146:	e841 2300 	strex	r3, r2, [r1]
 801d14a:	617b      	str	r3, [r7, #20]
   return(result);
 801d14c:	697b      	ldr	r3, [r7, #20]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d1e4      	bne.n	801d11c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	2202      	movs	r2, #2
 801d156:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801d158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801d15c:	4619      	mov	r1, r3
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f000 f85c 	bl	801d21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d164:	e03f      	b.n	801d1e6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801d166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d16a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d00e      	beq.n	801d190 <HAL_UART_IRQHandler+0x5a8>
 801d172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d008      	beq.n	801d190 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801d186:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801d188:	6878      	ldr	r0, [r7, #4]
 801d18a:	f000 ff8b 	bl	801e0a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801d18e:	e02d      	b.n	801d1ec <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801d190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d00e      	beq.n	801d1ba <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801d19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d1a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d008      	beq.n	801d1ba <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d01c      	beq.n	801d1ea <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d1b4:	6878      	ldr	r0, [r7, #4]
 801d1b6:	4798      	blx	r3
    }
    return;
 801d1b8:	e017      	b.n	801d1ea <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801d1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801d1be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d012      	beq.n	801d1ec <HAL_UART_IRQHandler+0x604>
 801d1c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d1ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d00c      	beq.n	801d1ec <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801d1d2:	6878      	ldr	r0, [r7, #4]
 801d1d4:	f000 fd80 	bl	801dcd8 <UART_EndTransmit_IT>
    return;
 801d1d8:	e008      	b.n	801d1ec <HAL_UART_IRQHandler+0x604>
      return;
 801d1da:	bf00      	nop
 801d1dc:	e006      	b.n	801d1ec <HAL_UART_IRQHandler+0x604>
    return;
 801d1de:	bf00      	nop
 801d1e0:	e004      	b.n	801d1ec <HAL_UART_IRQHandler+0x604>
      return;
 801d1e2:	bf00      	nop
 801d1e4:	e002      	b.n	801d1ec <HAL_UART_IRQHandler+0x604>
      return;
 801d1e6:	bf00      	nop
 801d1e8:	e000      	b.n	801d1ec <HAL_UART_IRQHandler+0x604>
    return;
 801d1ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801d1ec:	37e8      	adds	r7, #232	@ 0xe8
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	bd80      	pop	{r7, pc}
 801d1f2:	bf00      	nop

0801d1f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d1f4:	b480      	push	{r7}
 801d1f6:	b083      	sub	sp, #12
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801d1fc:	bf00      	nop
 801d1fe:	370c      	adds	r7, #12
 801d200:	46bd      	mov	sp, r7
 801d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d206:	4770      	bx	lr

0801d208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801d208:	b480      	push	{r7}
 801d20a:	b083      	sub	sp, #12
 801d20c:	af00      	add	r7, sp, #0
 801d20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801d210:	bf00      	nop
 801d212:	370c      	adds	r7, #12
 801d214:	46bd      	mov	sp, r7
 801d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d21a:	4770      	bx	lr

0801d21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801d21c:	b480      	push	{r7}
 801d21e:	b083      	sub	sp, #12
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
 801d224:	460b      	mov	r3, r1
 801d226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801d228:	bf00      	nop
 801d22a:	370c      	adds	r7, #12
 801d22c:	46bd      	mov	sp, r7
 801d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d232:	4770      	bx	lr

0801d234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801d234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d238:	b08a      	sub	sp, #40	@ 0x28
 801d23a:	af00      	add	r7, sp, #0
 801d23c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801d23e:	2300      	movs	r3, #0
 801d240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	689a      	ldr	r2, [r3, #8]
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	691b      	ldr	r3, [r3, #16]
 801d24c:	431a      	orrs	r2, r3
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	695b      	ldr	r3, [r3, #20]
 801d252:	431a      	orrs	r2, r3
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	69db      	ldr	r3, [r3, #28]
 801d258:	4313      	orrs	r3, r2
 801d25a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	681a      	ldr	r2, [r3, #0]
 801d262:	4b9e      	ldr	r3, [pc, #632]	@ (801d4dc <UART_SetConfig+0x2a8>)
 801d264:	4013      	ands	r3, r2
 801d266:	68fa      	ldr	r2, [r7, #12]
 801d268:	6812      	ldr	r2, [r2, #0]
 801d26a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d26c:	430b      	orrs	r3, r1
 801d26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	68da      	ldr	r2, [r3, #12]
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	430a      	orrs	r2, r1
 801d284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	699b      	ldr	r3, [r3, #24]
 801d28a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	4a93      	ldr	r2, [pc, #588]	@ (801d4e0 <UART_SetConfig+0x2ac>)
 801d292:	4293      	cmp	r3, r2
 801d294:	d004      	beq.n	801d2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	6a1b      	ldr	r3, [r3, #32]
 801d29a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d29c:	4313      	orrs	r3, r2
 801d29e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d2a0:	68fb      	ldr	r3, [r7, #12]
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	689b      	ldr	r3, [r3, #8]
 801d2a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d2b0:	430a      	orrs	r2, r1
 801d2b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	4a8a      	ldr	r2, [pc, #552]	@ (801d4e4 <UART_SetConfig+0x2b0>)
 801d2ba:	4293      	cmp	r3, r2
 801d2bc:	d126      	bne.n	801d30c <UART_SetConfig+0xd8>
 801d2be:	4b8a      	ldr	r3, [pc, #552]	@ (801d4e8 <UART_SetConfig+0x2b4>)
 801d2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d2c4:	f003 0303 	and.w	r3, r3, #3
 801d2c8:	2b03      	cmp	r3, #3
 801d2ca:	d81b      	bhi.n	801d304 <UART_SetConfig+0xd0>
 801d2cc:	a201      	add	r2, pc, #4	@ (adr r2, 801d2d4 <UART_SetConfig+0xa0>)
 801d2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d2d2:	bf00      	nop
 801d2d4:	0801d2e5 	.word	0x0801d2e5
 801d2d8:	0801d2f5 	.word	0x0801d2f5
 801d2dc:	0801d2ed 	.word	0x0801d2ed
 801d2e0:	0801d2fd 	.word	0x0801d2fd
 801d2e4:	2301      	movs	r3, #1
 801d2e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d2ea:	e0ab      	b.n	801d444 <UART_SetConfig+0x210>
 801d2ec:	2302      	movs	r3, #2
 801d2ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d2f2:	e0a7      	b.n	801d444 <UART_SetConfig+0x210>
 801d2f4:	2304      	movs	r3, #4
 801d2f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d2fa:	e0a3      	b.n	801d444 <UART_SetConfig+0x210>
 801d2fc:	2308      	movs	r3, #8
 801d2fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d302:	e09f      	b.n	801d444 <UART_SetConfig+0x210>
 801d304:	2310      	movs	r3, #16
 801d306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d30a:	e09b      	b.n	801d444 <UART_SetConfig+0x210>
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	4a76      	ldr	r2, [pc, #472]	@ (801d4ec <UART_SetConfig+0x2b8>)
 801d312:	4293      	cmp	r3, r2
 801d314:	d138      	bne.n	801d388 <UART_SetConfig+0x154>
 801d316:	4b74      	ldr	r3, [pc, #464]	@ (801d4e8 <UART_SetConfig+0x2b4>)
 801d318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d31c:	f003 030c 	and.w	r3, r3, #12
 801d320:	2b0c      	cmp	r3, #12
 801d322:	d82d      	bhi.n	801d380 <UART_SetConfig+0x14c>
 801d324:	a201      	add	r2, pc, #4	@ (adr r2, 801d32c <UART_SetConfig+0xf8>)
 801d326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d32a:	bf00      	nop
 801d32c:	0801d361 	.word	0x0801d361
 801d330:	0801d381 	.word	0x0801d381
 801d334:	0801d381 	.word	0x0801d381
 801d338:	0801d381 	.word	0x0801d381
 801d33c:	0801d371 	.word	0x0801d371
 801d340:	0801d381 	.word	0x0801d381
 801d344:	0801d381 	.word	0x0801d381
 801d348:	0801d381 	.word	0x0801d381
 801d34c:	0801d369 	.word	0x0801d369
 801d350:	0801d381 	.word	0x0801d381
 801d354:	0801d381 	.word	0x0801d381
 801d358:	0801d381 	.word	0x0801d381
 801d35c:	0801d379 	.word	0x0801d379
 801d360:	2300      	movs	r3, #0
 801d362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d366:	e06d      	b.n	801d444 <UART_SetConfig+0x210>
 801d368:	2302      	movs	r3, #2
 801d36a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d36e:	e069      	b.n	801d444 <UART_SetConfig+0x210>
 801d370:	2304      	movs	r3, #4
 801d372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d376:	e065      	b.n	801d444 <UART_SetConfig+0x210>
 801d378:	2308      	movs	r3, #8
 801d37a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d37e:	e061      	b.n	801d444 <UART_SetConfig+0x210>
 801d380:	2310      	movs	r3, #16
 801d382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d386:	e05d      	b.n	801d444 <UART_SetConfig+0x210>
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	4a58      	ldr	r2, [pc, #352]	@ (801d4f0 <UART_SetConfig+0x2bc>)
 801d38e:	4293      	cmp	r3, r2
 801d390:	d125      	bne.n	801d3de <UART_SetConfig+0x1aa>
 801d392:	4b55      	ldr	r3, [pc, #340]	@ (801d4e8 <UART_SetConfig+0x2b4>)
 801d394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d398:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801d39c:	2b30      	cmp	r3, #48	@ 0x30
 801d39e:	d016      	beq.n	801d3ce <UART_SetConfig+0x19a>
 801d3a0:	2b30      	cmp	r3, #48	@ 0x30
 801d3a2:	d818      	bhi.n	801d3d6 <UART_SetConfig+0x1a2>
 801d3a4:	2b20      	cmp	r3, #32
 801d3a6:	d00a      	beq.n	801d3be <UART_SetConfig+0x18a>
 801d3a8:	2b20      	cmp	r3, #32
 801d3aa:	d814      	bhi.n	801d3d6 <UART_SetConfig+0x1a2>
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d002      	beq.n	801d3b6 <UART_SetConfig+0x182>
 801d3b0:	2b10      	cmp	r3, #16
 801d3b2:	d008      	beq.n	801d3c6 <UART_SetConfig+0x192>
 801d3b4:	e00f      	b.n	801d3d6 <UART_SetConfig+0x1a2>
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d3bc:	e042      	b.n	801d444 <UART_SetConfig+0x210>
 801d3be:	2302      	movs	r3, #2
 801d3c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d3c4:	e03e      	b.n	801d444 <UART_SetConfig+0x210>
 801d3c6:	2304      	movs	r3, #4
 801d3c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d3cc:	e03a      	b.n	801d444 <UART_SetConfig+0x210>
 801d3ce:	2308      	movs	r3, #8
 801d3d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d3d4:	e036      	b.n	801d444 <UART_SetConfig+0x210>
 801d3d6:	2310      	movs	r3, #16
 801d3d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d3dc:	e032      	b.n	801d444 <UART_SetConfig+0x210>
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	4a3f      	ldr	r2, [pc, #252]	@ (801d4e0 <UART_SetConfig+0x2ac>)
 801d3e4:	4293      	cmp	r3, r2
 801d3e6:	d12a      	bne.n	801d43e <UART_SetConfig+0x20a>
 801d3e8:	4b3f      	ldr	r3, [pc, #252]	@ (801d4e8 <UART_SetConfig+0x2b4>)
 801d3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d3ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801d3f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d3f6:	d01a      	beq.n	801d42e <UART_SetConfig+0x1fa>
 801d3f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d3fc:	d81b      	bhi.n	801d436 <UART_SetConfig+0x202>
 801d3fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d402:	d00c      	beq.n	801d41e <UART_SetConfig+0x1ea>
 801d404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d408:	d815      	bhi.n	801d436 <UART_SetConfig+0x202>
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d003      	beq.n	801d416 <UART_SetConfig+0x1e2>
 801d40e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d412:	d008      	beq.n	801d426 <UART_SetConfig+0x1f2>
 801d414:	e00f      	b.n	801d436 <UART_SetConfig+0x202>
 801d416:	2300      	movs	r3, #0
 801d418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d41c:	e012      	b.n	801d444 <UART_SetConfig+0x210>
 801d41e:	2302      	movs	r3, #2
 801d420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d424:	e00e      	b.n	801d444 <UART_SetConfig+0x210>
 801d426:	2304      	movs	r3, #4
 801d428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d42c:	e00a      	b.n	801d444 <UART_SetConfig+0x210>
 801d42e:	2308      	movs	r3, #8
 801d430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d434:	e006      	b.n	801d444 <UART_SetConfig+0x210>
 801d436:	2310      	movs	r3, #16
 801d438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801d43c:	e002      	b.n	801d444 <UART_SetConfig+0x210>
 801d43e:	2310      	movs	r3, #16
 801d440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	4a25      	ldr	r2, [pc, #148]	@ (801d4e0 <UART_SetConfig+0x2ac>)
 801d44a:	4293      	cmp	r3, r2
 801d44c:	f040 808a 	bne.w	801d564 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d454:	2b08      	cmp	r3, #8
 801d456:	d824      	bhi.n	801d4a2 <UART_SetConfig+0x26e>
 801d458:	a201      	add	r2, pc, #4	@ (adr r2, 801d460 <UART_SetConfig+0x22c>)
 801d45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d45e:	bf00      	nop
 801d460:	0801d485 	.word	0x0801d485
 801d464:	0801d4a3 	.word	0x0801d4a3
 801d468:	0801d48d 	.word	0x0801d48d
 801d46c:	0801d4a3 	.word	0x0801d4a3
 801d470:	0801d493 	.word	0x0801d493
 801d474:	0801d4a3 	.word	0x0801d4a3
 801d478:	0801d4a3 	.word	0x0801d4a3
 801d47c:	0801d4a3 	.word	0x0801d4a3
 801d480:	0801d49b 	.word	0x0801d49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d484:	f7fd f830 	bl	801a4e8 <HAL_RCC_GetPCLK1Freq>
 801d488:	61f8      	str	r0, [r7, #28]
        break;
 801d48a:	e010      	b.n	801d4ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801d48c:	4b19      	ldr	r3, [pc, #100]	@ (801d4f4 <UART_SetConfig+0x2c0>)
 801d48e:	61fb      	str	r3, [r7, #28]
        break;
 801d490:	e00d      	b.n	801d4ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d492:	f7fc ff91 	bl	801a3b8 <HAL_RCC_GetSysClockFreq>
 801d496:	61f8      	str	r0, [r7, #28]
        break;
 801d498:	e009      	b.n	801d4ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d49e:	61fb      	str	r3, [r7, #28]
        break;
 801d4a0:	e005      	b.n	801d4ae <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801d4a6:	2301      	movs	r3, #1
 801d4a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801d4ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d4ae:	69fb      	ldr	r3, [r7, #28]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	f000 8109 	beq.w	801d6c8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	685a      	ldr	r2, [r3, #4]
 801d4ba:	4613      	mov	r3, r2
 801d4bc:	005b      	lsls	r3, r3, #1
 801d4be:	4413      	add	r3, r2
 801d4c0:	69fa      	ldr	r2, [r7, #28]
 801d4c2:	429a      	cmp	r2, r3
 801d4c4:	d305      	bcc.n	801d4d2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	685b      	ldr	r3, [r3, #4]
 801d4ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d4cc:	69fa      	ldr	r2, [r7, #28]
 801d4ce:	429a      	cmp	r2, r3
 801d4d0:	d912      	bls.n	801d4f8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 801d4d2:	2301      	movs	r3, #1
 801d4d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801d4d8:	e0f6      	b.n	801d6c8 <UART_SetConfig+0x494>
 801d4da:	bf00      	nop
 801d4dc:	efff69f3 	.word	0xefff69f3
 801d4e0:	40008000 	.word	0x40008000
 801d4e4:	40013800 	.word	0x40013800
 801d4e8:	40021000 	.word	0x40021000
 801d4ec:	40004400 	.word	0x40004400
 801d4f0:	40004800 	.word	0x40004800
 801d4f4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801d4f8:	69fb      	ldr	r3, [r7, #28]
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	461c      	mov	r4, r3
 801d4fe:	4615      	mov	r5, r2
 801d500:	f04f 0200 	mov.w	r2, #0
 801d504:	f04f 0300 	mov.w	r3, #0
 801d508:	022b      	lsls	r3, r5, #8
 801d50a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801d50e:	0222      	lsls	r2, r4, #8
 801d510:	68f9      	ldr	r1, [r7, #12]
 801d512:	6849      	ldr	r1, [r1, #4]
 801d514:	0849      	lsrs	r1, r1, #1
 801d516:	2000      	movs	r0, #0
 801d518:	4688      	mov	r8, r1
 801d51a:	4681      	mov	r9, r0
 801d51c:	eb12 0a08 	adds.w	sl, r2, r8
 801d520:	eb43 0b09 	adc.w	fp, r3, r9
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	685b      	ldr	r3, [r3, #4]
 801d528:	2200      	movs	r2, #0
 801d52a:	603b      	str	r3, [r7, #0]
 801d52c:	607a      	str	r2, [r7, #4]
 801d52e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d532:	4650      	mov	r0, sl
 801d534:	4659      	mov	r1, fp
 801d536:	f7e3 fb87 	bl	8000c48 <__aeabi_uldivmod>
 801d53a:	4602      	mov	r2, r0
 801d53c:	460b      	mov	r3, r1
 801d53e:	4613      	mov	r3, r2
 801d540:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d542:	69bb      	ldr	r3, [r7, #24]
 801d544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d548:	d308      	bcc.n	801d55c <UART_SetConfig+0x328>
 801d54a:	69bb      	ldr	r3, [r7, #24]
 801d54c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d550:	d204      	bcs.n	801d55c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	69ba      	ldr	r2, [r7, #24]
 801d558:	60da      	str	r2, [r3, #12]
 801d55a:	e0b5      	b.n	801d6c8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 801d55c:	2301      	movs	r3, #1
 801d55e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801d562:	e0b1      	b.n	801d6c8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	69db      	ldr	r3, [r3, #28]
 801d568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d56c:	d15d      	bne.n	801d62a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 801d56e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d572:	2b08      	cmp	r3, #8
 801d574:	d827      	bhi.n	801d5c6 <UART_SetConfig+0x392>
 801d576:	a201      	add	r2, pc, #4	@ (adr r2, 801d57c <UART_SetConfig+0x348>)
 801d578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d57c:	0801d5a1 	.word	0x0801d5a1
 801d580:	0801d5a9 	.word	0x0801d5a9
 801d584:	0801d5b1 	.word	0x0801d5b1
 801d588:	0801d5c7 	.word	0x0801d5c7
 801d58c:	0801d5b7 	.word	0x0801d5b7
 801d590:	0801d5c7 	.word	0x0801d5c7
 801d594:	0801d5c7 	.word	0x0801d5c7
 801d598:	0801d5c7 	.word	0x0801d5c7
 801d59c:	0801d5bf 	.word	0x0801d5bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d5a0:	f7fc ffa2 	bl	801a4e8 <HAL_RCC_GetPCLK1Freq>
 801d5a4:	61f8      	str	r0, [r7, #28]
        break;
 801d5a6:	e014      	b.n	801d5d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d5a8:	f7fc ffb4 	bl	801a514 <HAL_RCC_GetPCLK2Freq>
 801d5ac:	61f8      	str	r0, [r7, #28]
        break;
 801d5ae:	e010      	b.n	801d5d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801d5b0:	4b4c      	ldr	r3, [pc, #304]	@ (801d6e4 <UART_SetConfig+0x4b0>)
 801d5b2:	61fb      	str	r3, [r7, #28]
        break;
 801d5b4:	e00d      	b.n	801d5d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d5b6:	f7fc feff 	bl	801a3b8 <HAL_RCC_GetSysClockFreq>
 801d5ba:	61f8      	str	r0, [r7, #28]
        break;
 801d5bc:	e009      	b.n	801d5d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d5be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d5c2:	61fb      	str	r3, [r7, #28]
        break;
 801d5c4:	e005      	b.n	801d5d2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801d5ca:	2301      	movs	r3, #1
 801d5cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801d5d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d5d2:	69fb      	ldr	r3, [r7, #28]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d077      	beq.n	801d6c8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801d5d8:	69fb      	ldr	r3, [r7, #28]
 801d5da:	005a      	lsls	r2, r3, #1
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	685b      	ldr	r3, [r3, #4]
 801d5e0:	085b      	lsrs	r3, r3, #1
 801d5e2:	441a      	add	r2, r3
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	685b      	ldr	r3, [r3, #4]
 801d5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 801d5ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d5ee:	69bb      	ldr	r3, [r7, #24]
 801d5f0:	2b0f      	cmp	r3, #15
 801d5f2:	d916      	bls.n	801d622 <UART_SetConfig+0x3ee>
 801d5f4:	69bb      	ldr	r3, [r7, #24]
 801d5f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d5fa:	d212      	bcs.n	801d622 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d5fc:	69bb      	ldr	r3, [r7, #24]
 801d5fe:	b29b      	uxth	r3, r3
 801d600:	f023 030f 	bic.w	r3, r3, #15
 801d604:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d606:	69bb      	ldr	r3, [r7, #24]
 801d608:	085b      	lsrs	r3, r3, #1
 801d60a:	b29b      	uxth	r3, r3
 801d60c:	f003 0307 	and.w	r3, r3, #7
 801d610:	b29a      	uxth	r2, r3
 801d612:	8afb      	ldrh	r3, [r7, #22]
 801d614:	4313      	orrs	r3, r2
 801d616:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	8afa      	ldrh	r2, [r7, #22]
 801d61e:	60da      	str	r2, [r3, #12]
 801d620:	e052      	b.n	801d6c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801d622:	2301      	movs	r3, #1
 801d624:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801d628:	e04e      	b.n	801d6c8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d62a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d62e:	2b08      	cmp	r3, #8
 801d630:	d827      	bhi.n	801d682 <UART_SetConfig+0x44e>
 801d632:	a201      	add	r2, pc, #4	@ (adr r2, 801d638 <UART_SetConfig+0x404>)
 801d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d638:	0801d65d 	.word	0x0801d65d
 801d63c:	0801d665 	.word	0x0801d665
 801d640:	0801d66d 	.word	0x0801d66d
 801d644:	0801d683 	.word	0x0801d683
 801d648:	0801d673 	.word	0x0801d673
 801d64c:	0801d683 	.word	0x0801d683
 801d650:	0801d683 	.word	0x0801d683
 801d654:	0801d683 	.word	0x0801d683
 801d658:	0801d67b 	.word	0x0801d67b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d65c:	f7fc ff44 	bl	801a4e8 <HAL_RCC_GetPCLK1Freq>
 801d660:	61f8      	str	r0, [r7, #28]
        break;
 801d662:	e014      	b.n	801d68e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d664:	f7fc ff56 	bl	801a514 <HAL_RCC_GetPCLK2Freq>
 801d668:	61f8      	str	r0, [r7, #28]
        break;
 801d66a:	e010      	b.n	801d68e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801d66c:	4b1d      	ldr	r3, [pc, #116]	@ (801d6e4 <UART_SetConfig+0x4b0>)
 801d66e:	61fb      	str	r3, [r7, #28]
        break;
 801d670:	e00d      	b.n	801d68e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d672:	f7fc fea1 	bl	801a3b8 <HAL_RCC_GetSysClockFreq>
 801d676:	61f8      	str	r0, [r7, #28]
        break;
 801d678:	e009      	b.n	801d68e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d67a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d67e:	61fb      	str	r3, [r7, #28]
        break;
 801d680:	e005      	b.n	801d68e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 801d682:	2300      	movs	r3, #0
 801d684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801d686:	2301      	movs	r3, #1
 801d688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801d68c:	bf00      	nop
    }

    if (pclk != 0U)
 801d68e:	69fb      	ldr	r3, [r7, #28]
 801d690:	2b00      	cmp	r3, #0
 801d692:	d019      	beq.n	801d6c8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	685b      	ldr	r3, [r3, #4]
 801d698:	085a      	lsrs	r2, r3, #1
 801d69a:	69fb      	ldr	r3, [r7, #28]
 801d69c:	441a      	add	r2, r3
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	685b      	ldr	r3, [r3, #4]
 801d6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 801d6a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d6a8:	69bb      	ldr	r3, [r7, #24]
 801d6aa:	2b0f      	cmp	r3, #15
 801d6ac:	d909      	bls.n	801d6c2 <UART_SetConfig+0x48e>
 801d6ae:	69bb      	ldr	r3, [r7, #24]
 801d6b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d6b4:	d205      	bcs.n	801d6c2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d6b6:	69bb      	ldr	r3, [r7, #24]
 801d6b8:	b29a      	uxth	r2, r3
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	60da      	str	r2, [r3, #12]
 801d6c0:	e002      	b.n	801d6c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 801d6c2:	2301      	movs	r3, #1
 801d6c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	2200      	movs	r2, #0
 801d6cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	2200      	movs	r2, #0
 801d6d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d6d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 801d6d8:	4618      	mov	r0, r3
 801d6da:	3728      	adds	r7, #40	@ 0x28
 801d6dc:	46bd      	mov	sp, r7
 801d6de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d6e2:	bf00      	nop
 801d6e4:	00f42400 	.word	0x00f42400

0801d6e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d6e8:	b480      	push	{r7}
 801d6ea:	b083      	sub	sp, #12
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6f4:	f003 0308 	and.w	r3, r3, #8
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d00a      	beq.n	801d712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	681b      	ldr	r3, [r3, #0]
 801d700:	685b      	ldr	r3, [r3, #4]
 801d702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	430a      	orrs	r2, r1
 801d710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d716:	f003 0301 	and.w	r3, r3, #1
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d00a      	beq.n	801d734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	685b      	ldr	r3, [r3, #4]
 801d724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	430a      	orrs	r2, r1
 801d732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d738:	f003 0302 	and.w	r3, r3, #2
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d00a      	beq.n	801d756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	685b      	ldr	r3, [r3, #4]
 801d746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	430a      	orrs	r2, r1
 801d754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d75a:	f003 0304 	and.w	r3, r3, #4
 801d75e:	2b00      	cmp	r3, #0
 801d760:	d00a      	beq.n	801d778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	685b      	ldr	r3, [r3, #4]
 801d768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	430a      	orrs	r2, r1
 801d776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d77c:	f003 0310 	and.w	r3, r3, #16
 801d780:	2b00      	cmp	r3, #0
 801d782:	d00a      	beq.n	801d79a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	689b      	ldr	r3, [r3, #8]
 801d78a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	430a      	orrs	r2, r1
 801d798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d79e:	f003 0320 	and.w	r3, r3, #32
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d00a      	beq.n	801d7bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	689b      	ldr	r3, [r3, #8]
 801d7ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	430a      	orrs	r2, r1
 801d7ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d01a      	beq.n	801d7fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	685b      	ldr	r3, [r3, #4]
 801d7ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	430a      	orrs	r2, r1
 801d7dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d7e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d7e6:	d10a      	bne.n	801d7fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	685b      	ldr	r3, [r3, #4]
 801d7ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	430a      	orrs	r2, r1
 801d7fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d806:	2b00      	cmp	r3, #0
 801d808:	d00a      	beq.n	801d820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	681b      	ldr	r3, [r3, #0]
 801d80e:	685b      	ldr	r3, [r3, #4]
 801d810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	430a      	orrs	r2, r1
 801d81e:	605a      	str	r2, [r3, #4]
  }
}
 801d820:	bf00      	nop
 801d822:	370c      	adds	r7, #12
 801d824:	46bd      	mov	sp, r7
 801d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d82a:	4770      	bx	lr

0801d82c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b098      	sub	sp, #96	@ 0x60
 801d830:	af02      	add	r7, sp, #8
 801d832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	2200      	movs	r2, #0
 801d838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d83c:	f7fb fcda 	bl	80191f4 <HAL_GetTick>
 801d840:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	f003 0308 	and.w	r3, r3, #8
 801d84c:	2b08      	cmp	r3, #8
 801d84e:	d12e      	bne.n	801d8ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801d854:	9300      	str	r3, [sp, #0]
 801d856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d858:	2200      	movs	r2, #0
 801d85a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801d85e:	6878      	ldr	r0, [r7, #4]
 801d860:	f000 f88c 	bl	801d97c <UART_WaitOnFlagUntilTimeout>
 801d864:	4603      	mov	r3, r0
 801d866:	2b00      	cmp	r3, #0
 801d868:	d021      	beq.n	801d8ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d872:	e853 3f00 	ldrex	r3, [r3]
 801d876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801d878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d87a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d87e:	653b      	str	r3, [r7, #80]	@ 0x50
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	681b      	ldr	r3, [r3, #0]
 801d884:	461a      	mov	r2, r3
 801d886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d888:	647b      	str	r3, [r7, #68]	@ 0x44
 801d88a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d88c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801d88e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d890:	e841 2300 	strex	r3, r2, [r1]
 801d894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801d896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d1e6      	bne.n	801d86a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	2220      	movs	r2, #32
 801d8a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	2200      	movs	r2, #0
 801d8a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d8aa:	2303      	movs	r3, #3
 801d8ac:	e062      	b.n	801d974 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	f003 0304 	and.w	r3, r3, #4
 801d8b8:	2b04      	cmp	r3, #4
 801d8ba:	d149      	bne.n	801d950 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d8bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801d8c0:	9300      	str	r3, [sp, #0]
 801d8c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801d8ca:	6878      	ldr	r0, [r7, #4]
 801d8cc:	f000 f856 	bl	801d97c <UART_WaitOnFlagUntilTimeout>
 801d8d0:	4603      	mov	r3, r0
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d03c      	beq.n	801d950 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8de:	e853 3f00 	ldrex	r3, [r3]
 801d8e2:	623b      	str	r3, [r7, #32]
   return(result);
 801d8e4:	6a3b      	ldr	r3, [r7, #32]
 801d8e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801d8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	461a      	mov	r2, r3
 801d8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8f4:	633b      	str	r3, [r7, #48]	@ 0x30
 801d8f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d8f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d8fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d8fc:	e841 2300 	strex	r3, r2, [r1]
 801d900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801d902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d904:	2b00      	cmp	r3, #0
 801d906:	d1e6      	bne.n	801d8d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	3308      	adds	r3, #8
 801d90e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d910:	693b      	ldr	r3, [r7, #16]
 801d912:	e853 3f00 	ldrex	r3, [r3]
 801d916:	60fb      	str	r3, [r7, #12]
   return(result);
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	f023 0301 	bic.w	r3, r3, #1
 801d91e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	3308      	adds	r3, #8
 801d926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d928:	61fa      	str	r2, [r7, #28]
 801d92a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d92c:	69b9      	ldr	r1, [r7, #24]
 801d92e:	69fa      	ldr	r2, [r7, #28]
 801d930:	e841 2300 	strex	r3, r2, [r1]
 801d934:	617b      	str	r3, [r7, #20]
   return(result);
 801d936:	697b      	ldr	r3, [r7, #20]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d1e5      	bne.n	801d908 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	2220      	movs	r2, #32
 801d940:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	2200      	movs	r2, #0
 801d948:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d94c:	2303      	movs	r3, #3
 801d94e:	e011      	b.n	801d974 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	2220      	movs	r2, #32
 801d954:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	2220      	movs	r2, #32
 801d95a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	2200      	movs	r2, #0
 801d962:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	2200      	movs	r2, #0
 801d968:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	2200      	movs	r2, #0
 801d96e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801d972:	2300      	movs	r3, #0
}
 801d974:	4618      	mov	r0, r3
 801d976:	3758      	adds	r7, #88	@ 0x58
 801d978:	46bd      	mov	sp, r7
 801d97a:	bd80      	pop	{r7, pc}

0801d97c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b084      	sub	sp, #16
 801d980:	af00      	add	r7, sp, #0
 801d982:	60f8      	str	r0, [r7, #12]
 801d984:	60b9      	str	r1, [r7, #8]
 801d986:	603b      	str	r3, [r7, #0]
 801d988:	4613      	mov	r3, r2
 801d98a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d98c:	e04f      	b.n	801da2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d98e:	69bb      	ldr	r3, [r7, #24]
 801d990:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d994:	d04b      	beq.n	801da2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d996:	f7fb fc2d 	bl	80191f4 <HAL_GetTick>
 801d99a:	4602      	mov	r2, r0
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	1ad3      	subs	r3, r2, r3
 801d9a0:	69ba      	ldr	r2, [r7, #24]
 801d9a2:	429a      	cmp	r2, r3
 801d9a4:	d302      	bcc.n	801d9ac <UART_WaitOnFlagUntilTimeout+0x30>
 801d9a6:	69bb      	ldr	r3, [r7, #24]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d101      	bne.n	801d9b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801d9ac:	2303      	movs	r3, #3
 801d9ae:	e04e      	b.n	801da4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	681b      	ldr	r3, [r3, #0]
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	f003 0304 	and.w	r3, r3, #4
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d037      	beq.n	801da2e <UART_WaitOnFlagUntilTimeout+0xb2>
 801d9be:	68bb      	ldr	r3, [r7, #8]
 801d9c0:	2b80      	cmp	r3, #128	@ 0x80
 801d9c2:	d034      	beq.n	801da2e <UART_WaitOnFlagUntilTimeout+0xb2>
 801d9c4:	68bb      	ldr	r3, [r7, #8]
 801d9c6:	2b40      	cmp	r3, #64	@ 0x40
 801d9c8:	d031      	beq.n	801da2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	69db      	ldr	r3, [r3, #28]
 801d9d0:	f003 0308 	and.w	r3, r3, #8
 801d9d4:	2b08      	cmp	r3, #8
 801d9d6:	d110      	bne.n	801d9fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	2208      	movs	r2, #8
 801d9de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d9e0:	68f8      	ldr	r0, [r7, #12]
 801d9e2:	f000 f8ff 	bl	801dbe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	2208      	movs	r2, #8
 801d9ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	2200      	movs	r2, #0
 801d9f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801d9f6:	2301      	movs	r3, #1
 801d9f8:	e029      	b.n	801da4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	69db      	ldr	r3, [r3, #28]
 801da00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801da04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801da08:	d111      	bne.n	801da2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801da12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801da14:	68f8      	ldr	r0, [r7, #12]
 801da16:	f000 f8e5 	bl	801dbe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	2220      	movs	r2, #32
 801da1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	2200      	movs	r2, #0
 801da26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801da2a:	2303      	movs	r3, #3
 801da2c:	e00f      	b.n	801da4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	69da      	ldr	r2, [r3, #28]
 801da34:	68bb      	ldr	r3, [r7, #8]
 801da36:	4013      	ands	r3, r2
 801da38:	68ba      	ldr	r2, [r7, #8]
 801da3a:	429a      	cmp	r2, r3
 801da3c:	bf0c      	ite	eq
 801da3e:	2301      	moveq	r3, #1
 801da40:	2300      	movne	r3, #0
 801da42:	b2db      	uxtb	r3, r3
 801da44:	461a      	mov	r2, r3
 801da46:	79fb      	ldrb	r3, [r7, #7]
 801da48:	429a      	cmp	r2, r3
 801da4a:	d0a0      	beq.n	801d98e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801da4c:	2300      	movs	r3, #0
}
 801da4e:	4618      	mov	r0, r3
 801da50:	3710      	adds	r7, #16
 801da52:	46bd      	mov	sp, r7
 801da54:	bd80      	pop	{r7, pc}
	...

0801da58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801da58:	b480      	push	{r7}
 801da5a:	b097      	sub	sp, #92	@ 0x5c
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	60f8      	str	r0, [r7, #12]
 801da60:	60b9      	str	r1, [r7, #8]
 801da62:	4613      	mov	r3, r2
 801da64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801da66:	68fb      	ldr	r3, [r7, #12]
 801da68:	68ba      	ldr	r2, [r7, #8]
 801da6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	88fa      	ldrh	r2, [r7, #6]
 801da70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	88fa      	ldrh	r2, [r7, #6]
 801da78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	2200      	movs	r2, #0
 801da80:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	689b      	ldr	r3, [r3, #8]
 801da86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801da8a:	d10e      	bne.n	801daaa <UART_Start_Receive_IT+0x52>
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	691b      	ldr	r3, [r3, #16]
 801da90:	2b00      	cmp	r3, #0
 801da92:	d105      	bne.n	801daa0 <UART_Start_Receive_IT+0x48>
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801da9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801da9e:	e02d      	b.n	801dafc <UART_Start_Receive_IT+0xa4>
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	22ff      	movs	r2, #255	@ 0xff
 801daa4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801daa8:	e028      	b.n	801dafc <UART_Start_Receive_IT+0xa4>
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	689b      	ldr	r3, [r3, #8]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d10d      	bne.n	801dace <UART_Start_Receive_IT+0x76>
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	691b      	ldr	r3, [r3, #16]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d104      	bne.n	801dac4 <UART_Start_Receive_IT+0x6c>
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	22ff      	movs	r2, #255	@ 0xff
 801dabe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801dac2:	e01b      	b.n	801dafc <UART_Start_Receive_IT+0xa4>
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	227f      	movs	r2, #127	@ 0x7f
 801dac8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801dacc:	e016      	b.n	801dafc <UART_Start_Receive_IT+0xa4>
 801dace:	68fb      	ldr	r3, [r7, #12]
 801dad0:	689b      	ldr	r3, [r3, #8]
 801dad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dad6:	d10d      	bne.n	801daf4 <UART_Start_Receive_IT+0x9c>
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	691b      	ldr	r3, [r3, #16]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d104      	bne.n	801daea <UART_Start_Receive_IT+0x92>
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	227f      	movs	r2, #127	@ 0x7f
 801dae4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801dae8:	e008      	b.n	801dafc <UART_Start_Receive_IT+0xa4>
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	223f      	movs	r2, #63	@ 0x3f
 801daee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801daf2:	e003      	b.n	801dafc <UART_Start_Receive_IT+0xa4>
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	2200      	movs	r2, #0
 801daf8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	2200      	movs	r2, #0
 801db00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	2222      	movs	r2, #34	@ 0x22
 801db08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	3308      	adds	r3, #8
 801db12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db16:	e853 3f00 	ldrex	r3, [r3]
 801db1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db1e:	f043 0301 	orr.w	r3, r3, #1
 801db22:	657b      	str	r3, [r7, #84]	@ 0x54
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	3308      	adds	r3, #8
 801db2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801db2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801db2e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801db32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801db34:	e841 2300 	strex	r3, r2, [r1]
 801db38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801db3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d1e5      	bne.n	801db0c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	689b      	ldr	r3, [r3, #8]
 801db44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801db48:	d107      	bne.n	801db5a <UART_Start_Receive_IT+0x102>
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	691b      	ldr	r3, [r3, #16]
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d103      	bne.n	801db5a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	4a21      	ldr	r2, [pc, #132]	@ (801dbdc <UART_Start_Receive_IT+0x184>)
 801db56:	669a      	str	r2, [r3, #104]	@ 0x68
 801db58:	e002      	b.n	801db60 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	4a20      	ldr	r2, [pc, #128]	@ (801dbe0 <UART_Start_Receive_IT+0x188>)
 801db5e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	691b      	ldr	r3, [r3, #16]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d019      	beq.n	801db9c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db70:	e853 3f00 	ldrex	r3, [r3]
 801db74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801db76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db78:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801db7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	461a      	mov	r2, r3
 801db84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801db86:	637b      	str	r3, [r7, #52]	@ 0x34
 801db88:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801db8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801db8e:	e841 2300 	strex	r3, r2, [r1]
 801db92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801db94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db96:	2b00      	cmp	r3, #0
 801db98:	d1e6      	bne.n	801db68 <UART_Start_Receive_IT+0x110>
 801db9a:	e018      	b.n	801dbce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801db9c:	68fb      	ldr	r3, [r7, #12]
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dba2:	697b      	ldr	r3, [r7, #20]
 801dba4:	e853 3f00 	ldrex	r3, [r3]
 801dba8:	613b      	str	r3, [r7, #16]
   return(result);
 801dbaa:	693b      	ldr	r3, [r7, #16]
 801dbac:	f043 0320 	orr.w	r3, r3, #32
 801dbb0:	653b      	str	r3, [r7, #80]	@ 0x50
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	461a      	mov	r2, r3
 801dbb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dbba:	623b      	str	r3, [r7, #32]
 801dbbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dbbe:	69f9      	ldr	r1, [r7, #28]
 801dbc0:	6a3a      	ldr	r2, [r7, #32]
 801dbc2:	e841 2300 	strex	r3, r2, [r1]
 801dbc6:	61bb      	str	r3, [r7, #24]
   return(result);
 801dbc8:	69bb      	ldr	r3, [r7, #24]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d1e6      	bne.n	801db9c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801dbce:	2300      	movs	r3, #0
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	375c      	adds	r7, #92	@ 0x5c
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbda:	4770      	bx	lr
 801dbdc:	0801dee9 	.word	0x0801dee9
 801dbe0:	0801dd2d 	.word	0x0801dd2d

0801dbe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801dbe4:	b480      	push	{r7}
 801dbe6:	b095      	sub	sp, #84	@ 0x54
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dbf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dbf4:	e853 3f00 	ldrex	r3, [r3]
 801dbf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801dc00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	461a      	mov	r2, r3
 801dc08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dc0a:	643b      	str	r3, [r7, #64]	@ 0x40
 801dc0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801dc10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801dc12:	e841 2300 	strex	r3, r2, [r1]
 801dc16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801dc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d1e6      	bne.n	801dbec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	3308      	adds	r3, #8
 801dc24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc26:	6a3b      	ldr	r3, [r7, #32]
 801dc28:	e853 3f00 	ldrex	r3, [r3]
 801dc2c:	61fb      	str	r3, [r7, #28]
   return(result);
 801dc2e:	69fb      	ldr	r3, [r7, #28]
 801dc30:	f023 0301 	bic.w	r3, r3, #1
 801dc34:	64bb      	str	r3, [r7, #72]	@ 0x48
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	3308      	adds	r3, #8
 801dc3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801dc3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801dc40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801dc44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dc46:	e841 2300 	strex	r3, r2, [r1]
 801dc4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801dc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d1e5      	bne.n	801dc1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc56:	2b01      	cmp	r3, #1
 801dc58:	d118      	bne.n	801dc8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	e853 3f00 	ldrex	r3, [r3]
 801dc66:	60bb      	str	r3, [r7, #8]
   return(result);
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	f023 0310 	bic.w	r3, r3, #16
 801dc6e:	647b      	str	r3, [r7, #68]	@ 0x44
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	461a      	mov	r2, r3
 801dc76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dc78:	61bb      	str	r3, [r7, #24]
 801dc7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc7c:	6979      	ldr	r1, [r7, #20]
 801dc7e:	69ba      	ldr	r2, [r7, #24]
 801dc80:	e841 2300 	strex	r3, r2, [r1]
 801dc84:	613b      	str	r3, [r7, #16]
   return(result);
 801dc86:	693b      	ldr	r3, [r7, #16]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d1e6      	bne.n	801dc5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	2220      	movs	r2, #32
 801dc90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	2200      	movs	r2, #0
 801dc98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dca0:	bf00      	nop
 801dca2:	3754      	adds	r7, #84	@ 0x54
 801dca4:	46bd      	mov	sp, r7
 801dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcaa:	4770      	bx	lr

0801dcac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801dcac:	b580      	push	{r7, lr}
 801dcae:	b084      	sub	sp, #16
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	2200      	movs	r2, #0
 801dcbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	2200      	movs	r2, #0
 801dcc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801dcca:	68f8      	ldr	r0, [r7, #12]
 801dccc:	f7ff fa9c 	bl	801d208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801dcd0:	bf00      	nop
 801dcd2:	3710      	adds	r7, #16
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	bd80      	pop	{r7, pc}

0801dcd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b088      	sub	sp, #32
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	e853 3f00 	ldrex	r3, [r3]
 801dcec:	60bb      	str	r3, [r7, #8]
   return(result);
 801dcee:	68bb      	ldr	r3, [r7, #8]
 801dcf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dcf4:	61fb      	str	r3, [r7, #28]
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	461a      	mov	r2, r3
 801dcfc:	69fb      	ldr	r3, [r7, #28]
 801dcfe:	61bb      	str	r3, [r7, #24]
 801dd00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dd02:	6979      	ldr	r1, [r7, #20]
 801dd04:	69ba      	ldr	r2, [r7, #24]
 801dd06:	e841 2300 	strex	r3, r2, [r1]
 801dd0a:	613b      	str	r3, [r7, #16]
   return(result);
 801dd0c:	693b      	ldr	r3, [r7, #16]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d1e6      	bne.n	801dce0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	2220      	movs	r2, #32
 801dd16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	2200      	movs	r2, #0
 801dd1c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801dd1e:	6878      	ldr	r0, [r7, #4]
 801dd20:	f7ff fa68 	bl	801d1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801dd24:	bf00      	nop
 801dd26:	3720      	adds	r7, #32
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	bd80      	pop	{r7, pc}

0801dd2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801dd2c:	b580      	push	{r7, lr}
 801dd2e:	b09c      	sub	sp, #112	@ 0x70
 801dd30:	af00      	add	r7, sp, #0
 801dd32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801dd3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dd44:	2b22      	cmp	r3, #34	@ 0x22
 801dd46:	f040 80be 	bne.w	801dec6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801dd54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801dd58:	b2d9      	uxtb	r1, r3
 801dd5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801dd5e:	b2da      	uxtb	r2, r3
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dd64:	400a      	ands	r2, r1
 801dd66:	b2d2      	uxtb	r2, r2
 801dd68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dd6e:	1c5a      	adds	r2, r3, #1
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801dd7a:	b29b      	uxth	r3, r3
 801dd7c:	3b01      	subs	r3, #1
 801dd7e:	b29a      	uxth	r2, r3
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	f040 80a3 	bne.w	801deda <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dd9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dd9c:	e853 3f00 	ldrex	r3, [r3]
 801dda0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801dda2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dda4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801dda8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	461a      	mov	r2, r3
 801ddb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ddb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ddb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ddb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ddb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ddba:	e841 2300 	strex	r3, r2, [r1]
 801ddbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801ddc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d1e6      	bne.n	801dd94 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	3308      	adds	r3, #8
 801ddcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ddce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ddd0:	e853 3f00 	ldrex	r3, [r3]
 801ddd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ddd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ddd8:	f023 0301 	bic.w	r3, r3, #1
 801dddc:	667b      	str	r3, [r7, #100]	@ 0x64
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	3308      	adds	r3, #8
 801dde4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801dde6:	647a      	str	r2, [r7, #68]	@ 0x44
 801dde8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ddea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801ddec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ddee:	e841 2300 	strex	r3, r2, [r1]
 801ddf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801ddf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d1e5      	bne.n	801ddc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	2220      	movs	r2, #32
 801ddfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	2200      	movs	r2, #0
 801de06:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	2200      	movs	r2, #0
 801de0c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	4a34      	ldr	r2, [pc, #208]	@ (801dee4 <UART_RxISR_8BIT+0x1b8>)
 801de14:	4293      	cmp	r3, r2
 801de16:	d01f      	beq.n	801de58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	685b      	ldr	r3, [r3, #4]
 801de1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801de22:	2b00      	cmp	r3, #0
 801de24:	d018      	beq.n	801de58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de2e:	e853 3f00 	ldrex	r3, [r3]
 801de32:	623b      	str	r3, [r7, #32]
   return(result);
 801de34:	6a3b      	ldr	r3, [r7, #32]
 801de36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801de3a:	663b      	str	r3, [r7, #96]	@ 0x60
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	461a      	mov	r2, r3
 801de42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801de44:	633b      	str	r3, [r7, #48]	@ 0x30
 801de46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801de48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801de4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801de4c:	e841 2300 	strex	r3, r2, [r1]
 801de50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801de52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de54:	2b00      	cmp	r3, #0
 801de56:	d1e6      	bne.n	801de26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801de5c:	2b01      	cmp	r3, #1
 801de5e:	d12e      	bne.n	801debe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	2200      	movs	r2, #0
 801de64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801de6c:	693b      	ldr	r3, [r7, #16]
 801de6e:	e853 3f00 	ldrex	r3, [r3]
 801de72:	60fb      	str	r3, [r7, #12]
   return(result);
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	f023 0310 	bic.w	r3, r3, #16
 801de7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	461a      	mov	r2, r3
 801de82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801de84:	61fb      	str	r3, [r7, #28]
 801de86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801de88:	69b9      	ldr	r1, [r7, #24]
 801de8a:	69fa      	ldr	r2, [r7, #28]
 801de8c:	e841 2300 	strex	r3, r2, [r1]
 801de90:	617b      	str	r3, [r7, #20]
   return(result);
 801de92:	697b      	ldr	r3, [r7, #20]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d1e6      	bne.n	801de66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	69db      	ldr	r3, [r3, #28]
 801de9e:	f003 0310 	and.w	r3, r3, #16
 801dea2:	2b10      	cmp	r3, #16
 801dea4:	d103      	bne.n	801deae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	2210      	movs	r2, #16
 801deac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801deb4:	4619      	mov	r1, r3
 801deb6:	6878      	ldr	r0, [r7, #4]
 801deb8:	f7ff f9b0 	bl	801d21c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801debc:	e00d      	b.n	801deda <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801debe:	6878      	ldr	r0, [r7, #4]
 801dec0:	f7e3 fdba 	bl	8001a38 <HAL_UART_RxCpltCallback>
}
 801dec4:	e009      	b.n	801deda <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	8b1b      	ldrh	r3, [r3, #24]
 801decc:	b29a      	uxth	r2, r3
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	f042 0208 	orr.w	r2, r2, #8
 801ded6:	b292      	uxth	r2, r2
 801ded8:	831a      	strh	r2, [r3, #24]
}
 801deda:	bf00      	nop
 801dedc:	3770      	adds	r7, #112	@ 0x70
 801dede:	46bd      	mov	sp, r7
 801dee0:	bd80      	pop	{r7, pc}
 801dee2:	bf00      	nop
 801dee4:	40008000 	.word	0x40008000

0801dee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b09c      	sub	sp, #112	@ 0x70
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801def6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801df00:	2b22      	cmp	r3, #34	@ 0x22
 801df02:	f040 80be 	bne.w	801e082 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801df0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801df16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801df1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801df1e:	4013      	ands	r3, r2
 801df20:	b29a      	uxth	r2, r3
 801df22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801df24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df2a:	1c9a      	adds	r2, r3, #2
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801df36:	b29b      	uxth	r3, r3
 801df38:	3b01      	subs	r3, #1
 801df3a:	b29a      	uxth	r2, r3
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801df48:	b29b      	uxth	r3, r3
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	f040 80a3 	bne.w	801e096 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801df56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801df58:	e853 3f00 	ldrex	r3, [r3]
 801df5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801df5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801df60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801df64:	667b      	str	r3, [r7, #100]	@ 0x64
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	461a      	mov	r2, r3
 801df6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801df6e:	657b      	str	r3, [r7, #84]	@ 0x54
 801df70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801df72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801df74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801df76:	e841 2300 	strex	r3, r2, [r1]
 801df7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801df7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d1e6      	bne.n	801df50 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	3308      	adds	r3, #8
 801df88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801df8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df8c:	e853 3f00 	ldrex	r3, [r3]
 801df90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df94:	f023 0301 	bic.w	r3, r3, #1
 801df98:	663b      	str	r3, [r7, #96]	@ 0x60
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	3308      	adds	r3, #8
 801dfa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801dfa2:	643a      	str	r2, [r7, #64]	@ 0x40
 801dfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dfa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801dfa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801dfaa:	e841 2300 	strex	r3, r2, [r1]
 801dfae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801dfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d1e5      	bne.n	801df82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	2220      	movs	r2, #32
 801dfba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	2200      	movs	r2, #0
 801dfc8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	4a34      	ldr	r2, [pc, #208]	@ (801e0a0 <UART_RxISR_16BIT+0x1b8>)
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	d01f      	beq.n	801e014 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	685b      	ldr	r3, [r3, #4]
 801dfda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d018      	beq.n	801e014 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dfe8:	6a3b      	ldr	r3, [r7, #32]
 801dfea:	e853 3f00 	ldrex	r3, [r3]
 801dfee:	61fb      	str	r3, [r7, #28]
   return(result);
 801dff0:	69fb      	ldr	r3, [r7, #28]
 801dff2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801dff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	461a      	mov	r2, r3
 801dffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e002:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e008:	e841 2300 	strex	r3, r2, [r1]
 801e00c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801e00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e010:	2b00      	cmp	r3, #0
 801e012:	d1e6      	bne.n	801dfe2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e018:	2b01      	cmp	r3, #1
 801e01a:	d12e      	bne.n	801e07a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	2200      	movs	r2, #0
 801e020:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e028:	68fb      	ldr	r3, [r7, #12]
 801e02a:	e853 3f00 	ldrex	r3, [r3]
 801e02e:	60bb      	str	r3, [r7, #8]
   return(result);
 801e030:	68bb      	ldr	r3, [r7, #8]
 801e032:	f023 0310 	bic.w	r3, r3, #16
 801e036:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	461a      	mov	r2, r3
 801e03e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e040:	61bb      	str	r3, [r7, #24]
 801e042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e044:	6979      	ldr	r1, [r7, #20]
 801e046:	69ba      	ldr	r2, [r7, #24]
 801e048:	e841 2300 	strex	r3, r2, [r1]
 801e04c:	613b      	str	r3, [r7, #16]
   return(result);
 801e04e:	693b      	ldr	r3, [r7, #16]
 801e050:	2b00      	cmp	r3, #0
 801e052:	d1e6      	bne.n	801e022 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	69db      	ldr	r3, [r3, #28]
 801e05a:	f003 0310 	and.w	r3, r3, #16
 801e05e:	2b10      	cmp	r3, #16
 801e060:	d103      	bne.n	801e06a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	2210      	movs	r2, #16
 801e068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e070:	4619      	mov	r1, r3
 801e072:	6878      	ldr	r0, [r7, #4]
 801e074:	f7ff f8d2 	bl	801d21c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e078:	e00d      	b.n	801e096 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801e07a:	6878      	ldr	r0, [r7, #4]
 801e07c:	f7e3 fcdc 	bl	8001a38 <HAL_UART_RxCpltCallback>
}
 801e080:	e009      	b.n	801e096 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	8b1b      	ldrh	r3, [r3, #24]
 801e088:	b29a      	uxth	r2, r3
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	f042 0208 	orr.w	r2, r2, #8
 801e092:	b292      	uxth	r2, r2
 801e094:	831a      	strh	r2, [r3, #24]
}
 801e096:	bf00      	nop
 801e098:	3770      	adds	r7, #112	@ 0x70
 801e09a:	46bd      	mov	sp, r7
 801e09c:	bd80      	pop	{r7, pc}
 801e09e:	bf00      	nop
 801e0a0:	40008000 	.word	0x40008000

0801e0a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e0a4:	b480      	push	{r7}
 801e0a6:	b083      	sub	sp, #12
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e0ac:	bf00      	nop
 801e0ae:	370c      	adds	r7, #12
 801e0b0:	46bd      	mov	sp, r7
 801e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b6:	4770      	bx	lr

0801e0b8 <__cvt>:
 801e0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e0bc:	ec57 6b10 	vmov	r6, r7, d0
 801e0c0:	2f00      	cmp	r7, #0
 801e0c2:	460c      	mov	r4, r1
 801e0c4:	4619      	mov	r1, r3
 801e0c6:	463b      	mov	r3, r7
 801e0c8:	bfbb      	ittet	lt
 801e0ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801e0ce:	461f      	movlt	r7, r3
 801e0d0:	2300      	movge	r3, #0
 801e0d2:	232d      	movlt	r3, #45	@ 0x2d
 801e0d4:	700b      	strb	r3, [r1, #0]
 801e0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e0d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801e0dc:	4691      	mov	r9, r2
 801e0de:	f023 0820 	bic.w	r8, r3, #32
 801e0e2:	bfbc      	itt	lt
 801e0e4:	4632      	movlt	r2, r6
 801e0e6:	4616      	movlt	r6, r2
 801e0e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801e0ec:	d005      	beq.n	801e0fa <__cvt+0x42>
 801e0ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801e0f2:	d100      	bne.n	801e0f6 <__cvt+0x3e>
 801e0f4:	3401      	adds	r4, #1
 801e0f6:	2102      	movs	r1, #2
 801e0f8:	e000      	b.n	801e0fc <__cvt+0x44>
 801e0fa:	2103      	movs	r1, #3
 801e0fc:	ab03      	add	r3, sp, #12
 801e0fe:	9301      	str	r3, [sp, #4]
 801e100:	ab02      	add	r3, sp, #8
 801e102:	9300      	str	r3, [sp, #0]
 801e104:	ec47 6b10 	vmov	d0, r6, r7
 801e108:	4653      	mov	r3, sl
 801e10a:	4622      	mov	r2, r4
 801e10c:	f001 f824 	bl	801f158 <_dtoa_r>
 801e110:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801e114:	4605      	mov	r5, r0
 801e116:	d119      	bne.n	801e14c <__cvt+0x94>
 801e118:	f019 0f01 	tst.w	r9, #1
 801e11c:	d00e      	beq.n	801e13c <__cvt+0x84>
 801e11e:	eb00 0904 	add.w	r9, r0, r4
 801e122:	2200      	movs	r2, #0
 801e124:	2300      	movs	r3, #0
 801e126:	4630      	mov	r0, r6
 801e128:	4639      	mov	r1, r7
 801e12a:	f7e2 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 801e12e:	b108      	cbz	r0, 801e134 <__cvt+0x7c>
 801e130:	f8cd 900c 	str.w	r9, [sp, #12]
 801e134:	2230      	movs	r2, #48	@ 0x30
 801e136:	9b03      	ldr	r3, [sp, #12]
 801e138:	454b      	cmp	r3, r9
 801e13a:	d31e      	bcc.n	801e17a <__cvt+0xc2>
 801e13c:	9b03      	ldr	r3, [sp, #12]
 801e13e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e140:	1b5b      	subs	r3, r3, r5
 801e142:	4628      	mov	r0, r5
 801e144:	6013      	str	r3, [r2, #0]
 801e146:	b004      	add	sp, #16
 801e148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e14c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801e150:	eb00 0904 	add.w	r9, r0, r4
 801e154:	d1e5      	bne.n	801e122 <__cvt+0x6a>
 801e156:	7803      	ldrb	r3, [r0, #0]
 801e158:	2b30      	cmp	r3, #48	@ 0x30
 801e15a:	d10a      	bne.n	801e172 <__cvt+0xba>
 801e15c:	2200      	movs	r2, #0
 801e15e:	2300      	movs	r3, #0
 801e160:	4630      	mov	r0, r6
 801e162:	4639      	mov	r1, r7
 801e164:	f7e2 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 801e168:	b918      	cbnz	r0, 801e172 <__cvt+0xba>
 801e16a:	f1c4 0401 	rsb	r4, r4, #1
 801e16e:	f8ca 4000 	str.w	r4, [sl]
 801e172:	f8da 3000 	ldr.w	r3, [sl]
 801e176:	4499      	add	r9, r3
 801e178:	e7d3      	b.n	801e122 <__cvt+0x6a>
 801e17a:	1c59      	adds	r1, r3, #1
 801e17c:	9103      	str	r1, [sp, #12]
 801e17e:	701a      	strb	r2, [r3, #0]
 801e180:	e7d9      	b.n	801e136 <__cvt+0x7e>

0801e182 <__exponent>:
 801e182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e184:	2900      	cmp	r1, #0
 801e186:	bfba      	itte	lt
 801e188:	4249      	neglt	r1, r1
 801e18a:	232d      	movlt	r3, #45	@ 0x2d
 801e18c:	232b      	movge	r3, #43	@ 0x2b
 801e18e:	2909      	cmp	r1, #9
 801e190:	7002      	strb	r2, [r0, #0]
 801e192:	7043      	strb	r3, [r0, #1]
 801e194:	dd29      	ble.n	801e1ea <__exponent+0x68>
 801e196:	f10d 0307 	add.w	r3, sp, #7
 801e19a:	461d      	mov	r5, r3
 801e19c:	270a      	movs	r7, #10
 801e19e:	461a      	mov	r2, r3
 801e1a0:	fbb1 f6f7 	udiv	r6, r1, r7
 801e1a4:	fb07 1416 	mls	r4, r7, r6, r1
 801e1a8:	3430      	adds	r4, #48	@ 0x30
 801e1aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 801e1ae:	460c      	mov	r4, r1
 801e1b0:	2c63      	cmp	r4, #99	@ 0x63
 801e1b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801e1b6:	4631      	mov	r1, r6
 801e1b8:	dcf1      	bgt.n	801e19e <__exponent+0x1c>
 801e1ba:	3130      	adds	r1, #48	@ 0x30
 801e1bc:	1e94      	subs	r4, r2, #2
 801e1be:	f803 1c01 	strb.w	r1, [r3, #-1]
 801e1c2:	1c41      	adds	r1, r0, #1
 801e1c4:	4623      	mov	r3, r4
 801e1c6:	42ab      	cmp	r3, r5
 801e1c8:	d30a      	bcc.n	801e1e0 <__exponent+0x5e>
 801e1ca:	f10d 0309 	add.w	r3, sp, #9
 801e1ce:	1a9b      	subs	r3, r3, r2
 801e1d0:	42ac      	cmp	r4, r5
 801e1d2:	bf88      	it	hi
 801e1d4:	2300      	movhi	r3, #0
 801e1d6:	3302      	adds	r3, #2
 801e1d8:	4403      	add	r3, r0
 801e1da:	1a18      	subs	r0, r3, r0
 801e1dc:	b003      	add	sp, #12
 801e1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801e1e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801e1e8:	e7ed      	b.n	801e1c6 <__exponent+0x44>
 801e1ea:	2330      	movs	r3, #48	@ 0x30
 801e1ec:	3130      	adds	r1, #48	@ 0x30
 801e1ee:	7083      	strb	r3, [r0, #2]
 801e1f0:	70c1      	strb	r1, [r0, #3]
 801e1f2:	1d03      	adds	r3, r0, #4
 801e1f4:	e7f1      	b.n	801e1da <__exponent+0x58>
	...

0801e1f8 <_printf_float>:
 801e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1fc:	b08d      	sub	sp, #52	@ 0x34
 801e1fe:	460c      	mov	r4, r1
 801e200:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e204:	4616      	mov	r6, r2
 801e206:	461f      	mov	r7, r3
 801e208:	4605      	mov	r5, r0
 801e20a:	f000 fe95 	bl	801ef38 <_localeconv_r>
 801e20e:	6803      	ldr	r3, [r0, #0]
 801e210:	9304      	str	r3, [sp, #16]
 801e212:	4618      	mov	r0, r3
 801e214:	f7e2 f82c 	bl	8000270 <strlen>
 801e218:	2300      	movs	r3, #0
 801e21a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e21c:	f8d8 3000 	ldr.w	r3, [r8]
 801e220:	9005      	str	r0, [sp, #20]
 801e222:	3307      	adds	r3, #7
 801e224:	f023 0307 	bic.w	r3, r3, #7
 801e228:	f103 0208 	add.w	r2, r3, #8
 801e22c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801e230:	f8d4 b000 	ldr.w	fp, [r4]
 801e234:	f8c8 2000 	str.w	r2, [r8]
 801e238:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e23c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801e240:	9307      	str	r3, [sp, #28]
 801e242:	f8cd 8018 	str.w	r8, [sp, #24]
 801e246:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801e24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e24e:	4b9c      	ldr	r3, [pc, #624]	@ (801e4c0 <_printf_float+0x2c8>)
 801e250:	f04f 32ff 	mov.w	r2, #4294967295
 801e254:	f7e2 fc6a 	bl	8000b2c <__aeabi_dcmpun>
 801e258:	bb70      	cbnz	r0, 801e2b8 <_printf_float+0xc0>
 801e25a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e25e:	4b98      	ldr	r3, [pc, #608]	@ (801e4c0 <_printf_float+0x2c8>)
 801e260:	f04f 32ff 	mov.w	r2, #4294967295
 801e264:	f7e2 fc44 	bl	8000af0 <__aeabi_dcmple>
 801e268:	bb30      	cbnz	r0, 801e2b8 <_printf_float+0xc0>
 801e26a:	2200      	movs	r2, #0
 801e26c:	2300      	movs	r3, #0
 801e26e:	4640      	mov	r0, r8
 801e270:	4649      	mov	r1, r9
 801e272:	f7e2 fc33 	bl	8000adc <__aeabi_dcmplt>
 801e276:	b110      	cbz	r0, 801e27e <_printf_float+0x86>
 801e278:	232d      	movs	r3, #45	@ 0x2d
 801e27a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e27e:	4a91      	ldr	r2, [pc, #580]	@ (801e4c4 <_printf_float+0x2cc>)
 801e280:	4b91      	ldr	r3, [pc, #580]	@ (801e4c8 <_printf_float+0x2d0>)
 801e282:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801e286:	bf8c      	ite	hi
 801e288:	4690      	movhi	r8, r2
 801e28a:	4698      	movls	r8, r3
 801e28c:	2303      	movs	r3, #3
 801e28e:	6123      	str	r3, [r4, #16]
 801e290:	f02b 0304 	bic.w	r3, fp, #4
 801e294:	6023      	str	r3, [r4, #0]
 801e296:	f04f 0900 	mov.w	r9, #0
 801e29a:	9700      	str	r7, [sp, #0]
 801e29c:	4633      	mov	r3, r6
 801e29e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801e2a0:	4621      	mov	r1, r4
 801e2a2:	4628      	mov	r0, r5
 801e2a4:	f000 f9d2 	bl	801e64c <_printf_common>
 801e2a8:	3001      	adds	r0, #1
 801e2aa:	f040 808d 	bne.w	801e3c8 <_printf_float+0x1d0>
 801e2ae:	f04f 30ff 	mov.w	r0, #4294967295
 801e2b2:	b00d      	add	sp, #52	@ 0x34
 801e2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2b8:	4642      	mov	r2, r8
 801e2ba:	464b      	mov	r3, r9
 801e2bc:	4640      	mov	r0, r8
 801e2be:	4649      	mov	r1, r9
 801e2c0:	f7e2 fc34 	bl	8000b2c <__aeabi_dcmpun>
 801e2c4:	b140      	cbz	r0, 801e2d8 <_printf_float+0xe0>
 801e2c6:	464b      	mov	r3, r9
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	bfbc      	itt	lt
 801e2cc:	232d      	movlt	r3, #45	@ 0x2d
 801e2ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801e2d2:	4a7e      	ldr	r2, [pc, #504]	@ (801e4cc <_printf_float+0x2d4>)
 801e2d4:	4b7e      	ldr	r3, [pc, #504]	@ (801e4d0 <_printf_float+0x2d8>)
 801e2d6:	e7d4      	b.n	801e282 <_printf_float+0x8a>
 801e2d8:	6863      	ldr	r3, [r4, #4]
 801e2da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801e2de:	9206      	str	r2, [sp, #24]
 801e2e0:	1c5a      	adds	r2, r3, #1
 801e2e2:	d13b      	bne.n	801e35c <_printf_float+0x164>
 801e2e4:	2306      	movs	r3, #6
 801e2e6:	6063      	str	r3, [r4, #4]
 801e2e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	6022      	str	r2, [r4, #0]
 801e2f0:	9303      	str	r3, [sp, #12]
 801e2f2:	ab0a      	add	r3, sp, #40	@ 0x28
 801e2f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801e2f8:	ab09      	add	r3, sp, #36	@ 0x24
 801e2fa:	9300      	str	r3, [sp, #0]
 801e2fc:	6861      	ldr	r1, [r4, #4]
 801e2fe:	ec49 8b10 	vmov	d0, r8, r9
 801e302:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801e306:	4628      	mov	r0, r5
 801e308:	f7ff fed6 	bl	801e0b8 <__cvt>
 801e30c:	9b06      	ldr	r3, [sp, #24]
 801e30e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e310:	2b47      	cmp	r3, #71	@ 0x47
 801e312:	4680      	mov	r8, r0
 801e314:	d129      	bne.n	801e36a <_printf_float+0x172>
 801e316:	1cc8      	adds	r0, r1, #3
 801e318:	db02      	blt.n	801e320 <_printf_float+0x128>
 801e31a:	6863      	ldr	r3, [r4, #4]
 801e31c:	4299      	cmp	r1, r3
 801e31e:	dd41      	ble.n	801e3a4 <_printf_float+0x1ac>
 801e320:	f1aa 0a02 	sub.w	sl, sl, #2
 801e324:	fa5f fa8a 	uxtb.w	sl, sl
 801e328:	3901      	subs	r1, #1
 801e32a:	4652      	mov	r2, sl
 801e32c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801e330:	9109      	str	r1, [sp, #36]	@ 0x24
 801e332:	f7ff ff26 	bl	801e182 <__exponent>
 801e336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e338:	1813      	adds	r3, r2, r0
 801e33a:	2a01      	cmp	r2, #1
 801e33c:	4681      	mov	r9, r0
 801e33e:	6123      	str	r3, [r4, #16]
 801e340:	dc02      	bgt.n	801e348 <_printf_float+0x150>
 801e342:	6822      	ldr	r2, [r4, #0]
 801e344:	07d2      	lsls	r2, r2, #31
 801e346:	d501      	bpl.n	801e34c <_printf_float+0x154>
 801e348:	3301      	adds	r3, #1
 801e34a:	6123      	str	r3, [r4, #16]
 801e34c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801e350:	2b00      	cmp	r3, #0
 801e352:	d0a2      	beq.n	801e29a <_printf_float+0xa2>
 801e354:	232d      	movs	r3, #45	@ 0x2d
 801e356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e35a:	e79e      	b.n	801e29a <_printf_float+0xa2>
 801e35c:	9a06      	ldr	r2, [sp, #24]
 801e35e:	2a47      	cmp	r2, #71	@ 0x47
 801e360:	d1c2      	bne.n	801e2e8 <_printf_float+0xf0>
 801e362:	2b00      	cmp	r3, #0
 801e364:	d1c0      	bne.n	801e2e8 <_printf_float+0xf0>
 801e366:	2301      	movs	r3, #1
 801e368:	e7bd      	b.n	801e2e6 <_printf_float+0xee>
 801e36a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801e36e:	d9db      	bls.n	801e328 <_printf_float+0x130>
 801e370:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801e374:	d118      	bne.n	801e3a8 <_printf_float+0x1b0>
 801e376:	2900      	cmp	r1, #0
 801e378:	6863      	ldr	r3, [r4, #4]
 801e37a:	dd0b      	ble.n	801e394 <_printf_float+0x19c>
 801e37c:	6121      	str	r1, [r4, #16]
 801e37e:	b913      	cbnz	r3, 801e386 <_printf_float+0x18e>
 801e380:	6822      	ldr	r2, [r4, #0]
 801e382:	07d0      	lsls	r0, r2, #31
 801e384:	d502      	bpl.n	801e38c <_printf_float+0x194>
 801e386:	3301      	adds	r3, #1
 801e388:	440b      	add	r3, r1
 801e38a:	6123      	str	r3, [r4, #16]
 801e38c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801e38e:	f04f 0900 	mov.w	r9, #0
 801e392:	e7db      	b.n	801e34c <_printf_float+0x154>
 801e394:	b913      	cbnz	r3, 801e39c <_printf_float+0x1a4>
 801e396:	6822      	ldr	r2, [r4, #0]
 801e398:	07d2      	lsls	r2, r2, #31
 801e39a:	d501      	bpl.n	801e3a0 <_printf_float+0x1a8>
 801e39c:	3302      	adds	r3, #2
 801e39e:	e7f4      	b.n	801e38a <_printf_float+0x192>
 801e3a0:	2301      	movs	r3, #1
 801e3a2:	e7f2      	b.n	801e38a <_printf_float+0x192>
 801e3a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801e3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3aa:	4299      	cmp	r1, r3
 801e3ac:	db05      	blt.n	801e3ba <_printf_float+0x1c2>
 801e3ae:	6823      	ldr	r3, [r4, #0]
 801e3b0:	6121      	str	r1, [r4, #16]
 801e3b2:	07d8      	lsls	r0, r3, #31
 801e3b4:	d5ea      	bpl.n	801e38c <_printf_float+0x194>
 801e3b6:	1c4b      	adds	r3, r1, #1
 801e3b8:	e7e7      	b.n	801e38a <_printf_float+0x192>
 801e3ba:	2900      	cmp	r1, #0
 801e3bc:	bfd4      	ite	le
 801e3be:	f1c1 0202 	rsble	r2, r1, #2
 801e3c2:	2201      	movgt	r2, #1
 801e3c4:	4413      	add	r3, r2
 801e3c6:	e7e0      	b.n	801e38a <_printf_float+0x192>
 801e3c8:	6823      	ldr	r3, [r4, #0]
 801e3ca:	055a      	lsls	r2, r3, #21
 801e3cc:	d407      	bmi.n	801e3de <_printf_float+0x1e6>
 801e3ce:	6923      	ldr	r3, [r4, #16]
 801e3d0:	4642      	mov	r2, r8
 801e3d2:	4631      	mov	r1, r6
 801e3d4:	4628      	mov	r0, r5
 801e3d6:	47b8      	blx	r7
 801e3d8:	3001      	adds	r0, #1
 801e3da:	d12b      	bne.n	801e434 <_printf_float+0x23c>
 801e3dc:	e767      	b.n	801e2ae <_printf_float+0xb6>
 801e3de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801e3e2:	f240 80dd 	bls.w	801e5a0 <_printf_float+0x3a8>
 801e3e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	f7e2 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 801e3f2:	2800      	cmp	r0, #0
 801e3f4:	d033      	beq.n	801e45e <_printf_float+0x266>
 801e3f6:	4a37      	ldr	r2, [pc, #220]	@ (801e4d4 <_printf_float+0x2dc>)
 801e3f8:	2301      	movs	r3, #1
 801e3fa:	4631      	mov	r1, r6
 801e3fc:	4628      	mov	r0, r5
 801e3fe:	47b8      	blx	r7
 801e400:	3001      	adds	r0, #1
 801e402:	f43f af54 	beq.w	801e2ae <_printf_float+0xb6>
 801e406:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801e40a:	4543      	cmp	r3, r8
 801e40c:	db02      	blt.n	801e414 <_printf_float+0x21c>
 801e40e:	6823      	ldr	r3, [r4, #0]
 801e410:	07d8      	lsls	r0, r3, #31
 801e412:	d50f      	bpl.n	801e434 <_printf_float+0x23c>
 801e414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e418:	4631      	mov	r1, r6
 801e41a:	4628      	mov	r0, r5
 801e41c:	47b8      	blx	r7
 801e41e:	3001      	adds	r0, #1
 801e420:	f43f af45 	beq.w	801e2ae <_printf_float+0xb6>
 801e424:	f04f 0900 	mov.w	r9, #0
 801e428:	f108 38ff 	add.w	r8, r8, #4294967295
 801e42c:	f104 0a1a 	add.w	sl, r4, #26
 801e430:	45c8      	cmp	r8, r9
 801e432:	dc09      	bgt.n	801e448 <_printf_float+0x250>
 801e434:	6823      	ldr	r3, [r4, #0]
 801e436:	079b      	lsls	r3, r3, #30
 801e438:	f100 8103 	bmi.w	801e642 <_printf_float+0x44a>
 801e43c:	68e0      	ldr	r0, [r4, #12]
 801e43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e440:	4298      	cmp	r0, r3
 801e442:	bfb8      	it	lt
 801e444:	4618      	movlt	r0, r3
 801e446:	e734      	b.n	801e2b2 <_printf_float+0xba>
 801e448:	2301      	movs	r3, #1
 801e44a:	4652      	mov	r2, sl
 801e44c:	4631      	mov	r1, r6
 801e44e:	4628      	mov	r0, r5
 801e450:	47b8      	blx	r7
 801e452:	3001      	adds	r0, #1
 801e454:	f43f af2b 	beq.w	801e2ae <_printf_float+0xb6>
 801e458:	f109 0901 	add.w	r9, r9, #1
 801e45c:	e7e8      	b.n	801e430 <_printf_float+0x238>
 801e45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e460:	2b00      	cmp	r3, #0
 801e462:	dc39      	bgt.n	801e4d8 <_printf_float+0x2e0>
 801e464:	4a1b      	ldr	r2, [pc, #108]	@ (801e4d4 <_printf_float+0x2dc>)
 801e466:	2301      	movs	r3, #1
 801e468:	4631      	mov	r1, r6
 801e46a:	4628      	mov	r0, r5
 801e46c:	47b8      	blx	r7
 801e46e:	3001      	adds	r0, #1
 801e470:	f43f af1d 	beq.w	801e2ae <_printf_float+0xb6>
 801e474:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801e478:	ea59 0303 	orrs.w	r3, r9, r3
 801e47c:	d102      	bne.n	801e484 <_printf_float+0x28c>
 801e47e:	6823      	ldr	r3, [r4, #0]
 801e480:	07d9      	lsls	r1, r3, #31
 801e482:	d5d7      	bpl.n	801e434 <_printf_float+0x23c>
 801e484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e488:	4631      	mov	r1, r6
 801e48a:	4628      	mov	r0, r5
 801e48c:	47b8      	blx	r7
 801e48e:	3001      	adds	r0, #1
 801e490:	f43f af0d 	beq.w	801e2ae <_printf_float+0xb6>
 801e494:	f04f 0a00 	mov.w	sl, #0
 801e498:	f104 0b1a 	add.w	fp, r4, #26
 801e49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e49e:	425b      	negs	r3, r3
 801e4a0:	4553      	cmp	r3, sl
 801e4a2:	dc01      	bgt.n	801e4a8 <_printf_float+0x2b0>
 801e4a4:	464b      	mov	r3, r9
 801e4a6:	e793      	b.n	801e3d0 <_printf_float+0x1d8>
 801e4a8:	2301      	movs	r3, #1
 801e4aa:	465a      	mov	r2, fp
 801e4ac:	4631      	mov	r1, r6
 801e4ae:	4628      	mov	r0, r5
 801e4b0:	47b8      	blx	r7
 801e4b2:	3001      	adds	r0, #1
 801e4b4:	f43f aefb 	beq.w	801e2ae <_printf_float+0xb6>
 801e4b8:	f10a 0a01 	add.w	sl, sl, #1
 801e4bc:	e7ee      	b.n	801e49c <_printf_float+0x2a4>
 801e4be:	bf00      	nop
 801e4c0:	7fefffff 	.word	0x7fefffff
 801e4c4:	0802213c 	.word	0x0802213c
 801e4c8:	08022138 	.word	0x08022138
 801e4cc:	08022144 	.word	0x08022144
 801e4d0:	08022140 	.word	0x08022140
 801e4d4:	08022148 	.word	0x08022148
 801e4d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e4da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e4de:	4553      	cmp	r3, sl
 801e4e0:	bfa8      	it	ge
 801e4e2:	4653      	movge	r3, sl
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	4699      	mov	r9, r3
 801e4e8:	dc36      	bgt.n	801e558 <_printf_float+0x360>
 801e4ea:	f04f 0b00 	mov.w	fp, #0
 801e4ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e4f2:	f104 021a 	add.w	r2, r4, #26
 801e4f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801e4f8:	9306      	str	r3, [sp, #24]
 801e4fa:	eba3 0309 	sub.w	r3, r3, r9
 801e4fe:	455b      	cmp	r3, fp
 801e500:	dc31      	bgt.n	801e566 <_printf_float+0x36e>
 801e502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e504:	459a      	cmp	sl, r3
 801e506:	dc3a      	bgt.n	801e57e <_printf_float+0x386>
 801e508:	6823      	ldr	r3, [r4, #0]
 801e50a:	07da      	lsls	r2, r3, #31
 801e50c:	d437      	bmi.n	801e57e <_printf_float+0x386>
 801e50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e510:	ebaa 0903 	sub.w	r9, sl, r3
 801e514:	9b06      	ldr	r3, [sp, #24]
 801e516:	ebaa 0303 	sub.w	r3, sl, r3
 801e51a:	4599      	cmp	r9, r3
 801e51c:	bfa8      	it	ge
 801e51e:	4699      	movge	r9, r3
 801e520:	f1b9 0f00 	cmp.w	r9, #0
 801e524:	dc33      	bgt.n	801e58e <_printf_float+0x396>
 801e526:	f04f 0800 	mov.w	r8, #0
 801e52a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e52e:	f104 0b1a 	add.w	fp, r4, #26
 801e532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e534:	ebaa 0303 	sub.w	r3, sl, r3
 801e538:	eba3 0309 	sub.w	r3, r3, r9
 801e53c:	4543      	cmp	r3, r8
 801e53e:	f77f af79 	ble.w	801e434 <_printf_float+0x23c>
 801e542:	2301      	movs	r3, #1
 801e544:	465a      	mov	r2, fp
 801e546:	4631      	mov	r1, r6
 801e548:	4628      	mov	r0, r5
 801e54a:	47b8      	blx	r7
 801e54c:	3001      	adds	r0, #1
 801e54e:	f43f aeae 	beq.w	801e2ae <_printf_float+0xb6>
 801e552:	f108 0801 	add.w	r8, r8, #1
 801e556:	e7ec      	b.n	801e532 <_printf_float+0x33a>
 801e558:	4642      	mov	r2, r8
 801e55a:	4631      	mov	r1, r6
 801e55c:	4628      	mov	r0, r5
 801e55e:	47b8      	blx	r7
 801e560:	3001      	adds	r0, #1
 801e562:	d1c2      	bne.n	801e4ea <_printf_float+0x2f2>
 801e564:	e6a3      	b.n	801e2ae <_printf_float+0xb6>
 801e566:	2301      	movs	r3, #1
 801e568:	4631      	mov	r1, r6
 801e56a:	4628      	mov	r0, r5
 801e56c:	9206      	str	r2, [sp, #24]
 801e56e:	47b8      	blx	r7
 801e570:	3001      	adds	r0, #1
 801e572:	f43f ae9c 	beq.w	801e2ae <_printf_float+0xb6>
 801e576:	9a06      	ldr	r2, [sp, #24]
 801e578:	f10b 0b01 	add.w	fp, fp, #1
 801e57c:	e7bb      	b.n	801e4f6 <_printf_float+0x2fe>
 801e57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e582:	4631      	mov	r1, r6
 801e584:	4628      	mov	r0, r5
 801e586:	47b8      	blx	r7
 801e588:	3001      	adds	r0, #1
 801e58a:	d1c0      	bne.n	801e50e <_printf_float+0x316>
 801e58c:	e68f      	b.n	801e2ae <_printf_float+0xb6>
 801e58e:	9a06      	ldr	r2, [sp, #24]
 801e590:	464b      	mov	r3, r9
 801e592:	4442      	add	r2, r8
 801e594:	4631      	mov	r1, r6
 801e596:	4628      	mov	r0, r5
 801e598:	47b8      	blx	r7
 801e59a:	3001      	adds	r0, #1
 801e59c:	d1c3      	bne.n	801e526 <_printf_float+0x32e>
 801e59e:	e686      	b.n	801e2ae <_printf_float+0xb6>
 801e5a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e5a4:	f1ba 0f01 	cmp.w	sl, #1
 801e5a8:	dc01      	bgt.n	801e5ae <_printf_float+0x3b6>
 801e5aa:	07db      	lsls	r3, r3, #31
 801e5ac:	d536      	bpl.n	801e61c <_printf_float+0x424>
 801e5ae:	2301      	movs	r3, #1
 801e5b0:	4642      	mov	r2, r8
 801e5b2:	4631      	mov	r1, r6
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	47b8      	blx	r7
 801e5b8:	3001      	adds	r0, #1
 801e5ba:	f43f ae78 	beq.w	801e2ae <_printf_float+0xb6>
 801e5be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e5c2:	4631      	mov	r1, r6
 801e5c4:	4628      	mov	r0, r5
 801e5c6:	47b8      	blx	r7
 801e5c8:	3001      	adds	r0, #1
 801e5ca:	f43f ae70 	beq.w	801e2ae <_printf_float+0xb6>
 801e5ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e5d2:	2200      	movs	r2, #0
 801e5d4:	2300      	movs	r3, #0
 801e5d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e5da:	f7e2 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 801e5de:	b9c0      	cbnz	r0, 801e612 <_printf_float+0x41a>
 801e5e0:	4653      	mov	r3, sl
 801e5e2:	f108 0201 	add.w	r2, r8, #1
 801e5e6:	4631      	mov	r1, r6
 801e5e8:	4628      	mov	r0, r5
 801e5ea:	47b8      	blx	r7
 801e5ec:	3001      	adds	r0, #1
 801e5ee:	d10c      	bne.n	801e60a <_printf_float+0x412>
 801e5f0:	e65d      	b.n	801e2ae <_printf_float+0xb6>
 801e5f2:	2301      	movs	r3, #1
 801e5f4:	465a      	mov	r2, fp
 801e5f6:	4631      	mov	r1, r6
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	47b8      	blx	r7
 801e5fc:	3001      	adds	r0, #1
 801e5fe:	f43f ae56 	beq.w	801e2ae <_printf_float+0xb6>
 801e602:	f108 0801 	add.w	r8, r8, #1
 801e606:	45d0      	cmp	r8, sl
 801e608:	dbf3      	blt.n	801e5f2 <_printf_float+0x3fa>
 801e60a:	464b      	mov	r3, r9
 801e60c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e610:	e6df      	b.n	801e3d2 <_printf_float+0x1da>
 801e612:	f04f 0800 	mov.w	r8, #0
 801e616:	f104 0b1a 	add.w	fp, r4, #26
 801e61a:	e7f4      	b.n	801e606 <_printf_float+0x40e>
 801e61c:	2301      	movs	r3, #1
 801e61e:	4642      	mov	r2, r8
 801e620:	e7e1      	b.n	801e5e6 <_printf_float+0x3ee>
 801e622:	2301      	movs	r3, #1
 801e624:	464a      	mov	r2, r9
 801e626:	4631      	mov	r1, r6
 801e628:	4628      	mov	r0, r5
 801e62a:	47b8      	blx	r7
 801e62c:	3001      	adds	r0, #1
 801e62e:	f43f ae3e 	beq.w	801e2ae <_printf_float+0xb6>
 801e632:	f108 0801 	add.w	r8, r8, #1
 801e636:	68e3      	ldr	r3, [r4, #12]
 801e638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e63a:	1a5b      	subs	r3, r3, r1
 801e63c:	4543      	cmp	r3, r8
 801e63e:	dcf0      	bgt.n	801e622 <_printf_float+0x42a>
 801e640:	e6fc      	b.n	801e43c <_printf_float+0x244>
 801e642:	f04f 0800 	mov.w	r8, #0
 801e646:	f104 0919 	add.w	r9, r4, #25
 801e64a:	e7f4      	b.n	801e636 <_printf_float+0x43e>

0801e64c <_printf_common>:
 801e64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e650:	4616      	mov	r6, r2
 801e652:	4698      	mov	r8, r3
 801e654:	688a      	ldr	r2, [r1, #8]
 801e656:	690b      	ldr	r3, [r1, #16]
 801e658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e65c:	4293      	cmp	r3, r2
 801e65e:	bfb8      	it	lt
 801e660:	4613      	movlt	r3, r2
 801e662:	6033      	str	r3, [r6, #0]
 801e664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e668:	4607      	mov	r7, r0
 801e66a:	460c      	mov	r4, r1
 801e66c:	b10a      	cbz	r2, 801e672 <_printf_common+0x26>
 801e66e:	3301      	adds	r3, #1
 801e670:	6033      	str	r3, [r6, #0]
 801e672:	6823      	ldr	r3, [r4, #0]
 801e674:	0699      	lsls	r1, r3, #26
 801e676:	bf42      	ittt	mi
 801e678:	6833      	ldrmi	r3, [r6, #0]
 801e67a:	3302      	addmi	r3, #2
 801e67c:	6033      	strmi	r3, [r6, #0]
 801e67e:	6825      	ldr	r5, [r4, #0]
 801e680:	f015 0506 	ands.w	r5, r5, #6
 801e684:	d106      	bne.n	801e694 <_printf_common+0x48>
 801e686:	f104 0a19 	add.w	sl, r4, #25
 801e68a:	68e3      	ldr	r3, [r4, #12]
 801e68c:	6832      	ldr	r2, [r6, #0]
 801e68e:	1a9b      	subs	r3, r3, r2
 801e690:	42ab      	cmp	r3, r5
 801e692:	dc26      	bgt.n	801e6e2 <_printf_common+0x96>
 801e694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e698:	6822      	ldr	r2, [r4, #0]
 801e69a:	3b00      	subs	r3, #0
 801e69c:	bf18      	it	ne
 801e69e:	2301      	movne	r3, #1
 801e6a0:	0692      	lsls	r2, r2, #26
 801e6a2:	d42b      	bmi.n	801e6fc <_printf_common+0xb0>
 801e6a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e6a8:	4641      	mov	r1, r8
 801e6aa:	4638      	mov	r0, r7
 801e6ac:	47c8      	blx	r9
 801e6ae:	3001      	adds	r0, #1
 801e6b0:	d01e      	beq.n	801e6f0 <_printf_common+0xa4>
 801e6b2:	6823      	ldr	r3, [r4, #0]
 801e6b4:	6922      	ldr	r2, [r4, #16]
 801e6b6:	f003 0306 	and.w	r3, r3, #6
 801e6ba:	2b04      	cmp	r3, #4
 801e6bc:	bf02      	ittt	eq
 801e6be:	68e5      	ldreq	r5, [r4, #12]
 801e6c0:	6833      	ldreq	r3, [r6, #0]
 801e6c2:	1aed      	subeq	r5, r5, r3
 801e6c4:	68a3      	ldr	r3, [r4, #8]
 801e6c6:	bf0c      	ite	eq
 801e6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e6cc:	2500      	movne	r5, #0
 801e6ce:	4293      	cmp	r3, r2
 801e6d0:	bfc4      	itt	gt
 801e6d2:	1a9b      	subgt	r3, r3, r2
 801e6d4:	18ed      	addgt	r5, r5, r3
 801e6d6:	2600      	movs	r6, #0
 801e6d8:	341a      	adds	r4, #26
 801e6da:	42b5      	cmp	r5, r6
 801e6dc:	d11a      	bne.n	801e714 <_printf_common+0xc8>
 801e6de:	2000      	movs	r0, #0
 801e6e0:	e008      	b.n	801e6f4 <_printf_common+0xa8>
 801e6e2:	2301      	movs	r3, #1
 801e6e4:	4652      	mov	r2, sl
 801e6e6:	4641      	mov	r1, r8
 801e6e8:	4638      	mov	r0, r7
 801e6ea:	47c8      	blx	r9
 801e6ec:	3001      	adds	r0, #1
 801e6ee:	d103      	bne.n	801e6f8 <_printf_common+0xac>
 801e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6f8:	3501      	adds	r5, #1
 801e6fa:	e7c6      	b.n	801e68a <_printf_common+0x3e>
 801e6fc:	18e1      	adds	r1, r4, r3
 801e6fe:	1c5a      	adds	r2, r3, #1
 801e700:	2030      	movs	r0, #48	@ 0x30
 801e702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e706:	4422      	add	r2, r4
 801e708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e70c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e710:	3302      	adds	r3, #2
 801e712:	e7c7      	b.n	801e6a4 <_printf_common+0x58>
 801e714:	2301      	movs	r3, #1
 801e716:	4622      	mov	r2, r4
 801e718:	4641      	mov	r1, r8
 801e71a:	4638      	mov	r0, r7
 801e71c:	47c8      	blx	r9
 801e71e:	3001      	adds	r0, #1
 801e720:	d0e6      	beq.n	801e6f0 <_printf_common+0xa4>
 801e722:	3601      	adds	r6, #1
 801e724:	e7d9      	b.n	801e6da <_printf_common+0x8e>
	...

0801e728 <_printf_i>:
 801e728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e72c:	7e0f      	ldrb	r7, [r1, #24]
 801e72e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e730:	2f78      	cmp	r7, #120	@ 0x78
 801e732:	4691      	mov	r9, r2
 801e734:	4680      	mov	r8, r0
 801e736:	460c      	mov	r4, r1
 801e738:	469a      	mov	sl, r3
 801e73a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e73e:	d807      	bhi.n	801e750 <_printf_i+0x28>
 801e740:	2f62      	cmp	r7, #98	@ 0x62
 801e742:	d80a      	bhi.n	801e75a <_printf_i+0x32>
 801e744:	2f00      	cmp	r7, #0
 801e746:	f000 80d1 	beq.w	801e8ec <_printf_i+0x1c4>
 801e74a:	2f58      	cmp	r7, #88	@ 0x58
 801e74c:	f000 80b8 	beq.w	801e8c0 <_printf_i+0x198>
 801e750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e758:	e03a      	b.n	801e7d0 <_printf_i+0xa8>
 801e75a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e75e:	2b15      	cmp	r3, #21
 801e760:	d8f6      	bhi.n	801e750 <_printf_i+0x28>
 801e762:	a101      	add	r1, pc, #4	@ (adr r1, 801e768 <_printf_i+0x40>)
 801e764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e768:	0801e7c1 	.word	0x0801e7c1
 801e76c:	0801e7d5 	.word	0x0801e7d5
 801e770:	0801e751 	.word	0x0801e751
 801e774:	0801e751 	.word	0x0801e751
 801e778:	0801e751 	.word	0x0801e751
 801e77c:	0801e751 	.word	0x0801e751
 801e780:	0801e7d5 	.word	0x0801e7d5
 801e784:	0801e751 	.word	0x0801e751
 801e788:	0801e751 	.word	0x0801e751
 801e78c:	0801e751 	.word	0x0801e751
 801e790:	0801e751 	.word	0x0801e751
 801e794:	0801e8d3 	.word	0x0801e8d3
 801e798:	0801e7ff 	.word	0x0801e7ff
 801e79c:	0801e88d 	.word	0x0801e88d
 801e7a0:	0801e751 	.word	0x0801e751
 801e7a4:	0801e751 	.word	0x0801e751
 801e7a8:	0801e8f5 	.word	0x0801e8f5
 801e7ac:	0801e751 	.word	0x0801e751
 801e7b0:	0801e7ff 	.word	0x0801e7ff
 801e7b4:	0801e751 	.word	0x0801e751
 801e7b8:	0801e751 	.word	0x0801e751
 801e7bc:	0801e895 	.word	0x0801e895
 801e7c0:	6833      	ldr	r3, [r6, #0]
 801e7c2:	1d1a      	adds	r2, r3, #4
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	6032      	str	r2, [r6, #0]
 801e7c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e7cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e7d0:	2301      	movs	r3, #1
 801e7d2:	e09c      	b.n	801e90e <_printf_i+0x1e6>
 801e7d4:	6833      	ldr	r3, [r6, #0]
 801e7d6:	6820      	ldr	r0, [r4, #0]
 801e7d8:	1d19      	adds	r1, r3, #4
 801e7da:	6031      	str	r1, [r6, #0]
 801e7dc:	0606      	lsls	r6, r0, #24
 801e7de:	d501      	bpl.n	801e7e4 <_printf_i+0xbc>
 801e7e0:	681d      	ldr	r5, [r3, #0]
 801e7e2:	e003      	b.n	801e7ec <_printf_i+0xc4>
 801e7e4:	0645      	lsls	r5, r0, #25
 801e7e6:	d5fb      	bpl.n	801e7e0 <_printf_i+0xb8>
 801e7e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e7ec:	2d00      	cmp	r5, #0
 801e7ee:	da03      	bge.n	801e7f8 <_printf_i+0xd0>
 801e7f0:	232d      	movs	r3, #45	@ 0x2d
 801e7f2:	426d      	negs	r5, r5
 801e7f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e7f8:	4858      	ldr	r0, [pc, #352]	@ (801e95c <_printf_i+0x234>)
 801e7fa:	230a      	movs	r3, #10
 801e7fc:	e011      	b.n	801e822 <_printf_i+0xfa>
 801e7fe:	6821      	ldr	r1, [r4, #0]
 801e800:	6833      	ldr	r3, [r6, #0]
 801e802:	0608      	lsls	r0, r1, #24
 801e804:	f853 5b04 	ldr.w	r5, [r3], #4
 801e808:	d402      	bmi.n	801e810 <_printf_i+0xe8>
 801e80a:	0649      	lsls	r1, r1, #25
 801e80c:	bf48      	it	mi
 801e80e:	b2ad      	uxthmi	r5, r5
 801e810:	2f6f      	cmp	r7, #111	@ 0x6f
 801e812:	4852      	ldr	r0, [pc, #328]	@ (801e95c <_printf_i+0x234>)
 801e814:	6033      	str	r3, [r6, #0]
 801e816:	bf14      	ite	ne
 801e818:	230a      	movne	r3, #10
 801e81a:	2308      	moveq	r3, #8
 801e81c:	2100      	movs	r1, #0
 801e81e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e822:	6866      	ldr	r6, [r4, #4]
 801e824:	60a6      	str	r6, [r4, #8]
 801e826:	2e00      	cmp	r6, #0
 801e828:	db05      	blt.n	801e836 <_printf_i+0x10e>
 801e82a:	6821      	ldr	r1, [r4, #0]
 801e82c:	432e      	orrs	r6, r5
 801e82e:	f021 0104 	bic.w	r1, r1, #4
 801e832:	6021      	str	r1, [r4, #0]
 801e834:	d04b      	beq.n	801e8ce <_printf_i+0x1a6>
 801e836:	4616      	mov	r6, r2
 801e838:	fbb5 f1f3 	udiv	r1, r5, r3
 801e83c:	fb03 5711 	mls	r7, r3, r1, r5
 801e840:	5dc7      	ldrb	r7, [r0, r7]
 801e842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e846:	462f      	mov	r7, r5
 801e848:	42bb      	cmp	r3, r7
 801e84a:	460d      	mov	r5, r1
 801e84c:	d9f4      	bls.n	801e838 <_printf_i+0x110>
 801e84e:	2b08      	cmp	r3, #8
 801e850:	d10b      	bne.n	801e86a <_printf_i+0x142>
 801e852:	6823      	ldr	r3, [r4, #0]
 801e854:	07df      	lsls	r7, r3, #31
 801e856:	d508      	bpl.n	801e86a <_printf_i+0x142>
 801e858:	6923      	ldr	r3, [r4, #16]
 801e85a:	6861      	ldr	r1, [r4, #4]
 801e85c:	4299      	cmp	r1, r3
 801e85e:	bfde      	ittt	le
 801e860:	2330      	movle	r3, #48	@ 0x30
 801e862:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e866:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e86a:	1b92      	subs	r2, r2, r6
 801e86c:	6122      	str	r2, [r4, #16]
 801e86e:	f8cd a000 	str.w	sl, [sp]
 801e872:	464b      	mov	r3, r9
 801e874:	aa03      	add	r2, sp, #12
 801e876:	4621      	mov	r1, r4
 801e878:	4640      	mov	r0, r8
 801e87a:	f7ff fee7 	bl	801e64c <_printf_common>
 801e87e:	3001      	adds	r0, #1
 801e880:	d14a      	bne.n	801e918 <_printf_i+0x1f0>
 801e882:	f04f 30ff 	mov.w	r0, #4294967295
 801e886:	b004      	add	sp, #16
 801e888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e88c:	6823      	ldr	r3, [r4, #0]
 801e88e:	f043 0320 	orr.w	r3, r3, #32
 801e892:	6023      	str	r3, [r4, #0]
 801e894:	4832      	ldr	r0, [pc, #200]	@ (801e960 <_printf_i+0x238>)
 801e896:	2778      	movs	r7, #120	@ 0x78
 801e898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e89c:	6823      	ldr	r3, [r4, #0]
 801e89e:	6831      	ldr	r1, [r6, #0]
 801e8a0:	061f      	lsls	r7, r3, #24
 801e8a2:	f851 5b04 	ldr.w	r5, [r1], #4
 801e8a6:	d402      	bmi.n	801e8ae <_printf_i+0x186>
 801e8a8:	065f      	lsls	r7, r3, #25
 801e8aa:	bf48      	it	mi
 801e8ac:	b2ad      	uxthmi	r5, r5
 801e8ae:	6031      	str	r1, [r6, #0]
 801e8b0:	07d9      	lsls	r1, r3, #31
 801e8b2:	bf44      	itt	mi
 801e8b4:	f043 0320 	orrmi.w	r3, r3, #32
 801e8b8:	6023      	strmi	r3, [r4, #0]
 801e8ba:	b11d      	cbz	r5, 801e8c4 <_printf_i+0x19c>
 801e8bc:	2310      	movs	r3, #16
 801e8be:	e7ad      	b.n	801e81c <_printf_i+0xf4>
 801e8c0:	4826      	ldr	r0, [pc, #152]	@ (801e95c <_printf_i+0x234>)
 801e8c2:	e7e9      	b.n	801e898 <_printf_i+0x170>
 801e8c4:	6823      	ldr	r3, [r4, #0]
 801e8c6:	f023 0320 	bic.w	r3, r3, #32
 801e8ca:	6023      	str	r3, [r4, #0]
 801e8cc:	e7f6      	b.n	801e8bc <_printf_i+0x194>
 801e8ce:	4616      	mov	r6, r2
 801e8d0:	e7bd      	b.n	801e84e <_printf_i+0x126>
 801e8d2:	6833      	ldr	r3, [r6, #0]
 801e8d4:	6825      	ldr	r5, [r4, #0]
 801e8d6:	6961      	ldr	r1, [r4, #20]
 801e8d8:	1d18      	adds	r0, r3, #4
 801e8da:	6030      	str	r0, [r6, #0]
 801e8dc:	062e      	lsls	r6, r5, #24
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	d501      	bpl.n	801e8e6 <_printf_i+0x1be>
 801e8e2:	6019      	str	r1, [r3, #0]
 801e8e4:	e002      	b.n	801e8ec <_printf_i+0x1c4>
 801e8e6:	0668      	lsls	r0, r5, #25
 801e8e8:	d5fb      	bpl.n	801e8e2 <_printf_i+0x1ba>
 801e8ea:	8019      	strh	r1, [r3, #0]
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	6123      	str	r3, [r4, #16]
 801e8f0:	4616      	mov	r6, r2
 801e8f2:	e7bc      	b.n	801e86e <_printf_i+0x146>
 801e8f4:	6833      	ldr	r3, [r6, #0]
 801e8f6:	1d1a      	adds	r2, r3, #4
 801e8f8:	6032      	str	r2, [r6, #0]
 801e8fa:	681e      	ldr	r6, [r3, #0]
 801e8fc:	6862      	ldr	r2, [r4, #4]
 801e8fe:	2100      	movs	r1, #0
 801e900:	4630      	mov	r0, r6
 801e902:	f7e1 fc65 	bl	80001d0 <memchr>
 801e906:	b108      	cbz	r0, 801e90c <_printf_i+0x1e4>
 801e908:	1b80      	subs	r0, r0, r6
 801e90a:	6060      	str	r0, [r4, #4]
 801e90c:	6863      	ldr	r3, [r4, #4]
 801e90e:	6123      	str	r3, [r4, #16]
 801e910:	2300      	movs	r3, #0
 801e912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e916:	e7aa      	b.n	801e86e <_printf_i+0x146>
 801e918:	6923      	ldr	r3, [r4, #16]
 801e91a:	4632      	mov	r2, r6
 801e91c:	4649      	mov	r1, r9
 801e91e:	4640      	mov	r0, r8
 801e920:	47d0      	blx	sl
 801e922:	3001      	adds	r0, #1
 801e924:	d0ad      	beq.n	801e882 <_printf_i+0x15a>
 801e926:	6823      	ldr	r3, [r4, #0]
 801e928:	079b      	lsls	r3, r3, #30
 801e92a:	d413      	bmi.n	801e954 <_printf_i+0x22c>
 801e92c:	68e0      	ldr	r0, [r4, #12]
 801e92e:	9b03      	ldr	r3, [sp, #12]
 801e930:	4298      	cmp	r0, r3
 801e932:	bfb8      	it	lt
 801e934:	4618      	movlt	r0, r3
 801e936:	e7a6      	b.n	801e886 <_printf_i+0x15e>
 801e938:	2301      	movs	r3, #1
 801e93a:	4632      	mov	r2, r6
 801e93c:	4649      	mov	r1, r9
 801e93e:	4640      	mov	r0, r8
 801e940:	47d0      	blx	sl
 801e942:	3001      	adds	r0, #1
 801e944:	d09d      	beq.n	801e882 <_printf_i+0x15a>
 801e946:	3501      	adds	r5, #1
 801e948:	68e3      	ldr	r3, [r4, #12]
 801e94a:	9903      	ldr	r1, [sp, #12]
 801e94c:	1a5b      	subs	r3, r3, r1
 801e94e:	42ab      	cmp	r3, r5
 801e950:	dcf2      	bgt.n	801e938 <_printf_i+0x210>
 801e952:	e7eb      	b.n	801e92c <_printf_i+0x204>
 801e954:	2500      	movs	r5, #0
 801e956:	f104 0619 	add.w	r6, r4, #25
 801e95a:	e7f5      	b.n	801e948 <_printf_i+0x220>
 801e95c:	0802214a 	.word	0x0802214a
 801e960:	0802215b 	.word	0x0802215b

0801e964 <__sflush_r>:
 801e964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e96c:	0716      	lsls	r6, r2, #28
 801e96e:	4605      	mov	r5, r0
 801e970:	460c      	mov	r4, r1
 801e972:	d454      	bmi.n	801ea1e <__sflush_r+0xba>
 801e974:	684b      	ldr	r3, [r1, #4]
 801e976:	2b00      	cmp	r3, #0
 801e978:	dc02      	bgt.n	801e980 <__sflush_r+0x1c>
 801e97a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	dd48      	ble.n	801ea12 <__sflush_r+0xae>
 801e980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e982:	2e00      	cmp	r6, #0
 801e984:	d045      	beq.n	801ea12 <__sflush_r+0xae>
 801e986:	2300      	movs	r3, #0
 801e988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e98c:	682f      	ldr	r7, [r5, #0]
 801e98e:	6a21      	ldr	r1, [r4, #32]
 801e990:	602b      	str	r3, [r5, #0]
 801e992:	d030      	beq.n	801e9f6 <__sflush_r+0x92>
 801e994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e996:	89a3      	ldrh	r3, [r4, #12]
 801e998:	0759      	lsls	r1, r3, #29
 801e99a:	d505      	bpl.n	801e9a8 <__sflush_r+0x44>
 801e99c:	6863      	ldr	r3, [r4, #4]
 801e99e:	1ad2      	subs	r2, r2, r3
 801e9a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e9a2:	b10b      	cbz	r3, 801e9a8 <__sflush_r+0x44>
 801e9a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e9a6:	1ad2      	subs	r2, r2, r3
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e9ac:	6a21      	ldr	r1, [r4, #32]
 801e9ae:	4628      	mov	r0, r5
 801e9b0:	47b0      	blx	r6
 801e9b2:	1c43      	adds	r3, r0, #1
 801e9b4:	89a3      	ldrh	r3, [r4, #12]
 801e9b6:	d106      	bne.n	801e9c6 <__sflush_r+0x62>
 801e9b8:	6829      	ldr	r1, [r5, #0]
 801e9ba:	291d      	cmp	r1, #29
 801e9bc:	d82b      	bhi.n	801ea16 <__sflush_r+0xb2>
 801e9be:	4a2a      	ldr	r2, [pc, #168]	@ (801ea68 <__sflush_r+0x104>)
 801e9c0:	40ca      	lsrs	r2, r1
 801e9c2:	07d6      	lsls	r6, r2, #31
 801e9c4:	d527      	bpl.n	801ea16 <__sflush_r+0xb2>
 801e9c6:	2200      	movs	r2, #0
 801e9c8:	6062      	str	r2, [r4, #4]
 801e9ca:	04d9      	lsls	r1, r3, #19
 801e9cc:	6922      	ldr	r2, [r4, #16]
 801e9ce:	6022      	str	r2, [r4, #0]
 801e9d0:	d504      	bpl.n	801e9dc <__sflush_r+0x78>
 801e9d2:	1c42      	adds	r2, r0, #1
 801e9d4:	d101      	bne.n	801e9da <__sflush_r+0x76>
 801e9d6:	682b      	ldr	r3, [r5, #0]
 801e9d8:	b903      	cbnz	r3, 801e9dc <__sflush_r+0x78>
 801e9da:	6560      	str	r0, [r4, #84]	@ 0x54
 801e9dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e9de:	602f      	str	r7, [r5, #0]
 801e9e0:	b1b9      	cbz	r1, 801ea12 <__sflush_r+0xae>
 801e9e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e9e6:	4299      	cmp	r1, r3
 801e9e8:	d002      	beq.n	801e9f0 <__sflush_r+0x8c>
 801e9ea:	4628      	mov	r0, r5
 801e9ec:	f001 f984 	bl	801fcf8 <_free_r>
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e9f4:	e00d      	b.n	801ea12 <__sflush_r+0xae>
 801e9f6:	2301      	movs	r3, #1
 801e9f8:	4628      	mov	r0, r5
 801e9fa:	47b0      	blx	r6
 801e9fc:	4602      	mov	r2, r0
 801e9fe:	1c50      	adds	r0, r2, #1
 801ea00:	d1c9      	bne.n	801e996 <__sflush_r+0x32>
 801ea02:	682b      	ldr	r3, [r5, #0]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d0c6      	beq.n	801e996 <__sflush_r+0x32>
 801ea08:	2b1d      	cmp	r3, #29
 801ea0a:	d001      	beq.n	801ea10 <__sflush_r+0xac>
 801ea0c:	2b16      	cmp	r3, #22
 801ea0e:	d11e      	bne.n	801ea4e <__sflush_r+0xea>
 801ea10:	602f      	str	r7, [r5, #0]
 801ea12:	2000      	movs	r0, #0
 801ea14:	e022      	b.n	801ea5c <__sflush_r+0xf8>
 801ea16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ea1a:	b21b      	sxth	r3, r3
 801ea1c:	e01b      	b.n	801ea56 <__sflush_r+0xf2>
 801ea1e:	690f      	ldr	r7, [r1, #16]
 801ea20:	2f00      	cmp	r7, #0
 801ea22:	d0f6      	beq.n	801ea12 <__sflush_r+0xae>
 801ea24:	0793      	lsls	r3, r2, #30
 801ea26:	680e      	ldr	r6, [r1, #0]
 801ea28:	bf08      	it	eq
 801ea2a:	694b      	ldreq	r3, [r1, #20]
 801ea2c:	600f      	str	r7, [r1, #0]
 801ea2e:	bf18      	it	ne
 801ea30:	2300      	movne	r3, #0
 801ea32:	eba6 0807 	sub.w	r8, r6, r7
 801ea36:	608b      	str	r3, [r1, #8]
 801ea38:	f1b8 0f00 	cmp.w	r8, #0
 801ea3c:	dde9      	ble.n	801ea12 <__sflush_r+0xae>
 801ea3e:	6a21      	ldr	r1, [r4, #32]
 801ea40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ea42:	4643      	mov	r3, r8
 801ea44:	463a      	mov	r2, r7
 801ea46:	4628      	mov	r0, r5
 801ea48:	47b0      	blx	r6
 801ea4a:	2800      	cmp	r0, #0
 801ea4c:	dc08      	bgt.n	801ea60 <__sflush_r+0xfc>
 801ea4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ea56:	81a3      	strh	r3, [r4, #12]
 801ea58:	f04f 30ff 	mov.w	r0, #4294967295
 801ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea60:	4407      	add	r7, r0
 801ea62:	eba8 0800 	sub.w	r8, r8, r0
 801ea66:	e7e7      	b.n	801ea38 <__sflush_r+0xd4>
 801ea68:	20400001 	.word	0x20400001

0801ea6c <_fflush_r>:
 801ea6c:	b538      	push	{r3, r4, r5, lr}
 801ea6e:	690b      	ldr	r3, [r1, #16]
 801ea70:	4605      	mov	r5, r0
 801ea72:	460c      	mov	r4, r1
 801ea74:	b913      	cbnz	r3, 801ea7c <_fflush_r+0x10>
 801ea76:	2500      	movs	r5, #0
 801ea78:	4628      	mov	r0, r5
 801ea7a:	bd38      	pop	{r3, r4, r5, pc}
 801ea7c:	b118      	cbz	r0, 801ea86 <_fflush_r+0x1a>
 801ea7e:	6a03      	ldr	r3, [r0, #32]
 801ea80:	b90b      	cbnz	r3, 801ea86 <_fflush_r+0x1a>
 801ea82:	f000 f8bb 	bl	801ebfc <__sinit>
 801ea86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d0f3      	beq.n	801ea76 <_fflush_r+0xa>
 801ea8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ea90:	07d0      	lsls	r0, r2, #31
 801ea92:	d404      	bmi.n	801ea9e <_fflush_r+0x32>
 801ea94:	0599      	lsls	r1, r3, #22
 801ea96:	d402      	bmi.n	801ea9e <_fflush_r+0x32>
 801ea98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea9a:	f000 fac2 	bl	801f022 <__retarget_lock_acquire_recursive>
 801ea9e:	4628      	mov	r0, r5
 801eaa0:	4621      	mov	r1, r4
 801eaa2:	f7ff ff5f 	bl	801e964 <__sflush_r>
 801eaa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eaa8:	07da      	lsls	r2, r3, #31
 801eaaa:	4605      	mov	r5, r0
 801eaac:	d4e4      	bmi.n	801ea78 <_fflush_r+0xc>
 801eaae:	89a3      	ldrh	r3, [r4, #12]
 801eab0:	059b      	lsls	r3, r3, #22
 801eab2:	d4e1      	bmi.n	801ea78 <_fflush_r+0xc>
 801eab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eab6:	f000 fab5 	bl	801f024 <__retarget_lock_release_recursive>
 801eaba:	e7dd      	b.n	801ea78 <_fflush_r+0xc>

0801eabc <fflush>:
 801eabc:	4601      	mov	r1, r0
 801eabe:	b920      	cbnz	r0, 801eaca <fflush+0xe>
 801eac0:	4a04      	ldr	r2, [pc, #16]	@ (801ead4 <fflush+0x18>)
 801eac2:	4905      	ldr	r1, [pc, #20]	@ (801ead8 <fflush+0x1c>)
 801eac4:	4805      	ldr	r0, [pc, #20]	@ (801eadc <fflush+0x20>)
 801eac6:	f000 b8b1 	b.w	801ec2c <_fwalk_sglue>
 801eaca:	4b05      	ldr	r3, [pc, #20]	@ (801eae0 <fflush+0x24>)
 801eacc:	6818      	ldr	r0, [r3, #0]
 801eace:	f7ff bfcd 	b.w	801ea6c <_fflush_r>
 801ead2:	bf00      	nop
 801ead4:	20000064 	.word	0x20000064
 801ead8:	0801ea6d 	.word	0x0801ea6d
 801eadc:	20000074 	.word	0x20000074
 801eae0:	20000070 	.word	0x20000070

0801eae4 <std>:
 801eae4:	2300      	movs	r3, #0
 801eae6:	b510      	push	{r4, lr}
 801eae8:	4604      	mov	r4, r0
 801eaea:	e9c0 3300 	strd	r3, r3, [r0]
 801eaee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eaf2:	6083      	str	r3, [r0, #8]
 801eaf4:	8181      	strh	r1, [r0, #12]
 801eaf6:	6643      	str	r3, [r0, #100]	@ 0x64
 801eaf8:	81c2      	strh	r2, [r0, #14]
 801eafa:	6183      	str	r3, [r0, #24]
 801eafc:	4619      	mov	r1, r3
 801eafe:	2208      	movs	r2, #8
 801eb00:	305c      	adds	r0, #92	@ 0x5c
 801eb02:	f000 fa11 	bl	801ef28 <memset>
 801eb06:	4b0d      	ldr	r3, [pc, #52]	@ (801eb3c <std+0x58>)
 801eb08:	6263      	str	r3, [r4, #36]	@ 0x24
 801eb0a:	4b0d      	ldr	r3, [pc, #52]	@ (801eb40 <std+0x5c>)
 801eb0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801eb0e:	4b0d      	ldr	r3, [pc, #52]	@ (801eb44 <std+0x60>)
 801eb10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801eb12:	4b0d      	ldr	r3, [pc, #52]	@ (801eb48 <std+0x64>)
 801eb14:	6323      	str	r3, [r4, #48]	@ 0x30
 801eb16:	4b0d      	ldr	r3, [pc, #52]	@ (801eb4c <std+0x68>)
 801eb18:	6224      	str	r4, [r4, #32]
 801eb1a:	429c      	cmp	r4, r3
 801eb1c:	d006      	beq.n	801eb2c <std+0x48>
 801eb1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801eb22:	4294      	cmp	r4, r2
 801eb24:	d002      	beq.n	801eb2c <std+0x48>
 801eb26:	33d0      	adds	r3, #208	@ 0xd0
 801eb28:	429c      	cmp	r4, r3
 801eb2a:	d105      	bne.n	801eb38 <std+0x54>
 801eb2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801eb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb34:	f000 ba74 	b.w	801f020 <__retarget_lock_init_recursive>
 801eb38:	bd10      	pop	{r4, pc}
 801eb3a:	bf00      	nop
 801eb3c:	0801ed59 	.word	0x0801ed59
 801eb40:	0801ed7b 	.word	0x0801ed7b
 801eb44:	0801edb3 	.word	0x0801edb3
 801eb48:	0801edd7 	.word	0x0801edd7
 801eb4c:	20001898 	.word	0x20001898

0801eb50 <stdio_exit_handler>:
 801eb50:	4a02      	ldr	r2, [pc, #8]	@ (801eb5c <stdio_exit_handler+0xc>)
 801eb52:	4903      	ldr	r1, [pc, #12]	@ (801eb60 <stdio_exit_handler+0x10>)
 801eb54:	4803      	ldr	r0, [pc, #12]	@ (801eb64 <stdio_exit_handler+0x14>)
 801eb56:	f000 b869 	b.w	801ec2c <_fwalk_sglue>
 801eb5a:	bf00      	nop
 801eb5c:	20000064 	.word	0x20000064
 801eb60:	0801ea6d 	.word	0x0801ea6d
 801eb64:	20000074 	.word	0x20000074

0801eb68 <cleanup_stdio>:
 801eb68:	6841      	ldr	r1, [r0, #4]
 801eb6a:	4b0c      	ldr	r3, [pc, #48]	@ (801eb9c <cleanup_stdio+0x34>)
 801eb6c:	4299      	cmp	r1, r3
 801eb6e:	b510      	push	{r4, lr}
 801eb70:	4604      	mov	r4, r0
 801eb72:	d001      	beq.n	801eb78 <cleanup_stdio+0x10>
 801eb74:	f7ff ff7a 	bl	801ea6c <_fflush_r>
 801eb78:	68a1      	ldr	r1, [r4, #8]
 801eb7a:	4b09      	ldr	r3, [pc, #36]	@ (801eba0 <cleanup_stdio+0x38>)
 801eb7c:	4299      	cmp	r1, r3
 801eb7e:	d002      	beq.n	801eb86 <cleanup_stdio+0x1e>
 801eb80:	4620      	mov	r0, r4
 801eb82:	f7ff ff73 	bl	801ea6c <_fflush_r>
 801eb86:	68e1      	ldr	r1, [r4, #12]
 801eb88:	4b06      	ldr	r3, [pc, #24]	@ (801eba4 <cleanup_stdio+0x3c>)
 801eb8a:	4299      	cmp	r1, r3
 801eb8c:	d004      	beq.n	801eb98 <cleanup_stdio+0x30>
 801eb8e:	4620      	mov	r0, r4
 801eb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb94:	f7ff bf6a 	b.w	801ea6c <_fflush_r>
 801eb98:	bd10      	pop	{r4, pc}
 801eb9a:	bf00      	nop
 801eb9c:	20001898 	.word	0x20001898
 801eba0:	20001900 	.word	0x20001900
 801eba4:	20001968 	.word	0x20001968

0801eba8 <global_stdio_init.part.0>:
 801eba8:	b510      	push	{r4, lr}
 801ebaa:	4b0b      	ldr	r3, [pc, #44]	@ (801ebd8 <global_stdio_init.part.0+0x30>)
 801ebac:	4c0b      	ldr	r4, [pc, #44]	@ (801ebdc <global_stdio_init.part.0+0x34>)
 801ebae:	4a0c      	ldr	r2, [pc, #48]	@ (801ebe0 <global_stdio_init.part.0+0x38>)
 801ebb0:	601a      	str	r2, [r3, #0]
 801ebb2:	4620      	mov	r0, r4
 801ebb4:	2200      	movs	r2, #0
 801ebb6:	2104      	movs	r1, #4
 801ebb8:	f7ff ff94 	bl	801eae4 <std>
 801ebbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ebc0:	2201      	movs	r2, #1
 801ebc2:	2109      	movs	r1, #9
 801ebc4:	f7ff ff8e 	bl	801eae4 <std>
 801ebc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ebcc:	2202      	movs	r2, #2
 801ebce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebd2:	2112      	movs	r1, #18
 801ebd4:	f7ff bf86 	b.w	801eae4 <std>
 801ebd8:	200019d0 	.word	0x200019d0
 801ebdc:	20001898 	.word	0x20001898
 801ebe0:	0801eb51 	.word	0x0801eb51

0801ebe4 <__sfp_lock_acquire>:
 801ebe4:	4801      	ldr	r0, [pc, #4]	@ (801ebec <__sfp_lock_acquire+0x8>)
 801ebe6:	f000 ba1c 	b.w	801f022 <__retarget_lock_acquire_recursive>
 801ebea:	bf00      	nop
 801ebec:	200019d9 	.word	0x200019d9

0801ebf0 <__sfp_lock_release>:
 801ebf0:	4801      	ldr	r0, [pc, #4]	@ (801ebf8 <__sfp_lock_release+0x8>)
 801ebf2:	f000 ba17 	b.w	801f024 <__retarget_lock_release_recursive>
 801ebf6:	bf00      	nop
 801ebf8:	200019d9 	.word	0x200019d9

0801ebfc <__sinit>:
 801ebfc:	b510      	push	{r4, lr}
 801ebfe:	4604      	mov	r4, r0
 801ec00:	f7ff fff0 	bl	801ebe4 <__sfp_lock_acquire>
 801ec04:	6a23      	ldr	r3, [r4, #32]
 801ec06:	b11b      	cbz	r3, 801ec10 <__sinit+0x14>
 801ec08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec0c:	f7ff bff0 	b.w	801ebf0 <__sfp_lock_release>
 801ec10:	4b04      	ldr	r3, [pc, #16]	@ (801ec24 <__sinit+0x28>)
 801ec12:	6223      	str	r3, [r4, #32]
 801ec14:	4b04      	ldr	r3, [pc, #16]	@ (801ec28 <__sinit+0x2c>)
 801ec16:	681b      	ldr	r3, [r3, #0]
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	d1f5      	bne.n	801ec08 <__sinit+0xc>
 801ec1c:	f7ff ffc4 	bl	801eba8 <global_stdio_init.part.0>
 801ec20:	e7f2      	b.n	801ec08 <__sinit+0xc>
 801ec22:	bf00      	nop
 801ec24:	0801eb69 	.word	0x0801eb69
 801ec28:	200019d0 	.word	0x200019d0

0801ec2c <_fwalk_sglue>:
 801ec2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec30:	4607      	mov	r7, r0
 801ec32:	4688      	mov	r8, r1
 801ec34:	4614      	mov	r4, r2
 801ec36:	2600      	movs	r6, #0
 801ec38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ec3c:	f1b9 0901 	subs.w	r9, r9, #1
 801ec40:	d505      	bpl.n	801ec4e <_fwalk_sglue+0x22>
 801ec42:	6824      	ldr	r4, [r4, #0]
 801ec44:	2c00      	cmp	r4, #0
 801ec46:	d1f7      	bne.n	801ec38 <_fwalk_sglue+0xc>
 801ec48:	4630      	mov	r0, r6
 801ec4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec4e:	89ab      	ldrh	r3, [r5, #12]
 801ec50:	2b01      	cmp	r3, #1
 801ec52:	d907      	bls.n	801ec64 <_fwalk_sglue+0x38>
 801ec54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ec58:	3301      	adds	r3, #1
 801ec5a:	d003      	beq.n	801ec64 <_fwalk_sglue+0x38>
 801ec5c:	4629      	mov	r1, r5
 801ec5e:	4638      	mov	r0, r7
 801ec60:	47c0      	blx	r8
 801ec62:	4306      	orrs	r6, r0
 801ec64:	3568      	adds	r5, #104	@ 0x68
 801ec66:	e7e9      	b.n	801ec3c <_fwalk_sglue+0x10>

0801ec68 <iprintf>:
 801ec68:	b40f      	push	{r0, r1, r2, r3}
 801ec6a:	b507      	push	{r0, r1, r2, lr}
 801ec6c:	4906      	ldr	r1, [pc, #24]	@ (801ec88 <iprintf+0x20>)
 801ec6e:	ab04      	add	r3, sp, #16
 801ec70:	6808      	ldr	r0, [r1, #0]
 801ec72:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec76:	6881      	ldr	r1, [r0, #8]
 801ec78:	9301      	str	r3, [sp, #4]
 801ec7a:	f001 fce1 	bl	8020640 <_vfiprintf_r>
 801ec7e:	b003      	add	sp, #12
 801ec80:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec84:	b004      	add	sp, #16
 801ec86:	4770      	bx	lr
 801ec88:	20000070 	.word	0x20000070

0801ec8c <putchar>:
 801ec8c:	4b02      	ldr	r3, [pc, #8]	@ (801ec98 <putchar+0xc>)
 801ec8e:	4601      	mov	r1, r0
 801ec90:	6818      	ldr	r0, [r3, #0]
 801ec92:	6882      	ldr	r2, [r0, #8]
 801ec94:	f001 be4e 	b.w	8020934 <_putc_r>
 801ec98:	20000070 	.word	0x20000070

0801ec9c <_puts_r>:
 801ec9c:	6a03      	ldr	r3, [r0, #32]
 801ec9e:	b570      	push	{r4, r5, r6, lr}
 801eca0:	6884      	ldr	r4, [r0, #8]
 801eca2:	4605      	mov	r5, r0
 801eca4:	460e      	mov	r6, r1
 801eca6:	b90b      	cbnz	r3, 801ecac <_puts_r+0x10>
 801eca8:	f7ff ffa8 	bl	801ebfc <__sinit>
 801ecac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ecae:	07db      	lsls	r3, r3, #31
 801ecb0:	d405      	bmi.n	801ecbe <_puts_r+0x22>
 801ecb2:	89a3      	ldrh	r3, [r4, #12]
 801ecb4:	0598      	lsls	r0, r3, #22
 801ecb6:	d402      	bmi.n	801ecbe <_puts_r+0x22>
 801ecb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ecba:	f000 f9b2 	bl	801f022 <__retarget_lock_acquire_recursive>
 801ecbe:	89a3      	ldrh	r3, [r4, #12]
 801ecc0:	0719      	lsls	r1, r3, #28
 801ecc2:	d502      	bpl.n	801ecca <_puts_r+0x2e>
 801ecc4:	6923      	ldr	r3, [r4, #16]
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	d135      	bne.n	801ed36 <_puts_r+0x9a>
 801ecca:	4621      	mov	r1, r4
 801eccc:	4628      	mov	r0, r5
 801ecce:	f000 f8c5 	bl	801ee5c <__swsetup_r>
 801ecd2:	b380      	cbz	r0, 801ed36 <_puts_r+0x9a>
 801ecd4:	f04f 35ff 	mov.w	r5, #4294967295
 801ecd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ecda:	07da      	lsls	r2, r3, #31
 801ecdc:	d405      	bmi.n	801ecea <_puts_r+0x4e>
 801ecde:	89a3      	ldrh	r3, [r4, #12]
 801ece0:	059b      	lsls	r3, r3, #22
 801ece2:	d402      	bmi.n	801ecea <_puts_r+0x4e>
 801ece4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ece6:	f000 f99d 	bl	801f024 <__retarget_lock_release_recursive>
 801ecea:	4628      	mov	r0, r5
 801ecec:	bd70      	pop	{r4, r5, r6, pc}
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	da04      	bge.n	801ecfc <_puts_r+0x60>
 801ecf2:	69a2      	ldr	r2, [r4, #24]
 801ecf4:	429a      	cmp	r2, r3
 801ecf6:	dc17      	bgt.n	801ed28 <_puts_r+0x8c>
 801ecf8:	290a      	cmp	r1, #10
 801ecfa:	d015      	beq.n	801ed28 <_puts_r+0x8c>
 801ecfc:	6823      	ldr	r3, [r4, #0]
 801ecfe:	1c5a      	adds	r2, r3, #1
 801ed00:	6022      	str	r2, [r4, #0]
 801ed02:	7019      	strb	r1, [r3, #0]
 801ed04:	68a3      	ldr	r3, [r4, #8]
 801ed06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ed0a:	3b01      	subs	r3, #1
 801ed0c:	60a3      	str	r3, [r4, #8]
 801ed0e:	2900      	cmp	r1, #0
 801ed10:	d1ed      	bne.n	801ecee <_puts_r+0x52>
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	da11      	bge.n	801ed3a <_puts_r+0x9e>
 801ed16:	4622      	mov	r2, r4
 801ed18:	210a      	movs	r1, #10
 801ed1a:	4628      	mov	r0, r5
 801ed1c:	f000 f85f 	bl	801edde <__swbuf_r>
 801ed20:	3001      	adds	r0, #1
 801ed22:	d0d7      	beq.n	801ecd4 <_puts_r+0x38>
 801ed24:	250a      	movs	r5, #10
 801ed26:	e7d7      	b.n	801ecd8 <_puts_r+0x3c>
 801ed28:	4622      	mov	r2, r4
 801ed2a:	4628      	mov	r0, r5
 801ed2c:	f000 f857 	bl	801edde <__swbuf_r>
 801ed30:	3001      	adds	r0, #1
 801ed32:	d1e7      	bne.n	801ed04 <_puts_r+0x68>
 801ed34:	e7ce      	b.n	801ecd4 <_puts_r+0x38>
 801ed36:	3e01      	subs	r6, #1
 801ed38:	e7e4      	b.n	801ed04 <_puts_r+0x68>
 801ed3a:	6823      	ldr	r3, [r4, #0]
 801ed3c:	1c5a      	adds	r2, r3, #1
 801ed3e:	6022      	str	r2, [r4, #0]
 801ed40:	220a      	movs	r2, #10
 801ed42:	701a      	strb	r2, [r3, #0]
 801ed44:	e7ee      	b.n	801ed24 <_puts_r+0x88>
	...

0801ed48 <puts>:
 801ed48:	4b02      	ldr	r3, [pc, #8]	@ (801ed54 <puts+0xc>)
 801ed4a:	4601      	mov	r1, r0
 801ed4c:	6818      	ldr	r0, [r3, #0]
 801ed4e:	f7ff bfa5 	b.w	801ec9c <_puts_r>
 801ed52:	bf00      	nop
 801ed54:	20000070 	.word	0x20000070

0801ed58 <__sread>:
 801ed58:	b510      	push	{r4, lr}
 801ed5a:	460c      	mov	r4, r1
 801ed5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed60:	f000 f910 	bl	801ef84 <_read_r>
 801ed64:	2800      	cmp	r0, #0
 801ed66:	bfab      	itete	ge
 801ed68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ed6a:	89a3      	ldrhlt	r3, [r4, #12]
 801ed6c:	181b      	addge	r3, r3, r0
 801ed6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ed72:	bfac      	ite	ge
 801ed74:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ed76:	81a3      	strhlt	r3, [r4, #12]
 801ed78:	bd10      	pop	{r4, pc}

0801ed7a <__swrite>:
 801ed7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed7e:	461f      	mov	r7, r3
 801ed80:	898b      	ldrh	r3, [r1, #12]
 801ed82:	05db      	lsls	r3, r3, #23
 801ed84:	4605      	mov	r5, r0
 801ed86:	460c      	mov	r4, r1
 801ed88:	4616      	mov	r6, r2
 801ed8a:	d505      	bpl.n	801ed98 <__swrite+0x1e>
 801ed8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed90:	2302      	movs	r3, #2
 801ed92:	2200      	movs	r2, #0
 801ed94:	f000 f8e4 	bl	801ef60 <_lseek_r>
 801ed98:	89a3      	ldrh	r3, [r4, #12]
 801ed9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801eda2:	81a3      	strh	r3, [r4, #12]
 801eda4:	4632      	mov	r2, r6
 801eda6:	463b      	mov	r3, r7
 801eda8:	4628      	mov	r0, r5
 801edaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801edae:	f000 b8fb 	b.w	801efa8 <_write_r>

0801edb2 <__sseek>:
 801edb2:	b510      	push	{r4, lr}
 801edb4:	460c      	mov	r4, r1
 801edb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edba:	f000 f8d1 	bl	801ef60 <_lseek_r>
 801edbe:	1c43      	adds	r3, r0, #1
 801edc0:	89a3      	ldrh	r3, [r4, #12]
 801edc2:	bf15      	itete	ne
 801edc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801edc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801edca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801edce:	81a3      	strheq	r3, [r4, #12]
 801edd0:	bf18      	it	ne
 801edd2:	81a3      	strhne	r3, [r4, #12]
 801edd4:	bd10      	pop	{r4, pc}

0801edd6 <__sclose>:
 801edd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edda:	f000 b8b1 	b.w	801ef40 <_close_r>

0801edde <__swbuf_r>:
 801edde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ede0:	460e      	mov	r6, r1
 801ede2:	4614      	mov	r4, r2
 801ede4:	4605      	mov	r5, r0
 801ede6:	b118      	cbz	r0, 801edf0 <__swbuf_r+0x12>
 801ede8:	6a03      	ldr	r3, [r0, #32]
 801edea:	b90b      	cbnz	r3, 801edf0 <__swbuf_r+0x12>
 801edec:	f7ff ff06 	bl	801ebfc <__sinit>
 801edf0:	69a3      	ldr	r3, [r4, #24]
 801edf2:	60a3      	str	r3, [r4, #8]
 801edf4:	89a3      	ldrh	r3, [r4, #12]
 801edf6:	071a      	lsls	r2, r3, #28
 801edf8:	d501      	bpl.n	801edfe <__swbuf_r+0x20>
 801edfa:	6923      	ldr	r3, [r4, #16]
 801edfc:	b943      	cbnz	r3, 801ee10 <__swbuf_r+0x32>
 801edfe:	4621      	mov	r1, r4
 801ee00:	4628      	mov	r0, r5
 801ee02:	f000 f82b 	bl	801ee5c <__swsetup_r>
 801ee06:	b118      	cbz	r0, 801ee10 <__swbuf_r+0x32>
 801ee08:	f04f 37ff 	mov.w	r7, #4294967295
 801ee0c:	4638      	mov	r0, r7
 801ee0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee10:	6823      	ldr	r3, [r4, #0]
 801ee12:	6922      	ldr	r2, [r4, #16]
 801ee14:	1a98      	subs	r0, r3, r2
 801ee16:	6963      	ldr	r3, [r4, #20]
 801ee18:	b2f6      	uxtb	r6, r6
 801ee1a:	4283      	cmp	r3, r0
 801ee1c:	4637      	mov	r7, r6
 801ee1e:	dc05      	bgt.n	801ee2c <__swbuf_r+0x4e>
 801ee20:	4621      	mov	r1, r4
 801ee22:	4628      	mov	r0, r5
 801ee24:	f7ff fe22 	bl	801ea6c <_fflush_r>
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	d1ed      	bne.n	801ee08 <__swbuf_r+0x2a>
 801ee2c:	68a3      	ldr	r3, [r4, #8]
 801ee2e:	3b01      	subs	r3, #1
 801ee30:	60a3      	str	r3, [r4, #8]
 801ee32:	6823      	ldr	r3, [r4, #0]
 801ee34:	1c5a      	adds	r2, r3, #1
 801ee36:	6022      	str	r2, [r4, #0]
 801ee38:	701e      	strb	r6, [r3, #0]
 801ee3a:	6962      	ldr	r2, [r4, #20]
 801ee3c:	1c43      	adds	r3, r0, #1
 801ee3e:	429a      	cmp	r2, r3
 801ee40:	d004      	beq.n	801ee4c <__swbuf_r+0x6e>
 801ee42:	89a3      	ldrh	r3, [r4, #12]
 801ee44:	07db      	lsls	r3, r3, #31
 801ee46:	d5e1      	bpl.n	801ee0c <__swbuf_r+0x2e>
 801ee48:	2e0a      	cmp	r6, #10
 801ee4a:	d1df      	bne.n	801ee0c <__swbuf_r+0x2e>
 801ee4c:	4621      	mov	r1, r4
 801ee4e:	4628      	mov	r0, r5
 801ee50:	f7ff fe0c 	bl	801ea6c <_fflush_r>
 801ee54:	2800      	cmp	r0, #0
 801ee56:	d0d9      	beq.n	801ee0c <__swbuf_r+0x2e>
 801ee58:	e7d6      	b.n	801ee08 <__swbuf_r+0x2a>
	...

0801ee5c <__swsetup_r>:
 801ee5c:	b538      	push	{r3, r4, r5, lr}
 801ee5e:	4b29      	ldr	r3, [pc, #164]	@ (801ef04 <__swsetup_r+0xa8>)
 801ee60:	4605      	mov	r5, r0
 801ee62:	6818      	ldr	r0, [r3, #0]
 801ee64:	460c      	mov	r4, r1
 801ee66:	b118      	cbz	r0, 801ee70 <__swsetup_r+0x14>
 801ee68:	6a03      	ldr	r3, [r0, #32]
 801ee6a:	b90b      	cbnz	r3, 801ee70 <__swsetup_r+0x14>
 801ee6c:	f7ff fec6 	bl	801ebfc <__sinit>
 801ee70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee74:	0719      	lsls	r1, r3, #28
 801ee76:	d422      	bmi.n	801eebe <__swsetup_r+0x62>
 801ee78:	06da      	lsls	r2, r3, #27
 801ee7a:	d407      	bmi.n	801ee8c <__swsetup_r+0x30>
 801ee7c:	2209      	movs	r2, #9
 801ee7e:	602a      	str	r2, [r5, #0]
 801ee80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee84:	81a3      	strh	r3, [r4, #12]
 801ee86:	f04f 30ff 	mov.w	r0, #4294967295
 801ee8a:	e033      	b.n	801eef4 <__swsetup_r+0x98>
 801ee8c:	0758      	lsls	r0, r3, #29
 801ee8e:	d512      	bpl.n	801eeb6 <__swsetup_r+0x5a>
 801ee90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ee92:	b141      	cbz	r1, 801eea6 <__swsetup_r+0x4a>
 801ee94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ee98:	4299      	cmp	r1, r3
 801ee9a:	d002      	beq.n	801eea2 <__swsetup_r+0x46>
 801ee9c:	4628      	mov	r0, r5
 801ee9e:	f000 ff2b 	bl	801fcf8 <_free_r>
 801eea2:	2300      	movs	r3, #0
 801eea4:	6363      	str	r3, [r4, #52]	@ 0x34
 801eea6:	89a3      	ldrh	r3, [r4, #12]
 801eea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801eeac:	81a3      	strh	r3, [r4, #12]
 801eeae:	2300      	movs	r3, #0
 801eeb0:	6063      	str	r3, [r4, #4]
 801eeb2:	6923      	ldr	r3, [r4, #16]
 801eeb4:	6023      	str	r3, [r4, #0]
 801eeb6:	89a3      	ldrh	r3, [r4, #12]
 801eeb8:	f043 0308 	orr.w	r3, r3, #8
 801eebc:	81a3      	strh	r3, [r4, #12]
 801eebe:	6923      	ldr	r3, [r4, #16]
 801eec0:	b94b      	cbnz	r3, 801eed6 <__swsetup_r+0x7a>
 801eec2:	89a3      	ldrh	r3, [r4, #12]
 801eec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801eec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801eecc:	d003      	beq.n	801eed6 <__swsetup_r+0x7a>
 801eece:	4621      	mov	r1, r4
 801eed0:	4628      	mov	r0, r5
 801eed2:	f001 fcf3 	bl	80208bc <__smakebuf_r>
 801eed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eeda:	f013 0201 	ands.w	r2, r3, #1
 801eede:	d00a      	beq.n	801eef6 <__swsetup_r+0x9a>
 801eee0:	2200      	movs	r2, #0
 801eee2:	60a2      	str	r2, [r4, #8]
 801eee4:	6962      	ldr	r2, [r4, #20]
 801eee6:	4252      	negs	r2, r2
 801eee8:	61a2      	str	r2, [r4, #24]
 801eeea:	6922      	ldr	r2, [r4, #16]
 801eeec:	b942      	cbnz	r2, 801ef00 <__swsetup_r+0xa4>
 801eeee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801eef2:	d1c5      	bne.n	801ee80 <__swsetup_r+0x24>
 801eef4:	bd38      	pop	{r3, r4, r5, pc}
 801eef6:	0799      	lsls	r1, r3, #30
 801eef8:	bf58      	it	pl
 801eefa:	6962      	ldrpl	r2, [r4, #20]
 801eefc:	60a2      	str	r2, [r4, #8]
 801eefe:	e7f4      	b.n	801eeea <__swsetup_r+0x8e>
 801ef00:	2000      	movs	r0, #0
 801ef02:	e7f7      	b.n	801eef4 <__swsetup_r+0x98>
 801ef04:	20000070 	.word	0x20000070

0801ef08 <memcmp>:
 801ef08:	b510      	push	{r4, lr}
 801ef0a:	3901      	subs	r1, #1
 801ef0c:	4402      	add	r2, r0
 801ef0e:	4290      	cmp	r0, r2
 801ef10:	d101      	bne.n	801ef16 <memcmp+0xe>
 801ef12:	2000      	movs	r0, #0
 801ef14:	e005      	b.n	801ef22 <memcmp+0x1a>
 801ef16:	7803      	ldrb	r3, [r0, #0]
 801ef18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ef1c:	42a3      	cmp	r3, r4
 801ef1e:	d001      	beq.n	801ef24 <memcmp+0x1c>
 801ef20:	1b18      	subs	r0, r3, r4
 801ef22:	bd10      	pop	{r4, pc}
 801ef24:	3001      	adds	r0, #1
 801ef26:	e7f2      	b.n	801ef0e <memcmp+0x6>

0801ef28 <memset>:
 801ef28:	4402      	add	r2, r0
 801ef2a:	4603      	mov	r3, r0
 801ef2c:	4293      	cmp	r3, r2
 801ef2e:	d100      	bne.n	801ef32 <memset+0xa>
 801ef30:	4770      	bx	lr
 801ef32:	f803 1b01 	strb.w	r1, [r3], #1
 801ef36:	e7f9      	b.n	801ef2c <memset+0x4>

0801ef38 <_localeconv_r>:
 801ef38:	4800      	ldr	r0, [pc, #0]	@ (801ef3c <_localeconv_r+0x4>)
 801ef3a:	4770      	bx	lr
 801ef3c:	200001b0 	.word	0x200001b0

0801ef40 <_close_r>:
 801ef40:	b538      	push	{r3, r4, r5, lr}
 801ef42:	4d06      	ldr	r5, [pc, #24]	@ (801ef5c <_close_r+0x1c>)
 801ef44:	2300      	movs	r3, #0
 801ef46:	4604      	mov	r4, r0
 801ef48:	4608      	mov	r0, r1
 801ef4a:	602b      	str	r3, [r5, #0]
 801ef4c:	f7e2 fa56 	bl	80013fc <_close>
 801ef50:	1c43      	adds	r3, r0, #1
 801ef52:	d102      	bne.n	801ef5a <_close_r+0x1a>
 801ef54:	682b      	ldr	r3, [r5, #0]
 801ef56:	b103      	cbz	r3, 801ef5a <_close_r+0x1a>
 801ef58:	6023      	str	r3, [r4, #0]
 801ef5a:	bd38      	pop	{r3, r4, r5, pc}
 801ef5c:	200019d4 	.word	0x200019d4

0801ef60 <_lseek_r>:
 801ef60:	b538      	push	{r3, r4, r5, lr}
 801ef62:	4d07      	ldr	r5, [pc, #28]	@ (801ef80 <_lseek_r+0x20>)
 801ef64:	4604      	mov	r4, r0
 801ef66:	4608      	mov	r0, r1
 801ef68:	4611      	mov	r1, r2
 801ef6a:	2200      	movs	r2, #0
 801ef6c:	602a      	str	r2, [r5, #0]
 801ef6e:	461a      	mov	r2, r3
 801ef70:	f7e2 fa6b 	bl	800144a <_lseek>
 801ef74:	1c43      	adds	r3, r0, #1
 801ef76:	d102      	bne.n	801ef7e <_lseek_r+0x1e>
 801ef78:	682b      	ldr	r3, [r5, #0]
 801ef7a:	b103      	cbz	r3, 801ef7e <_lseek_r+0x1e>
 801ef7c:	6023      	str	r3, [r4, #0]
 801ef7e:	bd38      	pop	{r3, r4, r5, pc}
 801ef80:	200019d4 	.word	0x200019d4

0801ef84 <_read_r>:
 801ef84:	b538      	push	{r3, r4, r5, lr}
 801ef86:	4d07      	ldr	r5, [pc, #28]	@ (801efa4 <_read_r+0x20>)
 801ef88:	4604      	mov	r4, r0
 801ef8a:	4608      	mov	r0, r1
 801ef8c:	4611      	mov	r1, r2
 801ef8e:	2200      	movs	r2, #0
 801ef90:	602a      	str	r2, [r5, #0]
 801ef92:	461a      	mov	r2, r3
 801ef94:	f7e2 f9f9 	bl	800138a <_read>
 801ef98:	1c43      	adds	r3, r0, #1
 801ef9a:	d102      	bne.n	801efa2 <_read_r+0x1e>
 801ef9c:	682b      	ldr	r3, [r5, #0]
 801ef9e:	b103      	cbz	r3, 801efa2 <_read_r+0x1e>
 801efa0:	6023      	str	r3, [r4, #0]
 801efa2:	bd38      	pop	{r3, r4, r5, pc}
 801efa4:	200019d4 	.word	0x200019d4

0801efa8 <_write_r>:
 801efa8:	b538      	push	{r3, r4, r5, lr}
 801efaa:	4d07      	ldr	r5, [pc, #28]	@ (801efc8 <_write_r+0x20>)
 801efac:	4604      	mov	r4, r0
 801efae:	4608      	mov	r0, r1
 801efb0:	4611      	mov	r1, r2
 801efb2:	2200      	movs	r2, #0
 801efb4:	602a      	str	r2, [r5, #0]
 801efb6:	461a      	mov	r2, r3
 801efb8:	f7e2 fa04 	bl	80013c4 <_write>
 801efbc:	1c43      	adds	r3, r0, #1
 801efbe:	d102      	bne.n	801efc6 <_write_r+0x1e>
 801efc0:	682b      	ldr	r3, [r5, #0]
 801efc2:	b103      	cbz	r3, 801efc6 <_write_r+0x1e>
 801efc4:	6023      	str	r3, [r4, #0]
 801efc6:	bd38      	pop	{r3, r4, r5, pc}
 801efc8:	200019d4 	.word	0x200019d4

0801efcc <__errno>:
 801efcc:	4b01      	ldr	r3, [pc, #4]	@ (801efd4 <__errno+0x8>)
 801efce:	6818      	ldr	r0, [r3, #0]
 801efd0:	4770      	bx	lr
 801efd2:	bf00      	nop
 801efd4:	20000070 	.word	0x20000070

0801efd8 <__libc_init_array>:
 801efd8:	b570      	push	{r4, r5, r6, lr}
 801efda:	4d0d      	ldr	r5, [pc, #52]	@ (801f010 <__libc_init_array+0x38>)
 801efdc:	4c0d      	ldr	r4, [pc, #52]	@ (801f014 <__libc_init_array+0x3c>)
 801efde:	1b64      	subs	r4, r4, r5
 801efe0:	10a4      	asrs	r4, r4, #2
 801efe2:	2600      	movs	r6, #0
 801efe4:	42a6      	cmp	r6, r4
 801efe6:	d109      	bne.n	801effc <__libc_init_array+0x24>
 801efe8:	4d0b      	ldr	r5, [pc, #44]	@ (801f018 <__libc_init_array+0x40>)
 801efea:	4c0c      	ldr	r4, [pc, #48]	@ (801f01c <__libc_init_array+0x44>)
 801efec:	f001 fdb8 	bl	8020b60 <_init>
 801eff0:	1b64      	subs	r4, r4, r5
 801eff2:	10a4      	asrs	r4, r4, #2
 801eff4:	2600      	movs	r6, #0
 801eff6:	42a6      	cmp	r6, r4
 801eff8:	d105      	bne.n	801f006 <__libc_init_array+0x2e>
 801effa:	bd70      	pop	{r4, r5, r6, pc}
 801effc:	f855 3b04 	ldr.w	r3, [r5], #4
 801f000:	4798      	blx	r3
 801f002:	3601      	adds	r6, #1
 801f004:	e7ee      	b.n	801efe4 <__libc_init_array+0xc>
 801f006:	f855 3b04 	ldr.w	r3, [r5], #4
 801f00a:	4798      	blx	r3
 801f00c:	3601      	adds	r6, #1
 801f00e:	e7f2      	b.n	801eff6 <__libc_init_array+0x1e>
 801f010:	080224b4 	.word	0x080224b4
 801f014:	080224b4 	.word	0x080224b4
 801f018:	080224b4 	.word	0x080224b4
 801f01c:	080224b8 	.word	0x080224b8

0801f020 <__retarget_lock_init_recursive>:
 801f020:	4770      	bx	lr

0801f022 <__retarget_lock_acquire_recursive>:
 801f022:	4770      	bx	lr

0801f024 <__retarget_lock_release_recursive>:
 801f024:	4770      	bx	lr

0801f026 <memcpy>:
 801f026:	440a      	add	r2, r1
 801f028:	4291      	cmp	r1, r2
 801f02a:	f100 33ff 	add.w	r3, r0, #4294967295
 801f02e:	d100      	bne.n	801f032 <memcpy+0xc>
 801f030:	4770      	bx	lr
 801f032:	b510      	push	{r4, lr}
 801f034:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f03c:	4291      	cmp	r1, r2
 801f03e:	d1f9      	bne.n	801f034 <memcpy+0xe>
 801f040:	bd10      	pop	{r4, pc}

0801f042 <quorem>:
 801f042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f046:	6903      	ldr	r3, [r0, #16]
 801f048:	690c      	ldr	r4, [r1, #16]
 801f04a:	42a3      	cmp	r3, r4
 801f04c:	4607      	mov	r7, r0
 801f04e:	db7e      	blt.n	801f14e <quorem+0x10c>
 801f050:	3c01      	subs	r4, #1
 801f052:	f101 0814 	add.w	r8, r1, #20
 801f056:	00a3      	lsls	r3, r4, #2
 801f058:	f100 0514 	add.w	r5, r0, #20
 801f05c:	9300      	str	r3, [sp, #0]
 801f05e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f062:	9301      	str	r3, [sp, #4]
 801f064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f06c:	3301      	adds	r3, #1
 801f06e:	429a      	cmp	r2, r3
 801f070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f074:	fbb2 f6f3 	udiv	r6, r2, r3
 801f078:	d32e      	bcc.n	801f0d8 <quorem+0x96>
 801f07a:	f04f 0a00 	mov.w	sl, #0
 801f07e:	46c4      	mov	ip, r8
 801f080:	46ae      	mov	lr, r5
 801f082:	46d3      	mov	fp, sl
 801f084:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f088:	b298      	uxth	r0, r3
 801f08a:	fb06 a000 	mla	r0, r6, r0, sl
 801f08e:	0c02      	lsrs	r2, r0, #16
 801f090:	0c1b      	lsrs	r3, r3, #16
 801f092:	fb06 2303 	mla	r3, r6, r3, r2
 801f096:	f8de 2000 	ldr.w	r2, [lr]
 801f09a:	b280      	uxth	r0, r0
 801f09c:	b292      	uxth	r2, r2
 801f09e:	1a12      	subs	r2, r2, r0
 801f0a0:	445a      	add	r2, fp
 801f0a2:	f8de 0000 	ldr.w	r0, [lr]
 801f0a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f0aa:	b29b      	uxth	r3, r3
 801f0ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f0b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f0b4:	b292      	uxth	r2, r2
 801f0b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f0ba:	45e1      	cmp	r9, ip
 801f0bc:	f84e 2b04 	str.w	r2, [lr], #4
 801f0c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f0c4:	d2de      	bcs.n	801f084 <quorem+0x42>
 801f0c6:	9b00      	ldr	r3, [sp, #0]
 801f0c8:	58eb      	ldr	r3, [r5, r3]
 801f0ca:	b92b      	cbnz	r3, 801f0d8 <quorem+0x96>
 801f0cc:	9b01      	ldr	r3, [sp, #4]
 801f0ce:	3b04      	subs	r3, #4
 801f0d0:	429d      	cmp	r5, r3
 801f0d2:	461a      	mov	r2, r3
 801f0d4:	d32f      	bcc.n	801f136 <quorem+0xf4>
 801f0d6:	613c      	str	r4, [r7, #16]
 801f0d8:	4638      	mov	r0, r7
 801f0da:	f001 f97f 	bl	80203dc <__mcmp>
 801f0de:	2800      	cmp	r0, #0
 801f0e0:	db25      	blt.n	801f12e <quorem+0xec>
 801f0e2:	4629      	mov	r1, r5
 801f0e4:	2000      	movs	r0, #0
 801f0e6:	f858 2b04 	ldr.w	r2, [r8], #4
 801f0ea:	f8d1 c000 	ldr.w	ip, [r1]
 801f0ee:	fa1f fe82 	uxth.w	lr, r2
 801f0f2:	fa1f f38c 	uxth.w	r3, ip
 801f0f6:	eba3 030e 	sub.w	r3, r3, lr
 801f0fa:	4403      	add	r3, r0
 801f0fc:	0c12      	lsrs	r2, r2, #16
 801f0fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f102:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f106:	b29b      	uxth	r3, r3
 801f108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f10c:	45c1      	cmp	r9, r8
 801f10e:	f841 3b04 	str.w	r3, [r1], #4
 801f112:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f116:	d2e6      	bcs.n	801f0e6 <quorem+0xa4>
 801f118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f11c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f120:	b922      	cbnz	r2, 801f12c <quorem+0xea>
 801f122:	3b04      	subs	r3, #4
 801f124:	429d      	cmp	r5, r3
 801f126:	461a      	mov	r2, r3
 801f128:	d30b      	bcc.n	801f142 <quorem+0x100>
 801f12a:	613c      	str	r4, [r7, #16]
 801f12c:	3601      	adds	r6, #1
 801f12e:	4630      	mov	r0, r6
 801f130:	b003      	add	sp, #12
 801f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f136:	6812      	ldr	r2, [r2, #0]
 801f138:	3b04      	subs	r3, #4
 801f13a:	2a00      	cmp	r2, #0
 801f13c:	d1cb      	bne.n	801f0d6 <quorem+0x94>
 801f13e:	3c01      	subs	r4, #1
 801f140:	e7c6      	b.n	801f0d0 <quorem+0x8e>
 801f142:	6812      	ldr	r2, [r2, #0]
 801f144:	3b04      	subs	r3, #4
 801f146:	2a00      	cmp	r2, #0
 801f148:	d1ef      	bne.n	801f12a <quorem+0xe8>
 801f14a:	3c01      	subs	r4, #1
 801f14c:	e7ea      	b.n	801f124 <quorem+0xe2>
 801f14e:	2000      	movs	r0, #0
 801f150:	e7ee      	b.n	801f130 <quorem+0xee>
 801f152:	0000      	movs	r0, r0
 801f154:	0000      	movs	r0, r0
	...

0801f158 <_dtoa_r>:
 801f158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f15c:	69c7      	ldr	r7, [r0, #28]
 801f15e:	b097      	sub	sp, #92	@ 0x5c
 801f160:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f164:	ec55 4b10 	vmov	r4, r5, d0
 801f168:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f16a:	9107      	str	r1, [sp, #28]
 801f16c:	4681      	mov	r9, r0
 801f16e:	920c      	str	r2, [sp, #48]	@ 0x30
 801f170:	9311      	str	r3, [sp, #68]	@ 0x44
 801f172:	b97f      	cbnz	r7, 801f194 <_dtoa_r+0x3c>
 801f174:	2010      	movs	r0, #16
 801f176:	f000 fe09 	bl	801fd8c <malloc>
 801f17a:	4602      	mov	r2, r0
 801f17c:	f8c9 001c 	str.w	r0, [r9, #28]
 801f180:	b920      	cbnz	r0, 801f18c <_dtoa_r+0x34>
 801f182:	4ba9      	ldr	r3, [pc, #676]	@ (801f428 <_dtoa_r+0x2d0>)
 801f184:	21ef      	movs	r1, #239	@ 0xef
 801f186:	48a9      	ldr	r0, [pc, #676]	@ (801f42c <_dtoa_r+0x2d4>)
 801f188:	f001 fc3a 	bl	8020a00 <__assert_func>
 801f18c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f190:	6007      	str	r7, [r0, #0]
 801f192:	60c7      	str	r7, [r0, #12]
 801f194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801f198:	6819      	ldr	r1, [r3, #0]
 801f19a:	b159      	cbz	r1, 801f1b4 <_dtoa_r+0x5c>
 801f19c:	685a      	ldr	r2, [r3, #4]
 801f19e:	604a      	str	r2, [r1, #4]
 801f1a0:	2301      	movs	r3, #1
 801f1a2:	4093      	lsls	r3, r2
 801f1a4:	608b      	str	r3, [r1, #8]
 801f1a6:	4648      	mov	r0, r9
 801f1a8:	f000 fee6 	bl	801ff78 <_Bfree>
 801f1ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801f1b0:	2200      	movs	r2, #0
 801f1b2:	601a      	str	r2, [r3, #0]
 801f1b4:	1e2b      	subs	r3, r5, #0
 801f1b6:	bfb9      	ittee	lt
 801f1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f1bc:	9305      	strlt	r3, [sp, #20]
 801f1be:	2300      	movge	r3, #0
 801f1c0:	6033      	strge	r3, [r6, #0]
 801f1c2:	9f05      	ldr	r7, [sp, #20]
 801f1c4:	4b9a      	ldr	r3, [pc, #616]	@ (801f430 <_dtoa_r+0x2d8>)
 801f1c6:	bfbc      	itt	lt
 801f1c8:	2201      	movlt	r2, #1
 801f1ca:	6032      	strlt	r2, [r6, #0]
 801f1cc:	43bb      	bics	r3, r7
 801f1ce:	d112      	bne.n	801f1f6 <_dtoa_r+0x9e>
 801f1d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f1d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f1d6:	6013      	str	r3, [r2, #0]
 801f1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f1dc:	4323      	orrs	r3, r4
 801f1de:	f000 855a 	beq.w	801fc96 <_dtoa_r+0xb3e>
 801f1e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f1e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801f444 <_dtoa_r+0x2ec>
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	f000 855c 	beq.w	801fca6 <_dtoa_r+0xb4e>
 801f1ee:	f10a 0303 	add.w	r3, sl, #3
 801f1f2:	f000 bd56 	b.w	801fca2 <_dtoa_r+0xb4a>
 801f1f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801f1fa:	2200      	movs	r2, #0
 801f1fc:	ec51 0b17 	vmov	r0, r1, d7
 801f200:	2300      	movs	r3, #0
 801f202:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801f206:	f7e1 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 801f20a:	4680      	mov	r8, r0
 801f20c:	b158      	cbz	r0, 801f226 <_dtoa_r+0xce>
 801f20e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f210:	2301      	movs	r3, #1
 801f212:	6013      	str	r3, [r2, #0]
 801f214:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f216:	b113      	cbz	r3, 801f21e <_dtoa_r+0xc6>
 801f218:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f21a:	4b86      	ldr	r3, [pc, #536]	@ (801f434 <_dtoa_r+0x2dc>)
 801f21c:	6013      	str	r3, [r2, #0]
 801f21e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801f448 <_dtoa_r+0x2f0>
 801f222:	f000 bd40 	b.w	801fca6 <_dtoa_r+0xb4e>
 801f226:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801f22a:	aa14      	add	r2, sp, #80	@ 0x50
 801f22c:	a915      	add	r1, sp, #84	@ 0x54
 801f22e:	4648      	mov	r0, r9
 801f230:	f001 f984 	bl	802053c <__d2b>
 801f234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f238:	9002      	str	r0, [sp, #8]
 801f23a:	2e00      	cmp	r6, #0
 801f23c:	d078      	beq.n	801f330 <_dtoa_r+0x1d8>
 801f23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f240:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801f244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f24c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f258:	4619      	mov	r1, r3
 801f25a:	2200      	movs	r2, #0
 801f25c:	4b76      	ldr	r3, [pc, #472]	@ (801f438 <_dtoa_r+0x2e0>)
 801f25e:	f7e1 f813 	bl	8000288 <__aeabi_dsub>
 801f262:	a36b      	add	r3, pc, #428	@ (adr r3, 801f410 <_dtoa_r+0x2b8>)
 801f264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f268:	f7e1 f9c6 	bl	80005f8 <__aeabi_dmul>
 801f26c:	a36a      	add	r3, pc, #424	@ (adr r3, 801f418 <_dtoa_r+0x2c0>)
 801f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f272:	f7e1 f80b 	bl	800028c <__adddf3>
 801f276:	4604      	mov	r4, r0
 801f278:	4630      	mov	r0, r6
 801f27a:	460d      	mov	r5, r1
 801f27c:	f7e1 f952 	bl	8000524 <__aeabi_i2d>
 801f280:	a367      	add	r3, pc, #412	@ (adr r3, 801f420 <_dtoa_r+0x2c8>)
 801f282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f286:	f7e1 f9b7 	bl	80005f8 <__aeabi_dmul>
 801f28a:	4602      	mov	r2, r0
 801f28c:	460b      	mov	r3, r1
 801f28e:	4620      	mov	r0, r4
 801f290:	4629      	mov	r1, r5
 801f292:	f7e0 fffb 	bl	800028c <__adddf3>
 801f296:	4604      	mov	r4, r0
 801f298:	460d      	mov	r5, r1
 801f29a:	f7e1 fc5d 	bl	8000b58 <__aeabi_d2iz>
 801f29e:	2200      	movs	r2, #0
 801f2a0:	4607      	mov	r7, r0
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	4620      	mov	r0, r4
 801f2a6:	4629      	mov	r1, r5
 801f2a8:	f7e1 fc18 	bl	8000adc <__aeabi_dcmplt>
 801f2ac:	b140      	cbz	r0, 801f2c0 <_dtoa_r+0x168>
 801f2ae:	4638      	mov	r0, r7
 801f2b0:	f7e1 f938 	bl	8000524 <__aeabi_i2d>
 801f2b4:	4622      	mov	r2, r4
 801f2b6:	462b      	mov	r3, r5
 801f2b8:	f7e1 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 801f2bc:	b900      	cbnz	r0, 801f2c0 <_dtoa_r+0x168>
 801f2be:	3f01      	subs	r7, #1
 801f2c0:	2f16      	cmp	r7, #22
 801f2c2:	d852      	bhi.n	801f36a <_dtoa_r+0x212>
 801f2c4:	4b5d      	ldr	r3, [pc, #372]	@ (801f43c <_dtoa_r+0x2e4>)
 801f2c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f2d2:	f7e1 fc03 	bl	8000adc <__aeabi_dcmplt>
 801f2d6:	2800      	cmp	r0, #0
 801f2d8:	d049      	beq.n	801f36e <_dtoa_r+0x216>
 801f2da:	3f01      	subs	r7, #1
 801f2dc:	2300      	movs	r3, #0
 801f2de:	9310      	str	r3, [sp, #64]	@ 0x40
 801f2e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f2e2:	1b9b      	subs	r3, r3, r6
 801f2e4:	1e5a      	subs	r2, r3, #1
 801f2e6:	bf45      	ittet	mi
 801f2e8:	f1c3 0301 	rsbmi	r3, r3, #1
 801f2ec:	9300      	strmi	r3, [sp, #0]
 801f2ee:	2300      	movpl	r3, #0
 801f2f0:	2300      	movmi	r3, #0
 801f2f2:	9206      	str	r2, [sp, #24]
 801f2f4:	bf54      	ite	pl
 801f2f6:	9300      	strpl	r3, [sp, #0]
 801f2f8:	9306      	strmi	r3, [sp, #24]
 801f2fa:	2f00      	cmp	r7, #0
 801f2fc:	db39      	blt.n	801f372 <_dtoa_r+0x21a>
 801f2fe:	9b06      	ldr	r3, [sp, #24]
 801f300:	970d      	str	r7, [sp, #52]	@ 0x34
 801f302:	443b      	add	r3, r7
 801f304:	9306      	str	r3, [sp, #24]
 801f306:	2300      	movs	r3, #0
 801f308:	9308      	str	r3, [sp, #32]
 801f30a:	9b07      	ldr	r3, [sp, #28]
 801f30c:	2b09      	cmp	r3, #9
 801f30e:	d863      	bhi.n	801f3d8 <_dtoa_r+0x280>
 801f310:	2b05      	cmp	r3, #5
 801f312:	bfc4      	itt	gt
 801f314:	3b04      	subgt	r3, #4
 801f316:	9307      	strgt	r3, [sp, #28]
 801f318:	9b07      	ldr	r3, [sp, #28]
 801f31a:	f1a3 0302 	sub.w	r3, r3, #2
 801f31e:	bfcc      	ite	gt
 801f320:	2400      	movgt	r4, #0
 801f322:	2401      	movle	r4, #1
 801f324:	2b03      	cmp	r3, #3
 801f326:	d863      	bhi.n	801f3f0 <_dtoa_r+0x298>
 801f328:	e8df f003 	tbb	[pc, r3]
 801f32c:	2b375452 	.word	0x2b375452
 801f330:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801f334:	441e      	add	r6, r3
 801f336:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f33a:	2b20      	cmp	r3, #32
 801f33c:	bfc1      	itttt	gt
 801f33e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f342:	409f      	lslgt	r7, r3
 801f344:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f348:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f34c:	bfd6      	itet	le
 801f34e:	f1c3 0320 	rsble	r3, r3, #32
 801f352:	ea47 0003 	orrgt.w	r0, r7, r3
 801f356:	fa04 f003 	lslle.w	r0, r4, r3
 801f35a:	f7e1 f8d3 	bl	8000504 <__aeabi_ui2d>
 801f35e:	2201      	movs	r2, #1
 801f360:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f364:	3e01      	subs	r6, #1
 801f366:	9212      	str	r2, [sp, #72]	@ 0x48
 801f368:	e776      	b.n	801f258 <_dtoa_r+0x100>
 801f36a:	2301      	movs	r3, #1
 801f36c:	e7b7      	b.n	801f2de <_dtoa_r+0x186>
 801f36e:	9010      	str	r0, [sp, #64]	@ 0x40
 801f370:	e7b6      	b.n	801f2e0 <_dtoa_r+0x188>
 801f372:	9b00      	ldr	r3, [sp, #0]
 801f374:	1bdb      	subs	r3, r3, r7
 801f376:	9300      	str	r3, [sp, #0]
 801f378:	427b      	negs	r3, r7
 801f37a:	9308      	str	r3, [sp, #32]
 801f37c:	2300      	movs	r3, #0
 801f37e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f380:	e7c3      	b.n	801f30a <_dtoa_r+0x1b2>
 801f382:	2301      	movs	r3, #1
 801f384:	9309      	str	r3, [sp, #36]	@ 0x24
 801f386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f388:	eb07 0b03 	add.w	fp, r7, r3
 801f38c:	f10b 0301 	add.w	r3, fp, #1
 801f390:	2b01      	cmp	r3, #1
 801f392:	9303      	str	r3, [sp, #12]
 801f394:	bfb8      	it	lt
 801f396:	2301      	movlt	r3, #1
 801f398:	e006      	b.n	801f3a8 <_dtoa_r+0x250>
 801f39a:	2301      	movs	r3, #1
 801f39c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f39e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	dd28      	ble.n	801f3f6 <_dtoa_r+0x29e>
 801f3a4:	469b      	mov	fp, r3
 801f3a6:	9303      	str	r3, [sp, #12]
 801f3a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801f3ac:	2100      	movs	r1, #0
 801f3ae:	2204      	movs	r2, #4
 801f3b0:	f102 0514 	add.w	r5, r2, #20
 801f3b4:	429d      	cmp	r5, r3
 801f3b6:	d926      	bls.n	801f406 <_dtoa_r+0x2ae>
 801f3b8:	6041      	str	r1, [r0, #4]
 801f3ba:	4648      	mov	r0, r9
 801f3bc:	f000 fd9c 	bl	801fef8 <_Balloc>
 801f3c0:	4682      	mov	sl, r0
 801f3c2:	2800      	cmp	r0, #0
 801f3c4:	d142      	bne.n	801f44c <_dtoa_r+0x2f4>
 801f3c6:	4b1e      	ldr	r3, [pc, #120]	@ (801f440 <_dtoa_r+0x2e8>)
 801f3c8:	4602      	mov	r2, r0
 801f3ca:	f240 11af 	movw	r1, #431	@ 0x1af
 801f3ce:	e6da      	b.n	801f186 <_dtoa_r+0x2e>
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	e7e3      	b.n	801f39c <_dtoa_r+0x244>
 801f3d4:	2300      	movs	r3, #0
 801f3d6:	e7d5      	b.n	801f384 <_dtoa_r+0x22c>
 801f3d8:	2401      	movs	r4, #1
 801f3da:	2300      	movs	r3, #0
 801f3dc:	9307      	str	r3, [sp, #28]
 801f3de:	9409      	str	r4, [sp, #36]	@ 0x24
 801f3e0:	f04f 3bff 	mov.w	fp, #4294967295
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	f8cd b00c 	str.w	fp, [sp, #12]
 801f3ea:	2312      	movs	r3, #18
 801f3ec:	920c      	str	r2, [sp, #48]	@ 0x30
 801f3ee:	e7db      	b.n	801f3a8 <_dtoa_r+0x250>
 801f3f0:	2301      	movs	r3, #1
 801f3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3f4:	e7f4      	b.n	801f3e0 <_dtoa_r+0x288>
 801f3f6:	f04f 0b01 	mov.w	fp, #1
 801f3fa:	f8cd b00c 	str.w	fp, [sp, #12]
 801f3fe:	465b      	mov	r3, fp
 801f400:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801f404:	e7d0      	b.n	801f3a8 <_dtoa_r+0x250>
 801f406:	3101      	adds	r1, #1
 801f408:	0052      	lsls	r2, r2, #1
 801f40a:	e7d1      	b.n	801f3b0 <_dtoa_r+0x258>
 801f40c:	f3af 8000 	nop.w
 801f410:	636f4361 	.word	0x636f4361
 801f414:	3fd287a7 	.word	0x3fd287a7
 801f418:	8b60c8b3 	.word	0x8b60c8b3
 801f41c:	3fc68a28 	.word	0x3fc68a28
 801f420:	509f79fb 	.word	0x509f79fb
 801f424:	3fd34413 	.word	0x3fd34413
 801f428:	08022179 	.word	0x08022179
 801f42c:	08022190 	.word	0x08022190
 801f430:	7ff00000 	.word	0x7ff00000
 801f434:	08022149 	.word	0x08022149
 801f438:	3ff80000 	.word	0x3ff80000
 801f43c:	080222e0 	.word	0x080222e0
 801f440:	080221e8 	.word	0x080221e8
 801f444:	08022175 	.word	0x08022175
 801f448:	08022148 	.word	0x08022148
 801f44c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801f450:	6018      	str	r0, [r3, #0]
 801f452:	9b03      	ldr	r3, [sp, #12]
 801f454:	2b0e      	cmp	r3, #14
 801f456:	f200 80a1 	bhi.w	801f59c <_dtoa_r+0x444>
 801f45a:	2c00      	cmp	r4, #0
 801f45c:	f000 809e 	beq.w	801f59c <_dtoa_r+0x444>
 801f460:	2f00      	cmp	r7, #0
 801f462:	dd33      	ble.n	801f4cc <_dtoa_r+0x374>
 801f464:	4b9c      	ldr	r3, [pc, #624]	@ (801f6d8 <_dtoa_r+0x580>)
 801f466:	f007 020f 	and.w	r2, r7, #15
 801f46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f46e:	ed93 7b00 	vldr	d7, [r3]
 801f472:	05f8      	lsls	r0, r7, #23
 801f474:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801f478:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f47c:	d516      	bpl.n	801f4ac <_dtoa_r+0x354>
 801f47e:	4b97      	ldr	r3, [pc, #604]	@ (801f6dc <_dtoa_r+0x584>)
 801f480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f488:	f7e1 f9e0 	bl	800084c <__aeabi_ddiv>
 801f48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f490:	f004 040f 	and.w	r4, r4, #15
 801f494:	2603      	movs	r6, #3
 801f496:	4d91      	ldr	r5, [pc, #580]	@ (801f6dc <_dtoa_r+0x584>)
 801f498:	b954      	cbnz	r4, 801f4b0 <_dtoa_r+0x358>
 801f49a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f49e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f4a2:	f7e1 f9d3 	bl	800084c <__aeabi_ddiv>
 801f4a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f4aa:	e028      	b.n	801f4fe <_dtoa_r+0x3a6>
 801f4ac:	2602      	movs	r6, #2
 801f4ae:	e7f2      	b.n	801f496 <_dtoa_r+0x33e>
 801f4b0:	07e1      	lsls	r1, r4, #31
 801f4b2:	d508      	bpl.n	801f4c6 <_dtoa_r+0x36e>
 801f4b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801f4b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f4bc:	f7e1 f89c 	bl	80005f8 <__aeabi_dmul>
 801f4c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f4c4:	3601      	adds	r6, #1
 801f4c6:	1064      	asrs	r4, r4, #1
 801f4c8:	3508      	adds	r5, #8
 801f4ca:	e7e5      	b.n	801f498 <_dtoa_r+0x340>
 801f4cc:	f000 80af 	beq.w	801f62e <_dtoa_r+0x4d6>
 801f4d0:	427c      	negs	r4, r7
 801f4d2:	4b81      	ldr	r3, [pc, #516]	@ (801f6d8 <_dtoa_r+0x580>)
 801f4d4:	4d81      	ldr	r5, [pc, #516]	@ (801f6dc <_dtoa_r+0x584>)
 801f4d6:	f004 020f 	and.w	r2, r4, #15
 801f4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f4e6:	f7e1 f887 	bl	80005f8 <__aeabi_dmul>
 801f4ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f4ee:	1124      	asrs	r4, r4, #4
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	2602      	movs	r6, #2
 801f4f4:	2c00      	cmp	r4, #0
 801f4f6:	f040 808f 	bne.w	801f618 <_dtoa_r+0x4c0>
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d1d3      	bne.n	801f4a6 <_dtoa_r+0x34e>
 801f4fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f500:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801f504:	2b00      	cmp	r3, #0
 801f506:	f000 8094 	beq.w	801f632 <_dtoa_r+0x4da>
 801f50a:	4b75      	ldr	r3, [pc, #468]	@ (801f6e0 <_dtoa_r+0x588>)
 801f50c:	2200      	movs	r2, #0
 801f50e:	4620      	mov	r0, r4
 801f510:	4629      	mov	r1, r5
 801f512:	f7e1 fae3 	bl	8000adc <__aeabi_dcmplt>
 801f516:	2800      	cmp	r0, #0
 801f518:	f000 808b 	beq.w	801f632 <_dtoa_r+0x4da>
 801f51c:	9b03      	ldr	r3, [sp, #12]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	f000 8087 	beq.w	801f632 <_dtoa_r+0x4da>
 801f524:	f1bb 0f00 	cmp.w	fp, #0
 801f528:	dd34      	ble.n	801f594 <_dtoa_r+0x43c>
 801f52a:	4620      	mov	r0, r4
 801f52c:	4b6d      	ldr	r3, [pc, #436]	@ (801f6e4 <_dtoa_r+0x58c>)
 801f52e:	2200      	movs	r2, #0
 801f530:	4629      	mov	r1, r5
 801f532:	f7e1 f861 	bl	80005f8 <__aeabi_dmul>
 801f536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f53a:	f107 38ff 	add.w	r8, r7, #4294967295
 801f53e:	3601      	adds	r6, #1
 801f540:	465c      	mov	r4, fp
 801f542:	4630      	mov	r0, r6
 801f544:	f7e0 ffee 	bl	8000524 <__aeabi_i2d>
 801f548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f54c:	f7e1 f854 	bl	80005f8 <__aeabi_dmul>
 801f550:	4b65      	ldr	r3, [pc, #404]	@ (801f6e8 <_dtoa_r+0x590>)
 801f552:	2200      	movs	r2, #0
 801f554:	f7e0 fe9a 	bl	800028c <__adddf3>
 801f558:	4605      	mov	r5, r0
 801f55a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f55e:	2c00      	cmp	r4, #0
 801f560:	d16a      	bne.n	801f638 <_dtoa_r+0x4e0>
 801f562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f566:	4b61      	ldr	r3, [pc, #388]	@ (801f6ec <_dtoa_r+0x594>)
 801f568:	2200      	movs	r2, #0
 801f56a:	f7e0 fe8d 	bl	8000288 <__aeabi_dsub>
 801f56e:	4602      	mov	r2, r0
 801f570:	460b      	mov	r3, r1
 801f572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f576:	462a      	mov	r2, r5
 801f578:	4633      	mov	r3, r6
 801f57a:	f7e1 facd 	bl	8000b18 <__aeabi_dcmpgt>
 801f57e:	2800      	cmp	r0, #0
 801f580:	f040 8298 	bne.w	801fab4 <_dtoa_r+0x95c>
 801f584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f588:	462a      	mov	r2, r5
 801f58a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f58e:	f7e1 faa5 	bl	8000adc <__aeabi_dcmplt>
 801f592:	bb38      	cbnz	r0, 801f5e4 <_dtoa_r+0x48c>
 801f594:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801f598:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801f59c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	f2c0 8157 	blt.w	801f852 <_dtoa_r+0x6fa>
 801f5a4:	2f0e      	cmp	r7, #14
 801f5a6:	f300 8154 	bgt.w	801f852 <_dtoa_r+0x6fa>
 801f5aa:	4b4b      	ldr	r3, [pc, #300]	@ (801f6d8 <_dtoa_r+0x580>)
 801f5ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f5b0:	ed93 7b00 	vldr	d7, [r3]
 801f5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	ed8d 7b00 	vstr	d7, [sp]
 801f5bc:	f280 80e5 	bge.w	801f78a <_dtoa_r+0x632>
 801f5c0:	9b03      	ldr	r3, [sp, #12]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	f300 80e1 	bgt.w	801f78a <_dtoa_r+0x632>
 801f5c8:	d10c      	bne.n	801f5e4 <_dtoa_r+0x48c>
 801f5ca:	4b48      	ldr	r3, [pc, #288]	@ (801f6ec <_dtoa_r+0x594>)
 801f5cc:	2200      	movs	r2, #0
 801f5ce:	ec51 0b17 	vmov	r0, r1, d7
 801f5d2:	f7e1 f811 	bl	80005f8 <__aeabi_dmul>
 801f5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f5da:	f7e1 fa93 	bl	8000b04 <__aeabi_dcmpge>
 801f5de:	2800      	cmp	r0, #0
 801f5e0:	f000 8266 	beq.w	801fab0 <_dtoa_r+0x958>
 801f5e4:	2400      	movs	r4, #0
 801f5e6:	4625      	mov	r5, r4
 801f5e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5ea:	4656      	mov	r6, sl
 801f5ec:	ea6f 0803 	mvn.w	r8, r3
 801f5f0:	2700      	movs	r7, #0
 801f5f2:	4621      	mov	r1, r4
 801f5f4:	4648      	mov	r0, r9
 801f5f6:	f000 fcbf 	bl	801ff78 <_Bfree>
 801f5fa:	2d00      	cmp	r5, #0
 801f5fc:	f000 80bd 	beq.w	801f77a <_dtoa_r+0x622>
 801f600:	b12f      	cbz	r7, 801f60e <_dtoa_r+0x4b6>
 801f602:	42af      	cmp	r7, r5
 801f604:	d003      	beq.n	801f60e <_dtoa_r+0x4b6>
 801f606:	4639      	mov	r1, r7
 801f608:	4648      	mov	r0, r9
 801f60a:	f000 fcb5 	bl	801ff78 <_Bfree>
 801f60e:	4629      	mov	r1, r5
 801f610:	4648      	mov	r0, r9
 801f612:	f000 fcb1 	bl	801ff78 <_Bfree>
 801f616:	e0b0      	b.n	801f77a <_dtoa_r+0x622>
 801f618:	07e2      	lsls	r2, r4, #31
 801f61a:	d505      	bpl.n	801f628 <_dtoa_r+0x4d0>
 801f61c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f620:	f7e0 ffea 	bl	80005f8 <__aeabi_dmul>
 801f624:	3601      	adds	r6, #1
 801f626:	2301      	movs	r3, #1
 801f628:	1064      	asrs	r4, r4, #1
 801f62a:	3508      	adds	r5, #8
 801f62c:	e762      	b.n	801f4f4 <_dtoa_r+0x39c>
 801f62e:	2602      	movs	r6, #2
 801f630:	e765      	b.n	801f4fe <_dtoa_r+0x3a6>
 801f632:	9c03      	ldr	r4, [sp, #12]
 801f634:	46b8      	mov	r8, r7
 801f636:	e784      	b.n	801f542 <_dtoa_r+0x3ea>
 801f638:	4b27      	ldr	r3, [pc, #156]	@ (801f6d8 <_dtoa_r+0x580>)
 801f63a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f63c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f640:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f644:	4454      	add	r4, sl
 801f646:	2900      	cmp	r1, #0
 801f648:	d054      	beq.n	801f6f4 <_dtoa_r+0x59c>
 801f64a:	4929      	ldr	r1, [pc, #164]	@ (801f6f0 <_dtoa_r+0x598>)
 801f64c:	2000      	movs	r0, #0
 801f64e:	f7e1 f8fd 	bl	800084c <__aeabi_ddiv>
 801f652:	4633      	mov	r3, r6
 801f654:	462a      	mov	r2, r5
 801f656:	f7e0 fe17 	bl	8000288 <__aeabi_dsub>
 801f65a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f65e:	4656      	mov	r6, sl
 801f660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f664:	f7e1 fa78 	bl	8000b58 <__aeabi_d2iz>
 801f668:	4605      	mov	r5, r0
 801f66a:	f7e0 ff5b 	bl	8000524 <__aeabi_i2d>
 801f66e:	4602      	mov	r2, r0
 801f670:	460b      	mov	r3, r1
 801f672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f676:	f7e0 fe07 	bl	8000288 <__aeabi_dsub>
 801f67a:	3530      	adds	r5, #48	@ 0x30
 801f67c:	4602      	mov	r2, r0
 801f67e:	460b      	mov	r3, r1
 801f680:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f684:	f806 5b01 	strb.w	r5, [r6], #1
 801f688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f68c:	f7e1 fa26 	bl	8000adc <__aeabi_dcmplt>
 801f690:	2800      	cmp	r0, #0
 801f692:	d172      	bne.n	801f77a <_dtoa_r+0x622>
 801f694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f698:	4911      	ldr	r1, [pc, #68]	@ (801f6e0 <_dtoa_r+0x588>)
 801f69a:	2000      	movs	r0, #0
 801f69c:	f7e0 fdf4 	bl	8000288 <__aeabi_dsub>
 801f6a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f6a4:	f7e1 fa1a 	bl	8000adc <__aeabi_dcmplt>
 801f6a8:	2800      	cmp	r0, #0
 801f6aa:	f040 80b4 	bne.w	801f816 <_dtoa_r+0x6be>
 801f6ae:	42a6      	cmp	r6, r4
 801f6b0:	f43f af70 	beq.w	801f594 <_dtoa_r+0x43c>
 801f6b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801f6b8:	4b0a      	ldr	r3, [pc, #40]	@ (801f6e4 <_dtoa_r+0x58c>)
 801f6ba:	2200      	movs	r2, #0
 801f6bc:	f7e0 ff9c 	bl	80005f8 <__aeabi_dmul>
 801f6c0:	4b08      	ldr	r3, [pc, #32]	@ (801f6e4 <_dtoa_r+0x58c>)
 801f6c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f6c6:	2200      	movs	r2, #0
 801f6c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f6cc:	f7e0 ff94 	bl	80005f8 <__aeabi_dmul>
 801f6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f6d4:	e7c4      	b.n	801f660 <_dtoa_r+0x508>
 801f6d6:	bf00      	nop
 801f6d8:	080222e0 	.word	0x080222e0
 801f6dc:	080222b8 	.word	0x080222b8
 801f6e0:	3ff00000 	.word	0x3ff00000
 801f6e4:	40240000 	.word	0x40240000
 801f6e8:	401c0000 	.word	0x401c0000
 801f6ec:	40140000 	.word	0x40140000
 801f6f0:	3fe00000 	.word	0x3fe00000
 801f6f4:	4631      	mov	r1, r6
 801f6f6:	4628      	mov	r0, r5
 801f6f8:	f7e0 ff7e 	bl	80005f8 <__aeabi_dmul>
 801f6fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801f700:	9413      	str	r4, [sp, #76]	@ 0x4c
 801f702:	4656      	mov	r6, sl
 801f704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f708:	f7e1 fa26 	bl	8000b58 <__aeabi_d2iz>
 801f70c:	4605      	mov	r5, r0
 801f70e:	f7e0 ff09 	bl	8000524 <__aeabi_i2d>
 801f712:	4602      	mov	r2, r0
 801f714:	460b      	mov	r3, r1
 801f716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f71a:	f7e0 fdb5 	bl	8000288 <__aeabi_dsub>
 801f71e:	3530      	adds	r5, #48	@ 0x30
 801f720:	f806 5b01 	strb.w	r5, [r6], #1
 801f724:	4602      	mov	r2, r0
 801f726:	460b      	mov	r3, r1
 801f728:	42a6      	cmp	r6, r4
 801f72a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f72e:	f04f 0200 	mov.w	r2, #0
 801f732:	d124      	bne.n	801f77e <_dtoa_r+0x626>
 801f734:	4baf      	ldr	r3, [pc, #700]	@ (801f9f4 <_dtoa_r+0x89c>)
 801f736:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801f73a:	f7e0 fda7 	bl	800028c <__adddf3>
 801f73e:	4602      	mov	r2, r0
 801f740:	460b      	mov	r3, r1
 801f742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f746:	f7e1 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 801f74a:	2800      	cmp	r0, #0
 801f74c:	d163      	bne.n	801f816 <_dtoa_r+0x6be>
 801f74e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801f752:	49a8      	ldr	r1, [pc, #672]	@ (801f9f4 <_dtoa_r+0x89c>)
 801f754:	2000      	movs	r0, #0
 801f756:	f7e0 fd97 	bl	8000288 <__aeabi_dsub>
 801f75a:	4602      	mov	r2, r0
 801f75c:	460b      	mov	r3, r1
 801f75e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f762:	f7e1 f9bb 	bl	8000adc <__aeabi_dcmplt>
 801f766:	2800      	cmp	r0, #0
 801f768:	f43f af14 	beq.w	801f594 <_dtoa_r+0x43c>
 801f76c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f76e:	1e73      	subs	r3, r6, #1
 801f770:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f772:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f776:	2b30      	cmp	r3, #48	@ 0x30
 801f778:	d0f8      	beq.n	801f76c <_dtoa_r+0x614>
 801f77a:	4647      	mov	r7, r8
 801f77c:	e03b      	b.n	801f7f6 <_dtoa_r+0x69e>
 801f77e:	4b9e      	ldr	r3, [pc, #632]	@ (801f9f8 <_dtoa_r+0x8a0>)
 801f780:	f7e0 ff3a 	bl	80005f8 <__aeabi_dmul>
 801f784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f788:	e7bc      	b.n	801f704 <_dtoa_r+0x5ac>
 801f78a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801f78e:	4656      	mov	r6, sl
 801f790:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f794:	4620      	mov	r0, r4
 801f796:	4629      	mov	r1, r5
 801f798:	f7e1 f858 	bl	800084c <__aeabi_ddiv>
 801f79c:	f7e1 f9dc 	bl	8000b58 <__aeabi_d2iz>
 801f7a0:	4680      	mov	r8, r0
 801f7a2:	f7e0 febf 	bl	8000524 <__aeabi_i2d>
 801f7a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7aa:	f7e0 ff25 	bl	80005f8 <__aeabi_dmul>
 801f7ae:	4602      	mov	r2, r0
 801f7b0:	460b      	mov	r3, r1
 801f7b2:	4620      	mov	r0, r4
 801f7b4:	4629      	mov	r1, r5
 801f7b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f7ba:	f7e0 fd65 	bl	8000288 <__aeabi_dsub>
 801f7be:	f806 4b01 	strb.w	r4, [r6], #1
 801f7c2:	9d03      	ldr	r5, [sp, #12]
 801f7c4:	eba6 040a 	sub.w	r4, r6, sl
 801f7c8:	42a5      	cmp	r5, r4
 801f7ca:	4602      	mov	r2, r0
 801f7cc:	460b      	mov	r3, r1
 801f7ce:	d133      	bne.n	801f838 <_dtoa_r+0x6e0>
 801f7d0:	f7e0 fd5c 	bl	800028c <__adddf3>
 801f7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7d8:	4604      	mov	r4, r0
 801f7da:	460d      	mov	r5, r1
 801f7dc:	f7e1 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 801f7e0:	b9c0      	cbnz	r0, 801f814 <_dtoa_r+0x6bc>
 801f7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7e6:	4620      	mov	r0, r4
 801f7e8:	4629      	mov	r1, r5
 801f7ea:	f7e1 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 801f7ee:	b110      	cbz	r0, 801f7f6 <_dtoa_r+0x69e>
 801f7f0:	f018 0f01 	tst.w	r8, #1
 801f7f4:	d10e      	bne.n	801f814 <_dtoa_r+0x6bc>
 801f7f6:	9902      	ldr	r1, [sp, #8]
 801f7f8:	4648      	mov	r0, r9
 801f7fa:	f000 fbbd 	bl	801ff78 <_Bfree>
 801f7fe:	2300      	movs	r3, #0
 801f800:	7033      	strb	r3, [r6, #0]
 801f802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f804:	3701      	adds	r7, #1
 801f806:	601f      	str	r7, [r3, #0]
 801f808:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	f000 824b 	beq.w	801fca6 <_dtoa_r+0xb4e>
 801f810:	601e      	str	r6, [r3, #0]
 801f812:	e248      	b.n	801fca6 <_dtoa_r+0xb4e>
 801f814:	46b8      	mov	r8, r7
 801f816:	4633      	mov	r3, r6
 801f818:	461e      	mov	r6, r3
 801f81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f81e:	2a39      	cmp	r2, #57	@ 0x39
 801f820:	d106      	bne.n	801f830 <_dtoa_r+0x6d8>
 801f822:	459a      	cmp	sl, r3
 801f824:	d1f8      	bne.n	801f818 <_dtoa_r+0x6c0>
 801f826:	2230      	movs	r2, #48	@ 0x30
 801f828:	f108 0801 	add.w	r8, r8, #1
 801f82c:	f88a 2000 	strb.w	r2, [sl]
 801f830:	781a      	ldrb	r2, [r3, #0]
 801f832:	3201      	adds	r2, #1
 801f834:	701a      	strb	r2, [r3, #0]
 801f836:	e7a0      	b.n	801f77a <_dtoa_r+0x622>
 801f838:	4b6f      	ldr	r3, [pc, #444]	@ (801f9f8 <_dtoa_r+0x8a0>)
 801f83a:	2200      	movs	r2, #0
 801f83c:	f7e0 fedc 	bl	80005f8 <__aeabi_dmul>
 801f840:	2200      	movs	r2, #0
 801f842:	2300      	movs	r3, #0
 801f844:	4604      	mov	r4, r0
 801f846:	460d      	mov	r5, r1
 801f848:	f7e1 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 801f84c:	2800      	cmp	r0, #0
 801f84e:	d09f      	beq.n	801f790 <_dtoa_r+0x638>
 801f850:	e7d1      	b.n	801f7f6 <_dtoa_r+0x69e>
 801f852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f854:	2a00      	cmp	r2, #0
 801f856:	f000 80ea 	beq.w	801fa2e <_dtoa_r+0x8d6>
 801f85a:	9a07      	ldr	r2, [sp, #28]
 801f85c:	2a01      	cmp	r2, #1
 801f85e:	f300 80cd 	bgt.w	801f9fc <_dtoa_r+0x8a4>
 801f862:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f864:	2a00      	cmp	r2, #0
 801f866:	f000 80c1 	beq.w	801f9ec <_dtoa_r+0x894>
 801f86a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f86e:	9c08      	ldr	r4, [sp, #32]
 801f870:	9e00      	ldr	r6, [sp, #0]
 801f872:	9a00      	ldr	r2, [sp, #0]
 801f874:	441a      	add	r2, r3
 801f876:	9200      	str	r2, [sp, #0]
 801f878:	9a06      	ldr	r2, [sp, #24]
 801f87a:	2101      	movs	r1, #1
 801f87c:	441a      	add	r2, r3
 801f87e:	4648      	mov	r0, r9
 801f880:	9206      	str	r2, [sp, #24]
 801f882:	f000 fc2d 	bl	80200e0 <__i2b>
 801f886:	4605      	mov	r5, r0
 801f888:	b166      	cbz	r6, 801f8a4 <_dtoa_r+0x74c>
 801f88a:	9b06      	ldr	r3, [sp, #24]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	dd09      	ble.n	801f8a4 <_dtoa_r+0x74c>
 801f890:	42b3      	cmp	r3, r6
 801f892:	9a00      	ldr	r2, [sp, #0]
 801f894:	bfa8      	it	ge
 801f896:	4633      	movge	r3, r6
 801f898:	1ad2      	subs	r2, r2, r3
 801f89a:	9200      	str	r2, [sp, #0]
 801f89c:	9a06      	ldr	r2, [sp, #24]
 801f89e:	1af6      	subs	r6, r6, r3
 801f8a0:	1ad3      	subs	r3, r2, r3
 801f8a2:	9306      	str	r3, [sp, #24]
 801f8a4:	9b08      	ldr	r3, [sp, #32]
 801f8a6:	b30b      	cbz	r3, 801f8ec <_dtoa_r+0x794>
 801f8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	f000 80c6 	beq.w	801fa3c <_dtoa_r+0x8e4>
 801f8b0:	2c00      	cmp	r4, #0
 801f8b2:	f000 80c0 	beq.w	801fa36 <_dtoa_r+0x8de>
 801f8b6:	4629      	mov	r1, r5
 801f8b8:	4622      	mov	r2, r4
 801f8ba:	4648      	mov	r0, r9
 801f8bc:	f000 fcc8 	bl	8020250 <__pow5mult>
 801f8c0:	9a02      	ldr	r2, [sp, #8]
 801f8c2:	4601      	mov	r1, r0
 801f8c4:	4605      	mov	r5, r0
 801f8c6:	4648      	mov	r0, r9
 801f8c8:	f000 fc20 	bl	802010c <__multiply>
 801f8cc:	9902      	ldr	r1, [sp, #8]
 801f8ce:	4680      	mov	r8, r0
 801f8d0:	4648      	mov	r0, r9
 801f8d2:	f000 fb51 	bl	801ff78 <_Bfree>
 801f8d6:	9b08      	ldr	r3, [sp, #32]
 801f8d8:	1b1b      	subs	r3, r3, r4
 801f8da:	9308      	str	r3, [sp, #32]
 801f8dc:	f000 80b1 	beq.w	801fa42 <_dtoa_r+0x8ea>
 801f8e0:	9a08      	ldr	r2, [sp, #32]
 801f8e2:	4641      	mov	r1, r8
 801f8e4:	4648      	mov	r0, r9
 801f8e6:	f000 fcb3 	bl	8020250 <__pow5mult>
 801f8ea:	9002      	str	r0, [sp, #8]
 801f8ec:	2101      	movs	r1, #1
 801f8ee:	4648      	mov	r0, r9
 801f8f0:	f000 fbf6 	bl	80200e0 <__i2b>
 801f8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f8f6:	4604      	mov	r4, r0
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	f000 81d8 	beq.w	801fcae <_dtoa_r+0xb56>
 801f8fe:	461a      	mov	r2, r3
 801f900:	4601      	mov	r1, r0
 801f902:	4648      	mov	r0, r9
 801f904:	f000 fca4 	bl	8020250 <__pow5mult>
 801f908:	9b07      	ldr	r3, [sp, #28]
 801f90a:	2b01      	cmp	r3, #1
 801f90c:	4604      	mov	r4, r0
 801f90e:	f300 809f 	bgt.w	801fa50 <_dtoa_r+0x8f8>
 801f912:	9b04      	ldr	r3, [sp, #16]
 801f914:	2b00      	cmp	r3, #0
 801f916:	f040 8097 	bne.w	801fa48 <_dtoa_r+0x8f0>
 801f91a:	9b05      	ldr	r3, [sp, #20]
 801f91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f920:	2b00      	cmp	r3, #0
 801f922:	f040 8093 	bne.w	801fa4c <_dtoa_r+0x8f4>
 801f926:	9b05      	ldr	r3, [sp, #20]
 801f928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f92c:	0d1b      	lsrs	r3, r3, #20
 801f92e:	051b      	lsls	r3, r3, #20
 801f930:	b133      	cbz	r3, 801f940 <_dtoa_r+0x7e8>
 801f932:	9b00      	ldr	r3, [sp, #0]
 801f934:	3301      	adds	r3, #1
 801f936:	9300      	str	r3, [sp, #0]
 801f938:	9b06      	ldr	r3, [sp, #24]
 801f93a:	3301      	adds	r3, #1
 801f93c:	9306      	str	r3, [sp, #24]
 801f93e:	2301      	movs	r3, #1
 801f940:	9308      	str	r3, [sp, #32]
 801f942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f944:	2b00      	cmp	r3, #0
 801f946:	f000 81b8 	beq.w	801fcba <_dtoa_r+0xb62>
 801f94a:	6923      	ldr	r3, [r4, #16]
 801f94c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f950:	6918      	ldr	r0, [r3, #16]
 801f952:	f000 fb79 	bl	8020048 <__hi0bits>
 801f956:	f1c0 0020 	rsb	r0, r0, #32
 801f95a:	9b06      	ldr	r3, [sp, #24]
 801f95c:	4418      	add	r0, r3
 801f95e:	f010 001f 	ands.w	r0, r0, #31
 801f962:	f000 8082 	beq.w	801fa6a <_dtoa_r+0x912>
 801f966:	f1c0 0320 	rsb	r3, r0, #32
 801f96a:	2b04      	cmp	r3, #4
 801f96c:	dd73      	ble.n	801fa56 <_dtoa_r+0x8fe>
 801f96e:	9b00      	ldr	r3, [sp, #0]
 801f970:	f1c0 001c 	rsb	r0, r0, #28
 801f974:	4403      	add	r3, r0
 801f976:	9300      	str	r3, [sp, #0]
 801f978:	9b06      	ldr	r3, [sp, #24]
 801f97a:	4403      	add	r3, r0
 801f97c:	4406      	add	r6, r0
 801f97e:	9306      	str	r3, [sp, #24]
 801f980:	9b00      	ldr	r3, [sp, #0]
 801f982:	2b00      	cmp	r3, #0
 801f984:	dd05      	ble.n	801f992 <_dtoa_r+0x83a>
 801f986:	9902      	ldr	r1, [sp, #8]
 801f988:	461a      	mov	r2, r3
 801f98a:	4648      	mov	r0, r9
 801f98c:	f000 fcba 	bl	8020304 <__lshift>
 801f990:	9002      	str	r0, [sp, #8]
 801f992:	9b06      	ldr	r3, [sp, #24]
 801f994:	2b00      	cmp	r3, #0
 801f996:	dd05      	ble.n	801f9a4 <_dtoa_r+0x84c>
 801f998:	4621      	mov	r1, r4
 801f99a:	461a      	mov	r2, r3
 801f99c:	4648      	mov	r0, r9
 801f99e:	f000 fcb1 	bl	8020304 <__lshift>
 801f9a2:	4604      	mov	r4, r0
 801f9a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d061      	beq.n	801fa6e <_dtoa_r+0x916>
 801f9aa:	9802      	ldr	r0, [sp, #8]
 801f9ac:	4621      	mov	r1, r4
 801f9ae:	f000 fd15 	bl	80203dc <__mcmp>
 801f9b2:	2800      	cmp	r0, #0
 801f9b4:	da5b      	bge.n	801fa6e <_dtoa_r+0x916>
 801f9b6:	2300      	movs	r3, #0
 801f9b8:	9902      	ldr	r1, [sp, #8]
 801f9ba:	220a      	movs	r2, #10
 801f9bc:	4648      	mov	r0, r9
 801f9be:	f000 fafd 	bl	801ffbc <__multadd>
 801f9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9c4:	9002      	str	r0, [sp, #8]
 801f9c6:	f107 38ff 	add.w	r8, r7, #4294967295
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	f000 8177 	beq.w	801fcbe <_dtoa_r+0xb66>
 801f9d0:	4629      	mov	r1, r5
 801f9d2:	2300      	movs	r3, #0
 801f9d4:	220a      	movs	r2, #10
 801f9d6:	4648      	mov	r0, r9
 801f9d8:	f000 faf0 	bl	801ffbc <__multadd>
 801f9dc:	f1bb 0f00 	cmp.w	fp, #0
 801f9e0:	4605      	mov	r5, r0
 801f9e2:	dc6f      	bgt.n	801fac4 <_dtoa_r+0x96c>
 801f9e4:	9b07      	ldr	r3, [sp, #28]
 801f9e6:	2b02      	cmp	r3, #2
 801f9e8:	dc49      	bgt.n	801fa7e <_dtoa_r+0x926>
 801f9ea:	e06b      	b.n	801fac4 <_dtoa_r+0x96c>
 801f9ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f9ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f9f2:	e73c      	b.n	801f86e <_dtoa_r+0x716>
 801f9f4:	3fe00000 	.word	0x3fe00000
 801f9f8:	40240000 	.word	0x40240000
 801f9fc:	9b03      	ldr	r3, [sp, #12]
 801f9fe:	1e5c      	subs	r4, r3, #1
 801fa00:	9b08      	ldr	r3, [sp, #32]
 801fa02:	42a3      	cmp	r3, r4
 801fa04:	db09      	blt.n	801fa1a <_dtoa_r+0x8c2>
 801fa06:	1b1c      	subs	r4, r3, r4
 801fa08:	9b03      	ldr	r3, [sp, #12]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	f6bf af30 	bge.w	801f870 <_dtoa_r+0x718>
 801fa10:	9b00      	ldr	r3, [sp, #0]
 801fa12:	9a03      	ldr	r2, [sp, #12]
 801fa14:	1a9e      	subs	r6, r3, r2
 801fa16:	2300      	movs	r3, #0
 801fa18:	e72b      	b.n	801f872 <_dtoa_r+0x71a>
 801fa1a:	9b08      	ldr	r3, [sp, #32]
 801fa1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa1e:	9408      	str	r4, [sp, #32]
 801fa20:	1ae3      	subs	r3, r4, r3
 801fa22:	441a      	add	r2, r3
 801fa24:	9e00      	ldr	r6, [sp, #0]
 801fa26:	9b03      	ldr	r3, [sp, #12]
 801fa28:	920d      	str	r2, [sp, #52]	@ 0x34
 801fa2a:	2400      	movs	r4, #0
 801fa2c:	e721      	b.n	801f872 <_dtoa_r+0x71a>
 801fa2e:	9c08      	ldr	r4, [sp, #32]
 801fa30:	9e00      	ldr	r6, [sp, #0]
 801fa32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801fa34:	e728      	b.n	801f888 <_dtoa_r+0x730>
 801fa36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801fa3a:	e751      	b.n	801f8e0 <_dtoa_r+0x788>
 801fa3c:	9a08      	ldr	r2, [sp, #32]
 801fa3e:	9902      	ldr	r1, [sp, #8]
 801fa40:	e750      	b.n	801f8e4 <_dtoa_r+0x78c>
 801fa42:	f8cd 8008 	str.w	r8, [sp, #8]
 801fa46:	e751      	b.n	801f8ec <_dtoa_r+0x794>
 801fa48:	2300      	movs	r3, #0
 801fa4a:	e779      	b.n	801f940 <_dtoa_r+0x7e8>
 801fa4c:	9b04      	ldr	r3, [sp, #16]
 801fa4e:	e777      	b.n	801f940 <_dtoa_r+0x7e8>
 801fa50:	2300      	movs	r3, #0
 801fa52:	9308      	str	r3, [sp, #32]
 801fa54:	e779      	b.n	801f94a <_dtoa_r+0x7f2>
 801fa56:	d093      	beq.n	801f980 <_dtoa_r+0x828>
 801fa58:	9a00      	ldr	r2, [sp, #0]
 801fa5a:	331c      	adds	r3, #28
 801fa5c:	441a      	add	r2, r3
 801fa5e:	9200      	str	r2, [sp, #0]
 801fa60:	9a06      	ldr	r2, [sp, #24]
 801fa62:	441a      	add	r2, r3
 801fa64:	441e      	add	r6, r3
 801fa66:	9206      	str	r2, [sp, #24]
 801fa68:	e78a      	b.n	801f980 <_dtoa_r+0x828>
 801fa6a:	4603      	mov	r3, r0
 801fa6c:	e7f4      	b.n	801fa58 <_dtoa_r+0x900>
 801fa6e:	9b03      	ldr	r3, [sp, #12]
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	46b8      	mov	r8, r7
 801fa74:	dc20      	bgt.n	801fab8 <_dtoa_r+0x960>
 801fa76:	469b      	mov	fp, r3
 801fa78:	9b07      	ldr	r3, [sp, #28]
 801fa7a:	2b02      	cmp	r3, #2
 801fa7c:	dd1e      	ble.n	801fabc <_dtoa_r+0x964>
 801fa7e:	f1bb 0f00 	cmp.w	fp, #0
 801fa82:	f47f adb1 	bne.w	801f5e8 <_dtoa_r+0x490>
 801fa86:	4621      	mov	r1, r4
 801fa88:	465b      	mov	r3, fp
 801fa8a:	2205      	movs	r2, #5
 801fa8c:	4648      	mov	r0, r9
 801fa8e:	f000 fa95 	bl	801ffbc <__multadd>
 801fa92:	4601      	mov	r1, r0
 801fa94:	4604      	mov	r4, r0
 801fa96:	9802      	ldr	r0, [sp, #8]
 801fa98:	f000 fca0 	bl	80203dc <__mcmp>
 801fa9c:	2800      	cmp	r0, #0
 801fa9e:	f77f ada3 	ble.w	801f5e8 <_dtoa_r+0x490>
 801faa2:	4656      	mov	r6, sl
 801faa4:	2331      	movs	r3, #49	@ 0x31
 801faa6:	f806 3b01 	strb.w	r3, [r6], #1
 801faaa:	f108 0801 	add.w	r8, r8, #1
 801faae:	e59f      	b.n	801f5f0 <_dtoa_r+0x498>
 801fab0:	9c03      	ldr	r4, [sp, #12]
 801fab2:	46b8      	mov	r8, r7
 801fab4:	4625      	mov	r5, r4
 801fab6:	e7f4      	b.n	801faa2 <_dtoa_r+0x94a>
 801fab8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801fabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	f000 8101 	beq.w	801fcc6 <_dtoa_r+0xb6e>
 801fac4:	2e00      	cmp	r6, #0
 801fac6:	dd05      	ble.n	801fad4 <_dtoa_r+0x97c>
 801fac8:	4629      	mov	r1, r5
 801faca:	4632      	mov	r2, r6
 801facc:	4648      	mov	r0, r9
 801face:	f000 fc19 	bl	8020304 <__lshift>
 801fad2:	4605      	mov	r5, r0
 801fad4:	9b08      	ldr	r3, [sp, #32]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d05c      	beq.n	801fb94 <_dtoa_r+0xa3c>
 801fada:	6869      	ldr	r1, [r5, #4]
 801fadc:	4648      	mov	r0, r9
 801fade:	f000 fa0b 	bl	801fef8 <_Balloc>
 801fae2:	4606      	mov	r6, r0
 801fae4:	b928      	cbnz	r0, 801faf2 <_dtoa_r+0x99a>
 801fae6:	4b82      	ldr	r3, [pc, #520]	@ (801fcf0 <_dtoa_r+0xb98>)
 801fae8:	4602      	mov	r2, r0
 801faea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801faee:	f7ff bb4a 	b.w	801f186 <_dtoa_r+0x2e>
 801faf2:	692a      	ldr	r2, [r5, #16]
 801faf4:	3202      	adds	r2, #2
 801faf6:	0092      	lsls	r2, r2, #2
 801faf8:	f105 010c 	add.w	r1, r5, #12
 801fafc:	300c      	adds	r0, #12
 801fafe:	f7ff fa92 	bl	801f026 <memcpy>
 801fb02:	2201      	movs	r2, #1
 801fb04:	4631      	mov	r1, r6
 801fb06:	4648      	mov	r0, r9
 801fb08:	f000 fbfc 	bl	8020304 <__lshift>
 801fb0c:	f10a 0301 	add.w	r3, sl, #1
 801fb10:	9300      	str	r3, [sp, #0]
 801fb12:	eb0a 030b 	add.w	r3, sl, fp
 801fb16:	9308      	str	r3, [sp, #32]
 801fb18:	9b04      	ldr	r3, [sp, #16]
 801fb1a:	f003 0301 	and.w	r3, r3, #1
 801fb1e:	462f      	mov	r7, r5
 801fb20:	9306      	str	r3, [sp, #24]
 801fb22:	4605      	mov	r5, r0
 801fb24:	9b00      	ldr	r3, [sp, #0]
 801fb26:	9802      	ldr	r0, [sp, #8]
 801fb28:	4621      	mov	r1, r4
 801fb2a:	f103 3bff 	add.w	fp, r3, #4294967295
 801fb2e:	f7ff fa88 	bl	801f042 <quorem>
 801fb32:	4603      	mov	r3, r0
 801fb34:	3330      	adds	r3, #48	@ 0x30
 801fb36:	9003      	str	r0, [sp, #12]
 801fb38:	4639      	mov	r1, r7
 801fb3a:	9802      	ldr	r0, [sp, #8]
 801fb3c:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb3e:	f000 fc4d 	bl	80203dc <__mcmp>
 801fb42:	462a      	mov	r2, r5
 801fb44:	9004      	str	r0, [sp, #16]
 801fb46:	4621      	mov	r1, r4
 801fb48:	4648      	mov	r0, r9
 801fb4a:	f000 fc63 	bl	8020414 <__mdiff>
 801fb4e:	68c2      	ldr	r2, [r0, #12]
 801fb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb52:	4606      	mov	r6, r0
 801fb54:	bb02      	cbnz	r2, 801fb98 <_dtoa_r+0xa40>
 801fb56:	4601      	mov	r1, r0
 801fb58:	9802      	ldr	r0, [sp, #8]
 801fb5a:	f000 fc3f 	bl	80203dc <__mcmp>
 801fb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb60:	4602      	mov	r2, r0
 801fb62:	4631      	mov	r1, r6
 801fb64:	4648      	mov	r0, r9
 801fb66:	920c      	str	r2, [sp, #48]	@ 0x30
 801fb68:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb6a:	f000 fa05 	bl	801ff78 <_Bfree>
 801fb6e:	9b07      	ldr	r3, [sp, #28]
 801fb70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fb72:	9e00      	ldr	r6, [sp, #0]
 801fb74:	ea42 0103 	orr.w	r1, r2, r3
 801fb78:	9b06      	ldr	r3, [sp, #24]
 801fb7a:	4319      	orrs	r1, r3
 801fb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb7e:	d10d      	bne.n	801fb9c <_dtoa_r+0xa44>
 801fb80:	2b39      	cmp	r3, #57	@ 0x39
 801fb82:	d027      	beq.n	801fbd4 <_dtoa_r+0xa7c>
 801fb84:	9a04      	ldr	r2, [sp, #16]
 801fb86:	2a00      	cmp	r2, #0
 801fb88:	dd01      	ble.n	801fb8e <_dtoa_r+0xa36>
 801fb8a:	9b03      	ldr	r3, [sp, #12]
 801fb8c:	3331      	adds	r3, #49	@ 0x31
 801fb8e:	f88b 3000 	strb.w	r3, [fp]
 801fb92:	e52e      	b.n	801f5f2 <_dtoa_r+0x49a>
 801fb94:	4628      	mov	r0, r5
 801fb96:	e7b9      	b.n	801fb0c <_dtoa_r+0x9b4>
 801fb98:	2201      	movs	r2, #1
 801fb9a:	e7e2      	b.n	801fb62 <_dtoa_r+0xa0a>
 801fb9c:	9904      	ldr	r1, [sp, #16]
 801fb9e:	2900      	cmp	r1, #0
 801fba0:	db04      	blt.n	801fbac <_dtoa_r+0xa54>
 801fba2:	9807      	ldr	r0, [sp, #28]
 801fba4:	4301      	orrs	r1, r0
 801fba6:	9806      	ldr	r0, [sp, #24]
 801fba8:	4301      	orrs	r1, r0
 801fbaa:	d120      	bne.n	801fbee <_dtoa_r+0xa96>
 801fbac:	2a00      	cmp	r2, #0
 801fbae:	ddee      	ble.n	801fb8e <_dtoa_r+0xa36>
 801fbb0:	9902      	ldr	r1, [sp, #8]
 801fbb2:	9300      	str	r3, [sp, #0]
 801fbb4:	2201      	movs	r2, #1
 801fbb6:	4648      	mov	r0, r9
 801fbb8:	f000 fba4 	bl	8020304 <__lshift>
 801fbbc:	4621      	mov	r1, r4
 801fbbe:	9002      	str	r0, [sp, #8]
 801fbc0:	f000 fc0c 	bl	80203dc <__mcmp>
 801fbc4:	2800      	cmp	r0, #0
 801fbc6:	9b00      	ldr	r3, [sp, #0]
 801fbc8:	dc02      	bgt.n	801fbd0 <_dtoa_r+0xa78>
 801fbca:	d1e0      	bne.n	801fb8e <_dtoa_r+0xa36>
 801fbcc:	07da      	lsls	r2, r3, #31
 801fbce:	d5de      	bpl.n	801fb8e <_dtoa_r+0xa36>
 801fbd0:	2b39      	cmp	r3, #57	@ 0x39
 801fbd2:	d1da      	bne.n	801fb8a <_dtoa_r+0xa32>
 801fbd4:	2339      	movs	r3, #57	@ 0x39
 801fbd6:	f88b 3000 	strb.w	r3, [fp]
 801fbda:	4633      	mov	r3, r6
 801fbdc:	461e      	mov	r6, r3
 801fbde:	3b01      	subs	r3, #1
 801fbe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fbe4:	2a39      	cmp	r2, #57	@ 0x39
 801fbe6:	d04e      	beq.n	801fc86 <_dtoa_r+0xb2e>
 801fbe8:	3201      	adds	r2, #1
 801fbea:	701a      	strb	r2, [r3, #0]
 801fbec:	e501      	b.n	801f5f2 <_dtoa_r+0x49a>
 801fbee:	2a00      	cmp	r2, #0
 801fbf0:	dd03      	ble.n	801fbfa <_dtoa_r+0xaa2>
 801fbf2:	2b39      	cmp	r3, #57	@ 0x39
 801fbf4:	d0ee      	beq.n	801fbd4 <_dtoa_r+0xa7c>
 801fbf6:	3301      	adds	r3, #1
 801fbf8:	e7c9      	b.n	801fb8e <_dtoa_r+0xa36>
 801fbfa:	9a00      	ldr	r2, [sp, #0]
 801fbfc:	9908      	ldr	r1, [sp, #32]
 801fbfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fc02:	428a      	cmp	r2, r1
 801fc04:	d028      	beq.n	801fc58 <_dtoa_r+0xb00>
 801fc06:	9902      	ldr	r1, [sp, #8]
 801fc08:	2300      	movs	r3, #0
 801fc0a:	220a      	movs	r2, #10
 801fc0c:	4648      	mov	r0, r9
 801fc0e:	f000 f9d5 	bl	801ffbc <__multadd>
 801fc12:	42af      	cmp	r7, r5
 801fc14:	9002      	str	r0, [sp, #8]
 801fc16:	f04f 0300 	mov.w	r3, #0
 801fc1a:	f04f 020a 	mov.w	r2, #10
 801fc1e:	4639      	mov	r1, r7
 801fc20:	4648      	mov	r0, r9
 801fc22:	d107      	bne.n	801fc34 <_dtoa_r+0xadc>
 801fc24:	f000 f9ca 	bl	801ffbc <__multadd>
 801fc28:	4607      	mov	r7, r0
 801fc2a:	4605      	mov	r5, r0
 801fc2c:	9b00      	ldr	r3, [sp, #0]
 801fc2e:	3301      	adds	r3, #1
 801fc30:	9300      	str	r3, [sp, #0]
 801fc32:	e777      	b.n	801fb24 <_dtoa_r+0x9cc>
 801fc34:	f000 f9c2 	bl	801ffbc <__multadd>
 801fc38:	4629      	mov	r1, r5
 801fc3a:	4607      	mov	r7, r0
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	220a      	movs	r2, #10
 801fc40:	4648      	mov	r0, r9
 801fc42:	f000 f9bb 	bl	801ffbc <__multadd>
 801fc46:	4605      	mov	r5, r0
 801fc48:	e7f0      	b.n	801fc2c <_dtoa_r+0xad4>
 801fc4a:	f1bb 0f00 	cmp.w	fp, #0
 801fc4e:	bfcc      	ite	gt
 801fc50:	465e      	movgt	r6, fp
 801fc52:	2601      	movle	r6, #1
 801fc54:	4456      	add	r6, sl
 801fc56:	2700      	movs	r7, #0
 801fc58:	9902      	ldr	r1, [sp, #8]
 801fc5a:	9300      	str	r3, [sp, #0]
 801fc5c:	2201      	movs	r2, #1
 801fc5e:	4648      	mov	r0, r9
 801fc60:	f000 fb50 	bl	8020304 <__lshift>
 801fc64:	4621      	mov	r1, r4
 801fc66:	9002      	str	r0, [sp, #8]
 801fc68:	f000 fbb8 	bl	80203dc <__mcmp>
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	dcb4      	bgt.n	801fbda <_dtoa_r+0xa82>
 801fc70:	d102      	bne.n	801fc78 <_dtoa_r+0xb20>
 801fc72:	9b00      	ldr	r3, [sp, #0]
 801fc74:	07db      	lsls	r3, r3, #31
 801fc76:	d4b0      	bmi.n	801fbda <_dtoa_r+0xa82>
 801fc78:	4633      	mov	r3, r6
 801fc7a:	461e      	mov	r6, r3
 801fc7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fc80:	2a30      	cmp	r2, #48	@ 0x30
 801fc82:	d0fa      	beq.n	801fc7a <_dtoa_r+0xb22>
 801fc84:	e4b5      	b.n	801f5f2 <_dtoa_r+0x49a>
 801fc86:	459a      	cmp	sl, r3
 801fc88:	d1a8      	bne.n	801fbdc <_dtoa_r+0xa84>
 801fc8a:	2331      	movs	r3, #49	@ 0x31
 801fc8c:	f108 0801 	add.w	r8, r8, #1
 801fc90:	f88a 3000 	strb.w	r3, [sl]
 801fc94:	e4ad      	b.n	801f5f2 <_dtoa_r+0x49a>
 801fc96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801fc98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801fcf4 <_dtoa_r+0xb9c>
 801fc9c:	b11b      	cbz	r3, 801fca6 <_dtoa_r+0xb4e>
 801fc9e:	f10a 0308 	add.w	r3, sl, #8
 801fca2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fca4:	6013      	str	r3, [r2, #0]
 801fca6:	4650      	mov	r0, sl
 801fca8:	b017      	add	sp, #92	@ 0x5c
 801fcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcae:	9b07      	ldr	r3, [sp, #28]
 801fcb0:	2b01      	cmp	r3, #1
 801fcb2:	f77f ae2e 	ble.w	801f912 <_dtoa_r+0x7ba>
 801fcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fcb8:	9308      	str	r3, [sp, #32]
 801fcba:	2001      	movs	r0, #1
 801fcbc:	e64d      	b.n	801f95a <_dtoa_r+0x802>
 801fcbe:	f1bb 0f00 	cmp.w	fp, #0
 801fcc2:	f77f aed9 	ble.w	801fa78 <_dtoa_r+0x920>
 801fcc6:	4656      	mov	r6, sl
 801fcc8:	9802      	ldr	r0, [sp, #8]
 801fcca:	4621      	mov	r1, r4
 801fccc:	f7ff f9b9 	bl	801f042 <quorem>
 801fcd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801fcd4:	f806 3b01 	strb.w	r3, [r6], #1
 801fcd8:	eba6 020a 	sub.w	r2, r6, sl
 801fcdc:	4593      	cmp	fp, r2
 801fcde:	ddb4      	ble.n	801fc4a <_dtoa_r+0xaf2>
 801fce0:	9902      	ldr	r1, [sp, #8]
 801fce2:	2300      	movs	r3, #0
 801fce4:	220a      	movs	r2, #10
 801fce6:	4648      	mov	r0, r9
 801fce8:	f000 f968 	bl	801ffbc <__multadd>
 801fcec:	9002      	str	r0, [sp, #8]
 801fcee:	e7eb      	b.n	801fcc8 <_dtoa_r+0xb70>
 801fcf0:	080221e8 	.word	0x080221e8
 801fcf4:	0802216c 	.word	0x0802216c

0801fcf8 <_free_r>:
 801fcf8:	b538      	push	{r3, r4, r5, lr}
 801fcfa:	4605      	mov	r5, r0
 801fcfc:	2900      	cmp	r1, #0
 801fcfe:	d041      	beq.n	801fd84 <_free_r+0x8c>
 801fd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd04:	1f0c      	subs	r4, r1, #4
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	bfb8      	it	lt
 801fd0a:	18e4      	addlt	r4, r4, r3
 801fd0c:	f000 f8e8 	bl	801fee0 <__malloc_lock>
 801fd10:	4a1d      	ldr	r2, [pc, #116]	@ (801fd88 <_free_r+0x90>)
 801fd12:	6813      	ldr	r3, [r2, #0]
 801fd14:	b933      	cbnz	r3, 801fd24 <_free_r+0x2c>
 801fd16:	6063      	str	r3, [r4, #4]
 801fd18:	6014      	str	r4, [r2, #0]
 801fd1a:	4628      	mov	r0, r5
 801fd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd20:	f000 b8e4 	b.w	801feec <__malloc_unlock>
 801fd24:	42a3      	cmp	r3, r4
 801fd26:	d908      	bls.n	801fd3a <_free_r+0x42>
 801fd28:	6820      	ldr	r0, [r4, #0]
 801fd2a:	1821      	adds	r1, r4, r0
 801fd2c:	428b      	cmp	r3, r1
 801fd2e:	bf01      	itttt	eq
 801fd30:	6819      	ldreq	r1, [r3, #0]
 801fd32:	685b      	ldreq	r3, [r3, #4]
 801fd34:	1809      	addeq	r1, r1, r0
 801fd36:	6021      	streq	r1, [r4, #0]
 801fd38:	e7ed      	b.n	801fd16 <_free_r+0x1e>
 801fd3a:	461a      	mov	r2, r3
 801fd3c:	685b      	ldr	r3, [r3, #4]
 801fd3e:	b10b      	cbz	r3, 801fd44 <_free_r+0x4c>
 801fd40:	42a3      	cmp	r3, r4
 801fd42:	d9fa      	bls.n	801fd3a <_free_r+0x42>
 801fd44:	6811      	ldr	r1, [r2, #0]
 801fd46:	1850      	adds	r0, r2, r1
 801fd48:	42a0      	cmp	r0, r4
 801fd4a:	d10b      	bne.n	801fd64 <_free_r+0x6c>
 801fd4c:	6820      	ldr	r0, [r4, #0]
 801fd4e:	4401      	add	r1, r0
 801fd50:	1850      	adds	r0, r2, r1
 801fd52:	4283      	cmp	r3, r0
 801fd54:	6011      	str	r1, [r2, #0]
 801fd56:	d1e0      	bne.n	801fd1a <_free_r+0x22>
 801fd58:	6818      	ldr	r0, [r3, #0]
 801fd5a:	685b      	ldr	r3, [r3, #4]
 801fd5c:	6053      	str	r3, [r2, #4]
 801fd5e:	4408      	add	r0, r1
 801fd60:	6010      	str	r0, [r2, #0]
 801fd62:	e7da      	b.n	801fd1a <_free_r+0x22>
 801fd64:	d902      	bls.n	801fd6c <_free_r+0x74>
 801fd66:	230c      	movs	r3, #12
 801fd68:	602b      	str	r3, [r5, #0]
 801fd6a:	e7d6      	b.n	801fd1a <_free_r+0x22>
 801fd6c:	6820      	ldr	r0, [r4, #0]
 801fd6e:	1821      	adds	r1, r4, r0
 801fd70:	428b      	cmp	r3, r1
 801fd72:	bf04      	itt	eq
 801fd74:	6819      	ldreq	r1, [r3, #0]
 801fd76:	685b      	ldreq	r3, [r3, #4]
 801fd78:	6063      	str	r3, [r4, #4]
 801fd7a:	bf04      	itt	eq
 801fd7c:	1809      	addeq	r1, r1, r0
 801fd7e:	6021      	streq	r1, [r4, #0]
 801fd80:	6054      	str	r4, [r2, #4]
 801fd82:	e7ca      	b.n	801fd1a <_free_r+0x22>
 801fd84:	bd38      	pop	{r3, r4, r5, pc}
 801fd86:	bf00      	nop
 801fd88:	200019e0 	.word	0x200019e0

0801fd8c <malloc>:
 801fd8c:	4b02      	ldr	r3, [pc, #8]	@ (801fd98 <malloc+0xc>)
 801fd8e:	4601      	mov	r1, r0
 801fd90:	6818      	ldr	r0, [r3, #0]
 801fd92:	f000 b825 	b.w	801fde0 <_malloc_r>
 801fd96:	bf00      	nop
 801fd98:	20000070 	.word	0x20000070

0801fd9c <sbrk_aligned>:
 801fd9c:	b570      	push	{r4, r5, r6, lr}
 801fd9e:	4e0f      	ldr	r6, [pc, #60]	@ (801fddc <sbrk_aligned+0x40>)
 801fda0:	460c      	mov	r4, r1
 801fda2:	6831      	ldr	r1, [r6, #0]
 801fda4:	4605      	mov	r5, r0
 801fda6:	b911      	cbnz	r1, 801fdae <sbrk_aligned+0x12>
 801fda8:	f000 fe1a 	bl	80209e0 <_sbrk_r>
 801fdac:	6030      	str	r0, [r6, #0]
 801fdae:	4621      	mov	r1, r4
 801fdb0:	4628      	mov	r0, r5
 801fdb2:	f000 fe15 	bl	80209e0 <_sbrk_r>
 801fdb6:	1c43      	adds	r3, r0, #1
 801fdb8:	d103      	bne.n	801fdc2 <sbrk_aligned+0x26>
 801fdba:	f04f 34ff 	mov.w	r4, #4294967295
 801fdbe:	4620      	mov	r0, r4
 801fdc0:	bd70      	pop	{r4, r5, r6, pc}
 801fdc2:	1cc4      	adds	r4, r0, #3
 801fdc4:	f024 0403 	bic.w	r4, r4, #3
 801fdc8:	42a0      	cmp	r0, r4
 801fdca:	d0f8      	beq.n	801fdbe <sbrk_aligned+0x22>
 801fdcc:	1a21      	subs	r1, r4, r0
 801fdce:	4628      	mov	r0, r5
 801fdd0:	f000 fe06 	bl	80209e0 <_sbrk_r>
 801fdd4:	3001      	adds	r0, #1
 801fdd6:	d1f2      	bne.n	801fdbe <sbrk_aligned+0x22>
 801fdd8:	e7ef      	b.n	801fdba <sbrk_aligned+0x1e>
 801fdda:	bf00      	nop
 801fddc:	200019dc 	.word	0x200019dc

0801fde0 <_malloc_r>:
 801fde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fde4:	1ccd      	adds	r5, r1, #3
 801fde6:	f025 0503 	bic.w	r5, r5, #3
 801fdea:	3508      	adds	r5, #8
 801fdec:	2d0c      	cmp	r5, #12
 801fdee:	bf38      	it	cc
 801fdf0:	250c      	movcc	r5, #12
 801fdf2:	2d00      	cmp	r5, #0
 801fdf4:	4606      	mov	r6, r0
 801fdf6:	db01      	blt.n	801fdfc <_malloc_r+0x1c>
 801fdf8:	42a9      	cmp	r1, r5
 801fdfa:	d904      	bls.n	801fe06 <_malloc_r+0x26>
 801fdfc:	230c      	movs	r3, #12
 801fdfe:	6033      	str	r3, [r6, #0]
 801fe00:	2000      	movs	r0, #0
 801fe02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801fedc <_malloc_r+0xfc>
 801fe0a:	f000 f869 	bl	801fee0 <__malloc_lock>
 801fe0e:	f8d8 3000 	ldr.w	r3, [r8]
 801fe12:	461c      	mov	r4, r3
 801fe14:	bb44      	cbnz	r4, 801fe68 <_malloc_r+0x88>
 801fe16:	4629      	mov	r1, r5
 801fe18:	4630      	mov	r0, r6
 801fe1a:	f7ff ffbf 	bl	801fd9c <sbrk_aligned>
 801fe1e:	1c43      	adds	r3, r0, #1
 801fe20:	4604      	mov	r4, r0
 801fe22:	d158      	bne.n	801fed6 <_malloc_r+0xf6>
 801fe24:	f8d8 4000 	ldr.w	r4, [r8]
 801fe28:	4627      	mov	r7, r4
 801fe2a:	2f00      	cmp	r7, #0
 801fe2c:	d143      	bne.n	801feb6 <_malloc_r+0xd6>
 801fe2e:	2c00      	cmp	r4, #0
 801fe30:	d04b      	beq.n	801feca <_malloc_r+0xea>
 801fe32:	6823      	ldr	r3, [r4, #0]
 801fe34:	4639      	mov	r1, r7
 801fe36:	4630      	mov	r0, r6
 801fe38:	eb04 0903 	add.w	r9, r4, r3
 801fe3c:	f000 fdd0 	bl	80209e0 <_sbrk_r>
 801fe40:	4581      	cmp	r9, r0
 801fe42:	d142      	bne.n	801feca <_malloc_r+0xea>
 801fe44:	6821      	ldr	r1, [r4, #0]
 801fe46:	1a6d      	subs	r5, r5, r1
 801fe48:	4629      	mov	r1, r5
 801fe4a:	4630      	mov	r0, r6
 801fe4c:	f7ff ffa6 	bl	801fd9c <sbrk_aligned>
 801fe50:	3001      	adds	r0, #1
 801fe52:	d03a      	beq.n	801feca <_malloc_r+0xea>
 801fe54:	6823      	ldr	r3, [r4, #0]
 801fe56:	442b      	add	r3, r5
 801fe58:	6023      	str	r3, [r4, #0]
 801fe5a:	f8d8 3000 	ldr.w	r3, [r8]
 801fe5e:	685a      	ldr	r2, [r3, #4]
 801fe60:	bb62      	cbnz	r2, 801febc <_malloc_r+0xdc>
 801fe62:	f8c8 7000 	str.w	r7, [r8]
 801fe66:	e00f      	b.n	801fe88 <_malloc_r+0xa8>
 801fe68:	6822      	ldr	r2, [r4, #0]
 801fe6a:	1b52      	subs	r2, r2, r5
 801fe6c:	d420      	bmi.n	801feb0 <_malloc_r+0xd0>
 801fe6e:	2a0b      	cmp	r2, #11
 801fe70:	d917      	bls.n	801fea2 <_malloc_r+0xc2>
 801fe72:	1961      	adds	r1, r4, r5
 801fe74:	42a3      	cmp	r3, r4
 801fe76:	6025      	str	r5, [r4, #0]
 801fe78:	bf18      	it	ne
 801fe7a:	6059      	strne	r1, [r3, #4]
 801fe7c:	6863      	ldr	r3, [r4, #4]
 801fe7e:	bf08      	it	eq
 801fe80:	f8c8 1000 	streq.w	r1, [r8]
 801fe84:	5162      	str	r2, [r4, r5]
 801fe86:	604b      	str	r3, [r1, #4]
 801fe88:	4630      	mov	r0, r6
 801fe8a:	f000 f82f 	bl	801feec <__malloc_unlock>
 801fe8e:	f104 000b 	add.w	r0, r4, #11
 801fe92:	1d23      	adds	r3, r4, #4
 801fe94:	f020 0007 	bic.w	r0, r0, #7
 801fe98:	1ac2      	subs	r2, r0, r3
 801fe9a:	bf1c      	itt	ne
 801fe9c:	1a1b      	subne	r3, r3, r0
 801fe9e:	50a3      	strne	r3, [r4, r2]
 801fea0:	e7af      	b.n	801fe02 <_malloc_r+0x22>
 801fea2:	6862      	ldr	r2, [r4, #4]
 801fea4:	42a3      	cmp	r3, r4
 801fea6:	bf0c      	ite	eq
 801fea8:	f8c8 2000 	streq.w	r2, [r8]
 801feac:	605a      	strne	r2, [r3, #4]
 801feae:	e7eb      	b.n	801fe88 <_malloc_r+0xa8>
 801feb0:	4623      	mov	r3, r4
 801feb2:	6864      	ldr	r4, [r4, #4]
 801feb4:	e7ae      	b.n	801fe14 <_malloc_r+0x34>
 801feb6:	463c      	mov	r4, r7
 801feb8:	687f      	ldr	r7, [r7, #4]
 801feba:	e7b6      	b.n	801fe2a <_malloc_r+0x4a>
 801febc:	461a      	mov	r2, r3
 801febe:	685b      	ldr	r3, [r3, #4]
 801fec0:	42a3      	cmp	r3, r4
 801fec2:	d1fb      	bne.n	801febc <_malloc_r+0xdc>
 801fec4:	2300      	movs	r3, #0
 801fec6:	6053      	str	r3, [r2, #4]
 801fec8:	e7de      	b.n	801fe88 <_malloc_r+0xa8>
 801feca:	230c      	movs	r3, #12
 801fecc:	6033      	str	r3, [r6, #0]
 801fece:	4630      	mov	r0, r6
 801fed0:	f000 f80c 	bl	801feec <__malloc_unlock>
 801fed4:	e794      	b.n	801fe00 <_malloc_r+0x20>
 801fed6:	6005      	str	r5, [r0, #0]
 801fed8:	e7d6      	b.n	801fe88 <_malloc_r+0xa8>
 801feda:	bf00      	nop
 801fedc:	200019e0 	.word	0x200019e0

0801fee0 <__malloc_lock>:
 801fee0:	4801      	ldr	r0, [pc, #4]	@ (801fee8 <__malloc_lock+0x8>)
 801fee2:	f7ff b89e 	b.w	801f022 <__retarget_lock_acquire_recursive>
 801fee6:	bf00      	nop
 801fee8:	200019d8 	.word	0x200019d8

0801feec <__malloc_unlock>:
 801feec:	4801      	ldr	r0, [pc, #4]	@ (801fef4 <__malloc_unlock+0x8>)
 801feee:	f7ff b899 	b.w	801f024 <__retarget_lock_release_recursive>
 801fef2:	bf00      	nop
 801fef4:	200019d8 	.word	0x200019d8

0801fef8 <_Balloc>:
 801fef8:	b570      	push	{r4, r5, r6, lr}
 801fefa:	69c6      	ldr	r6, [r0, #28]
 801fefc:	4604      	mov	r4, r0
 801fefe:	460d      	mov	r5, r1
 801ff00:	b976      	cbnz	r6, 801ff20 <_Balloc+0x28>
 801ff02:	2010      	movs	r0, #16
 801ff04:	f7ff ff42 	bl	801fd8c <malloc>
 801ff08:	4602      	mov	r2, r0
 801ff0a:	61e0      	str	r0, [r4, #28]
 801ff0c:	b920      	cbnz	r0, 801ff18 <_Balloc+0x20>
 801ff0e:	4b18      	ldr	r3, [pc, #96]	@ (801ff70 <_Balloc+0x78>)
 801ff10:	4818      	ldr	r0, [pc, #96]	@ (801ff74 <_Balloc+0x7c>)
 801ff12:	216b      	movs	r1, #107	@ 0x6b
 801ff14:	f000 fd74 	bl	8020a00 <__assert_func>
 801ff18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ff1c:	6006      	str	r6, [r0, #0]
 801ff1e:	60c6      	str	r6, [r0, #12]
 801ff20:	69e6      	ldr	r6, [r4, #28]
 801ff22:	68f3      	ldr	r3, [r6, #12]
 801ff24:	b183      	cbz	r3, 801ff48 <_Balloc+0x50>
 801ff26:	69e3      	ldr	r3, [r4, #28]
 801ff28:	68db      	ldr	r3, [r3, #12]
 801ff2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ff2e:	b9b8      	cbnz	r0, 801ff60 <_Balloc+0x68>
 801ff30:	2101      	movs	r1, #1
 801ff32:	fa01 f605 	lsl.w	r6, r1, r5
 801ff36:	1d72      	adds	r2, r6, #5
 801ff38:	0092      	lsls	r2, r2, #2
 801ff3a:	4620      	mov	r0, r4
 801ff3c:	f000 fd7e 	bl	8020a3c <_calloc_r>
 801ff40:	b160      	cbz	r0, 801ff5c <_Balloc+0x64>
 801ff42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ff46:	e00e      	b.n	801ff66 <_Balloc+0x6e>
 801ff48:	2221      	movs	r2, #33	@ 0x21
 801ff4a:	2104      	movs	r1, #4
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	f000 fd75 	bl	8020a3c <_calloc_r>
 801ff52:	69e3      	ldr	r3, [r4, #28]
 801ff54:	60f0      	str	r0, [r6, #12]
 801ff56:	68db      	ldr	r3, [r3, #12]
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d1e4      	bne.n	801ff26 <_Balloc+0x2e>
 801ff5c:	2000      	movs	r0, #0
 801ff5e:	bd70      	pop	{r4, r5, r6, pc}
 801ff60:	6802      	ldr	r2, [r0, #0]
 801ff62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ff66:	2300      	movs	r3, #0
 801ff68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ff6c:	e7f7      	b.n	801ff5e <_Balloc+0x66>
 801ff6e:	bf00      	nop
 801ff70:	08022179 	.word	0x08022179
 801ff74:	080221f9 	.word	0x080221f9

0801ff78 <_Bfree>:
 801ff78:	b570      	push	{r4, r5, r6, lr}
 801ff7a:	69c6      	ldr	r6, [r0, #28]
 801ff7c:	4605      	mov	r5, r0
 801ff7e:	460c      	mov	r4, r1
 801ff80:	b976      	cbnz	r6, 801ffa0 <_Bfree+0x28>
 801ff82:	2010      	movs	r0, #16
 801ff84:	f7ff ff02 	bl	801fd8c <malloc>
 801ff88:	4602      	mov	r2, r0
 801ff8a:	61e8      	str	r0, [r5, #28]
 801ff8c:	b920      	cbnz	r0, 801ff98 <_Bfree+0x20>
 801ff8e:	4b09      	ldr	r3, [pc, #36]	@ (801ffb4 <_Bfree+0x3c>)
 801ff90:	4809      	ldr	r0, [pc, #36]	@ (801ffb8 <_Bfree+0x40>)
 801ff92:	218f      	movs	r1, #143	@ 0x8f
 801ff94:	f000 fd34 	bl	8020a00 <__assert_func>
 801ff98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ff9c:	6006      	str	r6, [r0, #0]
 801ff9e:	60c6      	str	r6, [r0, #12]
 801ffa0:	b13c      	cbz	r4, 801ffb2 <_Bfree+0x3a>
 801ffa2:	69eb      	ldr	r3, [r5, #28]
 801ffa4:	6862      	ldr	r2, [r4, #4]
 801ffa6:	68db      	ldr	r3, [r3, #12]
 801ffa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ffac:	6021      	str	r1, [r4, #0]
 801ffae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ffb2:	bd70      	pop	{r4, r5, r6, pc}
 801ffb4:	08022179 	.word	0x08022179
 801ffb8:	080221f9 	.word	0x080221f9

0801ffbc <__multadd>:
 801ffbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffc0:	690d      	ldr	r5, [r1, #16]
 801ffc2:	4607      	mov	r7, r0
 801ffc4:	460c      	mov	r4, r1
 801ffc6:	461e      	mov	r6, r3
 801ffc8:	f101 0c14 	add.w	ip, r1, #20
 801ffcc:	2000      	movs	r0, #0
 801ffce:	f8dc 3000 	ldr.w	r3, [ip]
 801ffd2:	b299      	uxth	r1, r3
 801ffd4:	fb02 6101 	mla	r1, r2, r1, r6
 801ffd8:	0c1e      	lsrs	r6, r3, #16
 801ffda:	0c0b      	lsrs	r3, r1, #16
 801ffdc:	fb02 3306 	mla	r3, r2, r6, r3
 801ffe0:	b289      	uxth	r1, r1
 801ffe2:	3001      	adds	r0, #1
 801ffe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ffe8:	4285      	cmp	r5, r0
 801ffea:	f84c 1b04 	str.w	r1, [ip], #4
 801ffee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fff2:	dcec      	bgt.n	801ffce <__multadd+0x12>
 801fff4:	b30e      	cbz	r6, 802003a <__multadd+0x7e>
 801fff6:	68a3      	ldr	r3, [r4, #8]
 801fff8:	42ab      	cmp	r3, r5
 801fffa:	dc19      	bgt.n	8020030 <__multadd+0x74>
 801fffc:	6861      	ldr	r1, [r4, #4]
 801fffe:	4638      	mov	r0, r7
 8020000:	3101      	adds	r1, #1
 8020002:	f7ff ff79 	bl	801fef8 <_Balloc>
 8020006:	4680      	mov	r8, r0
 8020008:	b928      	cbnz	r0, 8020016 <__multadd+0x5a>
 802000a:	4602      	mov	r2, r0
 802000c:	4b0c      	ldr	r3, [pc, #48]	@ (8020040 <__multadd+0x84>)
 802000e:	480d      	ldr	r0, [pc, #52]	@ (8020044 <__multadd+0x88>)
 8020010:	21ba      	movs	r1, #186	@ 0xba
 8020012:	f000 fcf5 	bl	8020a00 <__assert_func>
 8020016:	6922      	ldr	r2, [r4, #16]
 8020018:	3202      	adds	r2, #2
 802001a:	f104 010c 	add.w	r1, r4, #12
 802001e:	0092      	lsls	r2, r2, #2
 8020020:	300c      	adds	r0, #12
 8020022:	f7ff f800 	bl	801f026 <memcpy>
 8020026:	4621      	mov	r1, r4
 8020028:	4638      	mov	r0, r7
 802002a:	f7ff ffa5 	bl	801ff78 <_Bfree>
 802002e:	4644      	mov	r4, r8
 8020030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020034:	3501      	adds	r5, #1
 8020036:	615e      	str	r6, [r3, #20]
 8020038:	6125      	str	r5, [r4, #16]
 802003a:	4620      	mov	r0, r4
 802003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020040:	080221e8 	.word	0x080221e8
 8020044:	080221f9 	.word	0x080221f9

08020048 <__hi0bits>:
 8020048:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802004c:	4603      	mov	r3, r0
 802004e:	bf36      	itet	cc
 8020050:	0403      	lslcc	r3, r0, #16
 8020052:	2000      	movcs	r0, #0
 8020054:	2010      	movcc	r0, #16
 8020056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802005a:	bf3c      	itt	cc
 802005c:	021b      	lslcc	r3, r3, #8
 802005e:	3008      	addcc	r0, #8
 8020060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020064:	bf3c      	itt	cc
 8020066:	011b      	lslcc	r3, r3, #4
 8020068:	3004      	addcc	r0, #4
 802006a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802006e:	bf3c      	itt	cc
 8020070:	009b      	lslcc	r3, r3, #2
 8020072:	3002      	addcc	r0, #2
 8020074:	2b00      	cmp	r3, #0
 8020076:	db05      	blt.n	8020084 <__hi0bits+0x3c>
 8020078:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802007c:	f100 0001 	add.w	r0, r0, #1
 8020080:	bf08      	it	eq
 8020082:	2020      	moveq	r0, #32
 8020084:	4770      	bx	lr

08020086 <__lo0bits>:
 8020086:	6803      	ldr	r3, [r0, #0]
 8020088:	4602      	mov	r2, r0
 802008a:	f013 0007 	ands.w	r0, r3, #7
 802008e:	d00b      	beq.n	80200a8 <__lo0bits+0x22>
 8020090:	07d9      	lsls	r1, r3, #31
 8020092:	d421      	bmi.n	80200d8 <__lo0bits+0x52>
 8020094:	0798      	lsls	r0, r3, #30
 8020096:	bf49      	itett	mi
 8020098:	085b      	lsrmi	r3, r3, #1
 802009a:	089b      	lsrpl	r3, r3, #2
 802009c:	2001      	movmi	r0, #1
 802009e:	6013      	strmi	r3, [r2, #0]
 80200a0:	bf5c      	itt	pl
 80200a2:	6013      	strpl	r3, [r2, #0]
 80200a4:	2002      	movpl	r0, #2
 80200a6:	4770      	bx	lr
 80200a8:	b299      	uxth	r1, r3
 80200aa:	b909      	cbnz	r1, 80200b0 <__lo0bits+0x2a>
 80200ac:	0c1b      	lsrs	r3, r3, #16
 80200ae:	2010      	movs	r0, #16
 80200b0:	b2d9      	uxtb	r1, r3
 80200b2:	b909      	cbnz	r1, 80200b8 <__lo0bits+0x32>
 80200b4:	3008      	adds	r0, #8
 80200b6:	0a1b      	lsrs	r3, r3, #8
 80200b8:	0719      	lsls	r1, r3, #28
 80200ba:	bf04      	itt	eq
 80200bc:	091b      	lsreq	r3, r3, #4
 80200be:	3004      	addeq	r0, #4
 80200c0:	0799      	lsls	r1, r3, #30
 80200c2:	bf04      	itt	eq
 80200c4:	089b      	lsreq	r3, r3, #2
 80200c6:	3002      	addeq	r0, #2
 80200c8:	07d9      	lsls	r1, r3, #31
 80200ca:	d403      	bmi.n	80200d4 <__lo0bits+0x4e>
 80200cc:	085b      	lsrs	r3, r3, #1
 80200ce:	f100 0001 	add.w	r0, r0, #1
 80200d2:	d003      	beq.n	80200dc <__lo0bits+0x56>
 80200d4:	6013      	str	r3, [r2, #0]
 80200d6:	4770      	bx	lr
 80200d8:	2000      	movs	r0, #0
 80200da:	4770      	bx	lr
 80200dc:	2020      	movs	r0, #32
 80200de:	4770      	bx	lr

080200e0 <__i2b>:
 80200e0:	b510      	push	{r4, lr}
 80200e2:	460c      	mov	r4, r1
 80200e4:	2101      	movs	r1, #1
 80200e6:	f7ff ff07 	bl	801fef8 <_Balloc>
 80200ea:	4602      	mov	r2, r0
 80200ec:	b928      	cbnz	r0, 80200fa <__i2b+0x1a>
 80200ee:	4b05      	ldr	r3, [pc, #20]	@ (8020104 <__i2b+0x24>)
 80200f0:	4805      	ldr	r0, [pc, #20]	@ (8020108 <__i2b+0x28>)
 80200f2:	f240 1145 	movw	r1, #325	@ 0x145
 80200f6:	f000 fc83 	bl	8020a00 <__assert_func>
 80200fa:	2301      	movs	r3, #1
 80200fc:	6144      	str	r4, [r0, #20]
 80200fe:	6103      	str	r3, [r0, #16]
 8020100:	bd10      	pop	{r4, pc}
 8020102:	bf00      	nop
 8020104:	080221e8 	.word	0x080221e8
 8020108:	080221f9 	.word	0x080221f9

0802010c <__multiply>:
 802010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020110:	4617      	mov	r7, r2
 8020112:	690a      	ldr	r2, [r1, #16]
 8020114:	693b      	ldr	r3, [r7, #16]
 8020116:	429a      	cmp	r2, r3
 8020118:	bfa8      	it	ge
 802011a:	463b      	movge	r3, r7
 802011c:	4689      	mov	r9, r1
 802011e:	bfa4      	itt	ge
 8020120:	460f      	movge	r7, r1
 8020122:	4699      	movge	r9, r3
 8020124:	693d      	ldr	r5, [r7, #16]
 8020126:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802012a:	68bb      	ldr	r3, [r7, #8]
 802012c:	6879      	ldr	r1, [r7, #4]
 802012e:	eb05 060a 	add.w	r6, r5, sl
 8020132:	42b3      	cmp	r3, r6
 8020134:	b085      	sub	sp, #20
 8020136:	bfb8      	it	lt
 8020138:	3101      	addlt	r1, #1
 802013a:	f7ff fedd 	bl	801fef8 <_Balloc>
 802013e:	b930      	cbnz	r0, 802014e <__multiply+0x42>
 8020140:	4602      	mov	r2, r0
 8020142:	4b41      	ldr	r3, [pc, #260]	@ (8020248 <__multiply+0x13c>)
 8020144:	4841      	ldr	r0, [pc, #260]	@ (802024c <__multiply+0x140>)
 8020146:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802014a:	f000 fc59 	bl	8020a00 <__assert_func>
 802014e:	f100 0414 	add.w	r4, r0, #20
 8020152:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8020156:	4623      	mov	r3, r4
 8020158:	2200      	movs	r2, #0
 802015a:	4573      	cmp	r3, lr
 802015c:	d320      	bcc.n	80201a0 <__multiply+0x94>
 802015e:	f107 0814 	add.w	r8, r7, #20
 8020162:	f109 0114 	add.w	r1, r9, #20
 8020166:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 802016a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 802016e:	9302      	str	r3, [sp, #8]
 8020170:	1beb      	subs	r3, r5, r7
 8020172:	3b15      	subs	r3, #21
 8020174:	f023 0303 	bic.w	r3, r3, #3
 8020178:	3304      	adds	r3, #4
 802017a:	3715      	adds	r7, #21
 802017c:	42bd      	cmp	r5, r7
 802017e:	bf38      	it	cc
 8020180:	2304      	movcc	r3, #4
 8020182:	9301      	str	r3, [sp, #4]
 8020184:	9b02      	ldr	r3, [sp, #8]
 8020186:	9103      	str	r1, [sp, #12]
 8020188:	428b      	cmp	r3, r1
 802018a:	d80c      	bhi.n	80201a6 <__multiply+0x9a>
 802018c:	2e00      	cmp	r6, #0
 802018e:	dd03      	ble.n	8020198 <__multiply+0x8c>
 8020190:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8020194:	2b00      	cmp	r3, #0
 8020196:	d055      	beq.n	8020244 <__multiply+0x138>
 8020198:	6106      	str	r6, [r0, #16]
 802019a:	b005      	add	sp, #20
 802019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201a0:	f843 2b04 	str.w	r2, [r3], #4
 80201a4:	e7d9      	b.n	802015a <__multiply+0x4e>
 80201a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80201aa:	f1ba 0f00 	cmp.w	sl, #0
 80201ae:	d01f      	beq.n	80201f0 <__multiply+0xe4>
 80201b0:	46c4      	mov	ip, r8
 80201b2:	46a1      	mov	r9, r4
 80201b4:	2700      	movs	r7, #0
 80201b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80201ba:	f8d9 3000 	ldr.w	r3, [r9]
 80201be:	fa1f fb82 	uxth.w	fp, r2
 80201c2:	b29b      	uxth	r3, r3
 80201c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80201c8:	443b      	add	r3, r7
 80201ca:	f8d9 7000 	ldr.w	r7, [r9]
 80201ce:	0c12      	lsrs	r2, r2, #16
 80201d0:	0c3f      	lsrs	r7, r7, #16
 80201d2:	fb0a 7202 	mla	r2, sl, r2, r7
 80201d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80201da:	b29b      	uxth	r3, r3
 80201dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80201e0:	4565      	cmp	r5, ip
 80201e2:	f849 3b04 	str.w	r3, [r9], #4
 80201e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80201ea:	d8e4      	bhi.n	80201b6 <__multiply+0xaa>
 80201ec:	9b01      	ldr	r3, [sp, #4]
 80201ee:	50e7      	str	r7, [r4, r3]
 80201f0:	9b03      	ldr	r3, [sp, #12]
 80201f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80201f6:	3104      	adds	r1, #4
 80201f8:	f1b9 0f00 	cmp.w	r9, #0
 80201fc:	d020      	beq.n	8020240 <__multiply+0x134>
 80201fe:	6823      	ldr	r3, [r4, #0]
 8020200:	4647      	mov	r7, r8
 8020202:	46a4      	mov	ip, r4
 8020204:	f04f 0a00 	mov.w	sl, #0
 8020208:	f8b7 b000 	ldrh.w	fp, [r7]
 802020c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8020210:	fb09 220b 	mla	r2, r9, fp, r2
 8020214:	4452      	add	r2, sl
 8020216:	b29b      	uxth	r3, r3
 8020218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802021c:	f84c 3b04 	str.w	r3, [ip], #4
 8020220:	f857 3b04 	ldr.w	r3, [r7], #4
 8020224:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020228:	f8bc 3000 	ldrh.w	r3, [ip]
 802022c:	fb09 330a 	mla	r3, r9, sl, r3
 8020230:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8020234:	42bd      	cmp	r5, r7
 8020236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802023a:	d8e5      	bhi.n	8020208 <__multiply+0xfc>
 802023c:	9a01      	ldr	r2, [sp, #4]
 802023e:	50a3      	str	r3, [r4, r2]
 8020240:	3404      	adds	r4, #4
 8020242:	e79f      	b.n	8020184 <__multiply+0x78>
 8020244:	3e01      	subs	r6, #1
 8020246:	e7a1      	b.n	802018c <__multiply+0x80>
 8020248:	080221e8 	.word	0x080221e8
 802024c:	080221f9 	.word	0x080221f9

08020250 <__pow5mult>:
 8020250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020254:	4615      	mov	r5, r2
 8020256:	f012 0203 	ands.w	r2, r2, #3
 802025a:	4607      	mov	r7, r0
 802025c:	460e      	mov	r6, r1
 802025e:	d007      	beq.n	8020270 <__pow5mult+0x20>
 8020260:	4c25      	ldr	r4, [pc, #148]	@ (80202f8 <__pow5mult+0xa8>)
 8020262:	3a01      	subs	r2, #1
 8020264:	2300      	movs	r3, #0
 8020266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802026a:	f7ff fea7 	bl	801ffbc <__multadd>
 802026e:	4606      	mov	r6, r0
 8020270:	10ad      	asrs	r5, r5, #2
 8020272:	d03d      	beq.n	80202f0 <__pow5mult+0xa0>
 8020274:	69fc      	ldr	r4, [r7, #28]
 8020276:	b97c      	cbnz	r4, 8020298 <__pow5mult+0x48>
 8020278:	2010      	movs	r0, #16
 802027a:	f7ff fd87 	bl	801fd8c <malloc>
 802027e:	4602      	mov	r2, r0
 8020280:	61f8      	str	r0, [r7, #28]
 8020282:	b928      	cbnz	r0, 8020290 <__pow5mult+0x40>
 8020284:	4b1d      	ldr	r3, [pc, #116]	@ (80202fc <__pow5mult+0xac>)
 8020286:	481e      	ldr	r0, [pc, #120]	@ (8020300 <__pow5mult+0xb0>)
 8020288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802028c:	f000 fbb8 	bl	8020a00 <__assert_func>
 8020290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020294:	6004      	str	r4, [r0, #0]
 8020296:	60c4      	str	r4, [r0, #12]
 8020298:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802029c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80202a0:	b94c      	cbnz	r4, 80202b6 <__pow5mult+0x66>
 80202a2:	f240 2171 	movw	r1, #625	@ 0x271
 80202a6:	4638      	mov	r0, r7
 80202a8:	f7ff ff1a 	bl	80200e0 <__i2b>
 80202ac:	2300      	movs	r3, #0
 80202ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80202b2:	4604      	mov	r4, r0
 80202b4:	6003      	str	r3, [r0, #0]
 80202b6:	f04f 0900 	mov.w	r9, #0
 80202ba:	07eb      	lsls	r3, r5, #31
 80202bc:	d50a      	bpl.n	80202d4 <__pow5mult+0x84>
 80202be:	4631      	mov	r1, r6
 80202c0:	4622      	mov	r2, r4
 80202c2:	4638      	mov	r0, r7
 80202c4:	f7ff ff22 	bl	802010c <__multiply>
 80202c8:	4631      	mov	r1, r6
 80202ca:	4680      	mov	r8, r0
 80202cc:	4638      	mov	r0, r7
 80202ce:	f7ff fe53 	bl	801ff78 <_Bfree>
 80202d2:	4646      	mov	r6, r8
 80202d4:	106d      	asrs	r5, r5, #1
 80202d6:	d00b      	beq.n	80202f0 <__pow5mult+0xa0>
 80202d8:	6820      	ldr	r0, [r4, #0]
 80202da:	b938      	cbnz	r0, 80202ec <__pow5mult+0x9c>
 80202dc:	4622      	mov	r2, r4
 80202de:	4621      	mov	r1, r4
 80202e0:	4638      	mov	r0, r7
 80202e2:	f7ff ff13 	bl	802010c <__multiply>
 80202e6:	6020      	str	r0, [r4, #0]
 80202e8:	f8c0 9000 	str.w	r9, [r0]
 80202ec:	4604      	mov	r4, r0
 80202ee:	e7e4      	b.n	80202ba <__pow5mult+0x6a>
 80202f0:	4630      	mov	r0, r6
 80202f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80202f6:	bf00      	nop
 80202f8:	080222ac 	.word	0x080222ac
 80202fc:	08022179 	.word	0x08022179
 8020300:	080221f9 	.word	0x080221f9

08020304 <__lshift>:
 8020304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020308:	460c      	mov	r4, r1
 802030a:	6849      	ldr	r1, [r1, #4]
 802030c:	6923      	ldr	r3, [r4, #16]
 802030e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020312:	68a3      	ldr	r3, [r4, #8]
 8020314:	4607      	mov	r7, r0
 8020316:	4691      	mov	r9, r2
 8020318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802031c:	f108 0601 	add.w	r6, r8, #1
 8020320:	42b3      	cmp	r3, r6
 8020322:	db0b      	blt.n	802033c <__lshift+0x38>
 8020324:	4638      	mov	r0, r7
 8020326:	f7ff fde7 	bl	801fef8 <_Balloc>
 802032a:	4605      	mov	r5, r0
 802032c:	b948      	cbnz	r0, 8020342 <__lshift+0x3e>
 802032e:	4602      	mov	r2, r0
 8020330:	4b28      	ldr	r3, [pc, #160]	@ (80203d4 <__lshift+0xd0>)
 8020332:	4829      	ldr	r0, [pc, #164]	@ (80203d8 <__lshift+0xd4>)
 8020334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020338:	f000 fb62 	bl	8020a00 <__assert_func>
 802033c:	3101      	adds	r1, #1
 802033e:	005b      	lsls	r3, r3, #1
 8020340:	e7ee      	b.n	8020320 <__lshift+0x1c>
 8020342:	2300      	movs	r3, #0
 8020344:	f100 0114 	add.w	r1, r0, #20
 8020348:	f100 0210 	add.w	r2, r0, #16
 802034c:	4618      	mov	r0, r3
 802034e:	4553      	cmp	r3, sl
 8020350:	db33      	blt.n	80203ba <__lshift+0xb6>
 8020352:	6920      	ldr	r0, [r4, #16]
 8020354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020358:	f104 0314 	add.w	r3, r4, #20
 802035c:	f019 091f 	ands.w	r9, r9, #31
 8020360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020368:	d02b      	beq.n	80203c2 <__lshift+0xbe>
 802036a:	f1c9 0e20 	rsb	lr, r9, #32
 802036e:	468a      	mov	sl, r1
 8020370:	2200      	movs	r2, #0
 8020372:	6818      	ldr	r0, [r3, #0]
 8020374:	fa00 f009 	lsl.w	r0, r0, r9
 8020378:	4310      	orrs	r0, r2
 802037a:	f84a 0b04 	str.w	r0, [sl], #4
 802037e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020382:	459c      	cmp	ip, r3
 8020384:	fa22 f20e 	lsr.w	r2, r2, lr
 8020388:	d8f3      	bhi.n	8020372 <__lshift+0x6e>
 802038a:	ebac 0304 	sub.w	r3, ip, r4
 802038e:	3b15      	subs	r3, #21
 8020390:	f023 0303 	bic.w	r3, r3, #3
 8020394:	3304      	adds	r3, #4
 8020396:	f104 0015 	add.w	r0, r4, #21
 802039a:	4560      	cmp	r0, ip
 802039c:	bf88      	it	hi
 802039e:	2304      	movhi	r3, #4
 80203a0:	50ca      	str	r2, [r1, r3]
 80203a2:	b10a      	cbz	r2, 80203a8 <__lshift+0xa4>
 80203a4:	f108 0602 	add.w	r6, r8, #2
 80203a8:	3e01      	subs	r6, #1
 80203aa:	4638      	mov	r0, r7
 80203ac:	612e      	str	r6, [r5, #16]
 80203ae:	4621      	mov	r1, r4
 80203b0:	f7ff fde2 	bl	801ff78 <_Bfree>
 80203b4:	4628      	mov	r0, r5
 80203b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80203be:	3301      	adds	r3, #1
 80203c0:	e7c5      	b.n	802034e <__lshift+0x4a>
 80203c2:	3904      	subs	r1, #4
 80203c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80203c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80203cc:	459c      	cmp	ip, r3
 80203ce:	d8f9      	bhi.n	80203c4 <__lshift+0xc0>
 80203d0:	e7ea      	b.n	80203a8 <__lshift+0xa4>
 80203d2:	bf00      	nop
 80203d4:	080221e8 	.word	0x080221e8
 80203d8:	080221f9 	.word	0x080221f9

080203dc <__mcmp>:
 80203dc:	690a      	ldr	r2, [r1, #16]
 80203de:	4603      	mov	r3, r0
 80203e0:	6900      	ldr	r0, [r0, #16]
 80203e2:	1a80      	subs	r0, r0, r2
 80203e4:	b530      	push	{r4, r5, lr}
 80203e6:	d10e      	bne.n	8020406 <__mcmp+0x2a>
 80203e8:	3314      	adds	r3, #20
 80203ea:	3114      	adds	r1, #20
 80203ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80203f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80203f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80203f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80203fc:	4295      	cmp	r5, r2
 80203fe:	d003      	beq.n	8020408 <__mcmp+0x2c>
 8020400:	d205      	bcs.n	802040e <__mcmp+0x32>
 8020402:	f04f 30ff 	mov.w	r0, #4294967295
 8020406:	bd30      	pop	{r4, r5, pc}
 8020408:	42a3      	cmp	r3, r4
 802040a:	d3f3      	bcc.n	80203f4 <__mcmp+0x18>
 802040c:	e7fb      	b.n	8020406 <__mcmp+0x2a>
 802040e:	2001      	movs	r0, #1
 8020410:	e7f9      	b.n	8020406 <__mcmp+0x2a>
	...

08020414 <__mdiff>:
 8020414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020418:	4689      	mov	r9, r1
 802041a:	4606      	mov	r6, r0
 802041c:	4611      	mov	r1, r2
 802041e:	4648      	mov	r0, r9
 8020420:	4614      	mov	r4, r2
 8020422:	f7ff ffdb 	bl	80203dc <__mcmp>
 8020426:	1e05      	subs	r5, r0, #0
 8020428:	d112      	bne.n	8020450 <__mdiff+0x3c>
 802042a:	4629      	mov	r1, r5
 802042c:	4630      	mov	r0, r6
 802042e:	f7ff fd63 	bl	801fef8 <_Balloc>
 8020432:	4602      	mov	r2, r0
 8020434:	b928      	cbnz	r0, 8020442 <__mdiff+0x2e>
 8020436:	4b3f      	ldr	r3, [pc, #252]	@ (8020534 <__mdiff+0x120>)
 8020438:	f240 2137 	movw	r1, #567	@ 0x237
 802043c:	483e      	ldr	r0, [pc, #248]	@ (8020538 <__mdiff+0x124>)
 802043e:	f000 fadf 	bl	8020a00 <__assert_func>
 8020442:	2301      	movs	r3, #1
 8020444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020448:	4610      	mov	r0, r2
 802044a:	b003      	add	sp, #12
 802044c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020450:	bfbc      	itt	lt
 8020452:	464b      	movlt	r3, r9
 8020454:	46a1      	movlt	r9, r4
 8020456:	4630      	mov	r0, r6
 8020458:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802045c:	bfba      	itte	lt
 802045e:	461c      	movlt	r4, r3
 8020460:	2501      	movlt	r5, #1
 8020462:	2500      	movge	r5, #0
 8020464:	f7ff fd48 	bl	801fef8 <_Balloc>
 8020468:	4602      	mov	r2, r0
 802046a:	b918      	cbnz	r0, 8020474 <__mdiff+0x60>
 802046c:	4b31      	ldr	r3, [pc, #196]	@ (8020534 <__mdiff+0x120>)
 802046e:	f240 2145 	movw	r1, #581	@ 0x245
 8020472:	e7e3      	b.n	802043c <__mdiff+0x28>
 8020474:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020478:	6926      	ldr	r6, [r4, #16]
 802047a:	60c5      	str	r5, [r0, #12]
 802047c:	f109 0310 	add.w	r3, r9, #16
 8020480:	f109 0514 	add.w	r5, r9, #20
 8020484:	f104 0e14 	add.w	lr, r4, #20
 8020488:	f100 0b14 	add.w	fp, r0, #20
 802048c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020490:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8020494:	9301      	str	r3, [sp, #4]
 8020496:	46d9      	mov	r9, fp
 8020498:	f04f 0c00 	mov.w	ip, #0
 802049c:	9b01      	ldr	r3, [sp, #4]
 802049e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80204a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80204a6:	9301      	str	r3, [sp, #4]
 80204a8:	fa1f f38a 	uxth.w	r3, sl
 80204ac:	4619      	mov	r1, r3
 80204ae:	b283      	uxth	r3, r0
 80204b0:	1acb      	subs	r3, r1, r3
 80204b2:	0c00      	lsrs	r0, r0, #16
 80204b4:	4463      	add	r3, ip
 80204b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80204ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80204be:	b29b      	uxth	r3, r3
 80204c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80204c4:	4576      	cmp	r6, lr
 80204c6:	f849 3b04 	str.w	r3, [r9], #4
 80204ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80204ce:	d8e5      	bhi.n	802049c <__mdiff+0x88>
 80204d0:	1b33      	subs	r3, r6, r4
 80204d2:	3b15      	subs	r3, #21
 80204d4:	f023 0303 	bic.w	r3, r3, #3
 80204d8:	3415      	adds	r4, #21
 80204da:	3304      	adds	r3, #4
 80204dc:	42a6      	cmp	r6, r4
 80204de:	bf38      	it	cc
 80204e0:	2304      	movcc	r3, #4
 80204e2:	441d      	add	r5, r3
 80204e4:	445b      	add	r3, fp
 80204e6:	461e      	mov	r6, r3
 80204e8:	462c      	mov	r4, r5
 80204ea:	4544      	cmp	r4, r8
 80204ec:	d30e      	bcc.n	802050c <__mdiff+0xf8>
 80204ee:	f108 0103 	add.w	r1, r8, #3
 80204f2:	1b49      	subs	r1, r1, r5
 80204f4:	f021 0103 	bic.w	r1, r1, #3
 80204f8:	3d03      	subs	r5, #3
 80204fa:	45a8      	cmp	r8, r5
 80204fc:	bf38      	it	cc
 80204fe:	2100      	movcc	r1, #0
 8020500:	440b      	add	r3, r1
 8020502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020506:	b191      	cbz	r1, 802052e <__mdiff+0x11a>
 8020508:	6117      	str	r7, [r2, #16]
 802050a:	e79d      	b.n	8020448 <__mdiff+0x34>
 802050c:	f854 1b04 	ldr.w	r1, [r4], #4
 8020510:	46e6      	mov	lr, ip
 8020512:	0c08      	lsrs	r0, r1, #16
 8020514:	fa1c fc81 	uxtah	ip, ip, r1
 8020518:	4471      	add	r1, lr
 802051a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802051e:	b289      	uxth	r1, r1
 8020520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020524:	f846 1b04 	str.w	r1, [r6], #4
 8020528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802052c:	e7dd      	b.n	80204ea <__mdiff+0xd6>
 802052e:	3f01      	subs	r7, #1
 8020530:	e7e7      	b.n	8020502 <__mdiff+0xee>
 8020532:	bf00      	nop
 8020534:	080221e8 	.word	0x080221e8
 8020538:	080221f9 	.word	0x080221f9

0802053c <__d2b>:
 802053c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020540:	460f      	mov	r7, r1
 8020542:	2101      	movs	r1, #1
 8020544:	ec59 8b10 	vmov	r8, r9, d0
 8020548:	4616      	mov	r6, r2
 802054a:	f7ff fcd5 	bl	801fef8 <_Balloc>
 802054e:	4604      	mov	r4, r0
 8020550:	b930      	cbnz	r0, 8020560 <__d2b+0x24>
 8020552:	4602      	mov	r2, r0
 8020554:	4b23      	ldr	r3, [pc, #140]	@ (80205e4 <__d2b+0xa8>)
 8020556:	4824      	ldr	r0, [pc, #144]	@ (80205e8 <__d2b+0xac>)
 8020558:	f240 310f 	movw	r1, #783	@ 0x30f
 802055c:	f000 fa50 	bl	8020a00 <__assert_func>
 8020560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020568:	b10d      	cbz	r5, 802056e <__d2b+0x32>
 802056a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802056e:	9301      	str	r3, [sp, #4]
 8020570:	f1b8 0300 	subs.w	r3, r8, #0
 8020574:	d023      	beq.n	80205be <__d2b+0x82>
 8020576:	4668      	mov	r0, sp
 8020578:	9300      	str	r3, [sp, #0]
 802057a:	f7ff fd84 	bl	8020086 <__lo0bits>
 802057e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020582:	b1d0      	cbz	r0, 80205ba <__d2b+0x7e>
 8020584:	f1c0 0320 	rsb	r3, r0, #32
 8020588:	fa02 f303 	lsl.w	r3, r2, r3
 802058c:	430b      	orrs	r3, r1
 802058e:	40c2      	lsrs	r2, r0
 8020590:	6163      	str	r3, [r4, #20]
 8020592:	9201      	str	r2, [sp, #4]
 8020594:	9b01      	ldr	r3, [sp, #4]
 8020596:	61a3      	str	r3, [r4, #24]
 8020598:	2b00      	cmp	r3, #0
 802059a:	bf0c      	ite	eq
 802059c:	2201      	moveq	r2, #1
 802059e:	2202      	movne	r2, #2
 80205a0:	6122      	str	r2, [r4, #16]
 80205a2:	b1a5      	cbz	r5, 80205ce <__d2b+0x92>
 80205a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80205a8:	4405      	add	r5, r0
 80205aa:	603d      	str	r5, [r7, #0]
 80205ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80205b0:	6030      	str	r0, [r6, #0]
 80205b2:	4620      	mov	r0, r4
 80205b4:	b003      	add	sp, #12
 80205b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205ba:	6161      	str	r1, [r4, #20]
 80205bc:	e7ea      	b.n	8020594 <__d2b+0x58>
 80205be:	a801      	add	r0, sp, #4
 80205c0:	f7ff fd61 	bl	8020086 <__lo0bits>
 80205c4:	9b01      	ldr	r3, [sp, #4]
 80205c6:	6163      	str	r3, [r4, #20]
 80205c8:	3020      	adds	r0, #32
 80205ca:	2201      	movs	r2, #1
 80205cc:	e7e8      	b.n	80205a0 <__d2b+0x64>
 80205ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80205d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80205d6:	6038      	str	r0, [r7, #0]
 80205d8:	6918      	ldr	r0, [r3, #16]
 80205da:	f7ff fd35 	bl	8020048 <__hi0bits>
 80205de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80205e2:	e7e5      	b.n	80205b0 <__d2b+0x74>
 80205e4:	080221e8 	.word	0x080221e8
 80205e8:	080221f9 	.word	0x080221f9

080205ec <__sfputc_r>:
 80205ec:	6893      	ldr	r3, [r2, #8]
 80205ee:	3b01      	subs	r3, #1
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	b410      	push	{r4}
 80205f4:	6093      	str	r3, [r2, #8]
 80205f6:	da08      	bge.n	802060a <__sfputc_r+0x1e>
 80205f8:	6994      	ldr	r4, [r2, #24]
 80205fa:	42a3      	cmp	r3, r4
 80205fc:	db01      	blt.n	8020602 <__sfputc_r+0x16>
 80205fe:	290a      	cmp	r1, #10
 8020600:	d103      	bne.n	802060a <__sfputc_r+0x1e>
 8020602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020606:	f7fe bbea 	b.w	801edde <__swbuf_r>
 802060a:	6813      	ldr	r3, [r2, #0]
 802060c:	1c58      	adds	r0, r3, #1
 802060e:	6010      	str	r0, [r2, #0]
 8020610:	7019      	strb	r1, [r3, #0]
 8020612:	4608      	mov	r0, r1
 8020614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020618:	4770      	bx	lr

0802061a <__sfputs_r>:
 802061a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802061c:	4606      	mov	r6, r0
 802061e:	460f      	mov	r7, r1
 8020620:	4614      	mov	r4, r2
 8020622:	18d5      	adds	r5, r2, r3
 8020624:	42ac      	cmp	r4, r5
 8020626:	d101      	bne.n	802062c <__sfputs_r+0x12>
 8020628:	2000      	movs	r0, #0
 802062a:	e007      	b.n	802063c <__sfputs_r+0x22>
 802062c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020630:	463a      	mov	r2, r7
 8020632:	4630      	mov	r0, r6
 8020634:	f7ff ffda 	bl	80205ec <__sfputc_r>
 8020638:	1c43      	adds	r3, r0, #1
 802063a:	d1f3      	bne.n	8020624 <__sfputs_r+0xa>
 802063c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020640 <_vfiprintf_r>:
 8020640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020644:	460d      	mov	r5, r1
 8020646:	b09d      	sub	sp, #116	@ 0x74
 8020648:	4614      	mov	r4, r2
 802064a:	4698      	mov	r8, r3
 802064c:	4606      	mov	r6, r0
 802064e:	b118      	cbz	r0, 8020658 <_vfiprintf_r+0x18>
 8020650:	6a03      	ldr	r3, [r0, #32]
 8020652:	b90b      	cbnz	r3, 8020658 <_vfiprintf_r+0x18>
 8020654:	f7fe fad2 	bl	801ebfc <__sinit>
 8020658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802065a:	07d9      	lsls	r1, r3, #31
 802065c:	d405      	bmi.n	802066a <_vfiprintf_r+0x2a>
 802065e:	89ab      	ldrh	r3, [r5, #12]
 8020660:	059a      	lsls	r2, r3, #22
 8020662:	d402      	bmi.n	802066a <_vfiprintf_r+0x2a>
 8020664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020666:	f7fe fcdc 	bl	801f022 <__retarget_lock_acquire_recursive>
 802066a:	89ab      	ldrh	r3, [r5, #12]
 802066c:	071b      	lsls	r3, r3, #28
 802066e:	d501      	bpl.n	8020674 <_vfiprintf_r+0x34>
 8020670:	692b      	ldr	r3, [r5, #16]
 8020672:	b99b      	cbnz	r3, 802069c <_vfiprintf_r+0x5c>
 8020674:	4629      	mov	r1, r5
 8020676:	4630      	mov	r0, r6
 8020678:	f7fe fbf0 	bl	801ee5c <__swsetup_r>
 802067c:	b170      	cbz	r0, 802069c <_vfiprintf_r+0x5c>
 802067e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020680:	07dc      	lsls	r4, r3, #31
 8020682:	d504      	bpl.n	802068e <_vfiprintf_r+0x4e>
 8020684:	f04f 30ff 	mov.w	r0, #4294967295
 8020688:	b01d      	add	sp, #116	@ 0x74
 802068a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802068e:	89ab      	ldrh	r3, [r5, #12]
 8020690:	0598      	lsls	r0, r3, #22
 8020692:	d4f7      	bmi.n	8020684 <_vfiprintf_r+0x44>
 8020694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020696:	f7fe fcc5 	bl	801f024 <__retarget_lock_release_recursive>
 802069a:	e7f3      	b.n	8020684 <_vfiprintf_r+0x44>
 802069c:	2300      	movs	r3, #0
 802069e:	9309      	str	r3, [sp, #36]	@ 0x24
 80206a0:	2320      	movs	r3, #32
 80206a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80206a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80206aa:	2330      	movs	r3, #48	@ 0x30
 80206ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802085c <_vfiprintf_r+0x21c>
 80206b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80206b4:	f04f 0901 	mov.w	r9, #1
 80206b8:	4623      	mov	r3, r4
 80206ba:	469a      	mov	sl, r3
 80206bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80206c0:	b10a      	cbz	r2, 80206c6 <_vfiprintf_r+0x86>
 80206c2:	2a25      	cmp	r2, #37	@ 0x25
 80206c4:	d1f9      	bne.n	80206ba <_vfiprintf_r+0x7a>
 80206c6:	ebba 0b04 	subs.w	fp, sl, r4
 80206ca:	d00b      	beq.n	80206e4 <_vfiprintf_r+0xa4>
 80206cc:	465b      	mov	r3, fp
 80206ce:	4622      	mov	r2, r4
 80206d0:	4629      	mov	r1, r5
 80206d2:	4630      	mov	r0, r6
 80206d4:	f7ff ffa1 	bl	802061a <__sfputs_r>
 80206d8:	3001      	adds	r0, #1
 80206da:	f000 80a7 	beq.w	802082c <_vfiprintf_r+0x1ec>
 80206de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80206e0:	445a      	add	r2, fp
 80206e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80206e4:	f89a 3000 	ldrb.w	r3, [sl]
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	f000 809f 	beq.w	802082c <_vfiprintf_r+0x1ec>
 80206ee:	2300      	movs	r3, #0
 80206f0:	f04f 32ff 	mov.w	r2, #4294967295
 80206f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80206f8:	f10a 0a01 	add.w	sl, sl, #1
 80206fc:	9304      	str	r3, [sp, #16]
 80206fe:	9307      	str	r3, [sp, #28]
 8020700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020704:	931a      	str	r3, [sp, #104]	@ 0x68
 8020706:	4654      	mov	r4, sl
 8020708:	2205      	movs	r2, #5
 802070a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802070e:	4853      	ldr	r0, [pc, #332]	@ (802085c <_vfiprintf_r+0x21c>)
 8020710:	f7df fd5e 	bl	80001d0 <memchr>
 8020714:	9a04      	ldr	r2, [sp, #16]
 8020716:	b9d8      	cbnz	r0, 8020750 <_vfiprintf_r+0x110>
 8020718:	06d1      	lsls	r1, r2, #27
 802071a:	bf44      	itt	mi
 802071c:	2320      	movmi	r3, #32
 802071e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020722:	0713      	lsls	r3, r2, #28
 8020724:	bf44      	itt	mi
 8020726:	232b      	movmi	r3, #43	@ 0x2b
 8020728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802072c:	f89a 3000 	ldrb.w	r3, [sl]
 8020730:	2b2a      	cmp	r3, #42	@ 0x2a
 8020732:	d015      	beq.n	8020760 <_vfiprintf_r+0x120>
 8020734:	9a07      	ldr	r2, [sp, #28]
 8020736:	4654      	mov	r4, sl
 8020738:	2000      	movs	r0, #0
 802073a:	f04f 0c0a 	mov.w	ip, #10
 802073e:	4621      	mov	r1, r4
 8020740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020744:	3b30      	subs	r3, #48	@ 0x30
 8020746:	2b09      	cmp	r3, #9
 8020748:	d94b      	bls.n	80207e2 <_vfiprintf_r+0x1a2>
 802074a:	b1b0      	cbz	r0, 802077a <_vfiprintf_r+0x13a>
 802074c:	9207      	str	r2, [sp, #28]
 802074e:	e014      	b.n	802077a <_vfiprintf_r+0x13a>
 8020750:	eba0 0308 	sub.w	r3, r0, r8
 8020754:	fa09 f303 	lsl.w	r3, r9, r3
 8020758:	4313      	orrs	r3, r2
 802075a:	9304      	str	r3, [sp, #16]
 802075c:	46a2      	mov	sl, r4
 802075e:	e7d2      	b.n	8020706 <_vfiprintf_r+0xc6>
 8020760:	9b03      	ldr	r3, [sp, #12]
 8020762:	1d19      	adds	r1, r3, #4
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	9103      	str	r1, [sp, #12]
 8020768:	2b00      	cmp	r3, #0
 802076a:	bfbb      	ittet	lt
 802076c:	425b      	neglt	r3, r3
 802076e:	f042 0202 	orrlt.w	r2, r2, #2
 8020772:	9307      	strge	r3, [sp, #28]
 8020774:	9307      	strlt	r3, [sp, #28]
 8020776:	bfb8      	it	lt
 8020778:	9204      	strlt	r2, [sp, #16]
 802077a:	7823      	ldrb	r3, [r4, #0]
 802077c:	2b2e      	cmp	r3, #46	@ 0x2e
 802077e:	d10a      	bne.n	8020796 <_vfiprintf_r+0x156>
 8020780:	7863      	ldrb	r3, [r4, #1]
 8020782:	2b2a      	cmp	r3, #42	@ 0x2a
 8020784:	d132      	bne.n	80207ec <_vfiprintf_r+0x1ac>
 8020786:	9b03      	ldr	r3, [sp, #12]
 8020788:	1d1a      	adds	r2, r3, #4
 802078a:	681b      	ldr	r3, [r3, #0]
 802078c:	9203      	str	r2, [sp, #12]
 802078e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020792:	3402      	adds	r4, #2
 8020794:	9305      	str	r3, [sp, #20]
 8020796:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802086c <_vfiprintf_r+0x22c>
 802079a:	7821      	ldrb	r1, [r4, #0]
 802079c:	2203      	movs	r2, #3
 802079e:	4650      	mov	r0, sl
 80207a0:	f7df fd16 	bl	80001d0 <memchr>
 80207a4:	b138      	cbz	r0, 80207b6 <_vfiprintf_r+0x176>
 80207a6:	9b04      	ldr	r3, [sp, #16]
 80207a8:	eba0 000a 	sub.w	r0, r0, sl
 80207ac:	2240      	movs	r2, #64	@ 0x40
 80207ae:	4082      	lsls	r2, r0
 80207b0:	4313      	orrs	r3, r2
 80207b2:	3401      	adds	r4, #1
 80207b4:	9304      	str	r3, [sp, #16]
 80207b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207ba:	4829      	ldr	r0, [pc, #164]	@ (8020860 <_vfiprintf_r+0x220>)
 80207bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80207c0:	2206      	movs	r2, #6
 80207c2:	f7df fd05 	bl	80001d0 <memchr>
 80207c6:	2800      	cmp	r0, #0
 80207c8:	d03f      	beq.n	802084a <_vfiprintf_r+0x20a>
 80207ca:	4b26      	ldr	r3, [pc, #152]	@ (8020864 <_vfiprintf_r+0x224>)
 80207cc:	bb1b      	cbnz	r3, 8020816 <_vfiprintf_r+0x1d6>
 80207ce:	9b03      	ldr	r3, [sp, #12]
 80207d0:	3307      	adds	r3, #7
 80207d2:	f023 0307 	bic.w	r3, r3, #7
 80207d6:	3308      	adds	r3, #8
 80207d8:	9303      	str	r3, [sp, #12]
 80207da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207dc:	443b      	add	r3, r7
 80207de:	9309      	str	r3, [sp, #36]	@ 0x24
 80207e0:	e76a      	b.n	80206b8 <_vfiprintf_r+0x78>
 80207e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80207e6:	460c      	mov	r4, r1
 80207e8:	2001      	movs	r0, #1
 80207ea:	e7a8      	b.n	802073e <_vfiprintf_r+0xfe>
 80207ec:	2300      	movs	r3, #0
 80207ee:	3401      	adds	r4, #1
 80207f0:	9305      	str	r3, [sp, #20]
 80207f2:	4619      	mov	r1, r3
 80207f4:	f04f 0c0a 	mov.w	ip, #10
 80207f8:	4620      	mov	r0, r4
 80207fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80207fe:	3a30      	subs	r2, #48	@ 0x30
 8020800:	2a09      	cmp	r2, #9
 8020802:	d903      	bls.n	802080c <_vfiprintf_r+0x1cc>
 8020804:	2b00      	cmp	r3, #0
 8020806:	d0c6      	beq.n	8020796 <_vfiprintf_r+0x156>
 8020808:	9105      	str	r1, [sp, #20]
 802080a:	e7c4      	b.n	8020796 <_vfiprintf_r+0x156>
 802080c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020810:	4604      	mov	r4, r0
 8020812:	2301      	movs	r3, #1
 8020814:	e7f0      	b.n	80207f8 <_vfiprintf_r+0x1b8>
 8020816:	ab03      	add	r3, sp, #12
 8020818:	9300      	str	r3, [sp, #0]
 802081a:	462a      	mov	r2, r5
 802081c:	4b12      	ldr	r3, [pc, #72]	@ (8020868 <_vfiprintf_r+0x228>)
 802081e:	a904      	add	r1, sp, #16
 8020820:	4630      	mov	r0, r6
 8020822:	f7fd fce9 	bl	801e1f8 <_printf_float>
 8020826:	4607      	mov	r7, r0
 8020828:	1c78      	adds	r0, r7, #1
 802082a:	d1d6      	bne.n	80207da <_vfiprintf_r+0x19a>
 802082c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802082e:	07d9      	lsls	r1, r3, #31
 8020830:	d405      	bmi.n	802083e <_vfiprintf_r+0x1fe>
 8020832:	89ab      	ldrh	r3, [r5, #12]
 8020834:	059a      	lsls	r2, r3, #22
 8020836:	d402      	bmi.n	802083e <_vfiprintf_r+0x1fe>
 8020838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802083a:	f7fe fbf3 	bl	801f024 <__retarget_lock_release_recursive>
 802083e:	89ab      	ldrh	r3, [r5, #12]
 8020840:	065b      	lsls	r3, r3, #25
 8020842:	f53f af1f 	bmi.w	8020684 <_vfiprintf_r+0x44>
 8020846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020848:	e71e      	b.n	8020688 <_vfiprintf_r+0x48>
 802084a:	ab03      	add	r3, sp, #12
 802084c:	9300      	str	r3, [sp, #0]
 802084e:	462a      	mov	r2, r5
 8020850:	4b05      	ldr	r3, [pc, #20]	@ (8020868 <_vfiprintf_r+0x228>)
 8020852:	a904      	add	r1, sp, #16
 8020854:	4630      	mov	r0, r6
 8020856:	f7fd ff67 	bl	801e728 <_printf_i>
 802085a:	e7e4      	b.n	8020826 <_vfiprintf_r+0x1e6>
 802085c:	08022252 	.word	0x08022252
 8020860:	0802225c 	.word	0x0802225c
 8020864:	0801e1f9 	.word	0x0801e1f9
 8020868:	0802061b 	.word	0x0802061b
 802086c:	08022258 	.word	0x08022258

08020870 <__swhatbuf_r>:
 8020870:	b570      	push	{r4, r5, r6, lr}
 8020872:	460c      	mov	r4, r1
 8020874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020878:	2900      	cmp	r1, #0
 802087a:	b096      	sub	sp, #88	@ 0x58
 802087c:	4615      	mov	r5, r2
 802087e:	461e      	mov	r6, r3
 8020880:	da0d      	bge.n	802089e <__swhatbuf_r+0x2e>
 8020882:	89a3      	ldrh	r3, [r4, #12]
 8020884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020888:	f04f 0100 	mov.w	r1, #0
 802088c:	bf14      	ite	ne
 802088e:	2340      	movne	r3, #64	@ 0x40
 8020890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020894:	2000      	movs	r0, #0
 8020896:	6031      	str	r1, [r6, #0]
 8020898:	602b      	str	r3, [r5, #0]
 802089a:	b016      	add	sp, #88	@ 0x58
 802089c:	bd70      	pop	{r4, r5, r6, pc}
 802089e:	466a      	mov	r2, sp
 80208a0:	f000 f87c 	bl	802099c <_fstat_r>
 80208a4:	2800      	cmp	r0, #0
 80208a6:	dbec      	blt.n	8020882 <__swhatbuf_r+0x12>
 80208a8:	9901      	ldr	r1, [sp, #4]
 80208aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80208ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80208b2:	4259      	negs	r1, r3
 80208b4:	4159      	adcs	r1, r3
 80208b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80208ba:	e7eb      	b.n	8020894 <__swhatbuf_r+0x24>

080208bc <__smakebuf_r>:
 80208bc:	898b      	ldrh	r3, [r1, #12]
 80208be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80208c0:	079d      	lsls	r5, r3, #30
 80208c2:	4606      	mov	r6, r0
 80208c4:	460c      	mov	r4, r1
 80208c6:	d507      	bpl.n	80208d8 <__smakebuf_r+0x1c>
 80208c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80208cc:	6023      	str	r3, [r4, #0]
 80208ce:	6123      	str	r3, [r4, #16]
 80208d0:	2301      	movs	r3, #1
 80208d2:	6163      	str	r3, [r4, #20]
 80208d4:	b003      	add	sp, #12
 80208d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208d8:	ab01      	add	r3, sp, #4
 80208da:	466a      	mov	r2, sp
 80208dc:	f7ff ffc8 	bl	8020870 <__swhatbuf_r>
 80208e0:	9f00      	ldr	r7, [sp, #0]
 80208e2:	4605      	mov	r5, r0
 80208e4:	4639      	mov	r1, r7
 80208e6:	4630      	mov	r0, r6
 80208e8:	f7ff fa7a 	bl	801fde0 <_malloc_r>
 80208ec:	b948      	cbnz	r0, 8020902 <__smakebuf_r+0x46>
 80208ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80208f2:	059a      	lsls	r2, r3, #22
 80208f4:	d4ee      	bmi.n	80208d4 <__smakebuf_r+0x18>
 80208f6:	f023 0303 	bic.w	r3, r3, #3
 80208fa:	f043 0302 	orr.w	r3, r3, #2
 80208fe:	81a3      	strh	r3, [r4, #12]
 8020900:	e7e2      	b.n	80208c8 <__smakebuf_r+0xc>
 8020902:	89a3      	ldrh	r3, [r4, #12]
 8020904:	6020      	str	r0, [r4, #0]
 8020906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802090a:	81a3      	strh	r3, [r4, #12]
 802090c:	9b01      	ldr	r3, [sp, #4]
 802090e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020912:	b15b      	cbz	r3, 802092c <__smakebuf_r+0x70>
 8020914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020918:	4630      	mov	r0, r6
 802091a:	f000 f851 	bl	80209c0 <_isatty_r>
 802091e:	b128      	cbz	r0, 802092c <__smakebuf_r+0x70>
 8020920:	89a3      	ldrh	r3, [r4, #12]
 8020922:	f023 0303 	bic.w	r3, r3, #3
 8020926:	f043 0301 	orr.w	r3, r3, #1
 802092a:	81a3      	strh	r3, [r4, #12]
 802092c:	89a3      	ldrh	r3, [r4, #12]
 802092e:	431d      	orrs	r5, r3
 8020930:	81a5      	strh	r5, [r4, #12]
 8020932:	e7cf      	b.n	80208d4 <__smakebuf_r+0x18>

08020934 <_putc_r>:
 8020934:	b570      	push	{r4, r5, r6, lr}
 8020936:	460d      	mov	r5, r1
 8020938:	4614      	mov	r4, r2
 802093a:	4606      	mov	r6, r0
 802093c:	b118      	cbz	r0, 8020946 <_putc_r+0x12>
 802093e:	6a03      	ldr	r3, [r0, #32]
 8020940:	b90b      	cbnz	r3, 8020946 <_putc_r+0x12>
 8020942:	f7fe f95b 	bl	801ebfc <__sinit>
 8020946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020948:	07d8      	lsls	r0, r3, #31
 802094a:	d405      	bmi.n	8020958 <_putc_r+0x24>
 802094c:	89a3      	ldrh	r3, [r4, #12]
 802094e:	0599      	lsls	r1, r3, #22
 8020950:	d402      	bmi.n	8020958 <_putc_r+0x24>
 8020952:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020954:	f7fe fb65 	bl	801f022 <__retarget_lock_acquire_recursive>
 8020958:	68a3      	ldr	r3, [r4, #8]
 802095a:	3b01      	subs	r3, #1
 802095c:	2b00      	cmp	r3, #0
 802095e:	60a3      	str	r3, [r4, #8]
 8020960:	da05      	bge.n	802096e <_putc_r+0x3a>
 8020962:	69a2      	ldr	r2, [r4, #24]
 8020964:	4293      	cmp	r3, r2
 8020966:	db12      	blt.n	802098e <_putc_r+0x5a>
 8020968:	b2eb      	uxtb	r3, r5
 802096a:	2b0a      	cmp	r3, #10
 802096c:	d00f      	beq.n	802098e <_putc_r+0x5a>
 802096e:	6823      	ldr	r3, [r4, #0]
 8020970:	1c5a      	adds	r2, r3, #1
 8020972:	6022      	str	r2, [r4, #0]
 8020974:	701d      	strb	r5, [r3, #0]
 8020976:	b2ed      	uxtb	r5, r5
 8020978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802097a:	07da      	lsls	r2, r3, #31
 802097c:	d405      	bmi.n	802098a <_putc_r+0x56>
 802097e:	89a3      	ldrh	r3, [r4, #12]
 8020980:	059b      	lsls	r3, r3, #22
 8020982:	d402      	bmi.n	802098a <_putc_r+0x56>
 8020984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020986:	f7fe fb4d 	bl	801f024 <__retarget_lock_release_recursive>
 802098a:	4628      	mov	r0, r5
 802098c:	bd70      	pop	{r4, r5, r6, pc}
 802098e:	4629      	mov	r1, r5
 8020990:	4622      	mov	r2, r4
 8020992:	4630      	mov	r0, r6
 8020994:	f7fe fa23 	bl	801edde <__swbuf_r>
 8020998:	4605      	mov	r5, r0
 802099a:	e7ed      	b.n	8020978 <_putc_r+0x44>

0802099c <_fstat_r>:
 802099c:	b538      	push	{r3, r4, r5, lr}
 802099e:	4d07      	ldr	r5, [pc, #28]	@ (80209bc <_fstat_r+0x20>)
 80209a0:	2300      	movs	r3, #0
 80209a2:	4604      	mov	r4, r0
 80209a4:	4608      	mov	r0, r1
 80209a6:	4611      	mov	r1, r2
 80209a8:	602b      	str	r3, [r5, #0]
 80209aa:	f7e0 fd33 	bl	8001414 <_fstat>
 80209ae:	1c43      	adds	r3, r0, #1
 80209b0:	d102      	bne.n	80209b8 <_fstat_r+0x1c>
 80209b2:	682b      	ldr	r3, [r5, #0]
 80209b4:	b103      	cbz	r3, 80209b8 <_fstat_r+0x1c>
 80209b6:	6023      	str	r3, [r4, #0]
 80209b8:	bd38      	pop	{r3, r4, r5, pc}
 80209ba:	bf00      	nop
 80209bc:	200019d4 	.word	0x200019d4

080209c0 <_isatty_r>:
 80209c0:	b538      	push	{r3, r4, r5, lr}
 80209c2:	4d06      	ldr	r5, [pc, #24]	@ (80209dc <_isatty_r+0x1c>)
 80209c4:	2300      	movs	r3, #0
 80209c6:	4604      	mov	r4, r0
 80209c8:	4608      	mov	r0, r1
 80209ca:	602b      	str	r3, [r5, #0]
 80209cc:	f7e0 fd32 	bl	8001434 <_isatty>
 80209d0:	1c43      	adds	r3, r0, #1
 80209d2:	d102      	bne.n	80209da <_isatty_r+0x1a>
 80209d4:	682b      	ldr	r3, [r5, #0]
 80209d6:	b103      	cbz	r3, 80209da <_isatty_r+0x1a>
 80209d8:	6023      	str	r3, [r4, #0]
 80209da:	bd38      	pop	{r3, r4, r5, pc}
 80209dc:	200019d4 	.word	0x200019d4

080209e0 <_sbrk_r>:
 80209e0:	b538      	push	{r3, r4, r5, lr}
 80209e2:	4d06      	ldr	r5, [pc, #24]	@ (80209fc <_sbrk_r+0x1c>)
 80209e4:	2300      	movs	r3, #0
 80209e6:	4604      	mov	r4, r0
 80209e8:	4608      	mov	r0, r1
 80209ea:	602b      	str	r3, [r5, #0]
 80209ec:	f7e0 fd3a 	bl	8001464 <_sbrk>
 80209f0:	1c43      	adds	r3, r0, #1
 80209f2:	d102      	bne.n	80209fa <_sbrk_r+0x1a>
 80209f4:	682b      	ldr	r3, [r5, #0]
 80209f6:	b103      	cbz	r3, 80209fa <_sbrk_r+0x1a>
 80209f8:	6023      	str	r3, [r4, #0]
 80209fa:	bd38      	pop	{r3, r4, r5, pc}
 80209fc:	200019d4 	.word	0x200019d4

08020a00 <__assert_func>:
 8020a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020a02:	4614      	mov	r4, r2
 8020a04:	461a      	mov	r2, r3
 8020a06:	4b09      	ldr	r3, [pc, #36]	@ (8020a2c <__assert_func+0x2c>)
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	4605      	mov	r5, r0
 8020a0c:	68d8      	ldr	r0, [r3, #12]
 8020a0e:	b14c      	cbz	r4, 8020a24 <__assert_func+0x24>
 8020a10:	4b07      	ldr	r3, [pc, #28]	@ (8020a30 <__assert_func+0x30>)
 8020a12:	9100      	str	r1, [sp, #0]
 8020a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020a18:	4906      	ldr	r1, [pc, #24]	@ (8020a34 <__assert_func+0x34>)
 8020a1a:	462b      	mov	r3, r5
 8020a1c:	f000 f842 	bl	8020aa4 <fiprintf>
 8020a20:	f000 f852 	bl	8020ac8 <abort>
 8020a24:	4b04      	ldr	r3, [pc, #16]	@ (8020a38 <__assert_func+0x38>)
 8020a26:	461c      	mov	r4, r3
 8020a28:	e7f3      	b.n	8020a12 <__assert_func+0x12>
 8020a2a:	bf00      	nop
 8020a2c:	20000070 	.word	0x20000070
 8020a30:	0802226d 	.word	0x0802226d
 8020a34:	0802227a 	.word	0x0802227a
 8020a38:	080222a8 	.word	0x080222a8

08020a3c <_calloc_r>:
 8020a3c:	b570      	push	{r4, r5, r6, lr}
 8020a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8020a42:	b934      	cbnz	r4, 8020a52 <_calloc_r+0x16>
 8020a44:	4629      	mov	r1, r5
 8020a46:	f7ff f9cb 	bl	801fde0 <_malloc_r>
 8020a4a:	4606      	mov	r6, r0
 8020a4c:	b928      	cbnz	r0, 8020a5a <_calloc_r+0x1e>
 8020a4e:	4630      	mov	r0, r6
 8020a50:	bd70      	pop	{r4, r5, r6, pc}
 8020a52:	220c      	movs	r2, #12
 8020a54:	6002      	str	r2, [r0, #0]
 8020a56:	2600      	movs	r6, #0
 8020a58:	e7f9      	b.n	8020a4e <_calloc_r+0x12>
 8020a5a:	462a      	mov	r2, r5
 8020a5c:	4621      	mov	r1, r4
 8020a5e:	f7fe fa63 	bl	801ef28 <memset>
 8020a62:	e7f4      	b.n	8020a4e <_calloc_r+0x12>

08020a64 <__ascii_mbtowc>:
 8020a64:	b082      	sub	sp, #8
 8020a66:	b901      	cbnz	r1, 8020a6a <__ascii_mbtowc+0x6>
 8020a68:	a901      	add	r1, sp, #4
 8020a6a:	b142      	cbz	r2, 8020a7e <__ascii_mbtowc+0x1a>
 8020a6c:	b14b      	cbz	r3, 8020a82 <__ascii_mbtowc+0x1e>
 8020a6e:	7813      	ldrb	r3, [r2, #0]
 8020a70:	600b      	str	r3, [r1, #0]
 8020a72:	7812      	ldrb	r2, [r2, #0]
 8020a74:	1e10      	subs	r0, r2, #0
 8020a76:	bf18      	it	ne
 8020a78:	2001      	movne	r0, #1
 8020a7a:	b002      	add	sp, #8
 8020a7c:	4770      	bx	lr
 8020a7e:	4610      	mov	r0, r2
 8020a80:	e7fb      	b.n	8020a7a <__ascii_mbtowc+0x16>
 8020a82:	f06f 0001 	mvn.w	r0, #1
 8020a86:	e7f8      	b.n	8020a7a <__ascii_mbtowc+0x16>

08020a88 <__ascii_wctomb>:
 8020a88:	4603      	mov	r3, r0
 8020a8a:	4608      	mov	r0, r1
 8020a8c:	b141      	cbz	r1, 8020aa0 <__ascii_wctomb+0x18>
 8020a8e:	2aff      	cmp	r2, #255	@ 0xff
 8020a90:	d904      	bls.n	8020a9c <__ascii_wctomb+0x14>
 8020a92:	228a      	movs	r2, #138	@ 0x8a
 8020a94:	601a      	str	r2, [r3, #0]
 8020a96:	f04f 30ff 	mov.w	r0, #4294967295
 8020a9a:	4770      	bx	lr
 8020a9c:	700a      	strb	r2, [r1, #0]
 8020a9e:	2001      	movs	r0, #1
 8020aa0:	4770      	bx	lr
	...

08020aa4 <fiprintf>:
 8020aa4:	b40e      	push	{r1, r2, r3}
 8020aa6:	b503      	push	{r0, r1, lr}
 8020aa8:	4601      	mov	r1, r0
 8020aaa:	ab03      	add	r3, sp, #12
 8020aac:	4805      	ldr	r0, [pc, #20]	@ (8020ac4 <fiprintf+0x20>)
 8020aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ab2:	6800      	ldr	r0, [r0, #0]
 8020ab4:	9301      	str	r3, [sp, #4]
 8020ab6:	f7ff fdc3 	bl	8020640 <_vfiprintf_r>
 8020aba:	b002      	add	sp, #8
 8020abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ac0:	b003      	add	sp, #12
 8020ac2:	4770      	bx	lr
 8020ac4:	20000070 	.word	0x20000070

08020ac8 <abort>:
 8020ac8:	b508      	push	{r3, lr}
 8020aca:	2006      	movs	r0, #6
 8020acc:	f000 f82c 	bl	8020b28 <raise>
 8020ad0:	2001      	movs	r0, #1
 8020ad2:	f7e0 fc4f 	bl	8001374 <_exit>

08020ad6 <_raise_r>:
 8020ad6:	291f      	cmp	r1, #31
 8020ad8:	b538      	push	{r3, r4, r5, lr}
 8020ada:	4605      	mov	r5, r0
 8020adc:	460c      	mov	r4, r1
 8020ade:	d904      	bls.n	8020aea <_raise_r+0x14>
 8020ae0:	2316      	movs	r3, #22
 8020ae2:	6003      	str	r3, [r0, #0]
 8020ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8020ae8:	bd38      	pop	{r3, r4, r5, pc}
 8020aea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020aec:	b112      	cbz	r2, 8020af4 <_raise_r+0x1e>
 8020aee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020af2:	b94b      	cbnz	r3, 8020b08 <_raise_r+0x32>
 8020af4:	4628      	mov	r0, r5
 8020af6:	f000 f831 	bl	8020b5c <_getpid_r>
 8020afa:	4622      	mov	r2, r4
 8020afc:	4601      	mov	r1, r0
 8020afe:	4628      	mov	r0, r5
 8020b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b04:	f000 b818 	b.w	8020b38 <_kill_r>
 8020b08:	2b01      	cmp	r3, #1
 8020b0a:	d00a      	beq.n	8020b22 <_raise_r+0x4c>
 8020b0c:	1c59      	adds	r1, r3, #1
 8020b0e:	d103      	bne.n	8020b18 <_raise_r+0x42>
 8020b10:	2316      	movs	r3, #22
 8020b12:	6003      	str	r3, [r0, #0]
 8020b14:	2001      	movs	r0, #1
 8020b16:	e7e7      	b.n	8020ae8 <_raise_r+0x12>
 8020b18:	2100      	movs	r1, #0
 8020b1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020b1e:	4620      	mov	r0, r4
 8020b20:	4798      	blx	r3
 8020b22:	2000      	movs	r0, #0
 8020b24:	e7e0      	b.n	8020ae8 <_raise_r+0x12>
	...

08020b28 <raise>:
 8020b28:	4b02      	ldr	r3, [pc, #8]	@ (8020b34 <raise+0xc>)
 8020b2a:	4601      	mov	r1, r0
 8020b2c:	6818      	ldr	r0, [r3, #0]
 8020b2e:	f7ff bfd2 	b.w	8020ad6 <_raise_r>
 8020b32:	bf00      	nop
 8020b34:	20000070 	.word	0x20000070

08020b38 <_kill_r>:
 8020b38:	b538      	push	{r3, r4, r5, lr}
 8020b3a:	4d07      	ldr	r5, [pc, #28]	@ (8020b58 <_kill_r+0x20>)
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	4604      	mov	r4, r0
 8020b40:	4608      	mov	r0, r1
 8020b42:	4611      	mov	r1, r2
 8020b44:	602b      	str	r3, [r5, #0]
 8020b46:	f7e0 fc05 	bl	8001354 <_kill>
 8020b4a:	1c43      	adds	r3, r0, #1
 8020b4c:	d102      	bne.n	8020b54 <_kill_r+0x1c>
 8020b4e:	682b      	ldr	r3, [r5, #0]
 8020b50:	b103      	cbz	r3, 8020b54 <_kill_r+0x1c>
 8020b52:	6023      	str	r3, [r4, #0]
 8020b54:	bd38      	pop	{r3, r4, r5, pc}
 8020b56:	bf00      	nop
 8020b58:	200019d4 	.word	0x200019d4

08020b5c <_getpid_r>:
 8020b5c:	f7e0 bbf2 	b.w	8001344 <_getpid>

08020b60 <_init>:
 8020b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b62:	bf00      	nop
 8020b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b66:	bc08      	pop	{r3}
 8020b68:	469e      	mov	lr, r3
 8020b6a:	4770      	bx	lr

08020b6c <_fini>:
 8020b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b6e:	bf00      	nop
 8020b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b72:	bc08      	pop	{r3}
 8020b74:	469e      	mov	lr, r3
 8020b76:	4770      	bx	lr
